

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu May 07 04:46:49 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           	psect	smallconst
    73  000600                     __psmallconst:
    74                           	opt stack 0
    75  000600  00                 	db	0
    76  000601                     _dpowers:
    77                           	opt stack 0
    78  000601  0001               	dw	1
    79  000603  0000               	dw	0
    80  000605  000A               	dw	10
    81  000607  0000               	dw	0
    82  000609  0064               	dw	100
    83  00060B  0000               	dw	0
    84  00060D  03E8               	dw	1000
    85  00060F  0000               	dw	0
    86  000611  2710               	dw	10000
    87  000613  0000               	dw	0
    88  000615  86A0               	dw	34464
    89  000617  0001               	dw	1
    90  000619  4240               	dw	16960
    91  00061B  000F               	dw	15
    92  00061D  9680               	dw	38528
    93  00061F  0098               	dw	152
    94  000621  E100               	dw	57600
    95  000623  05F5               	dw	1525
    96  000625  CA00               	dw	51712
    97  000627  3B9A               	dw	15258
    98  000629                     __end_of_dpowers:
    99                           	opt stack 0
   100  000629                     __npowers_:
   101                           	opt stack 0
   102  000629  00                 	db	0
   103  00062A  80                 	db	128
   104  00062B  3F                 	db	63
   105  00062C  CD                 	db	205
   106  00062D  CC                 	db	204
   107  00062E  3D                 	db	61
   108  00062F  D7                 	db	215
   109  000630  23                 	db	35
   110  000631  3C                 	db	60
   111  000632  12                 	db	18
   112  000633  83                 	db	131
   113  000634  3A                 	db	58
   114  000635  B7                 	db	183
   115  000636  D1                 	db	209
   116  000637  38                 	db	56
   117  000638  C6                 	db	198
   118  000639  27                 	db	39
   119  00063A  37                 	db	55
   120  00063B  38                 	db	56
   121  00063C  86                 	db	134
   122  00063D  35                 	db	53
   123  00063E  C0                 	db	192
   124  00063F  D6                 	db	214
   125  000640  33                 	db	51
   126  000641  CC                 	db	204
   127  000642  2B                 	db	43
   128  000643  32                 	db	50
   129  000644  70                 	db	112
   130  000645  89                 	db	137
   131  000646  30                 	db	48
   132  000647  E7                 	db	231
   133  000648  DB                 	db	219
   134  000649  2E                 	db	46
   135  00064A  E5                 	db	229
   136  00064B  3C                 	db	60
   137  00064C  1E                 	db	30
   138  00064D  42                 	db	66
   139  00064E  A2                 	db	162
   140  00064F  0D                 	db	13
   141  000650                     __end_of__npowers_:
   142                           	opt stack 0
   143  000650                     __powers_:
   144                           	opt stack 0
   145  000650  00                 	db	0
   146  000651  80                 	db	128
   147  000652  3F                 	db	63
   148  000653  00                 	db	0
   149  000654  20                 	db	32
   150  000655  41                 	db	65
   151  000656  00                 	db	0
   152  000657  C8                 	db	200
   153  000658  42                 	db	66
   154  000659  00                 	db	0
   155  00065A  7A                 	db	122
   156  00065B  44                 	db	68
   157  00065C  40                 	db	64
   158  00065D  1C                 	db	28
   159  00065E  46                 	db	70
   160  00065F  50                 	db	80
   161  000660  C3                 	db	195
   162  000661  47                 	db	71
   163  000662  24                 	db	36
   164  000663  74                 	db	116
   165  000664  49                 	db	73
   166  000665  97                 	db	151
   167  000666  18                 	db	24
   168  000667  4B                 	db	75
   169  000668  BC                 	db	188
   170  000669  BE                 	db	190
   171  00066A  4C                 	db	76
   172  00066B  6B                 	db	107
   173  00066C  6E                 	db	110
   174  00066D  4E                 	db	78
   175  00066E  03                 	db	3
   176  00066F  15                 	db	21
   177  000670  50                 	db	80
   178  000671  79                 	db	121
   179  000672  AD                 	db	173
   180  000673  60                 	db	96
   181  000674  F3                 	db	243
   182  000675  49                 	db	73
   183  000676  71                 	db	113
   184  000677                     __end_of__powers_:
   185                           	opt stack 0
   186  000677                     log@coeff:
   187                           	opt stack 0
   188  000677  00                 	db	0
   189  000678  00                 	db	0
   190  000679  00                 	db	0
   191  00067A  00                 	db	0
   192  00067B  80                 	db	128
   193  00067C  3F                 	db	63
   194  00067D  F0                 	db	240
   195  00067E  FF                 	db	255
   196  00067F  BE                 	db	190
   197  000680  E2                 	db	226
   198  000681  A9                 	db	169
   199  000682  3E                 	db	62
   200  000683  83                 	db	131
   201  000684  76                 	db	118
   202  000685  BE                 	db	190
   203  000686  AE                 	db	174
   204  000687  2B                 	db	43
   205  000688  3E                 	db	62
   206  000689  3C                 	db	60
   207  00068A  C3                 	db	195
   208  00068B  BD                 	db	189
   209  00068C  D2                 	db	210
   210  00068D  13                 	db	19
   211  00068E  3D                 	db	61
   212  00068F  78                 	db	120
   213  000690  D3                 	db	211
   214  000691  BB                 	db	187
   215  000692                     __end_oflog@coeff:
   216                           	opt stack 0
   217  0000                     _TMR1	set	4046
   218  0000                     _ADCON0	set	4034
   219  0000                     _ADCON0bits	set	4034
   220  0000                     _ADCON1	set	4033
   221  0000                     _ADCON2	set	4032
   222  0000                     _ADRESH	set	4036
   223  0000                     _ADRESL	set	4035
   224  0000                     _ANSELA	set	3896
   225  0000                     _ANSELB	set	3897
   226  0000                     _ANSELC	set	3898
   227  0000                     _ANSELD	set	3899
   228  0000                     _ANSELE	set	3900
   229  0000                     _BAUD1CON	set	4024
   230  0000                     _INTCON2bits	set	4081
   231  0000                     _INTCONbits	set	4082
   232  0000                     _IPR1bits	set	3999
   233  0000                     _LATA	set	3977
   234  0000                     _LATB	set	3978
   235  0000                     _LATC	set	3979
   236  0000                     _LATD	set	3980
   237  0000                     _LATE	set	3981
   238  0000                     _OSCCON	set	4051
   239  0000                     _OSCCON2	set	4050
   240  0000                     _OSCTUNE	set	3995
   241  0000                     _PIE1bits	set	3997
   242  0000                     _PIR1bits	set	3998
   243  0000                     _RC1STA	set	4011
   244  0000                     _RC1STAbits	set	4011
   245  0000                     _RCONbits	set	4048
   246  0000                     _RCREG1	set	4014
   247  0000                     _SPBRG1	set	4015
   248  0000                     _SPBRGH1	set	4016
   249  0000                     _T1CON	set	4045
   250  0000                     _T1CONbits	set	4045
   251  0000                     _T1GCON	set	4044
   252  0000                     _T1GCONbits	set	4044
   253  0000                     _TMR1H	set	4047
   254  0000                     _TMR1L	set	4046
   255  0000                     _TRISA	set	3986
   256  0000                     _TRISB	set	3987
   257  0000                     _TRISC	set	3988
   258  0000                     _TRISD	set	3989
   259  0000                     _TRISE	set	3990
   260  0000                     _TX1STA	set	4012
   261  0000                     _TXREG1	set	4013
   262  0000                     _WPUB	set	3937
   263  0000                     _LATA0	set	31816
   264  0000                     _LATA4	set	31820
   265  0000                     _LATA6	set	31822
   266  0000                     _LATB0	set	31824
   267  0000                     _LATB1	set	31825
   268  0000                     _LATB3	set	31827
   269  0000                     _LATC0	set	31832
   270  0000                     _LATC1	set	31833
   271  0000                     _LATC4	set	31836
   272  0000                     _LATC5	set	31837
   273  0000                     _LATD1	set	31841
   274  0000                     _LATD2	set	31842
   275  0000                     _LATD3	set	31843
   276  0000                     _LATD5	set	31845
   277  000692                     __stringdata:
   278                           	opt stack 0
   279  000692                     STR_2:
   280  000692  42                 	db	66	;'B'
   281  000693  61                 	db	97	;'a'
   282  000694  74                 	db	116	;'t'
   283  000695  74                 	db	116	;'t'
   284  000696  65                 	db	101	;'e'
   285  000697  72                 	db	114	;'r'
   286  000698  79                 	db	121	;'y'
   287  000699  20                 	db	32
   288  00069A  25                 	db	37
   289  00069B  64                 	db	100	;'d'
   290  00069C  20                 	db	32
   291  00069D  3D                 	db	61	;'='
   292  00069E  20                 	db	32
   293  00069F  25                 	db	37
   294  0006A0  30                 	db	48	;'0'
   295  0006A1  2E                 	db	46
   296  0006A2  30                 	db	48	;'0'
   297  0006A3  32                 	db	50	;'2'
   298  0006A4  66                 	db	102	;'f'
   299  0006A5  20                 	db	32
   300  0006A6  0D                 	db	13
   301  0006A7  0A                 	db	10
   302  0006A8  00                 	db	0
   303  0006A9                     STR_1:
   304  0006A9  48                 	db	72	;'H'
   305  0006AA  69                 	db	105	;'i'
   306  0006AB  20                 	db	32
   307  0006AC  4D                 	db	77	;'M'
   308  0006AD  6F                 	db	111	;'o'
   309  0006AE  74                 	db	116	;'t'
   310  0006AF  68                 	db	104	;'h'
   311  0006B0  65                 	db	101	;'e'
   312  0006B1  72                 	db	114	;'r'
   313  0006B2  20                 	db	32
   314  0006B3  46                 	db	70	;'F'
   315  0006B4  75                 	db	117	;'u'
   316  0006B5  63                 	db	99	;'c'
   317  0006B6  6B                 	db	107	;'k'
   318  0006B7  65                 	db	101	;'e'
   319  0006B8  72                 	db	114	;'r'
   320  0006B9  00                 	db	0
   321  0006BA                     __end_of__stringdata:
   322                           	opt stack 0
   323                           
   324                           ; #config settings
   325  0006BA  00                 	db	0	; dummy byte at the end
   326  0000                     
   327                           	psect	nvCOMRAM
   328  000043                     __pnvCOMRAM:
   329                           	opt stack 0
   330  000043                     _timer1ReloadVal:
   331                           	opt stack 0
   332  000043                     	ds	2
   333  000045                     _eusart1TxBufferRemaining:
   334                           	opt stack 0
   335  000045                     	ds	1
   336                           
   337                           	psect	cinit
   338  003D90                     __pcinit:
   339                           	opt stack 0
   340  003D90                     start_initialization:
   341                           	opt stack 0
   342  003D90                     __initialization:
   343                           	opt stack 0
   344                           
   345                           ; Clear objects allocated to BANK1 (230 bytes)
   346  003D90  EE01  F000         	lfsr	0,__pbssBANK1
   347  003D94  0EE6               	movlw	230
   348  003D96                     clear_0:
   349  003D96  6AEE               	clrf	postinc0,c
   350  003D98  06E8               	decf	wreg,f,c
   351  003D9A  E1FD               	bnz	clear_0
   352                           
   353                           ; Clear objects allocated to BANK0 (66 bytes)
   354  003D9C  EE00  F0B6         	lfsr	0,__pbssBANK0
   355  003DA0  0E42               	movlw	66
   356  003DA2                     clear_1:
   357  003DA2  6AEE               	clrf	postinc0,c
   358  003DA4  06E8               	decf	wreg,f,c
   359  003DA6  E1FD               	bnz	clear_1
   360                           
   361                           ; Clear objects allocated to COMRAM (19 bytes)
   362  003DA8  EE00  F030         	lfsr	0,__pbssCOMRAM
   363  003DAC  0E13               	movlw	19
   364  003DAE                     clear_2:
   365  003DAE  6AEE               	clrf	postinc0,c
   366  003DB0  06E8               	decf	wreg,f,c
   367  003DB2  E1FD               	bnz	clear_2
   368  003DB4                     end_of_initialization:
   369                           	opt stack 0
   370  003DB4                     __end_of__initialization:
   371                           	opt stack 0
   372  003DB4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   373  003DB6  6EF8               	movwf	tblptru,c
   374  003DB8  0100               	movlb	0
   375  003DBA  EFEA  F01A         	goto	_main	;jump to C main() function
   376                           tblptru	equ	0xFF8
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           
   380                           	psect	bssCOMRAM
   381  000030                     __pbssCOMRAM:
   382                           	opt stack 0
   383  000030                     _eusart1TxBuffer:
   384                           	opt stack 0
   385  000030                     	ds	8
   386  000038                     _ADC_Buffer_Point:
   387                           	opt stack 0
   388  000038                     	ds	2
   389  00003A                     _CountCallBack:
   390                           	opt stack 0
   391  00003A                     	ds	2
   392  00003C                     _Temp_Aquire:
   393                           	opt stack 0
   394  00003C                     	ds	1
   395  00003D                     _Volt_Aquire:
   396                           	opt stack 0
   397  00003D                     	ds	1
   398  00003E                     _eusart1RxCount:
   399                           	opt stack 0
   400  00003E                     	ds	1
   401  00003F                     _eusart1RxHead:
   402                           	opt stack 0
   403  00003F                     	ds	1
   404  000040                     _eusart1RxTail:
   405                           	opt stack 0
   406  000040                     	ds	1
   407  000041                     _eusart1TxHead:
   408                           	opt stack 0
   409  000041                     	ds	1
   410  000042                     _eusart1TxTail:
   411                           	opt stack 0
   412  000042                     	ds	1
   413                           tblptru	equ	0xFF8
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           
   417                           	psect	bssBANK0
   418  0000B6                     __pbssBANK0:
   419                           	opt stack 0
   420  0000B6                     _Battery_Adc:
   421                           	opt stack 0
   422  0000B6                     	ds	40
   423  0000DE                     _Temp_Done:
   424                           	opt stack 0
   425  0000DE                     	ds	2
   426  0000E0                     _Volt_Done:
   427                           	opt stack 0
   428  0000E0                     	ds	2
   429  0000E2                     _errno:
   430                           	opt stack 0
   431  0000E2                     	ds	2
   432  0000E4                     _Temp_Adc:
   433                           	opt stack 0
   434  0000E4                     	ds	20
   435                           tblptru	equ	0xFF8
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           
   439                           	psect	bssBANK1
   440  000100                     __pbssBANK1:
   441                           	opt stack 0
   442  000100                     _eusart1RxBuffer:
   443                           	opt stack 0
   444  000100                     	ds	50
   445  000132                     _Battery_Volt:
   446                           	opt stack 0
   447  000132                     	ds	30
   448  000150                     _PrevBattery_Volt:
   449                           	opt stack 0
   450  000150                     	ds	30
   451  00016E                     _PrevTemp_DegF:
   452                           	opt stack 0
   453  00016E                     	ds	30
   454  00018C                     _Temp_DegF:
   455                           	opt stack 0
   456  00018C                     	ds	30
   457  0001AA                     _TempBattery_Volt:
   458                           	opt stack 0
   459  0001AA                     	ds	30
   460  0001C8                     _TmpTemp_DegF:
   461                           	opt stack 0
   462  0001C8                     	ds	30
   463                           tblptru	equ	0xFF8
   464                           postinc0	equ	0xFEE
   465                           wreg	equ	0xFE8
   466                           
   467                           	psect	cstackBANK2
   468  000200                     __pcstackBANK2:
   469                           	opt stack 0
   470  000200                     _printf$1706:
   471                           	opt stack 0
   472                           
   473                           ; 3 bytes @ 0x0
   474  000200                     	ds	3
   475  000203                     _printf$1053:
   476                           	opt stack 0
   477                           
   478                           ; 4 bytes @ 0x3
   479  000203                     	ds	4
   480  000207                     printf@vd:
   481                           	opt stack 0
   482                           
   483                           ; 4 bytes @ 0x7
   484  000207                     	ds	4
   485  00020B                     printf@vd_1055:
   486                           	opt stack 0
   487                           
   488                           ; 4 bytes @ 0xB
   489  00020B                     	ds	4
   490  00020F                     printf@ap:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0xF
   494  00020F                     	ds	2
   495  000211                     printf@integ:
   496                           	opt stack 0
   497                           
   498                           ; 3 bytes @ 0x11
   499  000211                     	ds	3
   500  000214                     printf@_val:
   501                           	opt stack 0
   502                           
   503                           ; 5 bytes @ 0x14
   504  000214                     	ds	5
   505  000219                     printf@exp:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x19
   509  000219                     	ds	2
   510  00021B                     printf@flag:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x1B
   514  00021B                     	ds	2
   515  00021D                     printf@width:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x1D
   519  00021D                     	ds	2
   520  00021F                     printf@fval:
   521                           	opt stack 0
   522                           
   523                           ; 3 bytes @ 0x1F
   524  00021F                     	ds	3
   525  000222                     printf@prec:
   526                           	opt stack 0
   527                           
   528                           ; 2 bytes @ 0x22
   529  000222                     	ds	2
   530  000224                     printf@c:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x24
   534  000224                     	ds	1
   535                           tblptru	equ	0xFF8
   536                           postinc0	equ	0xFEE
   537                           wreg	equ	0xFE8
   538                           
   539                           	psect	cstackBANK0
   540  000060                     __pcstackBANK0:
   541                           	opt stack 0
   542  000060                     ?___ftdiv:
   543                           	opt stack 0
   544  000060                     ?_Battery_Get:
   545                           	opt stack 0
   546  000060                     ___llmod@counter:
   547                           	opt stack 0
   548  000060                     Battery_Get@channelnum:
   549                           	opt stack 0
   550  000060                     ___ftdiv@f1:
   551                           	opt stack 0
   552  000060                     ___ftge@ff1:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0x0
   556  000060                     	ds	3
   557  000063                     ___ftdiv@f2:
   558                           	opt stack 0
   559  000063                     ___ftge@ff2:
   560                           	opt stack 0
   561                           
   562                           ; 3 bytes @ 0x3
   563  000063                     	ds	3
   564  000066                     ??___ftge:
   565  000066                     ___ftdiv@cntr:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x6
   569  000066                     	ds	1
   570  000067                     ___ftdiv@f3:
   571                           	opt stack 0
   572                           
   573                           ; 3 bytes @ 0x7
   574  000067                     	ds	2
   575  000069                     Battery_Fault@fault:
   576                           	opt stack 0
   577  000069                     Temp_Fault@fault:
   578                           	opt stack 0
   579  000069                     RunBypas@cellbyp:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x9
   583  000069                     	ds	1
   584  00006A                     ___ftdiv@exp:
   585                           	opt stack 0
   586  00006A                     Battery_Fault@i:
   587                           	opt stack 0
   588  00006A                     Temp_Fault@i:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0xA
   592  00006A                     	ds	1
   593  00006B                     ___ftdiv@sign:
   594                           	opt stack 0
   595  00006B                     RunBypas@batvolt:
   596                           	opt stack 0
   597                           
   598                           ; 3 bytes @ 0xB
   599  00006B                     	ds	1
   600  00006C                     ?___ftmul:
   601                           	opt stack 0
   602  00006C                     ___ftmul@f1:
   603                           	opt stack 0
   604                           
   605                           ; 3 bytes @ 0xC
   606  00006C                     	ds	2
   607  00006E                     RunBypas@i:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0xE
   611  00006E                     	ds	1
   612  00006F                     ___ftmul@f2:
   613                           	opt stack 0
   614                           
   615                           ; 3 bytes @ 0xF
   616  00006F                     	ds	3
   617  000072                     ??___ftmul:
   618                           
   619                           ; 0 bytes @ 0x12
   620  000072                     	ds	3
   621  000075                     ___ftmul@exp:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x15
   625  000075                     	ds	1
   626  000076                     ___ftmul@f3_as_product:
   627                           	opt stack 0
   628                           
   629                           ; 3 bytes @ 0x16
   630  000076                     	ds	3
   631  000079                     ___ftmul@cntr:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x19
   635  000079                     	ds	1
   636  00007A                     ___ftmul@sign:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x1A
   640  00007A                     	ds	1
   641  00007B                     ?_fround:
   642                           	opt stack 0
   643  00007B                     ?_scale:
   644                           	opt stack 0
   645                           
   646                           ; 3 bytes @ 0x1B
   647  00007B                     	ds	3
   648  00007E                     _fround$1704:
   649                           	opt stack 0
   650  00007E                     _scale$1705:
   651                           	opt stack 0
   652                           
   653                           ; 3 bytes @ 0x1E
   654  00007E                     	ds	3
   655  000081                     scale@scl:
   656                           	opt stack 0
   657  000081                     _fround$1703:
   658                           	opt stack 0
   659                           
   660                           ; 3 bytes @ 0x21
   661  000081                     	ds	1
   662  000082                     ?___fttol:
   663                           	opt stack 0
   664  000082                     ___fttol@f1:
   665                           	opt stack 0
   666                           
   667                           ; 3 bytes @ 0x22
   668  000082                     	ds	2
   669  000084                     fround@prec:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x24
   673  000084                     	ds	1
   674  000085                     ?___ftadd:
   675                           	opt stack 0
   676  000085                     ___ftadd@f1:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x25
   680  000085                     	ds	1
   681  000086                     ??___fttol:
   682                           
   683                           ; 0 bytes @ 0x26
   684  000086                     	ds	2
   685  000088                     ___ftadd@f2:
   686                           	opt stack 0
   687                           
   688                           ; 3 bytes @ 0x28
   689  000088                     	ds	3
   690  00008B                     ??___ftadd:
   691  00008B                     ___fttol@sign1:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x2B
   695  00008B                     	ds	1
   696  00008C                     ___fttol@lval:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x2C
   700  00008C                     	ds	2
   701  00008E                     ___ftadd@sign:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x2E
   705  00008E                     	ds	1
   706  00008F                     ___ftadd@exp2:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x2F
   710  00008F                     	ds	1
   711  000090                     ___ftadd@exp1:
   712                           	opt stack 0
   713  000090                     ___fttol@exp1:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x30
   717  000090                     	ds	1
   718  000091                     ?___ftsub:
   719                           	opt stack 0
   720  000091                     ?_eval_poly:
   721                           	opt stack 0
   722  000091                     Battery_Filter@x:
   723                           	opt stack 0
   724  000091                     Temp_Filter@x:
   725                           	opt stack 0
   726  000091                     ___ftsub@f1:
   727                           	opt stack 0
   728  000091                     eval_poly@x:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x31
   732  000091                     	ds	2
   733  000093                     ??_Battery_Convert:
   734                           
   735                           ; 0 bytes @ 0x33
   736  000093                     	ds	1
   737  000094                     eval_poly@d:
   738                           	opt stack 0
   739  000094                     ___ftsub@f2:
   740                           	opt stack 0
   741                           
   742                           ; 3 bytes @ 0x34
   743  000094                     	ds	1
   744  000095                     Battery_Convert@x:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x35
   748  000095                     	ds	1
   749  000096                     eval_poly@n:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x36
   753  000096                     	ds	1
   754  000097                     ?_printf:
   755                           	opt stack 0
   756  000097                     printf@f:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x37
   760  000097                     	ds	1
   761  000098                     ??_eval_poly:
   762                           
   763                           ; 0 bytes @ 0x38
   764  000098                     	ds	2
   765  00009A                     eval_poly@res:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x3A
   769  00009A                     	ds	3
   770  00009D                     ?_log:
   771                           	opt stack 0
   772  00009D                     log@x:
   773                           	opt stack 0
   774                           
   775                           ; 3 bytes @ 0x3D
   776  00009D                     	ds	1
   777  00009E                     ??_printf:
   778                           
   779                           ; 0 bytes @ 0x3E
   780  00009E                     	ds	2
   781  0000A0                     log@exponent:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x40
   785  0000A0                     	ds	2
   786  0000A2                     ??_Temp_Convert:
   787                           
   788                           ; 0 bytes @ 0x42
   789  0000A2                     	ds	2
   790  0000A4                     _Temp_Convert$1701:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x44
   794  0000A4                     	ds	2
   795  0000A6                     _Temp_Convert$1702:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x46
   799  0000A6                     	ds	2
   800  0000A8                     Temp_Convert@x:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x48
   804  0000A8                     	ds	2
   805  0000AA                     Temp_Convert@steinhart:
   806                           	opt stack 0
   807                           
   808                           ; 3 bytes @ 0x4A
   809  0000AA                     	ds	3
   810  0000AD                     
   811                           ; 2 bytes @ 0x4D
   812  0000AD                     	ds	2
   813  0000AF                     
   814                           ; 3 bytes @ 0x4F
   815  0000AF                     	ds	3
   816  0000B2                     main@x:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x52
   820  0000B2                     	ds	2
   821  0000B4                     main@x_971:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x54
   825  0000B4                     	ds	2
   826                           tblptru	equ	0xFF8
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           
   830                           	psect	cstackCOMRAM
   831  000001                     __pcstackCOMRAM:
   832                           	opt stack 0
   833  000001                     ??_ADC_StartConversion:
   834  000001                     ?_ADC_GetConversionResult:
   835                           	opt stack 0
   836  000001                     Set_4051@Channel:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x0
   840  000001                     	ds	1
   841  000002                     ADC_StartConversion@channel:
   842                           	opt stack 0
   843                           
   844                           ; 1 bytes @ 0x1
   845  000002                     	ds	1
   846  000003                     ??_Set_4051:
   847  000003                     ??_TMR1_ISR:
   848  000003                     ??_ADC_GetConversionResult:
   849                           
   850                           ; 0 bytes @ 0x2
   851  000003                     	ds	2
   852  000005                     ??_ADC_ISR:
   853                           
   854                           ; 0 bytes @ 0x4
   855  000005                     	ds	6
   856  00000B                     ADC_ISR@ADC_Result:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0xA
   860  00000B                     	ds	2
   861  00000D                     ??_INTERRUPT_InterruptManager:
   862                           
   863                           ; 0 bytes @ 0xC
   864  00000D                     	ds	14
   865  00001B                     ??_isdigit:
   866  00001B                     ?___awmod:
   867                           	opt stack 0
   868  00001B                     ?___ftpack:
   869                           	opt stack 0
   870  00001B                     ?_frexp:
   871                           	opt stack 0
   872  00001B                     ?___ftneg:
   873                           	opt stack 0
   874  00001B                     ?__tdiv_to_l_:
   875                           	opt stack 0
   876  00001B                     ?__div_to_l_:
   877                           	opt stack 0
   878  00001B                     ?___lldiv:
   879                           	opt stack 0
   880  00001B                     EUSART1_Write@txData:
   881                           	opt stack 0
   882  00001B                     SetBypass@pin:
   883                           	opt stack 0
   884  00001B                     ___awmod@dividend:
   885                           	opt stack 0
   886  00001B                     __div_to_l_@f1:
   887                           	opt stack 0
   888  00001B                     ___ftpack@arg:
   889                           	opt stack 0
   890  00001B                     __tdiv_to_l_@f1:
   891                           	opt stack 0
   892  00001B                     ___ftneg@f1:
   893                           	opt stack 0
   894  00001B                     frexp@value:
   895                           	opt stack 0
   896  00001B                     ___lldiv@dividend:
   897                           	opt stack 0
   898                           
   899                           ; 4 bytes @ 0x1A
   900  00001B                     	ds	1
   901  00001C                     putch@txData:
   902                           	opt stack 0
   903  00001C                     _isdigit$1336:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x1B
   907  00001C                     	ds	1
   908  00001D                     isdigit@c:
   909                           	opt stack 0
   910  00001D                     SetBypass@state:
   911                           	opt stack 0
   912  00001D                     ___awmod@divisor:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x1C
   916  00001D                     	ds	1
   917  00001E                     ___ftpack@exp:
   918                           	opt stack 0
   919  00001E                     frexp@eptr:
   920                           	opt stack 0
   921  00001E                     __div_to_l_@f2:
   922                           	opt stack 0
   923  00001E                     __tdiv_to_l_@f2:
   924                           	opt stack 0
   925                           
   926                           ; 3 bytes @ 0x1D
   927  00001E                     	ds	1
   928  00001F                     ??_SetBypass:
   929  00001F                     ___awmod@counter:
   930                           	opt stack 0
   931  00001F                     ___ftpack@sign:
   932                           	opt stack 0
   933  00001F                     ___lldiv@divisor:
   934                           	opt stack 0
   935                           
   936                           ; 4 bytes @ 0x1E
   937  00001F                     	ds	1
   938  000020                     ??___ftpack:
   939  000020                     ??_frexp:
   940  000020                     ___awmod@sign:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x1F
   944  000020                     	ds	1
   945  000021                     ??__tdiv_to_l_:
   946  000021                     ??__div_to_l_:
   947  000021                     ?___awdiv:
   948                           	opt stack 0
   949  000021                     ___awdiv@dividend:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x20
   953  000021                     	ds	2
   954  000023                     ?___altoft:
   955                           	opt stack 0
   956  000023                     ?___lltoft:
   957                           	opt stack 0
   958  000023                     ___awdiv@divisor:
   959                           	opt stack 0
   960  000023                     ___altoft@c:
   961                           	opt stack 0
   962  000023                     ___lldiv@quotient:
   963                           	opt stack 0
   964  000023                     ___lltoft@c:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0x22
   968  000023                     	ds	1
   969  000024                     __tdiv_to_l_@quot:
   970                           	opt stack 0
   971                           
   972                           ; 4 bytes @ 0x23
   973  000024                     	ds	1
   974  000025                     ___awdiv@counter:
   975                           	opt stack 0
   976  000025                     __div_to_l_@quot:
   977                           	opt stack 0
   978                           
   979                           ; 4 bytes @ 0x24
   980  000025                     	ds	1
   981  000026                     ___awdiv@sign:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x25
   985  000026                     	ds	1
   986  000027                     ??___altoft:
   987  000027                     ??___lltoft:
   988  000027                     ___lldiv@counter:
   989                           	opt stack 0
   990  000027                     ___awdiv@quotient:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x26
   994  000027                     	ds	1
   995  000028                     ?___llmod:
   996                           	opt stack 0
   997  000028                     __tdiv_to_l_@cntr:
   998                           	opt stack 0
   999  000028                     ___llmod@dividend:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x27
  1003  000028                     	ds	1
  1004  000029                     ?___wmul:
  1005                           	opt stack 0
  1006  000029                     ?___awtoft:
  1007                           	opt stack 0
  1008  000029                     __div_to_l_@cntr:
  1009                           	opt stack 0
  1010  000029                     __tdiv_to_l_@exp1:
  1011                           	opt stack 0
  1012  000029                     ___wmul@multiplier:
  1013                           	opt stack 0
  1014  000029                     ___awtoft@c:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x28
  1018  000029                     	ds	1
  1019  00002A                     __div_to_l_@exp1:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x29
  1023  00002A                     	ds	1
  1024  00002B                     ___altoft@exp:
  1025                           	opt stack 0
  1026  00002B                     ___lltoft@exp:
  1027                           	opt stack 0
  1028  00002B                     ___wmul@multiplicand:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x2A
  1032  00002B                     	ds	1
  1033  00002C                     ___altoft@sign:
  1034                           	opt stack 0
  1035  00002C                     ___awtoft@sign:
  1036                           	opt stack 0
  1037  00002C                     ___llmod@divisor:
  1038                           	opt stack 0
  1039                           
  1040                           ; 4 bytes @ 0x2B
  1041  00002C                     	ds	1
  1042  00002D                     ??___ftdiv:
  1043  00002D                     ___wmul@product:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x2C
  1047  00002D                     	ds	2
  1048  00002F                     
  1049                           ; 0 bytes @ 0x2E
  1050  00002F                     	ds	1
  1051  000030                     tblptru	equ	0xFF8
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           
  1055                           ; 0 bytes @ 0x2F
  1056 ;;
  1057 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1058 ;;
  1059 ;; *************** function _main *****************
  1060 ;; Defined at:
  1061 ;;		line 30 in file "Main.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;  argc            2   77[BANK0 ] int 
  1064 ;;  argv            3   79[BANK0 ] PTR PTR unsigned char 
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;  x               2   84[BANK0 ] int 
  1067 ;;  x               2   82[BANK0 ] int 
  1068 ;; Return value:  Size  Location     Type
  1069 ;;                  2   77[BANK0 ] int 
  1070 ;; Registers used:
  1071 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1072 ;; Tracked objects:
  1073 ;;		On entry : 0/0
  1074 ;;		On exit  : 0/0
  1075 ;;		Unchanged: 0/0
  1076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1077 ;;      Params:         0       5       0       0       0       0       0
  1078 ;;      Locals:         0       4       0       0       0       0       0
  1079 ;;      Temps:          0       0       0       0       0       0       0
  1080 ;;      Totals:         0       9       0       0       0       0       0
  1081 ;;Total ram usage:        9 bytes
  1082 ;; Hardware stack levels required when called:    9
  1083 ;; This function calls:
  1084 ;;		_Battery_Convert
  1085 ;;		_Battery_Fault
  1086 ;;		_Battery_Get
  1087 ;;		_RunBypas
  1088 ;;		_SYSTEM_Initialize
  1089 ;;		_Temp_Convert
  1090 ;;		_Temp_Fault
  1091 ;;		_printf
  1092 ;; This function is called by:
  1093 ;;		Startup code after reset
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text0
  1098  0035D4                     __ptext0:
  1099                           	opt stack 0
  1100  0035D4                     _main:
  1101                           	opt stack 22
  1102                           
  1103                           ;Main.c: 32: SYSTEM_Initialize();
  1104                           
  1105                           ;incstack = 0
  1106  0035D4  EC3D  F01F         	call	_SYSTEM_Initialize	;wreg free
  1107                           
  1108                           ;Main.c: 51: (INTCONbits.GIE = 1);
  1109  0035D8  8EF2               	bsf	intcon,7,c	;volatile
  1110                           
  1111                           ;Main.c: 54: (INTCONbits.PEIE = 1);
  1112  0035DA  8CF2               	bsf	intcon,6,c	;volatile
  1113                           
  1114                           ;Main.c: 63: printf("Hi Mother Fucker");
  1115  0035DC  0E06               	movlw	high STR_1
  1116  0035DE  0100               	movlb	0	; () banked
  1117  0035E0  6F98               	movwf	(printf@f+1)& (0+255),b
  1118  0035E2  0EA9               	movlw	low STR_1
  1119  0035E4  0100               	movlb	0	; () banked
  1120  0035E6  6F97               	movwf	printf@f& (0+255),b
  1121  0035E8  EC5E  F003         	call	_printf	;wreg free
  1122  0035EC                     l5728:
  1123                           
  1124                           ;Main.c: 65: {
  1125                           ;Main.c: 66: if (Temp_Done)
  1126  0035EC  0100               	movlb	0	; () banked
  1127  0035EE  51DF               	movf	(_Temp_Done+1)& (0+255),w,b
  1128  0035F0  11DE               	iorwf	_Temp_Done& (0+255),w,b
  1129  0035F2  B4D8               	btfsc	status,2,c
  1130  0035F4  D017               	goto	l5744
  1131                           
  1132                           ; BSR set to: 0
  1133                           ;Main.c: 67: {
  1134                           ;Main.c: 68: Temp_Convert();
  1135  0035F6  EC7B  F011         	call	_Temp_Convert	;wreg free
  1136                           
  1137                           ;Main.c: 69: Temp_Fault();
  1138  0035FA  EC08  F01D         	call	_Temp_Fault	;wreg free
  1139                           
  1140                           ;Main.c: 70: for (int x = 0;x<9;x++)
  1141  0035FE  0E00               	movlw	0
  1142  003600  0100               	movlb	0	; () banked
  1143  003602  6FB3               	movwf	(main@x+1)& (0+255),b
  1144  003604  0E00               	movlw	0
  1145  003606  0100               	movlb	0	; () banked
  1146  003608  6FB2               	movwf	main@x& (0+255),b
  1147  00360A                     
  1148                           ; BSR set to: 0
  1149  00360A  0100               	movlb	0	; () banked
  1150  00360C  51B3               	movf	(main@x+1)& (0+255),w,b
  1151  00360E  0A80               	xorlw	128
  1152  003610  0F80               	addlw	-128
  1153  003612  0E09               	movlw	9
  1154  003614  B4D8               	btfsc	status,2,c
  1155  003616  5DB2               	subwf	main@x& (0+255),w,b
  1156  003618  B0D8               	btfsc	status,0,c
  1157  00361A  D004               	goto	l5744
  1158                           
  1159                           ; BSR set to: 0
  1160                           ;Main.c: 71: {
  1161                           
  1162                           ; BSR set to: 0
  1163                           
  1164                           ; BSR set to: 0
  1165  00361C  0100               	movlb	0	; () banked
  1166  00361E  4BB2               	infsnz	main@x& (0+255),f,b
  1167  003620  2BB3               	incf	(main@x+1)& (0+255),f,b
  1168  003622  D7F3               	goto	L1
  1169  003624                     l5744:
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;Main.c: 73: }
  1173                           ;Main.c: 74: }
  1174                           ;Main.c: 75: if (Volt_Done)
  1175  003624  0100               	movlb	0	; () banked
  1176  003626  51E1               	movf	(_Volt_Done+1)& (0+255),w,b
  1177  003628  11E0               	iorwf	_Volt_Done& (0+255),w,b
  1178  00362A  B4D8               	btfsc	status,2,c
  1179  00362C  D7DF               	goto	l5728
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;Main.c: 76: {
  1183                           ;Main.c: 77: Battery_Convert();
  1184  00362E  EC30  F018         	call	_Battery_Convert	;wreg free
  1185                           
  1186                           ;Main.c: 78: Battery_Fault();
  1187  003632  EC81  F01A         	call	_Battery_Fault	;wreg free
  1188                           
  1189                           ;Main.c: 79: RunBypas();
  1190  003636  ECA3  F019         	call	_RunBypas	;wreg free
  1191                           
  1192                           ;Main.c: 80: for (int x = 0;x<9;x++)
  1193  00363A  0E00               	movlw	0
  1194  00363C  0100               	movlb	0	; () banked
  1195  00363E  6FB5               	movwf	(main@x_971+1)& (0+255),b
  1196  003640  0E00               	movlw	0
  1197  003642  0100               	movlb	0	; () banked
  1198  003644  6FB4               	movwf	main@x_971& (0+255),b
  1199  003646                     
  1200                           ; BSR set to: 0
  1201  003646  0100               	movlb	0	; () banked
  1202  003648  51B5               	movf	(main@x_971+1)& (0+255),w,b
  1203  00364A  0A80               	xorlw	128
  1204  00364C  0F80               	addlw	-128
  1205  00364E  0E09               	movlw	9
  1206  003650  B4D8               	btfsc	status,2,c
  1207  003652  5DB4               	subwf	main@x_971& (0+255),w,b
  1208  003654  B0D8               	btfsc	status,0,c
  1209  003656  D7CA               	goto	l5728
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;Main.c: 81: {
  1213                           ;Main.c: 82: printf("Battery %d = %0.02f \r\n", x,Battery_Get(x));
  1214                           
  1215                           ; BSR set to: 0
  1216                           
  1217                           ; BSR set to: 0
  1218  003658  0E06               	movlw	high STR_2
  1219  00365A  0100               	movlb	0	; () banked
  1220  00365C  6F98               	movwf	(printf@f+1)& (0+255),b
  1221  00365E  0E92               	movlw	low STR_2
  1222  003660  0100               	movlb	0	; () banked
  1223  003662  6F97               	movwf	printf@f& (0+255),b
  1224  003664  C0B4  F099         	movff	main@x_971,?_printf+2
  1225  003668  C0B5  F09A         	movff	main@x_971+1,?_printf+3
  1226  00366C  C0B4  F060         	movff	main@x_971,Battery_Get@channelnum
  1227  003670  C0B5  F061         	movff	main@x_971+1,Battery_Get@channelnum+1
  1228  003674  EC7C  F01E         	call	_Battery_Get	;wreg free
  1229  003678  C060  F09B         	movff	?_Battery_Get,?_printf+4
  1230  00367C  C061  F09C         	movff	?_Battery_Get+1,?_printf+5
  1231  003680  C062  F09D         	movff	?_Battery_Get+2,?_printf+6
  1232  003684  EC5E  F003         	call	_printf	;wreg free
  1233  003688  0100               	movlb	0	; () banked
  1234  00368A  4BB4               	infsnz	main@x_971& (0+255),f,b
  1235  00368C  2BB5               	incf	(main@x_971+1)& (0+255),f,b
  1236  00368E  D7DB               	goto	L2
  1237  003690                     __end_of_main:
  1238                           	opt stack 0
  1239                           tblptru	equ	0xFF8
  1240                           intcon	equ	0xFF2
  1241                           postinc0	equ	0xFEE
  1242                           wreg	equ	0xFE8
  1243                           status	equ	0xFD8
  1244                           
  1245 ;; *************** function _printf *****************
  1246 ;; Defined at:
  1247 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  f               2   55[BANK0 ] PTR const unsigned char 
  1250 ;;		 -> STR_2(23), STR_1(17), 
  1251 ;; Auto vars:     Size  Location     Type
  1252 ;;  vd              4    7[BANK2 ] unsigned long 
  1253 ;;  vd              4   11[BANK2 ] unsigned long 
  1254 ;;  _val            5   20[BANK2 ] struct .
  1255 ;;  fval            3   31[BANK2 ] struct .
  1256 ;;  integ           3   17[BANK2 ] struct .
  1257 ;;  ival            3    0        struct .
  1258 ;;  prec            2   34[BANK2 ] int 
  1259 ;;  width           2   29[BANK2 ] int 
  1260 ;;  flag            2   27[BANK2 ] unsigned short 
  1261 ;;  exp             2   25[BANK2 ] int 
  1262 ;;  ap              2   15[BANK2 ] PTR void [1]
  1263 ;;		 -> ?_printf(2), 
  1264 ;;  c               1   36[BANK2 ] char 
  1265 ;;  d               1    0        unsigned char 
  1266 ;; Return value:  Size  Location     Type
  1267 ;;                  2   55[BANK0 ] int 
  1268 ;; Registers used:
  1269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1275 ;;      Params:         0       7       0       0       0       0       0
  1276 ;;      Locals:         0       0       0      37       0       0       0
  1277 ;;      Temps:          0       6       0       0       0       0       0
  1278 ;;      Totals:         0      13       0      37       0       0       0
  1279 ;;Total ram usage:       50 bytes
  1280 ;; Hardware stack levels used:    1
  1281 ;; Hardware stack levels required when called:    7
  1282 ;; This function calls:
  1283 ;;		___awdiv
  1284 ;;		___ftadd
  1285 ;;		___ftge
  1286 ;;		___ftmul
  1287 ;;		___ftneg
  1288 ;;		___ftsub
  1289 ;;		___fttol
  1290 ;;		___lldiv
  1291 ;;		___llmod
  1292 ;;		___lltoft
  1293 ;;		___wmul
  1294 ;;		__div_to_l_
  1295 ;;		__tdiv_to_l_
  1296 ;;		_fround
  1297 ;;		_isdigit
  1298 ;;		_putch
  1299 ;;		_scale
  1300 ;; This function is called by:
  1301 ;;		_main
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           	psect	text1
  1306  0006BC                     __ptext1:
  1307                           	opt stack 0
  1308  0006BC                     _printf:
  1309                           	opt stack 23
  1310                           
  1311                           ;doprnt.c: 466: va_list ap;
  1312                           ;doprnt.c: 499: signed char c;
  1313                           ;doprnt.c: 501: int width;
  1314                           ;doprnt.c: 504: int prec;
  1315                           ;doprnt.c: 508: unsigned short flag;
  1316                           ;doprnt.c: 515: char d;
  1317                           ;doprnt.c: 516: double fval, integ;
  1318                           ;doprnt.c: 517: int exp;
  1319                           ;doprnt.c: 518: double ival;
  1320                           ;doprnt.c: 519: union {
  1321                           ;doprnt.c: 520: unsigned long _val;
  1322                           ;doprnt.c: 521: struct {
  1323                           ;doprnt.c: 522: const char * _cp;
  1324                           ;doprnt.c: 523: unsigned _len;
  1325                           ;doprnt.c: 524: } _str;
  1326                           ;doprnt.c: 525: } _val;
  1327                           ;doprnt.c: 542: *ap = __va_start();
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;incstack = 0
  1331  0006BC  0100               	movlb	0	; () banked
  1332  0006BE  0E00               	movlw	high (?_printf+2)
  1333  0006C0  0102               	movlb	2	; () banked
  1334  0006C2  6F10               	movwf	(printf@ap+1)& (0+255),b
  1335  0006C4  0100               	movlb	0	; () banked
  1336  0006C6  0E99               	movlw	low (?_printf+2)
  1337  0006C8  0102               	movlb	2	; () banked
  1338  0006CA  6F0F               	movwf	printf@ap& (0+255),b
  1339                           
  1340                           ;doprnt.c: 545: while(c = *f++) {
  1341  0006CC  EF89  F009         	goto	l5692
  1342  0006D0                     l5396:
  1343                           
  1344                           ; BSR set to: 2
  1345                           ;doprnt.c: 547: if(c != '%')
  1346  0006D0  0102               	movlb	2	; () banked
  1347  0006D2  5124               	movf	printf@c& (0+255),w,b
  1348  0006D4  0A25               	xorlw	37
  1349  0006D6  B4D8               	btfsc	status,2,c
  1350  0006D8  D006               	goto	l5400
  1351                           
  1352                           ; BSR set to: 2
  1353                           ;doprnt.c: 549: {
  1354                           ;doprnt.c: 550: (putch(c) );
  1355  0006DA  0102               	movlb	2	; () banked
  1356  0006DC  5124               	movf	printf@c& (0+255),w,b
  1357  0006DE  EC92  F01F         	call	_putch
  1358                           
  1359                           ;doprnt.c: 551: continue;
  1360  0006E2  EF89  F009         	goto	l5692
  1361  0006E6                     l5400:
  1362                           
  1363                           ;doprnt.c: 552: }
  1364                           ;doprnt.c: 555: width = 0;
  1365  0006E6  0E00               	movlw	0
  1366  0006E8  0102               	movlb	2	; () banked
  1367  0006EA  6F1E               	movwf	(printf@width+1)& (0+255),b
  1368  0006EC  0E00               	movlw	0
  1369  0006EE  0102               	movlb	2	; () banked
  1370  0006F0  6F1D               	movwf	printf@width& (0+255),b
  1371                           
  1372                           ;doprnt.c: 557: flag = 0;
  1373  0006F2  0E00               	movlw	0
  1374  0006F4  0102               	movlb	2	; () banked
  1375  0006F6  6F1C               	movwf	(printf@flag+1)& (0+255),b
  1376  0006F8  0E00               	movlw	0
  1377  0006FA  0102               	movlb	2	; () banked
  1378  0006FC  6F1B               	movwf	printf@flag& (0+255),b
  1379  0006FE  D005               	goto	l5406
  1380  000700                     l5402:
  1381                           
  1382                           ;doprnt.c: 589: flag |= 0x04;
  1383  000700  0102               	movlb	2	; () banked
  1384  000702  851B               	bsf	printf@flag& (0+255),2,b
  1385                           
  1386                           ;doprnt.c: 590: f++;
  1387  000704  0100               	movlb	0	; () banked
  1388  000706  4B97               	infsnz	printf@f& (0+255),f,b
  1389  000708  2B98               	incf	(printf@f+1)& (0+255),f,b
  1390  00070A                     l5406:
  1391  00070A  0100               	movlb	0	; () banked
  1392  00070C  C097  FFF6         	movff	printf@f,tblptrl
  1393  000710  0100               	movlb	0	; () banked
  1394  000712  C098  FFF7         	movff	printf@f+1,tblptrh
  1395  000716                     	if	0	;tblptru may be non-zero
  1396  000716                     	endif
  1397  000716                     	if	0	;tblptru may be non-zero
  1398  000716                     	endif
  1399  000716  0008               	tblrd		*
  1400  000718  50F5               	movf	tablat,w,c
  1401                           
  1402                           ; Switch size 1, requested type "space"
  1403                           ; Number of cases is 1, Range of values is 48 to 48
  1404                           ; switch strategies available:
  1405                           ; Name         Instructions Cycles
  1406                           ; simple_byte            4     3 (average)
  1407                           ;	Chosen strategy is simple_byte
  1408  00071A  0A30               	xorlw	48	; case 48
  1409  00071C  B4D8               	btfsc	status,2,c
  1410  00071E  D7F0               	goto	l5402
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  1414                           
  1415                           ; BSR set to: 0
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;doprnt.c: 595: }
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;doprnt.c: 594: break;
  1422  000720  0100               	movlb	0	; () banked
  1423  000722  C097  FFF6         	movff	printf@f,tblptrl
  1424  000726  0100               	movlb	0	; () banked
  1425  000728  C098  FFF7         	movff	printf@f+1,tblptrh
  1426  00072C                     	if	0	;tblptru may be non-zero
  1427  00072C                     	endif
  1428  00072C                     	if	0	;tblptru may be non-zero
  1429  00072C                     	endif
  1430  00072C  0008               	tblrd		*
  1431  00072E  50F5               	movf	tablat,w,c
  1432  000730  EC2D  F01F         	call	_isdigit
  1433  000734  A0D8               	btfss	status,0,c
  1434  000736  D043               	goto	l5420
  1435                           
  1436                           ;doprnt.c: 607: width = 0;
  1437  000738  0E00               	movlw	0
  1438  00073A  0102               	movlb	2	; () banked
  1439  00073C  6F1E               	movwf	(printf@width+1)& (0+255),b
  1440  00073E  0E00               	movlw	0
  1441  000740  0102               	movlb	2	; () banked
  1442  000742  6F1D               	movwf	printf@width& (0+255),b
  1443  000744                     l5412:
  1444                           
  1445                           ;doprnt.c: 609: width *= 10;
  1446  000744  C21D  F029         	movff	printf@width,___wmul@multiplier
  1447  000748  C21E  F02A         	movff	printf@width+1,___wmul@multiplier+1
  1448  00074C  0E00               	movlw	0
  1449  00074E  6E2C               	movwf	___wmul@multiplicand+1,c
  1450  000750  0E0A               	movlw	10
  1451  000752  6E2B               	movwf	___wmul@multiplicand,c
  1452  000754  EC09  F01F         	call	___wmul	;wreg free
  1453  000758  C029  F21D         	movff	?___wmul,printf@width
  1454  00075C  C02A  F21E         	movff	?___wmul+1,printf@width+1
  1455                           
  1456                           ;doprnt.c: 610: width += *f++ - '0';
  1457  000760  0ED0               	movlw	208
  1458  000762  0100               	movlb	0	; () banked
  1459  000764  6F9E               	movwf	??_printf& (0+255),b
  1460  000766  0EFF               	movlw	255
  1461  000768  6F9F               	movwf	(??_printf+1)& (0+255),b
  1462  00076A  0100               	movlb	0	; () banked
  1463  00076C  C097  FFF6         	movff	printf@f,tblptrl
  1464  000770  0100               	movlb	0	; () banked
  1465  000772  C098  FFF7         	movff	printf@f+1,tblptrh
  1466  000776                     	if	0	;tblptru may be non-zero
  1467  000776                     	endif
  1468  000776                     	if	0	;tblptru may be non-zero
  1469  000776                     	endif
  1470  000776  0008               	tblrd		*
  1471  000778  50F5               	movf	tablat,w,c
  1472  00077A  0100               	movlb	0	; () banked
  1473  00077C  6FA0               	movwf	(??_printf+2)& (0+255),b
  1474  00077E  6BA1               	clrf	(??_printf+3)& (0+255),b
  1475  000780  0100               	movlb	0	; () banked
  1476  000782  519E               	movf	??_printf& (0+255),w,b
  1477  000784  0100               	movlb	0	; () banked
  1478  000786  27A0               	addwf	(??_printf+2)& (0+255),f,b
  1479  000788  0100               	movlb	0	; () banked
  1480  00078A  519F               	movf	(??_printf+1)& (0+255),w,b
  1481  00078C  0100               	movlb	0	; () banked
  1482  00078E  23A1               	addwfc	(??_printf+3)& (0+255),f,b
  1483  000790  0100               	movlb	0	; () banked
  1484  000792  51A0               	movf	(??_printf+2)& (0+255),w,b
  1485  000794  0102               	movlb	2	; () banked
  1486  000796  271D               	addwf	printf@width& (0+255),f,b
  1487  000798  0100               	movlb	0	; () banked
  1488  00079A  51A1               	movf	(??_printf+3)& (0+255),w,b
  1489  00079C  0102               	movlb	2	; () banked
  1490  00079E  231E               	addwfc	(printf@width+1)& (0+255),f,b
  1491                           
  1492                           ; BSR set to: 2
  1493  0007A0  0100               	movlb	0	; () banked
  1494  0007A2  4B97               	infsnz	printf@f& (0+255),f,b
  1495  0007A4  2B98               	incf	(printf@f+1)& (0+255),f,b
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  1499  0007A6  0100               	movlb	0	; () banked
  1500  0007A8  C097  FFF6         	movff	printf@f,tblptrl
  1501  0007AC  0100               	movlb	0	; () banked
  1502  0007AE  C098  FFF7         	movff	printf@f+1,tblptrh
  1503  0007B2                     	if	0	;tblptru may be non-zero
  1504  0007B2                     	endif
  1505  0007B2                     	if	0	;tblptru may be non-zero
  1506  0007B2                     	endif
  1507  0007B2  0008               	tblrd		*
  1508  0007B4  50F5               	movf	tablat,w,c
  1509  0007B6  EC2D  F01F         	call	_isdigit
  1510  0007BA  B0D8               	btfsc	status,0,c
  1511  0007BC  D7C3               	goto	l5412
  1512  0007BE                     l5420:
  1513                           
  1514                           ;doprnt.c: 617: }
  1515                           ;doprnt.c: 620: if(*f == '.') {
  1516  0007BE  0100               	movlb	0	; () banked
  1517  0007C0  C097  FFF6         	movff	printf@f,tblptrl
  1518  0007C4  0100               	movlb	0	; () banked
  1519  0007C6  C098  FFF7         	movff	printf@f+1,tblptrh
  1520  0007CA                     	if	0	;tblptru may be non-zero
  1521  0007CA                     	endif
  1522  0007CA                     	if	0	;tblptru may be non-zero
  1523  0007CA                     	endif
  1524  0007CA  0008               	tblrd		*
  1525  0007CC  50F5               	movf	tablat,w,c
  1526  0007CE  0A2E               	xorlw	46
  1527  0007D0  A4D8               	btfss	status,2,c
  1528  0007D2  D039               	goto	l5432
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;doprnt.c: 621: flag |= 0x4000;
  1532  0007D4  0102               	movlb	2	; () banked
  1533  0007D6  8D1C               	bsf	(printf@flag+1)& (0+255),6,b
  1534                           
  1535                           ;doprnt.c: 622: f++;
  1536  0007D8  0100               	movlb	0	; () banked
  1537  0007DA  4B97               	infsnz	printf@f& (0+255),f,b
  1538  0007DC  2B98               	incf	(printf@f+1)& (0+255),f,b
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;doprnt.c: 629: {
  1542                           ;doprnt.c: 630: prec = 0;
  1543  0007DE  0E00               	movlw	0
  1544  0007E0  0102               	movlb	2	; () banked
  1545  0007E2  6F23               	movwf	(printf@prec+1)& (0+255),b
  1546  0007E4  0E00               	movlw	0
  1547  0007E6  0102               	movlb	2	; () banked
  1548  0007E8  6F22               	movwf	printf@prec& (0+255),b
  1549                           
  1550                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  1551  0007EA  D020               	goto	l5430
  1552  0007EC                     l5426:
  1553                           
  1554                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  1555  0007EC  C222  F029         	movff	printf@prec,___wmul@multiplier
  1556  0007F0  C223  F02A         	movff	printf@prec+1,___wmul@multiplier+1
  1557  0007F4  0E00               	movlw	0
  1558  0007F6  6E2C               	movwf	___wmul@multiplicand+1,c
  1559  0007F8  0E0A               	movlw	10
  1560  0007FA  6E2B               	movwf	___wmul@multiplicand,c
  1561  0007FC  EC09  F01F         	call	___wmul	;wreg free
  1562  000800  0100               	movlb	0	; () banked
  1563  000802  C097  FFF6         	movff	printf@f,tblptrl
  1564  000806  0100               	movlb	0	; () banked
  1565  000808  C098  FFF7         	movff	printf@f+1,tblptrh
  1566  00080C                     	if	0	;tblptru may be non-zero
  1567  00080C                     	endif
  1568  00080C                     	if	0	;tblptru may be non-zero
  1569  00080C                     	endif
  1570  00080C  0008               	tblrd		*
  1571  00080E  50F5               	movf	tablat,w,c
  1572  000810  2629               	addwf	?___wmul,f,c
  1573  000812  0E00               	movlw	0
  1574  000814  222A               	addwfc	?___wmul+1,f,c
  1575  000816  0ED0               	movlw	208
  1576  000818  2429               	addwf	?___wmul,w,c
  1577  00081A  0102               	movlb	2	; () banked
  1578  00081C  6F22               	movwf	printf@prec& (0+255),b
  1579  00081E  0EFF               	movlw	255
  1580  000820  202A               	addwfc	?___wmul+1,w,c
  1581  000822  0102               	movlb	2	; () banked
  1582  000824  6F23               	movwf	(printf@prec+1)& (0+255),b
  1583                           
  1584                           ; BSR set to: 2
  1585  000826  0100               	movlb	0	; () banked
  1586  000828  4B97               	infsnz	printf@f& (0+255),f,b
  1587  00082A  2B98               	incf	(printf@f+1)& (0+255),f,b
  1588  00082C                     l5430:
  1589  00082C  0100               	movlb	0	; () banked
  1590  00082E  C097  FFF6         	movff	printf@f,tblptrl
  1591  000832  0100               	movlb	0	; () banked
  1592  000834  C098  FFF7         	movff	printf@f+1,tblptrh
  1593  000838                     	if	0	;tblptru may be non-zero
  1594  000838                     	endif
  1595  000838                     	if	0	;tblptru may be non-zero
  1596  000838                     	endif
  1597  000838  0008               	tblrd		*
  1598  00083A  50F5               	movf	tablat,w,c
  1599  00083C  EC2D  F01F         	call	_isdigit
  1600  000840  A0D8               	btfss	status,0,c
  1601  000842  D00D               	goto	l5440
  1602  000844  D7D3               	goto	l5426
  1603  000846                     l5432:
  1604                           
  1605                           ;doprnt.c: 635: prec = 0;
  1606  000846  0E00               	movlw	0
  1607  000848  0102               	movlb	2	; () banked
  1608  00084A  6F23               	movwf	(printf@prec+1)& (0+255),b
  1609  00084C  0E00               	movlw	0
  1610  00084E  0102               	movlb	2	; () banked
  1611  000850  6F22               	movwf	printf@prec& (0+255),b
  1612                           
  1613                           ; BSR set to: 2
  1614                           ;doprnt.c: 637: flag |= 0x1000;
  1615  000852  0102               	movlb	2	; () banked
  1616  000854  891C               	bsf	(printf@flag+1)& (0+255),4,b
  1617  000856  D003               	goto	l5440
  1618  000858                     l5436:
  1619                           
  1620                           ; BSR set to: 2
  1621                           ;doprnt.c: 672: flag |= 0x400;
  1622  000858  0102               	movlb	2	; () banked
  1623  00085A  851C               	bsf	(printf@flag+1)& (0+255),2,b
  1624                           
  1625                           ;doprnt.c: 673: break;
  1626  00085C  D01C               	goto	l5442
  1627  00085E                     l5440:
  1628  00085E  0100               	movlb	0	; () banked
  1629  000860  C097  FFF6         	movff	printf@f,tblptrl
  1630  000864  0100               	movlb	0	; () banked
  1631  000866  C098  FFF7         	movff	printf@f+1,tblptrh
  1632  00086A  0100               	movlb	0	; () banked
  1633  00086C  4B97               	infsnz	printf@f& (0+255),f,b
  1634  00086E  2B98               	incf	(printf@f+1)& (0+255),f,b
  1635  000870                     	if	0	;tblptru may be non-zero
  1636  000870                     	endif
  1637  000870                     	if	0	;tblptru may be non-zero
  1638  000870                     	endif
  1639  000870  0008               	tblrd		*
  1640  000872  0102               	movlb	2	; () banked
  1641  000874  CFF5 F224          	movff	tablat,printf@c
  1642  000878  0102               	movlb	2	; () banked
  1643  00087A  5124               	movf	printf@c& (0+255),w,b
  1644                           
  1645                           ; Switch size 1, requested type "space"
  1646                           ; Number of cases is 4, Range of values is 0 to 105
  1647                           ; switch strategies available:
  1648                           ; Name         Instructions Cycles
  1649                           ; simple_byte           13     7 (average)
  1650                           ;	Chosen strategy is simple_byte
  1651  00087C  0A00               	xorlw	0	; case 0
  1652  00087E  B4D8               	btfsc	status,2,c
  1653  000880  0012               	return	
  1654  000882  0A64               	xorlw	100	; case 100
  1655  000884  B4D8               	btfsc	status,2,c
  1656  000886  D007               	goto	l5442
  1657  000888  0A02               	xorlw	2	; case 102
  1658  00088A  B4D8               	btfsc	status,2,c
  1659  00088C  D7E5               	goto	l5436
  1660  00088E  0A0F               	xorlw	15	; case 105
  1661  000890  A4D8               	btfss	status,2,c
  1662  000892  EF89  F009         	goto	l5692
  1663  000896                     l5442:
  1664                           
  1665                           ; BSR set to: 2
  1666                           ;doprnt.c: 834: if(flag & (0x700)) {
  1667  000896  0E07               	movlw	7
  1668  000898  0102               	movlb	2	; () banked
  1669  00089A  151C               	andwf	(printf@flag+1)& (0+255),w,b
  1670  00089C  B4D8               	btfsc	status,2,c
  1671  00089E  D39E               	goto	l5606
  1672                           
  1673                           ; BSR set to: 2
  1674                           ;doprnt.c: 836: if(flag & 0x1000)
  1675  0008A0  0102               	movlb	2	; () banked
  1676  0008A2  A91C               	btfss	(printf@flag+1)& (0+255),4,b
  1677  0008A4  D006               	goto	l5448
  1678                           
  1679                           ; BSR set to: 2
  1680                           ;doprnt.c: 838: prec = 6;
  1681  0008A6  0E00               	movlw	0
  1682  0008A8  0102               	movlb	2	; () banked
  1683  0008AA  6F23               	movwf	(printf@prec+1)& (0+255),b
  1684  0008AC  0E06               	movlw	6
  1685  0008AE  0102               	movlb	2	; () banked
  1686  0008B0  6F22               	movwf	printf@prec& (0+255),b
  1687  0008B2                     l5448:
  1688                           
  1689                           ; BSR set to: 2
  1690                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1691  0008B2  C20F  FFD9         	movff	printf@ap,fsr2l
  1692  0008B6  C210  FFDA         	movff	printf@ap+1,fsr2h
  1693  0008BA  0102               	movlb	2	; () banked
  1694  0008BC  CFDE F21F          	movff	postinc2,printf@fval
  1695  0008C0  0102               	movlb	2	; () banked
  1696  0008C2  CFDE F220          	movff	postinc2,printf@fval+1
  1697  0008C6  0102               	movlb	2	; () banked
  1698  0008C8  CFDD F221          	movff	postdec2,printf@fval+2
  1699                           
  1700                           ; BSR set to: 2
  1701  0008CC  0E03               	movlw	3
  1702  0008CE  0102               	movlb	2	; () banked
  1703  0008D0  270F               	addwf	printf@ap& (0+255),f,b
  1704  0008D2  0E00               	movlw	0
  1705  0008D4  0102               	movlb	2	; () banked
  1706  0008D6  2310               	addwfc	(printf@ap+1)& (0+255),f,b
  1707                           
  1708                           ; BSR set to: 2
  1709                           ;doprnt.c: 840: if(fval < 0.0) {
  1710  0008D8  0102               	movlb	2	; () banked
  1711  0008DA  5121               	movf	(printf@fval+2)& (0+255),w,b
  1712  0008DC  0A80               	xorlw	128
  1713  0008DE  0F80               	addlw	128
  1714  0008E0  E107               	bnz	u5965
  1715  0008E2  0E00               	movlw	0
  1716  0008E4  0102               	movlb	2	; () banked
  1717  0008E6  5D20               	subwf	(printf@fval+1)& (0+255),w,b
  1718  0008E8  E103               	bnz	u5965
  1719  0008EA  0E00               	movlw	0
  1720  0008EC  0102               	movlb	2	; () banked
  1721  0008EE  5D1F               	subwf	printf@fval& (0+255),w,b
  1722  0008F0                     u5965:
  1723  0008F0  B0D8               	btfsc	status,0,c
  1724  0008F2  D011               	goto	l5458
  1725                           
  1726                           ; BSR set to: 2
  1727                           ;doprnt.c: 841: fval = -fval;
  1728  0008F4  C21F  F01B         	movff	printf@fval,___ftneg@f1
  1729  0008F8  C220  F01C         	movff	printf@fval+1,___ftneg@f1+1
  1730  0008FC  C221  F01D         	movff	printf@fval+2,___ftneg@f1+2
  1731  000900  ECF6  F01E         	call	___ftneg	;wreg free
  1732  000904  C01B  F21F         	movff	?___ftneg,printf@fval
  1733  000908  C01C  F220         	movff	?___ftneg+1,printf@fval+1
  1734  00090C  C01D  F221         	movff	?___ftneg+2,printf@fval+2
  1735                           
  1736                           ;doprnt.c: 842: flag |= 0x03;
  1737  000910  0E03               	movlw	3
  1738  000912  0102               	movlb	2	; () banked
  1739  000914  131B               	iorwf	printf@flag& (0+255),f,b
  1740  000916                     l5458:
  1741                           
  1742                           ; BSR set to: 2
  1743                           ;doprnt.c: 843: }
  1744                           ;doprnt.c: 844: exp = 0;
  1745  000916  0E00               	movlw	0
  1746  000918  0102               	movlb	2	; () banked
  1747  00091A  6F1A               	movwf	(printf@exp+1)& (0+255),b
  1748  00091C  0E00               	movlw	0
  1749  00091E  0102               	movlb	2	; () banked
  1750  000920  6F19               	movwf	printf@exp& (0+255),b
  1751                           
  1752                           ; BSR set to: 2
  1753                           ;doprnt.c: 845: if( fval!=0) {
  1754  000922  0E7F               	movlw	127
  1755  000924  0102               	movlb	2	; () banked
  1756  000926  1521               	andwf	(printf@fval+2)& (0+255),w,b
  1757  000928  0102               	movlb	2	; () banked
  1758  00092A  1120               	iorwf	(printf@fval+1)& (0+255),w,b
  1759  00092C  0102               	movlb	2	; () banked
  1760  00092E  111F               	iorwf	printf@fval& (0+255),w,b
  1761  000930  B4D8               	btfsc	status,2,c
  1762  000932  D0A2               	goto	l5486
  1763                           
  1764                           ; BSR set to: 2
  1765                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1766  000934  0E82               	movlw	130
  1767  000936  0100               	movlb	0	; () banked
  1768  000938  6F9E               	movwf	??_printf& (0+255),b
  1769  00093A  0EFF               	movlw	255
  1770  00093C  6F9F               	movwf	(??_printf+1)& (0+255),b
  1771  00093E  0102               	movlb	2	; () banked
  1772  000940  C21F  F0A0         	movff	printf@fval,??_printf+2
  1773  000944  0102               	movlb	2	; () banked
  1774  000946  C220  F0A1         	movff	printf@fval+1,??_printf+3
  1775  00094A  0102               	movlb	2	; () banked
  1776  00094C  C221  F0A2         	movff	printf@fval+2,??_printf+4
  1777  000950  0102               	movlb	2	; () banked
  1778  000952  C222  F0A3         	movff	printf@fval+3,??_printf+5
  1779  000956  0E10               	movlw	16
  1780  000958  D006               	goto	u5980
  1781  00095A                     u5985:
  1782  00095A  0100               	movlb	0	; () banked
  1783  00095C  90D8               	bcf	status,0,c
  1784  00095E  33A3               	rrcf	(??_printf+5)& (0+255),f,b
  1785  000960  33A2               	rrcf	(??_printf+4)& (0+255),f,b
  1786  000962  33A1               	rrcf	(??_printf+3)& (0+255),f,b
  1787  000964  33A0               	rrcf	(??_printf+2)& (0+255),f,b
  1788  000966                     u5980:
  1789  000966  2EE8               	decfsz	wreg,f,c
  1790  000968  D7F8               	goto	u5985
  1791  00096A  0100               	movlb	0	; () banked
  1792  00096C  51A0               	movf	(??_printf+2)& (0+255),w,b
  1793  00096E  0100               	movlb	0	; () banked
  1794  000970  259E               	addwf	??_printf& (0+255),w,b
  1795  000972  0102               	movlb	2	; () banked
  1796  000974  6F19               	movwf	printf@exp& (0+255),b
  1797  000976  0E00               	movlw	0
  1798  000978  0100               	movlb	0	; () banked
  1799  00097A  219F               	addwfc	(??_printf+1)& (0+255),w,b
  1800  00097C  0102               	movlb	2	; () banked
  1801  00097E  6F1A               	movwf	(printf@exp+1)& (0+255),b
  1802                           
  1803                           ; BSR set to: 2
  1804                           ;doprnt.c: 847: exp--;
  1805  000980  0102               	movlb	2	; () banked
  1806  000982  0719               	decf	printf@exp& (0+255),f,b
  1807  000984  A0D8               	btfss	status,0,c
  1808  000986  071A               	decf	(printf@exp+1)& (0+255),f,b
  1809                           
  1810                           ; BSR set to: 2
  1811                           ;doprnt.c: 848: exp *= 3;
  1812  000988  C219  F029         	movff	printf@exp,___wmul@multiplier
  1813  00098C  C21A  F02A         	movff	printf@exp+1,___wmul@multiplier+1
  1814  000990  0E00               	movlw	0
  1815  000992  6E2C               	movwf	___wmul@multiplicand+1,c
  1816  000994  0E03               	movlw	3
  1817  000996  6E2B               	movwf	___wmul@multiplicand,c
  1818  000998  EC09  F01F         	call	___wmul	;wreg free
  1819  00099C  C029  F219         	movff	?___wmul,printf@exp
  1820  0009A0  C02A  F21A         	movff	?___wmul+1,printf@exp+1
  1821                           
  1822                           ;doprnt.c: 849: exp /= 10;
  1823  0009A4  C219  F021         	movff	printf@exp,___awdiv@dividend
  1824  0009A8  C21A  F022         	movff	printf@exp+1,___awdiv@dividend+1
  1825  0009AC  0E00               	movlw	0
  1826  0009AE  6E24               	movwf	___awdiv@divisor+1,c
  1827  0009B0  0E0A               	movlw	10
  1828  0009B2  6E23               	movwf	___awdiv@divisor,c
  1829  0009B4  EC9C  F01B         	call	___awdiv	;wreg free
  1830  0009B8  C021  F219         	movff	?___awdiv,printf@exp
  1831  0009BC  C022  F21A         	movff	?___awdiv+1,printf@exp+1
  1832                           
  1833                           ;doprnt.c: 850: if(exp < 0)
  1834  0009C0  0102               	movlb	2	; () banked
  1835  0009C2  511A               	movf	(printf@exp+1)& (0+255),w,b
  1836  0009C4  0A80               	xorlw	128
  1837  0009C6  6EF3               	movwf	prodl,c
  1838  0009C8  0E80               	movlw	128
  1839  0009CA  5CF3               	subwf	prodl,w,c
  1840  0009CC  0E00               	movlw	0
  1841  0009CE  B4D8               	btfsc	status,2,c
  1842  0009D0  5D19               	subwf	printf@exp& (0+255),w,b
  1843  0009D2  B0D8               	btfsc	status,0,c
  1844  0009D4  D004               	goto	l5474
  1845                           
  1846                           ; BSR set to: 2
  1847                           ;doprnt.c: 851: exp--;
  1848  0009D6  0102               	movlb	2	; () banked
  1849  0009D8  0719               	decf	printf@exp& (0+255),f,b
  1850  0009DA  A0D8               	btfss	status,0,c
  1851  0009DC  071A               	decf	(printf@exp+1)& (0+255),f,b
  1852  0009DE                     l5474:
  1853                           
  1854                           ; BSR set to: 2
  1855                           ;doprnt.c: 855: integ = scale(-exp);
  1856  0009DE  0102               	movlb	2	; () banked
  1857  0009E0  5119               	movf	printf@exp& (0+255),w,b
  1858  0009E2  0800               	sublw	0
  1859  0009E4  ECB3  F00C         	call	_scale
  1860  0009E8  C07B  F211         	movff	?_scale,printf@integ
  1861  0009EC  C07C  F212         	movff	?_scale+1,printf@integ+1
  1862  0009F0  C07D  F213         	movff	?_scale+2,printf@integ+2
  1863                           
  1864                           ;doprnt.c: 856: integ *= fval;
  1865  0009F4  C211  F06C         	movff	printf@integ,___ftmul@f1
  1866  0009F8  C212  F06D         	movff	printf@integ+1,___ftmul@f1+1
  1867  0009FC  C213  F06E         	movff	printf@integ+2,___ftmul@f1+2
  1868  000A00  C21F  F06F         	movff	printf@fval,___ftmul@f2
  1869  000A04  C220  F070         	movff	printf@fval+1,___ftmul@f2+1
  1870  000A08  C221  F071         	movff	printf@fval+2,___ftmul@f2+2
  1871  000A0C  ECCB  F014         	call	___ftmul	;wreg free
  1872  000A10  C06C  F211         	movff	?___ftmul,printf@integ
  1873  000A14  C06D  F212         	movff	?___ftmul+1,printf@integ+1
  1874  000A18  C06E  F213         	movff	?___ftmul+2,printf@integ+2
  1875                           
  1876                           ;doprnt.c: 857: if(integ < 1.0)
  1877  000A1C  C211  F060         	movff	printf@integ,___ftge@ff1
  1878  000A20  C212  F061         	movff	printf@integ+1,___ftge@ff1+1
  1879  000A24  C213  F062         	movff	printf@integ+2,___ftge@ff1+2
  1880  000A28  0E00               	movlw	0
  1881  000A2A  0100               	movlb	0	; () banked
  1882  000A2C  6F63               	movwf	___ftge@ff2& (0+255),b
  1883  000A2E  0E80               	movlw	128
  1884  000A30  0100               	movlb	0	; () banked
  1885  000A32  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1886  000A34  0E3F               	movlw	63
  1887  000A36  0100               	movlb	0	; () banked
  1888  000A38  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1889  000A3A  EC17  F01A         	call	___ftge	;wreg free
  1890  000A3E  B0D8               	btfsc	status,0,c
  1891  000A40  D005               	goto	l5482
  1892                           
  1893                           ;doprnt.c: 858: exp--;
  1894  000A42  0102               	movlb	2	; () banked
  1895  000A44  0719               	decf	printf@exp& (0+255),f,b
  1896  000A46  A0D8               	btfss	status,0,c
  1897  000A48  071A               	decf	(printf@exp+1)& (0+255),f,b
  1898  000A4A  D016               	goto	l5486
  1899  000A4C                     l5482:
  1900                           
  1901                           ;doprnt.c: 859: else if(integ >= 10.0)
  1902  000A4C  C211  F060         	movff	printf@integ,___ftge@ff1
  1903  000A50  C212  F061         	movff	printf@integ+1,___ftge@ff1+1
  1904  000A54  C213  F062         	movff	printf@integ+2,___ftge@ff1+2
  1905  000A58  0E00               	movlw	0
  1906  000A5A  0100               	movlb	0	; () banked
  1907  000A5C  6F63               	movwf	___ftge@ff2& (0+255),b
  1908  000A5E  0E20               	movlw	32
  1909  000A60  0100               	movlb	0	; () banked
  1910  000A62  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1911  000A64  0E41               	movlw	65
  1912  000A66  0100               	movlb	0	; () banked
  1913  000A68  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1914  000A6A  EC17  F01A         	call	___ftge	;wreg free
  1915  000A6E  A0D8               	btfss	status,0,c
  1916  000A70  D003               	goto	l5486
  1917                           
  1918                           ;doprnt.c: 860: exp++;
  1919  000A72  0102               	movlb	2	; () banked
  1920  000A74  4B19               	infsnz	printf@exp& (0+255),f,b
  1921  000A76  2B1A               	incf	(printf@exp+1)& (0+255),f,b
  1922  000A78                     l5486:
  1923                           
  1924                           ;doprnt.c: 861: }
  1925                           ;doprnt.c: 1121: if(prec <= 12)
  1926  000A78  0102               	movlb	2	; () banked
  1927  000A7A  5123               	movf	(printf@prec+1)& (0+255),w,b
  1928  000A7C  0A80               	xorlw	128
  1929  000A7E  6EF3               	movwf	prodl,c
  1930  000A80  0E80               	movlw	128
  1931  000A82  5CF3               	subwf	prodl,w,c
  1932  000A84  0E0D               	movlw	13
  1933  000A86  B4D8               	btfsc	status,2,c
  1934  000A88  5D22               	subwf	printf@prec& (0+255),w,b
  1935  000A8A  B0D8               	btfsc	status,0,c
  1936  000A8C  D018               	goto	l5490
  1937                           
  1938                           ; BSR set to: 2
  1939                           ;doprnt.c: 1122: fval += fround(prec);
  1940  000A8E  C21F  F085         	movff	printf@fval,___ftadd@f1
  1941  000A92  C220  F086         	movff	printf@fval+1,___ftadd@f1+1
  1942  000A96  C221  F087         	movff	printf@fval+2,___ftadd@f1+2
  1943  000A9A  0102               	movlb	2	; () banked
  1944  000A9C  5122               	movf	printf@prec& (0+255),w,b
  1945  000A9E  ECEE  F00E         	call	_fround
  1946  000AA2  C07B  F088         	movff	?_fround,___ftadd@f2
  1947  000AA6  C07C  F089         	movff	?_fround+1,___ftadd@f2+1
  1948  000AAA  C07D  F08A         	movff	?_fround+2,___ftadd@f2+2
  1949  000AAE  EC3B  F010         	call	___ftadd	;wreg free
  1950  000AB2  C085  F21F         	movff	?___ftadd,printf@fval
  1951  000AB6  C086  F220         	movff	?___ftadd+1,printf@fval+1
  1952  000ABA  C087  F221         	movff	?___ftadd+2,printf@fval+2
  1953  000ABE                     l5490:
  1954                           
  1955                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1956  000ABE  0102               	movlb	2	; () banked
  1957  000AC0  511A               	movf	(printf@exp+1)& (0+255),w,b
  1958  000AC2  0A80               	xorlw	128
  1959  000AC4  6EF3               	movwf	prodl,c
  1960  000AC6  0E80               	movlw	128
  1961  000AC8  5CF3               	subwf	prodl,w,c
  1962  000ACA  0E0A               	movlw	10
  1963  000ACC  B4D8               	btfsc	status,2,c
  1964  000ACE  5D19               	subwf	printf@exp& (0+255),w,b
  1965  000AD0  B0D8               	btfsc	status,0,c
  1966  000AD2  D029               	goto	l5498
  1967                           
  1968                           ; BSR set to: 2
  1969  000AD4  0E7F               	movlw	127
  1970  000AD6  0102               	movlb	2	; () banked
  1971  000AD8  1521               	andwf	(printf@fval+2)& (0+255),w,b
  1972  000ADA  0102               	movlb	2	; () banked
  1973  000ADC  1120               	iorwf	(printf@fval+1)& (0+255),w,b
  1974  000ADE  0102               	movlb	2	; () banked
  1975  000AE0  111F               	iorwf	printf@fval& (0+255),w,b
  1976  000AE2  B4D8               	btfsc	status,2,c
  1977  000AE4  D06F               	goto	l5514
  1978                           
  1979                           ; BSR set to: 2
  1980  000AE6  C21F  F082         	movff	printf@fval,___fttol@f1
  1981  000AEA  C220  F083         	movff	printf@fval+1,___fttol@f1+1
  1982  000AEE  C221  F084         	movff	printf@fval+2,___fttol@f1+2
  1983  000AF2  EC0D  F014         	call	___fttol	;wreg free
  1984  000AF6  C082  F09E         	movff	?___fttol,??_printf
  1985  000AFA  C083  F09F         	movff	?___fttol+1,??_printf+1
  1986  000AFE  C084  F0A0         	movff	?___fttol+2,??_printf+2
  1987  000B02  C085  F0A1         	movff	?___fttol+3,??_printf+3
  1988  000B06  0100               	movlb	0	; () banked
  1989  000B08  51A1               	movf	(??_printf+3)& (0+255),w,b
  1990  000B0A  119E               	iorwf	??_printf& (0+255),w,b
  1991  000B0C  119F               	iorwf	(??_printf+1)& (0+255),w,b
  1992  000B0E  11A0               	iorwf	(??_printf+2)& (0+255),w,b
  1993  000B10  A4D8               	btfss	status,2,c
  1994  000B12  D058               	goto	l5514
  1995                           
  1996                           ; BSR set to: 0
  1997  000B14  0102               	movlb	2	; () banked
  1998  000B16  511A               	movf	(printf@exp+1)& (0+255),w,b
  1999  000B18  0A80               	xorlw	128
  2000  000B1A  0F80               	addlw	-128
  2001  000B1C  0E02               	movlw	2
  2002  000B1E  B4D8               	btfsc	status,2,c
  2003  000B20  5D19               	subwf	printf@exp& (0+255),w,b
  2004  000B22  A0D8               	btfss	status,0,c
  2005  000B24  D04F               	goto	l5514
  2006  000B26                     l5498:
  2007                           
  2008                           ; BSR set to: 2
  2009                           ;doprnt.c: 1129: if(integ < 4.294967296){
  2010  000B26  C211  F060         	movff	printf@integ,___ftge@ff1
  2011  000B2A  C212  F061         	movff	printf@integ+1,___ftge@ff1+1
  2012  000B2E  C213  F062         	movff	printf@integ+2,___ftge@ff1+2
  2013  000B32  0E70               	movlw	112
  2014  000B34  0100               	movlb	0	; () banked
  2015  000B36  6F63               	movwf	___ftge@ff2& (0+255),b
  2016  000B38  0E89               	movlw	137
  2017  000B3A  0100               	movlb	0	; () banked
  2018  000B3C  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2019  000B3E  0E40               	movlw	64
  2020  000B40  0100               	movlb	0	; () banked
  2021  000B42  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2022  000B44  EC17  F01A         	call	___ftge	;wreg free
  2023  000B48  B0D8               	btfsc	status,0,c
  2024  000B4A  D003               	goto	l5502
  2025                           
  2026                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2027  000B4C  0102               	movlb	2	; () banked
  2028  000B4E  0EF7               	movlw	247
  2029  000B50  D002               	goto	L3
  2030  000B52                     l5502:
  2031                           
  2032                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2033  000B52  0102               	movlb	2	; () banked
  2034  000B54  0EF8               	movlw	248
  2035  000B56                     L3:
  2036  000B56  0102               	movlb	2	; () banked
  2037  000B58  2719               	addwf	printf@exp& (0+255),f,b
  2038  000B5A  0EFF               	movlw	255
  2039  000B5C  0102               	movlb	2	; () banked
  2040  000B5E  231A               	addwfc	(printf@exp+1)& (0+255),f,b
  2041                           
  2042                           ; BSR set to: 2
  2043                           ;doprnt.c: 1133: }
  2044                           ;doprnt.c: 1134: integ = scale(exp);
  2045                           
  2046                           ; BSR set to: 2
  2047  000B60  0102               	movlb	2	; () banked
  2048  000B62  5119               	movf	printf@exp& (0+255),w,b
  2049  000B64  ECB3  F00C         	call	_scale
  2050  000B68  C07B  F211         	movff	?_scale,printf@integ
  2051  000B6C  C07C  F212         	movff	?_scale+1,printf@integ+1
  2052  000B70  C07D  F213         	movff	?_scale+2,printf@integ+2
  2053                           
  2054                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2055  000B74  C21F  F01B         	movff	printf@fval,__tdiv_to_l_@f1
  2056  000B78  C220  F01C         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2057  000B7C  C221  F01D         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2058  000B80  C211  F01E         	movff	printf@integ,__tdiv_to_l_@f2
  2059  000B84  C212  F01F         	movff	printf@integ+1,__tdiv_to_l_@f2+1
  2060  000B88  C213  F020         	movff	printf@integ+2,__tdiv_to_l_@f2+2
  2061  000B8C  EC97  F017         	call	__tdiv_to_l_	;wreg free
  2062  000B90  C01B  F203         	movff	?__tdiv_to_l_,_printf$1053
  2063  000B94  C01C  F204         	movff	?__tdiv_to_l_+1,_printf$1053+1
  2064  000B98  C01D  F205         	movff	?__tdiv_to_l_+2,_printf$1053+2
  2065  000B9C  C01E  F206         	movff	?__tdiv_to_l_+3,_printf$1053+3
  2066  000BA0  C203  F214         	movff	_printf$1053,printf@_val
  2067  000BA4  C204  F215         	movff	_printf$1053+1,printf@_val+1
  2068  000BA8  C205  F216         	movff	_printf$1053+2,printf@_val+2
  2069  000BAC  C206  F217         	movff	_printf$1053+3,printf@_val+3
  2070                           
  2071                           ;doprnt.c: 1138: fval = 0.0;
  2072  000BB0  0E00               	movlw	0
  2073  000BB2  0102               	movlb	2	; () banked
  2074  000BB4  6F1F               	movwf	printf@fval& (0+255),b
  2075  000BB6  0E00               	movlw	0
  2076  000BB8  0102               	movlb	2	; () banked
  2077  000BBA  6F20               	movwf	(printf@fval+1)& (0+255),b
  2078  000BBC  0E00               	movlw	0
  2079  000BBE  0102               	movlb	2	; () banked
  2080  000BC0  6F21               	movwf	(printf@fval+2)& (0+255),b
  2081                           
  2082                           ;doprnt.c: 1139: } else {
  2083  000BC2  D034               	goto	l5518
  2084  000BC4                     l5514:
  2085                           
  2086                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  2087  000BC4  C21F  F082         	movff	printf@fval,___fttol@f1
  2088  000BC8  C220  F083         	movff	printf@fval+1,___fttol@f1+1
  2089  000BCC  C221  F084         	movff	printf@fval+2,___fttol@f1+2
  2090  000BD0  EC0D  F014         	call	___fttol	;wreg free
  2091  000BD4  C082  F214         	movff	?___fttol,printf@_val
  2092  000BD8  C083  F215         	movff	?___fttol+1,printf@_val+1
  2093  000BDC  C084  F216         	movff	?___fttol+2,printf@_val+2
  2094  000BE0  C085  F217         	movff	?___fttol+3,printf@_val+3
  2095                           
  2096                           ;doprnt.c: 1141: fval -= (double)_val._val;
  2097  000BE4  C21F  F091         	movff	printf@fval,___ftsub@f1
  2098  000BE8  C220  F092         	movff	printf@fval+1,___ftsub@f1+1
  2099  000BEC  C221  F093         	movff	printf@fval+2,___ftsub@f1+2
  2100  000BF0  C214  F023         	movff	printf@_val,___lltoft@c
  2101  000BF4  C215  F024         	movff	printf@_val+1,___lltoft@c+1
  2102  000BF8  C216  F025         	movff	printf@_val+2,___lltoft@c+2
  2103  000BFC  C217  F026         	movff	printf@_val+3,___lltoft@c+3
  2104  000C00  EC7F  F01D         	call	___lltoft	;wreg free
  2105  000C04  C023  F094         	movff	?___lltoft,___ftsub@f2
  2106  000C08  C024  F095         	movff	?___lltoft+1,___ftsub@f2+1
  2107  000C0C  C025  F096         	movff	?___lltoft+2,___ftsub@f2+2
  2108  000C10  EC23  F01E         	call	___ftsub	;wreg free
  2109  000C14  C091  F21F         	movff	?___ftsub,printf@fval
  2110  000C18  C092  F220         	movff	?___ftsub+1,printf@fval+1
  2111  000C1C  C093  F221         	movff	?___ftsub+2,printf@fval+2
  2112                           
  2113                           ;doprnt.c: 1142: exp = 0;
  2114  000C20  0E00               	movlw	0
  2115  000C22  0102               	movlb	2	; () banked
  2116  000C24  6F1A               	movwf	(printf@exp+1)& (0+255),b
  2117  000C26  0E00               	movlw	0
  2118  000C28  0102               	movlb	2	; () banked
  2119  000C2A  6F19               	movwf	printf@exp& (0+255),b
  2120  000C2C                     l5518:
  2121                           
  2122                           ; BSR set to: 2
  2123                           ;doprnt.c: 1143: }
  2124                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2125  000C2C  0E01               	movlw	1
  2126  000C2E  0102               	movlb	2	; () banked
  2127  000C30  6F24               	movwf	printf@c& (0+255),b
  2128  000C32                     
  2129                           ; BSR set to: 2
  2130  000C32  0102               	movlb	2	; () banked
  2131  000C34  5124               	movf	printf@c& (0+255),w,b
  2132  000C36  0A0A               	xorlw	10
  2133  000C38  B4D8               	btfsc	status,2,c
  2134  000C3A  D01E               	goto	l5532
  2135                           
  2136                           ; BSR set to: 2
  2137                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  2138                           
  2139                           ; BSR set to: 2
  2140                           
  2141                           ; BSR set to: 2
  2142  000C3C  0102               	movlb	2	; () banked
  2143  000C3E  5124               	movf	printf@c& (0+255),w,b
  2144  000C40  0D04               	mullw	4
  2145  000C42  0E01               	movlw	low _dpowers
  2146  000C44  24F3               	addwf	prodl,w,c
  2147  000C46  6EF6               	movwf	tblptrl,c
  2148  000C48  0E06               	movlw	high _dpowers
  2149  000C4A  20F4               	addwfc	prodh,w,c
  2150  000C4C  6EF7               	movwf	tblptrh,c
  2151  000C4E                     	if	0	;There are less than 3 active tblptr bytes
  2152  000C4E                     	endif
  2153  000C4E  0009               	tblrd		*+
  2154  000C50  50F5               	movf	tablat,w,c
  2155  000C52  0102               	movlb	2	; () banked
  2156  000C54  5D14               	subwf	printf@_val& (0+255),w,b
  2157  000C56  0009               	tblrd		*+
  2158  000C58  50F5               	movf	tablat,w,c
  2159  000C5A  0102               	movlb	2	; () banked
  2160  000C5C  5915               	subwfb	(printf@_val+1)& (0+255),w,b
  2161  000C5E  0009               	tblrd		*+
  2162  000C60  50F5               	movf	tablat,w,c
  2163  000C62  0102               	movlb	2	; () banked
  2164  000C64  5916               	subwfb	(printf@_val+2)& (0+255),w,b
  2165  000C66  0009               	tblrd		*+
  2166  000C68  50F5               	movf	tablat,w,c
  2167  000C6A  0102               	movlb	2	; () banked
  2168  000C6C  5917               	subwfb	(printf@_val+3)& (0+255),w,b
  2169  000C6E  A0D8               	btfss	status,0,c
  2170  000C70  D003               	goto	l5532
  2171                           
  2172                           ; BSR set to: 2
  2173                           
  2174                           ; BSR set to: 2
  2175                           
  2176                           ; BSR set to: 2
  2177                           ;doprnt.c: 1147: break;
  2178  000C72  0102               	movlb	2	; () banked
  2179  000C74  2B24               	incf	printf@c& (0+255),f,b
  2180  000C76  D7DD               	goto	L4
  2181  000C78                     l5532:
  2182                           
  2183                           ; BSR set to: 2
  2184                           ;doprnt.c: 1151: width -= prec + c + exp;
  2185  000C78  0102               	movlb	2	; () banked
  2186  000C7A  C224  F09E         	movff	printf@c,??_printf
  2187  000C7E  0100               	movlb	0	; () banked
  2188  000C80  6B9F               	clrf	(??_printf+1)& (0+255),b
  2189  000C82  BF9E               	btfsc	??_printf& (0+255),7,b
  2190  000C84  079F               	decf	(??_printf+1)& (0+255),f,b
  2191  000C86  0102               	movlb	2	; () banked
  2192  000C88  5122               	movf	printf@prec& (0+255),w,b
  2193  000C8A  0100               	movlb	0	; () banked
  2194  000C8C  279E               	addwf	??_printf& (0+255),f,b
  2195  000C8E  0102               	movlb	2	; () banked
  2196  000C90  5123               	movf	(printf@prec+1)& (0+255),w,b
  2197  000C92  0100               	movlb	0	; () banked
  2198  000C94  239F               	addwfc	(??_printf+1)& (0+255),f,b
  2199  000C96  0102               	movlb	2	; () banked
  2200  000C98  5119               	movf	printf@exp& (0+255),w,b
  2201  000C9A  0100               	movlb	0	; () banked
  2202  000C9C  279E               	addwf	??_printf& (0+255),f,b
  2203  000C9E  0102               	movlb	2	; () banked
  2204  000CA0  511A               	movf	(printf@exp+1)& (0+255),w,b
  2205  000CA2  0100               	movlb	0	; () banked
  2206  000CA4  239F               	addwfc	(??_printf+1)& (0+255),f,b
  2207  000CA6  0100               	movlb	0	; () banked
  2208  000CA8  519E               	movf	??_printf& (0+255),w,b
  2209  000CAA  0102               	movlb	2	; () banked
  2210  000CAC  5F1D               	subwf	printf@width& (0+255),f,b
  2211  000CAE  0100               	movlb	0	; () banked
  2212  000CB0  519F               	movf	(??_printf+1)& (0+255),w,b
  2213  000CB2  0102               	movlb	2	; () banked
  2214  000CB4  5B1E               	subwfb	(printf@width+1)& (0+255),f,b
  2215                           
  2216                           ;doprnt.c: 1152: if(
  2217                           ;doprnt.c: 1156: prec)
  2218  000CB6  0102               	movlb	2	; () banked
  2219  000CB8  5123               	movf	(printf@prec+1)& (0+255),w,b
  2220  000CBA  1122               	iorwf	printf@prec& (0+255),w,b
  2221  000CBC  B4D8               	btfsc	status,2,c
  2222  000CBE  D004               	goto	l5536
  2223                           
  2224                           ; BSR set to: 2
  2225                           ;doprnt.c: 1157: width--;
  2226  000CC0  0102               	movlb	2	; () banked
  2227  000CC2  071D               	decf	printf@width& (0+255),f,b
  2228  000CC4  A0D8               	btfss	status,0,c
  2229  000CC6  071E               	decf	(printf@width+1)& (0+255),f,b
  2230  000CC8                     l5536:
  2231                           
  2232                           ; BSR set to: 2
  2233                           ;doprnt.c: 1158: if(flag & 0x03)
  2234  000CC8  0E03               	movlw	3
  2235  000CCA  0102               	movlb	2	; () banked
  2236  000CCC  151B               	andwf	printf@flag& (0+255),w,b
  2237  000CCE  0100               	movlb	0	; () banked
  2238  000CD0  6F9E               	movwf	??_printf& (0+255),b
  2239  000CD2  0E00               	movlw	0
  2240  000CD4  0102               	movlb	2	; () banked
  2241  000CD6  151C               	andwf	(printf@flag+1)& (0+255),w,b
  2242  000CD8  0100               	movlb	0	; () banked
  2243  000CDA  6F9F               	movwf	(??_printf+1)& (0+255),b
  2244  000CDC  0100               	movlb	0	; () banked
  2245  000CDE  519F               	movf	(??_printf+1)& (0+255),w,b
  2246  000CE0  119E               	iorwf	??_printf& (0+255),w,b
  2247  000CE2  B4D8               	btfsc	status,2,c
  2248  000CE4  D004               	goto	l5540
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;doprnt.c: 1159: width--;
  2252  000CE6  0102               	movlb	2	; () banked
  2253  000CE8  071D               	decf	printf@width& (0+255),f,b
  2254  000CEA  A0D8               	btfss	status,0,c
  2255  000CEC  071E               	decf	(printf@width+1)& (0+255),f,b
  2256  000CEE                     l5540:
  2257                           
  2258                           ;doprnt.c: 1162: if(flag & 0x04) {
  2259  000CEE  0102               	movlb	2	; () banked
  2260  000CF0  A51B               	btfss	printf@flag& (0+255),2,b
  2261  000CF2  D02D               	goto	l5556
  2262                           
  2263                           ; BSR set to: 2
  2264                           ;doprnt.c: 1166: if(flag & 0x03)
  2265  000CF4  0E03               	movlw	3
  2266  000CF6  0102               	movlb	2	; () banked
  2267  000CF8  151B               	andwf	printf@flag& (0+255),w,b
  2268  000CFA  0100               	movlb	0	; () banked
  2269  000CFC  6F9E               	movwf	??_printf& (0+255),b
  2270  000CFE  0E00               	movlw	0
  2271  000D00  0102               	movlb	2	; () banked
  2272  000D02  151C               	andwf	(printf@flag+1)& (0+255),w,b
  2273  000D04  0100               	movlb	0	; () banked
  2274  000D06  6F9F               	movwf	(??_printf+1)& (0+255),b
  2275  000D08  0100               	movlb	0	; () banked
  2276  000D0A  519F               	movf	(??_printf+1)& (0+255),w,b
  2277  000D0C  119E               	iorwf	??_printf& (0+255),w,b
  2278  000D0E  B4D8               	btfsc	status,2,c
  2279  000D10  D00B               	goto	l5550
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;doprnt.c: 1168: (putch('-') );
  2283  000D12  0E2D               	movlw	45
  2284  000D14  EC92  F01F         	call	_putch
  2285  000D18  D007               	goto	l5550
  2286  000D1A                     l5546:
  2287                           
  2288                           ;doprnt.c: 1178: (putch('0') );
  2289  000D1A  0E30               	movlw	48
  2290  000D1C  EC92  F01F         	call	_putch
  2291                           
  2292                           ;doprnt.c: 1179: width--;
  2293  000D20  0102               	movlb	2	; () banked
  2294  000D22  071D               	decf	printf@width& (0+255),f,b
  2295  000D24  A0D8               	btfss	status,0,c
  2296  000D26  071E               	decf	(printf@width+1)& (0+255),f,b
  2297  000D28                     l5550:
  2298  000D28  0102               	movlb	2	; () banked
  2299  000D2A  511E               	movf	(printf@width+1)& (0+255),w,b
  2300  000D2C  0A80               	xorlw	128
  2301  000D2E  6EF3               	movwf	prodl,c
  2302  000D30  0E80               	movlw	128
  2303  000D32  5CF3               	subwf	prodl,w,c
  2304  000D34  0E01               	movlw	1
  2305  000D36  B4D8               	btfsc	status,2,c
  2306  000D38  5D1D               	subwf	printf@width& (0+255),w,b
  2307  000D3A  A0D8               	btfss	status,0,c
  2308  000D3C  D06C               	goto	l5568
  2309  000D3E  D7ED               	goto	l5546
  2310  000D40                     l5552:
  2311                           
  2312                           ; BSR set to: 2
  2313                           ;doprnt.c: 1190: (putch(' ') );
  2314  000D40  0E20               	movlw	32
  2315  000D42  EC92  F01F         	call	_putch
  2316                           
  2317                           ;doprnt.c: 1191: width--;
  2318  000D46  0102               	movlb	2	; () banked
  2319  000D48  071D               	decf	printf@width& (0+255),f,b
  2320  000D4A  A0D8               	btfss	status,0,c
  2321  000D4C  071E               	decf	(printf@width+1)& (0+255),f,b
  2322  000D4E                     l5556:
  2323                           
  2324                           ; BSR set to: 2
  2325  000D4E  0102               	movlb	2	; () banked
  2326  000D50  511E               	movf	(printf@width+1)& (0+255),w,b
  2327  000D52  0A80               	xorlw	128
  2328  000D54  6EF3               	movwf	prodl,c
  2329  000D56  0E80               	movlw	128
  2330  000D58  5CF3               	subwf	prodl,w,c
  2331  000D5A  0E01               	movlw	1
  2332  000D5C  B4D8               	btfsc	status,2,c
  2333  000D5E  5D1D               	subwf	printf@width& (0+255),w,b
  2334  000D60  B0D8               	btfsc	status,0,c
  2335  000D62  D7EE               	goto	l5552
  2336                           
  2337                           ; BSR set to: 2
  2338                           ;doprnt.c: 1192: }
  2339                           ;doprnt.c: 1197: if(flag & 0x03)
  2340                           
  2341                           ; BSR set to: 2
  2342  000D64  0E03               	movlw	3
  2343  000D66  0102               	movlb	2	; () banked
  2344  000D68  151B               	andwf	printf@flag& (0+255),w,b
  2345  000D6A  0100               	movlb	0	; () banked
  2346  000D6C  6F9E               	movwf	??_printf& (0+255),b
  2347  000D6E  0E00               	movlw	0
  2348  000D70  0102               	movlb	2	; () banked
  2349  000D72  151C               	andwf	(printf@flag+1)& (0+255),w,b
  2350  000D74  0100               	movlb	0	; () banked
  2351  000D76  6F9F               	movwf	(??_printf+1)& (0+255),b
  2352  000D78  0100               	movlb	0	; () banked
  2353  000D7A  519F               	movf	(??_printf+1)& (0+255),w,b
  2354  000D7C  119E               	iorwf	??_printf& (0+255),w,b
  2355  000D7E  B4D8               	btfsc	status,2,c
  2356  000D80  D04A               	goto	l5568
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;doprnt.c: 1199: (putch('-') );
  2360  000D82  0E2D               	movlw	45
  2361  000D84  EC92  F01F         	call	_putch
  2362  000D88  D046               	goto	l5568
  2363  000D8A                     l5562:
  2364                           
  2365                           ;doprnt.c: 1209: {
  2366                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  2367  000D8A  C214  F01B         	movff	printf@_val,___lldiv@dividend
  2368  000D8E  C215  F01C         	movff	printf@_val+1,___lldiv@dividend+1
  2369  000D92  C216  F01D         	movff	printf@_val+2,___lldiv@dividend+2
  2370  000D96  C217  F01E         	movff	printf@_val+3,___lldiv@dividend+3
  2371  000D9A  0102               	movlb	2	; () banked
  2372  000D9C  5124               	movf	printf@c& (0+255),w,b
  2373  000D9E  0D04               	mullw	4
  2374  000DA0  0E01               	movlw	low _dpowers
  2375  000DA2  24F3               	addwf	prodl,w,c
  2376  000DA4  6EF6               	movwf	tblptrl,c
  2377  000DA6  0E06               	movlw	high _dpowers
  2378  000DA8  20F4               	addwfc	prodh,w,c
  2379  000DAA  6EF7               	movwf	tblptrh,c
  2380  000DAC                     	if	0	;There are less than 3 active tblptr bytes
  2381  000DAC                     	endif
  2382  000DAC  0009               	tblrd		*+
  2383  000DAE  CFF5 F01F          	movff	tablat,___lldiv@divisor
  2384  000DB2  0009               	tblrd		*+
  2385  000DB4  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  2386  000DB8  0009               	tblrd		*+
  2387  000DBA  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  2388  000DBE  000A               	tblrd		*-
  2389  000DC0  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  2390  000DC4  ECC7  F01C         	call	___lldiv	;wreg free
  2391  000DC8  C01B  F207         	movff	?___lldiv,printf@vd
  2392  000DCC  C01C  F208         	movff	?___lldiv+1,printf@vd+1
  2393  000DD0  C01D  F209         	movff	?___lldiv+2,printf@vd+2
  2394  000DD4  C01E  F20A         	movff	?___lldiv+3,printf@vd+3
  2395                           
  2396                           ;doprnt.c: 1211: vd %= 10;
  2397  000DD8  C207  F028         	movff	printf@vd,___llmod@dividend
  2398  000DDC  C208  F029         	movff	printf@vd+1,___llmod@dividend+1
  2399  000DE0  C209  F02A         	movff	printf@vd+2,___llmod@dividend+2
  2400  000DE4  C20A  F02B         	movff	printf@vd+3,___llmod@dividend+3
  2401  000DE8  0E0A               	movlw	10
  2402  000DEA  6E2C               	movwf	___llmod@divisor,c
  2403  000DEC  0E00               	movlw	0
  2404  000DEE  6E2D               	movwf	___llmod@divisor+1,c
  2405  000DF0  0E00               	movlw	0
  2406  000DF2  6E2E               	movwf	___llmod@divisor+2,c
  2407  000DF4  0E00               	movlw	0
  2408  000DF6  6E2F               	movwf	___llmod@divisor+3,c
  2409  000DF8  EC49  F01D         	call	___llmod	;wreg free
  2410  000DFC  C028  F207         	movff	?___llmod,printf@vd
  2411  000E00  C029  F208         	movff	?___llmod+1,printf@vd+1
  2412  000E04  C02A  F209         	movff	?___llmod+2,printf@vd+2
  2413  000E08  C02B  F20A         	movff	?___llmod+3,printf@vd+3
  2414                           
  2415                           ;doprnt.c: 1212: (putch('0' + vd) );
  2416  000E0C  0102               	movlb	2	; () banked
  2417  000E0E  5107               	movf	printf@vd& (0+255),w,b
  2418  000E10  0F30               	addlw	48
  2419  000E12  EC92  F01F         	call	_putch
  2420  000E16                     l5568:
  2421  000E16  0102               	movlb	2	; () banked
  2422  000E18  0724               	decf	printf@c& (0+255),f,b
  2423  000E1A  0102               	movlb	2	; () banked
  2424  000E1C  2924               	incf	printf@c& (0+255),w,b
  2425  000E1E  B4D8               	btfsc	status,2,c
  2426  000E20  D008               	goto	l5574
  2427  000E22  D7B3               	goto	l5562
  2428  000E24                     l5570:
  2429                           
  2430                           ; BSR set to: 2
  2431                           ;doprnt.c: 1217: (putch('0') );
  2432  000E24  0E30               	movlw	48
  2433  000E26  EC92  F01F         	call	_putch
  2434                           
  2435                           ;doprnt.c: 1218: exp--;
  2436  000E2A  0102               	movlb	2	; () banked
  2437  000E2C  0719               	decf	printf@exp& (0+255),f,b
  2438  000E2E  A0D8               	btfss	status,0,c
  2439  000E30  071A               	decf	(printf@exp+1)& (0+255),f,b
  2440  000E32                     l5574:
  2441                           
  2442                           ; BSR set to: 2
  2443  000E32  0102               	movlb	2	; () banked
  2444  000E34  511A               	movf	(printf@exp+1)& (0+255),w,b
  2445  000E36  0A80               	xorlw	128
  2446  000E38  6EF3               	movwf	prodl,c
  2447  000E3A  0E80               	movlw	128
  2448  000E3C  5CF3               	subwf	prodl,w,c
  2449  000E3E  0E01               	movlw	1
  2450  000E40  B4D8               	btfsc	status,2,c
  2451  000E42  5D19               	subwf	printf@exp& (0+255),w,b
  2452  000E44  B0D8               	btfsc	status,0,c
  2453  000E46  D7EE               	goto	l5570
  2454                           
  2455                           ; BSR set to: 2
  2456                           ;doprnt.c: 1219: }
  2457                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2458                           
  2459                           ; BSR set to: 2
  2460  000E48  0102               	movlb	2	; () banked
  2461  000E4A  5123               	movf	(printf@prec+1)& (0+255),w,b
  2462  000E4C  0A80               	xorlw	128
  2463  000E4E  0F80               	addlw	-128
  2464  000E50  0E09               	movlw	9
  2465  000E52  B4D8               	btfsc	status,2,c
  2466  000E54  5D22               	subwf	printf@prec& (0+255),w,b
  2467  000E56  A0D8               	btfss	status,0,c
  2468  000E58  D004               	goto	l676
  2469                           
  2470                           ; BSR set to: 2
  2471                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2472  000E5A  0E08               	movlw	8
  2473  000E5C  0102               	movlb	2	; () banked
  2474  000E5E  6F24               	movwf	printf@c& (0+255),b
  2475  000E60  D002               	goto	l5580
  2476  000E62                     l676:
  2477                           
  2478                           ; BSR set to: 2
  2479                           ;doprnt.c: 1222: else
  2480                           ;doprnt.c: 1223: c = prec;
  2481  000E62  C222  F224         	movff	printf@prec,printf@c
  2482  000E66                     l5580:
  2483                           
  2484                           ; BSR set to: 2
  2485                           ;doprnt.c: 1224: prec -= c;
  2486  000E66  0102               	movlb	2	; () banked
  2487  000E68  5124               	movf	printf@c& (0+255),w,b
  2488  000E6A  0102               	movlb	2	; () banked
  2489  000E6C  5F22               	subwf	printf@prec& (0+255),f,b
  2490  000E6E  0E00               	movlw	0
  2491  000E70  0102               	movlb	2	; () banked
  2492  000E72  BF24               	btfsc	printf@c& (0+255),7,b
  2493  000E74  0EFF               	movlw	255
  2494  000E76  0102               	movlb	2	; () banked
  2495  000E78  5B23               	subwfb	(printf@prec+1)& (0+255),f,b
  2496                           
  2497                           ; BSR set to: 2
  2498                           ;doprnt.c: 1228: if(c)
  2499  000E7A  0102               	movlb	2	; () banked
  2500  000E7C  5124               	movf	printf@c& (0+255),w,b
  2501  000E7E  B4D8               	btfsc	status,2,c
  2502  000E80  D003               	goto	l5586
  2503                           
  2504                           ; BSR set to: 2
  2505                           ;doprnt.c: 1230: (putch('.') );
  2506  000E82  0E2E               	movlw	46
  2507  000E84  EC92  F01F         	call	_putch
  2508  000E88                     l5586:
  2509                           
  2510                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2511  000E88  0102               	movlb	2	; () banked
  2512  000E8A  5124               	movf	printf@c& (0+255),w,b
  2513  000E8C  ECB3  F00C         	call	_scale
  2514  000E90  C07B  F200         	movff	?_scale,_printf$1706
  2515  000E94  C07C  F201         	movff	?_scale+1,_printf$1706+1
  2516  000E98  C07D  F202         	movff	?_scale+2,_printf$1706+2
  2517                           
  2518                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2519  000E9C  C21F  F06F         	movff	printf@fval,___ftmul@f2
  2520  000EA0  C220  F070         	movff	printf@fval+1,___ftmul@f2+1
  2521  000EA4  C221  F071         	movff	printf@fval+2,___ftmul@f2+2
  2522  000EA8  C200  F06C         	movff	_printf$1706,___ftmul@f1
  2523  000EAC  C201  F06D         	movff	_printf$1706+1,___ftmul@f1+1
  2524  000EB0  C202  F06E         	movff	_printf$1706+2,___ftmul@f1+2
  2525  000EB4  ECCB  F014         	call	___ftmul	;wreg free
  2526  000EB8  C06C  F082         	movff	?___ftmul,___fttol@f1
  2527  000EBC  C06D  F083         	movff	?___ftmul+1,___fttol@f1+1
  2528  000EC0  C06E  F084         	movff	?___ftmul+2,___fttol@f1+2
  2529  000EC4  EC0D  F014         	call	___fttol	;wreg free
  2530  000EC8  C082  F214         	movff	?___fttol,printf@_val
  2531  000ECC  C083  F215         	movff	?___fttol+1,printf@_val+1
  2532  000ED0  C084  F216         	movff	?___fttol+2,printf@_val+2
  2533  000ED4  C085  F217         	movff	?___fttol+3,printf@_val+3
  2534                           
  2535                           ;doprnt.c: 1237: while(c--) {
  2536  000ED8  D06D               	goto	l5598
  2537  000EDA                     l5590:
  2538                           
  2539                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  2540  000EDA  C214  F01B         	movff	printf@_val,___lldiv@dividend
  2541  000EDE  C215  F01C         	movff	printf@_val+1,___lldiv@dividend+1
  2542  000EE2  C216  F01D         	movff	printf@_val+2,___lldiv@dividend+2
  2543  000EE6  C217  F01E         	movff	printf@_val+3,___lldiv@dividend+3
  2544  000EEA  0102               	movlb	2	; () banked
  2545  000EEC  5124               	movf	printf@c& (0+255),w,b
  2546  000EEE  0D04               	mullw	4
  2547  000EF0  0E01               	movlw	low _dpowers
  2548  000EF2  24F3               	addwf	prodl,w,c
  2549  000EF4  6EF6               	movwf	tblptrl,c
  2550  000EF6  0E06               	movlw	high _dpowers
  2551  000EF8  20F4               	addwfc	prodh,w,c
  2552  000EFA  6EF7               	movwf	tblptrh,c
  2553  000EFC                     	if	0	;There are less than 3 active tblptr bytes
  2554  000EFC                     	endif
  2555  000EFC  0009               	tblrd		*+
  2556  000EFE  CFF5 F01F          	movff	tablat,___lldiv@divisor
  2557  000F02  0009               	tblrd		*+
  2558  000F04  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  2559  000F08  0009               	tblrd		*+
  2560  000F0A  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  2561  000F0E  000A               	tblrd		*-
  2562  000F10  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  2563  000F14  ECC7  F01C         	call	___lldiv	;wreg free
  2564  000F18  C01B  F20B         	movff	?___lldiv,printf@vd_1055
  2565  000F1C  C01C  F20C         	movff	?___lldiv+1,printf@vd_1055+1
  2566  000F20  C01D  F20D         	movff	?___lldiv+2,printf@vd_1055+2
  2567  000F24  C01E  F20E         	movff	?___lldiv+3,printf@vd_1055+3
  2568                           
  2569                           ;doprnt.c: 1239: vd %= 10;
  2570  000F28  C20B  F028         	movff	printf@vd_1055,___llmod@dividend
  2571  000F2C  C20C  F029         	movff	printf@vd_1055+1,___llmod@dividend+1
  2572  000F30  C20D  F02A         	movff	printf@vd_1055+2,___llmod@dividend+2
  2573  000F34  C20E  F02B         	movff	printf@vd_1055+3,___llmod@dividend+3
  2574  000F38  0E0A               	movlw	10
  2575  000F3A  6E2C               	movwf	___llmod@divisor,c
  2576  000F3C  0E00               	movlw	0
  2577  000F3E  6E2D               	movwf	___llmod@divisor+1,c
  2578  000F40  0E00               	movlw	0
  2579  000F42  6E2E               	movwf	___llmod@divisor+2,c
  2580  000F44  0E00               	movlw	0
  2581  000F46  6E2F               	movwf	___llmod@divisor+3,c
  2582  000F48  EC49  F01D         	call	___llmod	;wreg free
  2583  000F4C  C028  F20B         	movff	?___llmod,printf@vd_1055
  2584  000F50  C029  F20C         	movff	?___llmod+1,printf@vd_1055+1
  2585  000F54  C02A  F20D         	movff	?___llmod+2,printf@vd_1055+2
  2586  000F58  C02B  F20E         	movff	?___llmod+3,printf@vd_1055+3
  2587                           
  2588                           ;doprnt.c: 1240: (putch('0' + vd) );
  2589  000F5C  0102               	movlb	2	; () banked
  2590  000F5E  510B               	movf	printf@vd_1055& (0+255),w,b
  2591  000F60  0F30               	addlw	48
  2592  000F62  EC92  F01F         	call	_putch
  2593                           
  2594                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  2595  000F66  C214  F028         	movff	printf@_val,___llmod@dividend
  2596  000F6A  C215  F029         	movff	printf@_val+1,___llmod@dividend+1
  2597  000F6E  C216  F02A         	movff	printf@_val+2,___llmod@dividend+2
  2598  000F72  C217  F02B         	movff	printf@_val+3,___llmod@dividend+3
  2599  000F76  0102               	movlb	2	; () banked
  2600  000F78  5124               	movf	printf@c& (0+255),w,b
  2601  000F7A  0D04               	mullw	4
  2602  000F7C  0E01               	movlw	low _dpowers
  2603  000F7E  24F3               	addwf	prodl,w,c
  2604  000F80  6EF6               	movwf	tblptrl,c
  2605  000F82  0E06               	movlw	high _dpowers
  2606  000F84  20F4               	addwfc	prodh,w,c
  2607  000F86  6EF7               	movwf	tblptrh,c
  2608  000F88                     	if	0	;There are less than 3 active tblptr bytes
  2609  000F88                     	endif
  2610  000F88  0009               	tblrd		*+
  2611  000F8A  CFF5 F02C          	movff	tablat,___llmod@divisor
  2612  000F8E  0009               	tblrd		*+
  2613  000F90  CFF5 F02D          	movff	tablat,___llmod@divisor+1
  2614  000F94  0009               	tblrd		*+
  2615  000F96  CFF5 F02E          	movff	tablat,___llmod@divisor+2
  2616  000F9A  000A               	tblrd		*-
  2617  000F9C  CFF5 F02F          	movff	tablat,___llmod@divisor+3
  2618  000FA0  EC49  F01D         	call	___llmod	;wreg free
  2619  000FA4  C028  F214         	movff	?___llmod,printf@_val
  2620  000FA8  C029  F215         	movff	?___llmod+1,printf@_val+1
  2621  000FAC  C02A  F216         	movff	?___llmod+2,printf@_val+2
  2622  000FB0  C02B  F217         	movff	?___llmod+3,printf@_val+3
  2623  000FB4                     l5598:
  2624  000FB4  0102               	movlb	2	; () banked
  2625  000FB6  0724               	decf	printf@c& (0+255),f,b
  2626  000FB8  0102               	movlb	2	; () banked
  2627  000FBA  2924               	incf	printf@c& (0+255),w,b
  2628  000FBC  B4D8               	btfsc	status,2,c
  2629  000FBE  D008               	goto	l5604
  2630  000FC0  D78C               	goto	l5590
  2631  000FC2                     l5600:
  2632                           
  2633                           ; BSR set to: 2
  2634                           ;doprnt.c: 1245: (putch('0') );
  2635  000FC2  0E30               	movlw	48
  2636  000FC4  EC92  F01F         	call	_putch
  2637                           
  2638                           ;doprnt.c: 1246: prec--;
  2639  000FC8  0102               	movlb	2	; () banked
  2640  000FCA  0722               	decf	printf@prec& (0+255),f,b
  2641  000FCC  A0D8               	btfss	status,0,c
  2642  000FCE  0723               	decf	(printf@prec+1)& (0+255),f,b
  2643  000FD0                     l5604:
  2644                           
  2645                           ; BSR set to: 2
  2646  000FD0  0102               	movlb	2	; () banked
  2647  000FD2  5123               	movf	(printf@prec+1)& (0+255),w,b
  2648  000FD4  1122               	iorwf	printf@prec& (0+255),w,b
  2649  000FD6  B4D8               	btfsc	status,2,c
  2650  000FD8  D19C               	goto	l5692
  2651  000FDA  D7F3               	goto	l5600
  2652  000FDC                     l5606:
  2653                           
  2654                           ; BSR set to: 2
  2655                           ;doprnt.c: 1255: }
  2656                           ;doprnt.c: 1262: {
  2657                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2658  000FDC  C20F  FFD9         	movff	printf@ap,fsr2l
  2659  000FE0  C210  FFDA         	movff	printf@ap+1,fsr2h
  2660  000FE4  0102               	movlb	2	; () banked
  2661  000FE6  CFDE F214          	movff	postinc2,printf@_val
  2662  000FEA  0102               	movlb	2	; () banked
  2663  000FEC  CFDD F215          	movff	postdec2,printf@_val+1
  2664  000FF0  0102               	movlb	2	; () banked
  2665  000FF2  0E00               	movlw	0
  2666  000FF4  0102               	movlb	2	; () banked
  2667  000FF6  BF15               	btfsc	(printf@_val+1)& (0+255),7,b
  2668  000FF8  0EFF               	movlw	-1
  2669  000FFA  0102               	movlb	2	; () banked
  2670  000FFC  6F16               	movwf	(printf@_val+2)& (0+255),b
  2671  000FFE  0102               	movlb	2	; () banked
  2672  001000  6F17               	movwf	(printf@_val+3)& (0+255),b
  2673                           
  2674                           ; BSR set to: 2
  2675  001002  0E02               	movlw	2
  2676  001004  0102               	movlb	2	; () banked
  2677  001006  270F               	addwf	printf@ap& (0+255),f,b
  2678  001008  0E00               	movlw	0
  2679  00100A  0102               	movlb	2	; () banked
  2680  00100C  2310               	addwfc	(printf@ap+1)& (0+255),f,b
  2681                           
  2682                           ; BSR set to: 2
  2683                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  2684  00100E  0102               	movlb	2	; () banked
  2685  001010  5117               	movf	(printf@_val+3)& (0+255),w,b
  2686  001012  0A80               	xorlw	128
  2687  001014  0F80               	addlw	128
  2688  001016  E10B               	bnz	u6245
  2689  001018  0E00               	movlw	0
  2690  00101A  0102               	movlb	2	; () banked
  2691  00101C  5D16               	subwf	(printf@_val+2)& (0+255),w,b
  2692  00101E  E107               	bnz	u6245
  2693  001020  0E00               	movlw	0
  2694  001022  0102               	movlb	2	; () banked
  2695  001024  5D15               	subwf	(printf@_val+1)& (0+255),w,b
  2696  001026  E103               	bnz	u6245
  2697  001028  0E00               	movlw	0
  2698  00102A  0102               	movlb	2	; () banked
  2699  00102C  5D14               	subwf	printf@_val& (0+255),w,b
  2700  00102E                     u6245:
  2701  00102E  B0D8               	btfsc	status,0,c
  2702  001030  D012               	goto	l5616
  2703                           
  2704                           ; BSR set to: 2
  2705                           ;doprnt.c: 1271: flag |= 0x03;
  2706  001032  0E03               	movlw	3
  2707  001034  0102               	movlb	2	; () banked
  2708  001036  131B               	iorwf	printf@flag& (0+255),f,b
  2709                           
  2710                           ; BSR set to: 2
  2711                           ;doprnt.c: 1272: _val._val = -_val._val;
  2712  001038  0102               	movlb	2	; () banked
  2713  00103A  1F17               	comf	(printf@_val+3)& (0+255),f,b
  2714  00103C  0102               	movlb	2	; () banked
  2715  00103E  1F16               	comf	(printf@_val+2)& (0+255),f,b
  2716  001040  0102               	movlb	2	; () banked
  2717  001042  1F15               	comf	(printf@_val+1)& (0+255),f,b
  2718  001044  0102               	movlb	2	; () banked
  2719  001046  6D14               	negf	printf@_val& (0+255),b
  2720  001048  0E00               	movlw	0
  2721  00104A  0102               	movlb	2	; () banked
  2722  00104C  2315               	addwfc	(printf@_val+1)& (0+255),f,b
  2723  00104E  0102               	movlb	2	; () banked
  2724  001050  2316               	addwfc	(printf@_val+2)& (0+255),f,b
  2725  001052  0102               	movlb	2	; () banked
  2726  001054  2317               	addwfc	(printf@_val+3)& (0+255),f,b
  2727  001056                     l5616:
  2728                           
  2729                           ; BSR set to: 2
  2730                           ;doprnt.c: 1273: }
  2731                           ;doprnt.c: 1275: }
  2732                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  2733  001056  0102               	movlb	2	; () banked
  2734  001058  5123               	movf	(printf@prec+1)& (0+255),w,b
  2735  00105A  1122               	iorwf	printf@prec& (0+255),w,b
  2736  00105C  A4D8               	btfss	status,2,c
  2737  00105E  D00A               	goto	l5622
  2738                           
  2739                           ; BSR set to: 2
  2740  001060  0102               	movlb	2	; () banked
  2741  001062  5117               	movf	(printf@_val+3)& (0+255),w,b
  2742  001064  1114               	iorwf	printf@_val& (0+255),w,b
  2743  001066  1115               	iorwf	(printf@_val+1)& (0+255),w,b
  2744  001068  1116               	iorwf	(printf@_val+2)& (0+255),w,b
  2745  00106A  A4D8               	btfss	status,2,c
  2746  00106C  D003               	goto	l5622
  2747                           
  2748                           ; BSR set to: 2
  2749                           ;doprnt.c: 1300: prec++;
  2750  00106E  0102               	movlb	2	; () banked
  2751  001070  4B22               	infsnz	printf@prec& (0+255),f,b
  2752  001072  2B23               	incf	(printf@prec+1)& (0+255),f,b
  2753  001074                     l5622:
  2754                           
  2755                           ; BSR set to: 2
  2756                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2757  001074  0E01               	movlw	1
  2758  001076  0102               	movlb	2	; () banked
  2759  001078  6F24               	movwf	printf@c& (0+255),b
  2760  00107A                     
  2761                           ; BSR set to: 2
  2762  00107A  0102               	movlb	2	; () banked
  2763  00107C  5124               	movf	printf@c& (0+255),w,b
  2764  00107E  0A0A               	xorlw	10
  2765  001080  B4D8               	btfsc	status,2,c
  2766  001082  D01E               	goto	l5636
  2767                           
  2768                           ; BSR set to: 2
  2769                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2770                           
  2771                           ; BSR set to: 2
  2772                           
  2773                           ; BSR set to: 2
  2774  001084  0102               	movlb	2	; () banked
  2775  001086  5124               	movf	printf@c& (0+255),w,b
  2776  001088  0D04               	mullw	4
  2777  00108A  0E01               	movlw	low _dpowers
  2778  00108C  24F3               	addwf	prodl,w,c
  2779  00108E  6EF6               	movwf	tblptrl,c
  2780  001090  0E06               	movlw	high _dpowers
  2781  001092  20F4               	addwfc	prodh,w,c
  2782  001094  6EF7               	movwf	tblptrh,c
  2783  001096                     	if	0	;There are less than 3 active tblptr bytes
  2784  001096                     	endif
  2785  001096  0009               	tblrd		*+
  2786  001098  50F5               	movf	tablat,w,c
  2787  00109A  0102               	movlb	2	; () banked
  2788  00109C  5D14               	subwf	printf@_val& (0+255),w,b
  2789  00109E  0009               	tblrd		*+
  2790  0010A0  50F5               	movf	tablat,w,c
  2791  0010A2  0102               	movlb	2	; () banked
  2792  0010A4  5915               	subwfb	(printf@_val+1)& (0+255),w,b
  2793  0010A6  0009               	tblrd		*+
  2794  0010A8  50F5               	movf	tablat,w,c
  2795  0010AA  0102               	movlb	2	; () banked
  2796  0010AC  5916               	subwfb	(printf@_val+2)& (0+255),w,b
  2797  0010AE  0009               	tblrd		*+
  2798  0010B0  50F5               	movf	tablat,w,c
  2799  0010B2  0102               	movlb	2	; () banked
  2800  0010B4  5917               	subwfb	(printf@_val+3)& (0+255),w,b
  2801  0010B6  A0D8               	btfss	status,0,c
  2802  0010B8  D003               	goto	l5636
  2803                           
  2804                           ; BSR set to: 2
  2805                           
  2806                           ; BSR set to: 2
  2807                           
  2808                           ; BSR set to: 2
  2809                           ;doprnt.c: 1316: break;
  2810  0010BA  0102               	movlb	2	; () banked
  2811  0010BC  2B24               	incf	printf@c& (0+255),f,b
  2812  0010BE  D7DD               	goto	L5
  2813  0010C0                     l5636:
  2814                           
  2815                           ; BSR set to: 2
  2816                           ;doprnt.c: 1348: if(c < prec)
  2817  0010C0  0E80               	movlw	128
  2818  0010C2  0102               	movlb	2	; () banked
  2819  0010C4  BF24               	btfsc	printf@c& (0+255),7,b
  2820  0010C6  0E7F               	movlw	127
  2821  0010C8  0100               	movlb	0	; () banked
  2822  0010CA  6F9E               	movwf	??_printf& (0+255),b
  2823  0010CC  0102               	movlb	2	; () banked
  2824  0010CE  5122               	movf	printf@prec& (0+255),w,b
  2825  0010D0  0102               	movlb	2	; () banked
  2826  0010D2  5D24               	subwf	printf@c& (0+255),w,b
  2827  0010D4  0102               	movlb	2	; () banked
  2828  0010D6  5123               	movf	(printf@prec+1)& (0+255),w,b
  2829  0010D8  0A80               	xorlw	128
  2830  0010DA  0100               	movlb	0	; () banked
  2831  0010DC  599E               	subwfb	??_printf& (0+255),w,b
  2832  0010DE  B0D8               	btfsc	status,0,c
  2833  0010E0  D003               	goto	l5640
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;doprnt.c: 1349: c = prec;
  2837  0010E2  C222  F224         	movff	printf@prec,printf@c
  2838  0010E6  D01A               	goto	l5644
  2839  0010E8                     l5640:
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;doprnt.c: 1350: else if(prec < c)
  2843  0010E8  0102               	movlb	2	; () banked
  2844  0010EA  5123               	movf	(printf@prec+1)& (0+255),w,b
  2845  0010EC  0A80               	xorlw	128
  2846  0010EE  0100               	movlb	0	; () banked
  2847  0010F0  6F9E               	movwf	??_printf& (0+255),b
  2848  0010F2  0102               	movlb	2	; () banked
  2849  0010F4  5124               	movf	printf@c& (0+255),w,b
  2850  0010F6  0102               	movlb	2	; () banked
  2851  0010F8  5D22               	subwf	printf@prec& (0+255),w,b
  2852  0010FA  0E80               	movlw	128
  2853  0010FC  0102               	movlb	2	; () banked
  2854  0010FE  BF24               	btfsc	printf@c& (0+255),7,b
  2855  001100  0E7F               	movlw	127
  2856  001102  0100               	movlb	0	; () banked
  2857  001104  599E               	subwfb	??_printf& (0+255),w,b
  2858  001106  B0D8               	btfsc	status,0,c
  2859  001108  D009               	goto	l5644
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;doprnt.c: 1351: prec = c;
  2863  00110A  0102               	movlb	2	; () banked
  2864  00110C  5124               	movf	printf@c& (0+255),w,b
  2865  00110E  0102               	movlb	2	; () banked
  2866  001110  6F22               	movwf	printf@prec& (0+255),b
  2867  001112  0102               	movlb	2	; () banked
  2868  001114  6B23               	clrf	(printf@prec+1)& (0+255),b
  2869  001116  0102               	movlb	2	; () banked
  2870  001118  BF22               	btfsc	printf@prec& (0+255),7,b
  2871  00111A  0723               	decf	(printf@prec+1)& (0+255),f,b
  2872  00111C                     l5644:
  2873                           
  2874                           ;doprnt.c: 1354: if(width && flag & 0x03)
  2875  00111C  0102               	movlb	2	; () banked
  2876  00111E  511E               	movf	(printf@width+1)& (0+255),w,b
  2877  001120  111D               	iorwf	printf@width& (0+255),w,b
  2878  001122  B4D8               	btfsc	status,2,c
  2879  001124  D013               	goto	l5650
  2880                           
  2881                           ; BSR set to: 2
  2882  001126  0E03               	movlw	3
  2883  001128  0102               	movlb	2	; () banked
  2884  00112A  151B               	andwf	printf@flag& (0+255),w,b
  2885  00112C  0100               	movlb	0	; () banked
  2886  00112E  6F9E               	movwf	??_printf& (0+255),b
  2887  001130  0E00               	movlw	0
  2888  001132  0102               	movlb	2	; () banked
  2889  001134  151C               	andwf	(printf@flag+1)& (0+255),w,b
  2890  001136  0100               	movlb	0	; () banked
  2891  001138  6F9F               	movwf	(??_printf+1)& (0+255),b
  2892  00113A  0100               	movlb	0	; () banked
  2893  00113C  519F               	movf	(??_printf+1)& (0+255),w,b
  2894  00113E  119E               	iorwf	??_printf& (0+255),w,b
  2895  001140  B4D8               	btfsc	status,2,c
  2896  001142  D004               	goto	l5650
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;doprnt.c: 1355: width--;
  2900  001144  0102               	movlb	2	; () banked
  2901  001146  071D               	decf	printf@width& (0+255),f,b
  2902  001148  A0D8               	btfss	status,0,c
  2903  00114A  071E               	decf	(printf@width+1)& (0+255),f,b
  2904  00114C                     l5650:
  2905                           
  2906                           ;doprnt.c: 1357: if(flag & 0x4000) {
  2907  00114C  0102               	movlb	2	; () banked
  2908  00114E  AD1C               	btfss	(printf@flag+1)& (0+255),6,b
  2909  001150  D01F               	goto	l5658
  2910                           
  2911                           ; BSR set to: 2
  2912                           ;doprnt.c: 1358: if(width > prec)
  2913  001152  0102               	movlb	2	; () banked
  2914  001154  5123               	movf	(printf@prec+1)& (0+255),w,b
  2915  001156  0A80               	xorlw	128
  2916  001158  0100               	movlb	0	; () banked
  2917  00115A  6F9E               	movwf	??_printf& (0+255),b
  2918  00115C  0102               	movlb	2	; () banked
  2919  00115E  511D               	movf	printf@width& (0+255),w,b
  2920  001160  0102               	movlb	2	; () banked
  2921  001162  5D22               	subwf	printf@prec& (0+255),w,b
  2922  001164  0102               	movlb	2	; () banked
  2923  001166  511E               	movf	(printf@width+1)& (0+255),w,b
  2924  001168  0A80               	xorlw	128
  2925  00116A  0100               	movlb	0	; () banked
  2926  00116C  599E               	subwfb	??_printf& (0+255),w,b
  2927  00116E  B0D8               	btfsc	status,0,c
  2928  001170  D009               	goto	l5656
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;doprnt.c: 1359: width -= prec;
  2932  001172  0102               	movlb	2	; () banked
  2933  001174  5122               	movf	printf@prec& (0+255),w,b
  2934  001176  0102               	movlb	2	; () banked
  2935  001178  5F1D               	subwf	printf@width& (0+255),f,b
  2936  00117A  0102               	movlb	2	; () banked
  2937  00117C  5123               	movf	(printf@prec+1)& (0+255),w,b
  2938  00117E  0102               	movlb	2	; () banked
  2939  001180  5B1E               	subwfb	(printf@width+1)& (0+255),f,b
  2940  001182  D006               	goto	l5658
  2941  001184                     l5656:
  2942                           
  2943                           ;doprnt.c: 1360: else
  2944                           ;doprnt.c: 1361: width = 0;
  2945  001184  0E00               	movlw	0
  2946  001186  0102               	movlb	2	; () banked
  2947  001188  6F1E               	movwf	(printf@width+1)& (0+255),b
  2948  00118A  0E00               	movlw	0
  2949  00118C  0102               	movlb	2	; () banked
  2950  00118E  6F1D               	movwf	printf@width& (0+255),b
  2951  001190                     l5658:
  2952                           
  2953                           ; BSR set to: 2
  2954                           ;doprnt.c: 1362: }
  2955                           ;doprnt.c: 1390: if(width > c)
  2956  001190  0E80               	movlw	128
  2957  001192  0102               	movlb	2	; () banked
  2958  001194  BF24               	btfsc	printf@c& (0+255),7,b
  2959  001196  0E7F               	movlw	127
  2960  001198  0100               	movlb	0	; () banked
  2961  00119A  6F9E               	movwf	??_printf& (0+255),b
  2962  00119C  0102               	movlb	2	; () banked
  2963  00119E  511D               	movf	printf@width& (0+255),w,b
  2964  0011A0  0102               	movlb	2	; () banked
  2965  0011A2  5D24               	subwf	printf@c& (0+255),w,b
  2966  0011A4  0102               	movlb	2	; () banked
  2967  0011A6  511E               	movf	(printf@width+1)& (0+255),w,b
  2968  0011A8  0A80               	xorlw	128
  2969  0011AA  0100               	movlb	0	; () banked
  2970  0011AC  599E               	subwfb	??_printf& (0+255),w,b
  2971  0011AE  B0D8               	btfsc	status,0,c
  2972  0011B0  D00B               	goto	l5662
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;doprnt.c: 1391: width -= c;
  2976  0011B2  0102               	movlb	2	; () banked
  2977  0011B4  5124               	movf	printf@c& (0+255),w,b
  2978  0011B6  0102               	movlb	2	; () banked
  2979  0011B8  5F1D               	subwf	printf@width& (0+255),f,b
  2980  0011BA  0E00               	movlw	0
  2981  0011BC  0102               	movlb	2	; () banked
  2982  0011BE  BF24               	btfsc	printf@c& (0+255),7,b
  2983  0011C0  0EFF               	movlw	255
  2984  0011C2  0102               	movlb	2	; () banked
  2985  0011C4  5B1E               	subwfb	(printf@width+1)& (0+255),f,b
  2986  0011C6  D006               	goto	l5664
  2987  0011C8                     l5662:
  2988                           
  2989                           ;doprnt.c: 1392: else
  2990                           ;doprnt.c: 1393: width = 0;
  2991  0011C8  0E00               	movlw	0
  2992  0011CA  0102               	movlb	2	; () banked
  2993  0011CC  6F1E               	movwf	(printf@width+1)& (0+255),b
  2994  0011CE  0E00               	movlw	0
  2995  0011D0  0102               	movlb	2	; () banked
  2996  0011D2  6F1D               	movwf	printf@width& (0+255),b
  2997  0011D4                     l5664:
  2998                           
  2999                           ; BSR set to: 2
  3000                           ;doprnt.c: 1396: if(flag & 0x04) {
  3001  0011D4  0102               	movlb	2	; () banked
  3002  0011D6  A51B               	btfss	printf@flag& (0+255),2,b
  3003  0011D8  D020               	goto	l5676
  3004                           
  3005                           ; BSR set to: 2
  3006                           ;doprnt.c: 1401: if(flag & 0x03)
  3007  0011DA  0E03               	movlw	3
  3008  0011DC  0102               	movlb	2	; () banked
  3009  0011DE  151B               	andwf	printf@flag& (0+255),w,b
  3010  0011E0  0100               	movlb	0	; () banked
  3011  0011E2  6F9E               	movwf	??_printf& (0+255),b
  3012  0011E4  0E00               	movlw	0
  3013  0011E6  0102               	movlb	2	; () banked
  3014  0011E8  151C               	andwf	(printf@flag+1)& (0+255),w,b
  3015  0011EA  0100               	movlb	0	; () banked
  3016  0011EC  6F9F               	movwf	(??_printf+1)& (0+255),b
  3017  0011EE  0100               	movlb	0	; () banked
  3018  0011F0  519F               	movf	(??_printf+1)& (0+255),w,b
  3019  0011F2  119E               	iorwf	??_printf& (0+255),w,b
  3020  0011F4  B4D8               	btfsc	status,2,c
  3021  0011F6  D003               	goto	l5670
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;doprnt.c: 1402: (putch('-') );
  3025  0011F8  0E2D               	movlw	45
  3026  0011FA  EC92  F01F         	call	_putch
  3027  0011FE                     l5670:
  3028                           
  3029                           ;doprnt.c: 1424: if(width)
  3030  0011FE  0102               	movlb	2	; () banked
  3031  001200  0102               	movlb	2	; () banked
  3032  001202  511E               	movf	(printf@width+1)& (0+255),w,b
  3033  001204  111D               	iorwf	printf@width& (0+255),w,b
  3034  001206  B4D8               	btfsc	status,2,c
  3035  001208  D07A               	goto	l5690
  3036                           
  3037                           ; BSR set to: 2
  3038                           ;doprnt.c: 1426: (putch('0') );
  3039                           
  3040                           ; BSR set to: 2
  3041                           
  3042                           ;doprnt.c: 1425: do
  3043  00120A  0E30               	movlw	48
  3044  00120C  EC92  F01F         	call	_putch
  3045                           
  3046                           ;doprnt.c: 1427: while(--width);
  3047  001210  0102               	movlb	2	; () banked
  3048  001212  071D               	decf	printf@width& (0+255),f,b
  3049  001214  A0D8               	btfss	status,0,c
  3050  001216  071E               	decf	(printf@width+1)& (0+255),f,b
  3051  001218  D7F3               	goto	L6
  3052  00121A                     l5676:
  3053                           
  3054                           ; BSR set to: 2
  3055                           ;doprnt.c: 1431: {
  3056                           ;doprnt.c: 1433: if(width
  3057                           ;doprnt.c: 1437: )
  3058  00121A  0102               	movlb	2	; () banked
  3059  00121C  511E               	movf	(printf@width+1)& (0+255),w,b
  3060  00121E  111D               	iorwf	printf@width& (0+255),w,b
  3061  001220  B4D8               	btfsc	status,2,c
  3062  001222  D00C               	goto	l5682
  3063  001224                     l5678:
  3064                           
  3065                           ; BSR set to: 2
  3066                           ;doprnt.c: 1439: (putch(' ') );
  3067  001224  0E20               	movlw	32
  3068  001226  EC92  F01F         	call	_putch
  3069                           
  3070                           ;doprnt.c: 1440: while(--width);
  3071  00122A  0102               	movlb	2	; () banked
  3072  00122C  071D               	decf	printf@width& (0+255),f,b
  3073  00122E  A0D8               	btfss	status,0,c
  3074  001230  071E               	decf	(printf@width+1)& (0+255),f,b
  3075  001232  0102               	movlb	2	; () banked
  3076  001234  511E               	movf	(printf@width+1)& (0+255),w,b
  3077  001236  111D               	iorwf	printf@width& (0+255),w,b
  3078  001238  A4D8               	btfss	status,2,c
  3079  00123A  D7F4               	goto	l5678
  3080  00123C                     l5682:
  3081                           
  3082                           ; BSR set to: 2
  3083                           ;doprnt.c: 1447: if(flag & 0x03)
  3084  00123C  0E03               	movlw	3
  3085  00123E  0102               	movlb	2	; () banked
  3086  001240  151B               	andwf	printf@flag& (0+255),w,b
  3087  001242  0100               	movlb	0	; () banked
  3088  001244  6F9E               	movwf	??_printf& (0+255),b
  3089  001246  0E00               	movlw	0
  3090  001248  0102               	movlb	2	; () banked
  3091  00124A  151C               	andwf	(printf@flag+1)& (0+255),w,b
  3092  00124C  0100               	movlb	0	; () banked
  3093  00124E  6F9F               	movwf	(??_printf+1)& (0+255),b
  3094  001250  0100               	movlb	0	; () banked
  3095  001252  519F               	movf	(??_printf+1)& (0+255),w,b
  3096  001254  119E               	iorwf	??_printf& (0+255),w,b
  3097  001256  B4D8               	btfsc	status,2,c
  3098  001258  D052               	goto	l5690
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;doprnt.c: 1448: (putch('-') );
  3102  00125A  0E2D               	movlw	45
  3103  00125C  EC92  F01F         	call	_putch
  3104  001260  D04E               	goto	l5690
  3105  001262                     l5686:
  3106                           
  3107                           ;doprnt.c: 1487: {
  3108                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  3109  001262  0102               	movlb	2	; () banked
  3110  001264  C222  F09E         	movff	printf@prec,??_printf
  3111  001268  0102               	movlb	2	; () banked
  3112  00126A  C223  F09F         	movff	printf@prec+1,??_printf+1
  3113  00126E  0100               	movlb	0	; () banked
  3114  001270  90D8               	bcf	status,0,c
  3115  001272  379E               	rlcf	??_printf& (0+255),f,b
  3116  001274  379F               	rlcf	(??_printf+1)& (0+255),f,b
  3117  001276  0100               	movlb	0	; () banked
  3118  001278  90D8               	bcf	status,0,c
  3119  00127A  379E               	rlcf	??_printf& (0+255),f,b
  3120  00127C  379F               	rlcf	(??_printf+1)& (0+255),f,b
  3121  00127E  0E01               	movlw	low _dpowers
  3122  001280  0100               	movlb	0	; () banked
  3123  001282  259E               	addwf	??_printf& (0+255),w,b
  3124  001284  6EF6               	movwf	tblptrl,c
  3125  001286  0E06               	movlw	high _dpowers
  3126  001288  219F               	addwfc	(??_printf+1)& (0+255),w,b
  3127  00128A  6EF7               	movwf	tblptrh,c
  3128  00128C                     	if	0	;There are less than 3 active tblptr bytes
  3129  00128C                     	endif
  3130  00128C  0009               	tblrd		*+
  3131  00128E  CFF5 F01F          	movff	tablat,___lldiv@divisor
  3132  001292  0009               	tblrd		*+
  3133  001294  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  3134  001298  0009               	tblrd		*+
  3135  00129A  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  3136  00129E  000A               	tblrd		*-
  3137  0012A0  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  3138  0012A4  C214  F01B         	movff	printf@_val,___lldiv@dividend
  3139  0012A8  C215  F01C         	movff	printf@_val+1,___lldiv@dividend+1
  3140  0012AC  C216  F01D         	movff	printf@_val+2,___lldiv@dividend+2
  3141  0012B0  C217  F01E         	movff	printf@_val+3,___lldiv@dividend+3
  3142  0012B4  ECC7  F01C         	call	___lldiv	;wreg free
  3143  0012B8  C01B  F028         	movff	?___lldiv,___llmod@dividend
  3144  0012BC  C01C  F029         	movff	?___lldiv+1,___llmod@dividend+1
  3145  0012C0  C01D  F02A         	movff	?___lldiv+2,___llmod@dividend+2
  3146  0012C4  C01E  F02B         	movff	?___lldiv+3,___llmod@dividend+3
  3147  0012C8  0E0A               	movlw	10
  3148  0012CA  6E2C               	movwf	___llmod@divisor,c
  3149  0012CC  0E00               	movlw	0
  3150  0012CE  6E2D               	movwf	___llmod@divisor+1,c
  3151  0012D0  0E00               	movlw	0
  3152  0012D2  6E2E               	movwf	___llmod@divisor+2,c
  3153  0012D4  0E00               	movlw	0
  3154  0012D6  6E2F               	movwf	___llmod@divisor+3,c
  3155  0012D8  EC49  F01D         	call	___llmod	;wreg free
  3156  0012DC  C028  F0A0         	movff	?___llmod,??_printf+2
  3157  0012E0  C029  F0A1         	movff	?___llmod+1,??_printf+3
  3158  0012E4  C02A  F0A2         	movff	?___llmod+2,??_printf+4
  3159  0012E8  C02B  F0A3         	movff	?___llmod+3,??_printf+5
  3160  0012EC  0100               	movlb	0	; () banked
  3161  0012EE  51A0               	movf	(??_printf+2)& (0+255),w,b
  3162  0012F0  0F30               	addlw	48
  3163  0012F2  0102               	movlb	2	; () banked
  3164  0012F4  6F24               	movwf	printf@c& (0+255),b
  3165                           
  3166                           ; BSR set to: 2
  3167                           ;doprnt.c: 1532: }
  3168                           ;doprnt.c: 1533: (putch(c) );
  3169  0012F6  0102               	movlb	2	; () banked
  3170  0012F8  5124               	movf	printf@c& (0+255),w,b
  3171  0012FA  EC92  F01F         	call	_putch
  3172  0012FE                     l5690:
  3173  0012FE  0102               	movlb	2	; () banked
  3174  001300  0722               	decf	printf@prec& (0+255),f,b
  3175  001302  A0D8               	btfss	status,0,c
  3176  001304  0723               	decf	(printf@prec+1)& (0+255),f,b
  3177  001306  0102               	movlb	2	; () banked
  3178  001308  2922               	incf	printf@prec& (0+255),w,b
  3179  00130A  B4D8               	btfsc	status,2,c
  3180  00130C  2923               	incf	(printf@prec+1)& (0+255),w,b
  3181  00130E  A4D8               	btfss	status,2,c
  3182  001310  D7A8               	goto	l5686
  3183  001312                     l5692:
  3184  001312  0100               	movlb	0	; () banked
  3185  001314  C097  FFF6         	movff	printf@f,tblptrl
  3186  001318  0100               	movlb	0	; () banked
  3187  00131A  C098  FFF7         	movff	printf@f+1,tblptrh
  3188  00131E  0100               	movlb	0	; () banked
  3189  001320  4B97               	infsnz	printf@f& (0+255),f,b
  3190  001322  2B98               	incf	(printf@f+1)& (0+255),f,b
  3191  001324                     	if	0	;tblptru may be non-zero
  3192  001324                     	endif
  3193  001324                     	if	0	;tblptru may be non-zero
  3194  001324                     	endif
  3195  001324  0008               	tblrd		*
  3196  001326  0102               	movlb	2	; () banked
  3197  001328  CFF5 F224          	movff	tablat,printf@c
  3198  00132C  0102               	movlb	2	; () banked
  3199  00132E  6724               	tstfsz	printf@c& (0+255),b
  3200  001330  EF68  F003         	goto	l5396
  3201  001334  0012               	return	
  3202  001336                     __end_of_printf:
  3203                           	opt stack 0
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           prodh	equ	0xFF4
  3209                           prodl	equ	0xFF3
  3210                           intcon	equ	0xFF2
  3211                           postinc0	equ	0xFEE
  3212                           wreg	equ	0xFE8
  3213                           postinc2	equ	0xFDE
  3214                           postdec2	equ	0xFDD
  3215                           fsr2h	equ	0xFDA
  3216                           fsr2l	equ	0xFD9
  3217                           status	equ	0xFD8
  3218                           
  3219 ;; *************** function _scale *****************
  3220 ;; Defined at:
  3221 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;  scl             1    wreg     char 
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;  scl             1   33[BANK0 ] char 
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  3   27[BANK0 ] char 
  3228 ;; Registers used:
  3229 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3235 ;;      Params:         0       3       0       0       0       0       0
  3236 ;;      Locals:         0       4       0       0       0       0       0
  3237 ;;      Temps:          0       0       0       0       0       0       0
  3238 ;;      Totals:         0       7       0       0       0       0       0
  3239 ;;Total ram usage:        7 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    6
  3242 ;; This function calls:
  3243 ;;		___awdiv
  3244 ;;		___awmod
  3245 ;;		___ftmul
  3246 ;;		___wmul
  3247 ;; This function is called by:
  3248 ;;		_printf
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text2
  3253  001966                     __ptext2:
  3254                           	opt stack 0
  3255  001966                     _scale:
  3256                           	opt stack 23
  3257                           
  3258                           ; BSR set to: 2
  3259                           ;incstack = 0
  3260                           ;scale@scl stored from wreg
  3261  001966  0100               	movlb	0	; () banked
  3262  001968  6F81               	movwf	scale@scl& (0+255),b
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;doprnt.c: 428: if(scl < 0) {
  3266  00196A  0100               	movlb	0	; () banked
  3267  00196C  AF81               	btfss	scale@scl& (0+255),7,b
  3268  00196E  D11C               	goto	l4992
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;doprnt.c: 429: scl = -scl;
  3272  001970  0100               	movlb	0	; () banked
  3273  001972  6D81               	negf	scale@scl& (0+255),b
  3274                           
  3275                           ;doprnt.c: 430: if(scl>=110)
  3276  001974  0100               	movlb	0	; () banked
  3277  001976  5181               	movf	scale@scl& (0+255),w,b
  3278  001978  0A80               	xorlw	128
  3279  00197A  0F12               	addlw	-238
  3280  00197C  A0D8               	btfss	status,0,c
  3281  00197E  D09D               	goto	l4982
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3285  001980  0E00               	movlw	0
  3286  001982  6E2C               	movwf	___wmul@multiplicand+1,c
  3287  001984  0E03               	movlw	3
  3288  001986  6E2B               	movwf	___wmul@multiplicand,c
  3289  001988  0E00               	movlw	0
  3290  00198A  6E24               	movwf	___awdiv@divisor+1,c
  3291  00198C  0E0A               	movlw	10
  3292  00198E  6E23               	movwf	___awdiv@divisor,c
  3293  001990  0E00               	movlw	0
  3294  001992  6E1E               	movwf	___awmod@divisor+1,c
  3295  001994  0E64               	movlw	100
  3296  001996  6E1D               	movwf	___awmod@divisor,c
  3297  001998  0100               	movlb	0	; () banked
  3298  00199A  5181               	movf	scale@scl& (0+255),w,b
  3299  00199C  6E1B               	movwf	___awmod@dividend,c
  3300  00199E  6A1C               	clrf	___awmod@dividend+1,c
  3301  0019A0  BE1B               	btfsc	___awmod@dividend,7,c
  3302  0019A2  061C               	decf	___awmod@dividend+1,f,c
  3303  0019A4  EC37  F01C         	call	___awmod	;wreg free
  3304  0019A8  C01B  F021         	movff	?___awmod,___awdiv@dividend
  3305  0019AC  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  3306  0019B0  EC9C  F01B         	call	___awdiv	;wreg free
  3307  0019B4  0E09               	movlw	9
  3308  0019B6  2421               	addwf	?___awdiv,w,c
  3309  0019B8  6E29               	movwf	___wmul@multiplier,c
  3310  0019BA  0E00               	movlw	0
  3311  0019BC  2022               	addwfc	?___awdiv+1,w,c
  3312  0019BE  6E2A               	movwf	___wmul@multiplier+1,c
  3313  0019C0  EC09  F01F         	call	___wmul	;wreg free
  3314  0019C4  0E29               	movlw	low __npowers_
  3315  0019C6  2429               	addwf	?___wmul,w,c
  3316  0019C8  6EF6               	movwf	tblptrl,c
  3317  0019CA  0E06               	movlw	high __npowers_
  3318  0019CC  202A               	addwfc	?___wmul+1,w,c
  3319  0019CE  6EF7               	movwf	tblptrh,c
  3320  0019D0                     	if	0	;There are less than 3 active tblptr bytes
  3321  0019D0                     	endif
  3322  0019D0  0009               	tblrd		*+
  3323  0019D2  0100               	movlb	0	; () banked
  3324  0019D4  CFF5 F06F          	movff	tablat,___ftmul@f2
  3325  0019D8  0009               	tblrd		*+
  3326  0019DA  0100               	movlb	0	; () banked
  3327  0019DC  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3328  0019E0  000A               	tblrd		*-
  3329  0019E2  0100               	movlb	0	; () banked
  3330  0019E4  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3331  0019E8  0E00               	movlw	0
  3332  0019EA  6E24               	movwf	___awdiv@divisor+1,c
  3333  0019EC  0E64               	movlw	100
  3334  0019EE  6E23               	movwf	___awdiv@divisor,c
  3335  0019F0  0100               	movlb	0	; () banked
  3336  0019F2  5181               	movf	scale@scl& (0+255),w,b
  3337  0019F4  6E21               	movwf	___awdiv@dividend,c
  3338  0019F6  6A22               	clrf	___awdiv@dividend+1,c
  3339  0019F8  BE21               	btfsc	___awdiv@dividend,7,c
  3340  0019FA  0622               	decf	___awdiv@dividend+1,f,c
  3341  0019FC  EC9C  F01B         	call	___awdiv	;wreg free
  3342  001A00  0E12               	movlw	18
  3343  001A02  2421               	addwf	?___awdiv,w,c
  3344  001A04  6E29               	movwf	___wmul@multiplier,c
  3345  001A06  0E00               	movlw	0
  3346  001A08  2022               	addwfc	?___awdiv+1,w,c
  3347  001A0A  6E2A               	movwf	___wmul@multiplier+1,c
  3348  001A0C  0E00               	movlw	0
  3349  001A0E  6E2C               	movwf	___wmul@multiplicand+1,c
  3350  001A10  0E03               	movlw	3
  3351  001A12  6E2B               	movwf	___wmul@multiplicand,c
  3352  001A14  EC09  F01F         	call	___wmul	;wreg free
  3353  001A18  0E29               	movlw	low __npowers_
  3354  001A1A  2429               	addwf	?___wmul,w,c
  3355  001A1C  6EF6               	movwf	tblptrl,c
  3356  001A1E  0E06               	movlw	high __npowers_
  3357  001A20  202A               	addwfc	?___wmul+1,w,c
  3358  001A22  6EF7               	movwf	tblptrh,c
  3359  001A24                     	if	0	;There are less than 3 active tblptr bytes
  3360  001A24                     	endif
  3361  001A24  0009               	tblrd		*+
  3362  001A26  0100               	movlb	0	; () banked
  3363  001A28  CFF5 F06C          	movff	tablat,___ftmul@f1
  3364  001A2C  0009               	tblrd		*+
  3365  001A2E  0100               	movlb	0	; () banked
  3366  001A30  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  3367  001A34  000A               	tblrd		*-
  3368  001A36  0100               	movlb	0	; () banked
  3369  001A38  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  3370  001A3C  ECCB  F014         	call	___ftmul	;wreg free
  3371  001A40  C06C  F07E         	movff	?___ftmul,_scale$1705
  3372  001A44  C06D  F07F         	movff	?___ftmul+1,_scale$1705+1
  3373  001A48  C06E  F080         	movff	?___ftmul+2,_scale$1705+2
  3374                           
  3375                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3376  001A4C  C07E  F06C         	movff	_scale$1705,___ftmul@f1
  3377  001A50  C07F  F06D         	movff	_scale$1705+1,___ftmul@f1+1
  3378  001A54  C080  F06E         	movff	_scale$1705+2,___ftmul@f1+2
  3379  001A58  0E00               	movlw	0
  3380  001A5A  6E2C               	movwf	___wmul@multiplicand+1,c
  3381  001A5C  0E03               	movlw	3
  3382  001A5E  6E2B               	movwf	___wmul@multiplicand,c
  3383  001A60  0E00               	movlw	0
  3384  001A62  6E1E               	movwf	___awmod@divisor+1,c
  3385  001A64  0E0A               	movlw	10
  3386  001A66  6E1D               	movwf	___awmod@divisor,c
  3387  001A68  0100               	movlb	0	; () banked
  3388  001A6A  5181               	movf	scale@scl& (0+255),w,b
  3389  001A6C  6E1B               	movwf	___awmod@dividend,c
  3390  001A6E  6A1C               	clrf	___awmod@dividend+1,c
  3391  001A70  BE1B               	btfsc	___awmod@dividend,7,c
  3392  001A72  061C               	decf	___awmod@dividend+1,f,c
  3393  001A74  EC37  F01C         	call	___awmod	;wreg free
  3394  001A78  C01B  F029         	movff	?___awmod,___wmul@multiplier
  3395  001A7C  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  3396  001A80  EC09  F01F         	call	___wmul	;wreg free
  3397  001A84  0E29               	movlw	low __npowers_
  3398  001A86  2429               	addwf	?___wmul,w,c
  3399  001A88  6EF6               	movwf	tblptrl,c
  3400  001A8A  0E06               	movlw	high __npowers_
  3401  001A8C  202A               	addwfc	?___wmul+1,w,c
  3402  001A8E  6EF7               	movwf	tblptrh,c
  3403  001A90                     	if	0	;There are less than 3 active tblptr bytes
  3404  001A90                     	endif
  3405  001A90  0009               	tblrd		*+
  3406  001A92  0100               	movlb	0	; () banked
  3407  001A94  CFF5 F06F          	movff	tablat,___ftmul@f2
  3408  001A98  0009               	tblrd		*+
  3409  001A9A  0100               	movlb	0	; () banked
  3410  001A9C  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3411  001AA0  000A               	tblrd		*-
  3412  001AA2  0100               	movlb	0	; () banked
  3413  001AA4  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3414  001AA8  ECCB  F014         	call	___ftmul	;wreg free
  3415  001AAC  C06C  F07B         	movff	?___ftmul,?_scale
  3416  001AB0  C06D  F07C         	movff	?___ftmul+1,?_scale+1
  3417  001AB4  C06E  F07D         	movff	?___ftmul+2,?_scale+2
  3418  001AB8  0012               	return	
  3419  001ABA                     l4982:
  3420                           
  3421                           ;doprnt.c: 432: else if(scl > 10)
  3422  001ABA  0100               	movlb	0	; () banked
  3423  001ABC  5181               	movf	scale@scl& (0+255),w,b
  3424  001ABE  0A80               	xorlw	128
  3425  001AC0  0F75               	addlw	-139
  3426  001AC2  A0D8               	btfss	status,0,c
  3427  001AC4  D05B               	goto	l4988
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3431  001AC6  0E00               	movlw	0
  3432  001AC8  6E24               	movwf	___awdiv@divisor+1,c
  3433  001ACA  0E0A               	movlw	10
  3434  001ACC  6E23               	movwf	___awdiv@divisor,c
  3435  001ACE  0100               	movlb	0	; () banked
  3436  001AD0  5181               	movf	scale@scl& (0+255),w,b
  3437  001AD2  6E21               	movwf	___awdiv@dividend,c
  3438  001AD4  6A22               	clrf	___awdiv@dividend+1,c
  3439  001AD6  BE21               	btfsc	___awdiv@dividend,7,c
  3440  001AD8  0622               	decf	___awdiv@dividend+1,f,c
  3441  001ADA  EC9C  F01B         	call	___awdiv	;wreg free
  3442  001ADE  0E09               	movlw	9
  3443  001AE0  2421               	addwf	?___awdiv,w,c
  3444  001AE2  6E29               	movwf	___wmul@multiplier,c
  3445  001AE4  0E00               	movlw	0
  3446  001AE6  2022               	addwfc	?___awdiv+1,w,c
  3447  001AE8  6E2A               	movwf	___wmul@multiplier+1,c
  3448  001AEA  0E00               	movlw	0
  3449  001AEC  6E2C               	movwf	___wmul@multiplicand+1,c
  3450  001AEE  0E03               	movlw	3
  3451  001AF0  6E2B               	movwf	___wmul@multiplicand,c
  3452  001AF2  EC09  F01F         	call	___wmul	;wreg free
  3453  001AF6  0E29               	movlw	low __npowers_
  3454  001AF8  2429               	addwf	?___wmul,w,c
  3455  001AFA  6EF6               	movwf	tblptrl,c
  3456  001AFC  0E06               	movlw	high __npowers_
  3457  001AFE  202A               	addwfc	?___wmul+1,w,c
  3458  001B00  6EF7               	movwf	tblptrh,c
  3459  001B02                     	if	0	;There are less than 3 active tblptr bytes
  3460  001B02                     	endif
  3461  001B02  0009               	tblrd		*+
  3462  001B04  0100               	movlb	0	; () banked
  3463  001B06  CFF5 F06C          	movff	tablat,___ftmul@f1
  3464  001B0A  0009               	tblrd		*+
  3465  001B0C  0100               	movlb	0	; () banked
  3466  001B0E  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  3467  001B12  000A               	tblrd		*-
  3468  001B14  0100               	movlb	0	; () banked
  3469  001B16  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  3470  001B1A  0E00               	movlw	0
  3471  001B1C  6E2C               	movwf	___wmul@multiplicand+1,c
  3472  001B1E  0E03               	movlw	3
  3473  001B20  6E2B               	movwf	___wmul@multiplicand,c
  3474  001B22  0E00               	movlw	0
  3475  001B24  6E1E               	movwf	___awmod@divisor+1,c
  3476  001B26  0E0A               	movlw	10
  3477  001B28  6E1D               	movwf	___awmod@divisor,c
  3478  001B2A  0100               	movlb	0	; () banked
  3479  001B2C  5181               	movf	scale@scl& (0+255),w,b
  3480  001B2E  6E1B               	movwf	___awmod@dividend,c
  3481  001B30  6A1C               	clrf	___awmod@dividend+1,c
  3482  001B32  BE1B               	btfsc	___awmod@dividend,7,c
  3483  001B34  061C               	decf	___awmod@dividend+1,f,c
  3484  001B36  EC37  F01C         	call	___awmod	;wreg free
  3485  001B3A  C01B  F029         	movff	?___awmod,___wmul@multiplier
  3486  001B3E  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  3487  001B42  EC09  F01F         	call	___wmul	;wreg free
  3488  001B46  0E29               	movlw	low __npowers_
  3489  001B48  2429               	addwf	?___wmul,w,c
  3490  001B4A  6EF6               	movwf	tblptrl,c
  3491  001B4C  0E06               	movlw	high __npowers_
  3492  001B4E  202A               	addwfc	?___wmul+1,w,c
  3493  001B50  6EF7               	movwf	tblptrh,c
  3494  001B52                     	if	0	;There are less than 3 active tblptr bytes
  3495  001B52                     	endif
  3496  001B52  0009               	tblrd		*+
  3497  001B54  0100               	movlb	0	; () banked
  3498  001B56  CFF5 F06F          	movff	tablat,___ftmul@f2
  3499  001B5A  0009               	tblrd		*+
  3500  001B5C  0100               	movlb	0	; () banked
  3501  001B5E  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3502  001B62  000A               	tblrd		*-
  3503  001B64  0100               	movlb	0	; () banked
  3504  001B66  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3505  001B6A  ECCB  F014         	call	___ftmul	;wreg free
  3506  001B6E  C06C  F07B         	movff	?___ftmul,?_scale
  3507  001B72  C06D  F07C         	movff	?___ftmul+1,?_scale+1
  3508  001B76  C06E  F07D         	movff	?___ftmul+2,?_scale+2
  3509  001B7A  0012               	return	
  3510  001B7C                     l4988:
  3511                           
  3512                           ;doprnt.c: 434: return _npowers_[scl];
  3513  001B7C  0100               	movlb	0	; () banked
  3514  001B7E  5181               	movf	scale@scl& (0+255),w,b
  3515  001B80  0D03               	mullw	3
  3516  001B82  0E29               	movlw	low __npowers_
  3517  001B84  24F3               	addwf	prodl,w,c
  3518  001B86  6EF6               	movwf	tblptrl,c
  3519  001B88  0E06               	movlw	high __npowers_
  3520  001B8A  20F4               	addwfc	prodh,w,c
  3521  001B8C  6EF7               	movwf	tblptrh,c
  3522  001B8E                     	if	0	;There are less than 3 active tblptr bytes
  3523  001B8E                     	endif
  3524  001B8E  0009               	tblrd		*+
  3525  001B90  0100               	movlb	0	; () banked
  3526  001B92  CFF5 F07B          	movff	tablat,?_scale
  3527  001B96  0009               	tblrd		*+
  3528  001B98  0100               	movlb	0	; () banked
  3529  001B9A  CFF5 F07C          	movff	tablat,?_scale+1
  3530  001B9E  000A               	tblrd		*-
  3531  001BA0  0100               	movlb	0	; () banked
  3532  001BA2  CFF5 F07D          	movff	tablat,?_scale+2
  3533  001BA6  0012               	return	
  3534  001BA8                     l4992:
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;doprnt.c: 435: }
  3538                           ;doprnt.c: 436: if(scl>=110)
  3539  001BA8  0100               	movlb	0	; () banked
  3540  001BAA  5181               	movf	scale@scl& (0+255),w,b
  3541  001BAC  0A80               	xorlw	128
  3542  001BAE  0F12               	addlw	-238
  3543  001BB0  A0D8               	btfss	status,0,c
  3544  001BB2  D09D               	goto	l5000
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3548  001BB4  0E00               	movlw	0
  3549  001BB6  6E2C               	movwf	___wmul@multiplicand+1,c
  3550  001BB8  0E03               	movlw	3
  3551  001BBA  6E2B               	movwf	___wmul@multiplicand,c
  3552  001BBC  0E00               	movlw	0
  3553  001BBE  6E24               	movwf	___awdiv@divisor+1,c
  3554  001BC0  0E0A               	movlw	10
  3555  001BC2  6E23               	movwf	___awdiv@divisor,c
  3556  001BC4  0E00               	movlw	0
  3557  001BC6  6E1E               	movwf	___awmod@divisor+1,c
  3558  001BC8  0E64               	movlw	100
  3559  001BCA  6E1D               	movwf	___awmod@divisor,c
  3560  001BCC  0100               	movlb	0	; () banked
  3561  001BCE  5181               	movf	scale@scl& (0+255),w,b
  3562  001BD0  6E1B               	movwf	___awmod@dividend,c
  3563  001BD2  6A1C               	clrf	___awmod@dividend+1,c
  3564  001BD4  BE1B               	btfsc	___awmod@dividend,7,c
  3565  001BD6  061C               	decf	___awmod@dividend+1,f,c
  3566  001BD8  EC37  F01C         	call	___awmod	;wreg free
  3567  001BDC  C01B  F021         	movff	?___awmod,___awdiv@dividend
  3568  001BE0  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  3569  001BE4  EC9C  F01B         	call	___awdiv	;wreg free
  3570  001BE8  0E09               	movlw	9
  3571  001BEA  2421               	addwf	?___awdiv,w,c
  3572  001BEC  6E29               	movwf	___wmul@multiplier,c
  3573  001BEE  0E00               	movlw	0
  3574  001BF0  2022               	addwfc	?___awdiv+1,w,c
  3575  001BF2  6E2A               	movwf	___wmul@multiplier+1,c
  3576  001BF4  EC09  F01F         	call	___wmul	;wreg free
  3577  001BF8  0E50               	movlw	low __powers_
  3578  001BFA  2429               	addwf	?___wmul,w,c
  3579  001BFC  6EF6               	movwf	tblptrl,c
  3580  001BFE  0E06               	movlw	high __powers_
  3581  001C00  202A               	addwfc	?___wmul+1,w,c
  3582  001C02  6EF7               	movwf	tblptrh,c
  3583  001C04                     	if	0	;There are less than 3 active tblptr bytes
  3584  001C04                     	endif
  3585  001C04  0009               	tblrd		*+
  3586  001C06  0100               	movlb	0	; () banked
  3587  001C08  CFF5 F06F          	movff	tablat,___ftmul@f2
  3588  001C0C  0009               	tblrd		*+
  3589  001C0E  0100               	movlb	0	; () banked
  3590  001C10  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3591  001C14  000A               	tblrd		*-
  3592  001C16  0100               	movlb	0	; () banked
  3593  001C18  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3594  001C1C  0E00               	movlw	0
  3595  001C1E  6E24               	movwf	___awdiv@divisor+1,c
  3596  001C20  0E64               	movlw	100
  3597  001C22  6E23               	movwf	___awdiv@divisor,c
  3598  001C24  0100               	movlb	0	; () banked
  3599  001C26  5181               	movf	scale@scl& (0+255),w,b
  3600  001C28  6E21               	movwf	___awdiv@dividend,c
  3601  001C2A  6A22               	clrf	___awdiv@dividend+1,c
  3602  001C2C  BE21               	btfsc	___awdiv@dividend,7,c
  3603  001C2E  0622               	decf	___awdiv@dividend+1,f,c
  3604  001C30  EC9C  F01B         	call	___awdiv	;wreg free
  3605  001C34  0E12               	movlw	18
  3606  001C36  2421               	addwf	?___awdiv,w,c
  3607  001C38  6E29               	movwf	___wmul@multiplier,c
  3608  001C3A  0E00               	movlw	0
  3609  001C3C  2022               	addwfc	?___awdiv+1,w,c
  3610  001C3E  6E2A               	movwf	___wmul@multiplier+1,c
  3611  001C40  0E00               	movlw	0
  3612  001C42  6E2C               	movwf	___wmul@multiplicand+1,c
  3613  001C44  0E03               	movlw	3
  3614  001C46  6E2B               	movwf	___wmul@multiplicand,c
  3615  001C48  EC09  F01F         	call	___wmul	;wreg free
  3616  001C4C  0E50               	movlw	low __powers_
  3617  001C4E  2429               	addwf	?___wmul,w,c
  3618  001C50  6EF6               	movwf	tblptrl,c
  3619  001C52  0E06               	movlw	high __powers_
  3620  001C54  202A               	addwfc	?___wmul+1,w,c
  3621  001C56  6EF7               	movwf	tblptrh,c
  3622  001C58                     	if	0	;There are less than 3 active tblptr bytes
  3623  001C58                     	endif
  3624  001C58  0009               	tblrd		*+
  3625  001C5A  0100               	movlb	0	; () banked
  3626  001C5C  CFF5 F06C          	movff	tablat,___ftmul@f1
  3627  001C60  0009               	tblrd		*+
  3628  001C62  0100               	movlb	0	; () banked
  3629  001C64  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  3630  001C68  000A               	tblrd		*-
  3631  001C6A  0100               	movlb	0	; () banked
  3632  001C6C  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  3633  001C70  ECCB  F014         	call	___ftmul	;wreg free
  3634  001C74  C06C  F07E         	movff	?___ftmul,_scale$1705
  3635  001C78  C06D  F07F         	movff	?___ftmul+1,_scale$1705+1
  3636  001C7C  C06E  F080         	movff	?___ftmul+2,_scale$1705+2
  3637                           
  3638                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3639  001C80  C07E  F06C         	movff	_scale$1705,___ftmul@f1
  3640  001C84  C07F  F06D         	movff	_scale$1705+1,___ftmul@f1+1
  3641  001C88  C080  F06E         	movff	_scale$1705+2,___ftmul@f1+2
  3642  001C8C  0E00               	movlw	0
  3643  001C8E  6E2C               	movwf	___wmul@multiplicand+1,c
  3644  001C90  0E03               	movlw	3
  3645  001C92  6E2B               	movwf	___wmul@multiplicand,c
  3646  001C94  0E00               	movlw	0
  3647  001C96  6E1E               	movwf	___awmod@divisor+1,c
  3648  001C98  0E0A               	movlw	10
  3649  001C9A  6E1D               	movwf	___awmod@divisor,c
  3650  001C9C  0100               	movlb	0	; () banked
  3651  001C9E  5181               	movf	scale@scl& (0+255),w,b
  3652  001CA0  6E1B               	movwf	___awmod@dividend,c
  3653  001CA2  6A1C               	clrf	___awmod@dividend+1,c
  3654  001CA4  BE1B               	btfsc	___awmod@dividend,7,c
  3655  001CA6  061C               	decf	___awmod@dividend+1,f,c
  3656  001CA8  EC37  F01C         	call	___awmod	;wreg free
  3657  001CAC  C01B  F029         	movff	?___awmod,___wmul@multiplier
  3658  001CB0  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  3659  001CB4  EC09  F01F         	call	___wmul	;wreg free
  3660  001CB8  0E50               	movlw	low __powers_
  3661  001CBA  2429               	addwf	?___wmul,w,c
  3662  001CBC  6EF6               	movwf	tblptrl,c
  3663  001CBE  0E06               	movlw	high __powers_
  3664  001CC0  202A               	addwfc	?___wmul+1,w,c
  3665  001CC2  6EF7               	movwf	tblptrh,c
  3666  001CC4                     	if	0	;There are less than 3 active tblptr bytes
  3667  001CC4                     	endif
  3668  001CC4  0009               	tblrd		*+
  3669  001CC6  0100               	movlb	0	; () banked
  3670  001CC8  CFF5 F06F          	movff	tablat,___ftmul@f2
  3671  001CCC  0009               	tblrd		*+
  3672  001CCE  0100               	movlb	0	; () banked
  3673  001CD0  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3674  001CD4  000A               	tblrd		*-
  3675  001CD6  0100               	movlb	0	; () banked
  3676  001CD8  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3677  001CDC  ECCB  F014         	call	___ftmul	;wreg free
  3678  001CE0  C06C  F07B         	movff	?___ftmul,?_scale
  3679  001CE4  C06D  F07C         	movff	?___ftmul+1,?_scale+1
  3680  001CE8  C06E  F07D         	movff	?___ftmul+2,?_scale+2
  3681  001CEC  0012               	return	
  3682  001CEE                     l5000:
  3683                           
  3684                           ;doprnt.c: 438: else if(scl > 10)
  3685  001CEE  0100               	movlb	0	; () banked
  3686  001CF0  5181               	movf	scale@scl& (0+255),w,b
  3687  001CF2  0A80               	xorlw	128
  3688  001CF4  0F75               	addlw	-139
  3689  001CF6  A0D8               	btfss	status,0,c
  3690  001CF8  D05B               	goto	l5006
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3694  001CFA  0E00               	movlw	0
  3695  001CFC  6E24               	movwf	___awdiv@divisor+1,c
  3696  001CFE  0E0A               	movlw	10
  3697  001D00  6E23               	movwf	___awdiv@divisor,c
  3698  001D02  0100               	movlb	0	; () banked
  3699  001D04  5181               	movf	scale@scl& (0+255),w,b
  3700  001D06  6E21               	movwf	___awdiv@dividend,c
  3701  001D08  6A22               	clrf	___awdiv@dividend+1,c
  3702  001D0A  BE21               	btfsc	___awdiv@dividend,7,c
  3703  001D0C  0622               	decf	___awdiv@dividend+1,f,c
  3704  001D0E  EC9C  F01B         	call	___awdiv	;wreg free
  3705  001D12  0E09               	movlw	9
  3706  001D14  2421               	addwf	?___awdiv,w,c
  3707  001D16  6E29               	movwf	___wmul@multiplier,c
  3708  001D18  0E00               	movlw	0
  3709  001D1A  2022               	addwfc	?___awdiv+1,w,c
  3710  001D1C  6E2A               	movwf	___wmul@multiplier+1,c
  3711  001D1E  0E00               	movlw	0
  3712  001D20  6E2C               	movwf	___wmul@multiplicand+1,c
  3713  001D22  0E03               	movlw	3
  3714  001D24  6E2B               	movwf	___wmul@multiplicand,c
  3715  001D26  EC09  F01F         	call	___wmul	;wreg free
  3716  001D2A  0E50               	movlw	low __powers_
  3717  001D2C  2429               	addwf	?___wmul,w,c
  3718  001D2E  6EF6               	movwf	tblptrl,c
  3719  001D30  0E06               	movlw	high __powers_
  3720  001D32  202A               	addwfc	?___wmul+1,w,c
  3721  001D34  6EF7               	movwf	tblptrh,c
  3722  001D36                     	if	0	;There are less than 3 active tblptr bytes
  3723  001D36                     	endif
  3724  001D36  0009               	tblrd		*+
  3725  001D38  0100               	movlb	0	; () banked
  3726  001D3A  CFF5 F06C          	movff	tablat,___ftmul@f1
  3727  001D3E  0009               	tblrd		*+
  3728  001D40  0100               	movlb	0	; () banked
  3729  001D42  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  3730  001D46  000A               	tblrd		*-
  3731  001D48  0100               	movlb	0	; () banked
  3732  001D4A  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  3733  001D4E  0E00               	movlw	0
  3734  001D50  6E2C               	movwf	___wmul@multiplicand+1,c
  3735  001D52  0E03               	movlw	3
  3736  001D54  6E2B               	movwf	___wmul@multiplicand,c
  3737  001D56  0E00               	movlw	0
  3738  001D58  6E1E               	movwf	___awmod@divisor+1,c
  3739  001D5A  0E0A               	movlw	10
  3740  001D5C  6E1D               	movwf	___awmod@divisor,c
  3741  001D5E  0100               	movlb	0	; () banked
  3742  001D60  5181               	movf	scale@scl& (0+255),w,b
  3743  001D62  6E1B               	movwf	___awmod@dividend,c
  3744  001D64  6A1C               	clrf	___awmod@dividend+1,c
  3745  001D66  BE1B               	btfsc	___awmod@dividend,7,c
  3746  001D68  061C               	decf	___awmod@dividend+1,f,c
  3747  001D6A  EC37  F01C         	call	___awmod	;wreg free
  3748  001D6E  C01B  F029         	movff	?___awmod,___wmul@multiplier
  3749  001D72  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  3750  001D76  EC09  F01F         	call	___wmul	;wreg free
  3751  001D7A  0E50               	movlw	low __powers_
  3752  001D7C  2429               	addwf	?___wmul,w,c
  3753  001D7E  6EF6               	movwf	tblptrl,c
  3754  001D80  0E06               	movlw	high __powers_
  3755  001D82  202A               	addwfc	?___wmul+1,w,c
  3756  001D84  6EF7               	movwf	tblptrh,c
  3757  001D86                     	if	0	;There are less than 3 active tblptr bytes
  3758  001D86                     	endif
  3759  001D86  0009               	tblrd		*+
  3760  001D88  0100               	movlb	0	; () banked
  3761  001D8A  CFF5 F06F          	movff	tablat,___ftmul@f2
  3762  001D8E  0009               	tblrd		*+
  3763  001D90  0100               	movlb	0	; () banked
  3764  001D92  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3765  001D96  000A               	tblrd		*-
  3766  001D98  0100               	movlb	0	; () banked
  3767  001D9A  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3768  001D9E  ECCB  F014         	call	___ftmul	;wreg free
  3769  001DA2  C06C  F07B         	movff	?___ftmul,?_scale
  3770  001DA6  C06D  F07C         	movff	?___ftmul+1,?_scale+1
  3771  001DAA  C06E  F07D         	movff	?___ftmul+2,?_scale+2
  3772  001DAE  0012               	return	
  3773  001DB0                     l5006:
  3774                           
  3775                           ;doprnt.c: 440: return _powers_[scl];
  3776  001DB0  0100               	movlb	0	; () banked
  3777  001DB2  5181               	movf	scale@scl& (0+255),w,b
  3778  001DB4  0D03               	mullw	3
  3779  001DB6  0E50               	movlw	low __powers_
  3780  001DB8  24F3               	addwf	prodl,w,c
  3781  001DBA  6EF6               	movwf	tblptrl,c
  3782  001DBC  0E06               	movlw	high __powers_
  3783  001DBE  20F4               	addwfc	prodh,w,c
  3784  001DC0  6EF7               	movwf	tblptrh,c
  3785  001DC2                     	if	0	;There are less than 3 active tblptr bytes
  3786  001DC2                     	endif
  3787  001DC2  0009               	tblrd		*+
  3788  001DC4  0100               	movlb	0	; () banked
  3789  001DC6  CFF5 F07B          	movff	tablat,?_scale
  3790  001DCA  0009               	tblrd		*+
  3791  001DCC  0100               	movlb	0	; () banked
  3792  001DCE  CFF5 F07C          	movff	tablat,?_scale+1
  3793  001DD2  000A               	tblrd		*-
  3794  001DD4  0100               	movlb	0	; () banked
  3795  001DD6  CFF5 F07D          	movff	tablat,?_scale+2
  3796  001DDA  0012               	return	
  3797  001DDC                     __end_of_scale:
  3798                           	opt stack 0
  3799                           tblptru	equ	0xFF8
  3800                           tblptrh	equ	0xFF7
  3801                           tblptrl	equ	0xFF6
  3802                           tablat	equ	0xFF5
  3803                           prodh	equ	0xFF4
  3804                           prodl	equ	0xFF3
  3805                           intcon	equ	0xFF2
  3806                           postinc0	equ	0xFEE
  3807                           wreg	equ	0xFE8
  3808                           postinc2	equ	0xFDE
  3809                           postdec2	equ	0xFDD
  3810                           fsr2h	equ	0xFDA
  3811                           fsr2l	equ	0xFD9
  3812                           status	equ	0xFD8
  3813                           
  3814 ;; *************** function _putch *****************
  3815 ;; Defined at:
  3816 ;;		line 168 in file "mcc_generated_files/eusart1.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;  txData          1    wreg     unsigned char 
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;  txData          1   27[COMRAM] unsigned char 
  3821 ;; Return value:  Size  Location     Type
  3822 ;;		None               void
  3823 ;; Registers used:
  3824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3825 ;; Tracked objects:
  3826 ;;		On entry : 0/0
  3827 ;;		On exit  : 0/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3830 ;;      Params:         0       0       0       0       0       0       0
  3831 ;;      Locals:         1       0       0       0       0       0       0
  3832 ;;      Temps:          0       0       0       0       0       0       0
  3833 ;;      Totals:         1       0       0       0       0       0       0
  3834 ;;Total ram usage:        1 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:    5
  3837 ;; This function calls:
  3838 ;;		_EUSART1_Write
  3839 ;; This function is called by:
  3840 ;;		_printf
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           	psect	text3
  3845  003F24                     __ptext3:
  3846                           	opt stack 0
  3847  003F24                     _putch:
  3848                           	opt stack 24
  3849                           
  3850                           ;incstack = 0
  3851                           ;putch@txData stored from wreg
  3852  003F24  6E1C               	movwf	putch@txData,c
  3853                           
  3854                           ;eusart1.c: 170: EUSART1_Write(txData);
  3855  003F26  501C               	movf	putch@txData,w,c
  3856  003F28  EC5F  F01E         	call	_EUSART1_Write
  3857  003F2C  0012               	return	
  3858  003F2E                     __end_of_putch:
  3859                           	opt stack 0
  3860                           tblptru	equ	0xFF8
  3861                           tblptrh	equ	0xFF7
  3862                           tblptrl	equ	0xFF6
  3863                           tablat	equ	0xFF5
  3864                           prodh	equ	0xFF4
  3865                           prodl	equ	0xFF3
  3866                           intcon	equ	0xFF2
  3867                           postinc0	equ	0xFEE
  3868                           wreg	equ	0xFE8
  3869                           postinc2	equ	0xFDE
  3870                           postdec2	equ	0xFDD
  3871                           fsr2h	equ	0xFDA
  3872                           fsr2l	equ	0xFD9
  3873                           status	equ	0xFD8
  3874                           
  3875 ;; *************** function _EUSART1_Write *****************
  3876 ;; Defined at:
  3877 ;;		line 140 in file "mcc_generated_files/eusart1.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;  txData          1    wreg     unsigned char 
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  txData          1   26[COMRAM] unsigned char 
  3882 ;; Return value:  Size  Location     Type
  3883 ;;		None               void
  3884 ;; Registers used:
  3885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3891 ;;      Params:         0       0       0       0       0       0       0
  3892 ;;      Locals:         1       0       0       0       0       0       0
  3893 ;;      Temps:          0       0       0       0       0       0       0
  3894 ;;      Totals:         1       0       0       0       0       0       0
  3895 ;;Total ram usage:        1 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    4
  3898 ;; This function calls:
  3899 ;;		Nothing
  3900 ;; This function is called by:
  3901 ;;		_putch
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           	psect	text4
  3906  003CBE                     __ptext4:
  3907                           	opt stack 0
  3908  003CBE                     _EUSART1_Write:
  3909                           	opt stack 24
  3910                           
  3911                           ;incstack = 0
  3912                           ;EUSART1_Write@txData stored from wreg
  3913  003CBE  6E1B               	movwf	EUSART1_Write@txData,c
  3914  003CC0                     l4730:
  3915  003CC0  5045               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  3916  003CC2  B4D8               	btfsc	status,2,c
  3917  003CC4  D7FD               	goto	l4730
  3918                           
  3919                           ;eusart1.c: 144: }
  3920                           ;eusart1.c: 146: if(0 == PIE1bits.TX1IE)
  3921  003CC6  B89D               	btfsc	3997,4,c	;volatile
  3922  003CC8  D003               	goto	l118
  3923                           
  3924                           ;eusart1.c: 147: {
  3925                           ;eusart1.c: 148: TXREG1 = txData;
  3926  003CCA  C01B  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  3927                           
  3928                           ;eusart1.c: 149: }
  3929  003CCE  D012               	goto	l4744
  3930  003CD0                     l118:
  3931                           
  3932                           ;eusart1.c: 150: else
  3933                           ;eusart1.c: 151: {
  3934                           ;eusart1.c: 152: PIE1bits.TX1IE = 0;
  3935  003CD0  989D               	bcf	3997,4,c	;volatile
  3936                           
  3937                           ;eusart1.c: 153: eusart1TxBuffer[eusart1TxHead++] = txData;
  3938  003CD2  5041               	movf	_eusart1TxHead,w,c
  3939  003CD4  0D01               	mullw	1
  3940  003CD6  0E30               	movlw	low _eusart1TxBuffer
  3941  003CD8  24F3               	addwf	prodl,w,c
  3942  003CDA  6ED9               	movwf	fsr2l,c
  3943  003CDC  0E00               	movlw	high _eusart1TxBuffer
  3944  003CDE  20F4               	addwfc	prodh,w,c
  3945  003CE0  6EDA               	movwf	fsr2h,c
  3946  003CE2  C01B  FFDF         	movff	EUSART1_Write@txData,indf2
  3947  003CE6  2A41               	incf	_eusart1TxHead,f,c
  3948                           
  3949                           ;eusart1.c: 154: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  3950  003CE8  0E07               	movlw	7
  3951  003CEA  6441               	cpfsgt	_eusart1TxHead,c
  3952  003CEC  D002               	goto	l4742
  3953                           
  3954                           ;eusart1.c: 155: {
  3955                           ;eusart1.c: 156: eusart1TxHead = 0;
  3956  003CEE  0E00               	movlw	0
  3957  003CF0  6E41               	movwf	_eusart1TxHead,c
  3958  003CF2                     l4742:
  3959                           
  3960                           ;eusart1.c: 157: }
  3961                           ;eusart1.c: 158: eusart1TxBufferRemaining--;
  3962  003CF2  0645               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  3963  003CF4                     l4744:
  3964                           
  3965                           ;eusart1.c: 159: }
  3966                           ;eusart1.c: 160: PIE1bits.TX1IE = 1;
  3967  003CF4  889D               	bsf	3997,4,c	;volatile
  3968  003CF6  0012               	return	
  3969  003CF8                     __end_of_EUSART1_Write:
  3970                           	opt stack 0
  3971                           tblptru	equ	0xFF8
  3972                           tblptrh	equ	0xFF7
  3973                           tblptrl	equ	0xFF6
  3974                           tablat	equ	0xFF5
  3975                           prodh	equ	0xFF4
  3976                           prodl	equ	0xFF3
  3977                           intcon	equ	0xFF2
  3978                           postinc0	equ	0xFEE
  3979                           wreg	equ	0xFE8
  3980                           indf2	equ	0xFDF
  3981                           postinc2	equ	0xFDE
  3982                           postdec2	equ	0xFDD
  3983                           fsr2h	equ	0xFDA
  3984                           fsr2l	equ	0xFD9
  3985                           status	equ	0xFD8
  3986                           
  3987 ;; *************** function _isdigit *****************
  3988 ;; Defined at:
  3989 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;  c               1    wreg     unsigned char 
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;  c               1   28[COMRAM] unsigned char 
  3994 ;; Return value:  Size  Location     Type
  3995 ;;		None               void
  3996 ;; Registers used:
  3997 ;;		wreg, status,2, status,0
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4003 ;;      Params:         0       0       0       0       0       0       0
  4004 ;;      Locals:         2       0       0       0       0       0       0
  4005 ;;      Temps:          1       0       0       0       0       0       0
  4006 ;;      Totals:         3       0       0       0       0       0       0
  4007 ;;Total ram usage:        3 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:    4
  4010 ;; This function calls:
  4011 ;;		Nothing
  4012 ;; This function is called by:
  4013 ;;		_printf
  4014 ;; This function uses a non-reentrant model
  4015 ;;
  4016                           
  4017                           	psect	text5
  4018  003E5A                     __ptext5:
  4019                           	opt stack 0
  4020  003E5A                     _isdigit:
  4021                           	opt stack 25
  4022                           
  4023                           ;incstack = 0
  4024                           ;isdigit@c stored from wreg
  4025  003E5A  6E1D               	movwf	isdigit@c,c
  4026  003E5C  0E00               	movlw	0
  4027  003E5E  6E1C               	movwf	_isdigit$1336,c
  4028  003E60  0E3A               	movlw	58
  4029  003E62  5C1D               	subwf	isdigit@c,w,c
  4030  003E64  B0D8               	btfsc	status,0,c
  4031  003E66  D005               	goto	l5018
  4032  003E68  0E2F               	movlw	47
  4033  003E6A  641D               	cpfsgt	isdigit@c,c
  4034  003E6C  D002               	goto	l5018
  4035  003E6E  0E01               	movlw	1
  4036  003E70  6E1C               	movwf	_isdigit$1336,c
  4037  003E72                     l5018:
  4038  003E72  C01C  F01B         	movff	_isdigit$1336,??_isdigit
  4039  003E76  301B               	rrcf	??_isdigit,w,c
  4040  003E78  0012               	return	
  4041  003E7A                     __end_of_isdigit:
  4042                           	opt stack 0
  4043                           tblptru	equ	0xFF8
  4044                           tblptrh	equ	0xFF7
  4045                           tblptrl	equ	0xFF6
  4046                           tablat	equ	0xFF5
  4047                           prodh	equ	0xFF4
  4048                           prodl	equ	0xFF3
  4049                           intcon	equ	0xFF2
  4050                           postinc0	equ	0xFEE
  4051                           wreg	equ	0xFE8
  4052                           indf2	equ	0xFDF
  4053                           postinc2	equ	0xFDE
  4054                           postdec2	equ	0xFDD
  4055                           fsr2h	equ	0xFDA
  4056                           fsr2l	equ	0xFD9
  4057                           status	equ	0xFD8
  4058                           
  4059 ;; *************** function _fround *****************
  4060 ;; Defined at:
  4061 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;  prec            1    wreg     unsigned char 
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;  prec            1   36[BANK0 ] unsigned char 
  4066 ;; Return value:  Size  Location     Type
  4067 ;;                  3   27[BANK0 ] unsigned char 
  4068 ;; Registers used:
  4069 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4070 ;; Tracked objects:
  4071 ;;		On entry : 0/0
  4072 ;;		On exit  : 0/0
  4073 ;;		Unchanged: 0/0
  4074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4075 ;;      Params:         0       3       0       0       0       0       0
  4076 ;;      Locals:         0       7       0       0       0       0       0
  4077 ;;      Temps:          0       0       0       0       0       0       0
  4078 ;;      Totals:         0      10       0       0       0       0       0
  4079 ;;Total ram usage:       10 bytes
  4080 ;; Hardware stack levels used:    1
  4081 ;; Hardware stack levels required when called:    6
  4082 ;; This function calls:
  4083 ;;		___awdiv
  4084 ;;		___awmod
  4085 ;;		___ftmul
  4086 ;;		___wmul
  4087 ;; This function is called by:
  4088 ;;		_printf
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text6
  4093  001DDC                     __ptext6:
  4094                           	opt stack 0
  4095  001DDC                     _fround:
  4096                           	opt stack 23
  4097                           
  4098                           ;incstack = 0
  4099                           ;fround@prec stored from wreg
  4100  001DDC  0100               	movlb	0	; () banked
  4101  001DDE  6F84               	movwf	fround@prec& (0+255),b
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;doprnt.c: 413: if(prec>=110)
  4105  001DE0  0E6D               	movlw	109
  4106  001DE2  0100               	movlb	0	; () banked
  4107  001DE4  6584               	cpfsgt	fround@prec& (0+255),b
  4108  001DE6  D0AE               	goto	l4960
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4112  001DE8  0E00               	movlw	0
  4113  001DEA  6E2C               	movwf	___wmul@multiplicand+1,c
  4114  001DEC  0E03               	movlw	3
  4115  001DEE  6E2B               	movwf	___wmul@multiplicand,c
  4116  001DF0  0E00               	movlw	0
  4117  001DF2  6E24               	movwf	___awdiv@divisor+1,c
  4118  001DF4  0E0A               	movlw	10
  4119  001DF6  6E23               	movwf	___awdiv@divisor,c
  4120  001DF8  0E00               	movlw	0
  4121  001DFA  6E1E               	movwf	___awmod@divisor+1,c
  4122  001DFC  0E64               	movlw	100
  4123  001DFE  6E1D               	movwf	___awmod@divisor,c
  4124  001E00  0100               	movlb	0	; () banked
  4125  001E02  C084  F01B         	movff	fround@prec,___awmod@dividend
  4126  001E06  6A1C               	clrf	___awmod@dividend+1,c
  4127  001E08  EC37  F01C         	call	___awmod	;wreg free
  4128  001E0C  C01B  F021         	movff	?___awmod,___awdiv@dividend
  4129  001E10  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  4130  001E14  EC9C  F01B         	call	___awdiv	;wreg free
  4131  001E18  0E09               	movlw	9
  4132  001E1A  2421               	addwf	?___awdiv,w,c
  4133  001E1C  6E29               	movwf	___wmul@multiplier,c
  4134  001E1E  0E00               	movlw	0
  4135  001E20  2022               	addwfc	?___awdiv+1,w,c
  4136  001E22  6E2A               	movwf	___wmul@multiplier+1,c
  4137  001E24  EC09  F01F         	call	___wmul	;wreg free
  4138  001E28  0E29               	movlw	low __npowers_
  4139  001E2A  2429               	addwf	?___wmul,w,c
  4140  001E2C  6EF6               	movwf	tblptrl,c
  4141  001E2E  0E06               	movlw	high __npowers_
  4142  001E30  202A               	addwfc	?___wmul+1,w,c
  4143  001E32  6EF7               	movwf	tblptrh,c
  4144  001E34                     	if	0	;There are less than 3 active tblptr bytes
  4145  001E34                     	endif
  4146  001E34  0009               	tblrd		*+
  4147  001E36  0100               	movlb	0	; () banked
  4148  001E38  CFF5 F06F          	movff	tablat,___ftmul@f2
  4149  001E3C  0009               	tblrd		*+
  4150  001E3E  0100               	movlb	0	; () banked
  4151  001E40  CFF5 F070          	movff	tablat,___ftmul@f2+1
  4152  001E44  000A               	tblrd		*-
  4153  001E46  0100               	movlb	0	; () banked
  4154  001E48  CFF5 F071          	movff	tablat,___ftmul@f2+2
  4155  001E4C  0E00               	movlw	0
  4156  001E4E  6E24               	movwf	___awdiv@divisor+1,c
  4157  001E50  0E64               	movlw	100
  4158  001E52  6E23               	movwf	___awdiv@divisor,c
  4159  001E54  0100               	movlb	0	; () banked
  4160  001E56  C084  F021         	movff	fround@prec,___awdiv@dividend
  4161  001E5A  6A22               	clrf	___awdiv@dividend+1,c
  4162  001E5C  EC9C  F01B         	call	___awdiv	;wreg free
  4163  001E60  0E12               	movlw	18
  4164  001E62  2421               	addwf	?___awdiv,w,c
  4165  001E64  6E29               	movwf	___wmul@multiplier,c
  4166  001E66  0E00               	movlw	0
  4167  001E68  2022               	addwfc	?___awdiv+1,w,c
  4168  001E6A  6E2A               	movwf	___wmul@multiplier+1,c
  4169  001E6C  0E00               	movlw	0
  4170  001E6E  6E2C               	movwf	___wmul@multiplicand+1,c
  4171  001E70  0E03               	movlw	3
  4172  001E72  6E2B               	movwf	___wmul@multiplicand,c
  4173  001E74  EC09  F01F         	call	___wmul	;wreg free
  4174  001E78  0E29               	movlw	low __npowers_
  4175  001E7A  2429               	addwf	?___wmul,w,c
  4176  001E7C  6EF6               	movwf	tblptrl,c
  4177  001E7E  0E06               	movlw	high __npowers_
  4178  001E80  202A               	addwfc	?___wmul+1,w,c
  4179  001E82  6EF7               	movwf	tblptrh,c
  4180  001E84                     	if	0	;There are less than 3 active tblptr bytes
  4181  001E84                     	endif
  4182  001E84  0009               	tblrd		*+
  4183  001E86  0100               	movlb	0	; () banked
  4184  001E88  CFF5 F06C          	movff	tablat,___ftmul@f1
  4185  001E8C  0009               	tblrd		*+
  4186  001E8E  0100               	movlb	0	; () banked
  4187  001E90  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  4188  001E94  000A               	tblrd		*-
  4189  001E96  0100               	movlb	0	; () banked
  4190  001E98  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  4191  001E9C  ECCB  F014         	call	___ftmul	;wreg free
  4192  001EA0  C06C  F081         	movff	?___ftmul,_fround$1703
  4193  001EA4  C06D  F082         	movff	?___ftmul+1,_fround$1703+1
  4194  001EA8  C06E  F083         	movff	?___ftmul+2,_fround$1703+2
  4195                           
  4196                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4197  001EAC  0E00               	movlw	0
  4198  001EAE  6E2C               	movwf	___wmul@multiplicand+1,c
  4199  001EB0  0E03               	movlw	3
  4200  001EB2  6E2B               	movwf	___wmul@multiplicand,c
  4201  001EB4  0E00               	movlw	0
  4202  001EB6  6E1E               	movwf	___awmod@divisor+1,c
  4203  001EB8  0E0A               	movlw	10
  4204  001EBA  6E1D               	movwf	___awmod@divisor,c
  4205  001EBC  0100               	movlb	0	; () banked
  4206  001EBE  C084  F01B         	movff	fround@prec,___awmod@dividend
  4207  001EC2  6A1C               	clrf	___awmod@dividend+1,c
  4208  001EC4  EC37  F01C         	call	___awmod	;wreg free
  4209  001EC8  C01B  F029         	movff	?___awmod,___wmul@multiplier
  4210  001ECC  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  4211  001ED0  EC09  F01F         	call	___wmul	;wreg free
  4212  001ED4  0E29               	movlw	low __npowers_
  4213  001ED6  2429               	addwf	?___wmul,w,c
  4214  001ED8  6EF6               	movwf	tblptrl,c
  4215  001EDA  0E06               	movlw	high __npowers_
  4216  001EDC  202A               	addwfc	?___wmul+1,w,c
  4217  001EDE  6EF7               	movwf	tblptrh,c
  4218  001EE0                     	if	0	;There are less than 3 active tblptr bytes
  4219  001EE0                     	endif
  4220  001EE0  0009               	tblrd		*+
  4221  001EE2  0100               	movlb	0	; () banked
  4222  001EE4  CFF5 F06F          	movff	tablat,___ftmul@f2
  4223  001EE8  0009               	tblrd		*+
  4224  001EEA  0100               	movlb	0	; () banked
  4225  001EEC  CFF5 F070          	movff	tablat,___ftmul@f2+1
  4226  001EF0  000A               	tblrd		*-
  4227  001EF2  0100               	movlb	0	; () banked
  4228  001EF4  CFF5 F071          	movff	tablat,___ftmul@f2+2
  4229  001EF8  C081  F06C         	movff	_fround$1703,___ftmul@f1
  4230  001EFC  C082  F06D         	movff	_fround$1703+1,___ftmul@f1+1
  4231  001F00  C083  F06E         	movff	_fround$1703+2,___ftmul@f1+2
  4232  001F04  ECCB  F014         	call	___ftmul	;wreg free
  4233  001F08  C06C  F07E         	movff	?___ftmul,_fround$1704
  4234  001F0C  C06D  F07F         	movff	?___ftmul+1,_fround$1704+1
  4235  001F10  C06E  F080         	movff	?___ftmul+2,_fround$1704+2
  4236                           
  4237                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4238  001F14  C07E  F06C         	movff	_fround$1704,___ftmul@f1
  4239  001F18  C07F  F06D         	movff	_fround$1704+1,___ftmul@f1+1
  4240  001F1C  C080  F06E         	movff	_fround$1704+2,___ftmul@f1+2
  4241  001F20  0E00               	movlw	0
  4242  001F22  0100               	movlb	0	; () banked
  4243  001F24  6F6F               	movwf	___ftmul@f2& (0+255),b
  4244  001F26  0E00               	movlw	0
  4245  001F28  0100               	movlb	0	; () banked
  4246  001F2A  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  4247  001F2C  0E3F               	movlw	63
  4248  001F2E  0100               	movlb	0	; () banked
  4249  001F30  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  4250  001F32  ECCB  F014         	call	___ftmul	;wreg free
  4251  001F36  C06C  F07B         	movff	?___ftmul,?_fround
  4252  001F3A  C06D  F07C         	movff	?___ftmul+1,?_fround+1
  4253  001F3E  C06E  F07D         	movff	?___ftmul+2,?_fround+2
  4254  001F42  0012               	return	
  4255  001F44                     l4960:
  4256                           
  4257                           ;doprnt.c: 415: else if(prec > 10)
  4258  001F44  0E0A               	movlw	10
  4259  001F46  0100               	movlb	0	; () banked
  4260  001F48  6584               	cpfsgt	fround@prec& (0+255),b
  4261  001F4A  D06E               	goto	l4968
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4265  001F4C  0E00               	movlw	0
  4266  001F4E  6E2C               	movwf	___wmul@multiplicand+1,c
  4267  001F50  0E03               	movlw	3
  4268  001F52  6E2B               	movwf	___wmul@multiplicand,c
  4269  001F54  0E00               	movlw	0
  4270  001F56  6E1E               	movwf	___awmod@divisor+1,c
  4271  001F58  0E0A               	movlw	10
  4272  001F5A  6E1D               	movwf	___awmod@divisor,c
  4273  001F5C  0100               	movlb	0	; () banked
  4274  001F5E  C084  F01B         	movff	fround@prec,___awmod@dividend
  4275  001F62  6A1C               	clrf	___awmod@dividend+1,c
  4276  001F64  EC37  F01C         	call	___awmod	;wreg free
  4277  001F68  C01B  F029         	movff	?___awmod,___wmul@multiplier
  4278  001F6C  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  4279  001F70  EC09  F01F         	call	___wmul	;wreg free
  4280  001F74  0E29               	movlw	low __npowers_
  4281  001F76  2429               	addwf	?___wmul,w,c
  4282  001F78  6EF6               	movwf	tblptrl,c
  4283  001F7A  0E06               	movlw	high __npowers_
  4284  001F7C  202A               	addwfc	?___wmul+1,w,c
  4285  001F7E  6EF7               	movwf	tblptrh,c
  4286  001F80                     	if	0	;There are less than 3 active tblptr bytes
  4287  001F80                     	endif
  4288  001F80  0009               	tblrd		*+
  4289  001F82  0100               	movlb	0	; () banked
  4290  001F84  CFF5 F06F          	movff	tablat,___ftmul@f2
  4291  001F88  0009               	tblrd		*+
  4292  001F8A  0100               	movlb	0	; () banked
  4293  001F8C  CFF5 F070          	movff	tablat,___ftmul@f2+1
  4294  001F90  000A               	tblrd		*-
  4295  001F92  0100               	movlb	0	; () banked
  4296  001F94  CFF5 F071          	movff	tablat,___ftmul@f2+2
  4297  001F98  0E00               	movlw	0
  4298  001F9A  6E24               	movwf	___awdiv@divisor+1,c
  4299  001F9C  0E0A               	movlw	10
  4300  001F9E  6E23               	movwf	___awdiv@divisor,c
  4301  001FA0  0100               	movlb	0	; () banked
  4302  001FA2  C084  F021         	movff	fround@prec,___awdiv@dividend
  4303  001FA6  6A22               	clrf	___awdiv@dividend+1,c
  4304  001FA8  EC9C  F01B         	call	___awdiv	;wreg free
  4305  001FAC  0E09               	movlw	9
  4306  001FAE  2421               	addwf	?___awdiv,w,c
  4307  001FB0  6E29               	movwf	___wmul@multiplier,c
  4308  001FB2  0E00               	movlw	0
  4309  001FB4  2022               	addwfc	?___awdiv+1,w,c
  4310  001FB6  6E2A               	movwf	___wmul@multiplier+1,c
  4311  001FB8  0E00               	movlw	0
  4312  001FBA  6E2C               	movwf	___wmul@multiplicand+1,c
  4313  001FBC  0E03               	movlw	3
  4314  001FBE  6E2B               	movwf	___wmul@multiplicand,c
  4315  001FC0  EC09  F01F         	call	___wmul	;wreg free
  4316  001FC4  0E29               	movlw	low __npowers_
  4317  001FC6  2429               	addwf	?___wmul,w,c
  4318  001FC8  6EF6               	movwf	tblptrl,c
  4319  001FCA  0E06               	movlw	high __npowers_
  4320  001FCC  202A               	addwfc	?___wmul+1,w,c
  4321  001FCE  6EF7               	movwf	tblptrh,c
  4322  001FD0                     	if	0	;There are less than 3 active tblptr bytes
  4323  001FD0                     	endif
  4324  001FD0  0009               	tblrd		*+
  4325  001FD2  0100               	movlb	0	; () banked
  4326  001FD4  CFF5 F06C          	movff	tablat,___ftmul@f1
  4327  001FD8  0009               	tblrd		*+
  4328  001FDA  0100               	movlb	0	; () banked
  4329  001FDC  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  4330  001FE0  000A               	tblrd		*-
  4331  001FE2  0100               	movlb	0	; () banked
  4332  001FE4  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  4333  001FE8  ECCB  F014         	call	___ftmul	;wreg free
  4334  001FEC  C06C  F081         	movff	?___ftmul,_fround$1703
  4335  001FF0  C06D  F082         	movff	?___ftmul+1,_fround$1703+1
  4336  001FF4  C06E  F083         	movff	?___ftmul+2,_fround$1703+2
  4337                           
  4338                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4339  001FF8  C081  F06C         	movff	_fround$1703,___ftmul@f1
  4340  001FFC  C082  F06D         	movff	_fround$1703+1,___ftmul@f1+1
  4341  002000  C083  F06E         	movff	_fround$1703+2,___ftmul@f1+2
  4342  002004  0E00               	movlw	0
  4343  002006  0100               	movlb	0	; () banked
  4344  002008  6F6F               	movwf	___ftmul@f2& (0+255),b
  4345  00200A  0E00               	movlw	0
  4346  00200C  0100               	movlb	0	; () banked
  4347  00200E  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  4348  002010  0E3F               	movlw	63
  4349  002012  0100               	movlb	0	; () banked
  4350  002014  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  4351  002016  ECCB  F014         	call	___ftmul	;wreg free
  4352  00201A  C06C  F07B         	movff	?___ftmul,?_fround
  4353  00201E  C06D  F07C         	movff	?___ftmul+1,?_fround+1
  4354  002022  C06E  F07D         	movff	?___ftmul+2,?_fround+2
  4355  002026  0012               	return	
  4356  002028                     l4968:
  4357                           
  4358                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4359  002028  0100               	movlb	0	; () banked
  4360  00202A  5184               	movf	fround@prec& (0+255),w,b
  4361  00202C  0D03               	mullw	3
  4362  00202E  0E29               	movlw	low __npowers_
  4363  002030  24F3               	addwf	prodl,w,c
  4364  002032  6EF6               	movwf	tblptrl,c
  4365  002034  0E06               	movlw	high __npowers_
  4366  002036  20F4               	addwfc	prodh,w,c
  4367  002038  6EF7               	movwf	tblptrh,c
  4368  00203A                     	if	0	;There are less than 3 active tblptr bytes
  4369  00203A                     	endif
  4370  00203A  0009               	tblrd		*+
  4371  00203C  0100               	movlb	0	; () banked
  4372  00203E  CFF5 F06C          	movff	tablat,___ftmul@f1
  4373  002042  0009               	tblrd		*+
  4374  002044  0100               	movlb	0	; () banked
  4375  002046  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  4376  00204A  000A               	tblrd		*-
  4377  00204C  0100               	movlb	0	; () banked
  4378  00204E  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  4379  002052  0E00               	movlw	0
  4380  002054  0100               	movlb	0	; () banked
  4381  002056  6F6F               	movwf	___ftmul@f2& (0+255),b
  4382  002058  0E00               	movlw	0
  4383  00205A  0100               	movlb	0	; () banked
  4384  00205C  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  4385  00205E  0E3F               	movlw	63
  4386  002060  0100               	movlb	0	; () banked
  4387  002062  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  4388  002064  ECCB  F014         	call	___ftmul	;wreg free
  4389  002068  C06C  F07B         	movff	?___ftmul,?_fround
  4390  00206C  C06D  F07C         	movff	?___ftmul+1,?_fround+1
  4391  002070  C06E  F07D         	movff	?___ftmul+2,?_fround+2
  4392  002074  0012               	return	
  4393  002076                     __end_of_fround:
  4394                           	opt stack 0
  4395                           tblptru	equ	0xFF8
  4396                           tblptrh	equ	0xFF7
  4397                           tblptrl	equ	0xFF6
  4398                           tablat	equ	0xFF5
  4399                           prodh	equ	0xFF4
  4400                           prodl	equ	0xFF3
  4401                           intcon	equ	0xFF2
  4402                           postinc0	equ	0xFEE
  4403                           wreg	equ	0xFE8
  4404                           indf2	equ	0xFDF
  4405                           postinc2	equ	0xFDE
  4406                           postdec2	equ	0xFDD
  4407                           fsr2h	equ	0xFDA
  4408                           fsr2l	equ	0xFD9
  4409                           status	equ	0xFD8
  4410                           
  4411 ;; *************** function ___awmod *****************
  4412 ;; Defined at:
  4413 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;  dividend        2   26[COMRAM] int 
  4416 ;;  divisor         2   28[COMRAM] int 
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;  sign            1   31[COMRAM] unsigned char 
  4419 ;;  counter         1   30[COMRAM] unsigned char 
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  2   26[COMRAM] int 
  4422 ;; Registers used:
  4423 ;;		wreg, status,2, status,0, prodl
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4429 ;;      Params:         4       0       0       0       0       0       0
  4430 ;;      Locals:         2       0       0       0       0       0       0
  4431 ;;      Temps:          0       0       0       0       0       0       0
  4432 ;;      Totals:         6       0       0       0       0       0       0
  4433 ;;Total ram usage:        6 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    4
  4436 ;; This function calls:
  4437 ;;		Nothing
  4438 ;; This function is called by:
  4439 ;;		_fround
  4440 ;;		_scale
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           	psect	text7
  4445  00386E                     __ptext7:
  4446                           	opt stack 0
  4447  00386E                     ___awmod:
  4448                           	opt stack 24
  4449                           
  4450                           ;incstack = 0
  4451  00386E  0E00               	movlw	0
  4452  003870  6E20               	movwf	___awmod@sign,c
  4453  003872  501C               	movf	___awmod@dividend+1,w,c
  4454  003874  0A80               	xorlw	128
  4455  003876  6EF3               	movwf	prodl,c
  4456  003878  0E80               	movlw	128
  4457  00387A  5CF3               	subwf	prodl,w,c
  4458  00387C  0E00               	movlw	0
  4459  00387E  B4D8               	btfsc	status,2,c
  4460  003880  5C1B               	subwf	___awmod@dividend,w,c
  4461  003882  B0D8               	btfsc	status,0,c
  4462  003884  D006               	goto	l4798
  4463  003886  6C1B               	negf	___awmod@dividend,c
  4464  003888  1E1C               	comf	___awmod@dividend+1,f,c
  4465  00388A  B0D8               	btfsc	status,0,c
  4466  00388C  2A1C               	incf	___awmod@dividend+1,f,c
  4467  00388E  0E01               	movlw	1
  4468  003890  6E20               	movwf	___awmod@sign,c
  4469  003892                     l4798:
  4470  003892  501E               	movf	___awmod@divisor+1,w,c
  4471  003894  0A80               	xorlw	128
  4472  003896  6EF3               	movwf	prodl,c
  4473  003898  0E80               	movlw	128
  4474  00389A  5CF3               	subwf	prodl,w,c
  4475  00389C  0E00               	movlw	0
  4476  00389E  B4D8               	btfsc	status,2,c
  4477  0038A0  5C1D               	subwf	___awmod@divisor,w,c
  4478  0038A2  B0D8               	btfsc	status,0,c
  4479  0038A4  D004               	goto	l4802
  4480  0038A6  6C1D               	negf	___awmod@divisor,c
  4481  0038A8  1E1E               	comf	___awmod@divisor+1,f,c
  4482  0038AA  B0D8               	btfsc	status,0,c
  4483  0038AC  2A1E               	incf	___awmod@divisor+1,f,c
  4484  0038AE                     l4802:
  4485  0038AE  501E               	movf	___awmod@divisor+1,w,c
  4486  0038B0  101D               	iorwf	___awmod@divisor,w,c
  4487  0038B2  B4D8               	btfsc	status,2,c
  4488  0038B4  D018               	goto	l4818
  4489  0038B6  0E01               	movlw	1
  4490  0038B8  6E1F               	movwf	___awmod@counter,c
  4491  0038BA  D004               	goto	l4808
  4492  0038BC                     l4806:
  4493  0038BC  90D8               	bcf	status,0,c
  4494  0038BE  361D               	rlcf	___awmod@divisor,f,c
  4495  0038C0  361E               	rlcf	___awmod@divisor+1,f,c
  4496  0038C2  2A1F               	incf	___awmod@counter,f,c
  4497  0038C4                     l4808:
  4498  0038C4  AE1E               	btfss	___awmod@divisor+1,7,c
  4499  0038C6  D7FA               	goto	l4806
  4500  0038C8                     l4810:
  4501  0038C8  501D               	movf	___awmod@divisor,w,c
  4502  0038CA  5C1B               	subwf	___awmod@dividend,w,c
  4503  0038CC  501E               	movf	___awmod@divisor+1,w,c
  4504  0038CE  581C               	subwfb	___awmod@dividend+1,w,c
  4505  0038D0  A0D8               	btfss	status,0,c
  4506  0038D2  D004               	goto	l4814
  4507  0038D4  501D               	movf	___awmod@divisor,w,c
  4508  0038D6  5E1B               	subwf	___awmod@dividend,f,c
  4509  0038D8  501E               	movf	___awmod@divisor+1,w,c
  4510  0038DA  5A1C               	subwfb	___awmod@dividend+1,f,c
  4511  0038DC                     l4814:
  4512  0038DC  90D8               	bcf	status,0,c
  4513  0038DE  321E               	rrcf	___awmod@divisor+1,f,c
  4514  0038E0  321D               	rrcf	___awmod@divisor,f,c
  4515  0038E2  2E1F               	decfsz	___awmod@counter,f,c
  4516  0038E4  D7F1               	goto	l4810
  4517  0038E6                     l4818:
  4518  0038E6  5020               	movf	___awmod@sign,w,c
  4519  0038E8  B4D8               	btfsc	status,2,c
  4520  0038EA  D004               	goto	l4822
  4521  0038EC  6C1B               	negf	___awmod@dividend,c
  4522  0038EE  1E1C               	comf	___awmod@dividend+1,f,c
  4523  0038F0  B0D8               	btfsc	status,0,c
  4524  0038F2  2A1C               	incf	___awmod@dividend+1,f,c
  4525  0038F4                     l4822:
  4526  0038F4  C01B  F01B         	movff	___awmod@dividend,?___awmod
  4527  0038F8  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
  4528  0038FC  0012               	return	
  4529  0038FE                     __end_of___awmod:
  4530                           	opt stack 0
  4531                           tblptru	equ	0xFF8
  4532                           tblptrh	equ	0xFF7
  4533                           tblptrl	equ	0xFF6
  4534                           tablat	equ	0xFF5
  4535                           prodh	equ	0xFF4
  4536                           prodl	equ	0xFF3
  4537                           intcon	equ	0xFF2
  4538                           postinc0	equ	0xFEE
  4539                           wreg	equ	0xFE8
  4540                           indf2	equ	0xFDF
  4541                           postinc2	equ	0xFDE
  4542                           postdec2	equ	0xFDD
  4543                           fsr2h	equ	0xFDA
  4544                           fsr2l	equ	0xFD9
  4545                           status	equ	0xFD8
  4546                           
  4547 ;; *************** function __tdiv_to_l_ *****************
  4548 ;; Defined at:
  4549 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  f1              3   26[COMRAM] float 
  4552 ;;  f2              3   29[COMRAM] float 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  quot            4   35[COMRAM] unsigned long 
  4555 ;;  exp1            1   40[COMRAM] unsigned char 
  4556 ;;  cntr            1   39[COMRAM] unsigned char 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  4   26[COMRAM] unsigned long 
  4559 ;; Registers used:
  4560 ;;		wreg, status,2, status,0
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4566 ;;      Params:         6       0       0       0       0       0       0
  4567 ;;      Locals:         6       0       0       0       0       0       0
  4568 ;;      Temps:          3       0       0       0       0       0       0
  4569 ;;      Totals:        15       0       0       0       0       0       0
  4570 ;;Total ram usage:       15 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    4
  4573 ;; This function calls:
  4574 ;;		Nothing
  4575 ;; This function is called by:
  4576 ;;		_printf
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           	psect	text8
  4581  002F2E                     __ptext8:
  4582                           	opt stack 0
  4583  002F2E                     __tdiv_to_l_:
  4584                           	opt stack 25
  4585                           
  4586                           ;incstack = 0
  4587  002F2E  C01D  F021         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4588  002F32  6A22               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4589  002F34  6A23               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4590  002F36  341C               	rlcf	__tdiv_to_l_@f1+1,w,c
  4591  002F38  3621               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4592  002F3A  E301               	bnc	u5341
  4593  002F3C  8022               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4594  002F3E                     u5341:
  4595  002F3E  5021               	movf	??__tdiv_to_l_,w,c
  4596  002F40  6E29               	movwf	__tdiv_to_l_@exp1,c
  4597  002F42  6629               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  4598  002F44  D009               	goto	l5028
  4599  002F46  0E00               	movlw	0
  4600  002F48  6E1B               	movwf	?__tdiv_to_l_,c
  4601  002F4A  0E00               	movlw	0
  4602  002F4C  6E1C               	movwf	?__tdiv_to_l_+1,c
  4603  002F4E  0E00               	movlw	0
  4604  002F50  6E1D               	movwf	?__tdiv_to_l_+2,c
  4605  002F52  0E00               	movlw	0
  4606  002F54  6E1E               	movwf	?__tdiv_to_l_+3,c
  4607  002F56  0012               	return	
  4608  002F58                     l5028:
  4609  002F58  C020  F021         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4610  002F5C  6A22               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4611  002F5E  6A23               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4612  002F60  341F               	rlcf	__tdiv_to_l_@f2+1,w,c
  4613  002F62  3621               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4614  002F64  E301               	bnc	u5361
  4615  002F66  8022               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4616  002F68                     u5361:
  4617  002F68  5021               	movf	??__tdiv_to_l_,w,c
  4618  002F6A  6E28               	movwf	__tdiv_to_l_@cntr,c
  4619  002F6C  6628               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  4620  002F6E  D009               	goto	l5034
  4621  002F70  0E00               	movlw	0
  4622  002F72  6E1B               	movwf	?__tdiv_to_l_,c
  4623  002F74  0E00               	movlw	0
  4624  002F76  6E1C               	movwf	?__tdiv_to_l_+1,c
  4625  002F78  0E00               	movlw	0
  4626  002F7A  6E1D               	movwf	?__tdiv_to_l_+2,c
  4627  002F7C  0E00               	movlw	0
  4628  002F7E  6E1E               	movwf	?__tdiv_to_l_+3,c
  4629  002F80  0012               	return	
  4630  002F82                     l5034:
  4631  002F82  8E1C               	bsf	__tdiv_to_l_@f1+1,7,c
  4632  002F84  0EFF               	movlw	255
  4633  002F86  161B               	andwf	__tdiv_to_l_@f1,f,c
  4634  002F88  0EFF               	movlw	255
  4635  002F8A  161C               	andwf	__tdiv_to_l_@f1+1,f,c
  4636  002F8C  0E00               	movlw	0
  4637  002F8E  161D               	andwf	__tdiv_to_l_@f1+2,f,c
  4638  002F90  8E1F               	bsf	__tdiv_to_l_@f2+1,7,c
  4639  002F92  0EFF               	movlw	255
  4640  002F94  161E               	andwf	__tdiv_to_l_@f2,f,c
  4641  002F96  0EFF               	movlw	255
  4642  002F98  161F               	andwf	__tdiv_to_l_@f2+1,f,c
  4643  002F9A  0E00               	movlw	0
  4644  002F9C  1620               	andwf	__tdiv_to_l_@f2+2,f,c
  4645  002F9E  0E00               	movlw	0
  4646  002FA0  6E24               	movwf	__tdiv_to_l_@quot,c
  4647  002FA2  0E00               	movlw	0
  4648  002FA4  6E25               	movwf	__tdiv_to_l_@quot+1,c
  4649  002FA6  0E00               	movlw	0
  4650  002FA8  6E26               	movwf	__tdiv_to_l_@quot+2,c
  4651  002FAA  0E00               	movlw	0
  4652  002FAC  6E27               	movwf	__tdiv_to_l_@quot+3,c
  4653  002FAE  0E7F               	movlw	127
  4654  002FB0  5E29               	subwf	__tdiv_to_l_@exp1,f,c
  4655  002FB2  5028               	movf	__tdiv_to_l_@cntr,w,c
  4656  002FB4  0F98               	addlw	152
  4657  002FB6  5E29               	subwf	__tdiv_to_l_@exp1,f,c
  4658  002FB8  0E18               	movlw	24
  4659  002FBA  6E28               	movwf	__tdiv_to_l_@cntr,c
  4660  002FBC                     l1118:
  4661  002FBC  90D8               	bcf	status,0,c
  4662  002FBE  3624               	rlcf	__tdiv_to_l_@quot,f,c
  4663  002FC0  3625               	rlcf	__tdiv_to_l_@quot+1,f,c
  4664  002FC2  3626               	rlcf	__tdiv_to_l_@quot+2,f,c
  4665  002FC4  3627               	rlcf	__tdiv_to_l_@quot+3,f,c
  4666  002FC6  501E               	movf	__tdiv_to_l_@f2,w,c
  4667  002FC8  5C1B               	subwf	__tdiv_to_l_@f1,w,c
  4668  002FCA  501F               	movf	__tdiv_to_l_@f2+1,w,c
  4669  002FCC  581C               	subwfb	__tdiv_to_l_@f1+1,w,c
  4670  002FCE  5020               	movf	__tdiv_to_l_@f2+2,w,c
  4671  002FD0  581D               	subwfb	__tdiv_to_l_@f1+2,w,c
  4672  002FD2  A0D8               	btfss	status,0,c
  4673  002FD4  D007               	goto	l1119
  4674  002FD6  501E               	movf	__tdiv_to_l_@f2,w,c
  4675  002FD8  5E1B               	subwf	__tdiv_to_l_@f1,f,c
  4676  002FDA  501F               	movf	__tdiv_to_l_@f2+1,w,c
  4677  002FDC  5A1C               	subwfb	__tdiv_to_l_@f1+1,f,c
  4678  002FDE  5020               	movf	__tdiv_to_l_@f2+2,w,c
  4679  002FE0  5A1D               	subwfb	__tdiv_to_l_@f1+2,f,c
  4680  002FE2  8024               	bsf	__tdiv_to_l_@quot,0,c
  4681  002FE4                     l1119:
  4682  002FE4  90D8               	bcf	status,0,c
  4683  002FE6  361B               	rlcf	__tdiv_to_l_@f1,f,c
  4684  002FE8  361C               	rlcf	__tdiv_to_l_@f1+1,f,c
  4685  002FEA  361D               	rlcf	__tdiv_to_l_@f1+2,f,c
  4686  002FEC  2E28               	decfsz	__tdiv_to_l_@cntr,f,c
  4687  002FEE  D7E6               	goto	l1118
  4688  002FF0  AE29               	btfss	__tdiv_to_l_@exp1,7,c
  4689  002FF2  D019               	goto	l5066
  4690  002FF4  5029               	movf	__tdiv_to_l_@exp1,w,c
  4691  002FF6  0A80               	xorlw	128
  4692  002FF8  6E21               	movwf	??__tdiv_to_l_& (0+255),c
  4693  002FFA  0EE9               	movlw	233
  4694  002FFC  0A80               	xorlw	128
  4695  002FFE  5C21               	subwf	??__tdiv_to_l_,w,c
  4696  003000  B0D8               	btfsc	status,0,c
  4697  003002  D009               	goto	l5062
  4698  003004  0E00               	movlw	0
  4699  003006  6E1B               	movwf	?__tdiv_to_l_,c
  4700  003008  0E00               	movlw	0
  4701  00300A  6E1C               	movwf	?__tdiv_to_l_+1,c
  4702  00300C  0E00               	movlw	0
  4703  00300E  6E1D               	movwf	?__tdiv_to_l_+2,c
  4704  003010  0E00               	movlw	0
  4705  003012  6E1E               	movwf	?__tdiv_to_l_+3,c
  4706  003014  0012               	return	
  4707  003016                     l5062:
  4708  003016  90D8               	bcf	status,0,c
  4709  003018  3227               	rrcf	__tdiv_to_l_@quot+3,f,c
  4710  00301A  3226               	rrcf	__tdiv_to_l_@quot+2,f,c
  4711  00301C  3225               	rrcf	__tdiv_to_l_@quot+1,f,c
  4712  00301E  3224               	rrcf	__tdiv_to_l_@quot,f,c
  4713  003020  3E29               	incfsz	__tdiv_to_l_@exp1,f,c
  4714  003022  D7F9               	goto	l5062
  4715  003024  D014               	goto	l1125
  4716  003026                     l5066:
  4717  003026  0E17               	movlw	23
  4718  003028  6429               	cpfsgt	__tdiv_to_l_@exp1,c
  4719  00302A  D00F               	goto	l5074
  4720  00302C  0E00               	movlw	0
  4721  00302E  6E1B               	movwf	?__tdiv_to_l_,c
  4722  003030  0E00               	movlw	0
  4723  003032  6E1C               	movwf	?__tdiv_to_l_+1,c
  4724  003034  0E00               	movlw	0
  4725  003036  6E1D               	movwf	?__tdiv_to_l_+2,c
  4726  003038  0E00               	movlw	0
  4727  00303A  6E1E               	movwf	?__tdiv_to_l_+3,c
  4728  00303C  0012               	return	
  4729  00303E                     l5072:
  4730  00303E  90D8               	bcf	status,0,c
  4731  003040  3624               	rlcf	__tdiv_to_l_@quot,f,c
  4732  003042  3625               	rlcf	__tdiv_to_l_@quot+1,f,c
  4733  003044  3626               	rlcf	__tdiv_to_l_@quot+2,f,c
  4734  003046  3627               	rlcf	__tdiv_to_l_@quot+3,f,c
  4735  003048  0629               	decf	__tdiv_to_l_@exp1,f,c
  4736  00304A                     l5074:
  4737  00304A  6629               	tstfsz	__tdiv_to_l_@exp1,c
  4738  00304C  D7F8               	goto	l5072
  4739  00304E                     l1125:
  4740  00304E  C024  F01B         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4741  003052  C025  F01C         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4742  003056  C026  F01D         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4743  00305A  C027  F01E         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4744  00305E  0012               	return	
  4745  003060                     __end_of__tdiv_to_l_:
  4746                           	opt stack 0
  4747                           tblptru	equ	0xFF8
  4748                           tblptrh	equ	0xFF7
  4749                           tblptrl	equ	0xFF6
  4750                           tablat	equ	0xFF5
  4751                           prodh	equ	0xFF4
  4752                           prodl	equ	0xFF3
  4753                           intcon	equ	0xFF2
  4754                           postinc0	equ	0xFEE
  4755                           wreg	equ	0xFE8
  4756                           indf2	equ	0xFDF
  4757                           postinc2	equ	0xFDE
  4758                           postdec2	equ	0xFDD
  4759                           fsr2h	equ	0xFDA
  4760                           fsr2l	equ	0xFD9
  4761                           status	equ	0xFD8
  4762                           
  4763 ;; *************** function __div_to_l_ *****************
  4764 ;; Defined at:
  4765 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  f1              3   26[COMRAM] unsigned long 
  4768 ;;  f2              3   29[COMRAM] unsigned long 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  quot            4   36[COMRAM] unsigned long 
  4771 ;;  exp1            1   41[COMRAM] unsigned char 
  4772 ;;  cntr            1   40[COMRAM] unsigned char 
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  4   26[COMRAM] unsigned long 
  4775 ;; Registers used:
  4776 ;;		wreg, status,2, status,0
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4782 ;;      Params:         6       0       0       0       0       0       0
  4783 ;;      Locals:         6       0       0       0       0       0       0
  4784 ;;      Temps:          4       0       0       0       0       0       0
  4785 ;;      Totals:        16       0       0       0       0       0       0
  4786 ;;Total ram usage:       16 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    4
  4789 ;; This function calls:
  4790 ;;		Nothing
  4791 ;; This function is called by:
  4792 ;;		_printf
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           	psect	text9
  4797  002C7A                     __ptext9:
  4798                           	opt stack 0
  4799  002C7A                     __div_to_l_:
  4800                           	opt stack 25
  4801                           
  4802                           ;incstack = 0
  4803  002C7A  C01B  F021         	movff	__div_to_l_@f1,??__div_to_l_
  4804  002C7E  C01C  F022         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  4805  002C82  C01D  F023         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  4806  002C86  C01E  F024         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  4807  002C8A  0E18               	movlw	24
  4808  002C8C  D005               	goto	u5430
  4809  002C8E                     u5435:
  4810  002C8E  90D8               	bcf	status,0,c
  4811  002C90  3224               	rrcf	??__div_to_l_+3,f,c
  4812  002C92  3223               	rrcf	??__div_to_l_+2,f,c
  4813  002C94  3222               	rrcf	??__div_to_l_+1,f,c
  4814  002C96  3221               	rrcf	??__div_to_l_,f,c
  4815  002C98                     u5430:
  4816  002C98  2EE8               	decfsz	wreg,f,c
  4817  002C9A  D7F9               	goto	u5435
  4818  002C9C  5021               	movf	??__div_to_l_,w,c
  4819  002C9E  6E2A               	movwf	__div_to_l_@exp1,c
  4820  002CA0  662A               	tstfsz	__div_to_l_@exp1& (0+255),c
  4821  002CA2  D009               	goto	l5082
  4822  002CA4  0E00               	movlw	0
  4823  002CA6  6E1B               	movwf	?__div_to_l_,c
  4824  002CA8  0E00               	movlw	0
  4825  002CAA  6E1C               	movwf	?__div_to_l_+1,c
  4826  002CAC  0E00               	movlw	0
  4827  002CAE  6E1D               	movwf	?__div_to_l_+2,c
  4828  002CB0  0E00               	movlw	0
  4829  002CB2  6E1E               	movwf	?__div_to_l_+3,c
  4830  002CB4  0012               	return	
  4831  002CB6                     l5082:
  4832  002CB6  C01E  F021         	movff	__div_to_l_@f2,??__div_to_l_
  4833  002CBA  C01F  F022         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  4834  002CBE  C020  F023         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  4835  002CC2  C021  F024         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  4836  002CC6  0E18               	movlw	24
  4837  002CC8  D005               	goto	u5450
  4838  002CCA                     u5455:
  4839  002CCA  90D8               	bcf	status,0,c
  4840  002CCC  3224               	rrcf	??__div_to_l_+3,f,c
  4841  002CCE  3223               	rrcf	??__div_to_l_+2,f,c
  4842  002CD0  3222               	rrcf	??__div_to_l_+1,f,c
  4843  002CD2  3221               	rrcf	??__div_to_l_,f,c
  4844  002CD4                     u5450:
  4845  002CD4  2EE8               	decfsz	wreg,f,c
  4846  002CD6  D7F9               	goto	u5455
  4847  002CD8  5021               	movf	??__div_to_l_,w,c
  4848  002CDA  6E29               	movwf	__div_to_l_@cntr,c
  4849  002CDC  6629               	tstfsz	__div_to_l_@cntr& (0+255),c
  4850  002CDE  D009               	goto	l5088
  4851  002CE0  0E00               	movlw	0
  4852  002CE2  6E1B               	movwf	?__div_to_l_,c
  4853  002CE4  0E00               	movlw	0
  4854  002CE6  6E1C               	movwf	?__div_to_l_+1,c
  4855  002CE8  0E00               	movlw	0
  4856  002CEA  6E1D               	movwf	?__div_to_l_+2,c
  4857  002CEC  0E00               	movlw	0
  4858  002CEE  6E1E               	movwf	?__div_to_l_+3,c
  4859  002CF0  0012               	return	
  4860  002CF2                     l5088:
  4861  002CF2  8E1D               	bsf	__div_to_l_@f1+2,7,c
  4862  002CF4  0EFF               	movlw	255
  4863  002CF6  161B               	andwf	__div_to_l_@f1,f,c
  4864  002CF8  0EFF               	movlw	255
  4865  002CFA  161C               	andwf	__div_to_l_@f1+1,f,c
  4866  002CFC  0EFF               	movlw	255
  4867  002CFE  161D               	andwf	__div_to_l_@f1+2,f,c
  4868  002D00  0E00               	movlw	0
  4869  002D02  161E               	andwf	__div_to_l_@f1+3,f,c
  4870  002D04  8E20               	bsf	__div_to_l_@f2+2,7,c
  4871  002D06  0EFF               	movlw	255
  4872  002D08  161E               	andwf	__div_to_l_@f2,f,c
  4873  002D0A  0EFF               	movlw	255
  4874  002D0C  161F               	andwf	__div_to_l_@f2+1,f,c
  4875  002D0E  0EFF               	movlw	255
  4876  002D10  1620               	andwf	__div_to_l_@f2+2,f,c
  4877  002D12  0E00               	movlw	0
  4878  002D14  1621               	andwf	__div_to_l_@f2+3,f,c
  4879  002D16  0E00               	movlw	0
  4880  002D18  6E25               	movwf	__div_to_l_@quot,c
  4881  002D1A  0E00               	movlw	0
  4882  002D1C  6E26               	movwf	__div_to_l_@quot+1,c
  4883  002D1E  0E00               	movlw	0
  4884  002D20  6E27               	movwf	__div_to_l_@quot+2,c
  4885  002D22  0E00               	movlw	0
  4886  002D24  6E28               	movwf	__div_to_l_@quot+3,c
  4887  002D26  0E7F               	movlw	127
  4888  002D28  5E2A               	subwf	__div_to_l_@exp1,f,c
  4889  002D2A  5029               	movf	__div_to_l_@cntr,w,c
  4890  002D2C  0FA0               	addlw	160
  4891  002D2E  5E2A               	subwf	__div_to_l_@exp1,f,c
  4892  002D30  0E20               	movlw	32
  4893  002D32  6E29               	movwf	__div_to_l_@cntr,c
  4894  002D34                     l5102:
  4895  002D34  90D8               	bcf	status,0,c
  4896  002D36  3625               	rlcf	__div_to_l_@quot,f,c
  4897  002D38  3626               	rlcf	__div_to_l_@quot+1,f,c
  4898  002D3A  3627               	rlcf	__div_to_l_@quot+2,f,c
  4899  002D3C  3628               	rlcf	__div_to_l_@quot+3,f,c
  4900  002D3E  501E               	movf	__div_to_l_@f2,w,c
  4901  002D40  5C1B               	subwf	__div_to_l_@f1,w,c
  4902  002D42  501F               	movf	__div_to_l_@f2+1,w,c
  4903  002D44  581C               	subwfb	__div_to_l_@f1+1,w,c
  4904  002D46  5020               	movf	__div_to_l_@f2+2,w,c
  4905  002D48  581D               	subwfb	__div_to_l_@f1+2,w,c
  4906  002D4A  5021               	movf	__div_to_l_@f2+3,w,c
  4907  002D4C  581E               	subwfb	__div_to_l_@f1+3,w,c
  4908  002D4E  A0D8               	btfss	status,0,c
  4909  002D50  D009               	goto	l5110
  4910  002D52  501E               	movf	__div_to_l_@f2,w,c
  4911  002D54  5E1B               	subwf	__div_to_l_@f1,f,c
  4912  002D56  501F               	movf	__div_to_l_@f2+1,w,c
  4913  002D58  5A1C               	subwfb	__div_to_l_@f1+1,f,c
  4914  002D5A  5020               	movf	__div_to_l_@f2+2,w,c
  4915  002D5C  5A1D               	subwfb	__div_to_l_@f1+2,f,c
  4916  002D5E  5021               	movf	__div_to_l_@f2+3,w,c
  4917  002D60  5A1E               	subwfb	__div_to_l_@f1+3,f,c
  4918  002D62  8025               	bsf	__div_to_l_@quot,0,c
  4919  002D64                     l5110:
  4920  002D64  90D8               	bcf	status,0,c
  4921  002D66  361B               	rlcf	__div_to_l_@f1,f,c
  4922  002D68  361C               	rlcf	__div_to_l_@f1+1,f,c
  4923  002D6A  361D               	rlcf	__div_to_l_@f1+2,f,c
  4924  002D6C  361E               	rlcf	__div_to_l_@f1+3,f,c
  4925  002D6E  2E29               	decfsz	__div_to_l_@cntr,f,c
  4926  002D70  D7E1               	goto	l5102
  4927  002D72  AE2A               	btfss	__div_to_l_@exp1,7,c
  4928  002D74  D019               	goto	l5124
  4929  002D76  502A               	movf	__div_to_l_@exp1,w,c
  4930  002D78  0A80               	xorlw	128
  4931  002D7A  6E21               	movwf	??__div_to_l_& (0+255),c
  4932  002D7C  0EE1               	movlw	225
  4933  002D7E  0A80               	xorlw	128
  4934  002D80  5C21               	subwf	??__div_to_l_,w,c
  4935  002D82  B0D8               	btfsc	status,0,c
  4936  002D84  D009               	goto	l5120
  4937  002D86  0E00               	movlw	0
  4938  002D88  6E1B               	movwf	?__div_to_l_,c
  4939  002D8A  0E00               	movlw	0
  4940  002D8C  6E1C               	movwf	?__div_to_l_+1,c
  4941  002D8E  0E00               	movlw	0
  4942  002D90  6E1D               	movwf	?__div_to_l_+2,c
  4943  002D92  0E00               	movlw	0
  4944  002D94  6E1E               	movwf	?__div_to_l_+3,c
  4945  002D96  0012               	return	
  4946  002D98                     l5120:
  4947  002D98  90D8               	bcf	status,0,c
  4948  002D9A  3228               	rrcf	__div_to_l_@quot+3,f,c
  4949  002D9C  3227               	rrcf	__div_to_l_@quot+2,f,c
  4950  002D9E  3226               	rrcf	__div_to_l_@quot+1,f,c
  4951  002DA0  3225               	rrcf	__div_to_l_@quot,f,c
  4952  002DA2  3E2A               	incfsz	__div_to_l_@exp1,f,c
  4953  002DA4  D7F9               	goto	l5120
  4954  002DA6  D014               	goto	l1007
  4955  002DA8                     l5124:
  4956  002DA8  0E1F               	movlw	31
  4957  002DAA  642A               	cpfsgt	__div_to_l_@exp1,c
  4958  002DAC  D00F               	goto	l5132
  4959  002DAE  0E00               	movlw	0
  4960  002DB0  6E1B               	movwf	?__div_to_l_,c
  4961  002DB2  0E00               	movlw	0
  4962  002DB4  6E1C               	movwf	?__div_to_l_+1,c
  4963  002DB6  0E00               	movlw	0
  4964  002DB8  6E1D               	movwf	?__div_to_l_+2,c
  4965  002DBA  0E00               	movlw	0
  4966  002DBC  6E1E               	movwf	?__div_to_l_+3,c
  4967  002DBE  0012               	return	
  4968  002DC0                     l5130:
  4969  002DC0  90D8               	bcf	status,0,c
  4970  002DC2  3625               	rlcf	__div_to_l_@quot,f,c
  4971  002DC4  3626               	rlcf	__div_to_l_@quot+1,f,c
  4972  002DC6  3627               	rlcf	__div_to_l_@quot+2,f,c
  4973  002DC8  3628               	rlcf	__div_to_l_@quot+3,f,c
  4974  002DCA  062A               	decf	__div_to_l_@exp1,f,c
  4975  002DCC                     l5132:
  4976  002DCC  662A               	tstfsz	__div_to_l_@exp1,c
  4977  002DCE  D7F8               	goto	l5130
  4978  002DD0                     l1007:
  4979  002DD0  C025  F01B         	movff	__div_to_l_@quot,?__div_to_l_
  4980  002DD4  C026  F01C         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4981  002DD8  C027  F01D         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4982  002DDC  C028  F01E         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4983  002DE0  0012               	return	
  4984  002DE2                     __end_of__div_to_l_:
  4985                           	opt stack 0
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           prodh	equ	0xFF4
  4991                           prodl	equ	0xFF3
  4992                           intcon	equ	0xFF2
  4993                           postinc0	equ	0xFEE
  4994                           wreg	equ	0xFE8
  4995                           indf2	equ	0xFDF
  4996                           postinc2	equ	0xFDE
  4997                           postdec2	equ	0xFDD
  4998                           fsr2h	equ	0xFDA
  4999                           fsr2l	equ	0xFD9
  5000                           status	equ	0xFD8
  5001                           
  5002 ;; *************** function ___lltoft *****************
  5003 ;; Defined at:
  5004 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;  c               4   34[COMRAM] unsigned long 
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;  exp             1   42[COMRAM] unsigned char 
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  3   34[COMRAM] float 
  5011 ;; Registers used:
  5012 ;;		wreg, status,2, status,0, cstack
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5018 ;;      Params:         4       0       0       0       0       0       0
  5019 ;;      Locals:         1       0       0       0       0       0       0
  5020 ;;      Temps:          4       0       0       0       0       0       0
  5021 ;;      Totals:         9       0       0       0       0       0       0
  5022 ;;Total ram usage:        9 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    5
  5025 ;; This function calls:
  5026 ;;		___ftpack
  5027 ;; This function is called by:
  5028 ;;		_printf
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           	psect	text10
  5033  003AFE                     __ptext10:
  5034                           	opt stack 0
  5035  003AFE                     ___lltoft:
  5036                           	opt stack 24
  5037                           
  5038                           ;incstack = 0
  5039  003AFE  0E8E               	movlw	142
  5040  003B00  6E2B               	movwf	___lltoft@exp,c
  5041  003B02  D006               	goto	l5312
  5042  003B04                     l5310:
  5043  003B04  90D8               	bcf	status,0,c
  5044  003B06  3226               	rrcf	___lltoft@c+3,f,c
  5045  003B08  3225               	rrcf	___lltoft@c+2,f,c
  5046  003B0A  3224               	rrcf	___lltoft@c+1,f,c
  5047  003B0C  3223               	rrcf	___lltoft@c,f,c
  5048  003B0E  2A2B               	incf	___lltoft@exp,f,c
  5049  003B10                     l5312:
  5050  003B10  0E00               	movlw	0
  5051  003B12  1423               	andwf	___lltoft@c,w,c
  5052  003B14  6E27               	movwf	??___lltoft& (0+255),c
  5053  003B16  0E00               	movlw	0
  5054  003B18  1424               	andwf	___lltoft@c+1,w,c
  5055  003B1A  6E28               	movwf	(??___lltoft+1)& (0+255),c
  5056  003B1C  0E00               	movlw	0
  5057  003B1E  1425               	andwf	___lltoft@c+2,w,c
  5058  003B20  6E29               	movwf	(??___lltoft+2)& (0+255),c
  5059  003B22  0EFF               	movlw	255
  5060  003B24  1426               	andwf	___lltoft@c+3,w,c
  5061  003B26  6E2A               	movwf	(??___lltoft+3)& (0+255),c
  5062  003B28  502A               	movf	??___lltoft+3,w,c
  5063  003B2A  1027               	iorwf	??___lltoft,w,c
  5064  003B2C  1028               	iorwf	??___lltoft+1,w,c
  5065  003B2E  1029               	iorwf	??___lltoft+2,w,c
  5066  003B30  A4D8               	btfss	status,2,c
  5067  003B32  D7E8               	goto	l5310
  5068  003B34  C023  F01B         	movff	___lltoft@c,___ftpack@arg
  5069  003B38  C024  F01C         	movff	___lltoft@c+1,___ftpack@arg+1
  5070  003B3C  C025  F01D         	movff	___lltoft@c+2,___ftpack@arg+2
  5071  003B40  C02B  F01E         	movff	___lltoft@exp,___ftpack@exp
  5072  003B44  0E00               	movlw	0
  5073  003B46  6E1F               	movwf	___ftpack@sign,c
  5074  003B48  EC48  F01B         	call	___ftpack	;wreg free
  5075  003B4C  C01B  F023         	movff	?___ftpack,?___lltoft
  5076  003B50  C01C  F024         	movff	?___ftpack+1,?___lltoft+1
  5077  003B54  C01D  F025         	movff	?___ftpack+2,?___lltoft+2
  5078  003B58  0012               	return	
  5079  003B5A                     __end_of___lltoft:
  5080                           	opt stack 0
  5081                           tblptru	equ	0xFF8
  5082                           tblptrh	equ	0xFF7
  5083                           tblptrl	equ	0xFF6
  5084                           tablat	equ	0xFF5
  5085                           prodh	equ	0xFF4
  5086                           prodl	equ	0xFF3
  5087                           intcon	equ	0xFF2
  5088                           postinc0	equ	0xFEE
  5089                           wreg	equ	0xFE8
  5090                           indf2	equ	0xFDF
  5091                           postinc2	equ	0xFDE
  5092                           postdec2	equ	0xFDD
  5093                           fsr2h	equ	0xFDA
  5094                           fsr2l	equ	0xFD9
  5095                           status	equ	0xFD8
  5096                           
  5097 ;; *************** function ___llmod *****************
  5098 ;; Defined at:
  5099 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;  dividend        4   39[COMRAM] unsigned long 
  5102 ;;  divisor         4   43[COMRAM] unsigned long 
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;  counter         1    0[BANK0 ] unsigned char 
  5105 ;; Return value:  Size  Location     Type
  5106 ;;                  4   39[COMRAM] unsigned long 
  5107 ;; Registers used:
  5108 ;;		wreg, status,2, status,0
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5114 ;;      Params:         8       0       0       0       0       0       0
  5115 ;;      Locals:         0       1       0       0       0       0       0
  5116 ;;      Temps:          0       0       0       0       0       0       0
  5117 ;;      Totals:         8       1       0       0       0       0       0
  5118 ;;Total ram usage:        9 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; Hardware stack levels required when called:    4
  5121 ;; This function calls:
  5122 ;;		Nothing
  5123 ;; This function is called by:
  5124 ;;		_printf
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           	psect	text11
  5129  003A92                     __ptext11:
  5130                           	opt stack 0
  5131  003A92                     ___llmod:
  5132                           	opt stack 25
  5133                           
  5134                           ;incstack = 0
  5135  003A92  502F               	movf	___llmod@divisor+3,w,c
  5136  003A94  102C               	iorwf	___llmod@divisor,w,c
  5137  003A96  102D               	iorwf	___llmod@divisor+1,w,c
  5138  003A98  102E               	iorwf	___llmod@divisor+2,w,c
  5139  003A9A  B4D8               	btfsc	status,2,c
  5140  003A9C  D027               	goto	l1214
  5141  003A9E  0E01               	movlw	1
  5142  003AA0  0100               	movlb	0	; () banked
  5143  003AA2  6F60               	movwf	___llmod@counter& (0+255),b
  5144  003AA4  D007               	goto	l5298
  5145  003AA6                     l5296:
  5146                           
  5147                           ; BSR set to: 0
  5148  003AA6  90D8               	bcf	status,0,c
  5149  003AA8  362C               	rlcf	___llmod@divisor,f,c
  5150  003AAA  362D               	rlcf	___llmod@divisor+1,f,c
  5151  003AAC  362E               	rlcf	___llmod@divisor+2,f,c
  5152  003AAE  362F               	rlcf	___llmod@divisor+3,f,c
  5153  003AB0  0100               	movlb	0	; () banked
  5154  003AB2  2B60               	incf	___llmod@counter& (0+255),f,b
  5155  003AB4                     l5298:
  5156                           
  5157                           ; BSR set to: 0
  5158  003AB4  AE2F               	btfss	___llmod@divisor+3,7,c
  5159  003AB6  D7F7               	goto	l5296
  5160  003AB8                     l5300:
  5161                           
  5162                           ; BSR set to: 0
  5163  003AB8  502C               	movf	___llmod@divisor,w,c
  5164  003ABA  5C28               	subwf	___llmod@dividend,w,c
  5165  003ABC  502D               	movf	___llmod@divisor+1,w,c
  5166  003ABE  5829               	subwfb	___llmod@dividend+1,w,c
  5167  003AC0  502E               	movf	___llmod@divisor+2,w,c
  5168  003AC2  582A               	subwfb	___llmod@dividend+2,w,c
  5169  003AC4  502F               	movf	___llmod@divisor+3,w,c
  5170  003AC6  582B               	subwfb	___llmod@dividend+3,w,c
  5171  003AC8  A0D8               	btfss	status,0,c
  5172  003ACA  D008               	goto	l5304
  5173                           
  5174                           ; BSR set to: 0
  5175  003ACC  502C               	movf	___llmod@divisor,w,c
  5176  003ACE  5E28               	subwf	___llmod@dividend,f,c
  5177  003AD0  502D               	movf	___llmod@divisor+1,w,c
  5178  003AD2  5A29               	subwfb	___llmod@dividend+1,f,c
  5179  003AD4  502E               	movf	___llmod@divisor+2,w,c
  5180  003AD6  5A2A               	subwfb	___llmod@dividend+2,f,c
  5181  003AD8  502F               	movf	___llmod@divisor+3,w,c
  5182  003ADA  5A2B               	subwfb	___llmod@dividend+3,f,c
  5183  003ADC                     l5304:
  5184                           
  5185                           ; BSR set to: 0
  5186  003ADC  90D8               	bcf	status,0,c
  5187  003ADE  322F               	rrcf	___llmod@divisor+3,f,c
  5188  003AE0  322E               	rrcf	___llmod@divisor+2,f,c
  5189  003AE2  322D               	rrcf	___llmod@divisor+1,f,c
  5190  003AE4  322C               	rrcf	___llmod@divisor,f,c
  5191                           
  5192                           ; BSR set to: 0
  5193  003AE6  0100               	movlb	0	; () banked
  5194  003AE8  2F60               	decfsz	___llmod@counter& (0+255),f,b
  5195  003AEA  D7E6               	goto	l5300
  5196  003AEC                     l1214:
  5197  003AEC  C028  F028         	movff	___llmod@dividend,?___llmod
  5198  003AF0  C029  F029         	movff	___llmod@dividend+1,?___llmod+1
  5199  003AF4  C02A  F02A         	movff	___llmod@dividend+2,?___llmod+2
  5200  003AF8  C02B  F02B         	movff	___llmod@dividend+3,?___llmod+3
  5201  003AFC  0012               	return	
  5202  003AFE                     __end_of___llmod:
  5203                           	opt stack 0
  5204                           tblptru	equ	0xFF8
  5205                           tblptrh	equ	0xFF7
  5206                           tblptrl	equ	0xFF6
  5207                           tablat	equ	0xFF5
  5208                           prodh	equ	0xFF4
  5209                           prodl	equ	0xFF3
  5210                           intcon	equ	0xFF2
  5211                           postinc0	equ	0xFEE
  5212                           wreg	equ	0xFE8
  5213                           indf2	equ	0xFDF
  5214                           postinc2	equ	0xFDE
  5215                           postdec2	equ	0xFDD
  5216                           fsr2h	equ	0xFDA
  5217                           fsr2l	equ	0xFD9
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function ___lldiv *****************
  5221 ;; Defined at:
  5222 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  dividend        4   26[COMRAM] unsigned long 
  5225 ;;  divisor         4   30[COMRAM] unsigned long 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  quotient        4   34[COMRAM] unsigned long 
  5228 ;;  counter         1   38[COMRAM] unsigned char 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  4   26[COMRAM] unsigned long 
  5231 ;; Registers used:
  5232 ;;		wreg, status,2, status,0
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5238 ;;      Params:         8       0       0       0       0       0       0
  5239 ;;      Locals:         5       0       0       0       0       0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0
  5241 ;;      Totals:        13       0       0       0       0       0       0
  5242 ;;Total ram usage:       13 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:    4
  5245 ;; This function calls:
  5246 ;;		Nothing
  5247 ;; This function is called by:
  5248 ;;		_printf
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252                           	psect	text12
  5253  00398E                     __ptext12:
  5254                           	opt stack 0
  5255  00398E                     ___lldiv:
  5256                           	opt stack 25
  5257                           
  5258                           ;incstack = 0
  5259  00398E  0E00               	movlw	0
  5260  003990  6E23               	movwf	___lldiv@quotient,c
  5261  003992  0E00               	movlw	0
  5262  003994  6E24               	movwf	___lldiv@quotient+1,c
  5263  003996  0E00               	movlw	0
  5264  003998  6E25               	movwf	___lldiv@quotient+2,c
  5265  00399A  0E00               	movlw	0
  5266  00399C  6E26               	movwf	___lldiv@quotient+3,c
  5267  00399E  5022               	movf	___lldiv@divisor+3,w,c
  5268  0039A0  101F               	iorwf	___lldiv@divisor,w,c
  5269  0039A2  1020               	iorwf	___lldiv@divisor+1,w,c
  5270  0039A4  1021               	iorwf	___lldiv@divisor+2,w,c
  5271  0039A6  B4D8               	btfsc	status,2,c
  5272  0039A8  D02A               	goto	l1204
  5273  0039AA  0E01               	movlw	1
  5274  0039AC  6E27               	movwf	___lldiv@counter,c
  5275  0039AE  D006               	goto	l5278
  5276  0039B0                     l5276:
  5277  0039B0  90D8               	bcf	status,0,c
  5278  0039B2  361F               	rlcf	___lldiv@divisor,f,c
  5279  0039B4  3620               	rlcf	___lldiv@divisor+1,f,c
  5280  0039B6  3621               	rlcf	___lldiv@divisor+2,f,c
  5281  0039B8  3622               	rlcf	___lldiv@divisor+3,f,c
  5282  0039BA  2A27               	incf	___lldiv@counter,f,c
  5283  0039BC                     l5278:
  5284  0039BC  AE22               	btfss	___lldiv@divisor+3,7,c
  5285  0039BE  D7F8               	goto	l5276
  5286  0039C0                     l5280:
  5287  0039C0  90D8               	bcf	status,0,c
  5288  0039C2  3623               	rlcf	___lldiv@quotient,f,c
  5289  0039C4  3624               	rlcf	___lldiv@quotient+1,f,c
  5290  0039C6  3625               	rlcf	___lldiv@quotient+2,f,c
  5291  0039C8  3626               	rlcf	___lldiv@quotient+3,f,c
  5292  0039CA  501F               	movf	___lldiv@divisor,w,c
  5293  0039CC  5C1B               	subwf	___lldiv@dividend,w,c
  5294  0039CE  5020               	movf	___lldiv@divisor+1,w,c
  5295  0039D0  581C               	subwfb	___lldiv@dividend+1,w,c
  5296  0039D2  5021               	movf	___lldiv@divisor+2,w,c
  5297  0039D4  581D               	subwfb	___lldiv@dividend+2,w,c
  5298  0039D6  5022               	movf	___lldiv@divisor+3,w,c
  5299  0039D8  581E               	subwfb	___lldiv@dividend+3,w,c
  5300  0039DA  A0D8               	btfss	status,0,c
  5301  0039DC  D009               	goto	l5288
  5302  0039DE  501F               	movf	___lldiv@divisor,w,c
  5303  0039E0  5E1B               	subwf	___lldiv@dividend,f,c
  5304  0039E2  5020               	movf	___lldiv@divisor+1,w,c
  5305  0039E4  5A1C               	subwfb	___lldiv@dividend+1,f,c
  5306  0039E6  5021               	movf	___lldiv@divisor+2,w,c
  5307  0039E8  5A1D               	subwfb	___lldiv@dividend+2,f,c
  5308  0039EA  5022               	movf	___lldiv@divisor+3,w,c
  5309  0039EC  5A1E               	subwfb	___lldiv@dividend+3,f,c
  5310  0039EE  8023               	bsf	___lldiv@quotient,0,c
  5311  0039F0                     l5288:
  5312  0039F0  90D8               	bcf	status,0,c
  5313  0039F2  3222               	rrcf	___lldiv@divisor+3,f,c
  5314  0039F4  3221               	rrcf	___lldiv@divisor+2,f,c
  5315  0039F6  3220               	rrcf	___lldiv@divisor+1,f,c
  5316  0039F8  321F               	rrcf	___lldiv@divisor,f,c
  5317  0039FA  2E27               	decfsz	___lldiv@counter,f,c
  5318  0039FC  D7E1               	goto	l5280
  5319  0039FE                     l1204:
  5320  0039FE  C023  F01B         	movff	___lldiv@quotient,?___lldiv
  5321  003A02  C024  F01C         	movff	___lldiv@quotient+1,?___lldiv+1
  5322  003A06  C025  F01D         	movff	___lldiv@quotient+2,?___lldiv+2
  5323  003A0A  C026  F01E         	movff	___lldiv@quotient+3,?___lldiv+3
  5324  003A0E  0012               	return	
  5325  003A10                     __end_of___lldiv:
  5326                           	opt stack 0
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           intcon	equ	0xFF2
  5334                           postinc0	equ	0xFEE
  5335                           wreg	equ	0xFE8
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           fsr2h	equ	0xFDA
  5340                           fsr2l	equ	0xFD9
  5341                           status	equ	0xFD8
  5342                           
  5343 ;; *************** function ___fttol *****************
  5344 ;; Defined at:
  5345 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  f1              3   34[BANK0 ] float 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  lval            4   44[BANK0 ] unsigned long 
  5350 ;;  exp1            1   48[BANK0 ] unsigned char 
  5351 ;;  sign1           1   43[BANK0 ] unsigned char 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  4   34[BANK0 ] long 
  5354 ;; Registers used:
  5355 ;;		wreg, status,2, status,0
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5361 ;;      Params:         0       4       0       0       0       0       0
  5362 ;;      Locals:         0       6       0       0       0       0       0
  5363 ;;      Temps:          0       5       0       0       0       0       0
  5364 ;;      Totals:         0      15       0       0       0       0       0
  5365 ;;Total ram usage:       15 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    4
  5368 ;; This function calls:
  5369 ;;		Nothing
  5370 ;; This function is called by:
  5371 ;;		_printf
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text13
  5376  00281A                     __ptext13:
  5377                           	opt stack 0
  5378  00281A                     ___fttol:
  5379                           	opt stack 25
  5380                           
  5381                           ;incstack = 0
  5382  00281A  0100               	movlb	0	; () banked
  5383  00281C  C084  F086         	movff	___fttol@f1+2,??___fttol
  5384  002820  0100               	movlb	0	; () banked
  5385  002822  6B87               	clrf	(??___fttol+1)& (0+255),b
  5386  002824  6B88               	clrf	(??___fttol+2)& (0+255),b
  5387  002826  0100               	movlb	0	; () banked
  5388  002828  3583               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5389  00282A  0100               	movlb	0	; () banked
  5390  00282C  3786               	rlcf	??___fttol& (0+255),f,b
  5391  00282E  E301               	bnc	u5631
  5392  002830  8187               	bsf	(??___fttol+1)& (0+255),0,b
  5393  002832                     u5631:
  5394  002832  0100               	movlb	0	; () banked
  5395  002834  5186               	movf	??___fttol& (0+255),w,b
  5396  002836  0100               	movlb	0	; () banked
  5397  002838  6F90               	movwf	___fttol@exp1& (0+255),b
  5398  00283A  0100               	movlb	0	; () banked
  5399  00283C  6790               	tstfsz	___fttol@exp1& (0+255),b
  5400  00283E  D00D               	goto	l5230
  5401                           
  5402                           ; BSR set to: 0
  5403  002840  0E00               	movlw	0
  5404  002842  0100               	movlb	0	; () banked
  5405  002844  6F82               	movwf	?___fttol& (0+255),b
  5406  002846  0E00               	movlw	0
  5407  002848  0100               	movlb	0	; () banked
  5408  00284A  6F83               	movwf	(?___fttol+1)& (0+255),b
  5409  00284C  0E00               	movlw	0
  5410  00284E  0100               	movlb	0	; () banked
  5411  002850  6F84               	movwf	(?___fttol+2)& (0+255),b
  5412  002852  0E00               	movlw	0
  5413  002854  0100               	movlb	0	; () banked
  5414  002856  6F85               	movwf	(?___fttol+3)& (0+255),b
  5415  002858  0012               	return	
  5416  00285A                     l5230:
  5417                           
  5418                           ; BSR set to: 0
  5419  00285A  0E17               	movlw	23
  5420  00285C  0100               	movlb	0	; () banked
  5421  00285E  6F86               	movwf	??___fttol& (0+255),b
  5422  002860  0100               	movlb	0	; () banked
  5423  002862  C082  F087         	movff	___fttol@f1,??___fttol+1
  5424  002866  0100               	movlb	0	; () banked
  5425  002868  C083  F088         	movff	___fttol@f1+1,??___fttol+2
  5426  00286C  0100               	movlb	0	; () banked
  5427  00286E  C084  F089         	movff	___fttol@f1+2,??___fttol+3
  5428  002872  0100               	movlb	0	; () banked
  5429  002874  2986               	incf	??___fttol& (0+255),w,b
  5430  002876  0100               	movlb	0	; () banked
  5431  002878  6F8A               	movwf	(??___fttol+4)& (0+255),b
  5432  00287A  D005               	goto	u5650
  5433  00287C                     u5655:
  5434  00287C  0100               	movlb	0	; () banked
  5435  00287E  90D8               	bcf	status,0,c
  5436  002880  3389               	rrcf	(??___fttol+3)& (0+255),f,b
  5437  002882  3388               	rrcf	(??___fttol+2)& (0+255),f,b
  5438  002884  3387               	rrcf	(??___fttol+1)& (0+255),f,b
  5439  002886                     u5650:
  5440  002886  0100               	movlb	0	; () banked
  5441  002888  2F8A               	decfsz	(??___fttol+4)& (0+255),f,b
  5442  00288A  D7F8               	goto	u5655
  5443  00288C  0100               	movlb	0	; () banked
  5444  00288E  5187               	movf	(??___fttol+1)& (0+255),w,b
  5445  002890  0100               	movlb	0	; () banked
  5446  002892  6F8B               	movwf	___fttol@sign1& (0+255),b
  5447                           
  5448                           ; BSR set to: 0
  5449  002894  0100               	movlb	0	; () banked
  5450  002896  8F83               	bsf	(___fttol@f1+1)& (0+255),7,b
  5451                           
  5452                           ; BSR set to: 0
  5453  002898  0EFF               	movlw	255
  5454  00289A  0100               	movlb	0	; () banked
  5455  00289C  1782               	andwf	___fttol@f1& (0+255),f,b
  5456  00289E  0EFF               	movlw	255
  5457  0028A0  0100               	movlb	0	; () banked
  5458  0028A2  1783               	andwf	(___fttol@f1+1)& (0+255),f,b
  5459  0028A4  0E00               	movlw	0
  5460  0028A6  0100               	movlb	0	; () banked
  5461  0028A8  1784               	andwf	(___fttol@f1+2)& (0+255),f,b
  5462                           
  5463                           ; BSR set to: 0
  5464  0028AA  0100               	movlb	0	; () banked
  5465  0028AC  5182               	movf	___fttol@f1& (0+255),w,b
  5466  0028AE  0100               	movlb	0	; () banked
  5467  0028B0  6F8C               	movwf	___fttol@lval& (0+255),b
  5468  0028B2  0100               	movlb	0	; () banked
  5469  0028B4  5183               	movf	(___fttol@f1+1)& (0+255),w,b
  5470  0028B6  0100               	movlb	0	; () banked
  5471  0028B8  6F8D               	movwf	(___fttol@lval+1)& (0+255),b
  5472  0028BA  0100               	movlb	0	; () banked
  5473  0028BC  5184               	movf	(___fttol@f1+2)& (0+255),w,b
  5474  0028BE  0100               	movlb	0	; () banked
  5475  0028C0  6F8E               	movwf	(___fttol@lval+2)& (0+255),b
  5476  0028C2  0100               	movlb	0	; () banked
  5477  0028C4  6B8F               	clrf	(___fttol@lval+3)& (0+255),b
  5478                           
  5479                           ; BSR set to: 0
  5480  0028C6  0E8E               	movlw	142
  5481  0028C8  0100               	movlb	0	; () banked
  5482  0028CA  5F90               	subwf	___fttol@exp1& (0+255),f,b
  5483                           
  5484                           ; BSR set to: 0
  5485  0028CC  0100               	movlb	0	; () banked
  5486  0028CE  AF90               	btfss	___fttol@exp1& (0+255),7,b
  5487  0028D0  D026               	goto	l5252
  5488                           
  5489                           ; BSR set to: 0
  5490  0028D2  0100               	movlb	0	; () banked
  5491  0028D4  5190               	movf	___fttol@exp1& (0+255),w,b
  5492  0028D6  0A80               	xorlw	128
  5493  0028D8  0100               	movlb	0	; () banked
  5494  0028DA  6F86               	movwf	??___fttol& (0+255),b
  5495  0028DC  0EF1               	movlw	241
  5496  0028DE  0A80               	xorlw	128
  5497  0028E0  0100               	movlb	0	; () banked
  5498  0028E2  5D86               	subwf	??___fttol& (0+255),w,b
  5499  0028E4  B0D8               	btfsc	status,0,c
  5500  0028E6  D00D               	goto	l5248
  5501                           
  5502                           ; BSR set to: 0
  5503  0028E8  0E00               	movlw	0
  5504  0028EA  0100               	movlb	0	; () banked
  5505  0028EC  6F82               	movwf	?___fttol& (0+255),b
  5506  0028EE  0E00               	movlw	0
  5507  0028F0  0100               	movlb	0	; () banked
  5508  0028F2  6F83               	movwf	(?___fttol+1)& (0+255),b
  5509  0028F4  0E00               	movlw	0
  5510  0028F6  0100               	movlb	0	; () banked
  5511  0028F8  6F84               	movwf	(?___fttol+2)& (0+255),b
  5512  0028FA  0E00               	movlw	0
  5513  0028FC  0100               	movlb	0	; () banked
  5514  0028FE  6F85               	movwf	(?___fttol+3)& (0+255),b
  5515  002900  0012               	return	
  5516  002902                     l5248:
  5517                           
  5518                           ; BSR set to: 0
  5519  002902  0100               	movlb	0	; () banked
  5520  002904  90D8               	bcf	status,0,c
  5521  002906  0100               	movlb	0	; () banked
  5522  002908  338F               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5523  00290A  0100               	movlb	0	; () banked
  5524  00290C  338E               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5525  00290E  0100               	movlb	0	; () banked
  5526  002910  338D               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5527  002912  0100               	movlb	0	; () banked
  5528  002914  338C               	rrcf	___fttol@lval& (0+255),f,b
  5529                           
  5530                           ; BSR set to: 0
  5531  002916  0100               	movlb	0	; () banked
  5532  002918  3F90               	incfsz	___fttol@exp1& (0+255),f,b
  5533  00291A  D7F3               	goto	l5248
  5534  00291C  D020               	goto	l5262
  5535  00291E                     l5252:
  5536                           
  5537                           ; BSR set to: 0
  5538  00291E  0E17               	movlw	23
  5539  002920  0100               	movlb	0	; () banked
  5540  002922  6590               	cpfsgt	___fttol@exp1& (0+255),b
  5541  002924  D019               	goto	l5260
  5542                           
  5543                           ; BSR set to: 0
  5544  002926  0E00               	movlw	0
  5545  002928  0100               	movlb	0	; () banked
  5546  00292A  6F82               	movwf	?___fttol& (0+255),b
  5547  00292C  0E00               	movlw	0
  5548  00292E  0100               	movlb	0	; () banked
  5549  002930  6F83               	movwf	(?___fttol+1)& (0+255),b
  5550  002932  0E00               	movlw	0
  5551  002934  0100               	movlb	0	; () banked
  5552  002936  6F84               	movwf	(?___fttol+2)& (0+255),b
  5553  002938  0E00               	movlw	0
  5554  00293A  0100               	movlb	0	; () banked
  5555  00293C  6F85               	movwf	(?___fttol+3)& (0+255),b
  5556  00293E  0012               	return	
  5557  002940                     l5258:
  5558                           
  5559                           ; BSR set to: 0
  5560  002940  0100               	movlb	0	; () banked
  5561  002942  90D8               	bcf	status,0,c
  5562  002944  0100               	movlb	0	; () banked
  5563  002946  378C               	rlcf	___fttol@lval& (0+255),f,b
  5564  002948  0100               	movlb	0	; () banked
  5565  00294A  378D               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5566  00294C  0100               	movlb	0	; () banked
  5567  00294E  378E               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5568  002950  0100               	movlb	0	; () banked
  5569  002952  378F               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5570  002954  0100               	movlb	0	; () banked
  5571  002956  0790               	decf	___fttol@exp1& (0+255),f,b
  5572  002958                     l5260:
  5573                           
  5574                           ; BSR set to: 0
  5575  002958  0100               	movlb	0	; () banked
  5576  00295A  6790               	tstfsz	___fttol@exp1& (0+255),b
  5577  00295C  D7F1               	goto	l5258
  5578  00295E                     l5262:
  5579                           
  5580                           ; BSR set to: 0
  5581  00295E  0100               	movlb	0	; () banked
  5582  002960  518B               	movf	___fttol@sign1& (0+255),w,b
  5583  002962  B4D8               	btfsc	status,2,c
  5584  002964  D00F               	goto	l5266
  5585                           
  5586                           ; BSR set to: 0
  5587  002966  0100               	movlb	0	; () banked
  5588  002968  1F8F               	comf	(___fttol@lval+3)& (0+255),f,b
  5589  00296A  0100               	movlb	0	; () banked
  5590  00296C  1F8E               	comf	(___fttol@lval+2)& (0+255),f,b
  5591  00296E  0100               	movlb	0	; () banked
  5592  002970  1F8D               	comf	(___fttol@lval+1)& (0+255),f,b
  5593  002972  0100               	movlb	0	; () banked
  5594  002974  6D8C               	negf	___fttol@lval& (0+255),b
  5595  002976  0E00               	movlw	0
  5596  002978  0100               	movlb	0	; () banked
  5597  00297A  238D               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5598  00297C  0100               	movlb	0	; () banked
  5599  00297E  238E               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5600  002980  0100               	movlb	0	; () banked
  5601  002982  238F               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5602  002984                     l5266:
  5603                           
  5604                           ; BSR set to: 0
  5605  002984  C08C  F082         	movff	___fttol@lval,?___fttol
  5606  002988  C08D  F083         	movff	___fttol@lval+1,?___fttol+1
  5607  00298C  C08E  F084         	movff	___fttol@lval+2,?___fttol+2
  5608  002990  C08F  F085         	movff	___fttol@lval+3,?___fttol+3
  5609  002994  0012               	return	
  5610  002996                     __end_of___fttol:
  5611                           	opt stack 0
  5612                           tblptru	equ	0xFF8
  5613                           tblptrh	equ	0xFF7
  5614                           tblptrl	equ	0xFF6
  5615                           tablat	equ	0xFF5
  5616                           prodh	equ	0xFF4
  5617                           prodl	equ	0xFF3
  5618                           intcon	equ	0xFF2
  5619                           postinc0	equ	0xFEE
  5620                           wreg	equ	0xFE8
  5621                           indf2	equ	0xFDF
  5622                           postinc2	equ	0xFDE
  5623                           postdec2	equ	0xFDD
  5624                           fsr2h	equ	0xFDA
  5625                           fsr2l	equ	0xFD9
  5626                           status	equ	0xFD8
  5627                           
  5628 ;; *************** function ___ftneg *****************
  5629 ;; Defined at:
  5630 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;  f1              3   26[COMRAM] float 
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;		None
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  3   26[COMRAM] float 
  5637 ;; Registers used:
  5638 ;;		wreg, status,2, status,0
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5644 ;;      Params:         3       0       0       0       0       0       0
  5645 ;;      Locals:         0       0       0       0       0       0       0
  5646 ;;      Temps:          0       0       0       0       0       0       0
  5647 ;;      Totals:         3       0       0       0       0       0       0
  5648 ;;Total ram usage:        3 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; Hardware stack levels required when called:    4
  5651 ;; This function calls:
  5652 ;;		Nothing
  5653 ;; This function is called by:
  5654 ;;		_printf
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           	psect	text14
  5659  003DEC                     __ptext14:
  5660                           	opt stack 0
  5661  003DEC                     ___ftneg:
  5662                           	opt stack 25
  5663                           
  5664                           ; BSR set to: 0
  5665                           ;incstack = 0
  5666  003DEC  0E7F               	movlw	127
  5667  003DEE  141D               	andwf	___ftneg@f1+2,w,c
  5668  003DF0  101C               	iorwf	___ftneg@f1+1,w,c
  5669  003DF2  101B               	iorwf	___ftneg@f1,w,c
  5670  003DF4  B4D8               	btfsc	status,2,c
  5671  003DF6  D006               	goto	l1150
  5672  003DF8  0E00               	movlw	0
  5673  003DFA  1A1B               	xorwf	___ftneg@f1,f,c
  5674  003DFC  0E00               	movlw	0
  5675  003DFE  1A1C               	xorwf	___ftneg@f1+1,f,c
  5676  003E00  0E80               	movlw	128
  5677  003E02  1A1D               	xorwf	___ftneg@f1+2,f,c
  5678  003E04                     l1150:
  5679  003E04  C01B  F01B         	movff	___ftneg@f1,?___ftneg
  5680  003E08  C01C  F01C         	movff	___ftneg@f1+1,?___ftneg+1
  5681  003E0C  C01D  F01D         	movff	___ftneg@f1+2,?___ftneg+2
  5682  003E10  0012               	return	
  5683  003E12                     __end_of___ftneg:
  5684                           	opt stack 0
  5685                           tblptru	equ	0xFF8
  5686                           tblptrh	equ	0xFF7
  5687                           tblptrl	equ	0xFF6
  5688                           tablat	equ	0xFF5
  5689                           prodh	equ	0xFF4
  5690                           prodl	equ	0xFF3
  5691                           intcon	equ	0xFF2
  5692                           postinc0	equ	0xFEE
  5693                           wreg	equ	0xFE8
  5694                           indf2	equ	0xFDF
  5695                           postinc2	equ	0xFDE
  5696                           postdec2	equ	0xFDD
  5697                           fsr2h	equ	0xFDA
  5698                           fsr2l	equ	0xFD9
  5699                           status	equ	0xFD8
  5700                           
  5701 ;; *************** function _Temp_Fault *****************
  5702 ;; Defined at:
  5703 ;;		line 12 in file "Tempeture.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;		None
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;  i               2   10[BANK0 ] int 
  5708 ;;  fault           1    9[BANK0 ] unsigned char 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  1    wreg      unsigned char 
  5711 ;; Registers used:
  5712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5718 ;;      Params:         0       0       0       0       0       0       0
  5719 ;;      Locals:         0       3       0       0       0       0       0
  5720 ;;      Temps:          0       0       0       0       0       0       0
  5721 ;;      Totals:         0       3       0       0       0       0       0
  5722 ;;Total ram usage:        3 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:    5
  5725 ;; This function calls:
  5726 ;;		___ftge
  5727 ;;		___wmul
  5728 ;; This function is called by:
  5729 ;;		_main
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text15
  5734  003A10                     __ptext15:
  5735                           	opt stack 0
  5736  003A10                     _Temp_Fault:
  5737                           	opt stack 25
  5738                           
  5739                           ;Tempeture.c: 15: char fault = 0;
  5740                           
  5741                           ;incstack = 0
  5742  003A10  0E00               	movlw	0
  5743  003A12  0100               	movlb	0	; () banked
  5744  003A14  6F69               	movwf	Temp_Fault@fault& (0+255),b
  5745                           
  5746                           ;Tempeture.c: 16: for(int i = 0;i<9;i++)
  5747  003A16  0E00               	movlw	0
  5748  003A18  0100               	movlb	0	; () banked
  5749  003A1A  6F6B               	movwf	(Temp_Fault@i+1)& (0+255),b
  5750  003A1C  0E00               	movlw	0
  5751  003A1E  0100               	movlb	0	; () banked
  5752  003A20  6F6A               	movwf	Temp_Fault@i& (0+255),b
  5753  003A22                     
  5754                           ; BSR set to: 0
  5755  003A22  0100               	movlb	0	; () banked
  5756  003A24  516B               	movf	(Temp_Fault@i+1)& (0+255),w,b
  5757  003A26  0A80               	xorlw	128
  5758  003A28  0F80               	addlw	-128
  5759  003A2A  0E09               	movlw	9
  5760  003A2C  B4D8               	btfsc	status,2,c
  5761  003A2E  5D6A               	subwf	Temp_Fault@i& (0+255),w,b
  5762  003A30  B0D8               	btfsc	status,0,c
  5763  003A32  0012               	return	
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;Tempeture.c: 17: {
  5767                           ;Tempeture.c: 18: if (60.5 > Temp_DegF[i])
  5768                           
  5769                           ; BSR set to: 0
  5770                           
  5771                           ; BSR set to: 0
  5772  003A34  C06A  F029         	movff	Temp_Fault@i,___wmul@multiplier
  5773  003A38  C06B  F02A         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  5774  003A3C  0E00               	movlw	0
  5775  003A3E  6E2C               	movwf	___wmul@multiplicand+1,c
  5776  003A40  0E03               	movlw	3
  5777  003A42  6E2B               	movwf	___wmul@multiplicand,c
  5778  003A44  EC09  F01F         	call	___wmul	;wreg free
  5779  003A48  0101               	movlb	1	; () banked
  5780  003A4A  0E8C               	movlw	low _Temp_DegF
  5781  003A4C  2429               	addwf	?___wmul,w,c
  5782  003A4E  6ED9               	movwf	fsr2l,c
  5783  003A50  0101               	movlb	1	; () banked
  5784  003A52  0E01               	movlw	high _Temp_DegF
  5785  003A54  202A               	addwfc	?___wmul+1,w,c
  5786  003A56  6EDA               	movwf	fsr2h,c
  5787  003A58  0100               	movlb	0	; () banked
  5788  003A5A  CFDE F060          	movff	postinc2,___ftge@ff1
  5789  003A5E  0100               	movlb	0	; () banked
  5790  003A60  CFDE F061          	movff	postinc2,___ftge@ff1+1
  5791  003A64  0100               	movlb	0	; () banked
  5792  003A66  CFDD F062          	movff	postdec2,___ftge@ff1+2
  5793  003A6A  0E00               	movlw	0
  5794  003A6C  0100               	movlb	0	; () banked
  5795  003A6E  6F63               	movwf	___ftge@ff2& (0+255),b
  5796  003A70  0E72               	movlw	114
  5797  003A72  0100               	movlb	0	; () banked
  5798  003A74  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5799  003A76  0E42               	movlw	66
  5800  003A78  0100               	movlb	0	; () banked
  5801  003A7A  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5802  003A7C  EC17  F01A         	call	___ftge	;wreg free
  5803  003A80  B0D8               	btfsc	status,0,c
  5804  003A82  D003               	goto	l5358
  5805                           
  5806                           ;Tempeture.c: 19: {
  5807                           ;Tempeture.c: 20: fault = 1;
  5808  003A84  0E01               	movlw	1
  5809  003A86  0100               	movlb	0	; () banked
  5810  003A88  6F69               	movwf	Temp_Fault@fault& (0+255),b
  5811  003A8A                     l5358:
  5812  003A8A  0100               	movlb	0	; () banked
  5813  003A8C  4B6A               	infsnz	Temp_Fault@i& (0+255),f,b
  5814  003A8E  2B6B               	incf	(Temp_Fault@i+1)& (0+255),f,b
  5815  003A90  D7C8               	goto	L7
  5816  003A92                     __end_of_Temp_Fault:
  5817                           	opt stack 0
  5818                           tblptru	equ	0xFF8
  5819                           tblptrh	equ	0xFF7
  5820                           tblptrl	equ	0xFF6
  5821                           tablat	equ	0xFF5
  5822                           prodh	equ	0xFF4
  5823                           prodl	equ	0xFF3
  5824                           intcon	equ	0xFF2
  5825                           postinc0	equ	0xFEE
  5826                           wreg	equ	0xFE8
  5827                           indf2	equ	0xFDF
  5828                           postinc2	equ	0xFDE
  5829                           postdec2	equ	0xFDD
  5830                           fsr2h	equ	0xFDA
  5831                           fsr2l	equ	0xFD9
  5832                           status	equ	0xFD8
  5833                           
  5834 ;; *************** function _Temp_Convert *****************
  5835 ;; Defined at:
  5836 ;;		line 50 in file "Tempeture.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;		None
  5839 ;; Auto vars:     Size  Location     Type
  5840 ;;  steinhart       3   74[BANK0 ] float 
  5841 ;;  x               2   72[BANK0 ] int 
  5842 ;; Return value:  Size  Location     Type
  5843 ;;		None               void
  5844 ;; Registers used:
  5845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5851 ;;      Params:         0       0       0       0       0       0       0
  5852 ;;      Locals:         0       9       0       0       0       0       0
  5853 ;;      Temps:          0       2       0       0       0       0       0
  5854 ;;      Totals:         0      11       0       0       0       0       0
  5855 ;;Total ram usage:       11 bytes
  5856 ;; Hardware stack levels used:    1
  5857 ;; Hardware stack levels required when called:    8
  5858 ;; This function calls:
  5859 ;;		_Temp_Filter
  5860 ;;		___awdiv
  5861 ;;		___awtoft
  5862 ;;		___ftadd
  5863 ;;		___ftdiv
  5864 ;;		___ftmul
  5865 ;;		___ftsub
  5866 ;;		___wmul
  5867 ;;		_log
  5868 ;; This function is called by:
  5869 ;;		_main
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           	psect	text16
  5874  0022F6                     __ptext16:
  5875                           	opt stack 0
  5876  0022F6                     _Temp_Convert:
  5877                           	opt stack 22
  5878                           
  5879                           ;Tempeture.c: 52: int x;
  5880                           ;Tempeture.c: 53: float steinhart;
  5881                           ;Tempeture.c: 54: for(x = 0; x < 10; x++)
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;incstack = 0
  5885  0022F6  0E00               	movlw	0
  5886  0022F8  0100               	movlb	0	; () banked
  5887  0022FA  6FA9               	movwf	(Temp_Convert@x+1)& (0+255),b
  5888  0022FC  0E00               	movlw	0
  5889  0022FE  0100               	movlb	0	; () banked
  5890  002300  6FA8               	movwf	Temp_Convert@x& (0+255),b
  5891  002302                     
  5892                           ; BSR set to: 0
  5893  002302  0100               	movlb	0	; () banked
  5894  002304  51A9               	movf	(Temp_Convert@x+1)& (0+255),w,b
  5895  002306  0A80               	xorlw	128
  5896  002308  0F80               	addlw	-128
  5897  00230A  0E0A               	movlw	10
  5898  00230C  B4D8               	btfsc	status,2,c
  5899  00230E  5DA8               	subwf	Temp_Convert@x& (0+255),w,b
  5900  002310  B0D8               	btfsc	status,0,c
  5901  002312  D0F8               	goto	l5392
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;Tempeture.c: 55: {
  5905                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5906                           
  5907                           ; BSR set to: 0
  5908                           
  5909                           ; BSR set to: 0
  5910  002314  0EE4               	movlw	low _Temp_Adc
  5911  002316  0100               	movlb	0	; () banked
  5912  002318  6FA2               	movwf	??_Temp_Convert& (0+255),b
  5913  00231A  0E00               	movlw	high _Temp_Adc
  5914  00231C  6FA3               	movwf	(??_Temp_Convert+1)& (0+255),b
  5915  00231E  90D8               	bcf	status,0,c
  5916  002320  0100               	movlb	0	; () banked
  5917  002322  35A8               	rlcf	Temp_Convert@x& (0+255),w,b
  5918  002324  6ED9               	movwf	fsr2l,c
  5919  002326  0100               	movlb	0	; () banked
  5920  002328  35A9               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  5921  00232A  6EDA               	movwf	fsr2h,c
  5922  00232C  0100               	movlb	0	; () banked
  5923  00232E  51A2               	movf	??_Temp_Convert& (0+255),w,b
  5924  002330  26D9               	addwf	fsr2l,f,c
  5925  002332  0100               	movlb	0	; () banked
  5926  002334  51A3               	movf	(??_Temp_Convert+1)& (0+255),w,b
  5927  002336  22DA               	addwfc	fsr2h,f,c
  5928  002338  CFDE F023          	movff	postinc2,___awdiv@divisor
  5929  00233C  CFDD F024          	movff	postdec2,___awdiv@divisor+1
  5930  002340  0E03               	movlw	3
  5931  002342  6E22               	movwf	___awdiv@dividend+1,c
  5932  002344  6821               	setf	___awdiv@dividend,c
  5933  002346  EC9C  F01B         	call	___awdiv	;wreg free
  5934  00234A  0EFF               	movlw	255
  5935  00234C  2421               	addwf	?___awdiv,w,c
  5936  00234E  0100               	movlb	0	; () banked
  5937  002350  6FA4               	movwf	_Temp_Convert$1701& (0+255),b
  5938  002352  0EFF               	movlw	255
  5939  002354  2022               	addwfc	?___awdiv+1,w,c
  5940  002356  0100               	movlb	0	; () banked
  5941  002358  6FA5               	movwf	(_Temp_Convert$1701+1)& (0+255),b
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;Tempeture.c: 55: {
  5945                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5946  00235A  C0A4  F023         	movff	_Temp_Convert$1701,___awdiv@divisor
  5947  00235E  C0A5  F024         	movff	_Temp_Convert$1701+1,___awdiv@divisor+1
  5948  002362  0E27               	movlw	39
  5949  002364  6E22               	movwf	___awdiv@dividend+1,c
  5950  002366  0E10               	movlw	16
  5951  002368  6E21               	movwf	___awdiv@dividend,c
  5952  00236A  EC9C  F01B         	call	___awdiv	;wreg free
  5953  00236E  C021  F0A6         	movff	?___awdiv,_Temp_Convert$1702
  5954  002372  C022  F0A7         	movff	?___awdiv+1,_Temp_Convert$1702+1
  5955                           
  5956                           ;Tempeture.c: 55: {
  5957                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5958  002376  0E27               	movlw	39
  5959  002378  6E24               	movwf	___awdiv@divisor+1,c
  5960  00237A  0E10               	movlw	16
  5961  00237C  6E23               	movwf	___awdiv@divisor,c
  5962  00237E  C0A6  F021         	movff	_Temp_Convert$1702,___awdiv@dividend
  5963  002382  C0A7  F022         	movff	_Temp_Convert$1702+1,___awdiv@dividend+1
  5964  002386  EC9C  F01B         	call	___awdiv	;wreg free
  5965  00238A  C021  F029         	movff	?___awdiv,___awtoft@c
  5966  00238E  C022  F02A         	movff	?___awdiv+1,___awtoft@c+1
  5967  002392  ECFF  F01D         	call	___awtoft	;wreg free
  5968  002396  C029  F0AA         	movff	?___awtoft,Temp_Convert@steinhart
  5969  00239A  C02A  F0AB         	movff	?___awtoft+1,Temp_Convert@steinhart+1
  5970  00239E  C02B  F0AC         	movff	?___awtoft+2,Temp_Convert@steinhart+2
  5971                           
  5972                           ;Tempeture.c: 57: steinhart = log(steinhart);
  5973  0023A2  C0AA  F09D         	movff	Temp_Convert@steinhart,log@x
  5974  0023A6  C0AB  F09E         	movff	Temp_Convert@steinhart+1,log@x+1
  5975  0023AA  C0AC  F09F         	movff	Temp_Convert@steinhart+2,log@x+2
  5976  0023AE  EC86  F015         	call	_log	;wreg free
  5977  0023B2  C09D  F0AA         	movff	?_log,Temp_Convert@steinhart
  5978  0023B6  C09E  F0AB         	movff	?_log+1,Temp_Convert@steinhart+1
  5979  0023BA  C09F  F0AC         	movff	?_log+2,Temp_Convert@steinhart+2
  5980                           
  5981                           ;Tempeture.c: 58: steinhart /= 3950;
  5982  0023BE  C0AA  F060         	movff	Temp_Convert@steinhart,___ftdiv@f1
  5983  0023C2  C0AB  F061         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  5984  0023C6  C0AC  F062         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  5985  0023CA  0EE0               	movlw	224
  5986  0023CC  0100               	movlb	0	; () banked
  5987  0023CE  6F63               	movwf	___ftdiv@f2& (0+255),b
  5988  0023D0  0E76               	movlw	118
  5989  0023D2  0100               	movlb	0	; () banked
  5990  0023D4  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  5991  0023D6  0E45               	movlw	69
  5992  0023D8  0100               	movlb	0	; () banked
  5993  0023DA  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  5994  0023DC  ECF1  F016         	call	___ftdiv	;wreg free
  5995  0023E0  C060  F0AA         	movff	?___ftdiv,Temp_Convert@steinhart
  5996  0023E4  C061  F0AB         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  5997  0023E8  C062  F0AC         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  5998                           
  5999                           ;Tempeture.c: 59: steinhart += 1.0 / (25 + 273.15);
  6000  0023EC  C0AA  F085         	movff	Temp_Convert@steinhart,___ftadd@f1
  6001  0023F0  C0AB  F086         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  6002  0023F4  C0AC  F087         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  6003  0023F8  0ECF               	movlw	207
  6004  0023FA  0100               	movlb	0	; () banked
  6005  0023FC  6F88               	movwf	___ftadd@f2& (0+255),b
  6006  0023FE  0E5B               	movlw	91
  6007  002400  0100               	movlb	0	; () banked
  6008  002402  6F89               	movwf	(___ftadd@f2+1)& (0+255),b
  6009  002404  0E3B               	movlw	59
  6010  002406  0100               	movlb	0	; () banked
  6011  002408  6F8A               	movwf	(___ftadd@f2+2)& (0+255),b
  6012  00240A  EC3B  F010         	call	___ftadd	;wreg free
  6013  00240E  C085  F0AA         	movff	?___ftadd,Temp_Convert@steinhart
  6014  002412  C086  F0AB         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6015  002416  C087  F0AC         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6016                           
  6017                           ;Tempeture.c: 60: steinhart = 1.0 / steinhart;
  6018  00241A  0E00               	movlw	0
  6019  00241C  0100               	movlb	0	; () banked
  6020  00241E  6F60               	movwf	___ftdiv@f1& (0+255),b
  6021  002420  0E80               	movlw	128
  6022  002422  0100               	movlb	0	; () banked
  6023  002424  6F61               	movwf	(___ftdiv@f1+1)& (0+255),b
  6024  002426  0E3F               	movlw	63
  6025  002428  0100               	movlb	0	; () banked
  6026  00242A  6F62               	movwf	(___ftdiv@f1+2)& (0+255),b
  6027  00242C  C0AA  F063         	movff	Temp_Convert@steinhart,___ftdiv@f2
  6028  002430  C0AB  F064         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  6029  002434  C0AC  F065         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  6030  002438  ECF1  F016         	call	___ftdiv	;wreg free
  6031  00243C  C060  F0AA         	movff	?___ftdiv,Temp_Convert@steinhart
  6032  002440  C061  F0AB         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6033  002444  C062  F0AC         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6034                           
  6035                           ;Tempeture.c: 61: steinhart -= 273.15;
  6036  002448  C0AA  F091         	movff	Temp_Convert@steinhart,___ftsub@f1
  6037  00244C  C0AB  F092         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  6038  002450  C0AC  F093         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  6039  002454  0E93               	movlw	147
  6040  002456  0100               	movlb	0	; () banked
  6041  002458  6F94               	movwf	___ftsub@f2& (0+255),b
  6042  00245A  0E88               	movlw	136
  6043  00245C  0100               	movlb	0	; () banked
  6044  00245E  6F95               	movwf	(___ftsub@f2+1)& (0+255),b
  6045  002460  0E43               	movlw	67
  6046  002462  0100               	movlb	0	; () banked
  6047  002464  6F96               	movwf	(___ftsub@f2+2)& (0+255),b
  6048  002466  EC23  F01E         	call	___ftsub	;wreg free
  6049  00246A  C091  F0AA         	movff	?___ftsub,Temp_Convert@steinhart
  6050  00246E  C092  F0AB         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  6051  002472  C093  F0AC         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  6052                           
  6053                           ;Tempeture.c: 62: steinhart = (steinhart*1.800) + 32.00;
  6054  002476  0E66               	movlw	102
  6055  002478  0100               	movlb	0	; () banked
  6056  00247A  6F6F               	movwf	___ftmul@f2& (0+255),b
  6057  00247C  0EE6               	movlw	230
  6058  00247E  0100               	movlb	0	; () banked
  6059  002480  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  6060  002482  0E3F               	movlw	63
  6061  002484  0100               	movlb	0	; () banked
  6062  002486  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  6063  002488  C0AA  F06C         	movff	Temp_Convert@steinhart,___ftmul@f1
  6064  00248C  C0AB  F06D         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  6065  002490  C0AC  F06E         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  6066  002494  ECCB  F014         	call	___ftmul	;wreg free
  6067  002498  C06C  F085         	movff	?___ftmul,___ftadd@f1
  6068  00249C  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  6069  0024A0  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  6070  0024A4  0E00               	movlw	0
  6071  0024A6  0100               	movlb	0	; () banked
  6072  0024A8  6F88               	movwf	___ftadd@f2& (0+255),b
  6073  0024AA  0E00               	movlw	0
  6074  0024AC  0100               	movlb	0	; () banked
  6075  0024AE  6F89               	movwf	(___ftadd@f2+1)& (0+255),b
  6076  0024B0  0E42               	movlw	66
  6077  0024B2  0100               	movlb	0	; () banked
  6078  0024B4  6F8A               	movwf	(___ftadd@f2+2)& (0+255),b
  6079  0024B6  EC3B  F010         	call	___ftadd	;wreg free
  6080  0024BA  C085  F0AA         	movff	?___ftadd,Temp_Convert@steinhart
  6081  0024BE  C086  F0AB         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6082  0024C2  C087  F0AC         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6083                           
  6084                           ;Tempeture.c: 63: TmpTemp_DegF[x] = steinhart;
  6085  0024C6  C0A8  F029         	movff	Temp_Convert@x,___wmul@multiplier
  6086  0024CA  C0A9  F02A         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  6087  0024CE  0E00               	movlw	0
  6088  0024D0  6E2C               	movwf	___wmul@multiplicand+1,c
  6089  0024D2  0E03               	movlw	3
  6090  0024D4  6E2B               	movwf	___wmul@multiplicand,c
  6091  0024D6  EC09  F01F         	call	___wmul	;wreg free
  6092  0024DA  0101               	movlb	1	; () banked
  6093  0024DC  0EC8               	movlw	low _TmpTemp_DegF
  6094  0024DE  2429               	addwf	?___wmul,w,c
  6095  0024E0  6ED9               	movwf	fsr2l,c
  6096  0024E2  0101               	movlb	1	; () banked
  6097  0024E4  0E01               	movlw	high _TmpTemp_DegF
  6098  0024E6  202A               	addwfc	?___wmul+1,w,c
  6099  0024E8  6EDA               	movwf	fsr2h,c
  6100  0024EA  0100               	movlb	0	; () banked
  6101  0024EC  C0AA  FFDE         	movff	Temp_Convert@steinhart,postinc2
  6102  0024F0  0100               	movlb	0	; () banked
  6103  0024F2  C0AB  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  6104  0024F6  0100               	movlb	0	; () banked
  6105  0024F8  C0AC  FFDD         	movff	Temp_Convert@steinhart+2,postdec2
  6106                           
  6107                           ; BSR set to: 0
  6108  0024FC  0100               	movlb	0	; () banked
  6109  0024FE  4BA8               	infsnz	Temp_Convert@x& (0+255),f,b
  6110  002500  2BA9               	incf	(Temp_Convert@x+1)& (0+255),f,b
  6111  002502  D6FF               	goto	L8
  6112  002504                     l5392:
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;Tempeture.c: 64: }
  6116                           ;Tempeture.c: 65: Temp_Filter();
  6117  002504  EC85  F012         	call	_Temp_Filter	;wreg free
  6118  002508  0012               	return	
  6119  00250A                     __end_of_Temp_Convert:
  6120                           	opt stack 0
  6121                           tblptru	equ	0xFF8
  6122                           tblptrh	equ	0xFF7
  6123                           tblptrl	equ	0xFF6
  6124                           tablat	equ	0xFF5
  6125                           prodh	equ	0xFF4
  6126                           prodl	equ	0xFF3
  6127                           intcon	equ	0xFF2
  6128                           postinc0	equ	0xFEE
  6129                           wreg	equ	0xFE8
  6130                           indf2	equ	0xFDF
  6131                           postinc2	equ	0xFDE
  6132                           postdec2	equ	0xFDD
  6133                           fsr2h	equ	0xFDA
  6134                           fsr2l	equ	0xFD9
  6135                           status	equ	0xFD8
  6136                           
  6137 ;; *************** function _log *****************
  6138 ;; Defined at:
  6139 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\log.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;  x               3   61[BANK0 ] int 
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  exponent        2   64[BANK0 ] int 
  6144 ;; Return value:  Size  Location     Type
  6145 ;;                  3   61[BANK0 ] int 
  6146 ;; Registers used:
  6147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6148 ;; Tracked objects:
  6149 ;;		On entry : 0/0
  6150 ;;		On exit  : 0/0
  6151 ;;		Unchanged: 0/0
  6152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6153 ;;      Params:         0       3       0       0       0       0       0
  6154 ;;      Locals:         0       2       0       0       0       0       0
  6155 ;;      Temps:          0       0       0       0       0       0       0
  6156 ;;      Totals:         0       5       0       0       0       0       0
  6157 ;;Total ram usage:        5 bytes
  6158 ;; Hardware stack levels used:    1
  6159 ;; Hardware stack levels required when called:    7
  6160 ;; This function calls:
  6161 ;;		___awtoft
  6162 ;;		___ftadd
  6163 ;;		___ftmul
  6164 ;;		_eval_poly
  6165 ;;		_frexp
  6166 ;; This function is called by:
  6167 ;;		_Temp_Convert
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           	psect	text17
  6172  002B0C                     __ptext17:
  6173                           	opt stack 0
  6174  002B0C                     _log:
  6175                           	opt stack 22
  6176                           
  6177                           ;incstack = 0
  6178  002B0C  0100               	movlb	0	; () banked
  6179  002B0E  519F               	movf	(log@x+2)& (0+255),w,b
  6180  002B10  0A80               	xorlw	128
  6181  002B12  0F80               	addlw	128
  6182  002B14  E107               	bnz	u5135
  6183  002B16  0E00               	movlw	0
  6184  002B18  0100               	movlb	0	; () banked
  6185  002B1A  5D9E               	subwf	(log@x+1)& (0+255),w,b
  6186  002B1C  E103               	bnz	u5135
  6187  002B1E  0E00               	movlw	0
  6188  002B20  0100               	movlb	0	; () banked
  6189  002B22  5D9D               	subwf	log@x& (0+255),w,b
  6190  002B24                     u5135:
  6191  002B24  B0D8               	btfsc	status,0,c
  6192  002B26  D010               	goto	l4904
  6193                           
  6194                           ; BSR set to: 0
  6195  002B28  0E00               	movlw	0
  6196  002B2A  0100               	movlb	0	; () banked
  6197  002B2C  6FE3               	movwf	(_errno+1)& (0+255),b
  6198  002B2E  0E21               	movlw	33
  6199  002B30  0100               	movlb	0	; () banked
  6200  002B32  6FE2               	movwf	_errno& (0+255),b
  6201  002B34  0E00               	movlw	0
  6202  002B36  0100               	movlb	0	; () banked
  6203  002B38  6F9D               	movwf	?_log& (0+255),b
  6204  002B3A  0E00               	movlw	0
  6205  002B3C  0100               	movlb	0	; () banked
  6206  002B3E  6F9E               	movwf	(?_log+1)& (0+255),b
  6207  002B40  0E00               	movlw	0
  6208  002B42  0100               	movlb	0	; () banked
  6209  002B44  6F9F               	movwf	(?_log+2)& (0+255),b
  6210  002B46  0012               	return	
  6211  002B48                     l4904:
  6212                           
  6213                           ; BSR set to: 0
  6214  002B48  0E7F               	movlw	127
  6215  002B4A  0100               	movlb	0	; () banked
  6216  002B4C  159F               	andwf	(log@x+2)& (0+255),w,b
  6217  002B4E  0100               	movlb	0	; () banked
  6218  002B50  119E               	iorwf	(log@x+1)& (0+255),w,b
  6219  002B52  0100               	movlb	0	; () banked
  6220  002B54  119D               	iorwf	log@x& (0+255),w,b
  6221  002B56  A4D8               	btfss	status,2,c
  6222  002B58  D010               	goto	l4910
  6223                           
  6224                           ; BSR set to: 0
  6225  002B5A  0E00               	movlw	0
  6226  002B5C  0100               	movlb	0	; () banked
  6227  002B5E  6FE3               	movwf	(_errno+1)& (0+255),b
  6228  002B60  0E22               	movlw	34
  6229  002B62  0100               	movlb	0	; () banked
  6230  002B64  6FE2               	movwf	_errno& (0+255),b
  6231  002B66  0E00               	movlw	0
  6232  002B68  0100               	movlb	0	; () banked
  6233  002B6A  6F9D               	movwf	?_log& (0+255),b
  6234  002B6C  0E00               	movlw	0
  6235  002B6E  0100               	movlb	0	; () banked
  6236  002B70  6F9E               	movwf	(?_log+1)& (0+255),b
  6237  002B72  0E00               	movlw	0
  6238  002B74  0100               	movlb	0	; () banked
  6239  002B76  6F9F               	movwf	(?_log+2)& (0+255),b
  6240  002B78  0012               	return	
  6241  002B7A                     l4910:
  6242                           
  6243                           ; BSR set to: 0
  6244  002B7A  0E00               	movlw	0
  6245  002B7C  0100               	movlb	0	; () banked
  6246  002B7E  6F6F               	movwf	___ftmul@f2& (0+255),b
  6247  002B80  0E00               	movlw	0
  6248  002B82  0100               	movlb	0	; () banked
  6249  002B84  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  6250  002B86  0E40               	movlw	64
  6251  002B88  0100               	movlb	0	; () banked
  6252  002B8A  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  6253  002B8C  0100               	movlb	0	; () banked
  6254  002B8E  0E00               	movlw	high log@exponent
  6255  002B90  6E1F               	movwf	frexp@eptr+1,c
  6256  002B92  0100               	movlb	0	; () banked
  6257  002B94  0EA0               	movlw	low log@exponent
  6258  002B96  6E1E               	movwf	frexp@eptr,c
  6259  002B98  C09D  F01B         	movff	log@x,frexp@value
  6260  002B9C  C09E  F01C         	movff	log@x+1,frexp@value+1
  6261  002BA0  C09F  F01D         	movff	log@x+2,frexp@value+2
  6262  002BA4  ECEE  F01B         	call	_frexp	;wreg free
  6263  002BA8  C01B  F06C         	movff	?_frexp,___ftmul@f1
  6264  002BAC  C01C  F06D         	movff	?_frexp+1,___ftmul@f1+1
  6265  002BB0  C01D  F06E         	movff	?_frexp+2,___ftmul@f1+2
  6266  002BB4  ECCB  F014         	call	___ftmul	;wreg free
  6267  002BB8  C06C  F085         	movff	?___ftmul,___ftadd@f1
  6268  002BBC  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  6269  002BC0  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  6270  002BC4  0E00               	movlw	0
  6271  002BC6  0100               	movlb	0	; () banked
  6272  002BC8  6F88               	movwf	___ftadd@f2& (0+255),b
  6273  002BCA  0E80               	movlw	128
  6274  002BCC  0100               	movlb	0	; () banked
  6275  002BCE  6F89               	movwf	(___ftadd@f2+1)& (0+255),b
  6276  002BD0  0EBF               	movlw	191
  6277  002BD2  0100               	movlb	0	; () banked
  6278  002BD4  6F8A               	movwf	(___ftadd@f2+2)& (0+255),b
  6279  002BD6  EC3B  F010         	call	___ftadd	;wreg free
  6280  002BDA  C085  F09D         	movff	?___ftadd,log@x
  6281  002BDE  C086  F09E         	movff	?___ftadd+1,log@x+1
  6282  002BE2  C087  F09F         	movff	?___ftadd+2,log@x+2
  6283  002BE6  0100               	movlb	0	; () banked
  6284  002BE8  07A0               	decf	log@exponent& (0+255),f,b
  6285  002BEA  A0D8               	btfss	status,0,c
  6286  002BEC  07A1               	decf	(log@exponent+1)& (0+255),f,b
  6287                           
  6288                           ; BSR set to: 0
  6289  002BEE  C09D  F091         	movff	log@x,eval_poly@x
  6290  002BF2  C09E  F092         	movff	log@x+1,eval_poly@x+1
  6291  002BF6  C09F  F093         	movff	log@x+2,eval_poly@x+2
  6292  002BFA  0E06               	movlw	high log@coeff
  6293  002BFC  0100               	movlb	0	; () banked
  6294  002BFE  6F95               	movwf	(eval_poly@d+1)& (0+255),b
  6295  002C00  0E77               	movlw	low log@coeff
  6296  002C02  0100               	movlb	0	; () banked
  6297  002C04  6F94               	movwf	eval_poly@d& (0+255),b
  6298  002C06  0E00               	movlw	0
  6299  002C08  0100               	movlb	0	; () banked
  6300  002C0A  6F97               	movwf	(eval_poly@n+1)& (0+255),b
  6301  002C0C  0E08               	movlw	8
  6302  002C0E  0100               	movlb	0	; () banked
  6303  002C10  6F96               	movwf	eval_poly@n& (0+255),b
  6304  002C12  ECB1  F018         	call	_eval_poly	;wreg free
  6305  002C16  C091  F09D         	movff	?_eval_poly,log@x
  6306  002C1A  C092  F09E         	movff	?_eval_poly+1,log@x+1
  6307  002C1E  C093  F09F         	movff	?_eval_poly+2,log@x+2
  6308  002C22  0E72               	movlw	114
  6309  002C24  0100               	movlb	0	; () banked
  6310  002C26  6F6F               	movwf	___ftmul@f2& (0+255),b
  6311  002C28  0E31               	movlw	49
  6312  002C2A  0100               	movlb	0	; () banked
  6313  002C2C  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  6314  002C2E  0E3F               	movlw	63
  6315  002C30  0100               	movlb	0	; () banked
  6316  002C32  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  6317  002C34  C0A0  F029         	movff	log@exponent,___awtoft@c
  6318  002C38  C0A1  F02A         	movff	log@exponent+1,___awtoft@c+1
  6319  002C3C  ECFF  F01D         	call	___awtoft	;wreg free
  6320  002C40  C029  F06C         	movff	?___awtoft,___ftmul@f1
  6321  002C44  C02A  F06D         	movff	?___awtoft+1,___ftmul@f1+1
  6322  002C48  C02B  F06E         	movff	?___awtoft+2,___ftmul@f1+2
  6323  002C4C  ECCB  F014         	call	___ftmul	;wreg free
  6324  002C50  C06C  F085         	movff	?___ftmul,___ftadd@f1
  6325  002C54  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  6326  002C58  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  6327  002C5C  C09D  F088         	movff	log@x,___ftadd@f2
  6328  002C60  C09E  F089         	movff	log@x+1,___ftadd@f2+1
  6329  002C64  C09F  F08A         	movff	log@x+2,___ftadd@f2+2
  6330  002C68  EC3B  F010         	call	___ftadd	;wreg free
  6331  002C6C  C085  F09D         	movff	?___ftadd,?_log
  6332  002C70  C086  F09E         	movff	?___ftadd+1,?_log+1
  6333  002C74  C087  F09F         	movff	?___ftadd+2,?_log+2
  6334  002C78  0012               	return	
  6335  002C7A                     __end_of_log:
  6336                           	opt stack 0
  6337                           tblptru	equ	0xFF8
  6338                           tblptrh	equ	0xFF7
  6339                           tblptrl	equ	0xFF6
  6340                           tablat	equ	0xFF5
  6341                           prodh	equ	0xFF4
  6342                           prodl	equ	0xFF3
  6343                           intcon	equ	0xFF2
  6344                           postinc0	equ	0xFEE
  6345                           wreg	equ	0xFE8
  6346                           indf2	equ	0xFDF
  6347                           postinc2	equ	0xFDE
  6348                           postdec2	equ	0xFDD
  6349                           fsr2h	equ	0xFDA
  6350                           fsr2l	equ	0xFD9
  6351                           status	equ	0xFD8
  6352                           
  6353 ;; *************** function _frexp *****************
  6354 ;; Defined at:
  6355 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;  value           3   26[COMRAM] int 
  6358 ;;  eptr            2   29[COMRAM] PTR int 
  6359 ;;		 -> log@exponent(2), 
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;		None
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  3   26[COMRAM] PTR int 
  6364 ;; Registers used:
  6365 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6371 ;;      Params:         5       0       0       0       0       0       0
  6372 ;;      Locals:         0       0       0       0       0       0       0
  6373 ;;      Temps:          2       0       0       0       0       0       0
  6374 ;;      Totals:         7       0       0       0       0       0       0
  6375 ;;Total ram usage:        7 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    4
  6378 ;; This function calls:
  6379 ;;		Nothing
  6380 ;; This function is called by:
  6381 ;;		_log
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text18
  6386  0037DC                     __ptext18:
  6387                           	opt stack 0
  6388  0037DC                     _frexp:
  6389                           	opt stack 24
  6390                           
  6391                           ;incstack = 0
  6392  0037DC  0E7F               	movlw	127
  6393  0037DE  141D               	andwf	frexp@value+2,w,c
  6394  0037E0  101C               	iorwf	frexp@value+1,w,c
  6395  0037E2  101B               	iorwf	frexp@value,w,c
  6396  0037E4  A4D8               	btfss	status,2,c
  6397  0037E6  D00F               	goto	l3302
  6398  0037E8  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6399  0037EC  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6400  0037F0  0E00               	movlw	0
  6401  0037F2  6EDE               	movwf	postinc2,c
  6402  0037F4  0E00               	movlw	0
  6403  0037F6  6EDD               	movwf	postdec2,c
  6404  0037F8  0E00               	movlw	0
  6405  0037FA  6E1B               	movwf	?_frexp,c
  6406  0037FC  0E00               	movlw	0
  6407  0037FE  6E1C               	movwf	?_frexp+1,c
  6408  003800  0E00               	movlw	0
  6409  003802  6E1D               	movwf	?_frexp+2,c
  6410  003804  0012               	return	
  6411  003806                     l3302:
  6412  003806  501D               	movf	frexp@value+2,w,c
  6413  003808  0B7F               	andlw	127
  6414  00380A  6E20               	movwf	??_frexp& (0+255),c
  6415  00380C  6A21               	clrf	(??_frexp+1)& (0+255),c
  6416  00380E  90D8               	bcf	status,0,c
  6417  003810  3620               	rlcf	??_frexp,f,c
  6418  003812  3621               	rlcf	??_frexp+1,f,c
  6419  003814  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6420  003818  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6421  00381C  C020  FFDE         	movff	??_frexp,postinc2
  6422  003820  C021  FFDD         	movff	??_frexp+1,postdec2
  6423  003824  AE1C               	btfss	frexp@value+1,7,c
  6424  003826  D003               	goto	u2810
  6425  003828  6A20               	clrf	??_frexp& (0+255),c
  6426  00382A  2A20               	incf	??_frexp& (0+255),f,c
  6427  00382C  D001               	goto	u2818
  6428  00382E                     u2810:
  6429  00382E  6A20               	clrf	??_frexp& (0+255),c
  6430  003830                     u2818:
  6431  003830  5020               	movf	??_frexp,w,c
  6432  003832  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6433  003836  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6434  00383A  12DE               	iorwf	postinc2,f,c
  6435  00383C  0E00               	movlw	0
  6436  00383E  12DD               	iorwf	postdec2,f,c
  6437  003840  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6438  003844  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6439  003848  0E82               	movlw	130
  6440  00384A  26DE               	addwf	postinc2,f,c
  6441  00384C  0EFF               	movlw	255
  6442  00384E  22DD               	addwfc	postdec2,f,c
  6443  003850  801D               	bsf	frexp@value+2,0,c
  6444  003852  821D               	bsf	frexp@value+2,1,c
  6445  003854  841D               	bsf	frexp@value+2,2,c
  6446  003856  861D               	bsf	frexp@value+2,3,c
  6447  003858  881D               	bsf	frexp@value+2,4,c
  6448  00385A  8A1D               	bsf	frexp@value+2,5,c
  6449  00385C  9C1D               	bcf	frexp@value+2,6,c
  6450  00385E  9E1C               	bcf	frexp@value+1,7,c
  6451  003860  C01B  F01B         	movff	frexp@value,?_frexp
  6452  003864  C01C  F01C         	movff	frexp@value+1,?_frexp+1
  6453  003868  C01D  F01D         	movff	frexp@value+2,?_frexp+2
  6454  00386C  0012               	return	
  6455  00386E                     __end_of_frexp:
  6456                           	opt stack 0
  6457                           tblptru	equ	0xFF8
  6458                           tblptrh	equ	0xFF7
  6459                           tblptrl	equ	0xFF6
  6460                           tablat	equ	0xFF5
  6461                           prodh	equ	0xFF4
  6462                           prodl	equ	0xFF3
  6463                           intcon	equ	0xFF2
  6464                           postinc0	equ	0xFEE
  6465                           wreg	equ	0xFE8
  6466                           indf2	equ	0xFDF
  6467                           postinc2	equ	0xFDE
  6468                           postdec2	equ	0xFDD
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8
  6472                           
  6473 ;; *************** function _eval_poly *****************
  6474 ;; Defined at:
  6475 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\evalpoly.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  x               3   49[BANK0 ] PTR int 
  6478 ;;  d               2   52[BANK0 ] PTR const 
  6479 ;;		 -> log@coeff(27), 
  6480 ;;  n               2   54[BANK0 ] int 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  res             3   58[BANK0 ] int 
  6483 ;; Return value:  Size  Location     Type
  6484 ;;                  3   49[BANK0 ] int 
  6485 ;; Registers used:
  6486 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6487 ;; Tracked objects:
  6488 ;;		On entry : 0/0
  6489 ;;		On exit  : 0/0
  6490 ;;		Unchanged: 0/0
  6491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6492 ;;      Params:         0       7       0       0       0       0       0
  6493 ;;      Locals:         0       3       0       0       0       0       0
  6494 ;;      Temps:          0       2       0       0       0       0       0
  6495 ;;      Totals:         0      12       0       0       0       0       0
  6496 ;;Total ram usage:       12 bytes
  6497 ;; Hardware stack levels used:    1
  6498 ;; Hardware stack levels required when called:    6
  6499 ;; This function calls:
  6500 ;;		___ftadd
  6501 ;;		___ftmul
  6502 ;;		___wmul
  6503 ;; This function is called by:
  6504 ;;		_log
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           	psect	text19
  6509  003162                     __ptext19:
  6510                           	opt stack 0
  6511  003162                     _eval_poly:
  6512                           	opt stack 22
  6513                           
  6514                           ;incstack = 0
  6515  003162  C096  F029         	movff	eval_poly@n,___wmul@multiplier
  6516  003166  C097  F02A         	movff	eval_poly@n+1,___wmul@multiplier+1
  6517  00316A  0E00               	movlw	0
  6518  00316C  6E2C               	movwf	___wmul@multiplicand+1,c
  6519  00316E  0E03               	movlw	3
  6520  003170  6E2B               	movwf	___wmul@multiplicand,c
  6521  003172  EC09  F01F         	call	___wmul	;wreg free
  6522  003176  0100               	movlb	0	; () banked
  6523  003178  C094  F098         	movff	eval_poly@d,??_eval_poly
  6524  00317C  0100               	movlb	0	; () banked
  6525  00317E  C095  F099         	movff	eval_poly@d+1,??_eval_poly+1
  6526  003182  5029               	movf	?___wmul,w,c
  6527  003184  0100               	movlb	0	; () banked
  6528  003186  2798               	addwf	??_eval_poly& (0+255),f,b
  6529  003188  502A               	movf	?___wmul+1,w,c
  6530  00318A  0100               	movlb	0	; () banked
  6531  00318C  2399               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6532  00318E  C098  FFF6         	movff	??_eval_poly,tblptrl
  6533  003192  C099  FFF7         	movff	??_eval_poly+1,tblptrh
  6534  003196                     	if	0	;tblptru may be non-zero
  6535  003196                     	endif
  6536  003196                     	if	0	;tblptru may be non-zero
  6537  003196                     	endif
  6538  003196  0009               	tblrd		*+
  6539  003198  0100               	movlb	0	; () banked
  6540  00319A  CFF5 F09A          	movff	tablat,eval_poly@res
  6541  00319E  0009               	tblrd		*+
  6542  0031A0  0100               	movlb	0	; () banked
  6543  0031A2  CFF5 F09B          	movff	tablat,eval_poly@res+1
  6544  0031A6  000A               	tblrd		*-
  6545  0031A8  0100               	movlb	0	; () banked
  6546  0031AA  CFF5 F09C          	movff	tablat,eval_poly@res+2
  6547  0031AE  D046               	goto	l4842
  6548  0031B0                     l4840:
  6549                           
  6550                           ; BSR set to: 0
  6551  0031B0  C09A  F06F         	movff	eval_poly@res,___ftmul@f2
  6552  0031B4  C09B  F070         	movff	eval_poly@res+1,___ftmul@f2+1
  6553  0031B8  C09C  F071         	movff	eval_poly@res+2,___ftmul@f2+2
  6554  0031BC  C091  F06C         	movff	eval_poly@x,___ftmul@f1
  6555  0031C0  C092  F06D         	movff	eval_poly@x+1,___ftmul@f1+1
  6556  0031C4  C093  F06E         	movff	eval_poly@x+2,___ftmul@f1+2
  6557  0031C8  ECCB  F014         	call	___ftmul	;wreg free
  6558  0031CC  C06C  F085         	movff	?___ftmul,___ftadd@f1
  6559  0031D0  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  6560  0031D4  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  6561  0031D8  0E00               	movlw	0
  6562  0031DA  6E2C               	movwf	___wmul@multiplicand+1,c
  6563  0031DC  0E03               	movlw	3
  6564  0031DE  6E2B               	movwf	___wmul@multiplicand,c
  6565  0031E0  0100               	movlb	0	; () banked
  6566  0031E2  0796               	decf	eval_poly@n& (0+255),f,b
  6567  0031E4  A0D8               	btfss	status,0,c
  6568  0031E6  0797               	decf	(eval_poly@n+1)& (0+255),f,b
  6569  0031E8  C096  F029         	movff	eval_poly@n,___wmul@multiplier
  6570  0031EC  C097  F02A         	movff	eval_poly@n+1,___wmul@multiplier+1
  6571  0031F0  EC09  F01F         	call	___wmul	;wreg free
  6572  0031F4  0100               	movlb	0	; () banked
  6573  0031F6  C094  F098         	movff	eval_poly@d,??_eval_poly
  6574  0031FA  0100               	movlb	0	; () banked
  6575  0031FC  C095  F099         	movff	eval_poly@d+1,??_eval_poly+1
  6576  003200  5029               	movf	?___wmul,w,c
  6577  003202  0100               	movlb	0	; () banked
  6578  003204  2798               	addwf	??_eval_poly& (0+255),f,b
  6579  003206  502A               	movf	?___wmul+1,w,c
  6580  003208  0100               	movlb	0	; () banked
  6581  00320A  2399               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6582  00320C  C098  FFF6         	movff	??_eval_poly,tblptrl
  6583  003210  C099  FFF7         	movff	??_eval_poly+1,tblptrh
  6584  003214                     	if	0	;tblptru may be non-zero
  6585  003214                     	endif
  6586  003214                     	if	0	;tblptru may be non-zero
  6587  003214                     	endif
  6588  003214  0009               	tblrd		*+
  6589  003216  0100               	movlb	0	; () banked
  6590  003218  CFF5 F088          	movff	tablat,___ftadd@f2
  6591  00321C  0009               	tblrd		*+
  6592  00321E  0100               	movlb	0	; () banked
  6593  003220  CFF5 F089          	movff	tablat,___ftadd@f2+1
  6594  003224  000A               	tblrd		*-
  6595  003226  0100               	movlb	0	; () banked
  6596  003228  CFF5 F08A          	movff	tablat,___ftadd@f2+2
  6597  00322C  EC3B  F010         	call	___ftadd	;wreg free
  6598  003230  C085  F09A         	movff	?___ftadd,eval_poly@res
  6599  003234  C086  F09B         	movff	?___ftadd+1,eval_poly@res+1
  6600  003238  C087  F09C         	movff	?___ftadd+2,eval_poly@res+2
  6601  00323C                     l4842:
  6602  00323C  0100               	movlb	0	; () banked
  6603  00323E  5197               	movf	(eval_poly@n+1)& (0+255),w,b
  6604  003240  1196               	iorwf	eval_poly@n& (0+255),w,b
  6605  003242  A4D8               	btfss	status,2,c
  6606  003244  D7B5               	goto	l4840
  6607                           
  6608                           ; BSR set to: 0
  6609  003246  C09A  F091         	movff	eval_poly@res,?_eval_poly
  6610  00324A  C09B  F092         	movff	eval_poly@res+1,?_eval_poly+1
  6611  00324E  C09C  F093         	movff	eval_poly@res+2,?_eval_poly+2
  6612                           
  6613                           ; BSR set to: 0
  6614  003252  0012               	return	
  6615  003254                     __end_of_eval_poly:
  6616                           	opt stack 0
  6617                           tblptru	equ	0xFF8
  6618                           tblptrh	equ	0xFF7
  6619                           tblptrl	equ	0xFF6
  6620                           tablat	equ	0xFF5
  6621                           prodh	equ	0xFF4
  6622                           prodl	equ	0xFF3
  6623                           intcon	equ	0xFF2
  6624                           postinc0	equ	0xFEE
  6625                           wreg	equ	0xFE8
  6626                           indf2	equ	0xFDF
  6627                           postinc2	equ	0xFDE
  6628                           postdec2	equ	0xFDD
  6629                           fsr2h	equ	0xFDA
  6630                           fsr2l	equ	0xFD9
  6631                           status	equ	0xFD8
  6632                           
  6633 ;; *************** function ___awtoft *****************
  6634 ;; Defined at:
  6635 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;  c               2   40[COMRAM] int 
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;  sign            1   43[COMRAM] unsigned char 
  6640 ;; Return value:  Size  Location     Type
  6641 ;;                  3   40[COMRAM] float 
  6642 ;; Registers used:
  6643 ;;		wreg, status,2, status,0, prodl, cstack
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6649 ;;      Params:         3       0       0       0       0       0       0
  6650 ;;      Locals:         1       0       0       0       0       0       0
  6651 ;;      Temps:          0       0       0       0       0       0       0
  6652 ;;      Totals:         4       0       0       0       0       0       0
  6653 ;;Total ram usage:        4 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; Hardware stack levels required when called:    5
  6656 ;; This function calls:
  6657 ;;		___ftpack
  6658 ;; This function is called by:
  6659 ;;		_Temp_Convert
  6660 ;;		_log
  6661 ;; This function uses a non-reentrant model
  6662 ;;
  6663                           
  6664                           	psect	text20
  6665  003BFE                     __ptext20:
  6666                           	opt stack 0
  6667  003BFE                     ___awtoft:
  6668                           	opt stack 23
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;incstack = 0
  6672  003BFE  0E00               	movlw	0
  6673  003C00  6E2C               	movwf	___awtoft@sign,c
  6674  003C02  502A               	movf	___awtoft@c+1,w,c
  6675  003C04  0A80               	xorlw	128
  6676  003C06  6EF3               	movwf	prodl,c
  6677  003C08  0E80               	movlw	128
  6678  003C0A  5CF3               	subwf	prodl,w,c
  6679  003C0C  0E00               	movlw	0
  6680  003C0E  B4D8               	btfsc	status,2,c
  6681  003C10  5C29               	subwf	___awtoft@c,w,c
  6682  003C12  B0D8               	btfsc	status,0,c
  6683  003C14  D006               	goto	l4834
  6684  003C16  6C29               	negf	___awtoft@c,c
  6685  003C18  1E2A               	comf	___awtoft@c+1,f,c
  6686  003C1A  B0D8               	btfsc	status,0,c
  6687  003C1C  2A2A               	incf	___awtoft@c+1,f,c
  6688  003C1E  0E01               	movlw	1
  6689  003C20  6E2C               	movwf	___awtoft@sign,c
  6690  003C22                     l4834:
  6691  003C22  C029  F01B         	movff	___awtoft@c,___ftpack@arg
  6692  003C26  C02A  F01C         	movff	___awtoft@c+1,___ftpack@arg+1
  6693  003C2A  6A1D               	clrf	___ftpack@arg+2,c
  6694  003C2C  0E8E               	movlw	142
  6695  003C2E  6E1E               	movwf	___ftpack@exp,c
  6696  003C30  C02C  F01F         	movff	___awtoft@sign,___ftpack@sign
  6697  003C34  EC48  F01B         	call	___ftpack	;wreg free
  6698  003C38  C01B  F029         	movff	?___ftpack,?___awtoft
  6699  003C3C  C01C  F02A         	movff	?___ftpack+1,?___awtoft+1
  6700  003C40  C01D  F02B         	movff	?___ftpack+2,?___awtoft+2
  6701  003C44  0012               	return	
  6702  003C46                     __end_of___awtoft:
  6703                           	opt stack 0
  6704                           tblptru	equ	0xFF8
  6705                           tblptrh	equ	0xFF7
  6706                           tblptrl	equ	0xFF6
  6707                           tablat	equ	0xFF5
  6708                           prodh	equ	0xFF4
  6709                           prodl	equ	0xFF3
  6710                           intcon	equ	0xFF2
  6711                           postinc0	equ	0xFEE
  6712                           wreg	equ	0xFE8
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           fsr2h	equ	0xFDA
  6717                           fsr2l	equ	0xFD9
  6718                           status	equ	0xFD8
  6719                           
  6720 ;; *************** function ___ftsub *****************
  6721 ;; Defined at:
  6722 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;  f1              3   49[BANK0 ] float 
  6725 ;;  f2              3   52[BANK0 ] float 
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  3   49[BANK0 ] float 
  6730 ;; Registers used:
  6731 ;;		wreg, status,2, status,0, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6737 ;;      Params:         0       6       0       0       0       0       0
  6738 ;;      Locals:         0       0       0       0       0       0       0
  6739 ;;      Temps:          0       0       0       0       0       0       0
  6740 ;;      Totals:         0       6       0       0       0       0       0
  6741 ;;Total ram usage:        6 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    6
  6744 ;; This function calls:
  6745 ;;		___ftadd
  6746 ;; This function is called by:
  6747 ;;		_Temp_Convert
  6748 ;;		_printf
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           	psect	text21
  6753  003C46                     __ptext21:
  6754                           	opt stack 0
  6755  003C46                     ___ftsub:
  6756                           	opt stack 23
  6757                           
  6758                           ;incstack = 0
  6759  003C46  0E00               	movlw	0
  6760  003C48  0100               	movlb	0	; () banked
  6761  003C4A  1B94               	xorwf	___ftsub@f2& (0+255),f,b
  6762  003C4C  0E00               	movlw	0
  6763  003C4E  0100               	movlb	0	; () banked
  6764  003C50  1B95               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6765  003C52  0E80               	movlw	128
  6766  003C54  0100               	movlb	0	; () banked
  6767  003C56  1B96               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6768                           
  6769                           ; BSR set to: 0
  6770  003C58  C091  F085         	movff	___ftsub@f1,___ftadd@f1
  6771  003C5C  C092  F086         	movff	___ftsub@f1+1,___ftadd@f1+1
  6772  003C60  C093  F087         	movff	___ftsub@f1+2,___ftadd@f1+2
  6773  003C64  C094  F088         	movff	___ftsub@f2,___ftadd@f2
  6774  003C68  C095  F089         	movff	___ftsub@f2+1,___ftadd@f2+1
  6775  003C6C  C096  F08A         	movff	___ftsub@f2+2,___ftadd@f2+2
  6776  003C70  EC3B  F010         	call	___ftadd	;wreg free
  6777  003C74  C085  F091         	movff	?___ftadd,?___ftsub
  6778  003C78  C086  F092         	movff	?___ftadd+1,?___ftsub+1
  6779  003C7C  C087  F093         	movff	?___ftadd+2,?___ftsub+2
  6780  003C80  0012               	return	
  6781  003C82                     __end_of___ftsub:
  6782                           	opt stack 0
  6783                           tblptru	equ	0xFF8
  6784                           tblptrh	equ	0xFF7
  6785                           tblptrl	equ	0xFF6
  6786                           tablat	equ	0xFF5
  6787                           prodh	equ	0xFF4
  6788                           prodl	equ	0xFF3
  6789                           intcon	equ	0xFF2
  6790                           postinc0	equ	0xFEE
  6791                           wreg	equ	0xFE8
  6792                           indf2	equ	0xFDF
  6793                           postinc2	equ	0xFDE
  6794                           postdec2	equ	0xFDD
  6795                           fsr2h	equ	0xFDA
  6796                           fsr2l	equ	0xFD9
  6797                           status	equ	0xFD8
  6798                           
  6799 ;; *************** function ___awdiv *****************
  6800 ;; Defined at:
  6801 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  dividend        2   32[COMRAM] int 
  6804 ;;  divisor         2   34[COMRAM] int 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;  quotient        2   38[COMRAM] int 
  6807 ;;  sign            1   37[COMRAM] unsigned char 
  6808 ;;  counter         1   36[COMRAM] unsigned char 
  6809 ;; Return value:  Size  Location     Type
  6810 ;;                  2   32[COMRAM] int 
  6811 ;; Registers used:
  6812 ;;		wreg, status,2, status,0, prodl
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6818 ;;      Params:         4       0       0       0       0       0       0
  6819 ;;      Locals:         4       0       0       0       0       0       0
  6820 ;;      Temps:          0       0       0       0       0       0       0
  6821 ;;      Totals:         8       0       0       0       0       0       0
  6822 ;;Total ram usage:        8 bytes
  6823 ;; Hardware stack levels used:    1
  6824 ;; Hardware stack levels required when called:    4
  6825 ;; This function calls:
  6826 ;;		Nothing
  6827 ;; This function is called by:
  6828 ;;		_Temp_Convert
  6829 ;;		_fround
  6830 ;;		_scale
  6831 ;;		_printf
  6832 ;; This function uses a non-reentrant model
  6833 ;;
  6834                           
  6835                           	psect	text22
  6836  003738                     __ptext22:
  6837                           	opt stack 0
  6838  003738                     ___awdiv:
  6839                           	opt stack 24
  6840                           
  6841                           ;incstack = 0
  6842  003738  0E00               	movlw	0
  6843  00373A  6E26               	movwf	___awdiv@sign,c
  6844  00373C  5024               	movf	___awdiv@divisor+1,w,c
  6845  00373E  0A80               	xorlw	128
  6846  003740  6EF3               	movwf	prodl,c
  6847  003742  0E80               	movlw	128
  6848  003744  5CF3               	subwf	prodl,w,c
  6849  003746  0E00               	movlw	0
  6850  003748  B4D8               	btfsc	status,2,c
  6851  00374A  5C23               	subwf	___awdiv@divisor,w,c
  6852  00374C  B0D8               	btfsc	status,0,c
  6853  00374E  D006               	goto	l4754
  6854  003750  6C23               	negf	___awdiv@divisor,c
  6855  003752  1E24               	comf	___awdiv@divisor+1,f,c
  6856  003754  B0D8               	btfsc	status,0,c
  6857  003756  2A24               	incf	___awdiv@divisor+1,f,c
  6858  003758  0E01               	movlw	1
  6859  00375A  6E26               	movwf	___awdiv@sign,c
  6860  00375C                     l4754:
  6861  00375C  5022               	movf	___awdiv@dividend+1,w,c
  6862  00375E  0A80               	xorlw	128
  6863  003760  6EF3               	movwf	prodl,c
  6864  003762  0E80               	movlw	128
  6865  003764  5CF3               	subwf	prodl,w,c
  6866  003766  0E00               	movlw	0
  6867  003768  B4D8               	btfsc	status,2,c
  6868  00376A  5C21               	subwf	___awdiv@dividend,w,c
  6869  00376C  B0D8               	btfsc	status,0,c
  6870  00376E  D006               	goto	l4760
  6871  003770  6C21               	negf	___awdiv@dividend,c
  6872  003772  1E22               	comf	___awdiv@dividend+1,f,c
  6873  003774  B0D8               	btfsc	status,0,c
  6874  003776  2A22               	incf	___awdiv@dividend+1,f,c
  6875  003778  0E01               	movlw	1
  6876  00377A  1A26               	xorwf	___awdiv@sign,f,c
  6877  00377C                     l4760:
  6878  00377C  0E00               	movlw	0
  6879  00377E  6E28               	movwf	___awdiv@quotient+1,c
  6880  003780  0E00               	movlw	0
  6881  003782  6E27               	movwf	___awdiv@quotient,c
  6882  003784  5024               	movf	___awdiv@divisor+1,w,c
  6883  003786  1023               	iorwf	___awdiv@divisor,w,c
  6884  003788  B4D8               	btfsc	status,2,c
  6885  00378A  D01C               	goto	l4782
  6886  00378C  0E01               	movlw	1
  6887  00378E  6E25               	movwf	___awdiv@counter,c
  6888  003790  D004               	goto	l4768
  6889  003792                     l4766:
  6890  003792  90D8               	bcf	status,0,c
  6891  003794  3623               	rlcf	___awdiv@divisor,f,c
  6892  003796  3624               	rlcf	___awdiv@divisor+1,f,c
  6893  003798  2A25               	incf	___awdiv@counter,f,c
  6894  00379A                     l4768:
  6895  00379A  AE24               	btfss	___awdiv@divisor+1,7,c
  6896  00379C  D7FA               	goto	l4766
  6897  00379E                     l4770:
  6898  00379E  90D8               	bcf	status,0,c
  6899  0037A0  3627               	rlcf	___awdiv@quotient,f,c
  6900  0037A2  3628               	rlcf	___awdiv@quotient+1,f,c
  6901  0037A4  5023               	movf	___awdiv@divisor,w,c
  6902  0037A6  5C21               	subwf	___awdiv@dividend,w,c
  6903  0037A8  5024               	movf	___awdiv@divisor+1,w,c
  6904  0037AA  5822               	subwfb	___awdiv@dividend+1,w,c
  6905  0037AC  A0D8               	btfss	status,0,c
  6906  0037AE  D005               	goto	l4778
  6907  0037B0  5023               	movf	___awdiv@divisor,w,c
  6908  0037B2  5E21               	subwf	___awdiv@dividend,f,c
  6909  0037B4  5024               	movf	___awdiv@divisor+1,w,c
  6910  0037B6  5A22               	subwfb	___awdiv@dividend+1,f,c
  6911  0037B8  8027               	bsf	___awdiv@quotient,0,c
  6912  0037BA                     l4778:
  6913  0037BA  90D8               	bcf	status,0,c
  6914  0037BC  3224               	rrcf	___awdiv@divisor+1,f,c
  6915  0037BE  3223               	rrcf	___awdiv@divisor,f,c
  6916  0037C0  2E25               	decfsz	___awdiv@counter,f,c
  6917  0037C2  D7ED               	goto	l4770
  6918  0037C4                     l4782:
  6919  0037C4  5026               	movf	___awdiv@sign,w,c
  6920  0037C6  B4D8               	btfsc	status,2,c
  6921  0037C8  D004               	goto	l4786
  6922  0037CA  6C27               	negf	___awdiv@quotient,c
  6923  0037CC  1E28               	comf	___awdiv@quotient+1,f,c
  6924  0037CE  B0D8               	btfsc	status,0,c
  6925  0037D0  2A28               	incf	___awdiv@quotient+1,f,c
  6926  0037D2                     l4786:
  6927  0037D2  C027  F021         	movff	___awdiv@quotient,?___awdiv
  6928  0037D6  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
  6929  0037DA  0012               	return	
  6930  0037DC                     __end_of___awdiv:
  6931                           	opt stack 0
  6932                           tblptru	equ	0xFF8
  6933                           tblptrh	equ	0xFF7
  6934                           tblptrl	equ	0xFF6
  6935                           tablat	equ	0xFF5
  6936                           prodh	equ	0xFF4
  6937                           prodl	equ	0xFF3
  6938                           intcon	equ	0xFF2
  6939                           postinc0	equ	0xFEE
  6940                           wreg	equ	0xFE8
  6941                           indf2	equ	0xFDF
  6942                           postinc2	equ	0xFDE
  6943                           postdec2	equ	0xFDD
  6944                           fsr2h	equ	0xFDA
  6945                           fsr2l	equ	0xFD9
  6946                           status	equ	0xFD8
  6947                           
  6948 ;; *************** function _Temp_Filter *****************
  6949 ;; Defined at:
  6950 ;;		line 36 in file "Tempeture.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;		None
  6953 ;; Auto vars:     Size  Location     Type
  6954 ;;  x               2   49[BANK0 ] int 
  6955 ;; Return value:  Size  Location     Type
  6956 ;;		None               void
  6957 ;; Registers used:
  6958 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6959 ;; Tracked objects:
  6960 ;;		On entry : 0/0
  6961 ;;		On exit  : 0/0
  6962 ;;		Unchanged: 0/0
  6963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6964 ;;      Params:         0       0       0       0       0       0       0
  6965 ;;      Locals:         0       2       0       0       0       0       0
  6966 ;;      Temps:          0       0       0       0       0       0       0
  6967 ;;      Totals:         0       2       0       0       0       0       0
  6968 ;;Total ram usage:        2 bytes
  6969 ;; Hardware stack levels used:    1
  6970 ;; Hardware stack levels required when called:    6
  6971 ;; This function calls:
  6972 ;;		___ftadd
  6973 ;;		___ftmul
  6974 ;;		___wmul
  6975 ;; This function is called by:
  6976 ;;		_Temp_Convert
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           	psect	text23
  6981  00250A                     __ptext23:
  6982                           	opt stack 0
  6983  00250A                     _Temp_Filter:
  6984                           	opt stack 23
  6985                           
  6986                           ;Tempeture.c: 39: int x;
  6987                           ;Tempeture.c: 40: for(x = 0; x < 10; x++)
  6988                           
  6989                           ;incstack = 0
  6990  00250A  0E00               	movlw	0
  6991  00250C  0100               	movlb	0	; () banked
  6992  00250E  6F92               	movwf	(Temp_Filter@x+1)& (0+255),b
  6993  002510  0E00               	movlw	0
  6994  002512  0100               	movlb	0	; () banked
  6995  002514  6F91               	movwf	Temp_Filter@x& (0+255),b
  6996  002516                     
  6997                           ; BSR set to: 0
  6998  002516  0100               	movlb	0	; () banked
  6999  002518  5192               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7000  00251A  0A80               	xorlw	128
  7001  00251C  0F80               	addlw	-128
  7002  00251E  0E0A               	movlw	10
  7003  002520  B4D8               	btfsc	status,2,c
  7004  002522  5D91               	subwf	Temp_Filter@x& (0+255),w,b
  7005  002524  B0D8               	btfsc	status,0,c
  7006  002526  D077               	goto	l4886
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;Tempeture.c: 41: {
  7010                           ;Tempeture.c: 42: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  7011                           
  7012                           ; BSR set to: 0
  7013                           
  7014                           ; BSR set to: 0
  7015  002528  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  7016  00252C  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7017  002530  0E00               	movlw	0
  7018  002532  6E2C               	movwf	___wmul@multiplicand+1,c
  7019  002534  0E03               	movlw	3
  7020  002536  6E2B               	movwf	___wmul@multiplicand,c
  7021  002538  EC09  F01F         	call	___wmul	;wreg free
  7022  00253C  0101               	movlb	1	; () banked
  7023  00253E  0E8C               	movlw	low _Temp_DegF
  7024  002540  2429               	addwf	?___wmul,w,c
  7025  002542  6ED9               	movwf	fsr2l,c
  7026  002544  0101               	movlb	1	; () banked
  7027  002546  0E01               	movlw	high _Temp_DegF
  7028  002548  202A               	addwfc	?___wmul+1,w,c
  7029  00254A  6EDA               	movwf	fsr2h,c
  7030  00254C  0E48               	movlw	72
  7031  00254E  0100               	movlb	0	; () banked
  7032  002550  6F6F               	movwf	___ftmul@f2& (0+255),b
  7033  002552  0E61               	movlw	97
  7034  002554  0100               	movlb	0	; () banked
  7035  002556  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  7036  002558  0E3F               	movlw	63
  7037  00255A  0100               	movlb	0	; () banked
  7038  00255C  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  7039  00255E  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  7040  002562  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7041  002566  0E00               	movlw	0
  7042  002568  6E2C               	movwf	___wmul@multiplicand+1,c
  7043  00256A  0E03               	movlw	3
  7044  00256C  6E2B               	movwf	___wmul@multiplicand,c
  7045  00256E  EC09  F01F         	call	___wmul	;wreg free
  7046  002572  0101               	movlb	1	; () banked
  7047  002574  0EC8               	movlw	low _TmpTemp_DegF
  7048  002576  2429               	addwf	?___wmul,w,c
  7049  002578  6EE1               	movwf	fsr1l,c
  7050  00257A  0101               	movlb	1	; () banked
  7051  00257C  0E01               	movlw	high _TmpTemp_DegF
  7052  00257E  202A               	addwfc	?___wmul+1,w,c
  7053  002580  6EE2               	movwf	fsr1h,c
  7054  002582  0100               	movlb	0	; () banked
  7055  002584  CFE6 F06C          	movff	postinc1,___ftmul@f1
  7056  002588  0100               	movlb	0	; () banked
  7057  00258A  CFE6 F06D          	movff	postinc1,___ftmul@f1+1
  7058  00258E  0100               	movlb	0	; () banked
  7059  002590  CFE5 F06E          	movff	postdec1,___ftmul@f1+2
  7060  002594  ECCB  F014         	call	___ftmul	;wreg free
  7061  002598  C06C  F085         	movff	?___ftmul,___ftadd@f1
  7062  00259C  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  7063  0025A0  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  7064  0025A4  0EC3               	movlw	195
  7065  0025A6  0100               	movlb	0	; () banked
  7066  0025A8  6F6F               	movwf	___ftmul@f2& (0+255),b
  7067  0025AA  0EF5               	movlw	245
  7068  0025AC  0100               	movlb	0	; () banked
  7069  0025AE  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  7070  0025B0  0E3D               	movlw	61
  7071  0025B2  0100               	movlb	0	; () banked
  7072  0025B4  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  7073  0025B6  0E00               	movlw	0
  7074  0025B8  6E2C               	movwf	___wmul@multiplicand+1,c
  7075  0025BA  0E03               	movlw	3
  7076  0025BC  6E2B               	movwf	___wmul@multiplicand,c
  7077  0025BE  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  7078  0025C2  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7079  0025C6  EC09  F01F         	call	___wmul	;wreg free
  7080  0025CA  0101               	movlb	1	; () banked
  7081  0025CC  0E6E               	movlw	low _PrevTemp_DegF
  7082  0025CE  2429               	addwf	?___wmul,w,c
  7083  0025D0  6EE1               	movwf	fsr1l,c
  7084  0025D2  0101               	movlb	1	; () banked
  7085  0025D4  0E01               	movlw	high _PrevTemp_DegF
  7086  0025D6  202A               	addwfc	?___wmul+1,w,c
  7087  0025D8  6EE2               	movwf	fsr1h,c
  7088  0025DA  0100               	movlb	0	; () banked
  7089  0025DC  CFE6 F06C          	movff	postinc1,___ftmul@f1
  7090  0025E0  0100               	movlb	0	; () banked
  7091  0025E2  CFE6 F06D          	movff	postinc1,___ftmul@f1+1
  7092  0025E6  0100               	movlb	0	; () banked
  7093  0025E8  CFE5 F06E          	movff	postdec1,___ftmul@f1+2
  7094  0025EC  ECCB  F014         	call	___ftmul	;wreg free
  7095  0025F0  C06C  F088         	movff	?___ftmul,___ftadd@f2
  7096  0025F4  C06D  F089         	movff	?___ftmul+1,___ftadd@f2+1
  7097  0025F8  C06E  F08A         	movff	?___ftmul+2,___ftadd@f2+2
  7098  0025FC  EC3B  F010         	call	___ftadd	;wreg free
  7099  002600  C085  FFDE         	movff	?___ftadd,postinc2
  7100  002604  C086  FFDE         	movff	?___ftadd+1,postinc2
  7101  002608  C087  FFDD         	movff	?___ftadd+2,postdec2
  7102  00260C  52DD               	movf	postdec2,f,c
  7103  00260E  0100               	movlb	0	; () banked
  7104  002610  4B91               	infsnz	Temp_Filter@x& (0+255),f,b
  7105  002612  2B92               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7106  002614  D780               	goto	L9
  7107  002616                     l4886:
  7108                           
  7109                           ; BSR set to: 0
  7110                           ;Tempeture.c: 43: }
  7111                           ;Tempeture.c: 44: for(x = 0; x < 10; x++)
  7112  002616  0E00               	movlw	0
  7113  002618  0100               	movlb	0	; () banked
  7114  00261A  6F92               	movwf	(Temp_Filter@x+1)& (0+255),b
  7115  00261C  0E00               	movlw	0
  7116  00261E  0100               	movlb	0	; () banked
  7117  002620  6F91               	movwf	Temp_Filter@x& (0+255),b
  7118  002622                     
  7119                           ; BSR set to: 0
  7120  002622  0100               	movlb	0	; () banked
  7121  002624  5192               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7122  002626  0A80               	xorlw	128
  7123  002628  0F80               	addlw	-128
  7124  00262A  0E0A               	movlw	10
  7125  00262C  B4D8               	btfsc	status,2,c
  7126  00262E  5D91               	subwf	Temp_Filter@x& (0+255),w,b
  7127  002630  B0D8               	btfsc	status,0,c
  7128  002632  0012               	return	
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;Tempeture.c: 45: {
  7132                           ;Tempeture.c: 46: PrevTemp_DegF[x] = Temp_DegF[x];
  7133                           
  7134                           ; BSR set to: 0
  7135                           
  7136                           ; BSR set to: 0
  7137  002634  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  7138  002638  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7139  00263C  0E00               	movlw	0
  7140  00263E  6E2C               	movwf	___wmul@multiplicand+1,c
  7141  002640  0E03               	movlw	3
  7142  002642  6E2B               	movwf	___wmul@multiplicand,c
  7143  002644  EC09  F01F         	call	___wmul	;wreg free
  7144  002648  0101               	movlb	1	; () banked
  7145  00264A  0E8C               	movlw	low _Temp_DegF
  7146  00264C  2429               	addwf	?___wmul,w,c
  7147  00264E  6ED9               	movwf	fsr2l,c
  7148  002650  0101               	movlb	1	; () banked
  7149  002652  0E01               	movlw	high _Temp_DegF
  7150  002654  202A               	addwfc	?___wmul+1,w,c
  7151  002656  6EDA               	movwf	fsr2h,c
  7152  002658  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  7153  00265C  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7154  002660  0E00               	movlw	0
  7155  002662  6E2C               	movwf	___wmul@multiplicand+1,c
  7156  002664  0E03               	movlw	3
  7157  002666  6E2B               	movwf	___wmul@multiplicand,c
  7158  002668  EC09  F01F         	call	___wmul	;wreg free
  7159  00266C  0101               	movlb	1	; () banked
  7160  00266E  0E6E               	movlw	low _PrevTemp_DegF
  7161  002670  2429               	addwf	?___wmul,w,c
  7162  002672  6EE1               	movwf	fsr1l,c
  7163  002674  0101               	movlb	1	; () banked
  7164  002676  0E01               	movlw	high _PrevTemp_DegF
  7165  002678  202A               	addwfc	?___wmul+1,w,c
  7166  00267A  6EE2               	movwf	fsr1h,c
  7167  00267C  CFDE FFE6          	movff	postinc2,postinc1
  7168  002680  CFDE FFE6          	movff	postinc2,postinc1
  7169  002684  CFDE FFE5          	movff	postinc2,postdec1
  7170  002688  52E5               	movf	postdec1,f,c
  7171                           
  7172                           ; BSR set to: 1
  7173  00268A  0100               	movlb	0	; () banked
  7174  00268C  4B91               	infsnz	Temp_Filter@x& (0+255),f,b
  7175  00268E  2B92               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7176  002690  D7C8               	goto	L10
  7177  002692                     __end_of_Temp_Filter:
  7178                           	opt stack 0
  7179                           tblptru	equ	0xFF8
  7180                           tblptrh	equ	0xFF7
  7181                           tblptrl	equ	0xFF6
  7182                           tablat	equ	0xFF5
  7183                           prodh	equ	0xFF4
  7184                           prodl	equ	0xFF3
  7185                           intcon	equ	0xFF2
  7186                           postinc0	equ	0xFEE
  7187                           wreg	equ	0xFE8
  7188                           postinc1	equ	0xFE6
  7189                           postdec1	equ	0xFE5
  7190                           fsr1h	equ	0xFE2
  7191                           fsr1l	equ	0xFE1
  7192                           indf2	equ	0xFDF
  7193                           postinc2	equ	0xFDE
  7194                           postdec2	equ	0xFDD
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8
  7198                           
  7199 ;; *************** function _SYSTEM_Initialize *****************
  7200 ;; Defined at:
  7201 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;		None
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;		None               void
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, cstack
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7215 ;;      Params:         0       0       0       0       0       0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0
  7218 ;;      Totals:         0       0       0       0       0       0       0
  7219 ;;Total ram usage:        0 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    6
  7222 ;; This function calls:
  7223 ;;		_ADC_Initialize
  7224 ;;		_EUSART1_Initialize
  7225 ;;		_INTERRUPT_Initialize
  7226 ;;		_OSCILLATOR_Initialize
  7227 ;;		_PIN_MANAGER_Initialize
  7228 ;;		_TMR1_Initialize
  7229 ;; This function is called by:
  7230 ;;		_main
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           	psect	text24
  7235  003E7A                     __ptext24:
  7236                           	opt stack 0
  7237  003E7A                     _SYSTEM_Initialize:
  7238                           	opt stack 24
  7239                           
  7240                           ;mcc.c: 114: OSCILLATOR_Initialize();
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;incstack = 0
  7244  003E7A  EC85  F01F         	call	_OSCILLATOR_Initialize	;wreg free
  7245                           
  7246                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7247  003E7E  ECD8  F01D         	call	_PIN_MANAGER_Initialize	;wreg free
  7248                           
  7249                           ;mcc.c: 116: INTERRUPT_Initialize();
  7250  003E82  EC8C  F01F         	call	_INTERRUPT_Initialize	;wreg free
  7251                           
  7252                           ;mcc.c: 117: ADC_Initialize();
  7253  003E86  EC57  F01F         	call	_ADC_Initialize	;wreg free
  7254                           
  7255                           ;mcc.c: 118: EUSART1_Initialize();
  7256  003E8A  EC41  F01E         	call	_EUSART1_Initialize	;wreg free
  7257                           
  7258                           ;mcc.c: 119: TMR1_Initialize();
  7259  003E8E  EC1C  F01F         	call	_TMR1_Initialize	;wreg free
  7260  003E92  0012               	return	
  7261  003E94                     __end_of_SYSTEM_Initialize:
  7262                           	opt stack 0
  7263                           tblptru	equ	0xFF8
  7264                           tblptrh	equ	0xFF7
  7265                           tblptrl	equ	0xFF6
  7266                           tablat	equ	0xFF5
  7267                           prodh	equ	0xFF4
  7268                           prodl	equ	0xFF3
  7269                           intcon	equ	0xFF2
  7270                           postinc0	equ	0xFEE
  7271                           wreg	equ	0xFE8
  7272                           postinc1	equ	0xFE6
  7273                           postdec1	equ	0xFE5
  7274                           fsr1h	equ	0xFE2
  7275                           fsr1l	equ	0xFE1
  7276                           indf2	equ	0xFDF
  7277                           postinc2	equ	0xFDE
  7278                           postdec2	equ	0xFDD
  7279                           fsr2h	equ	0xFDA
  7280                           fsr2l	equ	0xFD9
  7281                           status	equ	0xFD8
  7282                           
  7283 ;; *************** function _TMR1_Initialize *****************
  7284 ;; Defined at:
  7285 ;;		line 16 in file "mcc_generated_files/tmr1.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;		None
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;		None
  7290 ;; Return value:  Size  Location     Type
  7291 ;;		None               void
  7292 ;; Registers used:
  7293 ;;		wreg, status,2, cstack
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7299 ;;      Params:         0       0       0       0       0       0       0
  7300 ;;      Locals:         0       0       0       0       0       0       0
  7301 ;;      Temps:          0       0       0       0       0       0       0
  7302 ;;      Totals:         0       0       0       0       0       0       0
  7303 ;;Total ram usage:        0 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:    5
  7306 ;; This function calls:
  7307 ;;		_TMR1_StartTimer
  7308 ;; This function is called by:
  7309 ;;		_SYSTEM_Initialize
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           	psect	text25
  7314  003E38                     __ptext25:
  7315                           	opt stack 0
  7316  003E38                     _TMR1_Initialize:
  7317                           	opt stack 24
  7318                           
  7319                           ;tmr1.c: 21: T1CON = 0x30;
  7320                           
  7321                           ;incstack = 0
  7322  003E38  0E30               	movlw	48
  7323  003E3A  6ECD               	movwf	4045,c	;volatile
  7324                           
  7325                           ;tmr1.c: 24: T1GCON = 0x00;
  7326  003E3C  0E00               	movlw	0
  7327  003E3E  6ECC               	movwf	4044,c	;volatile
  7328                           
  7329                           ;tmr1.c: 27: TMR1H = 0x0B;
  7330  003E40  0E0B               	movlw	11
  7331  003E42  6ECF               	movwf	4047,c	;volatile
  7332                           
  7333                           ;tmr1.c: 30: TMR1L = 0xDC;
  7334  003E44  0EDC               	movlw	220
  7335  003E46  6ECE               	movwf	4046,c	;volatile
  7336                           
  7337                           ;tmr1.c: 33: timer1ReloadVal=TMR1;
  7338  003E48  CFCE F043          	movff	4046,_timer1ReloadVal	;volatile
  7339  003E4C  CFCF F044          	movff	4047,_timer1ReloadVal+1	;volatile
  7340                           
  7341                           ;tmr1.c: 36: PIR1bits.TMR1IF = 0;
  7342  003E50  909E               	bcf	3998,0,c	;volatile
  7343                           
  7344                           ;tmr1.c: 39: PIE1bits.TMR1IE = 1;
  7345  003E52  809D               	bsf	3997,0,c	;volatile
  7346                           
  7347                           ;tmr1.c: 42: TMR1_StartTimer();
  7348  003E54  EC97  F01F         	call	_TMR1_StartTimer	;wreg free
  7349  003E58  0012               	return	
  7350  003E5A                     __end_of_TMR1_Initialize:
  7351                           	opt stack 0
  7352                           tblptru	equ	0xFF8
  7353                           tblptrh	equ	0xFF7
  7354                           tblptrl	equ	0xFF6
  7355                           tablat	equ	0xFF5
  7356                           prodh	equ	0xFF4
  7357                           prodl	equ	0xFF3
  7358                           intcon	equ	0xFF2
  7359                           postinc0	equ	0xFEE
  7360                           wreg	equ	0xFE8
  7361                           postinc1	equ	0xFE6
  7362                           postdec1	equ	0xFE5
  7363                           fsr1h	equ	0xFE2
  7364                           fsr1l	equ	0xFE1
  7365                           indf2	equ	0xFDF
  7366                           postinc2	equ	0xFDE
  7367                           postdec2	equ	0xFDD
  7368                           fsr2h	equ	0xFDA
  7369                           fsr2l	equ	0xFD9
  7370                           status	equ	0xFD8
  7371                           
  7372 ;; *************** function _TMR1_StartTimer *****************
  7373 ;; Defined at:
  7374 ;;		line 45 in file "mcc_generated_files/tmr1.c"
  7375 ;; Parameters:    Size  Location     Type
  7376 ;;		None
  7377 ;; Auto vars:     Size  Location     Type
  7378 ;;		None
  7379 ;; Return value:  Size  Location     Type
  7380 ;;		None               void
  7381 ;; Registers used:
  7382 ;;		None
  7383 ;; Tracked objects:
  7384 ;;		On entry : 0/0
  7385 ;;		On exit  : 0/0
  7386 ;;		Unchanged: 0/0
  7387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7388 ;;      Params:         0       0       0       0       0       0       0
  7389 ;;      Locals:         0       0       0       0       0       0       0
  7390 ;;      Temps:          0       0       0       0       0       0       0
  7391 ;;      Totals:         0       0       0       0       0       0       0
  7392 ;;Total ram usage:        0 bytes
  7393 ;; Hardware stack levels used:    1
  7394 ;; Hardware stack levels required when called:    4
  7395 ;; This function calls:
  7396 ;;		Nothing
  7397 ;; This function is called by:
  7398 ;;		_TMR1_Initialize
  7399 ;; This function uses a non-reentrant model
  7400 ;;
  7401                           
  7402                           	psect	text26
  7403  003F2E                     __ptext26:
  7404                           	opt stack 0
  7405  003F2E                     _TMR1_StartTimer:
  7406                           	opt stack 24
  7407                           
  7408                           ;tmr1.c: 48: T1CONbits.TMR1ON = 1;
  7409                           
  7410                           ;incstack = 0
  7411  003F2E  80CD               	bsf	4045,0,c	;volatile
  7412  003F30  0012               	return	
  7413  003F32                     __end_of_TMR1_StartTimer:
  7414                           	opt stack 0
  7415                           tblptru	equ	0xFF8
  7416                           tblptrh	equ	0xFF7
  7417                           tblptrl	equ	0xFF6
  7418                           tablat	equ	0xFF5
  7419                           prodh	equ	0xFF4
  7420                           prodl	equ	0xFF3
  7421                           intcon	equ	0xFF2
  7422                           postinc0	equ	0xFEE
  7423                           wreg	equ	0xFE8
  7424                           postinc1	equ	0xFE6
  7425                           postdec1	equ	0xFE5
  7426                           fsr1h	equ	0xFE2
  7427                           fsr1l	equ	0xFE1
  7428                           indf2	equ	0xFDF
  7429                           postinc2	equ	0xFDE
  7430                           postdec2	equ	0xFDD
  7431                           fsr2h	equ	0xFDA
  7432                           fsr2l	equ	0xFD9
  7433                           status	equ	0xFD8
  7434                           
  7435 ;; *************** function _PIN_MANAGER_Initialize *****************
  7436 ;; Defined at:
  7437 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;		None
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;		None
  7442 ;; Return value:  Size  Location     Type
  7443 ;;		None               void
  7444 ;; Registers used:
  7445 ;;		wreg, status,2
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/0
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7451 ;;      Params:         0       0       0       0       0       0       0
  7452 ;;      Locals:         0       0       0       0       0       0       0
  7453 ;;      Temps:          0       0       0       0       0       0       0
  7454 ;;      Totals:         0       0       0       0       0       0       0
  7455 ;;Total ram usage:        0 bytes
  7456 ;; Hardware stack levels used:    1
  7457 ;; Hardware stack levels required when called:    4
  7458 ;; This function calls:
  7459 ;;		Nothing
  7460 ;; This function is called by:
  7461 ;;		_SYSTEM_Initialize
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           	psect	text27
  7466  003BB0                     __ptext27:
  7467                           	opt stack 0
  7468  003BB0                     _PIN_MANAGER_Initialize:
  7469                           	opt stack 25
  7470                           
  7471                           ;pin_manager.c: 8: LATA = 0x00;
  7472                           
  7473                           ;incstack = 0
  7474  003BB0  0E00               	movlw	0
  7475  003BB2  6E89               	movwf	3977,c	;volatile
  7476                           
  7477                           ;pin_manager.c: 9: TRISA = 0xAE;
  7478  003BB4  0EAE               	movlw	174
  7479  003BB6  6E92               	movwf	3986,c	;volatile
  7480                           
  7481                           ;pin_manager.c: 10: ANSELA = 0x2E;
  7482  003BB8  0E2E               	movlw	46
  7483  003BBA  010F               	movlb	15	; () banked
  7484  003BBC  6F38               	movwf	56,b	;volatile
  7485                           
  7486                           ;pin_manager.c: 12: LATB = 0x00;
  7487  003BBE  0E00               	movlw	0
  7488  003BC0  6E8A               	movwf	3978,c	;volatile
  7489                           
  7490                           ;pin_manager.c: 13: TRISB = 0xF4;
  7491  003BC2  0EF4               	movlw	244
  7492  003BC4  6E93               	movwf	3987,c	;volatile
  7493                           
  7494                           ;pin_manager.c: 14: ANSELB = 0x34;
  7495  003BC6  0E34               	movlw	52
  7496  003BC8  010F               	movlb	15	; () banked
  7497  003BCA  6F39               	movwf	57,b	;volatile
  7498                           
  7499                           ;pin_manager.c: 15: WPUB = 0x00;
  7500  003BCC  0E00               	movlw	0
  7501  003BCE  6E61               	movwf	3937,c	;volatile
  7502                           
  7503                           ;pin_manager.c: 17: LATC = 0x08;
  7504  003BD0  0E08               	movlw	8
  7505  003BD2  6E8B               	movwf	3979,c	;volatile
  7506                           
  7507                           ;pin_manager.c: 18: TRISC = 0xC4;
  7508  003BD4  0EC4               	movlw	196
  7509  003BD6  6E94               	movwf	3988,c	;volatile
  7510                           
  7511                           ;pin_manager.c: 19: ANSELC = 0x04;
  7512  003BD8  0E04               	movlw	4
  7513  003BDA  010F               	movlb	15	; () banked
  7514  003BDC  6F3A               	movwf	58,b	;volatile
  7515                           
  7516                           ;pin_manager.c: 21: LATD = 0x00;
  7517  003BDE  0E00               	movlw	0
  7518  003BE0  6E8C               	movwf	3980,c	;volatile
  7519                           
  7520                           ;pin_manager.c: 22: TRISD = 0xD1;
  7521  003BE2  0ED1               	movlw	209
  7522  003BE4  6E95               	movwf	3989,c	;volatile
  7523                           
  7524                           ;pin_manager.c: 23: ANSELD = 0xD1;
  7525  003BE6  0ED1               	movlw	209
  7526  003BE8  010F               	movlb	15	; () banked
  7527  003BEA  6F3B               	movwf	59,b	;volatile
  7528                           
  7529                           ;pin_manager.c: 25: LATE = 0x00;
  7530  003BEC  0E00               	movlw	0
  7531  003BEE  6E8D               	movwf	3981,c	;volatile
  7532                           
  7533                           ;pin_manager.c: 26: TRISE = 0x05;
  7534  003BF0  0E05               	movlw	5
  7535  003BF2  6E96               	movwf	3990,c	;volatile
  7536                           
  7537                           ;pin_manager.c: 27: ANSELE = 0x05;
  7538  003BF4  0E05               	movlw	5
  7539  003BF6  010F               	movlb	15	; () banked
  7540  003BF8  6F3C               	movwf	60,b	;volatile
  7541                           
  7542                           ; BSR set to: 15
  7543                           ;pin_manager.c: 29: INTCON2bits.nRBPU = 0x01;
  7544  003BFA  8EF1               	bsf	intcon2,7,c	;volatile
  7545                           
  7546                           ; BSR set to: 15
  7547  003BFC  0012               	return	
  7548  003BFE                     __end_of_PIN_MANAGER_Initialize:
  7549                           	opt stack 0
  7550                           tblptru	equ	0xFF8
  7551                           tblptrh	equ	0xFF7
  7552                           tblptrl	equ	0xFF6
  7553                           tablat	equ	0xFF5
  7554                           prodh	equ	0xFF4
  7555                           prodl	equ	0xFF3
  7556                           intcon	equ	0xFF2
  7557                           intcon2	equ	0xFF1
  7558                           postinc0	equ	0xFEE
  7559                           wreg	equ	0xFE8
  7560                           postinc1	equ	0xFE6
  7561                           postdec1	equ	0xFE5
  7562                           fsr1h	equ	0xFE2
  7563                           fsr1l	equ	0xFE1
  7564                           indf2	equ	0xFDF
  7565                           postinc2	equ	0xFDE
  7566                           postdec2	equ	0xFDD
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function _OSCILLATOR_Initialize *****************
  7572 ;; Defined at:
  7573 ;;		line 122 in file "mcc_generated_files/mcc.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;		None
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;		None
  7578 ;; Return value:  Size  Location     Type
  7579 ;;		None               void
  7580 ;; Registers used:
  7581 ;;		wreg, status,2
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7587 ;;      Params:         0       0       0       0       0       0       0
  7588 ;;      Locals:         0       0       0       0       0       0       0
  7589 ;;      Temps:          0       0       0       0       0       0       0
  7590 ;;      Totals:         0       0       0       0       0       0       0
  7591 ;;Total ram usage:        0 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    4
  7594 ;; This function calls:
  7595 ;;		Nothing
  7596 ;; This function is called by:
  7597 ;;		_SYSTEM_Initialize
  7598 ;; This function uses a non-reentrant model
  7599 ;;
  7600                           
  7601                           	psect	text28
  7602  003F0A                     __ptext28:
  7603                           	opt stack 0
  7604  003F0A                     _OSCILLATOR_Initialize:
  7605                           	opt stack 25
  7606                           
  7607                           ;mcc.c: 125: OSCCON = 0x62;
  7608                           
  7609                           ; BSR set to: 15
  7610                           ;incstack = 0
  7611  003F0A  0E62               	movlw	98
  7612  003F0C  6ED3               	movwf	4051,c	;volatile
  7613                           
  7614                           ;mcc.c: 127: OSCCON2 = 0x04;
  7615  003F0E  0E04               	movlw	4
  7616  003F10  6ED2               	movwf	4050,c	;volatile
  7617                           
  7618                           ;mcc.c: 129: OSCTUNE = 0x00;
  7619  003F12  0E00               	movlw	0
  7620  003F14  6E9B               	movwf	3995,c	;volatile
  7621  003F16  0012               	return	
  7622  003F18                     __end_of_OSCILLATOR_Initialize:
  7623                           	opt stack 0
  7624                           tblptru	equ	0xFF8
  7625                           tblptrh	equ	0xFF7
  7626                           tblptrl	equ	0xFF6
  7627                           tablat	equ	0xFF5
  7628                           prodh	equ	0xFF4
  7629                           prodl	equ	0xFF3
  7630                           intcon	equ	0xFF2
  7631                           intcon2	equ	0xFF1
  7632                           postinc0	equ	0xFEE
  7633                           wreg	equ	0xFE8
  7634                           postinc1	equ	0xFE6
  7635                           postdec1	equ	0xFE5
  7636                           fsr1h	equ	0xFE2
  7637                           fsr1l	equ	0xFE1
  7638                           indf2	equ	0xFDF
  7639                           postinc2	equ	0xFDE
  7640                           postdec2	equ	0xFDD
  7641                           fsr2h	equ	0xFDA
  7642                           fsr2l	equ	0xFD9
  7643                           status	equ	0xFD8
  7644                           
  7645 ;; *************** function _INTERRUPT_Initialize *****************
  7646 ;; Defined at:
  7647 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;		None
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;		None
  7652 ;; Return value:  Size  Location     Type
  7653 ;;		None               void
  7654 ;; Registers used:
  7655 ;;		None
  7656 ;; Tracked objects:
  7657 ;;		On entry : 0/0
  7658 ;;		On exit  : 0/0
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7661 ;;      Params:         0       0       0       0       0       0       0
  7662 ;;      Locals:         0       0       0       0       0       0       0
  7663 ;;      Temps:          0       0       0       0       0       0       0
  7664 ;;      Totals:         0       0       0       0       0       0       0
  7665 ;;Total ram usage:        0 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    4
  7668 ;; This function calls:
  7669 ;;		Nothing
  7670 ;; This function is called by:
  7671 ;;		_SYSTEM_Initialize
  7672 ;; This function uses a non-reentrant model
  7673 ;;
  7674                           
  7675                           	psect	text29
  7676  003F18                     __ptext29:
  7677                           	opt stack 0
  7678  003F18                     _INTERRUPT_Initialize:
  7679                           	opt stack 25
  7680                           
  7681                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  7682                           
  7683                           ;incstack = 0
  7684  003F18  9ED0               	bcf	4048,7,c	;volatile
  7685                           
  7686                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  7687  003F1A  9A9F               	bcf	3999,5,c	;volatile
  7688                           
  7689                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  7690  003F1C  9C9F               	bcf	3999,6,c	;volatile
  7691                           
  7692                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  7693  003F1E  909F               	bcf	3999,0,c	;volatile
  7694                           
  7695                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  7696  003F20  989F               	bcf	3999,4,c	;volatile
  7697  003F22  0012               	return	
  7698  003F24                     __end_of_INTERRUPT_Initialize:
  7699                           	opt stack 0
  7700                           tblptru	equ	0xFF8
  7701                           tblptrh	equ	0xFF7
  7702                           tblptrl	equ	0xFF6
  7703                           tablat	equ	0xFF5
  7704                           prodh	equ	0xFF4
  7705                           prodl	equ	0xFF3
  7706                           intcon	equ	0xFF2
  7707                           intcon2	equ	0xFF1
  7708                           postinc0	equ	0xFEE
  7709                           wreg	equ	0xFE8
  7710                           postinc1	equ	0xFE6
  7711                           postdec1	equ	0xFE5
  7712                           fsr1h	equ	0xFE2
  7713                           fsr1l	equ	0xFE1
  7714                           indf2	equ	0xFDF
  7715                           postinc2	equ	0xFDE
  7716                           postdec2	equ	0xFDD
  7717                           fsr2h	equ	0xFDA
  7718                           fsr2l	equ	0xFD9
  7719                           status	equ	0xFD8
  7720                           
  7721 ;; *************** function _EUSART1_Initialize *****************
  7722 ;; Defined at:
  7723 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  7724 ;; Parameters:    Size  Location     Type
  7725 ;;		None
  7726 ;; Auto vars:     Size  Location     Type
  7727 ;;		None
  7728 ;; Return value:  Size  Location     Type
  7729 ;;		None               void
  7730 ;; Registers used:
  7731 ;;		wreg, status,2
  7732 ;; Tracked objects:
  7733 ;;		On entry : 0/0
  7734 ;;		On exit  : 0/0
  7735 ;;		Unchanged: 0/0
  7736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7737 ;;      Params:         0       0       0       0       0       0       0
  7738 ;;      Locals:         0       0       0       0       0       0       0
  7739 ;;      Temps:          0       0       0       0       0       0       0
  7740 ;;      Totals:         0       0       0       0       0       0       0
  7741 ;;Total ram usage:        0 bytes
  7742 ;; Hardware stack levels used:    1
  7743 ;; Hardware stack levels required when called:    4
  7744 ;; This function calls:
  7745 ;;		Nothing
  7746 ;; This function is called by:
  7747 ;;		_SYSTEM_Initialize
  7748 ;; This function uses a non-reentrant model
  7749 ;;
  7750                           
  7751                           	psect	text30
  7752  003C82                     __ptext30:
  7753                           	opt stack 0
  7754  003C82                     _EUSART1_Initialize:
  7755                           	opt stack 25
  7756                           
  7757                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  7758                           
  7759                           ;incstack = 0
  7760  003C82  9A9D               	bcf	3997,5,c	;volatile
  7761                           
  7762                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  7763  003C84  989D               	bcf	3997,4,c	;volatile
  7764                           
  7765                           ;eusart1.c: 85: BAUD1CON = 0x48;
  7766  003C86  0E48               	movlw	72
  7767  003C88  6EB8               	movwf	4024,c	;volatile
  7768                           
  7769                           ;eusart1.c: 88: RC1STA = 0x98;
  7770  003C8A  0E98               	movlw	152
  7771  003C8C  6EAB               	movwf	4011,c	;volatile
  7772                           
  7773                           ;eusart1.c: 91: TX1STA = 0x26;
  7774  003C8E  0E26               	movlw	38
  7775  003C90  6EAC               	movwf	4012,c	;volatile
  7776                           
  7777                           ;eusart1.c: 94: SPBRG1 = 0x22;
  7778  003C92  0E22               	movlw	34
  7779  003C94  6EAF               	movwf	4015,c	;volatile
  7780                           
  7781                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  7782  003C96  0E00               	movlw	0
  7783  003C98  6EB0               	movwf	4016,c	;volatile
  7784                           
  7785                           ;eusart1.c: 100: TXREG1 = 0x00;
  7786  003C9A  0E00               	movlw	0
  7787  003C9C  6EAD               	movwf	4013,c	;volatile
  7788                           
  7789                           ;eusart1.c: 103: RCREG1 = 0x00;
  7790  003C9E  0E00               	movlw	0
  7791  003CA0  6EAE               	movwf	4014,c	;volatile
  7792                           
  7793                           ;eusart1.c: 107: eusart1TxHead = 0;
  7794  003CA2  0E00               	movlw	0
  7795  003CA4  6E41               	movwf	_eusart1TxHead,c
  7796                           
  7797                           ;eusart1.c: 108: eusart1TxTail = 0;
  7798  003CA6  0E00               	movlw	0
  7799  003CA8  6E42               	movwf	_eusart1TxTail,c
  7800                           
  7801                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  7802  003CAA  0E08               	movlw	8
  7803  003CAC  6E45               	movwf	_eusart1TxBufferRemaining,c	;volatile
  7804                           
  7805                           ;eusart1.c: 111: eusart1RxHead = 0;
  7806  003CAE  0E00               	movlw	0
  7807  003CB0  6E3F               	movwf	_eusart1RxHead,c
  7808                           
  7809                           ;eusart1.c: 112: eusart1RxTail = 0;
  7810  003CB2  0E00               	movlw	0
  7811  003CB4  6E40               	movwf	_eusart1RxTail,c
  7812                           
  7813                           ;eusart1.c: 113: eusart1RxCount = 0;
  7814  003CB6  0E00               	movlw	0
  7815  003CB8  6E3E               	movwf	_eusart1RxCount,c	;volatile
  7816                           
  7817                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  7818  003CBA  8A9D               	bsf	3997,5,c	;volatile
  7819  003CBC  0012               	return	
  7820  003CBE                     __end_of_EUSART1_Initialize:
  7821                           	opt stack 0
  7822                           tblptru	equ	0xFF8
  7823                           tblptrh	equ	0xFF7
  7824                           tblptrl	equ	0xFF6
  7825                           tablat	equ	0xFF5
  7826                           prodh	equ	0xFF4
  7827                           prodl	equ	0xFF3
  7828                           intcon	equ	0xFF2
  7829                           intcon2	equ	0xFF1
  7830                           postinc0	equ	0xFEE
  7831                           wreg	equ	0xFE8
  7832                           postinc1	equ	0xFE6
  7833                           postdec1	equ	0xFE5
  7834                           fsr1h	equ	0xFE2
  7835                           fsr1l	equ	0xFE1
  7836                           indf2	equ	0xFDF
  7837                           postinc2	equ	0xFDE
  7838                           postdec2	equ	0xFDD
  7839                           fsr2h	equ	0xFDA
  7840                           fsr2l	equ	0xFD9
  7841                           status	equ	0xFD8
  7842                           
  7843 ;; *************** function _ADC_Initialize *****************
  7844 ;; Defined at:
  7845 ;;		line 13 in file "mcc_generated_files/adc.c"
  7846 ;; Parameters:    Size  Location     Type
  7847 ;;		None
  7848 ;; Auto vars:     Size  Location     Type
  7849 ;;		None
  7850 ;; Return value:  Size  Location     Type
  7851 ;;		None               void
  7852 ;; Registers used:
  7853 ;;		wreg, status,2
  7854 ;; Tracked objects:
  7855 ;;		On entry : 0/0
  7856 ;;		On exit  : 0/0
  7857 ;;		Unchanged: 0/0
  7858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7859 ;;      Params:         0       0       0       0       0       0       0
  7860 ;;      Locals:         0       0       0       0       0       0       0
  7861 ;;      Temps:          0       0       0       0       0       0       0
  7862 ;;      Totals:         0       0       0       0       0       0       0
  7863 ;;Total ram usage:        0 bytes
  7864 ;; Hardware stack levels used:    1
  7865 ;; Hardware stack levels required when called:    4
  7866 ;; This function calls:
  7867 ;;		Nothing
  7868 ;; This function is called by:
  7869 ;;		_SYSTEM_Initialize
  7870 ;; This function uses a non-reentrant model
  7871 ;;
  7872                           
  7873                           	psect	text31
  7874  003EAE                     __ptext31:
  7875                           	opt stack 0
  7876  003EAE                     _ADC_Initialize:
  7877                           	opt stack 25
  7878                           
  7879                           ;adc.c: 18: ADCON0 = 0x01;
  7880                           
  7881                           ;incstack = 0
  7882  003EAE  0E01               	movlw	1
  7883  003EB0  6EC2               	movwf	4034,c	;volatile
  7884                           
  7885                           ;adc.c: 21: ADCON1 = 0x80;
  7886  003EB2  0E80               	movlw	128
  7887  003EB4  6EC1               	movwf	4033,c	;volatile
  7888                           
  7889                           ;adc.c: 24: ADCON2 = 0xA9;
  7890  003EB6  0EA9               	movlw	169
  7891  003EB8  6EC0               	movwf	4032,c	;volatile
  7892                           
  7893                           ;adc.c: 27: ADRESL = 0x00;
  7894  003EBA  0E00               	movlw	0
  7895  003EBC  6EC3               	movwf	4035,c	;volatile
  7896                           
  7897                           ;adc.c: 30: ADRESH = 0x00;
  7898  003EBE  0E00               	movlw	0
  7899  003EC0  6EC4               	movwf	4036,c	;volatile
  7900                           
  7901                           ;adc.c: 33: PIE1bits.ADIE = 1;
  7902  003EC2  8C9D               	bsf	3997,6,c	;volatile
  7903  003EC4  0012               	return	
  7904  003EC6                     __end_of_ADC_Initialize:
  7905                           	opt stack 0
  7906                           tblptru	equ	0xFF8
  7907                           tblptrh	equ	0xFF7
  7908                           tblptrl	equ	0xFF6
  7909                           tablat	equ	0xFF5
  7910                           prodh	equ	0xFF4
  7911                           prodl	equ	0xFF3
  7912                           intcon	equ	0xFF2
  7913                           intcon2	equ	0xFF1
  7914                           postinc0	equ	0xFEE
  7915                           wreg	equ	0xFE8
  7916                           postinc1	equ	0xFE6
  7917                           postdec1	equ	0xFE5
  7918                           fsr1h	equ	0xFE2
  7919                           fsr1l	equ	0xFE1
  7920                           indf2	equ	0xFDF
  7921                           postinc2	equ	0xFDE
  7922                           postdec2	equ	0xFDD
  7923                           fsr2h	equ	0xFDA
  7924                           fsr2l	equ	0xFD9
  7925                           status	equ	0xFD8
  7926                           
  7927 ;; *************** function _RunBypas *****************
  7928 ;; Defined at:
  7929 ;;		line 131 in file "Bypass.c"
  7930 ;; Parameters:    Size  Location     Type
  7931 ;;		None
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;  batvolt         3   11[BANK0 ] float 
  7934 ;;  i               2   14[BANK0 ] int 
  7935 ;;  cellbyp         2    9[BANK0 ] int 
  7936 ;; Return value:  Size  Location     Type
  7937 ;;                  2  456[COMRAM] int 
  7938 ;; Registers used:
  7939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7940 ;; Tracked objects:
  7941 ;;		On entry : 0/0
  7942 ;;		On exit  : 0/0
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7945 ;;      Params:         0       0       0       0       0       0       0
  7946 ;;      Locals:         0       7       0       0       0       0       0
  7947 ;;      Temps:          0       0       0       0       0       0       0
  7948 ;;      Totals:         0       7       0       0       0       0       0
  7949 ;;Total ram usage:        7 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    6
  7952 ;; This function calls:
  7953 ;;		_Battery_Get
  7954 ;;		_SetBypass
  7955 ;;		___ftge
  7956 ;; This function is called by:
  7957 ;;		_main
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961                           	psect	text32
  7962  003346                     __ptext32:
  7963                           	opt stack 0
  7964  003346                     _RunBypas:
  7965                           	opt stack 24
  7966                           
  7967                           ;Bypass.c: 133: int cellbyp = 0;
  7968                           
  7969                           ;incstack = 0
  7970  003346  0E00               	movlw	0
  7971  003348  0100               	movlb	0	; () banked
  7972  00334A  6F6A               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  7973  00334C  0E00               	movlw	0
  7974  00334E  0100               	movlb	0	; () banked
  7975  003350  6F69               	movwf	RunBypas@cellbyp& (0+255),b
  7976                           
  7977                           ;Bypass.c: 134: int i = 0;
  7978  003352  0E00               	movlw	0
  7979  003354  0100               	movlb	0	; () banked
  7980  003356  6F6F               	movwf	(RunBypas@i+1)& (0+255),b
  7981  003358  0E00               	movlw	0
  7982  00335A  0100               	movlb	0	; () banked
  7983  00335C  6F6E               	movwf	RunBypas@i& (0+255),b
  7984                           
  7985                           ;Bypass.c: 135: float batvolt = 0;
  7986  00335E  0E00               	movlw	0
  7987  003360  0100               	movlb	0	; () banked
  7988  003362  6F6B               	movwf	RunBypas@batvolt& (0+255),b
  7989  003364  0E00               	movlw	0
  7990  003366  0100               	movlb	0	; () banked
  7991  003368  6F6C               	movwf	(RunBypas@batvolt+1)& (0+255),b
  7992  00336A  0E00               	movlw	0
  7993  00336C  0100               	movlb	0	; () banked
  7994  00336E  6F6D               	movwf	(RunBypas@batvolt+2)& (0+255),b
  7995                           
  7996                           ;Bypass.c: 137: for(i = 0; i<9;i++)
  7997  003370  0E00               	movlw	0
  7998  003372  0100               	movlb	0	; () banked
  7999  003374  6F6F               	movwf	(RunBypas@i+1)& (0+255),b
  8000  003376  0E00               	movlw	0
  8001  003378  0100               	movlb	0	; () banked
  8002  00337A  6F6E               	movwf	RunBypas@i& (0+255),b
  8003  00337C                     
  8004                           ; BSR set to: 0
  8005  00337C  0100               	movlb	0	; () banked
  8006  00337E  516F               	movf	(RunBypas@i+1)& (0+255),w,b
  8007  003380  0A80               	xorlw	128
  8008  003382  0F80               	addlw	-128
  8009  003384  0E09               	movlw	9
  8010  003386  B4D8               	btfsc	status,2,c
  8011  003388  5D6E               	subwf	RunBypas@i& (0+255),w,b
  8012  00338A  B0D8               	btfsc	status,0,c
  8013  00338C  0012               	return	
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;Bypass.c: 138: {
  8017                           ;Bypass.c: 139: batvolt = Battery_Get(i);
  8018                           
  8019                           ; BSR set to: 0
  8020                           
  8021                           ; BSR set to: 0
  8022  00338E  C06E  F060         	movff	RunBypas@i,Battery_Get@channelnum
  8023  003392  C06F  F061         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  8024  003396  EC7C  F01E         	call	_Battery_Get	;wreg free
  8025  00339A  C060  F06B         	movff	?_Battery_Get,RunBypas@batvolt
  8026  00339E  C061  F06C         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  8027  0033A2  C062  F06D         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  8028                           
  8029                           ;Bypass.c: 141: if(batvolt >= 4.18)
  8030  0033A6  C06B  F060         	movff	RunBypas@batvolt,___ftge@ff1
  8031  0033AA  C06C  F061         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  8032  0033AE  C06D  F062         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  8033  0033B2  0EC3               	movlw	195
  8034  0033B4  0100               	movlb	0	; () banked
  8035  0033B6  6F63               	movwf	___ftge@ff2& (0+255),b
  8036  0033B8  0E85               	movlw	133
  8037  0033BA  0100               	movlb	0	; () banked
  8038  0033BC  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  8039  0033BE  0E40               	movlw	64
  8040  0033C0  0100               	movlb	0	; () banked
  8041  0033C2  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  8042  0033C4  EC17  F01A         	call	___ftge	;wreg free
  8043  0033C8  A0D8               	btfss	status,0,c
  8044  0033CA  D010               	goto	l5708
  8045                           
  8046                           ;Bypass.c: 142: {
  8047                           ;Bypass.c: 143: SetBypass(i,1);
  8048  0033CC  C06E  F01B         	movff	RunBypas@i,SetBypass@pin
  8049  0033D0  C06F  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8050  0033D4  0E00               	movlw	0
  8051  0033D6  6E1E               	movwf	SetBypass@state+1,c
  8052  0033D8  0E01               	movlw	1
  8053  0033DA  6E1D               	movwf	SetBypass@state,c
  8054  0033DC  EC2A  F019         	call	_SetBypass	;wreg free
  8055                           
  8056                           ;Bypass.c: 144: cellbyp = 1;
  8057  0033E0  0E00               	movlw	0
  8058  0033E2  0100               	movlb	0	; () banked
  8059  0033E4  6F6A               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  8060  0033E6  0E01               	movlw	1
  8061  0033E8  0100               	movlb	0	; () banked
  8062  0033EA  6F69               	movwf	RunBypas@cellbyp& (0+255),b
  8063  0033EC                     l5708:
  8064                           
  8065                           ;Bypass.c: 145: }
  8066                           ;Bypass.c: 146: if(batvolt <= 4.15)
  8067  0033EC  0ECD               	movlw	205
  8068  0033EE  0100               	movlb	0	; () banked
  8069  0033F0  6F60               	movwf	___ftge@ff1& (0+255),b
  8070  0033F2  0E84               	movlw	132
  8071  0033F4  0100               	movlb	0	; () banked
  8072  0033F6  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  8073  0033F8  0E40               	movlw	64
  8074  0033FA  0100               	movlb	0	; () banked
  8075  0033FC  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  8076  0033FE  C06B  F063         	movff	RunBypas@batvolt,___ftge@ff2
  8077  003402  C06C  F064         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  8078  003406  C06D  F065         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  8079  00340A  EC17  F01A         	call	___ftge	;wreg free
  8080  00340E  A0D8               	btfss	status,0,c
  8081  003410  D00A               	goto	l5712
  8082                           
  8083                           ;Bypass.c: 147: {
  8084                           ;Bypass.c: 148: SetBypass(i,0);
  8085  003412  C06E  F01B         	movff	RunBypas@i,SetBypass@pin
  8086  003416  C06F  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8087  00341A  0E00               	movlw	0
  8088  00341C  6E1E               	movwf	SetBypass@state+1,c
  8089  00341E  0E00               	movlw	0
  8090  003420  6E1D               	movwf	SetBypass@state,c
  8091  003422  EC2A  F019         	call	_SetBypass	;wreg free
  8092  003426                     l5712:
  8093  003426  0100               	movlb	0	; () banked
  8094  003428  4B6E               	infsnz	RunBypas@i& (0+255),f,b
  8095  00342A  2B6F               	incf	(RunBypas@i+1)& (0+255),f,b
  8096  00342C  D7A7               	goto	L11
  8097  00342E                     __end_of_RunBypas:
  8098                           	opt stack 0
  8099                           tblptru	equ	0xFF8
  8100                           tblptrh	equ	0xFF7
  8101                           tblptrl	equ	0xFF6
  8102                           tablat	equ	0xFF5
  8103                           prodh	equ	0xFF4
  8104                           prodl	equ	0xFF3
  8105                           intcon	equ	0xFF2
  8106                           intcon2	equ	0xFF1
  8107                           postinc0	equ	0xFEE
  8108                           wreg	equ	0xFE8
  8109                           postinc1	equ	0xFE6
  8110                           postdec1	equ	0xFE5
  8111                           fsr1h	equ	0xFE2
  8112                           fsr1l	equ	0xFE1
  8113                           indf2	equ	0xFDF
  8114                           postinc2	equ	0xFDE
  8115                           postdec2	equ	0xFDD
  8116                           fsr2h	equ	0xFDA
  8117                           fsr2l	equ	0xFD9
  8118                           status	equ	0xFD8
  8119                           
  8120 ;; *************** function _SetBypass *****************
  8121 ;; Defined at:
  8122 ;;		line 18 in file "Bypass.c"
  8123 ;; Parameters:    Size  Location     Type
  8124 ;;  pin             2   26[COMRAM] int 
  8125 ;;  state           2   28[COMRAM] int 
  8126 ;; Auto vars:     Size  Location     Type
  8127 ;;		None
  8128 ;; Return value:  Size  Location     Type
  8129 ;;                  2   26[COMRAM] int 
  8130 ;; Registers used:
  8131 ;;		wreg, status,2, status,0
  8132 ;; Tracked objects:
  8133 ;;		On entry : 0/0
  8134 ;;		On exit  : 0/0
  8135 ;;		Unchanged: 0/0
  8136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8137 ;;      Params:         4       0       0       0       0       0       0
  8138 ;;      Locals:         0       0       0       0       0       0       0
  8139 ;;      Temps:          2       0       0       0       0       0       0
  8140 ;;      Totals:         6       0       0       0       0       0       0
  8141 ;;Total ram usage:        6 bytes
  8142 ;; Hardware stack levels used:    1
  8143 ;; Hardware stack levels required when called:    4
  8144 ;; This function calls:
  8145 ;;		Nothing
  8146 ;; This function is called by:
  8147 ;;		_RunBypas
  8148 ;; This function uses a non-reentrant model
  8149 ;;
  8150                           
  8151                           	psect	text33
  8152  003254                     __ptext33:
  8153                           	opt stack 0
  8154  003254                     _SetBypass:
  8155                           	opt stack 25
  8156                           
  8157                           ;Bypass.c: 20: switch (pin) {
  8158                           
  8159                           ; BSR set to: 0
  8160                           ;incstack = 0
  8161  003254  D050               	goto	l4944
  8162  003256                     l4922:
  8163                           
  8164                           ;Bypass.c: 22: if (state)
  8165  003256  501E               	movf	SetBypass@state+1,w,c
  8166  003258  101D               	iorwf	SetBypass@state,w,c
  8167  00325A  B4D8               	btfsc	status,2,c
  8168  00325C  D002               	goto	l501
  8169                           
  8170                           ;Bypass.c: 23: {
  8171                           ;Bypass.c: 24: do { LATC5 = 1; } while(0);
  8172  00325E  8A8B               	bsf	3979,5,c	;volatile
  8173  003260  0012               	return	
  8174  003262                     l501:
  8175  003262  9A8B               	bcf	3979,5,c	;volatile
  8176  003264  0012               	return	
  8177  003266                     l4924:
  8178                           
  8179                           ;Bypass.c: 32: if (state)
  8180  003266  501E               	movf	SetBypass@state+1,w,c
  8181  003268  101D               	iorwf	SetBypass@state,w,c
  8182  00326A  B4D8               	btfsc	status,2,c
  8183  00326C  D002               	goto	l509
  8184                           
  8185                           ;Bypass.c: 33: {
  8186                           ;Bypass.c: 34: do { LATC4 = 1; } while(0);
  8187  00326E  888B               	bsf	3979,4,c	;volatile
  8188  003270  0012               	return	
  8189  003272                     l509:
  8190  003272  988B               	bcf	3979,4,c	;volatile
  8191  003274  0012               	return	
  8192  003276                     l4926:
  8193                           
  8194                           ;Bypass.c: 42: if (state)
  8195  003276  501E               	movf	SetBypass@state+1,w,c
  8196  003278  101D               	iorwf	SetBypass@state,w,c
  8197  00327A  B4D8               	btfsc	status,2,c
  8198  00327C  D002               	goto	l516
  8199                           
  8200                           ;Bypass.c: 43: {
  8201                           ;Bypass.c: 44: do { LATD3 = 1; } while(0);
  8202  00327E  868C               	bsf	3980,3,c	;volatile
  8203  003280  0012               	return	
  8204  003282                     l516:
  8205  003282  968C               	bcf	3980,3,c	;volatile
  8206  003284  0012               	return	
  8207  003286                     l4928:
  8208                           
  8209                           ;Bypass.c: 52: if (state)
  8210  003286  501E               	movf	SetBypass@state+1,w,c
  8211  003288  101D               	iorwf	SetBypass@state,w,c
  8212  00328A  B4D8               	btfsc	status,2,c
  8213  00328C  D002               	goto	l523
  8214                           
  8215                           ;Bypass.c: 53: {
  8216                           ;Bypass.c: 54: do { LATD2 = 1; } while(0);
  8217  00328E  848C               	bsf	3980,2,c	;volatile
  8218  003290  0012               	return	
  8219  003292                     l523:
  8220  003292  948C               	bcf	3980,2,c	;volatile
  8221  003294  0012               	return	
  8222  003296                     l4930:
  8223                           
  8224                           ;Bypass.c: 62: if (state)
  8225  003296  501E               	movf	SetBypass@state+1,w,c
  8226  003298  101D               	iorwf	SetBypass@state,w,c
  8227  00329A  B4D8               	btfsc	status,2,c
  8228  00329C  D002               	goto	l530
  8229                           
  8230                           ;Bypass.c: 63: {
  8231                           ;Bypass.c: 64: do { LATD1 = 1; } while(0);
  8232  00329E  828C               	bsf	3980,1,c	;volatile
  8233  0032A0  0012               	return	
  8234  0032A2                     l530:
  8235  0032A2  928C               	bcf	3980,1,c	;volatile
  8236  0032A4  0012               	return	
  8237  0032A6                     l4932:
  8238                           
  8239                           ;Bypass.c: 72: if (state)
  8240  0032A6  501E               	movf	SetBypass@state+1,w,c
  8241  0032A8  101D               	iorwf	SetBypass@state,w,c
  8242  0032AA  B4D8               	btfsc	status,2,c
  8243  0032AC  D002               	goto	l537
  8244                           
  8245                           ;Bypass.c: 73: {
  8246                           ;Bypass.c: 74: do { LATD5 = 1; } while(0);
  8247  0032AE  8A8C               	bsf	3980,5,c	;volatile
  8248  0032B0  0012               	return	
  8249  0032B2                     l537:
  8250  0032B2  9A8C               	bcf	3980,5,c	;volatile
  8251  0032B4  0012               	return	
  8252  0032B6                     l4934:
  8253                           
  8254                           ;Bypass.c: 82: if (state)
  8255  0032B6  501E               	movf	SetBypass@state+1,w,c
  8256  0032B8  101D               	iorwf	SetBypass@state,w,c
  8257  0032BA  B4D8               	btfsc	status,2,c
  8258  0032BC  D002               	goto	l544
  8259                           
  8260                           ;Bypass.c: 83: {
  8261                           ;Bypass.c: 84: do { LATB0 = 1; } while(0);
  8262  0032BE  808A               	bsf	3978,0,c	;volatile
  8263  0032C0  0012               	return	
  8264  0032C2                     l544:
  8265  0032C2  908A               	bcf	3978,0,c	;volatile
  8266  0032C4  0012               	return	
  8267  0032C6                     l4936:
  8268                           
  8269                           ;Bypass.c: 92: if (state)
  8270  0032C6  501E               	movf	SetBypass@state+1,w,c
  8271  0032C8  101D               	iorwf	SetBypass@state,w,c
  8272  0032CA  B4D8               	btfsc	status,2,c
  8273  0032CC  D002               	goto	l551
  8274                           
  8275                           ;Bypass.c: 93: {
  8276                           ;Bypass.c: 94: do { LATB1 = 1; } while(0);
  8277  0032CE  828A               	bsf	3978,1,c	;volatile
  8278  0032D0  0012               	return	
  8279  0032D2                     l551:
  8280  0032D2  928A               	bcf	3978,1,c	;volatile
  8281  0032D4  0012               	return	
  8282  0032D6                     l4938:
  8283                           
  8284                           ;Bypass.c: 102: if (state)
  8285  0032D6  501E               	movf	SetBypass@state+1,w,c
  8286  0032D8  101D               	iorwf	SetBypass@state,w,c
  8287  0032DA  B4D8               	btfsc	status,2,c
  8288  0032DC  D002               	goto	l558
  8289                           
  8290                           ;Bypass.c: 103: {
  8291                           ;Bypass.c: 104: do { LATB3 = 1; } while(0);
  8292  0032DE  868A               	bsf	3978,3,c	;volatile
  8293  0032E0  0012               	return	
  8294  0032E2                     l558:
  8295  0032E2  968A               	bcf	3978,3,c	;volatile
  8296  0032E4  0012               	return	
  8297  0032E6                     l4940:
  8298                           
  8299                           ;Bypass.c: 112: if (state)
  8300  0032E6  501E               	movf	SetBypass@state+1,w,c
  8301  0032E8  101D               	iorwf	SetBypass@state,w,c
  8302  0032EA  B4D8               	btfsc	status,2,c
  8303  0032EC  D002               	goto	l565
  8304                           
  8305                           ;Bypass.c: 113: {
  8306                           ;Bypass.c: 114: do { LATA0 = 1; } while(0);
  8307  0032EE  8089               	bsf	3977,0,c	;volatile
  8308  0032F0  0012               	return	
  8309  0032F2                     l565:
  8310  0032F2  9089               	bcf	3977,0,c	;volatile
  8311  0032F4  0012               	return	
  8312  0032F6                     l4944:
  8313  0032F6  C01B  F01F         	movff	SetBypass@pin,??_SetBypass
  8314  0032FA  C01C  F020         	movff	SetBypass@pin+1,??_SetBypass+1
  8315                           
  8316                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8317                           ; Switch size 1, requested type "space"
  8318                           ; Number of cases is 1, Range of values is 0 to 0
  8319                           ; switch strategies available:
  8320                           ; Name         Instructions Cycles
  8321                           ; simple_byte            4     3 (average)
  8322                           ;	Chosen strategy is simple_byte
  8323  0032FE  5020               	movf	??_SetBypass+1,w,c
  8324  003300  0A00               	xorlw	0	; case 0
  8325  003302  A4D8               	btfss	status,2,c
  8326  003304  0012               	return	
  8327                           
  8328                           ; Switch size 1, requested type "space"
  8329                           ; Number of cases is 10, Range of values is 0 to 9
  8330                           ; switch strategies available:
  8331                           ; Name         Instructions Cycles
  8332                           ; simple_byte           31    16 (average)
  8333                           ;	Chosen strategy is simple_byte
  8334  003306  501F               	movf	??_SetBypass,w,c
  8335  003308  0A00               	xorlw	0	; case 0
  8336  00330A  B4D8               	btfsc	status,2,c
  8337  00330C  D7A4               	goto	l4922
  8338  00330E  0A01               	xorlw	1	; case 1
  8339  003310  B4D8               	btfsc	status,2,c
  8340  003312  D7A9               	goto	l4924
  8341  003314  0A03               	xorlw	3	; case 2
  8342  003316  B4D8               	btfsc	status,2,c
  8343  003318  D7AE               	goto	l4926
  8344  00331A  0A01               	xorlw	1	; case 3
  8345  00331C  B4D8               	btfsc	status,2,c
  8346  00331E  D7B3               	goto	l4928
  8347  003320  0A07               	xorlw	7	; case 4
  8348  003322  B4D8               	btfsc	status,2,c
  8349  003324  D7B8               	goto	l4930
  8350  003326  0A01               	xorlw	1	; case 5
  8351  003328  B4D8               	btfsc	status,2,c
  8352  00332A  D7BD               	goto	l4932
  8353  00332C  0A03               	xorlw	3	; case 6
  8354  00332E  B4D8               	btfsc	status,2,c
  8355  003330  D7C2               	goto	l4934
  8356  003332  0A01               	xorlw	1	; case 7
  8357  003334  B4D8               	btfsc	status,2,c
  8358  003336  D7C7               	goto	l4936
  8359  003338  0A0F               	xorlw	15	; case 8
  8360  00333A  B4D8               	btfsc	status,2,c
  8361  00333C  D7CC               	goto	l4938
  8362  00333E  0A01               	xorlw	1	; case 9
  8363  003340  A4D8               	btfss	status,2,c
  8364  003342  0012               	return	
  8365  003344  D7D0               	goto	l4940
  8366  003346                     __end_of_SetBypass:
  8367                           	opt stack 0
  8368                           tblptru	equ	0xFF8
  8369                           tblptrh	equ	0xFF7
  8370                           tblptrl	equ	0xFF6
  8371                           tablat	equ	0xFF5
  8372                           prodh	equ	0xFF4
  8373                           prodl	equ	0xFF3
  8374                           intcon	equ	0xFF2
  8375                           intcon2	equ	0xFF1
  8376                           postinc0	equ	0xFEE
  8377                           wreg	equ	0xFE8
  8378                           postinc1	equ	0xFE6
  8379                           postdec1	equ	0xFE5
  8380                           fsr1h	equ	0xFE2
  8381                           fsr1l	equ	0xFE1
  8382                           indf2	equ	0xFDF
  8383                           postinc2	equ	0xFDE
  8384                           postdec2	equ	0xFDD
  8385                           fsr2h	equ	0xFDA
  8386                           fsr2l	equ	0xFD9
  8387                           status	equ	0xFD8
  8388                           
  8389 ;; *************** function _Battery_Get *****************
  8390 ;; Defined at:
  8391 ;;		line 93 in file "Battery.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;  channelnum      2    0[BANK0 ] int 
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;		None
  8396 ;; Return value:  Size  Location     Type
  8397 ;;                  3    0[BANK0 ] float 
  8398 ;; Registers used:
  8399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8400 ;; Tracked objects:
  8401 ;;		On entry : 0/0
  8402 ;;		On exit  : 0/0
  8403 ;;		Unchanged: 0/0
  8404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8405 ;;      Params:         0       3       0       0       0       0       0
  8406 ;;      Locals:         0       0       0       0       0       0       0
  8407 ;;      Temps:          0       0       0       0       0       0       0
  8408 ;;      Totals:         0       3       0       0       0       0       0
  8409 ;;Total ram usage:        3 bytes
  8410 ;; Hardware stack levels used:    1
  8411 ;; Hardware stack levels required when called:    5
  8412 ;; This function calls:
  8413 ;;		___wmul
  8414 ;; This function is called by:
  8415 ;;		_main
  8416 ;;		_RunBypas
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           	psect	text34
  8421  003CF8                     __ptext34:
  8422                           	opt stack 0
  8423  003CF8                     _Battery_Get:
  8424                           	opt stack 24
  8425                           
  8426                           ;Battery.c: 96: return Battery_Volt[channelnum];
  8427                           
  8428                           ;incstack = 0
  8429  003CF8  C060  F029         	movff	Battery_Get@channelnum,___wmul@multiplier
  8430  003CFC  C061  F02A         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  8431  003D00  0E00               	movlw	0
  8432  003D02  6E2C               	movwf	___wmul@multiplicand+1,c
  8433  003D04  0E03               	movlw	3
  8434  003D06  6E2B               	movwf	___wmul@multiplicand,c
  8435  003D08  EC09  F01F         	call	___wmul	;wreg free
  8436  003D0C  0101               	movlb	1	; () banked
  8437  003D0E  0E32               	movlw	low _Battery_Volt
  8438  003D10  2429               	addwf	?___wmul,w,c
  8439  003D12  6ED9               	movwf	fsr2l,c
  8440  003D14  0101               	movlb	1	; () banked
  8441  003D16  0E01               	movlw	high _Battery_Volt
  8442  003D18  202A               	addwfc	?___wmul+1,w,c
  8443  003D1A  6EDA               	movwf	fsr2h,c
  8444  003D1C  0100               	movlb	0	; () banked
  8445  003D1E  CFDE F060          	movff	postinc2,?_Battery_Get
  8446  003D22  0100               	movlb	0	; () banked
  8447  003D24  CFDE F061          	movff	postinc2,?_Battery_Get+1
  8448  003D28  0100               	movlb	0	; () banked
  8449  003D2A  CFDD F062          	movff	postdec2,?_Battery_Get+2
  8450  003D2E  0012               	return	
  8451  003D30                     __end_of_Battery_Get:
  8452                           	opt stack 0
  8453                           tblptru	equ	0xFF8
  8454                           tblptrh	equ	0xFF7
  8455                           tblptrl	equ	0xFF6
  8456                           tablat	equ	0xFF5
  8457                           prodh	equ	0xFF4
  8458                           prodl	equ	0xFF3
  8459                           intcon	equ	0xFF2
  8460                           intcon2	equ	0xFF1
  8461                           postinc0	equ	0xFEE
  8462                           wreg	equ	0xFE8
  8463                           postinc1	equ	0xFE6
  8464                           postdec1	equ	0xFE5
  8465                           fsr1h	equ	0xFE2
  8466                           fsr1l	equ	0xFE1
  8467                           indf2	equ	0xFDF
  8468                           postinc2	equ	0xFDE
  8469                           postdec2	equ	0xFDD
  8470                           fsr2h	equ	0xFDA
  8471                           fsr2l	equ	0xFD9
  8472                           status	equ	0xFD8
  8473                           
  8474 ;; *************** function _Battery_Fault *****************
  8475 ;; Defined at:
  8476 ;;		line 72 in file "Battery.c"
  8477 ;; Parameters:    Size  Location     Type
  8478 ;;		None
  8479 ;; Auto vars:     Size  Location     Type
  8480 ;;  i               2   10[BANK0 ] int 
  8481 ;;  fault           1    9[BANK0 ] unsigned char 
  8482 ;; Return value:  Size  Location     Type
  8483 ;;                  1    wreg      unsigned char 
  8484 ;; Registers used:
  8485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8486 ;; Tracked objects:
  8487 ;;		On entry : 0/0
  8488 ;;		On exit  : 0/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8491 ;;      Params:         0       0       0       0       0       0       0
  8492 ;;      Locals:         0       3       0       0       0       0       0
  8493 ;;      Temps:          0       0       0       0       0       0       0
  8494 ;;      Totals:         0       3       0       0       0       0       0
  8495 ;;Total ram usage:        3 bytes
  8496 ;; Hardware stack levels used:    1
  8497 ;; Hardware stack levels required when called:    5
  8498 ;; This function calls:
  8499 ;;		___ftge
  8500 ;;		___wmul
  8501 ;; This function is called by:
  8502 ;;		_main
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           	psect	text35
  8507  003502                     __ptext35:
  8508                           	opt stack 0
  8509  003502                     _Battery_Fault:
  8510                           	opt stack 25
  8511                           
  8512                           ;Battery.c: 74: char fault = 0;
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;incstack = 0
  8516  003502  0E00               	movlw	0
  8517  003504  0100               	movlb	0	; () banked
  8518  003506  6F69               	movwf	Battery_Fault@fault& (0+255),b
  8519                           
  8520                           ;Battery.c: 75: for(int i = 0;i<9;i++)
  8521  003508  0E00               	movlw	0
  8522  00350A  0100               	movlb	0	; () banked
  8523  00350C  6F6B               	movwf	(Battery_Fault@i+1)& (0+255),b
  8524  00350E  0E00               	movlw	0
  8525  003510  0100               	movlb	0	; () banked
  8526  003512  6F6A               	movwf	Battery_Fault@i& (0+255),b
  8527  003514                     
  8528                           ; BSR set to: 0
  8529  003514  0100               	movlb	0	; () banked
  8530  003516  516B               	movf	(Battery_Fault@i+1)& (0+255),w,b
  8531  003518  0A80               	xorlw	128
  8532  00351A  0F80               	addlw	-128
  8533  00351C  0E09               	movlw	9
  8534  00351E  B4D8               	btfsc	status,2,c
  8535  003520  5D6A               	subwf	Battery_Fault@i& (0+255),w,b
  8536  003522  B0D8               	btfsc	status,0,c
  8537  003524  0012               	return	
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;Battery.c: 76: {
  8541                           ;Battery.c: 77: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  8542                           
  8543                           ; BSR set to: 0
  8544                           
  8545                           ; BSR set to: 0
  8546  003526  0E00               	movlw	0
  8547  003528  0100               	movlb	0	; () banked
  8548  00352A  6F60               	movwf	___ftge@ff1& (0+255),b
  8549  00352C  0E40               	movlw	64
  8550  00352E  0100               	movlb	0	; () banked
  8551  003530  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  8552  003532  0E40               	movlw	64
  8553  003534  0100               	movlb	0	; () banked
  8554  003536  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  8555  003538  C06A  F029         	movff	Battery_Fault@i,___wmul@multiplier
  8556  00353C  C06B  F02A         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  8557  003540  0E00               	movlw	0
  8558  003542  6E2C               	movwf	___wmul@multiplicand+1,c
  8559  003544  0E03               	movlw	3
  8560  003546  6E2B               	movwf	___wmul@multiplicand,c
  8561  003548  EC09  F01F         	call	___wmul	;wreg free
  8562  00354C  0101               	movlb	1	; () banked
  8563  00354E  0E32               	movlw	low _Battery_Volt
  8564  003550  2429               	addwf	?___wmul,w,c
  8565  003552  6ED9               	movwf	fsr2l,c
  8566  003554  0101               	movlb	1	; () banked
  8567  003556  0E01               	movlw	high _Battery_Volt
  8568  003558  202A               	addwfc	?___wmul+1,w,c
  8569  00355A  6EDA               	movwf	fsr2h,c
  8570  00355C  0100               	movlb	0	; () banked
  8571  00355E  CFDE F063          	movff	postinc2,___ftge@ff2
  8572  003562  0100               	movlb	0	; () banked
  8573  003564  CFDE F064          	movff	postinc2,___ftge@ff2+1
  8574  003568  0100               	movlb	0	; () banked
  8575  00356A  CFDD F065          	movff	postdec2,___ftge@ff2+2
  8576  00356E  EC17  F01A         	call	___ftge	;wreg free
  8577  003572  B0D8               	btfsc	status,0,c
  8578  003574  D02B               	goto	l5344
  8579  003576  C06A  F029         	movff	Battery_Fault@i,___wmul@multiplier
  8580  00357A  C06B  F02A         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  8581  00357E  0E00               	movlw	0
  8582  003580  6E2C               	movwf	___wmul@multiplicand+1,c
  8583  003582  0E03               	movlw	3
  8584  003584  6E2B               	movwf	___wmul@multiplicand,c
  8585  003586  EC09  F01F         	call	___wmul	;wreg free
  8586  00358A  0101               	movlb	1	; () banked
  8587  00358C  0E32               	movlw	low _Battery_Volt
  8588  00358E  2429               	addwf	?___wmul,w,c
  8589  003590  6ED9               	movwf	fsr2l,c
  8590  003592  0101               	movlb	1	; () banked
  8591  003594  0E01               	movlw	high _Battery_Volt
  8592  003596  202A               	addwfc	?___wmul+1,w,c
  8593  003598  6EDA               	movwf	fsr2h,c
  8594  00359A  0100               	movlb	0	; () banked
  8595  00359C  CFDE F060          	movff	postinc2,___ftge@ff1
  8596  0035A0  0100               	movlb	0	; () banked
  8597  0035A2  CFDE F061          	movff	postinc2,___ftge@ff1+1
  8598  0035A6  0100               	movlb	0	; () banked
  8599  0035A8  CFDD F062          	movff	postdec2,___ftge@ff1+2
  8600  0035AC  0EB8               	movlw	184
  8601  0035AE  0100               	movlb	0	; () banked
  8602  0035B0  6F63               	movwf	___ftge@ff2& (0+255),b
  8603  0035B2  0E86               	movlw	134
  8604  0035B4  0100               	movlb	0	; () banked
  8605  0035B6  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  8606  0035B8  0E40               	movlw	64
  8607  0035BA  0100               	movlb	0	; () banked
  8608  0035BC  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  8609  0035BE  EC17  F01A         	call	___ftge	;wreg free
  8610  0035C2  B0D8               	btfsc	status,0,c
  8611  0035C4  D003               	goto	l5344
  8612                           
  8613                           ;Battery.c: 78: {
  8614                           ;Battery.c: 79: fault = 1;
  8615  0035C6  0E01               	movlw	1
  8616  0035C8  0100               	movlb	0	; () banked
  8617  0035CA  6F69               	movwf	Battery_Fault@fault& (0+255),b
  8618  0035CC                     l5344:
  8619  0035CC  0100               	movlb	0	; () banked
  8620  0035CE  4B6A               	infsnz	Battery_Fault@i& (0+255),f,b
  8621  0035D0  2B6B               	incf	(Battery_Fault@i+1)& (0+255),f,b
  8622  0035D2  D7A0               	goto	L12
  8623  0035D4                     __end_of_Battery_Fault:
  8624                           	opt stack 0
  8625                           tblptru	equ	0xFF8
  8626                           tblptrh	equ	0xFF7
  8627                           tblptrl	equ	0xFF6
  8628                           tablat	equ	0xFF5
  8629                           prodh	equ	0xFF4
  8630                           prodl	equ	0xFF3
  8631                           intcon	equ	0xFF2
  8632                           intcon2	equ	0xFF1
  8633                           postinc0	equ	0xFEE
  8634                           wreg	equ	0xFE8
  8635                           postinc1	equ	0xFE6
  8636                           postdec1	equ	0xFE5
  8637                           fsr1h	equ	0xFE2
  8638                           fsr1l	equ	0xFE1
  8639                           indf2	equ	0xFDF
  8640                           postinc2	equ	0xFDE
  8641                           postdec2	equ	0xFDD
  8642                           fsr2h	equ	0xFDA
  8643                           fsr2l	equ	0xFD9
  8644                           status	equ	0xFD8
  8645                           
  8646 ;; *************** function ___ftge *****************
  8647 ;; Defined at:
  8648 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  8649 ;; Parameters:    Size  Location     Type
  8650 ;;  ff1             3    0[BANK0 ] float 
  8651 ;;  ff2             3    3[BANK0 ] float 
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;		None
  8654 ;; Return value:  Size  Location     Type
  8655 ;;		None               void
  8656 ;; Registers used:
  8657 ;;		wreg, status,2, status,0
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8663 ;;      Params:         0       6       0       0       0       0       0
  8664 ;;      Locals:         0       0       0       0       0       0       0
  8665 ;;      Temps:          0       3       0       0       0       0       0
  8666 ;;      Totals:         0       9       0       0       0       0       0
  8667 ;;Total ram usage:        9 bytes
  8668 ;; Hardware stack levels used:    1
  8669 ;; Hardware stack levels required when called:    4
  8670 ;; This function calls:
  8671 ;;		Nothing
  8672 ;; This function is called by:
  8673 ;;		_Battery_Fault
  8674 ;;		_Temp_Fault
  8675 ;;		_RunBypas
  8676 ;;		_printf
  8677 ;; This function uses a non-reentrant model
  8678 ;;
  8679                           
  8680                           	psect	text36
  8681  00342E                     __ptext36:
  8682                           	opt stack 0
  8683  00342E                     ___ftge:
  8684                           	opt stack 25
  8685                           
  8686                           ; BSR set to: 0
  8687                           ;incstack = 0
  8688  00342E  0100               	movlb	0	; () banked
  8689  003430  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8690  003432  D020               	goto	l5206
  8691                           
  8692                           ; BSR set to: 0
  8693  003434  0100               	movlb	0	; () banked
  8694  003436  C060  F066         	movff	___ftge@ff1,??___ftge
  8695  00343A  0100               	movlb	0	; () banked
  8696  00343C  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  8697  003440  0100               	movlb	0	; () banked
  8698  003442  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  8699  003446  0100               	movlb	0	; () banked
  8700  003448  1F66               	comf	??___ftge& (0+255),f,b
  8701  00344A  1F67               	comf	(??___ftge+1)& (0+255),f,b
  8702  00344C  1F68               	comf	(??___ftge+2)& (0+255),f,b
  8703  00344E  2B66               	incf	??___ftge& (0+255),f,b
  8704  003450  0E00               	movlw	0
  8705  003452  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  8706  003454  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  8707  003456  0E00               	movlw	0
  8708  003458  0100               	movlb	0	; () banked
  8709  00345A  2566               	addwf	??___ftge& (0+255),w,b
  8710  00345C  0100               	movlb	0	; () banked
  8711  00345E  6F60               	movwf	___ftge@ff1& (0+255),b
  8712  003460  0E00               	movlw	0
  8713  003462  0100               	movlb	0	; () banked
  8714  003464  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  8715  003466  0100               	movlb	0	; () banked
  8716  003468  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  8717  00346A  0E80               	movlw	128
  8718  00346C  0100               	movlb	0	; () banked
  8719  00346E  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  8720  003470  0100               	movlb	0	; () banked
  8721  003472  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  8722  003474                     l5206:
  8723                           
  8724                           ; BSR set to: 0
  8725  003474  0100               	movlb	0	; () banked
  8726  003476  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8727  003478  D020               	goto	l5210
  8728                           
  8729                           ; BSR set to: 0
  8730  00347A  0100               	movlb	0	; () banked
  8731  00347C  C063  F066         	movff	___ftge@ff2,??___ftge
  8732  003480  0100               	movlb	0	; () banked
  8733  003482  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  8734  003486  0100               	movlb	0	; () banked
  8735  003488  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  8736  00348C  0100               	movlb	0	; () banked
  8737  00348E  1F66               	comf	??___ftge& (0+255),f,b
  8738  003490  1F67               	comf	(??___ftge+1)& (0+255),f,b
  8739  003492  1F68               	comf	(??___ftge+2)& (0+255),f,b
  8740  003494  2B66               	incf	??___ftge& (0+255),f,b
  8741  003496  0E00               	movlw	0
  8742  003498  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  8743  00349A  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  8744  00349C  0E00               	movlw	0
  8745  00349E  0100               	movlb	0	; () banked
  8746  0034A0  2566               	addwf	??___ftge& (0+255),w,b
  8747  0034A2  0100               	movlb	0	; () banked
  8748  0034A4  6F63               	movwf	___ftge@ff2& (0+255),b
  8749  0034A6  0E00               	movlw	0
  8750  0034A8  0100               	movlb	0	; () banked
  8751  0034AA  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  8752  0034AC  0100               	movlb	0	; () banked
  8753  0034AE  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  8754  0034B0  0E80               	movlw	128
  8755  0034B2  0100               	movlb	0	; () banked
  8756  0034B4  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  8757  0034B6  0100               	movlb	0	; () banked
  8758  0034B8  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  8759  0034BA                     l5210:
  8760                           
  8761                           ; BSR set to: 0
  8762  0034BA  0E00               	movlw	0
  8763  0034BC  0100               	movlb	0	; () banked
  8764  0034BE  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  8765  0034C0  0E00               	movlw	0
  8766  0034C2  0100               	movlb	0	; () banked
  8767  0034C4  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8768  0034C6  0E80               	movlw	128
  8769  0034C8  0100               	movlb	0	; () banked
  8770  0034CA  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8771                           
  8772                           ; BSR set to: 0
  8773  0034CC  0E00               	movlw	0
  8774  0034CE  0100               	movlb	0	; () banked
  8775  0034D0  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  8776  0034D2  0E00               	movlw	0
  8777  0034D4  0100               	movlb	0	; () banked
  8778  0034D6  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8779  0034D8  0E80               	movlw	128
  8780  0034DA  0100               	movlb	0	; () banked
  8781  0034DC  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8782  0034DE  0100               	movlb	0	; () banked
  8783  0034E0  5163               	movf	___ftge@ff2& (0+255),w,b
  8784  0034E2  0100               	movlb	0	; () banked
  8785  0034E4  5D60               	subwf	___ftge@ff1& (0+255),w,b
  8786  0034E6  0100               	movlb	0	; () banked
  8787  0034E8  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  8788  0034EA  0100               	movlb	0	; () banked
  8789  0034EC  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8790  0034EE  0100               	movlb	0	; () banked
  8791  0034F0  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  8792  0034F2  0100               	movlb	0	; () banked
  8793  0034F4  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8794  0034F6  B0D8               	btfsc	status,0,c
  8795  0034F8  D002               	goto	l5216
  8796                           
  8797                           ; BSR set to: 0
  8798  0034FA  90D8               	bcf	status,0,c
  8799  0034FC  0012               	return	
  8800  0034FE                     l5216:
  8801                           
  8802                           ; BSR set to: 0
  8803  0034FE  80D8               	bsf	status,0,c
  8804  003500  0012               	return	
  8805  003502                     __end_of___ftge:
  8806                           	opt stack 0
  8807                           tblptru	equ	0xFF8
  8808                           tblptrh	equ	0xFF7
  8809                           tblptrl	equ	0xFF6
  8810                           tablat	equ	0xFF5
  8811                           prodh	equ	0xFF4
  8812                           prodl	equ	0xFF3
  8813                           intcon	equ	0xFF2
  8814                           intcon2	equ	0xFF1
  8815                           postinc0	equ	0xFEE
  8816                           wreg	equ	0xFE8
  8817                           postinc1	equ	0xFE6
  8818                           postdec1	equ	0xFE5
  8819                           fsr1h	equ	0xFE2
  8820                           fsr1l	equ	0xFE1
  8821                           indf2	equ	0xFDF
  8822                           postinc2	equ	0xFDE
  8823                           postdec2	equ	0xFDD
  8824                           fsr2h	equ	0xFDA
  8825                           fsr2l	equ	0xFD9
  8826                           status	equ	0xFD8
  8827                           
  8828 ;; *************** function _Battery_Convert *****************
  8829 ;; Defined at:
  8830 ;;		line 34 in file "Battery.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;		None
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;  x               2   53[BANK0 ] int 
  8835 ;; Return value:  Size  Location     Type
  8836 ;;		None               void
  8837 ;; Registers used:
  8838 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8839 ;; Tracked objects:
  8840 ;;		On entry : 0/0
  8841 ;;		On exit  : 0/0
  8842 ;;		Unchanged: 0/0
  8843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8844 ;;      Params:         0       0       0       0       0       0       0
  8845 ;;      Locals:         0       2       0       0       0       0       0
  8846 ;;      Temps:          0       2       0       0       0       0       0
  8847 ;;      Totals:         0       4       0       0       0       0       0
  8848 ;;Total ram usage:        4 bytes
  8849 ;; Hardware stack levels used:    1
  8850 ;; Hardware stack levels required when called:    7
  8851 ;; This function calls:
  8852 ;;		_Battery_Filter
  8853 ;;		___altoft
  8854 ;;		___ftadd
  8855 ;;		___ftdiv
  8856 ;;		___ftmul
  8857 ;;		___wmul
  8858 ;; This function is called by:
  8859 ;;		_main
  8860 ;; This function uses a non-reentrant model
  8861 ;;
  8862                           
  8863                           	psect	text37
  8864  003060                     __ptext37:
  8865                           	opt stack 0
  8866  003060                     _Battery_Convert:
  8867                           	opt stack 23
  8868                           
  8869                           ;Battery.c: 36: int x;
  8870                           ;Battery.c: 37: for(x = 0; x < 9; x++)
  8871                           
  8872                           ; BSR set to: 0
  8873                           ;incstack = 0
  8874  003060  0E00               	movlw	0
  8875  003062  0100               	movlb	0	; () banked
  8876  003064  6F96               	movwf	(Battery_Convert@x+1)& (0+255),b
  8877  003066  0E00               	movlw	0
  8878  003068  0100               	movlb	0	; () banked
  8879  00306A  6F95               	movwf	Battery_Convert@x& (0+255),b
  8880  00306C                     
  8881                           ; BSR set to: 0
  8882  00306C  0100               	movlb	0	; () banked
  8883  00306E  5196               	movf	(Battery_Convert@x+1)& (0+255),w,b
  8884  003070  0A80               	xorlw	128
  8885  003072  0F80               	addlw	-128
  8886  003074  0E09               	movlw	9
  8887  003076  B4D8               	btfsc	status,2,c
  8888  003078  5D95               	subwf	Battery_Convert@x& (0+255),w,b
  8889  00307A  B0D8               	btfsc	status,0,c
  8890  00307C  D06F               	goto	l5330
  8891                           
  8892                           ; BSR set to: 0
  8893                           ;Battery.c: 38: {
  8894                           ;Battery.c: 39: TempBattery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0) + 0.05;
  8895                           
  8896                           ; BSR set to: 0
  8897                           
  8898                           ; BSR set to: 0
  8899  00307E  C095  F029         	movff	Battery_Convert@x,___wmul@multiplier
  8900  003082  C096  F02A         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  8901  003086  0E00               	movlw	0
  8902  003088  6E2C               	movwf	___wmul@multiplicand+1,c
  8903  00308A  0E03               	movlw	3
  8904  00308C  6E2B               	movwf	___wmul@multiplicand,c
  8905  00308E  EC09  F01F         	call	___wmul	;wreg free
  8906  003092  0101               	movlb	1	; () banked
  8907  003094  0EAA               	movlw	low _TempBattery_Volt
  8908  003096  2429               	addwf	?___wmul,w,c
  8909  003098  6ED9               	movwf	fsr2l,c
  8910  00309A  0101               	movlb	1	; () banked
  8911  00309C  0E01               	movlw	high _TempBattery_Volt
  8912  00309E  202A               	addwfc	?___wmul+1,w,c
  8913  0030A0  6EDA               	movwf	fsr2h,c
  8914  0030A2  0E00               	movlw	0
  8915  0030A4  0100               	movlb	0	; () banked
  8916  0030A6  6F6F               	movwf	___ftmul@f2& (0+255),b
  8917  0030A8  0EA0               	movlw	160
  8918  0030AA  0100               	movlb	0	; () banked
  8919  0030AC  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  8920  0030AE  0E40               	movlw	64
  8921  0030B0  0100               	movlb	0	; () banked
  8922  0030B2  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  8923  0030B4  0E00               	movlw	0
  8924  0030B6  0100               	movlb	0	; () banked
  8925  0030B8  6F63               	movwf	___ftdiv@f2& (0+255),b
  8926  0030BA  0E80               	movlw	128
  8927  0030BC  0100               	movlb	0	; () banked
  8928  0030BE  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  8929  0030C0  0E44               	movlw	68
  8930  0030C2  0100               	movlb	0	; () banked
  8931  0030C4  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  8932  0030C6  0EB6               	movlw	low _Battery_Adc
  8933  0030C8  0100               	movlb	0	; () banked
  8934  0030CA  6F93               	movwf	??_Battery_Convert& (0+255),b
  8935  0030CC  0E00               	movlw	high _Battery_Adc
  8936  0030CE  6F94               	movwf	(??_Battery_Convert+1)& (0+255),b
  8937  0030D0  90D8               	bcf	status,0,c
  8938  0030D2  0100               	movlb	0	; () banked
  8939  0030D4  3595               	rlcf	Battery_Convert@x& (0+255),w,b
  8940  0030D6  6EE1               	movwf	fsr1l,c
  8941  0030D8  0100               	movlb	0	; () banked
  8942  0030DA  3596               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  8943  0030DC  6EE2               	movwf	fsr1h,c
  8944  0030DE  90D8               	bcf	status,0,c
  8945  0030E0  36E1               	rlcf	fsr1l,f,c
  8946  0030E2  36E2               	rlcf	fsr1h,f,c
  8947  0030E4  0100               	movlb	0	; () banked
  8948  0030E6  5193               	movf	??_Battery_Convert& (0+255),w,b
  8949  0030E8  26E1               	addwf	fsr1l,f,c
  8950  0030EA  0100               	movlb	0	; () banked
  8951  0030EC  5194               	movf	(??_Battery_Convert+1)& (0+255),w,b
  8952  0030EE  22E2               	addwfc	fsr1h,f,c
  8953  0030F0  CFE6 F023          	movff	postinc1,___altoft@c
  8954  0030F4  CFE6 F024          	movff	postinc1,___altoft@c+1
  8955  0030F8  CFE6 F025          	movff	postinc1,___altoft@c+2
  8956  0030FC  CFE6 F026          	movff	postinc1,___altoft@c+3
  8957  003100  EC7F  F01C         	call	___altoft	;wreg free
  8958  003104  C023  F060         	movff	?___altoft,___ftdiv@f1
  8959  003108  C024  F061         	movff	?___altoft+1,___ftdiv@f1+1
  8960  00310C  C025  F062         	movff	?___altoft+2,___ftdiv@f1+2
  8961  003110  ECF1  F016         	call	___ftdiv	;wreg free
  8962  003114  C060  F06C         	movff	?___ftdiv,___ftmul@f1
  8963  003118  C061  F06D         	movff	?___ftdiv+1,___ftmul@f1+1
  8964  00311C  C062  F06E         	movff	?___ftdiv+2,___ftmul@f1+2
  8965  003120  ECCB  F014         	call	___ftmul	;wreg free
  8966  003124  C06C  F085         	movff	?___ftmul,___ftadd@f1
  8967  003128  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  8968  00312C  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  8969  003130  0ECD               	movlw	205
  8970  003132  0100               	movlb	0	; () banked
  8971  003134  6F88               	movwf	___ftadd@f2& (0+255),b
  8972  003136  0E4C               	movlw	76
  8973  003138  0100               	movlb	0	; () banked
  8974  00313A  6F89               	movwf	(___ftadd@f2+1)& (0+255),b
  8975  00313C  0E3D               	movlw	61
  8976  00313E  0100               	movlb	0	; () banked
  8977  003140  6F8A               	movwf	(___ftadd@f2+2)& (0+255),b
  8978  003142  EC3B  F010         	call	___ftadd	;wreg free
  8979  003146  C085  FFDE         	movff	?___ftadd,postinc2
  8980  00314A  C086  FFDE         	movff	?___ftadd+1,postinc2
  8981  00314E  C087  FFDD         	movff	?___ftadd+2,postdec2
  8982  003152  52DD               	movf	postdec2,f,c
  8983  003154  0100               	movlb	0	; () banked
  8984  003156  4B95               	infsnz	Battery_Convert@x& (0+255),f,b
  8985  003158  2B96               	incf	(Battery_Convert@x+1)& (0+255),f,b
  8986  00315A  D788               	goto	L13
  8987  00315C                     l5330:
  8988                           
  8989                           ; BSR set to: 0
  8990                           ;Battery.c: 40: }
  8991                           ;Battery.c: 41: Battery_Filter();
  8992  00315C  EC49  F013         	call	_Battery_Filter	;wreg free
  8993  003160  0012               	return	
  8994  003162                     __end_of_Battery_Convert:
  8995                           	opt stack 0
  8996                           tblptru	equ	0xFF8
  8997                           tblptrh	equ	0xFF7
  8998                           tblptrl	equ	0xFF6
  8999                           tablat	equ	0xFF5
  9000                           prodh	equ	0xFF4
  9001                           prodl	equ	0xFF3
  9002                           intcon	equ	0xFF2
  9003                           intcon2	equ	0xFF1
  9004                           postinc0	equ	0xFEE
  9005                           wreg	equ	0xFE8
  9006                           postinc1	equ	0xFE6
  9007                           postdec1	equ	0xFE5
  9008                           fsr1h	equ	0xFE2
  9009                           fsr1l	equ	0xFE1
  9010                           indf2	equ	0xFDF
  9011                           postinc2	equ	0xFDE
  9012                           postdec2	equ	0xFDD
  9013                           fsr2h	equ	0xFDA
  9014                           fsr2l	equ	0xFD9
  9015                           status	equ	0xFD8
  9016                           
  9017 ;; *************** function ___ftdiv *****************
  9018 ;; Defined at:
  9019 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  f1              3    0[BANK0 ] float 
  9022 ;;  f2              3    3[BANK0 ] float 
  9023 ;; Auto vars:     Size  Location     Type
  9024 ;;  f3              3    7[BANK0 ] float 
  9025 ;;  sign            1   11[BANK0 ] unsigned char 
  9026 ;;  exp             1   10[BANK0 ] unsigned char 
  9027 ;;  cntr            1    6[BANK0 ] unsigned char 
  9028 ;; Return value:  Size  Location     Type
  9029 ;;                  3    0[BANK0 ] float 
  9030 ;; Registers used:
  9031 ;;		wreg, status,2, status,0, cstack
  9032 ;; Tracked objects:
  9033 ;;		On entry : 0/0
  9034 ;;		On exit  : 0/0
  9035 ;;		Unchanged: 0/0
  9036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9037 ;;      Params:         0       6       0       0       0       0       0
  9038 ;;      Locals:         0       6       0       0       0       0       0
  9039 ;;      Temps:          3       0       0       0       0       0       0
  9040 ;;      Totals:         3      12       0       0       0       0       0
  9041 ;;Total ram usage:       15 bytes
  9042 ;; Hardware stack levels used:    1
  9043 ;; Hardware stack levels required when called:    5
  9044 ;; This function calls:
  9045 ;;		___ftpack
  9046 ;; This function is called by:
  9047 ;;		_Battery_Convert
  9048 ;;		_Temp_Convert
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           	psect	text38
  9053  002DE2                     __ptext38:
  9054                           	opt stack 0
  9055  002DE2                     ___ftdiv:
  9056                           	opt stack 24
  9057                           
  9058                           ;incstack = 0
  9059  002DE2  0100               	movlb	0	; () banked
  9060  002DE4  C062  F02D         	movff	___ftdiv@f1+2,??___ftdiv
  9061  002DE8  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
  9062  002DEA  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
  9063  002DEC  0100               	movlb	0	; () banked
  9064  002DEE  3561               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  9065  002DF0  362D               	rlcf	??___ftdiv& (0+255),f,c
  9066  002DF2  E301               	bnc	u5541
  9067  002DF4  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
  9068  002DF6                     u5541:
  9069  002DF6  502D               	movf	??___ftdiv,w,c
  9070  002DF8  0100               	movlb	0	; () banked
  9071  002DFA  6F6A               	movwf	___ftdiv@exp& (0+255),b
  9072  002DFC  0100               	movlb	0	; () banked
  9073  002DFE  676A               	tstfsz	___ftdiv@exp& (0+255),b
  9074  002E00  D00A               	goto	l5156
  9075                           
  9076                           ; BSR set to: 0
  9077  002E02  0E00               	movlw	0
  9078  002E04  0100               	movlb	0	; () banked
  9079  002E06  6F60               	movwf	?___ftdiv& (0+255),b
  9080  002E08  0E00               	movlw	0
  9081  002E0A  0100               	movlb	0	; () banked
  9082  002E0C  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  9083  002E0E  0E00               	movlw	0
  9084  002E10  0100               	movlb	0	; () banked
  9085  002E12  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  9086  002E14  0012               	return	
  9087  002E16                     l5156:
  9088                           
  9089                           ; BSR set to: 0
  9090  002E16  0100               	movlb	0	; () banked
  9091  002E18  C065  F02D         	movff	___ftdiv@f2+2,??___ftdiv
  9092  002E1C  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
  9093  002E1E  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
  9094  002E20  0100               	movlb	0	; () banked
  9095  002E22  3564               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  9096  002E24  362D               	rlcf	??___ftdiv& (0+255),f,c
  9097  002E26  E301               	bnc	u5561
  9098  002E28  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
  9099  002E2A                     u5561:
  9100  002E2A  502D               	movf	??___ftdiv,w,c
  9101  002E2C  0100               	movlb	0	; () banked
  9102  002E2E  6F6B               	movwf	___ftdiv@sign& (0+255),b
  9103  002E30  0100               	movlb	0	; () banked
  9104  002E32  676B               	tstfsz	___ftdiv@sign& (0+255),b
  9105  002E34  D00A               	goto	l5162
  9106                           
  9107                           ; BSR set to: 0
  9108  002E36  0E00               	movlw	0
  9109  002E38  0100               	movlb	0	; () banked
  9110  002E3A  6F60               	movwf	?___ftdiv& (0+255),b
  9111  002E3C  0E00               	movlw	0
  9112  002E3E  0100               	movlb	0	; () banked
  9113  002E40  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  9114  002E42  0E00               	movlw	0
  9115  002E44  0100               	movlb	0	; () banked
  9116  002E46  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  9117  002E48  0012               	return	
  9118  002E4A                     l5162:
  9119                           
  9120                           ; BSR set to: 0
  9121  002E4A  0E00               	movlw	0
  9122  002E4C  0100               	movlb	0	; () banked
  9123  002E4E  6F67               	movwf	___ftdiv@f3& (0+255),b
  9124  002E50  0E00               	movlw	0
  9125  002E52  0100               	movlb	0	; () banked
  9126  002E54  6F68               	movwf	(___ftdiv@f3+1)& (0+255),b
  9127  002E56  0E00               	movlw	0
  9128  002E58  0100               	movlb	0	; () banked
  9129  002E5A  6F69               	movwf	(___ftdiv@f3+2)& (0+255),b
  9130                           
  9131                           ; BSR set to: 0
  9132  002E5C  0100               	movlb	0	; () banked
  9133  002E5E  516B               	movf	___ftdiv@sign& (0+255),w,b
  9134  002E60  0F89               	addlw	137
  9135  002E62  0100               	movlb	0	; () banked
  9136  002E64  5F6A               	subwf	___ftdiv@exp& (0+255),f,b
  9137                           
  9138                           ; BSR set to: 0
  9139  002E66  C062  F06B         	movff	___ftdiv@f1+2,___ftdiv@sign
  9140                           
  9141                           ; BSR set to: 0
  9142  002E6A  0100               	movlb	0	; () banked
  9143  002E6C  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9144  002E6E  0100               	movlb	0	; () banked
  9145  002E70  1B6B               	xorwf	___ftdiv@sign& (0+255),f,b
  9146                           
  9147                           ; BSR set to: 0
  9148  002E72  0E80               	movlw	128
  9149  002E74  0100               	movlb	0	; () banked
  9150  002E76  176B               	andwf	___ftdiv@sign& (0+255),f,b
  9151                           
  9152                           ; BSR set to: 0
  9153  002E78  0100               	movlb	0	; () banked
  9154  002E7A  8F61               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  9155                           
  9156                           ; BSR set to: 0
  9157  002E7C  0EFF               	movlw	255
  9158  002E7E  0100               	movlb	0	; () banked
  9159  002E80  1760               	andwf	___ftdiv@f1& (0+255),f,b
  9160  002E82  0EFF               	movlw	255
  9161  002E84  0100               	movlb	0	; () banked
  9162  002E86  1761               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  9163  002E88  0E00               	movlw	0
  9164  002E8A  0100               	movlb	0	; () banked
  9165  002E8C  1762               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  9166                           
  9167                           ; BSR set to: 0
  9168  002E8E  0100               	movlb	0	; () banked
  9169  002E90  8F64               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  9170                           
  9171                           ; BSR set to: 0
  9172  002E92  0EFF               	movlw	255
  9173  002E94  0100               	movlb	0	; () banked
  9174  002E96  1763               	andwf	___ftdiv@f2& (0+255),f,b
  9175  002E98  0EFF               	movlw	255
  9176  002E9A  0100               	movlb	0	; () banked
  9177  002E9C  1764               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  9178  002E9E  0E00               	movlw	0
  9179  002EA0  0100               	movlb	0	; () banked
  9180  002EA2  1765               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  9181                           
  9182                           ; BSR set to: 0
  9183  002EA4  0E18               	movlw	24
  9184  002EA6  0100               	movlb	0	; () banked
  9185  002EA8  6F66               	movwf	___ftdiv@cntr& (0+255),b
  9186  002EAA                     l5182:
  9187                           
  9188                           ; BSR set to: 0
  9189  002EAA  0100               	movlb	0	; () banked
  9190  002EAC  90D8               	bcf	status,0,c
  9191  002EAE  0100               	movlb	0	; () banked
  9192  002EB0  3767               	rlcf	___ftdiv@f3& (0+255),f,b
  9193  002EB2  0100               	movlb	0	; () banked
  9194  002EB4  3768               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  9195  002EB6  0100               	movlb	0	; () banked
  9196  002EB8  3769               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  9197                           
  9198                           ; BSR set to: 0
  9199  002EBA  0100               	movlb	0	; () banked
  9200  002EBC  5163               	movf	___ftdiv@f2& (0+255),w,b
  9201  002EBE  0100               	movlb	0	; () banked
  9202  002EC0  5D60               	subwf	___ftdiv@f1& (0+255),w,b
  9203  002EC2  0100               	movlb	0	; () banked
  9204  002EC4  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9205  002EC6  0100               	movlb	0	; () banked
  9206  002EC8  5961               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  9207  002ECA  0100               	movlb	0	; () banked
  9208  002ECC  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9209  002ECE  0100               	movlb	0	; () banked
  9210  002ED0  5962               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  9211  002ED2  A0D8               	btfss	status,0,c
  9212  002ED4  D00E               	goto	l1111
  9213                           
  9214                           ; BSR set to: 0
  9215  002ED6  0100               	movlb	0	; () banked
  9216  002ED8  5163               	movf	___ftdiv@f2& (0+255),w,b
  9217  002EDA  0100               	movlb	0	; () banked
  9218  002EDC  5F60               	subwf	___ftdiv@f1& (0+255),f,b
  9219  002EDE  0100               	movlb	0	; () banked
  9220  002EE0  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9221  002EE2  0100               	movlb	0	; () banked
  9222  002EE4  5B61               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  9223  002EE6  0100               	movlb	0	; () banked
  9224  002EE8  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9225  002EEA  0100               	movlb	0	; () banked
  9226  002EEC  5B62               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  9227                           
  9228                           ; BSR set to: 0
  9229  002EEE  0100               	movlb	0	; () banked
  9230  002EF0  8167               	bsf	___ftdiv@f3& (0+255),0,b
  9231  002EF2                     l1111:
  9232                           
  9233                           ; BSR set to: 0
  9234  002EF2  0100               	movlb	0	; () banked
  9235  002EF4  90D8               	bcf	status,0,c
  9236  002EF6  0100               	movlb	0	; () banked
  9237  002EF8  3760               	rlcf	___ftdiv@f1& (0+255),f,b
  9238  002EFA  0100               	movlb	0	; () banked
  9239  002EFC  3761               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  9240  002EFE  0100               	movlb	0	; () banked
  9241  002F00  3762               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  9242                           
  9243                           ; BSR set to: 0
  9244  002F02  0100               	movlb	0	; () banked
  9245  002F04  2F66               	decfsz	___ftdiv@cntr& (0+255),f,b
  9246  002F06  D7D1               	goto	l5182
  9247                           
  9248                           ; BSR set to: 0
  9249                           
  9250                           ; BSR set to: 0
  9251  002F08  C067  F01B         	movff	___ftdiv@f3,___ftpack@arg
  9252  002F0C  C068  F01C         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9253  002F10  C069  F01D         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9254  002F14  C06A  F01E         	movff	___ftdiv@exp,___ftpack@exp
  9255  002F18  C06B  F01F         	movff	___ftdiv@sign,___ftpack@sign
  9256  002F1C  EC48  F01B         	call	___ftpack	;wreg free
  9257  002F20  C01B  F060         	movff	?___ftpack,?___ftdiv
  9258  002F24  C01C  F061         	movff	?___ftpack+1,?___ftdiv+1
  9259  002F28  C01D  F062         	movff	?___ftpack+2,?___ftdiv+2
  9260  002F2C  0012               	return	
  9261  002F2E                     __end_of___ftdiv:
  9262                           	opt stack 0
  9263                           tblptru	equ	0xFF8
  9264                           tblptrh	equ	0xFF7
  9265                           tblptrl	equ	0xFF6
  9266                           tablat	equ	0xFF5
  9267                           prodh	equ	0xFF4
  9268                           prodl	equ	0xFF3
  9269                           intcon	equ	0xFF2
  9270                           intcon2	equ	0xFF1
  9271                           postinc0	equ	0xFEE
  9272                           wreg	equ	0xFE8
  9273                           postinc1	equ	0xFE6
  9274                           postdec1	equ	0xFE5
  9275                           fsr1h	equ	0xFE2
  9276                           fsr1l	equ	0xFE1
  9277                           indf2	equ	0xFDF
  9278                           postinc2	equ	0xFDE
  9279                           postdec2	equ	0xFDD
  9280                           fsr2h	equ	0xFDA
  9281                           fsr2l	equ	0xFD9
  9282                           status	equ	0xFD8
  9283                           
  9284 ;; *************** function ___altoft *****************
  9285 ;; Defined at:
  9286 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\altoft.c"
  9287 ;; Parameters:    Size  Location     Type
  9288 ;;  c               4   34[COMRAM] long 
  9289 ;; Auto vars:     Size  Location     Type
  9290 ;;  sign            1   43[COMRAM] unsigned char 
  9291 ;;  exp             1   42[COMRAM] unsigned char 
  9292 ;; Return value:  Size  Location     Type
  9293 ;;                  3   34[COMRAM] float 
  9294 ;; Registers used:
  9295 ;;		wreg, status,2, status,0, cstack
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9301 ;;      Params:         4       0       0       0       0       0       0
  9302 ;;      Locals:         2       0       0       0       0       0       0
  9303 ;;      Temps:          4       0       0       0       0       0       0
  9304 ;;      Totals:        10       0       0       0       0       0       0
  9305 ;;Total ram usage:       10 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; Hardware stack levels required when called:    5
  9308 ;; This function calls:
  9309 ;;		___ftpack
  9310 ;; This function is called by:
  9311 ;;		_Battery_Convert
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315                           	psect	text39
  9316  0038FE                     __ptext39:
  9317                           	opt stack 0
  9318  0038FE                     ___altoft:
  9319                           	opt stack 24
  9320                           
  9321                           ;incstack = 0
  9322  0038FE  0E00               	movlw	0
  9323  003900  6E2C               	movwf	___altoft@sign,c
  9324  003902  0E8E               	movlw	142
  9325  003904  6E2B               	movwf	___altoft@exp,c
  9326  003906  5026               	movf	___altoft@c+3,w,c
  9327  003908  0A80               	xorlw	128
  9328  00390A  0F80               	addlw	128
  9329  00390C  E108               	bnz	u5525
  9330  00390E  0E00               	movlw	0
  9331  003910  5C25               	subwf	___altoft@c+2,w,c
  9332  003912  E105               	bnz	u5525
  9333  003914  0E00               	movlw	0
  9334  003916  5C24               	subwf	___altoft@c+1,w,c
  9335  003918  E102               	bnz	u5525
  9336  00391A  0E00               	movlw	0
  9337  00391C  5C23               	subwf	___altoft@c,w,c
  9338  00391E                     u5525:
  9339  00391E  B0D8               	btfsc	status,0,c
  9340  003920  D011               	goto	l5144
  9341  003922  1E26               	comf	___altoft@c+3,f,c
  9342  003924  1E25               	comf	___altoft@c+2,f,c
  9343  003926  1E24               	comf	___altoft@c+1,f,c
  9344  003928  6C23               	negf	___altoft@c,c
  9345  00392A  0E00               	movlw	0
  9346  00392C  2224               	addwfc	___altoft@c+1,f,c
  9347  00392E  2225               	addwfc	___altoft@c+2,f,c
  9348  003930  2226               	addwfc	___altoft@c+3,f,c
  9349  003932  0E01               	movlw	1
  9350  003934  6E2C               	movwf	___altoft@sign,c
  9351  003936  D006               	goto	l5144
  9352  003938                     l5142:
  9353  003938  90D8               	bcf	status,0,c
  9354  00393A  3226               	rrcf	___altoft@c+3,f,c
  9355  00393C  3225               	rrcf	___altoft@c+2,f,c
  9356  00393E  3224               	rrcf	___altoft@c+1,f,c
  9357  003940  3223               	rrcf	___altoft@c,f,c
  9358  003942  2A2B               	incf	___altoft@exp,f,c
  9359  003944                     l5144:
  9360  003944  0E00               	movlw	0
  9361  003946  1423               	andwf	___altoft@c,w,c
  9362  003948  6E27               	movwf	??___altoft& (0+255),c
  9363  00394A  0E00               	movlw	0
  9364  00394C  1424               	andwf	___altoft@c+1,w,c
  9365  00394E  6E28               	movwf	(??___altoft+1)& (0+255),c
  9366  003950  0E00               	movlw	0
  9367  003952  1425               	andwf	___altoft@c+2,w,c
  9368  003954  6E29               	movwf	(??___altoft+2)& (0+255),c
  9369  003956  0EFF               	movlw	255
  9370  003958  1426               	andwf	___altoft@c+3,w,c
  9371  00395A  6E2A               	movwf	(??___altoft+3)& (0+255),c
  9372  00395C  502A               	movf	??___altoft+3,w,c
  9373  00395E  1027               	iorwf	??___altoft,w,c
  9374  003960  1028               	iorwf	??___altoft+1,w,c
  9375  003962  1029               	iorwf	??___altoft+2,w,c
  9376  003964  A4D8               	btfss	status,2,c
  9377  003966  D7E8               	goto	l5142
  9378  003968  C023  F01B         	movff	___altoft@c,___ftpack@arg
  9379  00396C  C024  F01C         	movff	___altoft@c+1,___ftpack@arg+1
  9380  003970  C025  F01D         	movff	___altoft@c+2,___ftpack@arg+2
  9381  003974  C02B  F01E         	movff	___altoft@exp,___ftpack@exp
  9382  003978  C02C  F01F         	movff	___altoft@sign,___ftpack@sign
  9383  00397C  EC48  F01B         	call	___ftpack	;wreg free
  9384  003980  C01B  F023         	movff	?___ftpack,?___altoft
  9385  003984  C01C  F024         	movff	?___ftpack+1,?___altoft+1
  9386  003988  C01D  F025         	movff	?___ftpack+2,?___altoft+2
  9387  00398C  0012               	return	
  9388  00398E                     __end_of___altoft:
  9389                           	opt stack 0
  9390                           tblptru	equ	0xFF8
  9391                           tblptrh	equ	0xFF7
  9392                           tblptrl	equ	0xFF6
  9393                           tablat	equ	0xFF5
  9394                           prodh	equ	0xFF4
  9395                           prodl	equ	0xFF3
  9396                           intcon	equ	0xFF2
  9397                           intcon2	equ	0xFF1
  9398                           postinc0	equ	0xFEE
  9399                           wreg	equ	0xFE8
  9400                           postinc1	equ	0xFE6
  9401                           postdec1	equ	0xFE5
  9402                           fsr1h	equ	0xFE2
  9403                           fsr1l	equ	0xFE1
  9404                           indf2	equ	0xFDF
  9405                           postinc2	equ	0xFDE
  9406                           postdec2	equ	0xFDD
  9407                           fsr2h	equ	0xFDA
  9408                           fsr2l	equ	0xFD9
  9409                           status	equ	0xFD8
  9410                           
  9411 ;; *************** function _Battery_Filter *****************
  9412 ;; Defined at:
  9413 ;;		line 51 in file "Battery.c"
  9414 ;; Parameters:    Size  Location     Type
  9415 ;;		None
  9416 ;; Auto vars:     Size  Location     Type
  9417 ;;  x               2   49[BANK0 ] int 
  9418 ;; Return value:  Size  Location     Type
  9419 ;;		None               void
  9420 ;; Registers used:
  9421 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9422 ;; Tracked objects:
  9423 ;;		On entry : 0/0
  9424 ;;		On exit  : 0/0
  9425 ;;		Unchanged: 0/0
  9426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9427 ;;      Params:         0       0       0       0       0       0       0
  9428 ;;      Locals:         0       2       0       0       0       0       0
  9429 ;;      Temps:          0       0       0       0       0       0       0
  9430 ;;      Totals:         0       2       0       0       0       0       0
  9431 ;;Total ram usage:        2 bytes
  9432 ;; Hardware stack levels used:    1
  9433 ;; Hardware stack levels required when called:    6
  9434 ;; This function calls:
  9435 ;;		___ftadd
  9436 ;;		___ftmul
  9437 ;;		___wmul
  9438 ;; This function is called by:
  9439 ;;		_Battery_Convert
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           	psect	text40
  9444  002692                     __ptext40:
  9445                           	opt stack 0
  9446  002692                     _Battery_Filter:
  9447                           	opt stack 23
  9448                           
  9449                           ;Battery.c: 54: int x;
  9450                           ;Battery.c: 55: for(x = 0; x < 9; x++)
  9451                           
  9452                           ;incstack = 0
  9453  002692  0E00               	movlw	0
  9454  002694  0100               	movlb	0	; () banked
  9455  002696  6F92               	movwf	(Battery_Filter@x+1)& (0+255),b
  9456  002698  0E00               	movlw	0
  9457  00269A  0100               	movlb	0	; () banked
  9458  00269C  6F91               	movwf	Battery_Filter@x& (0+255),b
  9459  00269E                     
  9460                           ; BSR set to: 0
  9461  00269E  0100               	movlb	0	; () banked
  9462  0026A0  5192               	movf	(Battery_Filter@x+1)& (0+255),w,b
  9463  0026A2  0A80               	xorlw	128
  9464  0026A4  0F80               	addlw	-128
  9465  0026A6  0E09               	movlw	9
  9466  0026A8  B4D8               	btfsc	status,2,c
  9467  0026AA  5D91               	subwf	Battery_Filter@x& (0+255),w,b
  9468  0026AC  B0D8               	btfsc	status,0,c
  9469  0026AE  D077               	goto	l4858
  9470                           
  9471                           ; BSR set to: 0
  9472                           ;Battery.c: 56: {
  9473                           ;Battery.c: 57: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
  9474                           
  9475                           ; BSR set to: 0
  9476                           
  9477                           ; BSR set to: 0
  9478  0026B0  C091  F029         	movff	Battery_Filter@x,___wmul@multiplier
  9479  0026B4  C092  F02A         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  9480  0026B8  0E00               	movlw	0
  9481  0026BA  6E2C               	movwf	___wmul@multiplicand+1,c
  9482  0026BC  0E03               	movlw	3
  9483  0026BE  6E2B               	movwf	___wmul@multiplicand,c
  9484  0026C0  EC09  F01F         	call	___wmul	;wreg free
  9485  0026C4  0101               	movlb	1	; () banked
  9486  0026C6  0E32               	movlw	low _Battery_Volt
  9487  0026C8  2429               	addwf	?___wmul,w,c
  9488  0026CA  6ED9               	movwf	fsr2l,c
  9489  0026CC  0101               	movlb	1	; () banked
  9490  0026CE  0E01               	movlw	high _Battery_Volt
  9491  0026D0  202A               	addwfc	?___wmul+1,w,c
  9492  0026D2  6EDA               	movwf	fsr2h,c
  9493  0026D4  0E48               	movlw	72
  9494  0026D6  0100               	movlb	0	; () banked
  9495  0026D8  6F6F               	movwf	___ftmul@f2& (0+255),b
  9496  0026DA  0E61               	movlw	97
  9497  0026DC  0100               	movlb	0	; () banked
  9498  0026DE  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  9499  0026E0  0E3F               	movlw	63
  9500  0026E2  0100               	movlb	0	; () banked
  9501  0026E4  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  9502  0026E6  C091  F029         	movff	Battery_Filter@x,___wmul@multiplier
  9503  0026EA  C092  F02A         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  9504  0026EE  0E00               	movlw	0
  9505  0026F0  6E2C               	movwf	___wmul@multiplicand+1,c
  9506  0026F2  0E03               	movlw	3
  9507  0026F4  6E2B               	movwf	___wmul@multiplicand,c
  9508  0026F6  EC09  F01F         	call	___wmul	;wreg free
  9509  0026FA  0101               	movlb	1	; () banked
  9510  0026FC  0EAA               	movlw	low _TempBattery_Volt
  9511  0026FE  2429               	addwf	?___wmul,w,c
  9512  002700  6EE1               	movwf	fsr1l,c
  9513  002702  0101               	movlb	1	; () banked
  9514  002704  0E01               	movlw	high _TempBattery_Volt
  9515  002706  202A               	addwfc	?___wmul+1,w,c
  9516  002708  6EE2               	movwf	fsr1h,c
  9517  00270A  0100               	movlb	0	; () banked
  9518  00270C  CFE6 F06C          	movff	postinc1,___ftmul@f1
  9519  002710  0100               	movlb	0	; () banked
  9520  002712  CFE6 F06D          	movff	postinc1,___ftmul@f1+1
  9521  002716  0100               	movlb	0	; () banked
  9522  002718  CFE5 F06E          	movff	postdec1,___ftmul@f1+2
  9523  00271C  ECCB  F014         	call	___ftmul	;wreg free
  9524  002720  C06C  F085         	movff	?___ftmul,___ftadd@f1
  9525  002724  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  9526  002728  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  9527  00272C  0EC3               	movlw	195
  9528  00272E  0100               	movlb	0	; () banked
  9529  002730  6F6F               	movwf	___ftmul@f2& (0+255),b
  9530  002732  0EF5               	movlw	245
  9531  002734  0100               	movlb	0	; () banked
  9532  002736  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  9533  002738  0E3D               	movlw	61
  9534  00273A  0100               	movlb	0	; () banked
  9535  00273C  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  9536  00273E  0E00               	movlw	0
  9537  002740  6E2C               	movwf	___wmul@multiplicand+1,c
  9538  002742  0E03               	movlw	3
  9539  002744  6E2B               	movwf	___wmul@multiplicand,c
  9540  002746  C091  F029         	movff	Battery_Filter@x,___wmul@multiplier
  9541  00274A  C092  F02A         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  9542  00274E  EC09  F01F         	call	___wmul	;wreg free
  9543  002752  0101               	movlb	1	; () banked
  9544  002754  0E50               	movlw	low _PrevBattery_Volt
  9545  002756  2429               	addwf	?___wmul,w,c
  9546  002758  6EE1               	movwf	fsr1l,c
  9547  00275A  0101               	movlb	1	; () banked
  9548  00275C  0E01               	movlw	high _PrevBattery_Volt
  9549  00275E  202A               	addwfc	?___wmul+1,w,c
  9550  002760  6EE2               	movwf	fsr1h,c
  9551  002762  0100               	movlb	0	; () banked
  9552  002764  CFE6 F06C          	movff	postinc1,___ftmul@f1
  9553  002768  0100               	movlb	0	; () banked
  9554  00276A  CFE6 F06D          	movff	postinc1,___ftmul@f1+1
  9555  00276E  0100               	movlb	0	; () banked
  9556  002770  CFE5 F06E          	movff	postdec1,___ftmul@f1+2
  9557  002774  ECCB  F014         	call	___ftmul	;wreg free
  9558  002778  C06C  F088         	movff	?___ftmul,___ftadd@f2
  9559  00277C  C06D  F089         	movff	?___ftmul+1,___ftadd@f2+1
  9560  002780  C06E  F08A         	movff	?___ftmul+2,___ftadd@f2+2
  9561  002784  EC3B  F010         	call	___ftadd	;wreg free
  9562  002788  C085  FFDE         	movff	?___ftadd,postinc2
  9563  00278C  C086  FFDE         	movff	?___ftadd+1,postinc2
  9564  002790  C087  FFDD         	movff	?___ftadd+2,postdec2
  9565  002794  52DD               	movf	postdec2,f,c
  9566  002796  0100               	movlb	0	; () banked
  9567  002798  4B91               	infsnz	Battery_Filter@x& (0+255),f,b
  9568  00279A  2B92               	incf	(Battery_Filter@x+1)& (0+255),f,b
  9569  00279C  D780               	goto	L14
  9570  00279E                     l4858:
  9571                           
  9572                           ; BSR set to: 0
  9573                           ;Battery.c: 58: }
  9574                           ;Battery.c: 59: for(x = 0; x < 9; x++)
  9575  00279E  0E00               	movlw	0
  9576  0027A0  0100               	movlb	0	; () banked
  9577  0027A2  6F92               	movwf	(Battery_Filter@x+1)& (0+255),b
  9578  0027A4  0E00               	movlw	0
  9579  0027A6  0100               	movlb	0	; () banked
  9580  0027A8  6F91               	movwf	Battery_Filter@x& (0+255),b
  9581  0027AA                     
  9582                           ; BSR set to: 0
  9583  0027AA  0100               	movlb	0	; () banked
  9584  0027AC  5192               	movf	(Battery_Filter@x+1)& (0+255),w,b
  9585  0027AE  0A80               	xorlw	128
  9586  0027B0  0F80               	addlw	-128
  9587  0027B2  0E09               	movlw	9
  9588  0027B4  B4D8               	btfsc	status,2,c
  9589  0027B6  5D91               	subwf	Battery_Filter@x& (0+255),w,b
  9590  0027B8  B0D8               	btfsc	status,0,c
  9591  0027BA  0012               	return	
  9592                           
  9593                           ; BSR set to: 0
  9594                           ;Battery.c: 60: {
  9595                           ;Battery.c: 61: PrevBattery_Volt[x] = Battery_Volt[x];
  9596                           
  9597                           ; BSR set to: 0
  9598                           
  9599                           ; BSR set to: 0
  9600  0027BC  C091  F029         	movff	Battery_Filter@x,___wmul@multiplier
  9601  0027C0  C092  F02A         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  9602  0027C4  0E00               	movlw	0
  9603  0027C6  6E2C               	movwf	___wmul@multiplicand+1,c
  9604  0027C8  0E03               	movlw	3
  9605  0027CA  6E2B               	movwf	___wmul@multiplicand,c
  9606  0027CC  EC09  F01F         	call	___wmul	;wreg free
  9607  0027D0  0101               	movlb	1	; () banked
  9608  0027D2  0E32               	movlw	low _Battery_Volt
  9609  0027D4  2429               	addwf	?___wmul,w,c
  9610  0027D6  6ED9               	movwf	fsr2l,c
  9611  0027D8  0101               	movlb	1	; () banked
  9612  0027DA  0E01               	movlw	high _Battery_Volt
  9613  0027DC  202A               	addwfc	?___wmul+1,w,c
  9614  0027DE  6EDA               	movwf	fsr2h,c
  9615  0027E0  C091  F029         	movff	Battery_Filter@x,___wmul@multiplier
  9616  0027E4  C092  F02A         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  9617  0027E8  0E00               	movlw	0
  9618  0027EA  6E2C               	movwf	___wmul@multiplicand+1,c
  9619  0027EC  0E03               	movlw	3
  9620  0027EE  6E2B               	movwf	___wmul@multiplicand,c
  9621  0027F0  EC09  F01F         	call	___wmul	;wreg free
  9622  0027F4  0101               	movlb	1	; () banked
  9623  0027F6  0E50               	movlw	low _PrevBattery_Volt
  9624  0027F8  2429               	addwf	?___wmul,w,c
  9625  0027FA  6EE1               	movwf	fsr1l,c
  9626  0027FC  0101               	movlb	1	; () banked
  9627  0027FE  0E01               	movlw	high _PrevBattery_Volt
  9628  002800  202A               	addwfc	?___wmul+1,w,c
  9629  002802  6EE2               	movwf	fsr1h,c
  9630  002804  CFDE FFE6          	movff	postinc2,postinc1
  9631  002808  CFDE FFE6          	movff	postinc2,postinc1
  9632  00280C  CFDE FFE5          	movff	postinc2,postdec1
  9633  002810  52E5               	movf	postdec1,f,c
  9634                           
  9635                           ; BSR set to: 1
  9636  002812  0100               	movlb	0	; () banked
  9637  002814  4B91               	infsnz	Battery_Filter@x& (0+255),f,b
  9638  002816  2B92               	incf	(Battery_Filter@x+1)& (0+255),f,b
  9639  002818  D7C8               	goto	L15
  9640  00281A                     __end_of_Battery_Filter:
  9641                           	opt stack 0
  9642                           tblptru	equ	0xFF8
  9643                           tblptrh	equ	0xFF7
  9644                           tblptrl	equ	0xFF6
  9645                           tablat	equ	0xFF5
  9646                           prodh	equ	0xFF4
  9647                           prodl	equ	0xFF3
  9648                           intcon	equ	0xFF2
  9649                           intcon2	equ	0xFF1
  9650                           postinc0	equ	0xFEE
  9651                           wreg	equ	0xFE8
  9652                           postinc1	equ	0xFE6
  9653                           postdec1	equ	0xFE5
  9654                           fsr1h	equ	0xFE2
  9655                           fsr1l	equ	0xFE1
  9656                           indf2	equ	0xFDF
  9657                           postinc2	equ	0xFDE
  9658                           postdec2	equ	0xFDD
  9659                           fsr2h	equ	0xFDA
  9660                           fsr2l	equ	0xFD9
  9661                           status	equ	0xFD8
  9662                           
  9663 ;; *************** function ___wmul *****************
  9664 ;; Defined at:
  9665 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  9666 ;; Parameters:    Size  Location     Type
  9667 ;;  multiplier      2   40[COMRAM] unsigned int 
  9668 ;;  multiplicand    2   42[COMRAM] unsigned int 
  9669 ;; Auto vars:     Size  Location     Type
  9670 ;;  product         2   44[COMRAM] unsigned int 
  9671 ;; Return value:  Size  Location     Type
  9672 ;;                  2   40[COMRAM] unsigned int 
  9673 ;; Registers used:
  9674 ;;		wreg, status,2, status,0, prodl, prodh
  9675 ;; Tracked objects:
  9676 ;;		On entry : 0/0
  9677 ;;		On exit  : 0/0
  9678 ;;		Unchanged: 0/0
  9679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9680 ;;      Params:         4       0       0       0       0       0       0
  9681 ;;      Locals:         2       0       0       0       0       0       0
  9682 ;;      Temps:          0       0       0       0       0       0       0
  9683 ;;      Totals:         6       0       0       0       0       0       0
  9684 ;;Total ram usage:        6 bytes
  9685 ;; Hardware stack levels used:    1
  9686 ;; Hardware stack levels required when called:    4
  9687 ;; This function calls:
  9688 ;;		Nothing
  9689 ;; This function is called by:
  9690 ;;		_Battery_Convert
  9691 ;;		_Battery_Filter
  9692 ;;		_Battery_Fault
  9693 ;;		_Battery_Get
  9694 ;;		_Temp_Fault
  9695 ;;		_Temp_Filter
  9696 ;;		_Temp_Convert
  9697 ;;		_fround
  9698 ;;		_scale
  9699 ;;		_printf
  9700 ;;		_eval_poly
  9701 ;;		_Tempeture_Get
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705                           	psect	text41
  9706  003E12                     __ptext41:
  9707                           	opt stack 0
  9708  003E12                     ___wmul:
  9709                           	opt stack 24
  9710                           
  9711                           ; BSR set to: 0
  9712                           ;incstack = 0
  9713  003E12  5029               	movf	___wmul@multiplier,w,c
  9714  003E14  022B               	mulwf	___wmul@multiplicand,c
  9715  003E16  CFF3 F02D          	movff	prodl,___wmul@product
  9716  003E1A  CFF4 F02E          	movff	prodh,___wmul@product+1
  9717  003E1E  5029               	movf	___wmul@multiplier,w,c
  9718  003E20  022C               	mulwf	___wmul@multiplicand+1,c
  9719  003E22  50F3               	movf	prodl,w,c
  9720  003E24  262E               	addwf	___wmul@product+1,f,c
  9721  003E26  502A               	movf	___wmul@multiplier+1,w,c
  9722  003E28  022B               	mulwf	___wmul@multiplicand,c
  9723  003E2A  50F3               	movf	prodl,w,c
  9724  003E2C  262E               	addwf	___wmul@product+1,f,c
  9725  003E2E  C02D  F029         	movff	___wmul@product,?___wmul
  9726  003E32  C02E  F02A         	movff	___wmul@product+1,?___wmul+1
  9727  003E36  0012               	return	
  9728  003E38                     __end_of___wmul:
  9729                           	opt stack 0
  9730                           tblptru	equ	0xFF8
  9731                           tblptrh	equ	0xFF7
  9732                           tblptrl	equ	0xFF6
  9733                           tablat	equ	0xFF5
  9734                           prodh	equ	0xFF4
  9735                           prodl	equ	0xFF3
  9736                           intcon	equ	0xFF2
  9737                           intcon2	equ	0xFF1
  9738                           postinc0	equ	0xFEE
  9739                           wreg	equ	0xFE8
  9740                           postinc1	equ	0xFE6
  9741                           postdec1	equ	0xFE5
  9742                           fsr1h	equ	0xFE2
  9743                           fsr1l	equ	0xFE1
  9744                           indf2	equ	0xFDF
  9745                           postinc2	equ	0xFDE
  9746                           postdec2	equ	0xFDD
  9747                           fsr2h	equ	0xFDA
  9748                           fsr2l	equ	0xFD9
  9749                           status	equ	0xFD8
  9750                           
  9751 ;; *************** function ___ftmul *****************
  9752 ;; Defined at:
  9753 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;  f1              3   12[BANK0 ] float 
  9756 ;;  f2              3   15[BANK0 ] float 
  9757 ;; Auto vars:     Size  Location     Type
  9758 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  9759 ;;  sign            1   26[BANK0 ] unsigned char 
  9760 ;;  cntr            1   25[BANK0 ] unsigned char 
  9761 ;;  exp             1   21[BANK0 ] unsigned char 
  9762 ;; Return value:  Size  Location     Type
  9763 ;;                  3   12[BANK0 ] float 
  9764 ;; Registers used:
  9765 ;;		wreg, status,2, status,0, cstack
  9766 ;; Tracked objects:
  9767 ;;		On entry : 0/0
  9768 ;;		On exit  : 0/0
  9769 ;;		Unchanged: 0/0
  9770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9771 ;;      Params:         0       6       0       0       0       0       0
  9772 ;;      Locals:         0       6       0       0       0       0       0
  9773 ;;      Temps:          0       3       0       0       0       0       0
  9774 ;;      Totals:         0      15       0       0       0       0       0
  9775 ;;Total ram usage:       15 bytes
  9776 ;; Hardware stack levels used:    1
  9777 ;; Hardware stack levels required when called:    5
  9778 ;; This function calls:
  9779 ;;		___ftpack
  9780 ;; This function is called by:
  9781 ;;		_Battery_Convert
  9782 ;;		_Battery_Filter
  9783 ;;		_Temp_Filter
  9784 ;;		_Temp_Convert
  9785 ;;		_fround
  9786 ;;		_scale
  9787 ;;		_printf
  9788 ;;		_log
  9789 ;;		_eval_poly
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           	psect	text42
  9794  002996                     __ptext42:
  9795                           	opt stack 0
  9796  002996                     ___ftmul:
  9797                           	opt stack 23
  9798                           
  9799                           ;incstack = 0
  9800  002996  0100               	movlb	0	; () banked
  9801  002998  C06E  F072         	movff	___ftmul@f1+2,??___ftmul
  9802  00299C  0100               	movlb	0	; () banked
  9803  00299E  6B73               	clrf	(??___ftmul+1)& (0+255),b
  9804  0029A0  6B74               	clrf	(??___ftmul+2)& (0+255),b
  9805  0029A2  0100               	movlb	0	; () banked
  9806  0029A4  356D               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9807  0029A6  0100               	movlb	0	; () banked
  9808  0029A8  3772               	rlcf	??___ftmul& (0+255),f,b
  9809  0029AA  E301               	bnc	u4821
  9810  0029AC  8173               	bsf	(??___ftmul+1)& (0+255),0,b
  9811  0029AE                     u4821:
  9812  0029AE  0100               	movlb	0	; () banked
  9813  0029B0  5172               	movf	??___ftmul& (0+255),w,b
  9814  0029B2  0100               	movlb	0	; () banked
  9815  0029B4  6F75               	movwf	___ftmul@exp& (0+255),b
  9816  0029B6  0100               	movlb	0	; () banked
  9817  0029B8  6775               	tstfsz	___ftmul@exp& (0+255),b
  9818  0029BA  D00A               	goto	l4686
  9819                           
  9820                           ; BSR set to: 0
  9821  0029BC  0E00               	movlw	0
  9822  0029BE  0100               	movlb	0	; () banked
  9823  0029C0  6F6C               	movwf	?___ftmul& (0+255),b
  9824  0029C2  0E00               	movlw	0
  9825  0029C4  0100               	movlb	0	; () banked
  9826  0029C6  6F6D               	movwf	(?___ftmul+1)& (0+255),b
  9827  0029C8  0E00               	movlw	0
  9828  0029CA  0100               	movlb	0	; () banked
  9829  0029CC  6F6E               	movwf	(?___ftmul+2)& (0+255),b
  9830  0029CE  0012               	return	
  9831  0029D0                     l4686:
  9832                           
  9833                           ; BSR set to: 0
  9834  0029D0  0100               	movlb	0	; () banked
  9835  0029D2  C071  F072         	movff	___ftmul@f2+2,??___ftmul
  9836  0029D6  0100               	movlb	0	; () banked
  9837  0029D8  6B73               	clrf	(??___ftmul+1)& (0+255),b
  9838  0029DA  6B74               	clrf	(??___ftmul+2)& (0+255),b
  9839  0029DC  0100               	movlb	0	; () banked
  9840  0029DE  3570               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  9841  0029E0  0100               	movlb	0	; () banked
  9842  0029E2  3772               	rlcf	??___ftmul& (0+255),f,b
  9843  0029E4  E301               	bnc	u4841
  9844  0029E6  8173               	bsf	(??___ftmul+1)& (0+255),0,b
  9845  0029E8                     u4841:
  9846  0029E8  0100               	movlb	0	; () banked
  9847  0029EA  5172               	movf	??___ftmul& (0+255),w,b
  9848  0029EC  0100               	movlb	0	; () banked
  9849  0029EE  6F7A               	movwf	___ftmul@sign& (0+255),b
  9850  0029F0  0100               	movlb	0	; () banked
  9851  0029F2  677A               	tstfsz	___ftmul@sign& (0+255),b
  9852  0029F4  D00A               	goto	l4692
  9853                           
  9854                           ; BSR set to: 0
  9855  0029F6  0E00               	movlw	0
  9856  0029F8  0100               	movlb	0	; () banked
  9857  0029FA  6F6C               	movwf	?___ftmul& (0+255),b
  9858  0029FC  0E00               	movlw	0
  9859  0029FE  0100               	movlb	0	; () banked
  9860  002A00  6F6D               	movwf	(?___ftmul+1)& (0+255),b
  9861  002A02  0E00               	movlw	0
  9862  002A04  0100               	movlb	0	; () banked
  9863  002A06  6F6E               	movwf	(?___ftmul+2)& (0+255),b
  9864  002A08  0012               	return	
  9865  002A0A                     l4692:
  9866                           
  9867                           ; BSR set to: 0
  9868  002A0A  0100               	movlb	0	; () banked
  9869  002A0C  517A               	movf	___ftmul@sign& (0+255),w,b
  9870  002A0E  0F7B               	addlw	123
  9871  002A10  0100               	movlb	0	; () banked
  9872  002A12  2775               	addwf	___ftmul@exp& (0+255),f,b
  9873                           
  9874                           ; BSR set to: 0
  9875  002A14  C06E  F07A         	movff	___ftmul@f1+2,___ftmul@sign
  9876  002A18  0100               	movlb	0	; () banked
  9877  002A1A  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
  9878  002A1C  0100               	movlb	0	; () banked
  9879  002A1E  1B7A               	xorwf	___ftmul@sign& (0+255),f,b
  9880  002A20  0E80               	movlw	128
  9881  002A22  0100               	movlb	0	; () banked
  9882  002A24  177A               	andwf	___ftmul@sign& (0+255),f,b
  9883                           
  9884                           ; BSR set to: 0
  9885  002A26  0100               	movlb	0	; () banked
  9886  002A28  8F6D               	bsf	(___ftmul@f1+1)& (0+255),7,b
  9887                           
  9888                           ; BSR set to: 0
  9889  002A2A  0100               	movlb	0	; () banked
  9890  002A2C  8F70               	bsf	(___ftmul@f2+1)& (0+255),7,b
  9891                           
  9892                           ; BSR set to: 0
  9893  002A2E  0EFF               	movlw	255
  9894  002A30  0100               	movlb	0	; () banked
  9895  002A32  176F               	andwf	___ftmul@f2& (0+255),f,b
  9896  002A34  0EFF               	movlw	255
  9897  002A36  0100               	movlb	0	; () banked
  9898  002A38  1770               	andwf	(___ftmul@f2+1)& (0+255),f,b
  9899  002A3A  0E00               	movlw	0
  9900  002A3C  0100               	movlb	0	; () banked
  9901  002A3E  1771               	andwf	(___ftmul@f2+2)& (0+255),f,b
  9902                           
  9903                           ; BSR set to: 0
  9904  002A40  0E00               	movlw	0
  9905  002A42  0100               	movlb	0	; () banked
  9906  002A44  6F76               	movwf	___ftmul@f3_as_product& (0+255),b
  9907  002A46  0E00               	movlw	0
  9908  002A48  0100               	movlb	0	; () banked
  9909  002A4A  6F77               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9910  002A4C  0E00               	movlw	0
  9911  002A4E  0100               	movlb	0	; () banked
  9912  002A50  6F78               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9913                           
  9914                           ; BSR set to: 0
  9915  002A52  0E07               	movlw	7
  9916  002A54  0100               	movlb	0	; () banked
  9917  002A56  6F79               	movwf	___ftmul@cntr& (0+255),b
  9918  002A58                     l4706:
  9919                           
  9920                           ; BSR set to: 0
  9921  002A58  0100               	movlb	0	; () banked
  9922  002A5A  A16C               	btfss	___ftmul@f1& (0+255),0,b
  9923  002A5C  D00C               	goto	l4710
  9924                           
  9925                           ; BSR set to: 0
  9926  002A5E  0100               	movlb	0	; () banked
  9927  002A60  516F               	movf	___ftmul@f2& (0+255),w,b
  9928  002A62  0100               	movlb	0	; () banked
  9929  002A64  2776               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9930  002A66  0100               	movlb	0	; () banked
  9931  002A68  5170               	movf	(___ftmul@f2+1)& (0+255),w,b
  9932  002A6A  0100               	movlb	0	; () banked
  9933  002A6C  2377               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9934  002A6E  0100               	movlb	0	; () banked
  9935  002A70  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
  9936  002A72  0100               	movlb	0	; () banked
  9937  002A74  2378               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9938  002A76                     l4710:
  9939                           
  9940                           ; BSR set to: 0
  9941  002A76  0100               	movlb	0	; () banked
  9942  002A78  90D8               	bcf	status,0,c
  9943  002A7A  0100               	movlb	0	; () banked
  9944  002A7C  336E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9945  002A7E  0100               	movlb	0	; () banked
  9946  002A80  336D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9947  002A82  0100               	movlb	0	; () banked
  9948  002A84  336C               	rrcf	___ftmul@f1& (0+255),f,b
  9949  002A86  0100               	movlb	0	; () banked
  9950  002A88  90D8               	bcf	status,0,c
  9951  002A8A  0100               	movlb	0	; () banked
  9952  002A8C  376F               	rlcf	___ftmul@f2& (0+255),f,b
  9953  002A8E  0100               	movlb	0	; () banked
  9954  002A90  3770               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  9955  002A92  0100               	movlb	0	; () banked
  9956  002A94  3771               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  9957                           
  9958                           ; BSR set to: 0
  9959  002A96  0100               	movlb	0	; () banked
  9960  002A98  2F79               	decfsz	___ftmul@cntr& (0+255),f,b
  9961  002A9A  D7DE               	goto	l4706
  9962                           
  9963                           ; BSR set to: 0
  9964                           
  9965                           ; BSR set to: 0
  9966  002A9C  0E09               	movlw	9
  9967  002A9E  0100               	movlb	0	; () banked
  9968  002AA0  6F79               	movwf	___ftmul@cntr& (0+255),b
  9969  002AA2                     l4716:
  9970                           
  9971                           ; BSR set to: 0
  9972  002AA2  0100               	movlb	0	; () banked
  9973  002AA4  A16C               	btfss	___ftmul@f1& (0+255),0,b
  9974  002AA6  D00C               	goto	l4720
  9975                           
  9976                           ; BSR set to: 0
  9977  002AA8  0100               	movlb	0	; () banked
  9978  002AAA  516F               	movf	___ftmul@f2& (0+255),w,b
  9979  002AAC  0100               	movlb	0	; () banked
  9980  002AAE  2776               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9981  002AB0  0100               	movlb	0	; () banked
  9982  002AB2  5170               	movf	(___ftmul@f2+1)& (0+255),w,b
  9983  002AB4  0100               	movlb	0	; () banked
  9984  002AB6  2377               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9985  002AB8  0100               	movlb	0	; () banked
  9986  002ABA  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
  9987  002ABC  0100               	movlb	0	; () banked
  9988  002ABE  2378               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9989  002AC0                     l4720:
  9990                           
  9991                           ; BSR set to: 0
  9992  002AC0  0100               	movlb	0	; () banked
  9993  002AC2  90D8               	bcf	status,0,c
  9994  002AC4  0100               	movlb	0	; () banked
  9995  002AC6  336E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9996  002AC8  0100               	movlb	0	; () banked
  9997  002ACA  336D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9998  002ACC  0100               	movlb	0	; () banked
  9999  002ACE  336C               	rrcf	___ftmul@f1& (0+255),f,b
 10000  002AD0  0100               	movlb	0	; () banked
 10001  002AD2  90D8               	bcf	status,0,c
 10002  002AD4  0100               	movlb	0	; () banked
 10003  002AD6  3378               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10004  002AD8  0100               	movlb	0	; () banked
 10005  002ADA  3377               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10006  002ADC  0100               	movlb	0	; () banked
 10007  002ADE  3376               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10008                           
 10009                           ; BSR set to: 0
 10010  002AE0  0100               	movlb	0	; () banked
 10011  002AE2  2F79               	decfsz	___ftmul@cntr& (0+255),f,b
 10012  002AE4  D7DE               	goto	l4716
 10013                           
 10014                           ; BSR set to: 0
 10015                           
 10016                           ; BSR set to: 0
 10017  002AE6  C076  F01B         	movff	___ftmul@f3_as_product,___ftpack@arg
 10018  002AEA  C077  F01C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10019  002AEE  C078  F01D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10020  002AF2  C075  F01E         	movff	___ftmul@exp,___ftpack@exp
 10021  002AF6  C07A  F01F         	movff	___ftmul@sign,___ftpack@sign
 10022  002AFA  EC48  F01B         	call	___ftpack	;wreg free
 10023  002AFE  C01B  F06C         	movff	?___ftpack,?___ftmul
 10024  002B02  C01C  F06D         	movff	?___ftpack+1,?___ftmul+1
 10025  002B06  C01D  F06E         	movff	?___ftpack+2,?___ftmul+2
 10026  002B0A  0012               	return	
 10027  002B0C                     __end_of___ftmul:
 10028                           	opt stack 0
 10029                           tblptru	equ	0xFF8
 10030                           tblptrh	equ	0xFF7
 10031                           tblptrl	equ	0xFF6
 10032                           tablat	equ	0xFF5
 10033                           prodh	equ	0xFF4
 10034                           prodl	equ	0xFF3
 10035                           intcon	equ	0xFF2
 10036                           intcon2	equ	0xFF1
 10037                           postinc0	equ	0xFEE
 10038                           wreg	equ	0xFE8
 10039                           postinc1	equ	0xFE6
 10040                           postdec1	equ	0xFE5
 10041                           fsr1h	equ	0xFE2
 10042                           fsr1l	equ	0xFE1
 10043                           indf2	equ	0xFDF
 10044                           postinc2	equ	0xFDE
 10045                           postdec2	equ	0xFDD
 10046                           fsr2h	equ	0xFDA
 10047                           fsr2l	equ	0xFD9
 10048                           status	equ	0xFD8
 10049                           
 10050 ;; *************** function ___ftadd *****************
 10051 ;; Defined at:
 10052 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
 10053 ;; Parameters:    Size  Location     Type
 10054 ;;  f1              3   37[BANK0 ] float 
 10055 ;;  f2              3   40[BANK0 ] float 
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;  exp1            1   48[BANK0 ] unsigned char 
 10058 ;;  exp2            1   47[BANK0 ] unsigned char 
 10059 ;;  sign            1   46[BANK0 ] unsigned char 
 10060 ;; Return value:  Size  Location     Type
 10061 ;;                  3   37[BANK0 ] float 
 10062 ;; Registers used:
 10063 ;;		wreg, status,2, status,0, cstack
 10064 ;; Tracked objects:
 10065 ;;		On entry : 0/0
 10066 ;;		On exit  : 0/0
 10067 ;;		Unchanged: 0/0
 10068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10069 ;;      Params:         0       6       0       0       0       0       0
 10070 ;;      Locals:         0       3       0       0       0       0       0
 10071 ;;      Temps:          0       3       0       0       0       0       0
 10072 ;;      Totals:         0      12       0       0       0       0       0
 10073 ;;Total ram usage:       12 bytes
 10074 ;; Hardware stack levels used:    1
 10075 ;; Hardware stack levels required when called:    5
 10076 ;; This function calls:
 10077 ;;		___ftpack
 10078 ;; This function is called by:
 10079 ;;		_Battery_Convert
 10080 ;;		_Battery_Filter
 10081 ;;		_Temp_Filter
 10082 ;;		_Temp_Convert
 10083 ;;		_printf
 10084 ;;		___ftsub
 10085 ;;		_log
 10086 ;;		_eval_poly
 10087 ;; This function uses a non-reentrant model
 10088 ;;
 10089                           
 10090                           	psect	text43
 10091  002076                     __ptext43:
 10092                           	opt stack 0
 10093  002076                     ___ftadd:
 10094                           	opt stack 23
 10095                           
 10096                           ;incstack = 0
 10097  002076  0100               	movlb	0	; () banked
 10098  002078  C087  F08B         	movff	___ftadd@f1+2,??___ftadd
 10099  00207C  0100               	movlb	0	; () banked
 10100  00207E  6B8C               	clrf	(??___ftadd+1)& (0+255),b
 10101  002080  6B8D               	clrf	(??___ftadd+2)& (0+255),b
 10102  002082  0100               	movlb	0	; () banked
 10103  002084  3586               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10104  002086  0100               	movlb	0	; () banked
 10105  002088  378B               	rlcf	??___ftadd& (0+255),f,b
 10106  00208A  E301               	bnc	u4611
 10107  00208C  818C               	bsf	(??___ftadd+1)& (0+255),0,b
 10108  00208E                     u4611:
 10109  00208E  0100               	movlb	0	; () banked
 10110  002090  518B               	movf	??___ftadd& (0+255),w,b
 10111  002092  0100               	movlb	0	; () banked
 10112  002094  6F90               	movwf	___ftadd@exp1& (0+255),b
 10113  002096  0100               	movlb	0	; () banked
 10114  002098  C08A  F08B         	movff	___ftadd@f2+2,??___ftadd
 10115  00209C  0100               	movlb	0	; () banked
 10116  00209E  6B8C               	clrf	(??___ftadd+1)& (0+255),b
 10117  0020A0  6B8D               	clrf	(??___ftadd+2)& (0+255),b
 10118  0020A2  0100               	movlb	0	; () banked
 10119  0020A4  3589               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10120  0020A6  0100               	movlb	0	; () banked
 10121  0020A8  378B               	rlcf	??___ftadd& (0+255),f,b
 10122  0020AA  E301               	bnc	u4621
 10123  0020AC  818C               	bsf	(??___ftadd+1)& (0+255),0,b
 10124  0020AE                     u4621:
 10125  0020AE  0100               	movlb	0	; () banked
 10126  0020B0  518B               	movf	??___ftadd& (0+255),w,b
 10127  0020B2  0100               	movlb	0	; () banked
 10128  0020B4  6F8F               	movwf	___ftadd@exp2& (0+255),b
 10129                           
 10130                           ; BSR set to: 0
 10131  0020B6  0100               	movlb	0	; () banked
 10132  0020B8  5190               	movf	___ftadd@exp1& (0+255),w,b
 10133  0020BA  B4D8               	btfsc	status,2,c
 10134  0020BC  D012               	goto	l1076
 10135                           
 10136                           ; BSR set to: 0
 10137  0020BE  0100               	movlb	0	; () banked
 10138  0020C0  518F               	movf	___ftadd@exp2& (0+255),w,b
 10139  0020C2  0100               	movlb	0	; () banked
 10140  0020C4  5D90               	subwf	___ftadd@exp1& (0+255),w,b
 10141  0020C6  B0D8               	btfsc	status,0,c
 10142  0020C8  D013               	goto	l4618
 10143                           
 10144                           ; BSR set to: 0
 10145  0020CA  0100               	movlb	0	; () banked
 10146  0020CC  5190               	movf	___ftadd@exp1& (0+255),w,b
 10147  0020CE  0800               	sublw	0
 10148  0020D0  0100               	movlb	0	; () banked
 10149  0020D2  258F               	addwf	___ftadd@exp2& (0+255),w,b
 10150  0020D4  0100               	movlb	0	; () banked
 10151  0020D6  6F8B               	movwf	??___ftadd& (0+255),b
 10152  0020D8  0E19               	movlw	25
 10153  0020DA  0100               	movlb	0	; () banked
 10154  0020DC  5D8B               	subwf	??___ftadd& (0+255),w,b
 10155  0020DE  A0D8               	btfss	status,0,c
 10156  0020E0  D007               	goto	l4618
 10157  0020E2                     l1076:
 10158                           
 10159                           ; BSR set to: 0
 10160  0020E2  C088  F085         	movff	___ftadd@f2,?___ftadd
 10161  0020E6  C089  F086         	movff	___ftadd@f2+1,?___ftadd+1
 10162  0020EA  C08A  F087         	movff	___ftadd@f2+2,?___ftadd+2
 10163  0020EE  0012               	return	
 10164  0020F0                     l4618:
 10165                           
 10166                           ; BSR set to: 0
 10167  0020F0  0100               	movlb	0	; () banked
 10168  0020F2  518F               	movf	___ftadd@exp2& (0+255),w,b
 10169  0020F4  B4D8               	btfsc	status,2,c
 10170  0020F6  D012               	goto	l1080
 10171                           
 10172                           ; BSR set to: 0
 10173  0020F8  0100               	movlb	0	; () banked
 10174  0020FA  5190               	movf	___ftadd@exp1& (0+255),w,b
 10175  0020FC  0100               	movlb	0	; () banked
 10176  0020FE  5D8F               	subwf	___ftadd@exp2& (0+255),w,b
 10177  002100  B0D8               	btfsc	status,0,c
 10178  002102  D013               	goto	l4624
 10179                           
 10180                           ; BSR set to: 0
 10181  002104  0100               	movlb	0	; () banked
 10182  002106  518F               	movf	___ftadd@exp2& (0+255),w,b
 10183  002108  0800               	sublw	0
 10184  00210A  0100               	movlb	0	; () banked
 10185  00210C  2590               	addwf	___ftadd@exp1& (0+255),w,b
 10186  00210E  0100               	movlb	0	; () banked
 10187  002110  6F8B               	movwf	??___ftadd& (0+255),b
 10188  002112  0E19               	movlw	25
 10189  002114  0100               	movlb	0	; () banked
 10190  002116  5D8B               	subwf	??___ftadd& (0+255),w,b
 10191  002118  A0D8               	btfss	status,0,c
 10192  00211A  D007               	goto	l4624
 10193  00211C                     l1080:
 10194                           
 10195                           ; BSR set to: 0
 10196  00211C  C085  F085         	movff	___ftadd@f1,?___ftadd
 10197  002120  C086  F086         	movff	___ftadd@f1+1,?___ftadd+1
 10198  002124  C087  F087         	movff	___ftadd@f1+2,?___ftadd+2
 10199  002128  0012               	return	
 10200  00212A                     l4624:
 10201                           
 10202                           ; BSR set to: 0
 10203  00212A  0E06               	movlw	6
 10204  00212C  0100               	movlb	0	; () banked
 10205  00212E  6F8E               	movwf	___ftadd@sign& (0+255),b
 10206                           
 10207                           ; BSR set to: 0
 10208  002130  0100               	movlb	0	; () banked
 10209  002132  AF87               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10210  002134  D002               	goto	l4630
 10211                           
 10212                           ; BSR set to: 0
 10213  002136  0100               	movlb	0	; () banked
 10214  002138  8F8E               	bsf	___ftadd@sign& (0+255),7,b
 10215  00213A                     l4630:
 10216                           
 10217                           ; BSR set to: 0
 10218  00213A  0100               	movlb	0	; () banked
 10219  00213C  AF8A               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10220  00213E  D002               	goto	l1082
 10221                           
 10222                           ; BSR set to: 0
 10223  002140  0100               	movlb	0	; () banked
 10224  002142  8D8E               	bsf	___ftadd@sign& (0+255),6,b
 10225  002144                     l1082:
 10226                           
 10227                           ; BSR set to: 0
 10228  002144  0100               	movlb	0	; () banked
 10229  002146  8F86               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10230                           
 10231                           ; BSR set to: 0
 10232  002148  0EFF               	movlw	255
 10233  00214A  0100               	movlb	0	; () banked
 10234  00214C  1785               	andwf	___ftadd@f1& (0+255),f,b
 10235  00214E  0EFF               	movlw	255
 10236  002150  0100               	movlb	0	; () banked
 10237  002152  1786               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10238  002154  0E00               	movlw	0
 10239  002156  0100               	movlb	0	; () banked
 10240  002158  1787               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10241  00215A  0100               	movlb	0	; () banked
 10242  00215C  8F89               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10243                           
 10244                           ; BSR set to: 0
 10245  00215E  0EFF               	movlw	255
 10246  002160  0100               	movlb	0	; () banked
 10247  002162  1788               	andwf	___ftadd@f2& (0+255),f,b
 10248  002164  0EFF               	movlw	255
 10249  002166  0100               	movlb	0	; () banked
 10250  002168  1789               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10251  00216A  0E00               	movlw	0
 10252  00216C  0100               	movlb	0	; () banked
 10253  00216E  178A               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10254                           
 10255                           ; BSR set to: 0
 10256  002170  0100               	movlb	0	; () banked
 10257  002172  518F               	movf	___ftadd@exp2& (0+255),w,b
 10258  002174  0100               	movlb	0	; () banked
 10259  002176  5D90               	subwf	___ftadd@exp1& (0+255),w,b
 10260  002178  B0D8               	btfsc	status,0,c
 10261  00217A  D02A               	goto	l4650
 10262  00217C                     l4640:
 10263                           
 10264                           ; BSR set to: 0
 10265  00217C  0100               	movlb	0	; () banked
 10266  00217E  90D8               	bcf	status,0,c
 10267  002180  0100               	movlb	0	; () banked
 10268  002182  3788               	rlcf	___ftadd@f2& (0+255),f,b
 10269  002184  0100               	movlb	0	; () banked
 10270  002186  3789               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10271  002188  0100               	movlb	0	; () banked
 10272  00218A  378A               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10273  00218C  0100               	movlb	0	; () banked
 10274  00218E  078F               	decf	___ftadd@exp2& (0+255),f,b
 10275                           
 10276                           ; BSR set to: 0
 10277  002190  0100               	movlb	0	; () banked
 10278  002192  518F               	movf	___ftadd@exp2& (0+255),w,b
 10279  002194  0100               	movlb	0	; () banked
 10280  002196  1990               	xorwf	___ftadd@exp1& (0+255),w,b
 10281  002198  B4D8               	btfsc	status,2,c
 10282  00219A  D014               	goto	l4648
 10283                           
 10284                           ; BSR set to: 0
 10285  00219C  0100               	movlb	0	; () banked
 10286  00219E  078E               	decf	___ftadd@sign& (0+255),f,b
 10287  0021A0  C08E  F08B         	movff	___ftadd@sign,??___ftadd
 10288  0021A4  0E07               	movlw	7
 10289  0021A6  0100               	movlb	0	; () banked
 10290  0021A8  178B               	andwf	??___ftadd& (0+255),f,b
 10291  0021AA  B4D8               	btfsc	status,2,c
 10292  0021AC  D00B               	goto	l4648
 10293  0021AE  D7E6               	goto	l4640
 10294  0021B0                     l4646:
 10295                           
 10296                           ; BSR set to: 0
 10297  0021B0  0100               	movlb	0	; () banked
 10298  0021B2  90D8               	bcf	status,0,c
 10299  0021B4  0100               	movlb	0	; () banked
 10300  0021B6  3387               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10301  0021B8  0100               	movlb	0	; () banked
 10302  0021BA  3386               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10303  0021BC  0100               	movlb	0	; () banked
 10304  0021BE  3385               	rrcf	___ftadd@f1& (0+255),f,b
 10305  0021C0  0100               	movlb	0	; () banked
 10306  0021C2  2B90               	incf	___ftadd@exp1& (0+255),f,b
 10307  0021C4                     l4648:
 10308                           
 10309                           ; BSR set to: 0
 10310  0021C4  0100               	movlb	0	; () banked
 10311  0021C6  518F               	movf	___ftadd@exp2& (0+255),w,b
 10312  0021C8  0100               	movlb	0	; () banked
 10313  0021CA  6390               	cpfseq	___ftadd@exp1& (0+255),b
 10314  0021CC  D7F1               	goto	l4646
 10315  0021CE  D02F               	goto	l1091
 10316  0021D0                     l4650:
 10317                           
 10318                           ; BSR set to: 0
 10319  0021D0  0100               	movlb	0	; () banked
 10320  0021D2  5190               	movf	___ftadd@exp1& (0+255),w,b
 10321  0021D4  0100               	movlb	0	; () banked
 10322  0021D6  5D8F               	subwf	___ftadd@exp2& (0+255),w,b
 10323  0021D8  B0D8               	btfsc	status,0,c
 10324  0021DA  D029               	goto	l1091
 10325  0021DC                     l4652:
 10326                           
 10327                           ; BSR set to: 0
 10328  0021DC  0100               	movlb	0	; () banked
 10329  0021DE  90D8               	bcf	status,0,c
 10330  0021E0  0100               	movlb	0	; () banked
 10331  0021E2  3785               	rlcf	___ftadd@f1& (0+255),f,b
 10332  0021E4  0100               	movlb	0	; () banked
 10333  0021E6  3786               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10334  0021E8  0100               	movlb	0	; () banked
 10335  0021EA  3787               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10336  0021EC  0100               	movlb	0	; () banked
 10337  0021EE  0790               	decf	___ftadd@exp1& (0+255),f,b
 10338                           
 10339                           ; BSR set to: 0
 10340  0021F0  0100               	movlb	0	; () banked
 10341  0021F2  518F               	movf	___ftadd@exp2& (0+255),w,b
 10342  0021F4  0100               	movlb	0	; () banked
 10343  0021F6  1990               	xorwf	___ftadd@exp1& (0+255),w,b
 10344  0021F8  B4D8               	btfsc	status,2,c
 10345  0021FA  D014               	goto	l4660
 10346                           
 10347                           ; BSR set to: 0
 10348  0021FC  0100               	movlb	0	; () banked
 10349  0021FE  078E               	decf	___ftadd@sign& (0+255),f,b
 10350  002200  C08E  F08B         	movff	___ftadd@sign,??___ftadd
 10351  002204  0E07               	movlw	7
 10352  002206  0100               	movlb	0	; () banked
 10353  002208  178B               	andwf	??___ftadd& (0+255),f,b
 10354  00220A  B4D8               	btfsc	status,2,c
 10355  00220C  D00B               	goto	l4660
 10356  00220E  D7E6               	goto	l4652
 10357  002210                     l4658:
 10358                           
 10359                           ; BSR set to: 0
 10360  002210  0100               	movlb	0	; () banked
 10361  002212  90D8               	bcf	status,0,c
 10362  002214  0100               	movlb	0	; () banked
 10363  002216  338A               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10364  002218  0100               	movlb	0	; () banked
 10365  00221A  3389               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10366  00221C  0100               	movlb	0	; () banked
 10367  00221E  3388               	rrcf	___ftadd@f2& (0+255),f,b
 10368  002220  0100               	movlb	0	; () banked
 10369  002222  2B8F               	incf	___ftadd@exp2& (0+255),f,b
 10370  002224                     l4660:
 10371                           
 10372                           ; BSR set to: 0
 10373  002224  0100               	movlb	0	; () banked
 10374  002226  518F               	movf	___ftadd@exp2& (0+255),w,b
 10375  002228  0100               	movlb	0	; () banked
 10376  00222A  6390               	cpfseq	___ftadd@exp1& (0+255),b
 10377  00222C  D7F1               	goto	l4658
 10378  00222E                     l1091:
 10379                           
 10380                           ; BSR set to: 0
 10381  00222E  0100               	movlb	0	; () banked
 10382  002230  AF8E               	btfss	___ftadd@sign& (0+255),7,b
 10383  002232  D012               	goto	l1100
 10384                           
 10385                           ; BSR set to: 0
 10386  002234  0EFF               	movlw	255
 10387  002236  0100               	movlb	0	; () banked
 10388  002238  1B85               	xorwf	___ftadd@f1& (0+255),f,b
 10389  00223A  0EFF               	movlw	255
 10390  00223C  0100               	movlb	0	; () banked
 10391  00223E  1B86               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10392  002240  0EFF               	movlw	255
 10393  002242  0100               	movlb	0	; () banked
 10394  002244  1B87               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10395  002246  0E01               	movlw	1
 10396  002248  0100               	movlb	0	; () banked
 10397  00224A  2785               	addwf	___ftadd@f1& (0+255),f,b
 10398  00224C  0E00               	movlw	0
 10399  00224E  0100               	movlb	0	; () banked
 10400  002250  2386               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10401  002252  0E00               	movlw	0
 10402  002254  0100               	movlb	0	; () banked
 10403  002256  2387               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10404  002258                     l1100:
 10405                           
 10406                           ; BSR set to: 0
 10407  002258  0100               	movlb	0	; () banked
 10408  00225A  AD8E               	btfss	___ftadd@sign& (0+255),6,b
 10409  00225C  D012               	goto	l4666
 10410                           
 10411                           ; BSR set to: 0
 10412  00225E  0EFF               	movlw	255
 10413  002260  0100               	movlb	0	; () banked
 10414  002262  1B88               	xorwf	___ftadd@f2& (0+255),f,b
 10415  002264  0EFF               	movlw	255
 10416  002266  0100               	movlb	0	; () banked
 10417  002268  1B89               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10418  00226A  0EFF               	movlw	255
 10419  00226C  0100               	movlb	0	; () banked
 10420  00226E  1B8A               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10421  002270  0E01               	movlw	1
 10422  002272  0100               	movlb	0	; () banked
 10423  002274  2788               	addwf	___ftadd@f2& (0+255),f,b
 10424  002276  0E00               	movlw	0
 10425  002278  0100               	movlb	0	; () banked
 10426  00227A  2389               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10427  00227C  0E00               	movlw	0
 10428  00227E  0100               	movlb	0	; () banked
 10429  002280  238A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10430  002282                     l4666:
 10431                           
 10432                           ; BSR set to: 0
 10433  002282  0E00               	movlw	0
 10434  002284  0100               	movlb	0	; () banked
 10435  002286  6F8E               	movwf	___ftadd@sign& (0+255),b
 10436                           
 10437                           ; BSR set to: 0
 10438  002288  0100               	movlb	0	; () banked
 10439  00228A  5185               	movf	___ftadd@f1& (0+255),w,b
 10440  00228C  0100               	movlb	0	; () banked
 10441  00228E  2788               	addwf	___ftadd@f2& (0+255),f,b
 10442  002290  0100               	movlb	0	; () banked
 10443  002292  5186               	movf	(___ftadd@f1+1)& (0+255),w,b
 10444  002294  0100               	movlb	0	; () banked
 10445  002296  2389               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10446  002298  0100               	movlb	0	; () banked
 10447  00229A  5187               	movf	(___ftadd@f1+2)& (0+255),w,b
 10448  00229C  0100               	movlb	0	; () banked
 10449  00229E  238A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10450                           
 10451                           ; BSR set to: 0
 10452  0022A0  0100               	movlb	0	; () banked
 10453  0022A2  AF8A               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10454  0022A4  D015               	goto	l4676
 10455                           
 10456                           ; BSR set to: 0
 10457  0022A6  0EFF               	movlw	255
 10458  0022A8  0100               	movlb	0	; () banked
 10459  0022AA  1B88               	xorwf	___ftadd@f2& (0+255),f,b
 10460  0022AC  0EFF               	movlw	255
 10461  0022AE  0100               	movlb	0	; () banked
 10462  0022B0  1B89               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10463  0022B2  0EFF               	movlw	255
 10464  0022B4  0100               	movlb	0	; () banked
 10465  0022B6  1B8A               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10466  0022B8  0E01               	movlw	1
 10467  0022BA  0100               	movlb	0	; () banked
 10468  0022BC  2788               	addwf	___ftadd@f2& (0+255),f,b
 10469  0022BE  0E00               	movlw	0
 10470  0022C0  0100               	movlb	0	; () banked
 10471  0022C2  2389               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10472  0022C4  0E00               	movlw	0
 10473  0022C6  0100               	movlb	0	; () banked
 10474  0022C8  238A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10475                           
 10476                           ; BSR set to: 0
 10477  0022CA  0E01               	movlw	1
 10478  0022CC  0100               	movlb	0	; () banked
 10479  0022CE  6F8E               	movwf	___ftadd@sign& (0+255),b
 10480  0022D0                     l4676:
 10481                           
 10482                           ; BSR set to: 0
 10483  0022D0  C088  F01B         	movff	___ftadd@f2,___ftpack@arg
 10484  0022D4  C089  F01C         	movff	___ftadd@f2+1,___ftpack@arg+1
 10485  0022D8  C08A  F01D         	movff	___ftadd@f2+2,___ftpack@arg+2
 10486  0022DC  C090  F01E         	movff	___ftadd@exp1,___ftpack@exp
 10487  0022E0  C08E  F01F         	movff	___ftadd@sign,___ftpack@sign
 10488  0022E4  EC48  F01B         	call	___ftpack	;wreg free
 10489  0022E8  C01B  F085         	movff	?___ftpack,?___ftadd
 10490  0022EC  C01C  F086         	movff	?___ftpack+1,?___ftadd+1
 10491  0022F0  C01D  F087         	movff	?___ftpack+2,?___ftadd+2
 10492  0022F4  0012               	return	
 10493  0022F6                     __end_of___ftadd:
 10494                           	opt stack 0
 10495                           tblptru	equ	0xFF8
 10496                           tblptrh	equ	0xFF7
 10497                           tblptrl	equ	0xFF6
 10498                           tablat	equ	0xFF5
 10499                           prodh	equ	0xFF4
 10500                           prodl	equ	0xFF3
 10501                           intcon	equ	0xFF2
 10502                           intcon2	equ	0xFF1
 10503                           postinc0	equ	0xFEE
 10504                           wreg	equ	0xFE8
 10505                           postinc1	equ	0xFE6
 10506                           postdec1	equ	0xFE5
 10507                           fsr1h	equ	0xFE2
 10508                           fsr1l	equ	0xFE1
 10509                           indf2	equ	0xFDF
 10510                           postinc2	equ	0xFDE
 10511                           postdec2	equ	0xFDD
 10512                           fsr2h	equ	0xFDA
 10513                           fsr2l	equ	0xFD9
 10514                           status	equ	0xFD8
 10515                           
 10516 ;; *************** function ___ftpack *****************
 10517 ;; Defined at:
 10518 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
 10519 ;; Parameters:    Size  Location     Type
 10520 ;;  arg             3   26[COMRAM] unsigned um
 10521 ;;  exp             1   29[COMRAM] unsigned char 
 10522 ;;  sign            1   30[COMRAM] unsigned char 
 10523 ;; Auto vars:     Size  Location     Type
 10524 ;;		None
 10525 ;; Return value:  Size  Location     Type
 10526 ;;                  3   26[COMRAM] float 
 10527 ;; Registers used:
 10528 ;;		wreg, status,2, status,0
 10529 ;; Tracked objects:
 10530 ;;		On entry : 0/0
 10531 ;;		On exit  : 0/0
 10532 ;;		Unchanged: 0/0
 10533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10534 ;;      Params:         5       0       0       0       0       0       0
 10535 ;;      Locals:         0       0       0       0       0       0       0
 10536 ;;      Temps:          3       0       0       0       0       0       0
 10537 ;;      Totals:         8       0       0       0       0       0       0
 10538 ;;Total ram usage:        8 bytes
 10539 ;; Hardware stack levels used:    1
 10540 ;; Hardware stack levels required when called:    4
 10541 ;; This function calls:
 10542 ;;		Nothing
 10543 ;; This function is called by:
 10544 ;;		___altoft
 10545 ;;		___awtoft
 10546 ;;		___ftadd
 10547 ;;		___ftdiv
 10548 ;;		___ftmul
 10549 ;;		___lltoft
 10550 ;; This function uses a non-reentrant model
 10551 ;;
 10552                           
 10553                           	psect	text44
 10554  003690                     __ptext44:
 10555                           	opt stack 0
 10556  003690                     ___ftpack:
 10557                           	opt stack 23
 10558                           
 10559                           ;incstack = 0
 10560  003690  501E               	movf	___ftpack@exp,w,c
 10561  003692  B4D8               	btfsc	status,2,c
 10562  003694  D005               	goto	l4574
 10563  003696  501B               	movf	___ftpack@arg,w,c
 10564  003698  101C               	iorwf	___ftpack@arg+1,w,c
 10565  00369A  101D               	iorwf	___ftpack@arg+2,w,c
 10566  00369C  A4D8               	btfss	status,2,c
 10567  00369E  D00C               	goto	l4580
 10568  0036A0                     l4574:
 10569  0036A0  0E00               	movlw	0
 10570  0036A2  6E1B               	movwf	?___ftpack,c
 10571  0036A4  0E00               	movlw	0
 10572  0036A6  6E1C               	movwf	?___ftpack+1,c
 10573  0036A8  0E00               	movlw	0
 10574  0036AA  6E1D               	movwf	?___ftpack+2,c
 10575  0036AC  0012               	return	
 10576  0036AE                     l4578:
 10577  0036AE  2A1E               	incf	___ftpack@exp,f,c
 10578  0036B0  90D8               	bcf	status,0,c
 10579  0036B2  321D               	rrcf	___ftpack@arg+2,f,c
 10580  0036B4  321C               	rrcf	___ftpack@arg+1,f,c
 10581  0036B6  321B               	rrcf	___ftpack@arg,f,c
 10582  0036B8                     l4580:
 10583  0036B8  0E00               	movlw	0
 10584  0036BA  141B               	andwf	___ftpack@arg,w,c
 10585  0036BC  6E20               	movwf	??___ftpack& (0+255),c
 10586  0036BE  0E00               	movlw	0
 10587  0036C0  141C               	andwf	___ftpack@arg+1,w,c
 10588  0036C2  6E21               	movwf	(??___ftpack+1)& (0+255),c
 10589  0036C4  0EFE               	movlw	254
 10590  0036C6  141D               	andwf	___ftpack@arg+2,w,c
 10591  0036C8  6E22               	movwf	(??___ftpack+2)& (0+255),c
 10592  0036CA  5020               	movf	??___ftpack,w,c
 10593  0036CC  1021               	iorwf	??___ftpack+1,w,c
 10594  0036CE  1022               	iorwf	??___ftpack+2,w,c
 10595  0036D0  B4D8               	btfsc	status,2,c
 10596  0036D2  D00C               	goto	l4586
 10597  0036D4  D7EC               	goto	l4578
 10598  0036D6                     l4582:
 10599  0036D6  2A1E               	incf	___ftpack@exp,f,c
 10600  0036D8  0E01               	movlw	1
 10601  0036DA  261B               	addwf	___ftpack@arg,f,c
 10602  0036DC  0E00               	movlw	0
 10603  0036DE  221C               	addwfc	___ftpack@arg+1,f,c
 10604  0036E0  0E00               	movlw	0
 10605  0036E2  221D               	addwfc	___ftpack@arg+2,f,c
 10606  0036E4  90D8               	bcf	status,0,c
 10607  0036E6  321D               	rrcf	___ftpack@arg+2,f,c
 10608  0036E8  321C               	rrcf	___ftpack@arg+1,f,c
 10609  0036EA  321B               	rrcf	___ftpack@arg,f,c
 10610  0036EC                     l4586:
 10611  0036EC  0E00               	movlw	0
 10612  0036EE  141B               	andwf	___ftpack@arg,w,c
 10613  0036F0  6E20               	movwf	??___ftpack& (0+255),c
 10614  0036F2  0E00               	movlw	0
 10615  0036F4  141C               	andwf	___ftpack@arg+1,w,c
 10616  0036F6  6E21               	movwf	(??___ftpack+1)& (0+255),c
 10617  0036F8  0EFF               	movlw	255
 10618  0036FA  141D               	andwf	___ftpack@arg+2,w,c
 10619  0036FC  6E22               	movwf	(??___ftpack+2)& (0+255),c
 10620  0036FE  5020               	movf	??___ftpack,w,c
 10621  003700  1021               	iorwf	??___ftpack+1,w,c
 10622  003702  1022               	iorwf	??___ftpack+2,w,c
 10623  003704  B4D8               	btfsc	status,2,c
 10624  003706  D006               	goto	l4590
 10625  003708  D7E6               	goto	l4582
 10626  00370A                     l4588:
 10627  00370A  061E               	decf	___ftpack@exp,f,c
 10628  00370C  90D8               	bcf	status,0,c
 10629  00370E  361B               	rlcf	___ftpack@arg,f,c
 10630  003710  361C               	rlcf	___ftpack@arg+1,f,c
 10631  003712  361D               	rlcf	___ftpack@arg+2,f,c
 10632  003714                     l4590:
 10633  003714  AE1C               	btfss	___ftpack@arg+1,7,c
 10634  003716  D7F9               	goto	l4588
 10635  003718  A01E               	btfss	___ftpack@exp,0,c
 10636  00371A  9E1C               	bcf	___ftpack@arg+1,7,c
 10637  00371C  90D8               	bcf	status,0,c
 10638  00371E  321E               	rrcf	___ftpack@exp,f,c
 10639  003720  501E               	movf	___ftpack@exp,w,c
 10640  003722  121D               	iorwf	___ftpack@arg+2,f,c
 10641  003724  501F               	movf	___ftpack@sign,w,c
 10642  003726  A4D8               	btfss	status,2,c
 10643  003728  8E1D               	bsf	___ftpack@arg+2,7,c
 10644  00372A  C01B  F01B         	movff	___ftpack@arg,?___ftpack
 10645  00372E  C01C  F01C         	movff	___ftpack@arg+1,?___ftpack+1
 10646  003732  C01D  F01D         	movff	___ftpack@arg+2,?___ftpack+2
 10647  003736  0012               	return	
 10648  003738                     __end_of___ftpack:
 10649                           	opt stack 0
 10650                           tblptru	equ	0xFF8
 10651                           tblptrh	equ	0xFF7
 10652                           tblptrl	equ	0xFF6
 10653                           tablat	equ	0xFF5
 10654                           prodh	equ	0xFF4
 10655                           prodl	equ	0xFF3
 10656                           intcon	equ	0xFF2
 10657                           intcon2	equ	0xFF1
 10658                           postinc0	equ	0xFEE
 10659                           wreg	equ	0xFE8
 10660                           postinc1	equ	0xFE6
 10661                           postdec1	equ	0xFE5
 10662                           fsr1h	equ	0xFE2
 10663                           fsr1l	equ	0xFE1
 10664                           indf2	equ	0xFDF
 10665                           postinc2	equ	0xFDE
 10666                           postdec2	equ	0xFDD
 10667                           fsr2h	equ	0xFDA
 10668                           fsr2l	equ	0xFD9
 10669                           status	equ	0xFD8
 10670                           
 10671 ;; *************** function _INTERRUPT_InterruptManager *****************
 10672 ;; Defined at:
 10673 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
 10674 ;; Parameters:    Size  Location     Type
 10675 ;;		None
 10676 ;; Auto vars:     Size  Location     Type
 10677 ;;		None
 10678 ;; Return value:  Size  Location     Type
 10679 ;;		None               void
 10680 ;; Registers used:
 10681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10682 ;; Tracked objects:
 10683 ;;		On entry : 0/0
 10684 ;;		On exit  : 0/0
 10685 ;;		Unchanged: 0/0
 10686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10687 ;;      Params:         0       0       0       0       0       0       0
 10688 ;;      Locals:         0       0       0       0       0       0       0
 10689 ;;      Temps:         14       0       0       0       0       0       0
 10690 ;;      Totals:        14       0       0       0       0       0       0
 10691 ;;Total ram usage:       14 bytes
 10692 ;; Hardware stack levels used:    1
 10693 ;; Hardware stack levels required when called:    3
 10694 ;; This function calls:
 10695 ;;		_ADC_ISR
 10696 ;;		_EUSART1_Receive_ISR
 10697 ;;		_EUSART1_Transmit_ISR
 10698 ;;		_TMR1_ISR
 10699 ;; This function is called by:
 10700 ;;		Interrupt level 2
 10701 ;; This function uses a non-reentrant model
 10702 ;;
 10703                           
 10704                           	psect	intcode
 10705  000008                     __pintcode:
 10706                           	opt stack 0
 10707  000008                     _INTERRUPT_InterruptManager:
 10708                           	opt stack 22
 10709                           
 10710                           ;incstack = 0
 10711  000008  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
 10712  00000C  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 10713  000010  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 10714  000014  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 10715  000018  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 10716  00001C  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 10717  000020  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 10718  000024  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 10719  000028  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
 10720  00002C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
 10721  000030  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 10722  000034  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 10723  000038  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 10724  00003C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
 10725                           
 10726                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 10727  000040  BA9D               	btfsc	3997,5,c	;volatile
 10728  000042  AA9E               	btfss	3998,5,c	;volatile
 10729  000044  D003               	goto	i2l278
 10730                           
 10731                           ;interrupt_manager.c: 73: {
 10732                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
 10733  000046  ECB0  F01E         	call	_EUSART1_Receive_ISR	;wreg free
 10734                           
 10735                           ;interrupt_manager.c: 75: }
 10736  00004A  D011               	goto	i2l286
 10737  00004C                     i2l278:
 10738                           
 10739                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 10740  00004C  BC9D               	btfsc	3997,6,c	;volatile
 10741  00004E  AC9E               	btfss	3998,6,c	;volatile
 10742  000050  D003               	goto	i2l280
 10743                           
 10744                           ;interrupt_manager.c: 77: {
 10745                           ;interrupt_manager.c: 78: ADC_ISR();
 10746  000052  EC9B  F009         	call	_ADC_ISR	;wreg free
 10747                           
 10748                           ;interrupt_manager.c: 79: }
 10749  000056  D00B               	goto	i2l286
 10750  000058                     i2l280:
 10751                           
 10752                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 10753  000058  B09D               	btfsc	3997,0,c	;volatile
 10754  00005A  A09E               	btfss	3998,0,c	;volatile
 10755  00005C  D003               	goto	i2l282
 10756                           
 10757                           ;interrupt_manager.c: 81: {
 10758                           ;interrupt_manager.c: 82: TMR1_ISR();
 10759  00005E  ECAD  F01D         	call	_TMR1_ISR	;wreg free
 10760                           
 10761                           ;interrupt_manager.c: 83: }
 10762  000062  D005               	goto	i2l286
 10763  000064                     i2l282:
 10764                           
 10765                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 10766  000064  B89D               	btfsc	3997,4,c	;volatile
 10767  000066  A89E               	btfss	3998,4,c	;volatile
 10768  000068  D002               	goto	i2l286
 10769                           
 10770                           ;interrupt_manager.c: 85: {
 10771                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
 10772  00006A  EC98  F01E         	call	_EUSART1_Transmit_ISR	;wreg free
 10773  00006E                     i2l286:
 10774  00006E  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 10775  000072  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 10776  000076  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 10777  00007A  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 10778  00007E  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 10779  000082  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 10780  000086  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 10781  00008A  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 10782  00008E  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 10783  000092  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 10784  000096  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 10785  00009A  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 10786  00009E  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 10787  0000A2  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 10788  0000A6  0011               	retfie		f
 10789  0000A8                     __end_of_INTERRUPT_InterruptManager:
 10790                           	opt stack 0
 10791                           pclatu	equ	0xFFB
 10792                           pclath	equ	0xFFA
 10793                           tblptru	equ	0xFF8
 10794                           tblptrh	equ	0xFF7
 10795                           tblptrl	equ	0xFF6
 10796                           tablat	equ	0xFF5
 10797                           prodh	equ	0xFF4
 10798                           prodl	equ	0xFF3
 10799                           intcon	equ	0xFF2
 10800                           intcon2	equ	0xFF1
 10801                           postinc0	equ	0xFEE
 10802                           fsr0h	equ	0xFEA
 10803                           fsr0l	equ	0xFE9
 10804                           wreg	equ	0xFE8
 10805                           postinc1	equ	0xFE6
 10806                           postdec1	equ	0xFE5
 10807                           fsr1h	equ	0xFE2
 10808                           fsr1l	equ	0xFE1
 10809                           indf2	equ	0xFDF
 10810                           postinc2	equ	0xFDE
 10811                           postdec2	equ	0xFDD
 10812                           fsr2h	equ	0xFDA
 10813                           fsr2l	equ	0xFD9
 10814                           status	equ	0xFD8
 10815                           
 10816 ;; *************** function _TMR1_ISR *****************
 10817 ;; Defined at:
 10818 ;;		line 110 in file "mcc_generated_files/tmr1.c"
 10819 ;; Parameters:    Size  Location     Type
 10820 ;;		None
 10821 ;; Auto vars:     Size  Location     Type
 10822 ;;		None
 10823 ;; Return value:  Size  Location     Type
 10824 ;;		None               void
 10825 ;; Registers used:
 10826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10827 ;; Tracked objects:
 10828 ;;		On entry : 0/0
 10829 ;;		On exit  : 0/0
 10830 ;;		Unchanged: 0/0
 10831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10832 ;;      Params:         0       0       0       0       0       0       0
 10833 ;;      Locals:         0       0       0       0       0       0       0
 10834 ;;      Temps:          3       0       0       0       0       0       0
 10835 ;;      Totals:         3       0       0       0       0       0       0
 10836 ;;Total ram usage:        3 bytes
 10837 ;; Hardware stack levels used:    1
 10838 ;; Hardware stack levels required when called:    2
 10839 ;; This function calls:
 10840 ;;		_Battery_Read
 10841 ;;		_Temp_Read
 10842 ;; This function is called by:
 10843 ;;		_INTERRUPT_InterruptManager
 10844 ;; This function uses a non-reentrant model
 10845 ;;
 10846                           
 10847                           	psect	text46
 10848  003B5A                     __ptext46:
 10849                           	opt stack 0
 10850  003B5A                     _TMR1_ISR:
 10851                           	opt stack 22
 10852                           
 10853                           ;tmr1.c: 114: PIR1bits.TMR1IF = 0;
 10854                           
 10855                           ;incstack = 0
 10856  003B5A  909E               	bcf	3998,0,c	;volatile
 10857                           
 10858                           ;tmr1.c: 117: TMR1H = (timer1ReloadVal >> 8);
 10859  003B5C  C044  F003         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
 10860  003B60  C003  F004         	movff	??_TMR1_ISR,??_TMR1_ISR+1
 10861  003B64  6A05               	clrf	(??_TMR1_ISR+2)& (0+255),c
 10862  003B66  5004               	movf	??_TMR1_ISR+1,w,c
 10863  003B68  6ECF               	movwf	4047,c	;volatile
 10864                           
 10865                           ;tmr1.c: 118: TMR1L = (uint8_t) timer1ReloadVal;
 10866  003B6A  C043  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 10867                           
 10868                           ;tmr1.c: 121: if (++CountCallBack >= 4)
 10869  003B6E  EE20  F03A         	lfsr	2,_CountCallBack
 10870  003B72  2ADE               	incf	postinc2,f,c
 10871  003B74  0E00               	movlw	0
 10872  003B76  22DD               	addwfc	postdec2,f,c
 10873  003B78  52DE               	movf	postinc2,f,c
 10874  003B7A  50DD               	movf	postdec2,w,c
 10875  003B7C  0A80               	xorlw	128
 10876  003B7E  0F80               	addlw	128
 10877  003B80  0E04               	movlw	4
 10878  003B82  B4D8               	btfsc	status,2,c
 10879  003B84  5CDF               	subwf	indf2,w,c
 10880  003B86  A0D8               	btfss	status,0,c
 10881  003B88  D005               	goto	i2l3852
 10882                           
 10883                           ;tmr1.c: 122: {
 10884                           ;tmr1.c: 124: do { LATA4 = ~LATA4; } while(0);
 10885  003B8A  7889               	btg	3977,4,c	;volatile
 10886                           
 10887                           ;tmr1.c: 127: CountCallBack = 0;
 10888  003B8C  0E00               	movlw	0
 10889  003B8E  6E3B               	movwf	_CountCallBack+1,c
 10890  003B90  0E00               	movlw	0
 10891  003B92  6E3A               	movwf	_CountCallBack,c
 10892  003B94                     i2l3852:
 10893                           
 10894                           ;tmr1.c: 132: }
 10895                           ;tmr1.c: 133: if(CountCallBack == 2)
 10896  003B94  503A               	movf	_CountCallBack,w,c
 10897  003B96  0A02               	xorlw	2
 10898  003B98  103B               	iorwf	_CountCallBack+1,w,c
 10899  003B9A  B4D8               	btfsc	status,2,c
 10900                           
 10901                           ;tmr1.c: 134: {
 10902                           ;tmr1.c: 135: Battery_Read();
 10903  003B9C  EC6F  F01F         	call	_Battery_Read	;wreg free
 10904                           
 10905                           ;tmr1.c: 136: }
 10906                           ;tmr1.c: 137: if(CountCallBack == 3)
 10907  003BA0  503A               	movf	_CountCallBack,w,c
 10908  003BA2  0A03               	xorlw	3
 10909  003BA4  103B               	iorwf	_CountCallBack+1,w,c
 10910  003BA6  A4D8               	btfss	status,2,c
 10911  003BA8  0012               	return	
 10912                           
 10913                           ;tmr1.c: 138: {
 10914                           ;tmr1.c: 139: Temp_Read();
 10915  003BAA  EC63  F01F         	call	_Temp_Read	;wreg free
 10916  003BAE  0012               	return	
 10917  003BB0                     __end_of_TMR1_ISR:
 10918                           	opt stack 0
 10919                           pclatu	equ	0xFFB
 10920                           pclath	equ	0xFFA
 10921                           tblptru	equ	0xFF8
 10922                           tblptrh	equ	0xFF7
 10923                           tblptrl	equ	0xFF6
 10924                           tablat	equ	0xFF5
 10925                           prodh	equ	0xFF4
 10926                           prodl	equ	0xFF3
 10927                           intcon	equ	0xFF2
 10928                           intcon2	equ	0xFF1
 10929                           postinc0	equ	0xFEE
 10930                           fsr0h	equ	0xFEA
 10931                           fsr0l	equ	0xFE9
 10932                           wreg	equ	0xFE8
 10933                           postinc1	equ	0xFE6
 10934                           postdec1	equ	0xFE5
 10935                           fsr1h	equ	0xFE2
 10936                           fsr1l	equ	0xFE1
 10937                           indf2	equ	0xFDF
 10938                           postinc2	equ	0xFDE
 10939                           postdec2	equ	0xFDD
 10940                           fsr2h	equ	0xFDA
 10941                           fsr2l	equ	0xFD9
 10942                           status	equ	0xFD8
 10943                           
 10944 ;; *************** function _Temp_Read *****************
 10945 ;; Defined at:
 10946 ;;		line 27 in file "Tempeture.c"
 10947 ;; Parameters:    Size  Location     Type
 10948 ;;		None
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;		None
 10951 ;; Return value:  Size  Location     Type
 10952 ;;                  2   28[COMRAM] int 
 10953 ;; Registers used:
 10954 ;;		wreg, status,2, status,0, cstack
 10955 ;; Tracked objects:
 10956 ;;		On entry : 0/0
 10957 ;;		On exit  : 0/0
 10958 ;;		Unchanged: 0/0
 10959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10960 ;;      Params:         0       0       0       0       0       0       0
 10961 ;;      Locals:         0       0       0       0       0       0       0
 10962 ;;      Temps:          0       0       0       0       0       0       0
 10963 ;;      Totals:         0       0       0       0       0       0       0
 10964 ;;Total ram usage:        0 bytes
 10965 ;; Hardware stack levels used:    1
 10966 ;; Hardware stack levels required when called:    1
 10967 ;; This function calls:
 10968 ;;		_ADC_StartConversion
 10969 ;; This function is called by:
 10970 ;;		_TMR1_ISR
 10971 ;; This function uses a non-reentrant model
 10972 ;;
 10973                           
 10974                           	psect	text47
 10975  003EC6                     __ptext47:
 10976                           	opt stack 0
 10977  003EC6                     _Temp_Read:
 10978                           	opt stack 22
 10979                           
 10980                           ;Tempeture.c: 30: ADC_Buffer_Point = 0;
 10981                           
 10982                           ;incstack = 0
 10983  003EC6  0E00               	movlw	0
 10984  003EC8  6E39               	movwf	_ADC_Buffer_Point+1,c
 10985  003ECA  0E00               	movlw	0
 10986  003ECC  6E38               	movwf	_ADC_Buffer_Point,c
 10987                           
 10988                           ;Tempeture.c: 31: Temp_Aquire = 1;
 10989  003ECE  0E01               	movlw	1
 10990  003ED0  6E3C               	movwf	_Temp_Aquire,c
 10991                           
 10992                           ;Tempeture.c: 32: ADCON1 = 0x80;
 10993  003ED2  0E80               	movlw	128
 10994  003ED4  6EC1               	movwf	4033,c	;volatile
 10995                           
 10996                           ;Tempeture.c: 33: ADC_StartConversion(Temp1);
 10997  003ED6  0E0E               	movlw	14
 10998  003ED8  EC4A  F01F         	call	_ADC_StartConversion
 10999  003EDC  0012               	return	
 11000  003EDE                     __end_of_Temp_Read:
 11001                           	opt stack 0
 11002                           pclatu	equ	0xFFB
 11003                           pclath	equ	0xFFA
 11004                           tblptru	equ	0xFF8
 11005                           tblptrh	equ	0xFF7
 11006                           tblptrl	equ	0xFF6
 11007                           tablat	equ	0xFF5
 11008                           prodh	equ	0xFF4
 11009                           prodl	equ	0xFF3
 11010                           intcon	equ	0xFF2
 11011                           intcon2	equ	0xFF1
 11012                           postinc0	equ	0xFEE
 11013                           fsr0h	equ	0xFEA
 11014                           fsr0l	equ	0xFE9
 11015                           wreg	equ	0xFE8
 11016                           postinc1	equ	0xFE6
 11017                           postdec1	equ	0xFE5
 11018                           fsr1h	equ	0xFE2
 11019                           fsr1l	equ	0xFE1
 11020                           indf2	equ	0xFDF
 11021                           postinc2	equ	0xFDE
 11022                           postdec2	equ	0xFDD
 11023                           fsr2h	equ	0xFDA
 11024                           fsr2l	equ	0xFD9
 11025                           status	equ	0xFD8
 11026                           
 11027 ;; *************** function _Battery_Read *****************
 11028 ;; Defined at:
 11029 ;;		line 18 in file "Battery.c"
 11030 ;; Parameters:    Size  Location     Type
 11031 ;;		None
 11032 ;; Auto vars:     Size  Location     Type
 11033 ;;		None
 11034 ;; Return value:  Size  Location     Type
 11035 ;;                  2   26[COMRAM] int 
 11036 ;; Registers used:
 11037 ;;		wreg, status,2, status,0, cstack
 11038 ;; Tracked objects:
 11039 ;;		On entry : 0/0
 11040 ;;		On exit  : 0/0
 11041 ;;		Unchanged: 0/0
 11042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11043 ;;      Params:         0       0       0       0       0       0       0
 11044 ;;      Locals:         0       0       0       0       0       0       0
 11045 ;;      Temps:          0       0       0       0       0       0       0
 11046 ;;      Totals:         0       0       0       0       0       0       0
 11047 ;;Total ram usage:        0 bytes
 11048 ;; Hardware stack levels used:    1
 11049 ;; Hardware stack levels required when called:    1
 11050 ;; This function calls:
 11051 ;;		_ADC_StartConversion
 11052 ;; This function is called by:
 11053 ;;		_TMR1_ISR
 11054 ;; This function uses a non-reentrant model
 11055 ;;
 11056                           
 11057                           	psect	text48
 11058  003EDE                     __ptext48:
 11059                           	opt stack 0
 11060  003EDE                     _Battery_Read:
 11061                           	opt stack 22
 11062                           
 11063                           ;Battery.c: 21: ADC_Buffer_Point = 0;
 11064                           
 11065                           ;incstack = 0
 11066  003EDE  0E00               	movlw	0
 11067  003EE0  6E39               	movwf	_ADC_Buffer_Point+1,c
 11068  003EE2  0E00               	movlw	0
 11069  003EE4  6E38               	movwf	_ADC_Buffer_Point,c
 11070                           
 11071                           ;Battery.c: 22: Volt_Aquire = 1;
 11072  003EE6  0E01               	movlw	1
 11073  003EE8  6E3D               	movwf	_Volt_Aquire,c
 11074                           
 11075                           ;Battery.c: 23: ADCON1 = 0x80;
 11076  003EEA  0E80               	movlw	128
 11077  003EEC  6EC1               	movwf	4033,c	;volatile
 11078                           
 11079                           ;Battery.c: 24: ADC_StartConversion(Battery1);
 11080  003EEE  0E01               	movlw	1
 11081  003EF0  EC4A  F01F         	call	_ADC_StartConversion
 11082  003EF4  0012               	return	
 11083  003EF6                     __end_of_Battery_Read:
 11084                           	opt stack 0
 11085                           pclatu	equ	0xFFB
 11086                           pclath	equ	0xFFA
 11087                           tblptru	equ	0xFF8
 11088                           tblptrh	equ	0xFF7
 11089                           tblptrl	equ	0xFF6
 11090                           tablat	equ	0xFF5
 11091                           prodh	equ	0xFF4
 11092                           prodl	equ	0xFF3
 11093                           intcon	equ	0xFF2
 11094                           intcon2	equ	0xFF1
 11095                           postinc0	equ	0xFEE
 11096                           fsr0h	equ	0xFEA
 11097                           fsr0l	equ	0xFE9
 11098                           wreg	equ	0xFE8
 11099                           postinc1	equ	0xFE6
 11100                           postdec1	equ	0xFE5
 11101                           fsr1h	equ	0xFE2
 11102                           fsr1l	equ	0xFE1
 11103                           indf2	equ	0xFDF
 11104                           postinc2	equ	0xFDE
 11105                           postdec2	equ	0xFDD
 11106                           fsr2h	equ	0xFDA
 11107                           fsr2l	equ	0xFD9
 11108                           status	equ	0xFD8
 11109                           
 11110 ;; *************** function _EUSART1_Transmit_ISR *****************
 11111 ;; Defined at:
 11112 ;;		line 173 in file "mcc_generated_files/eusart1.c"
 11113 ;; Parameters:    Size  Location     Type
 11114 ;;		None
 11115 ;; Auto vars:     Size  Location     Type
 11116 ;;		None
 11117 ;; Return value:  Size  Location     Type
 11118 ;;		None               void
 11119 ;; Registers used:
 11120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11121 ;; Tracked objects:
 11122 ;;		On entry : 0/0
 11123 ;;		On exit  : 0/0
 11124 ;;		Unchanged: 0/0
 11125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11126 ;;      Params:         0       0       0       0       0       0       0
 11127 ;;      Locals:         0       0       0       0       0       0       0
 11128 ;;      Temps:          0       0       0       0       0       0       0
 11129 ;;      Totals:         0       0       0       0       0       0       0
 11130 ;;Total ram usage:        0 bytes
 11131 ;; Hardware stack levels used:    1
 11132 ;; This function calls:
 11133 ;;		Nothing
 11134 ;; This function is called by:
 11135 ;;		_INTERRUPT_InterruptManager
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139                           	psect	text49
 11140  003D30                     __ptext49:
 11141                           	opt stack 0
 11142  003D30                     _EUSART1_Transmit_ISR:
 11143                           	opt stack 24
 11144                           
 11145                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 11146                           
 11147                           ;incstack = 0
 11148  003D30  0E08               	movlw	8
 11149  003D32  5C45               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
 11150  003D34  B0D8               	btfsc	status,0,c
 11151  003D36  D012               	goto	i2l130
 11152                           
 11153                           ;eusart1.c: 178: {
 11154                           ;eusart1.c: 179: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 11155  003D38  5042               	movf	_eusart1TxTail,w,c
 11156  003D3A  0D01               	mullw	1
 11157  003D3C  0E30               	movlw	low _eusart1TxBuffer
 11158  003D3E  24F3               	addwf	prodl,w,c
 11159  003D40  6ED9               	movwf	fsr2l,c
 11160  003D42  0E00               	movlw	high _eusart1TxBuffer
 11161  003D44  20F4               	addwfc	prodh,w,c
 11162  003D46  6EDA               	movwf	fsr2h,c
 11163  003D48  50DF               	movf	indf2,w,c
 11164  003D4A  6EAD               	movwf	4013,c	;volatile
 11165  003D4C  2A42               	incf	_eusart1TxTail,f,c
 11166                           
 11167                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 11168  003D4E  0E07               	movlw	7
 11169  003D50  6442               	cpfsgt	_eusart1TxTail,c
 11170  003D52  D002               	goto	i2l2272
 11171                           
 11172                           ;eusart1.c: 181: {
 11173                           ;eusart1.c: 182: eusart1TxTail = 0;
 11174  003D54  0E00               	movlw	0
 11175  003D56  6E42               	movwf	_eusart1TxTail,c
 11176  003D58                     i2l2272:
 11177                           
 11178                           ;eusart1.c: 183: }
 11179                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
 11180  003D58  2A45               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 11181                           
 11182                           ;eusart1.c: 185: }
 11183  003D5A  0012               	return	
 11184  003D5C                     i2l130:
 11185                           
 11186                           ;eusart1.c: 186: else
 11187                           ;eusart1.c: 187: {
 11188                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
 11189  003D5C  989D               	bcf	3997,4,c	;volatile
 11190  003D5E  0012               	return	
 11191  003D60                     __end_of_EUSART1_Transmit_ISR:
 11192                           	opt stack 0
 11193                           pclatu	equ	0xFFB
 11194                           pclath	equ	0xFFA
 11195                           tblptru	equ	0xFF8
 11196                           tblptrh	equ	0xFF7
 11197                           tblptrl	equ	0xFF6
 11198                           tablat	equ	0xFF5
 11199                           prodh	equ	0xFF4
 11200                           prodl	equ	0xFF3
 11201                           intcon	equ	0xFF2
 11202                           intcon2	equ	0xFF1
 11203                           postinc0	equ	0xFEE
 11204                           fsr0h	equ	0xFEA
 11205                           fsr0l	equ	0xFE9
 11206                           wreg	equ	0xFE8
 11207                           postinc1	equ	0xFE6
 11208                           postdec1	equ	0xFE5
 11209                           fsr1h	equ	0xFE2
 11210                           fsr1l	equ	0xFE1
 11211                           indf2	equ	0xFDF
 11212                           postinc2	equ	0xFDE
 11213                           postdec2	equ	0xFDD
 11214                           fsr2h	equ	0xFDA
 11215                           fsr2l	equ	0xFD9
 11216                           status	equ	0xFD8
 11217                           
 11218 ;; *************** function _EUSART1_Receive_ISR *****************
 11219 ;; Defined at:
 11220 ;;		line 192 in file "mcc_generated_files/eusart1.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;		None
 11223 ;; Auto vars:     Size  Location     Type
 11224 ;;		None
 11225 ;; Return value:  Size  Location     Type
 11226 ;;		None               void
 11227 ;; Registers used:
 11228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11229 ;; Tracked objects:
 11230 ;;		On entry : 0/0
 11231 ;;		On exit  : 0/0
 11232 ;;		Unchanged: 0/0
 11233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11234 ;;      Params:         0       0       0       0       0       0       0
 11235 ;;      Locals:         0       0       0       0       0       0       0
 11236 ;;      Temps:          0       0       0       0       0       0       0
 11237 ;;      Totals:         0       0       0       0       0       0       0
 11238 ;;Total ram usage:        0 bytes
 11239 ;; Hardware stack levels used:    1
 11240 ;; This function calls:
 11241 ;;		Nothing
 11242 ;; This function is called by:
 11243 ;;		_INTERRUPT_InterruptManager
 11244 ;; This function uses a non-reentrant model
 11245 ;;
 11246                           
 11247                           	psect	text50
 11248  003D60                     __ptext50:
 11249                           	opt stack 0
 11250  003D60                     _EUSART1_Receive_ISR:
 11251                           	opt stack 24
 11252                           
 11253                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
 11254                           
 11255                           ;incstack = 0
 11256  003D60  A2AB               	btfss	4011,1,c	;volatile
 11257  003D62  D002               	goto	i2l3884
 11258                           
 11259                           ;eusart1.c: 195: {
 11260                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
 11261  003D64  98AB               	bcf	4011,4,c	;volatile
 11262                           
 11263                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
 11264  003D66  88AB               	bsf	4011,4,c	;volatile
 11265  003D68                     i2l3884:
 11266                           
 11267                           ;eusart1.c: 200: }
 11268                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 11269  003D68  503F               	movf	_eusart1RxHead,w,c
 11270  003D6A  0D01               	mullw	1
 11271  003D6C  0101               	movlb	1	; () banked
 11272  003D6E  0E00               	movlw	low _eusart1RxBuffer
 11273  003D70  24F3               	addwf	prodl,w,c
 11274  003D72  6ED9               	movwf	fsr2l,c
 11275  003D74  0101               	movlb	1	; () banked
 11276  003D76  0E01               	movlw	high _eusart1RxBuffer
 11277  003D78  20F4               	addwfc	prodh,w,c
 11278  003D7A  6EDA               	movwf	fsr2h,c
 11279  003D7C  CFAE FFDF          	movff	4014,indf2	;volatile
 11280                           
 11281                           ; BSR set to: 1
 11282  003D80  2A3F               	incf	_eusart1RxHead,f,c
 11283                           
 11284                           ; BSR set to: 1
 11285                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 11286  003D82  0E31               	movlw	49
 11287  003D84  643F               	cpfsgt	_eusart1RxHead,c
 11288  003D86  D002               	goto	i2l3892
 11289                           
 11290                           ; BSR set to: 1
 11291                           ;eusart1.c: 205: {
 11292                           ;eusart1.c: 206: eusart1RxHead = 0;
 11293  003D88  0E00               	movlw	0
 11294  003D8A  6E3F               	movwf	_eusart1RxHead,c
 11295  003D8C                     i2l3892:
 11296                           
 11297                           ; BSR set to: 1
 11298                           ;eusart1.c: 207: }
 11299                           ;eusart1.c: 208: eusart1RxCount++;
 11300  003D8C  2A3E               	incf	_eusart1RxCount,f,c	;volatile
 11301                           
 11302                           ; BSR set to: 1
 11303  003D8E  0012               	return	
 11304  003D90                     __end_of_EUSART1_Receive_ISR:
 11305                           	opt stack 0
 11306                           pclatu	equ	0xFFB
 11307                           pclath	equ	0xFFA
 11308                           tblptru	equ	0xFF8
 11309                           tblptrh	equ	0xFF7
 11310                           tblptrl	equ	0xFF6
 11311                           tablat	equ	0xFF5
 11312                           prodh	equ	0xFF4
 11313                           prodl	equ	0xFF3
 11314                           intcon	equ	0xFF2
 11315                           intcon2	equ	0xFF1
 11316                           postinc0	equ	0xFEE
 11317                           fsr0h	equ	0xFEA
 11318                           fsr0l	equ	0xFE9
 11319                           wreg	equ	0xFE8
 11320                           postinc1	equ	0xFE6
 11321                           postdec1	equ	0xFE5
 11322                           fsr1h	equ	0xFE2
 11323                           fsr1l	equ	0xFE1
 11324                           indf2	equ	0xFDF
 11325                           postinc2	equ	0xFDE
 11326                           postdec2	equ	0xFDD
 11327                           fsr2h	equ	0xFDA
 11328                           fsr2l	equ	0xFD9
 11329                           status	equ	0xFD8
 11330                           
 11331 ;; *************** function _ADC_ISR *****************
 11332 ;; Defined at:
 11333 ;;		line 82 in file "mcc_generated_files/adc.c"
 11334 ;; Parameters:    Size  Location     Type
 11335 ;;		None
 11336 ;; Auto vars:     Size  Location     Type
 11337 ;;  ADC_Result      2   10[COMRAM] int 
 11338 ;; Return value:  Size  Location     Type
 11339 ;;		None               void
 11340 ;; Registers used:
 11341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11342 ;; Tracked objects:
 11343 ;;		On entry : 0/0
 11344 ;;		On exit  : 0/0
 11345 ;;		Unchanged: 0/0
 11346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11347 ;;      Params:         0       0       0       0       0       0       0
 11348 ;;      Locals:         2       0       0       0       0       0       0
 11349 ;;      Temps:          6       0       0       0       0       0       0
 11350 ;;      Totals:         8       0       0       0       0       0       0
 11351 ;;Total ram usage:        8 bytes
 11352 ;; Hardware stack levels used:    1
 11353 ;; Hardware stack levels required when called:    1
 11354 ;; This function calls:
 11355 ;;		_ADC_GetConversionResult
 11356 ;;		_ADC_StartConversion
 11357 ;;		_Set_4051
 11358 ;; This function is called by:
 11359 ;;		_INTERRUPT_InterruptManager
 11360 ;; This function uses a non-reentrant model
 11361 ;;
 11362                           
 11363                           	psect	text51
 11364  001336                     __ptext51:
 11365                           	opt stack 0
 11366  001336                     _ADC_ISR:
 11367                           	opt stack 23
 11368                           
 11369                           ;adc.c: 85: PIR1bits.ADIF = 0;
 11370                           
 11371                           ; BSR set to: 1
 11372                           ;incstack = 0
 11373  001336  9C9E               	bcf	3998,6,c	;volatile
 11374                           
 11375                           ;adc.c: 86: int ADC_Result = 0;
 11376  001338  0E00               	movlw	0
 11377  00133A  6E0C               	movwf	ADC_ISR@ADC_Result+1,c
 11378  00133C  0E00               	movlw	0
 11379  00133E  6E0B               	movwf	ADC_ISR@ADC_Result,c
 11380                           
 11381                           ;adc.c: 87: if (Temp_Aquire){
 11382  001340  503C               	movf	_Temp_Aquire,w,c
 11383  001342  B4D8               	btfsc	status,2,c
 11384  001344  D14A               	goto	i2l3968
 11385                           
 11386                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
 11387  001346  EC7B  F01F         	call	_ADC_GetConversionResult	;wreg free
 11388  00134A  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 11389  00134E  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 11390                           
 11391                           ;adc.c: 90: switch ( ADC_Buffer_Point )
 11392  001352  D117               	goto	i2l3964
 11393  001354                     i2l3900:
 11394                           
 11395                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11396  001354  0EE4               	movlw	low _Temp_Adc
 11397  001356  6E05               	movwf	??_ADC_ISR& (0+255),c
 11398  001358  0E00               	movlw	high _Temp_Adc
 11399  00135A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11400  00135C  90D8               	bcf	status,0,c
 11401  00135E  3438               	rlcf	_ADC_Buffer_Point,w,c
 11402  001360  6ED9               	movwf	fsr2l,c
 11403  001362  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11404  001364  6EDA               	movwf	fsr2h,c
 11405  001366  5005               	movf	??_ADC_ISR,w,c
 11406  001368  26D9               	addwf	fsr2l,f,c
 11407  00136A  5006               	movf	??_ADC_ISR+1,w,c
 11408  00136C  22DA               	addwfc	fsr2h,f,c
 11409  00136E  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11410  001372  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11411                           
 11412                           ;adc.c: 94: Set_4051(0);
 11413  001376  0E00               	movlw	0
 11414  001378  6E02               	movwf	Set_4051@Channel+1,c
 11415  00137A  0E00               	movlw	0
 11416  00137C  6E01               	movwf	Set_4051@Channel,c
 11417  00137E  ECDF  F01E         	call	_Set_4051	;wreg free
 11418                           
 11419                           ;adc.c: 95: ADC_StartConversion(Temp1);
 11420  001382  0E0E               	movlw	14
 11421  001384  EC4A  F01F         	call	_ADC_StartConversion
 11422                           
 11423                           ;adc.c: 96: break;
 11424  001388  D126               	goto	i2l3966
 11425  00138A                     i2l3906:
 11426                           
 11427                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11428  00138A  0EE4               	movlw	low _Temp_Adc
 11429  00138C  6E05               	movwf	??_ADC_ISR& (0+255),c
 11430  00138E  0E00               	movlw	high _Temp_Adc
 11431  001390  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11432  001392  90D8               	bcf	status,0,c
 11433  001394  3438               	rlcf	_ADC_Buffer_Point,w,c
 11434  001396  6ED9               	movwf	fsr2l,c
 11435  001398  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11436  00139A  6EDA               	movwf	fsr2h,c
 11437  00139C  5005               	movf	??_ADC_ISR,w,c
 11438  00139E  26D9               	addwf	fsr2l,f,c
 11439  0013A0  5006               	movf	??_ADC_ISR+1,w,c
 11440  0013A2  22DA               	addwfc	fsr2h,f,c
 11441  0013A4  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11442  0013A8  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11443                           
 11444                           ;adc.c: 99: Set_4051(1);
 11445  0013AC  0E00               	movlw	0
 11446  0013AE  6E02               	movwf	Set_4051@Channel+1,c
 11447  0013B0  0E01               	movlw	1
 11448  0013B2  6E01               	movwf	Set_4051@Channel,c
 11449  0013B4  ECDF  F01E         	call	_Set_4051	;wreg free
 11450                           
 11451                           ;adc.c: 100: ADC_StartConversion(Temp1);
 11452  0013B8  0E0E               	movlw	14
 11453  0013BA  EC4A  F01F         	call	_ADC_StartConversion
 11454                           
 11455                           ;adc.c: 101: break;
 11456  0013BE  D10B               	goto	i2l3966
 11457  0013C0                     i2l3912:
 11458                           
 11459                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11460  0013C0  0EE4               	movlw	low _Temp_Adc
 11461  0013C2  6E05               	movwf	??_ADC_ISR& (0+255),c
 11462  0013C4  0E00               	movlw	high _Temp_Adc
 11463  0013C6  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11464  0013C8  90D8               	bcf	status,0,c
 11465  0013CA  3438               	rlcf	_ADC_Buffer_Point,w,c
 11466  0013CC  6ED9               	movwf	fsr2l,c
 11467  0013CE  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11468  0013D0  6EDA               	movwf	fsr2h,c
 11469  0013D2  5005               	movf	??_ADC_ISR,w,c
 11470  0013D4  26D9               	addwf	fsr2l,f,c
 11471  0013D6  5006               	movf	??_ADC_ISR+1,w,c
 11472  0013D8  22DA               	addwfc	fsr2h,f,c
 11473  0013DA  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11474  0013DE  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11475                           
 11476                           ;adc.c: 104: Set_4051(2);
 11477  0013E2  0E00               	movlw	0
 11478  0013E4  6E02               	movwf	Set_4051@Channel+1,c
 11479  0013E6  0E02               	movlw	2
 11480  0013E8  6E01               	movwf	Set_4051@Channel,c
 11481  0013EA  ECDF  F01E         	call	_Set_4051	;wreg free
 11482                           
 11483                           ;adc.c: 105: ADC_StartConversion(Temp1);
 11484  0013EE  0E0E               	movlw	14
 11485  0013F0  EC4A  F01F         	call	_ADC_StartConversion
 11486                           
 11487                           ;adc.c: 106: break;
 11488  0013F4  D0F0               	goto	i2l3966
 11489  0013F6                     i2l3918:
 11490                           
 11491                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11492  0013F6  0EE4               	movlw	low _Temp_Adc
 11493  0013F8  6E05               	movwf	??_ADC_ISR& (0+255),c
 11494  0013FA  0E00               	movlw	high _Temp_Adc
 11495  0013FC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11496  0013FE  90D8               	bcf	status,0,c
 11497  001400  3438               	rlcf	_ADC_Buffer_Point,w,c
 11498  001402  6ED9               	movwf	fsr2l,c
 11499  001404  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11500  001406  6EDA               	movwf	fsr2h,c
 11501  001408  5005               	movf	??_ADC_ISR,w,c
 11502  00140A  26D9               	addwf	fsr2l,f,c
 11503  00140C  5006               	movf	??_ADC_ISR+1,w,c
 11504  00140E  22DA               	addwfc	fsr2h,f,c
 11505  001410  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11506  001414  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11507                           
 11508                           ;adc.c: 109: Set_4051(3);
 11509  001418  0E00               	movlw	0
 11510  00141A  6E02               	movwf	Set_4051@Channel+1,c
 11511  00141C  0E03               	movlw	3
 11512  00141E  6E01               	movwf	Set_4051@Channel,c
 11513  001420  ECDF  F01E         	call	_Set_4051	;wreg free
 11514                           
 11515                           ;adc.c: 110: ADC_StartConversion(Temp1);
 11516  001424  0E0E               	movlw	14
 11517  001426  EC4A  F01F         	call	_ADC_StartConversion
 11518                           
 11519                           ;adc.c: 111: break;
 11520  00142A  D0D5               	goto	i2l3966
 11521  00142C                     i2l3924:
 11522                           
 11523                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11524  00142C  0EE4               	movlw	low _Temp_Adc
 11525  00142E  6E05               	movwf	??_ADC_ISR& (0+255),c
 11526  001430  0E00               	movlw	high _Temp_Adc
 11527  001432  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11528  001434  90D8               	bcf	status,0,c
 11529  001436  3438               	rlcf	_ADC_Buffer_Point,w,c
 11530  001438  6ED9               	movwf	fsr2l,c
 11531  00143A  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11532  00143C  6EDA               	movwf	fsr2h,c
 11533  00143E  5005               	movf	??_ADC_ISR,w,c
 11534  001440  26D9               	addwf	fsr2l,f,c
 11535  001442  5006               	movf	??_ADC_ISR+1,w,c
 11536  001444  22DA               	addwfc	fsr2h,f,c
 11537  001446  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11538  00144A  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11539                           
 11540                           ;adc.c: 114: Set_4051(4);
 11541  00144E  0E00               	movlw	0
 11542  001450  6E02               	movwf	Set_4051@Channel+1,c
 11543  001452  0E04               	movlw	4
 11544  001454  6E01               	movwf	Set_4051@Channel,c
 11545  001456  ECDF  F01E         	call	_Set_4051	;wreg free
 11546                           
 11547                           ;adc.c: 115: ADC_StartConversion(Temp1);
 11548  00145A  0E0E               	movlw	14
 11549  00145C  EC4A  F01F         	call	_ADC_StartConversion
 11550                           
 11551                           ;adc.c: 116: break;
 11552  001460  D0BA               	goto	i2l3966
 11553  001462                     i2l3930:
 11554                           
 11555                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11556  001462  0EE4               	movlw	low _Temp_Adc
 11557  001464  6E05               	movwf	??_ADC_ISR& (0+255),c
 11558  001466  0E00               	movlw	high _Temp_Adc
 11559  001468  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11560  00146A  90D8               	bcf	status,0,c
 11561  00146C  3438               	rlcf	_ADC_Buffer_Point,w,c
 11562  00146E  6ED9               	movwf	fsr2l,c
 11563  001470  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11564  001472  6EDA               	movwf	fsr2h,c
 11565  001474  5005               	movf	??_ADC_ISR,w,c
 11566  001476  26D9               	addwf	fsr2l,f,c
 11567  001478  5006               	movf	??_ADC_ISR+1,w,c
 11568  00147A  22DA               	addwfc	fsr2h,f,c
 11569  00147C  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11570  001480  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11571                           
 11572                           ;adc.c: 119: Set_4051(5);
 11573  001484  0E00               	movlw	0
 11574  001486  6E02               	movwf	Set_4051@Channel+1,c
 11575  001488  0E05               	movlw	5
 11576  00148A  6E01               	movwf	Set_4051@Channel,c
 11577  00148C  ECDF  F01E         	call	_Set_4051	;wreg free
 11578                           
 11579                           ;adc.c: 120: ADC_StartConversion(Temp1);
 11580  001490  0E0E               	movlw	14
 11581  001492  EC4A  F01F         	call	_ADC_StartConversion
 11582                           
 11583                           ;adc.c: 121: break;
 11584  001496  D09F               	goto	i2l3966
 11585  001498                     i2l3936:
 11586                           
 11587                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11588  001498  0EE4               	movlw	low _Temp_Adc
 11589  00149A  6E05               	movwf	??_ADC_ISR& (0+255),c
 11590  00149C  0E00               	movlw	high _Temp_Adc
 11591  00149E  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11592  0014A0  90D8               	bcf	status,0,c
 11593  0014A2  3438               	rlcf	_ADC_Buffer_Point,w,c
 11594  0014A4  6ED9               	movwf	fsr2l,c
 11595  0014A6  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11596  0014A8  6EDA               	movwf	fsr2h,c
 11597  0014AA  5005               	movf	??_ADC_ISR,w,c
 11598  0014AC  26D9               	addwf	fsr2l,f,c
 11599  0014AE  5006               	movf	??_ADC_ISR+1,w,c
 11600  0014B0  22DA               	addwfc	fsr2h,f,c
 11601  0014B2  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11602  0014B6  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11603                           
 11604                           ;adc.c: 124: Set_4051(6);
 11605  0014BA  0E00               	movlw	0
 11606  0014BC  6E02               	movwf	Set_4051@Channel+1,c
 11607  0014BE  0E06               	movlw	6
 11608  0014C0  6E01               	movwf	Set_4051@Channel,c
 11609  0014C2  ECDF  F01E         	call	_Set_4051	;wreg free
 11610                           
 11611                           ;adc.c: 125: ADC_StartConversion(Temp1);
 11612  0014C6  0E0E               	movlw	14
 11613  0014C8  EC4A  F01F         	call	_ADC_StartConversion
 11614                           
 11615                           ;adc.c: 126: break;
 11616  0014CC  D084               	goto	i2l3966
 11617  0014CE                     i2l3942:
 11618                           
 11619                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11620  0014CE  0EE4               	movlw	low _Temp_Adc
 11621  0014D0  6E05               	movwf	??_ADC_ISR& (0+255),c
 11622  0014D2  0E00               	movlw	high _Temp_Adc
 11623  0014D4  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11624  0014D6  90D8               	bcf	status,0,c
 11625  0014D8  3438               	rlcf	_ADC_Buffer_Point,w,c
 11626  0014DA  6ED9               	movwf	fsr2l,c
 11627  0014DC  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11628  0014DE  6EDA               	movwf	fsr2h,c
 11629  0014E0  5005               	movf	??_ADC_ISR,w,c
 11630  0014E2  26D9               	addwf	fsr2l,f,c
 11631  0014E4  5006               	movf	??_ADC_ISR+1,w,c
 11632  0014E6  22DA               	addwfc	fsr2h,f,c
 11633  0014E8  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11634  0014EC  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11635                           
 11636                           ;adc.c: 129: Set_4051(7);
 11637  0014F0  0E00               	movlw	0
 11638  0014F2  6E02               	movwf	Set_4051@Channel+1,c
 11639  0014F4  0E07               	movlw	7
 11640  0014F6  6E01               	movwf	Set_4051@Channel,c
 11641  0014F8  ECDF  F01E         	call	_Set_4051	;wreg free
 11642                           
 11643                           ;adc.c: 130: ADC_StartConversion(Temp1);
 11644  0014FC  0E0E               	movlw	14
 11645  0014FE  EC4A  F01F         	call	_ADC_StartConversion
 11646                           
 11647                           ;adc.c: 131: break;
 11648  001502  D069               	goto	i2l3966
 11649  001504                     i2l3948:
 11650                           
 11651                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11652  001504  0EE4               	movlw	low _Temp_Adc
 11653  001506  6E05               	movwf	??_ADC_ISR& (0+255),c
 11654  001508  0E00               	movlw	high _Temp_Adc
 11655  00150A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11656  00150C  90D8               	bcf	status,0,c
 11657  00150E  3438               	rlcf	_ADC_Buffer_Point,w,c
 11658  001510  6ED9               	movwf	fsr2l,c
 11659  001512  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11660  001514  6EDA               	movwf	fsr2h,c
 11661  001516  5005               	movf	??_ADC_ISR,w,c
 11662  001518  26D9               	addwf	fsr2l,f,c
 11663  00151A  5006               	movf	??_ADC_ISR+1,w,c
 11664  00151C  22DA               	addwfc	fsr2h,f,c
 11665  00151E  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11666  001522  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11667                           
 11668                           ;adc.c: 134: Set_4051(0);
 11669  001526  0E00               	movlw	0
 11670  001528  6E02               	movwf	Set_4051@Channel+1,c
 11671  00152A  0E00               	movlw	0
 11672  00152C  6E01               	movwf	Set_4051@Channel,c
 11673  00152E  ECDF  F01E         	call	_Set_4051	;wreg free
 11674                           
 11675                           ;adc.c: 135: ADC_StartConversion(Temp2);
 11676  001532  0E14               	movlw	20
 11677  001534  EC4A  F01F         	call	_ADC_StartConversion
 11678                           
 11679                           ;adc.c: 136: break;
 11680  001538  D04E               	goto	i2l3966
 11681  00153A                     i2l3954:
 11682                           
 11683                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11684  00153A  0EE4               	movlw	low _Temp_Adc
 11685  00153C  6E05               	movwf	??_ADC_ISR& (0+255),c
 11686  00153E  0E00               	movlw	high _Temp_Adc
 11687  001540  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11688  001542  90D8               	bcf	status,0,c
 11689  001544  3438               	rlcf	_ADC_Buffer_Point,w,c
 11690  001546  6ED9               	movwf	fsr2l,c
 11691  001548  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11692  00154A  6EDA               	movwf	fsr2h,c
 11693  00154C  5005               	movf	??_ADC_ISR,w,c
 11694  00154E  26D9               	addwf	fsr2l,f,c
 11695  001550  5006               	movf	??_ADC_ISR+1,w,c
 11696  001552  22DA               	addwfc	fsr2h,f,c
 11697  001554  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11698  001558  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11699                           
 11700                           ;adc.c: 139: Set_4051(1);
 11701  00155C  0E00               	movlw	0
 11702  00155E  6E02               	movwf	Set_4051@Channel+1,c
 11703  001560  0E01               	movlw	1
 11704  001562  6E01               	movwf	Set_4051@Channel,c
 11705  001564  ECDF  F01E         	call	_Set_4051	;wreg free
 11706                           
 11707                           ;adc.c: 140: ADC_StartConversion(Temp2);
 11708  001568  0E14               	movlw	20
 11709  00156A  EC4A  F01F         	call	_ADC_StartConversion
 11710                           
 11711                           ;adc.c: 141: break;
 11712  00156E  D033               	goto	i2l3966
 11713  001570                     i2l3960:
 11714                           
 11715                           ;adc.c: 143: Temp_Aquire = 0;
 11716  001570  0E00               	movlw	0
 11717  001572  6E3C               	movwf	_Temp_Aquire,c
 11718                           
 11719                           ;adc.c: 144: Temp_Done = 1;
 11720  001574  0E00               	movlw	0
 11721  001576  0100               	movlb	0	; () banked
 11722  001578  6FDF               	movwf	(_Temp_Done+1)& (0+255),b
 11723  00157A  0E01               	movlw	1
 11724  00157C  0100               	movlb	0	; () banked
 11725  00157E  6FDE               	movwf	_Temp_Done& (0+255),b
 11726                           
 11727                           ;adc.c: 145: break;
 11728  001580  D02A               	goto	i2l3966
 11729  001582                     i2l3964:
 11730  001582  C038  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 11731  001586  C039  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 11732                           
 11733                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11734                           ; Switch size 1, requested type "space"
 11735                           ; Number of cases is 1, Range of values is 0 to 0
 11736                           ; switch strategies available:
 11737                           ; Name         Instructions Cycles
 11738                           ; simple_byte            4     3 (average)
 11739                           ;	Chosen strategy is simple_byte
 11740  00158A  5006               	movf	??_ADC_ISR+1,w,c
 11741  00158C  0A00               	xorlw	0	; case 0
 11742  00158E  A4D8               	btfss	status,2,c
 11743  001590  D022               	goto	i2l3966
 11744                           
 11745                           ; Switch size 1, requested type "space"
 11746                           ; Number of cases is 11, Range of values is 0 to 10
 11747                           ; switch strategies available:
 11748                           ; Name         Instructions Cycles
 11749                           ; simple_byte           34    18 (average)
 11750                           ;	Chosen strategy is simple_byte
 11751  001592  5005               	movf	??_ADC_ISR,w,c
 11752  001594  0A00               	xorlw	0	; case 0
 11753  001596  B4D8               	btfsc	status,2,c
 11754  001598  D6DD               	goto	i2l3900
 11755  00159A  0A01               	xorlw	1	; case 1
 11756  00159C  B4D8               	btfsc	status,2,c
 11757  00159E  D6F5               	goto	i2l3906
 11758  0015A0  0A03               	xorlw	3	; case 2
 11759  0015A2  B4D8               	btfsc	status,2,c
 11760  0015A4  D70D               	goto	i2l3912
 11761  0015A6  0A01               	xorlw	1	; case 3
 11762  0015A8  B4D8               	btfsc	status,2,c
 11763  0015AA  D725               	goto	i2l3918
 11764  0015AC  0A07               	xorlw	7	; case 4
 11765  0015AE  B4D8               	btfsc	status,2,c
 11766  0015B0  D73D               	goto	i2l3924
 11767  0015B2  0A01               	xorlw	1	; case 5
 11768  0015B4  B4D8               	btfsc	status,2,c
 11769  0015B6  D755               	goto	i2l3930
 11770  0015B8  0A03               	xorlw	3	; case 6
 11771  0015BA  B4D8               	btfsc	status,2,c
 11772  0015BC  D76D               	goto	i2l3936
 11773  0015BE  0A01               	xorlw	1	; case 7
 11774  0015C0  B4D8               	btfsc	status,2,c
 11775  0015C2  D785               	goto	i2l3942
 11776  0015C4  0A0F               	xorlw	15	; case 8
 11777  0015C6  B4D8               	btfsc	status,2,c
 11778  0015C8  D79D               	goto	i2l3948
 11779  0015CA  0A01               	xorlw	1	; case 9
 11780  0015CC  B4D8               	btfsc	status,2,c
 11781  0015CE  D7B5               	goto	i2l3954
 11782  0015D0  0A03               	xorlw	3	; case 10
 11783  0015D2  B4D8               	btfsc	status,2,c
 11784  0015D4  D7CD               	goto	i2l3960
 11785  0015D6                     i2l3966:
 11786                           
 11787                           ;adc.c: 147: ADC_Buffer_Point++;
 11788  0015D6  4A38               	infsnz	_ADC_Buffer_Point,f,c
 11789  0015D8  2A39               	incf	_ADC_Buffer_Point+1,f,c
 11790  0015DA                     i2l3968:
 11791                           
 11792                           ;adc.c: 148: }
 11793                           ;adc.c: 149: if (Volt_Aquire){
 11794  0015DA  503D               	movf	_Volt_Aquire,w,c
 11795  0015DC  B4D8               	btfsc	status,2,c
 11796  0015DE  0012               	return	
 11797                           
 11798                           ;adc.c: 151: ADC_Result = ADC_GetConversionResult();
 11799  0015E0  EC7B  F01F         	call	_ADC_GetConversionResult	;wreg free
 11800  0015E4  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 11801  0015E8  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 11802                           
 11803                           ;adc.c: 152: switch ( ADC_Buffer_Point )
 11804  0015EC  D18F               	goto	i2l4016
 11805  0015EE                     i2l3972:
 11806                           
 11807                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11808  0015EE  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 11809  0015F2  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 11810  0015F6  0E00               	movlw	0
 11811  0015F8  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 11812  0015FA  0EFF               	movlw	255
 11813  0015FC  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 11814  0015FE  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 11815  001600  0EB6               	movlw	low _Battery_Adc
 11816  001602  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 11817  001604  0E00               	movlw	high _Battery_Adc
 11818  001606  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 11819  001608  90D8               	bcf	status,0,c
 11820  00160A  3438               	rlcf	_ADC_Buffer_Point,w,c
 11821  00160C  6ED9               	movwf	fsr2l,c
 11822  00160E  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11823  001610  6EDA               	movwf	fsr2h,c
 11824  001612  90D8               	bcf	status,0,c
 11825  001614  36D9               	rlcf	fsr2l,f,c
 11826  001616  36DA               	rlcf	fsr2h,f,c
 11827  001618  5009               	movf	??_ADC_ISR+4,w,c
 11828  00161A  26D9               	addwf	fsr2l,f,c
 11829  00161C  500A               	movf	??_ADC_ISR+5,w,c
 11830  00161E  22DA               	addwfc	fsr2h,f,c
 11831  001620  C005  FFDE         	movff	??_ADC_ISR,postinc2
 11832  001624  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 11833  001628  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 11834  00162C  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 11835  001630  06D9               	decf	fsr2l,f,c
 11836  001632  06D9               	decf	fsr2l,f,c
 11837                           
 11838                           ;adc.c: 156: ADC_StartConversion(Battery1);
 11839  001634  0E01               	movlw	1
 11840  001636  EC4A  F01F         	call	_ADC_StartConversion
 11841                           
 11842                           ;adc.c: 157: break;
 11843  00163A  D192               	goto	i2l4018
 11844  00163C                     i2l3976:
 11845                           
 11846                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11847  00163C  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 11848  001640  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 11849  001644  0E00               	movlw	0
 11850  001646  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 11851  001648  0EFF               	movlw	255
 11852  00164A  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 11853  00164C  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 11854  00164E  0EB6               	movlw	low _Battery_Adc
 11855  001650  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 11856  001652  0E00               	movlw	high _Battery_Adc
 11857  001654  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 11858  001656  90D8               	bcf	status,0,c
 11859  001658  3438               	rlcf	_ADC_Buffer_Point,w,c
 11860  00165A  6ED9               	movwf	fsr2l,c
 11861  00165C  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11862  00165E  6EDA               	movwf	fsr2h,c
 11863  001660  90D8               	bcf	status,0,c
 11864  001662  36D9               	rlcf	fsr2l,f,c
 11865  001664  36DA               	rlcf	fsr2h,f,c
 11866  001666  5009               	movf	??_ADC_ISR+4,w,c
 11867  001668  26D9               	addwf	fsr2l,f,c
 11868  00166A  500A               	movf	??_ADC_ISR+5,w,c
 11869  00166C  22DA               	addwfc	fsr2h,f,c
 11870  00166E  C005  FFDE         	movff	??_ADC_ISR,postinc2
 11871  001672  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 11872  001676  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 11873  00167A  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 11874  00167E  06D9               	decf	fsr2l,f,c
 11875  001680  06D9               	decf	fsr2l,f,c
 11876                           
 11877                           ;adc.c: 160: ADC_StartConversion(Battery2);
 11878  001682  0E03               	movlw	3
 11879  001684  EC4A  F01F         	call	_ADC_StartConversion
 11880                           
 11881                           ;adc.c: 161: break;
 11882  001688  D16B               	goto	i2l4018
 11883  00168A                     i2l3980:
 11884                           
 11885                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11886  00168A  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 11887  00168E  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 11888  001692  0E00               	movlw	0
 11889  001694  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 11890  001696  0EFF               	movlw	255
 11891  001698  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 11892  00169A  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 11893  00169C  0EB6               	movlw	low _Battery_Adc
 11894  00169E  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 11895  0016A0  0E00               	movlw	high _Battery_Adc
 11896  0016A2  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 11897  0016A4  90D8               	bcf	status,0,c
 11898  0016A6  3438               	rlcf	_ADC_Buffer_Point,w,c
 11899  0016A8  6ED9               	movwf	fsr2l,c
 11900  0016AA  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11901  0016AC  6EDA               	movwf	fsr2h,c
 11902  0016AE  90D8               	bcf	status,0,c
 11903  0016B0  36D9               	rlcf	fsr2l,f,c
 11904  0016B2  36DA               	rlcf	fsr2h,f,c
 11905  0016B4  5009               	movf	??_ADC_ISR+4,w,c
 11906  0016B6  26D9               	addwf	fsr2l,f,c
 11907  0016B8  500A               	movf	??_ADC_ISR+5,w,c
 11908  0016BA  22DA               	addwfc	fsr2h,f,c
 11909  0016BC  C005  FFDE         	movff	??_ADC_ISR,postinc2
 11910  0016C0  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 11911  0016C4  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 11912  0016C8  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 11913  0016CC  06D9               	decf	fsr2l,f,c
 11914  0016CE  06D9               	decf	fsr2l,f,c
 11915                           
 11916                           ;adc.c: 164: ADC_StartConversion(Battery3);
 11917  0016D0  0E04               	movlw	4
 11918  0016D2  EC4A  F01F         	call	_ADC_StartConversion
 11919                           
 11920                           ;adc.c: 165: break;
 11921  0016D6  D144               	goto	i2l4018
 11922  0016D8                     i2l3984:
 11923                           
 11924                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11925  0016D8  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 11926  0016DC  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 11927  0016E0  0E00               	movlw	0
 11928  0016E2  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 11929  0016E4  0EFF               	movlw	255
 11930  0016E6  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 11931  0016E8  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 11932  0016EA  0EB6               	movlw	low _Battery_Adc
 11933  0016EC  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 11934  0016EE  0E00               	movlw	high _Battery_Adc
 11935  0016F0  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 11936  0016F2  90D8               	bcf	status,0,c
 11937  0016F4  3438               	rlcf	_ADC_Buffer_Point,w,c
 11938  0016F6  6ED9               	movwf	fsr2l,c
 11939  0016F8  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11940  0016FA  6EDA               	movwf	fsr2h,c
 11941  0016FC  90D8               	bcf	status,0,c
 11942  0016FE  36D9               	rlcf	fsr2l,f,c
 11943  001700  36DA               	rlcf	fsr2h,f,c
 11944  001702  5009               	movf	??_ADC_ISR+4,w,c
 11945  001704  26D9               	addwf	fsr2l,f,c
 11946  001706  500A               	movf	??_ADC_ISR+5,w,c
 11947  001708  22DA               	addwfc	fsr2h,f,c
 11948  00170A  C005  FFDE         	movff	??_ADC_ISR,postinc2
 11949  00170E  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 11950  001712  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 11951  001716  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 11952  00171A  06D9               	decf	fsr2l,f,c
 11953  00171C  06D9               	decf	fsr2l,f,c
 11954                           
 11955                           ;adc.c: 168: ADC_StartConversion(Battery4);
 11956  00171E  0E05               	movlw	5
 11957  001720  EC4A  F01F         	call	_ADC_StartConversion
 11958                           
 11959                           ;adc.c: 169: break;
 11960  001724  D11D               	goto	i2l4018
 11961  001726                     i2l3988:
 11962                           
 11963                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11964  001726  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 11965  00172A  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 11966  00172E  0E00               	movlw	0
 11967  001730  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 11968  001732  0EFF               	movlw	255
 11969  001734  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 11970  001736  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 11971  001738  0EB6               	movlw	low _Battery_Adc
 11972  00173A  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 11973  00173C  0E00               	movlw	high _Battery_Adc
 11974  00173E  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 11975  001740  90D8               	bcf	status,0,c
 11976  001742  3438               	rlcf	_ADC_Buffer_Point,w,c
 11977  001744  6ED9               	movwf	fsr2l,c
 11978  001746  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11979  001748  6EDA               	movwf	fsr2h,c
 11980  00174A  90D8               	bcf	status,0,c
 11981  00174C  36D9               	rlcf	fsr2l,f,c
 11982  00174E  36DA               	rlcf	fsr2h,f,c
 11983  001750  5009               	movf	??_ADC_ISR+4,w,c
 11984  001752  26D9               	addwf	fsr2l,f,c
 11985  001754  500A               	movf	??_ADC_ISR+5,w,c
 11986  001756  22DA               	addwfc	fsr2h,f,c
 11987  001758  C005  FFDE         	movff	??_ADC_ISR,postinc2
 11988  00175C  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 11989  001760  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 11990  001764  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 11991  001768  06D9               	decf	fsr2l,f,c
 11992  00176A  06D9               	decf	fsr2l,f,c
 11993                           
 11994                           ;adc.c: 172: ADC_StartConversion(Battery5);
 11995  00176C  0E18               	movlw	24
 11996  00176E  EC4A  F01F         	call	_ADC_StartConversion
 11997                           
 11998                           ;adc.c: 173: break;
 11999  001772  D0F6               	goto	i2l4018
 12000  001774                     i2l3992:
 12001                           
 12002                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12003  001774  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12004  001778  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12005  00177C  0E00               	movlw	0
 12006  00177E  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12007  001780  0EFF               	movlw	255
 12008  001782  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12009  001784  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12010  001786  0EB6               	movlw	low _Battery_Adc
 12011  001788  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12012  00178A  0E00               	movlw	high _Battery_Adc
 12013  00178C  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12014  00178E  90D8               	bcf	status,0,c
 12015  001790  3438               	rlcf	_ADC_Buffer_Point,w,c
 12016  001792  6ED9               	movwf	fsr2l,c
 12017  001794  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 12018  001796  6EDA               	movwf	fsr2h,c
 12019  001798  90D8               	bcf	status,0,c
 12020  00179A  36D9               	rlcf	fsr2l,f,c
 12021  00179C  36DA               	rlcf	fsr2h,f,c
 12022  00179E  5009               	movf	??_ADC_ISR+4,w,c
 12023  0017A0  26D9               	addwf	fsr2l,f,c
 12024  0017A2  500A               	movf	??_ADC_ISR+5,w,c
 12025  0017A4  22DA               	addwfc	fsr2h,f,c
 12026  0017A6  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12027  0017AA  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12028  0017AE  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12029  0017B2  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12030  0017B6  06D9               	decf	fsr2l,f,c
 12031  0017B8  06D9               	decf	fsr2l,f,c
 12032                           
 12033                           ;adc.c: 176: ADC_StartConversion(Battery6);
 12034  0017BA  0E1A               	movlw	26
 12035  0017BC  EC4A  F01F         	call	_ADC_StartConversion
 12036                           
 12037                           ;adc.c: 177: break;
 12038  0017C0  D0CF               	goto	i2l4018
 12039  0017C2                     i2l3996:
 12040                           
 12041                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12042  0017C2  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12043  0017C6  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12044  0017CA  0E00               	movlw	0
 12045  0017CC  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12046  0017CE  0EFF               	movlw	255
 12047  0017D0  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12048  0017D2  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12049  0017D4  0EB6               	movlw	low _Battery_Adc
 12050  0017D6  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12051  0017D8  0E00               	movlw	high _Battery_Adc
 12052  0017DA  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12053  0017DC  90D8               	bcf	status,0,c
 12054  0017DE  3438               	rlcf	_ADC_Buffer_Point,w,c
 12055  0017E0  6ED9               	movwf	fsr2l,c
 12056  0017E2  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 12057  0017E4  6EDA               	movwf	fsr2h,c
 12058  0017E6  90D8               	bcf	status,0,c
 12059  0017E8  36D9               	rlcf	fsr2l,f,c
 12060  0017EA  36DA               	rlcf	fsr2h,f,c
 12061  0017EC  5009               	movf	??_ADC_ISR+4,w,c
 12062  0017EE  26D9               	addwf	fsr2l,f,c
 12063  0017F0  500A               	movf	??_ADC_ISR+5,w,c
 12064  0017F2  22DA               	addwfc	fsr2h,f,c
 12065  0017F4  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12066  0017F8  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12067  0017FC  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12068  001800  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12069  001804  06D9               	decf	fsr2l,f,c
 12070  001806  06D9               	decf	fsr2l,f,c
 12071                           
 12072                           ;adc.c: 180: ADC_StartConversion(Battery7);
 12073  001808  0E1B               	movlw	27
 12074  00180A  EC4A  F01F         	call	_ADC_StartConversion
 12075                           
 12076                           ;adc.c: 181: break;
 12077  00180E  D0A8               	goto	i2l4018
 12078  001810                     i2l4000:
 12079                           
 12080                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12081  001810  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12082  001814  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12083  001818  0E00               	movlw	0
 12084  00181A  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12085  00181C  0EFF               	movlw	255
 12086  00181E  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12087  001820  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12088  001822  0EB6               	movlw	low _Battery_Adc
 12089  001824  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12090  001826  0E00               	movlw	high _Battery_Adc
 12091  001828  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12092  00182A  90D8               	bcf	status,0,c
 12093  00182C  3438               	rlcf	_ADC_Buffer_Point,w,c
 12094  00182E  6ED9               	movwf	fsr2l,c
 12095  001830  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 12096  001832  6EDA               	movwf	fsr2h,c
 12097  001834  90D8               	bcf	status,0,c
 12098  001836  36D9               	rlcf	fsr2l,f,c
 12099  001838  36DA               	rlcf	fsr2h,f,c
 12100  00183A  5009               	movf	??_ADC_ISR+4,w,c
 12101  00183C  26D9               	addwf	fsr2l,f,c
 12102  00183E  500A               	movf	??_ADC_ISR+5,w,c
 12103  001840  22DA               	addwfc	fsr2h,f,c
 12104  001842  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12105  001846  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12106  00184A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12107  00184E  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12108  001852  06D9               	decf	fsr2l,f,c
 12109  001854  06D9               	decf	fsr2l,f,c
 12110                           
 12111                           ;adc.c: 184: ADC_StartConversion(Battery8);
 12112  001856  0E08               	movlw	8
 12113  001858  EC4A  F01F         	call	_ADC_StartConversion
 12114                           
 12115                           ;adc.c: 185: break;
 12116  00185C  D081               	goto	i2l4018
 12117  00185E                     i2l4004:
 12118                           
 12119                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12120  00185E  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12121  001862  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12122  001866  0E00               	movlw	0
 12123  001868  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12124  00186A  0EFF               	movlw	255
 12125  00186C  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12126  00186E  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12127  001870  0EB6               	movlw	low _Battery_Adc
 12128  001872  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12129  001874  0E00               	movlw	high _Battery_Adc
 12130  001876  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12131  001878  90D8               	bcf	status,0,c
 12132  00187A  3438               	rlcf	_ADC_Buffer_Point,w,c
 12133  00187C  6ED9               	movwf	fsr2l,c
 12134  00187E  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 12135  001880  6EDA               	movwf	fsr2h,c
 12136  001882  90D8               	bcf	status,0,c
 12137  001884  36D9               	rlcf	fsr2l,f,c
 12138  001886  36DA               	rlcf	fsr2h,f,c
 12139  001888  5009               	movf	??_ADC_ISR+4,w,c
 12140  00188A  26D9               	addwf	fsr2l,f,c
 12141  00188C  500A               	movf	??_ADC_ISR+5,w,c
 12142  00188E  22DA               	addwfc	fsr2h,f,c
 12143  001890  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12144  001894  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12145  001898  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12146  00189C  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12147  0018A0  06D9               	decf	fsr2l,f,c
 12148  0018A2  06D9               	decf	fsr2l,f,c
 12149                           
 12150                           ;adc.c: 188: ADC_StartConversion(Battery9);
 12151  0018A4  0E0B               	movlw	11
 12152  0018A6  EC4A  F01F         	call	_ADC_StartConversion
 12153                           
 12154                           ;adc.c: 189: break;
 12155  0018AA  D05A               	goto	i2l4018
 12156  0018AC                     i2l4008:
 12157                           
 12158                           ;adc.c: 191: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12159  0018AC  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12160  0018B0  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12161  0018B4  0E00               	movlw	0
 12162  0018B6  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12163  0018B8  0EFF               	movlw	255
 12164  0018BA  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12165  0018BC  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12166  0018BE  0EB6               	movlw	low _Battery_Adc
 12167  0018C0  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12168  0018C2  0E00               	movlw	high _Battery_Adc
 12169  0018C4  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12170  0018C6  90D8               	bcf	status,0,c
 12171  0018C8  3438               	rlcf	_ADC_Buffer_Point,w,c
 12172  0018CA  6ED9               	movwf	fsr2l,c
 12173  0018CC  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 12174  0018CE  6EDA               	movwf	fsr2h,c
 12175  0018D0  90D8               	bcf	status,0,c
 12176  0018D2  36D9               	rlcf	fsr2l,f,c
 12177  0018D4  36DA               	rlcf	fsr2h,f,c
 12178  0018D6  5009               	movf	??_ADC_ISR+4,w,c
 12179  0018D8  26D9               	addwf	fsr2l,f,c
 12180  0018DA  500A               	movf	??_ADC_ISR+5,w,c
 12181  0018DC  22DA               	addwfc	fsr2h,f,c
 12182  0018DE  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12183  0018E2  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12184  0018E6  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12185  0018EA  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12186  0018EE  06D9               	decf	fsr2l,f,c
 12187  0018F0  06D9               	decf	fsr2l,f,c
 12188                           
 12189                           ;adc.c: 192: ADC_StartConversion(Battery10);
 12190  0018F2  0E0D               	movlw	13
 12191  0018F4  EC4A  F01F         	call	_ADC_StartConversion
 12192                           
 12193                           ;adc.c: 193: break;
 12194  0018F8  D033               	goto	i2l4018
 12195  0018FA                     i2l4012:
 12196                           
 12197                           ;adc.c: 195: Volt_Aquire = 0;
 12198  0018FA  0E00               	movlw	0
 12199  0018FC  6E3D               	movwf	_Volt_Aquire,c
 12200                           
 12201                           ;adc.c: 196: Volt_Done = 1;
 12202  0018FE  0E00               	movlw	0
 12203  001900  0100               	movlb	0	; () banked
 12204  001902  6FE1               	movwf	(_Volt_Done+1)& (0+255),b
 12205  001904  0E01               	movlw	1
 12206  001906  0100               	movlb	0	; () banked
 12207  001908  6FE0               	movwf	_Volt_Done& (0+255),b
 12208                           
 12209                           ;adc.c: 197: break;
 12210  00190A  D02A               	goto	i2l4018
 12211  00190C                     i2l4016:
 12212  00190C  C038  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 12213  001910  C039  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 12214                           
 12215                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12216                           ; Switch size 1, requested type "space"
 12217                           ; Number of cases is 1, Range of values is 0 to 0
 12218                           ; switch strategies available:
 12219                           ; Name         Instructions Cycles
 12220                           ; simple_byte            4     3 (average)
 12221                           ;	Chosen strategy is simple_byte
 12222  001914  5006               	movf	??_ADC_ISR+1,w,c
 12223  001916  0A00               	xorlw	0	; case 0
 12224  001918  A4D8               	btfss	status,2,c
 12225  00191A  D022               	goto	i2l4018
 12226                           
 12227                           ; Switch size 1, requested type "space"
 12228                           ; Number of cases is 11, Range of values is 0 to 10
 12229                           ; switch strategies available:
 12230                           ; Name         Instructions Cycles
 12231                           ; simple_byte           34    18 (average)
 12232                           ;	Chosen strategy is simple_byte
 12233  00191C  5005               	movf	??_ADC_ISR,w,c
 12234  00191E  0A00               	xorlw	0	; case 0
 12235  001920  B4D8               	btfsc	status,2,c
 12236  001922  D665               	goto	i2l3972
 12237  001924  0A01               	xorlw	1	; case 1
 12238  001926  B4D8               	btfsc	status,2,c
 12239  001928  D689               	goto	i2l3976
 12240  00192A  0A03               	xorlw	3	; case 2
 12241  00192C  B4D8               	btfsc	status,2,c
 12242  00192E  D6AD               	goto	i2l3980
 12243  001930  0A01               	xorlw	1	; case 3
 12244  001932  B4D8               	btfsc	status,2,c
 12245  001934  D6D1               	goto	i2l3984
 12246  001936  0A07               	xorlw	7	; case 4
 12247  001938  B4D8               	btfsc	status,2,c
 12248  00193A  D6F5               	goto	i2l3988
 12249  00193C  0A01               	xorlw	1	; case 5
 12250  00193E  B4D8               	btfsc	status,2,c
 12251  001940  D719               	goto	i2l3992
 12252  001942  0A03               	xorlw	3	; case 6
 12253  001944  B4D8               	btfsc	status,2,c
 12254  001946  D73D               	goto	i2l3996
 12255  001948  0A01               	xorlw	1	; case 7
 12256  00194A  B4D8               	btfsc	status,2,c
 12257  00194C  D761               	goto	i2l4000
 12258  00194E  0A0F               	xorlw	15	; case 8
 12259  001950  B4D8               	btfsc	status,2,c
 12260  001952  D785               	goto	i2l4004
 12261  001954  0A01               	xorlw	1	; case 9
 12262  001956  B4D8               	btfsc	status,2,c
 12263  001958  D7A9               	goto	i2l4008
 12264  00195A  0A03               	xorlw	3	; case 10
 12265  00195C  B4D8               	btfsc	status,2,c
 12266  00195E  D7CD               	goto	i2l4012
 12267  001960                     i2l4018:
 12268                           
 12269                           ;adc.c: 199: ADC_Buffer_Point++;
 12270  001960  4A38               	infsnz	_ADC_Buffer_Point,f,c
 12271  001962  2A39               	incf	_ADC_Buffer_Point+1,f,c
 12272  001964  0012               	return	
 12273  001966                     __end_of_ADC_ISR:
 12274                           	opt stack 0
 12275                           pclatu	equ	0xFFB
 12276                           pclath	equ	0xFFA
 12277                           tblptru	equ	0xFF8
 12278                           tblptrh	equ	0xFF7
 12279                           tblptrl	equ	0xFF6
 12280                           tablat	equ	0xFF5
 12281                           prodh	equ	0xFF4
 12282                           prodl	equ	0xFF3
 12283                           intcon	equ	0xFF2
 12284                           intcon2	equ	0xFF1
 12285                           postinc0	equ	0xFEE
 12286                           fsr0h	equ	0xFEA
 12287                           fsr0l	equ	0xFE9
 12288                           wreg	equ	0xFE8
 12289                           postinc1	equ	0xFE6
 12290                           postdec1	equ	0xFE5
 12291                           fsr1h	equ	0xFE2
 12292                           fsr1l	equ	0xFE1
 12293                           indf2	equ	0xFDF
 12294                           postinc2	equ	0xFDE
 12295                           postdec2	equ	0xFDD
 12296                           fsr2h	equ	0xFDA
 12297                           fsr2l	equ	0xFD9
 12298                           status	equ	0xFD8
 12299                           
 12300 ;; *************** function _Set_4051 *****************
 12301 ;; Defined at:
 12302 ;;		line 10 in file "Functions.c"
 12303 ;; Parameters:    Size  Location     Type
 12304 ;;  Channel         2    0[COMRAM] int 
 12305 ;; Auto vars:     Size  Location     Type
 12306 ;;		None
 12307 ;; Return value:  Size  Location     Type
 12308 ;;		None               void
 12309 ;; Registers used:
 12310 ;;		wreg, status,2, status,0
 12311 ;; Tracked objects:
 12312 ;;		On entry : 0/0
 12313 ;;		On exit  : 0/0
 12314 ;;		Unchanged: 0/0
 12315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12316 ;;      Params:         2       0       0       0       0       0       0
 12317 ;;      Locals:         0       0       0       0       0       0       0
 12318 ;;      Temps:          2       0       0       0       0       0       0
 12319 ;;      Totals:         4       0       0       0       0       0       0
 12320 ;;Total ram usage:        4 bytes
 12321 ;; Hardware stack levels used:    1
 12322 ;; This function calls:
 12323 ;;		Nothing
 12324 ;; This function is called by:
 12325 ;;		_ADC_ISR
 12326 ;; This function uses a non-reentrant model
 12327 ;;
 12328                           
 12329                           	psect	text52
 12330  003DBE                     __ptext52:
 12331                           	opt stack 0
 12332  003DBE                     _Set_4051:
 12333                           	opt stack 23
 12334                           
 12335                           ;Functions.c: 12: if (Channel & 0x01)
 12336                           
 12337                           ;incstack = 0
 12338  003DBE  B001               	btfsc	Set_4051@Channel,0,c
 12339                           
 12340                           ;Functions.c: 13: {
 12341                           ;Functions.c: 14: do { LATA6 = ~LATA6; } while(0);
 12342  003DC0  7C89               	btg	3977,6,c	;volatile
 12343                           
 12344                           ;Functions.c: 15: }
 12345                           ;Functions.c: 16: if ((Channel>>1) & 0x01)
 12346  003DC2  3402               	rlcf	Set_4051@Channel+1,w,c
 12347  003DC4  3002               	rrcf	Set_4051@Channel+1,w,c
 12348  003DC6  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 12349  003DC8  3001               	rrcf	Set_4051@Channel,w,c
 12350  003DCA  6E03               	movwf	??_Set_4051& (0+255),c
 12351  003DCC  B003               	btfsc	??_Set_4051,0,c
 12352                           
 12353                           ;Functions.c: 17: {
 12354                           ;Functions.c: 18: do { LATC0 = ~LATC0; } while(0);
 12355  003DCE  708B               	btg	3979,0,c	;volatile
 12356                           
 12357                           ;Functions.c: 19: }
 12358                           ;Functions.c: 20: if ((Channel>>2) & 0x01)
 12359  003DD0  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 12360  003DD4  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 12361  003DD8  3404               	rlcf	??_Set_4051+1,w,c
 12362  003DDA  3204               	rrcf	??_Set_4051+1,f,c
 12363  003DDC  3203               	rrcf	??_Set_4051,f,c
 12364  003DDE  3404               	rlcf	??_Set_4051+1,w,c
 12365  003DE0  3204               	rrcf	??_Set_4051+1,f,c
 12366  003DE2  3203               	rrcf	??_Set_4051,f,c
 12367  003DE4  A003               	btfss	??_Set_4051,0,c
 12368  003DE6  0012               	return	
 12369                           
 12370                           ;Functions.c: 21: {
 12371                           ;Functions.c: 22: do { LATC1 = ~LATC1; } while(0);
 12372  003DE8  728B               	btg	3979,1,c	;volatile
 12373  003DEA  0012               	return	
 12374  003DEC                     __end_of_Set_4051:
 12375                           	opt stack 0
 12376                           pclatu	equ	0xFFB
 12377                           pclath	equ	0xFFA
 12378                           tblptru	equ	0xFF8
 12379                           tblptrh	equ	0xFF7
 12380                           tblptrl	equ	0xFF6
 12381                           tablat	equ	0xFF5
 12382                           prodh	equ	0xFF4
 12383                           prodl	equ	0xFF3
 12384                           intcon	equ	0xFF2
 12385                           intcon2	equ	0xFF1
 12386                           postinc0	equ	0xFEE
 12387                           fsr0h	equ	0xFEA
 12388                           fsr0l	equ	0xFE9
 12389                           wreg	equ	0xFE8
 12390                           postinc1	equ	0xFE6
 12391                           postdec1	equ	0xFE5
 12392                           fsr1h	equ	0xFE2
 12393                           fsr1l	equ	0xFE1
 12394                           indf2	equ	0xFDF
 12395                           postinc2	equ	0xFDE
 12396                           postdec2	equ	0xFDD
 12397                           fsr2h	equ	0xFDA
 12398                           fsr2l	equ	0xFD9
 12399                           status	equ	0xFD8
 12400                           
 12401 ;; *************** function _ADC_StartConversion *****************
 12402 ;; Defined at:
 12403 ;;		line 36 in file "mcc_generated_files/adc.c"
 12404 ;; Parameters:    Size  Location     Type
 12405 ;;  channel         1    wreg     enum E8837
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;  channel         1    1[COMRAM] enum E8837
 12408 ;; Return value:  Size  Location     Type
 12409 ;;		None               void
 12410 ;; Registers used:
 12411 ;;		wreg, status,2, status,0
 12412 ;; Tracked objects:
 12413 ;;		On entry : 0/0
 12414 ;;		On exit  : 0/0
 12415 ;;		Unchanged: 0/0
 12416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12417 ;;      Params:         0       0       0       0       0       0       0
 12418 ;;      Locals:         1       0       0       0       0       0       0
 12419 ;;      Temps:          1       0       0       0       0       0       0
 12420 ;;      Totals:         2       0       0       0       0       0       0
 12421 ;;Total ram usage:        2 bytes
 12422 ;; Hardware stack levels used:    1
 12423 ;; This function calls:
 12424 ;;		Nothing
 12425 ;; This function is called by:
 12426 ;;		_ADC_ISR
 12427 ;;		_Battery_Read
 12428 ;;		_Temp_Read
 12429 ;; This function uses a non-reentrant model
 12430 ;;
 12431                           
 12432                           	psect	text53
 12433  003E94                     __ptext53:
 12434                           	opt stack 0
 12435  003E94                     _ADC_StartConversion:
 12436                           	opt stack 22
 12437                           
 12438                           ;incstack = 0
 12439                           ;ADC_StartConversion@channel stored from wreg
 12440  003E94  6E02               	movwf	ADC_StartConversion@channel,c
 12441                           
 12442                           ;adc.c: 39: ADCON0bits.CHS = channel;
 12443  003E96  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 12444  003E9A  4601               	rlncf	??_ADC_StartConversion,f,c
 12445  003E9C  4601               	rlncf	??_ADC_StartConversion,f,c
 12446  003E9E  50C2               	movf	4034,w,c	;volatile
 12447  003EA0  1801               	xorwf	??_ADC_StartConversion,w,c
 12448  003EA2  0B83               	andlw	-125
 12449  003EA4  1801               	xorwf	??_ADC_StartConversion,w,c
 12450  003EA6  6EC2               	movwf	4034,c	;volatile
 12451                           
 12452                           ;adc.c: 42: ADCON0bits.ADON = 1;
 12453  003EA8  80C2               	bsf	4034,0,c	;volatile
 12454                           
 12455                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
 12456  003EAA  82C2               	bsf	4034,1,c	;volatile
 12457  003EAC  0012               	return	
 12458  003EAE                     __end_of_ADC_StartConversion:
 12459                           	opt stack 0
 12460                           pclatu	equ	0xFFB
 12461                           pclath	equ	0xFFA
 12462                           tblptru	equ	0xFF8
 12463                           tblptrh	equ	0xFF7
 12464                           tblptrl	equ	0xFF6
 12465                           tablat	equ	0xFF5
 12466                           prodh	equ	0xFF4
 12467                           prodl	equ	0xFF3
 12468                           intcon	equ	0xFF2
 12469                           intcon2	equ	0xFF1
 12470                           postinc0	equ	0xFEE
 12471                           fsr0h	equ	0xFEA
 12472                           fsr0l	equ	0xFE9
 12473                           wreg	equ	0xFE8
 12474                           postinc1	equ	0xFE6
 12475                           postdec1	equ	0xFE5
 12476                           fsr1h	equ	0xFE2
 12477                           fsr1l	equ	0xFE1
 12478                           indf2	equ	0xFDF
 12479                           postinc2	equ	0xFDE
 12480                           postdec2	equ	0xFDD
 12481                           fsr2h	equ	0xFDA
 12482                           fsr2l	equ	0xFD9
 12483                           status	equ	0xFD8
 12484                           
 12485 ;; *************** function _ADC_GetConversionResult *****************
 12486 ;; Defined at:
 12487 ;;		line 55 in file "mcc_generated_files/adc.c"
 12488 ;; Parameters:    Size  Location     Type
 12489 ;;		None
 12490 ;; Auto vars:     Size  Location     Type
 12491 ;;		None
 12492 ;; Return value:  Size  Location     Type
 12493 ;;                  2    0[COMRAM] unsigned int 
 12494 ;; Registers used:
 12495 ;;		wreg, status,2, status,0
 12496 ;; Tracked objects:
 12497 ;;		On entry : 0/0
 12498 ;;		On exit  : 0/0
 12499 ;;		Unchanged: 0/0
 12500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12501 ;;      Params:         2       0       0       0       0       0       0
 12502 ;;      Locals:         0       0       0       0       0       0       0
 12503 ;;      Temps:          2       0       0       0       0       0       0
 12504 ;;      Totals:         4       0       0       0       0       0       0
 12505 ;;Total ram usage:        4 bytes
 12506 ;; Hardware stack levels used:    1
 12507 ;; This function calls:
 12508 ;;		Nothing
 12509 ;; This function is called by:
 12510 ;;		_ADC_ISR
 12511 ;; This function uses a non-reentrant model
 12512 ;;
 12513                           
 12514                           	psect	text54
 12515  003EF6                     __ptext54:
 12516                           	opt stack 0
 12517  003EF6                     _ADC_GetConversionResult:
 12518                           	opt stack 23
 12519                           
 12520                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
 12521                           
 12522                           ;incstack = 0
 12523  003EF6  50C4               	movf	4036,w,c	;volatile
 12524  003EF8  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 12525  003EFA  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 12526  003EFC  50C3               	movf	4035,w,c	;volatile
 12527  003EFE  2403               	addwf	??_ADC_GetConversionResult,w,c
 12528  003F00  6E01               	movwf	?_ADC_GetConversionResult,c
 12529  003F02  0E00               	movlw	0
 12530  003F04  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 12531  003F06  6E02               	movwf	?_ADC_GetConversionResult+1,c
 12532  003F08  0012               	return	
 12533  003F0A                     __end_of_ADC_GetConversionResult:
 12534                           	opt stack 0
 12535                           pclatu	equ	0xFFB
 12536                           pclath	equ	0xFFA
 12537                           tblptru	equ	0xFF8
 12538                           tblptrh	equ	0xFF7
 12539                           tblptrl	equ	0xFF6
 12540                           tablat	equ	0xFF5
 12541                           prodh	equ	0xFF4
 12542                           prodl	equ	0xFF3
 12543                           intcon	equ	0xFF2
 12544                           intcon2	equ	0xFF1
 12545                           postinc0	equ	0xFEE
 12546                           fsr0h	equ	0xFEA
 12547                           fsr0l	equ	0xFE9
 12548                           wreg	equ	0xFE8
 12549                           postinc1	equ	0xFE6
 12550                           postdec1	equ	0xFE5
 12551                           fsr1h	equ	0xFE2
 12552                           fsr1l	equ	0xFE1
 12553                           indf2	equ	0xFDF
 12554                           postinc2	equ	0xFDE
 12555                           postdec2	equ	0xFDD
 12556                           fsr2h	equ	0xFDA
 12557                           fsr2l	equ	0xFD9
 12558                           status	equ	0xFD8
 12559                           pclatu	equ	0xFFB
 12560                           pclath	equ	0xFFA
 12561                           tblptru	equ	0xFF8
 12562                           tblptrh	equ	0xFF7
 12563                           tblptrl	equ	0xFF6
 12564                           tablat	equ	0xFF5
 12565                           prodh	equ	0xFF4
 12566                           prodl	equ	0xFF3
 12567                           intcon	equ	0xFF2
 12568                           intcon2	equ	0xFF1
 12569                           postinc0	equ	0xFEE
 12570                           fsr0h	equ	0xFEA
 12571                           fsr0l	equ	0xFE9
 12572                           wreg	equ	0xFE8
 12573                           postinc1	equ	0xFE6
 12574                           postdec1	equ	0xFE5
 12575                           fsr1h	equ	0xFE2
 12576                           fsr1l	equ	0xFE1
 12577                           indf2	equ	0xFDF
 12578                           postinc2	equ	0xFDE
 12579                           postdec2	equ	0xFDD
 12580                           fsr2h	equ	0xFDA
 12581                           fsr2l	equ	0xFD9
 12582                           status	equ	0xFD8
 12583                           
 12584                           	psect	rparam
 12585  0000                     pclatu	equ	0xFFB
 12586                           pclath	equ	0xFFA
 12587                           tblptru	equ	0xFF8
 12588                           tblptrh	equ	0xFF7
 12589                           tblptrl	equ	0xFF6
 12590                           tablat	equ	0xFF5
 12591                           prodh	equ	0xFF4
 12592                           prodl	equ	0xFF3
 12593                           intcon	equ	0xFF2
 12594                           intcon2	equ	0xFF1
 12595                           postinc0	equ	0xFEE
 12596                           fsr0h	equ	0xFEA
 12597                           fsr0l	equ	0xFE9
 12598                           wreg	equ	0xFE8
 12599                           postinc1	equ	0xFE6
 12600                           postdec1	equ	0xFE5
 12601                           fsr1h	equ	0xFE2
 12602                           fsr1l	equ	0xFE1
 12603                           indf2	equ	0xFDF
 12604                           postinc2	equ	0xFDE
 12605                           postdec2	equ	0xFDD
 12606                           fsr2h	equ	0xFDA
 12607                           fsr2l	equ	0xFD9
 12608                           status	equ	0xFD8


Data Sizes:
    Strings     40
    Constant    145
    Data        0
    BSS         315
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      69
    BANK0           160     86     152
    BANK1           256      0     230
    BANK2           256     37      37
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_2(CODE[23]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S1039$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _printf->___llmod
    _putch->_EUSART1_Write
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _Temp_Fault->___wmul
    _Temp_Convert->___ftdiv
    ___awtoft->___awdiv
    ___awdiv->___awmod
    _Battery_Get->___wmul
    _Battery_Fault->___wmul
    ___ftge->___wmul
    _Battery_Convert->___ftdiv
    ___ftdiv->___altoft
    ___altoft->___ftpack
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftadd->___ftdiv

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _Temp_Read->_ADC_StartConversion
    _Battery_Read->_ADC_StartConversion
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Temp_Convert
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    _Temp_Fault->___ftge
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _RunBypas->___ftge
    _Battery_Fault->___ftge
    _Battery_Convert->_Battery_Filter
    _Battery_Filter->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5  232479
                                             77 BANK0      9     4      5
                    _Battery_Convert
                      _Battery_Fault
                        _Battery_Get
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              54    47      7   73619
                                             55 BANK0     13     6      7
                                              0 BANK2     37    37      0
                        _Battery_Get (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   17704
                                             27 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             26 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   17425
                                             27 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1819
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     608
                                             26 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          16    10      6     827
                                             26 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2732
                                             34 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     848
                                             39 COMRAM     8     0      8
                                              0 BANK0      1     1      0
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     703
                                             26 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     602
                                             34 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                             26 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    7472
                                              9 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        11    11      0   86075
                                             66 BANK0     11    11      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   34385
                                             61 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     352
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   18612
                                             49 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2840
                                             40 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5873
                                             49 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2447
                                             32 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   18418
                                             49 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    8439
                                              9 BANK0      7     7      0
                        _Battery_Get
                          _SetBypass
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypass                                            6     2      4     649
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    6115
                                              0 BANK0      3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    7503
                                              9 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1430
                                              0 BANK0      9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   43058
                                             51 BANK0      4     4      0
                     _Battery_Filter
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3549
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2834
                                             34 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   18418
                                             49 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    5930
                                             40 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6811
                                             12 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5386
                                             37 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2553
                                             26 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1215
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             3     3      0      44
                                              2 COMRAM     3     3      0
                       _Battery_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (8) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              8     8      0    1171
                                              4 COMRAM     8     8      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     706
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Get
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _RunBypas
     _Battery_Get
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _SetBypass
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _log
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _printf
     _Battery_Get (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _EUSART1_Write
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     25      25       8       14.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      E6       6       89.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     56      98       4       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E8       9        0.0%
DATA                 0      0     1E8      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu May 07 04:46:49 2015

                       ___altoft@exp 002B             _eusart1TxBufferRemaining 0045  
                      ___altoft@sign 002C                         ___awdiv@sign 0026  
                ___wmul@multiplicand 002B                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                         ___ftadd@exp1 0090  
                       ___ftadd@exp2 008F                         ___ftadd@sign 008E  
                                l118 3CD0                                  l501 3262  
                                l530 32A2                                  l523 3292  
                                l516 3282                                  l509 3272  
                                l551 32D2                                  l544 32C2  
                                l537 32B2                                  l565 32F2  
                                l558 32E2                                  l676 0E62  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0043                                  _log 2B0C  
                    __end_of_ADC_ISR 1966                                  fsr2 000FD9  
                       ___awmod@sign 0020                                  prod 000FF3  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                    ?_Battery_Filter 0001                         ___ftdiv@cntr 0066  
                       ___ftdiv@sign 006B                                 l1100 2258  
                               l1111 2EF2                                 l1007 2DD0  
                               l1204 39FE                                 l1125 304E  
                               l1150 3E04                                 l1214 3AEC  
                               l1118 2FBC                                 l1119 2FE4  
                               l1080 211C                                 l1082 2144  
                               l1091 222E                                 l1076 20E2  
                               l3302 3806                                 l5000 1CEE  
                               l5110 2D64                                 l5102 2D34  
                               l5006 1DB0                                 l5120 2D98  
                               l5210 34BA                                 l5130 2DC0  
                               l5034 2F82                                 l5018 3E72  
                               l5300 3AB8                                 l5132 2DCC  
                               l5124 2DA8                                 l5028 2F58  
                               l5142 3938                                 l5206 3474  
                               l5230 285A                                 l5310 3B04  
                               l5062 3016                                 l5144 3944  
                               l5216 34FE                                 l5304 3ADC  
                               l5312 3B10                                 l5072 303E  
                               l5400 06E6                                 l5162 2E4A  
                               l5330 315C                                 l5082 2CB6  
                               l5074 304A                                 l5066 3026  
                               l5402 0700                                 l5156 2E16  
                               l5260 2958                                 l5252 291E  
                               l5412 0744                                 l5420 07BE  
                               l4630 213A                                 l4710 2A76  
                               l5182 2EAA                                 l5262 295E  
                               l5502 0B52                                 l5430 082C  
                               l5406 070A                                 l4640 217C  
                               l4624 212A                                 l4720 2AC0  
                               l5344 35CC                                 l5248 2902  
                               l5280 39C0                                 l5088 2CF2  
                               l5600 0FC2                                 l5440 085E  
                               l5432 0846                                 l4650 21D0  
                               l4618 20F0                                 l4706 2A58  
                               l5266 2984                                 l5258 2940  
                               l4810 38C8                                 l4802 38AE  
                               l4730 3CC0                                 l5514 0BC4  
                               l5442 0896                                 l5426 07EC  
                               l4580 36B8                                 l4660 2224  
                               l4652 21DC                                 l4716 2AA2  
                               l5276 39B0                                 l5604 0FD0  
                               l5540 0CEE                                 l5532 0C78  
                               l5436 0858                                 l4590 3714  
                               l4582 36D6                                 l4574 36A0  
                               l4646 21B0                                 l4910 2B7A  
                               l5358 3A8A                                 l5278 39BC  
                               l4822 38F4                                 l4814 38DC  
                               l4806 38BC                                 l4742 3CF2  
                               l5622 1074                                 l5550 0D28  
                               l5518 0C2C                                 l5606 0FDC  
                               l4648 21C4                                 l5712 3426  
                               l4760 377C                                 l4840 31B0  
                               l4904 2B48                                 l5392 2504  
                               l5288 39F0                                 l5296 3AA6  
                               l4808 38C4                                 l4744 3CF4  
                               l5640 10E8                                 l5616 1056  
                               l5552 0D40                                 l5536 0CC8  
                               l5448 08B2                                 l4586 36EC  
                               l4578 36AE                                 l4666 2282  
                               l4658 2210                                 l4930 3296  
                               l4922 3256                                 l4770 379E  
                               l4754 375C                                 l4834 3C22  
                               l4842 323C                                 l5298 3AB4  
                               l4818 38E6                                 l5650 114C  
                               l5570 0E24                                 l5562 0D8A  
                               l5546 0D1A                                 l5490 0ABE  
                               l5482 0A4C                                 l5474 09DE  
                               l5458 0916                                 l4588 370A  
                               l4676 22D0                                 l4692 2A0A  
                               l4940 32E6                                 l4932 32A6  
                               l4924 3266                                 l5708 33EC  
                               l5644 111C                                 l5636 10C0  
                               l5580 0E66                                 l5556 0D4E  
                               l5396 06D0                                 ?_log 009D  
                               l4686 29D0                                 l4934 32B6  
                               l4926 3276                                 l4766 3792  
                               l4782 37C4                                 l5670 11FE  
                               l5662 11C8                                 l5590 0EDA  
                               l5574 0E32                                 l5486 0A78  
                               l4936 32C6                                 l4928 3286  
                               l4944 32F6                                 l4768 379A  
                               l4960 1F44                                 l5664 11D4  
                               l5656 1184                                 l5568 0E16  
                               l5744 3624                                 l5728 35EC  
                               l4858 279E                                 l4938 32D6  
                               l4786 37D2                                 l4778 37BA  
                               l5682 123C                                 l5690 12FE  
                               l5658 1190                                 l5586 0E88  
                               l5498 0B26                                 l5676 121A  
                               l5692 1312                                 l4886 2616  
                               l4798 3892                                 l4982 1ABA  
                               l5686 1262                                 l5678 1224  
                               l5598 0FB4                                 l4968 2028  
                               l4992 1BA8                                 l4988 1B7C  
                               STR_1 06A9                                 STR_2 0692  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u2810 382E  
                               u5135 2B24                                 u2818 3830  
                               u4611 208E                                 u4621 20AE  
                               u5341 2F3E                                 u5430 2C98  
                               u5361 2F68                                 u5450 2CD4  
                               u5435 2C8E                                 u4821 29AE  
                               u5525 391E                                 u5541 2DF6  
                               u6245 102E                                 u5631 2832  
                               u5455 2CCA                                 u4841 29E8  
                               u5561 2E2A                                 u5650 2886  
                               u5655 287C                                 u5980 0966  
                               u5965 08F0                                 u5985 095A  
                               _TMR1 000FCE                                 _WPUB 000F61  
                      _EUSART1_Write 3CBE                                 _main 35D4  
                       ___ftpack@arg 001B                         ___ftpack@exp 001E  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                        __CFG_BORV$190 000000  
                               log@x 009D                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A8                        __CFG_IESO$OFF 000000  
                       ___ftmul@cntr 0079                         ___ftmul@sign 007A  
                      printf@vd_1055 020B                    ADC_ISR@ADC_Result 000B  
                       ___fttol@exp1 0090                                ??_log 0030  
                       ___fttol@lval 008C                     ?_Battery_Convert 0001  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 3F18  
                              ?_main 00AD                      __end_of___awdiv 37DC  
                    __end_of___ftadd 22F6                      __end_of___awmod 38FE  
                    __end_of___ftdiv 2F2E                      _TMR1_StartTimer 3F2E  
                    __end_of___ftneg 3E12                      __end_of___lldiv 3A10  
                    __end_of___ftmul 2B0C                      ___awdiv@divisor 0023  
                              _T1CON 000FCD                      __end_of___llmod 3AFE  
                    __end_of___ftsub 3C82                      __end_of___fttol 2996  
                              _LATA0 007C48                                _LATB0 007C50  
                              _LATB1 007C51                                _LATC0 007C58  
                              _LATA4 007C4C                                _LATC1 007C59  
                              _LATB3 007C53                                _LATA6 007C4E  
                              _LATD1 007C61                                _LATD2 007C62  
                              _LATC4 007C5C                                _LATD3 007C63  
                              _LATC5 007C5D                                _LATD5 007C65  
                     __CFG_DEBUG$OFF 000000                                i2l130 3D5C  
                              i2l280 0058                                i2l282 0064  
                              i2l286 006E                                i2l278 004C  
                    ___awdiv@counter 0025                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
   __size_of_ADC_GetConversionResult 0014                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                         ___lltoft@exp 002B  
               _EUSART1_Transmit_ISR 3D30                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR1_ISR 3BB0                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 002C  
                    __end_of_dpowers 0629                                _frexp 37DC  
                              _errno 00E2                                _scale 1966  
                    __end_of_isdigit 3E7A                   __CFG_MCLRE$EXTMCLR 000000  
                      ___ftpack@sign 001F                                _putch 3F24  
                              main@x 00B2                       SetBypass@state 001D  
                     ?_EUSART1_Write 0001              __end_of_TMR1_Initialize 3E5A  
                        _Battery_Adc 00B6                                tablat 000FF5  
                        _Battery_Get 3CF8                                status 000FD8  
                     __CFG_HFOFST$ON 000000                      RunBypas@cellbyp 0069  
                    RunBypas@batvolt 006B                       __CFG_PBADEN$ON 000000  
                    __initialization 3D90                          log@exponent 00A0  
         __end_of_EUSART1_Initialize 3CBE                         __end_of_main 3690  
                   __end_of_Set_4051 3DEC                            ??_ADC_ISR 0005  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 0030  
                      ___fttol@sign1 008B                        __activetblptr 000002  
         ADC_StartConversion@channel 0002                 __size_of__tdiv_to_l_ 0132  
              ?_EUSART1_Transmit_ISR 0001                     __end_of_RunBypas 342E  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               ?_frexp 001B  
                   __end_of___altoft 398E                     ___llmod@dividend 0028  
                             ?_scale 007B                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     ___awdiv@dividend 0021  
                   __end_of___awtoft 3C46                               _ANSELA 000F38  
                             ?_putch 0001                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                     __end_of___ftpack 3738  
                             _T1GCON 000FCC                               _RC1STA 000FAB  
                   __end_of___lltoft 3B5A                __size_of_Battery_Read 0018  
                             i2l4000 1810                               i2l4012 18FA  
                             i2l4004 185E                               i2l4008 18AC  
                             i2l4016 190C                               i2l2272 3D58  
                             i2l4018 1960                       __CFG_WDTEN$OFF 000000  
                             i2l3900 1354                               i2l3912 13C0  
                             i2l3930 1462                               i2l3906 138A  
                             i2l3924 142C                               i2l3852 3B94  
                             i2l3942 14CE                               i2l3918 13F6  
                             i2l3960 1570                               i2l3936 1498  
                             i2l3954 153A                               i2l3980 168A  
                             i2l3972 15EE                               i2l3948 1504  
                             i2l3964 1582                               i2l3892 3D8C  
                             i2l3884 3D68                               i2l3966 15D6  
                             i2l3992 1774                               i2l3984 16D8  
                             i2l3976 163C                               i2l3968 15DA  
                             i2l3996 17C2                               i2l3988 1726  
                             _RCREG1 000FAE                        ??_Temp_Filter 0030  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                         _Temp_Fault 3A10                       __CFG_XINST$OFF 000000  
                   __end_of__powers_ 0677                               ___ftge 342E  
            __end_of_TMR1_StartTimer 3F32                   __size_of_SetBypass 00F2  
                             ___wmul 3E12                            ??___awdiv 0025  
                          ??___ftadd 008B                       __CFG_STVREN$ON 000000  
                          ??___awmod 001F                            ??___ftdiv 002D  
                          ??___ftneg 001E                            ??___lldiv 0023  
                          ??___ftmul 0072                            ??___llmod 0030  
                          ??___ftsub 0030                            ??___fttol 0086  
                             _fround 1DDC                               clear_0 3D96  
                             clear_1 3DA2                               clear_2 3DAE  
                   ___awdiv@quotient 0027                   __size_of_Temp_Read 0018  
                    ___awmod@divisor 001D                      ___awmod@counter 001F  
                             _printf 06BC                ___ftmul@f3_as_product 0076  
                          ??_isdigit 001B                         _Battery_Read 3EDE  
                       _Battery_Volt 0132                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                      ??_EUSART1_Write 001B  
                    _eusart1RxBuffer 0100        __size_of_INTERRUPT_Initialize 000C  
                    _eusart1TxBuffer 0030                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 3E7A                     __end_oflog@coeff 0692  
                         __accesstop 0060              __end_of__initialization 3DB4  
                         ___altoft@c 0023                           ___ftadd@f1 0085  
                         ___ftadd@f2 0088                           ___ftge@ff1 0060  
                         ___ftge@ff2 0063                   ?_SYSTEM_Initialize 0001  
                       eval_poly@res 009A                           ___ftdiv@f1 0060  
                         ___ftdiv@f2 0063                           ___ftdiv@f3 0067  
                         ___ftneg@f1 001B                           ___awtoft@c 0029  
                         ___ftmul@f1 006C                           ___ftmul@f2 006F  
                         ___ftsub@f1 0091                           ___ftsub@f2 0094  
                __end_of_Temp_Filter 2692                           ___fttol@f1 0082  
       __size_of_ADC_StartConversion 001A                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 001B                            ?_TMR1_ISR 0001  
                         ___lltoft@c 0023                        __end_of_frexp 386E  
                      __end_of_scale 1DDC                        __end_of_putch 3F2E  
              Battery_Get@channelnum 0060               ??_EUSART1_Transmit_ISR 0001  
            _ADC_GetConversionResult 3EF6                           __div_to_l_ 2C7A  
                   ??_Battery_Filter 0030          __end_of_EUSART1_Receive_ISR 3D90  
                      ?_Temp_Convert 0001                      __div_to_l_@exp1 002A  
                    __div_to_l_@cntr 0029                              ??_frexp 0020  
                            ??_scale 0030            __end_of_SYSTEM_Initialize 3E94  
                  __end_of_SetBypass 3346                      __div_to_l_@quot 0025  
                            ??_putch 001C                        _eusart1RxHead 003F  
                      _eusart1TxHead 0041                        _eusart1RxTail 0040  
                         __pbssBANK0 00B6                           __pbssBANK1 0100  
                      _eusart1TxTail 0042                   __size_of_eval_poly 00F2  
                    __CFG_PLLCFG$OFF 000000                    __end_of_Temp_Read 3EDE  
                          ?_Set_4051 0001                           __pnvCOMRAM 0043  
              Temp_Convert@steinhart 00AA                          ?_Temp_Fault 0001  
                      __div_to_l_@f1 001B                        __div_to_l_@f2 001E  
                 __CFG_CCP2MX$PORTC1 000000                          Temp_Fault@i 006A  
                            ?___ftge 0060                            ?_RunBypas 0001  
                            ?___wmul 0029                     ?_TMR1_StartTimer 0001  
                         ??_TMR1_ISR 0003                   __CFG_CCP3MX$PORTB5 000000  
                          ?___altoft 0023                              _ADC_ISR 1336  
                            ?_fround 007B                            ?___awtoft 0029  
                          ?___ftpack 001B                              ?_printf 0097  
                          ?___lltoft 0023              __size_of_ADC_Initialize 0018  
                      Temp_Convert@x 00A8               __size_of_Battery_Fault 00D2  
                    Temp_Fault@fault 0069                       Battery_Fault@i 006A  
                            _OSCCON2 000FD2                       ??_Temp_Convert 00A2  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                         ?_Battery_Get 0060  
                         ??_Set_4051 0003                          _Temp_Filter 250A  
                        _Temp_Aquire 003C                      __CFG_PWRTEN$OFF 000000  
                  __end_of__npowers_ 0650                              __Hparam 0000  
                         _scale$1705 007E                              __Lparam 0000  
                         ??_RunBypas 002F                      __size_of___ftge 00D4  
                            ___awdiv 3738                              ___ftadd 2076  
                            ___awmod 386E                              ___ftdiv 2DE2  
                            ___ftneg 3DEC                              ___lldiv 398E  
                    __size_of___wmul 0026                              ___ftmul 2996  
                            ___llmod 3A92                              ___ftsub 3C46  
                            ___fttol 281A                         __psmallconst 0600  
                         ??___altoft 0027            ??_ADC_GetConversionResult 0003  
                            __pcinit 3D90                           ??___awtoft 002C  
                         ??___ftpack 0020                    __end_of_eval_poly 3254  
                    __size_of_fround 029A                              __ramtop 0600  
                         ??___lltoft 0027                              __ptext0 35D4  
                            __ptext1 06BC                              __ptext2 1966  
                            __ptext3 3F24                              __ptext4 3CBE  
                            __ptext5 3E5A                              __ptext6 1DDC  
                            __ptext7 386E                              __ptext8 2F2E  
                            __ptext9 2C7A                      __size_of_printf 0C7A  
                          _T1CONbits 000FCD                          ?__div_to_l_ 001B  
                            _dpowers 0601                _OSCILLATOR_Initialize 3F0A  
                       __size_of_log 016E                              _isdigit 3E5A  
                   ___awmod@dividend 001B                  __size_of_Temp_Fault 0082  
                 _EUSART1_Initialize 3C82             ??_PIN_MANAGER_Initialize 001B  
           __size_of_Battery_Convert 0102           __size_of_SYSTEM_Initialize 001A  
               end_of_initialization 3DB4                  ?_EUSART1_Initialize 0001  
                      __Lmediumconst 0000                        _Battery_Fault 3502  
                    ___lldiv@divisor 001F                      ___lldiv@counter 0027  
                            printf@c 0224                              printf@f 0097  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                     Battery_Convert@x 0095  
                     __tdiv_to_l_@f1 001B                       __tdiv_to_l_@f2 001E  
               ??_EUSART1_Initialize 001B                        ??__tdiv_to_l_ 0021  
                _ADC_StartConversion 3E94                  EUSART1_Write@txData 001B  
                        _Volt_Aquire 003D                       ?_Battery_Fault 0001  
                        printf@integ 0211                          ___ftdiv@exp 006A  
                        printf@width 021D                         SetBypass@pin 001B  
                __size_of__div_to_l_ 0168                          ___ftmul@exp 0075  
               ?_ADC_StartConversion 0001                 __end_of_Temp_Convert 250A  
       __end_of_INTERRUPT_Initialize 3F24                       __end_of___ftge 3502  
                     __end_of___wmul 3E38                    __size_of_TMR1_ISR 0056  
                     _ADC_Initialize 3EAE               ?_OSCILLATOR_Initialize 0001  
                     __end_of_fround 2076                       __end_of_printf 1336  
                start_initialization 3D90                           eval_poly@d 0094  
                         eval_poly@n 0096                           eval_poly@x 0091  
    __size_of_PIN_MANAGER_Initialize 004E                  __end_of__tdiv_to_l_ 3060  
                        __end_of_log 2C7A                          putch@txData 001C  
              __end_of_EUSART1_Write 3CF8                           frexp@value 001B  
                  ??_Battery_Convert 0093                            _SetBypass 3254  
                    ___llmod@divisor 002C                 __size_of_Battery_Get 0038  
                    ___llmod@counter 0060                         ??_Temp_Fault 002F  
                  __size_of_Set_4051 002E                            _Temp_DegF 018C  
                   _PrevBattery_Volt 0150                            _Temp_Done 00DE  
                          _Temp_Read 3EC6                ??_ADC_StartConversion 0001  
           __size_of_TMR1_Initialize 0022                             ??___ftge 0066  
                           ??___wmul 002D               __end_of_ADC_Initialize 3EC6  
                          RunBypas@i 006E                             ?_ADC_ISR 0001  
                           ??_fround 0030                    __size_of_RunBypas 00E8  
                           ??_printf 009E                       _eusart1RxCount 003E  
                  __size_of___altoft 0090                           fround@prec 0084  
                  __size_of___awtoft 0048                    __size_of___ftpack 00A8  
                          _Volt_Done 00E0                    __size_of___lltoft 005C  
                        __pbssCOMRAM 0030        __size_of_EUSART1_Transmit_ISR 0030  
                      __pcstackBANK0 0060                        __pcstackBANK2 0200  
                 __end_of_Temp_Fault 3A92                  __end_of__stringdata 06BA  
                       _isdigit$1336 001C                        _PrevTemp_DegF 016E  
                    ??_Battery_Fault 002F         __size_of_EUSART1_Receive_ISR 0030  
                       ?_Temp_Filter 0001                           ?_SetBypass 001B  
                         ?_Temp_Read 0001               _PIN_MANAGER_Initialize 3BB0  
                          __pintcode 0008                    _Temp_Convert$1701 00A4  
                  _Temp_Convert$1702 00A6                             ?___awdiv 0021  
                           ?___ftadd 0085                             ?___awmod 001B  
                           ?___ftdiv 0060                             ?___ftneg 001B  
                           ?___lldiv 001B                             ?___ftmul 006C  
                           ?___llmod 0028                             ?___ftsub 0091  
                          __npowers_ 0629                             ?___fttol 0082  
                       Temp_Filter@x 0091                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 000D                          __tdiv_to_l_ 2F2E  
                       ??__div_to_l_ 0021                             _BAUD1CON 000FB8  
                        __smallconst 0600             __size_of_TMR1_StartTimer 0004  
                           ?_isdigit 0001                            _eval_poly 3162  
                     __size_of_frexp 0092                       __size_of_scale 0476  
                     __size_of_putch 000A                 _INTERRUPT_Initialize 3F18  
            __size_of_Battery_Filter 0188                       ___wmul@product 002D  
              __size_of_Temp_Convert 0214                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 00A0  
                           _PIR1bits 000F9E                   __end_of__div_to_l_ 2DE2  
                    Battery_Filter@x 0091                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 3B5A  
                  ??_TMR1_Initialize 001B                     __size_of_ADC_ISR 0630  
                         _ADCON0bits 000FC2                          __stringdata 0692  
                  ___wmul@multiplier 0029                            main@x_971 00B4  
                         printf@_val 0214                           printf@flag 021B  
                         printf@fval 021F                           printf@prec 0222  
                      ?_Battery_Read 0001                           ?_eval_poly 0091  
                       _Temp_Convert 22F6                          _INTCON2bits 000FF1  
              ?_INTERRUPT_Initialize 0001                             _Set_4051 3DBE  
                        ??_SetBypass 001F                            frexp@eptr 001E  
                           __Hrparam 0000                          ??_Temp_Read 0003  
                           _Temp_Adc 00E4                             __Lrparam 0000  
           ?_ADC_GetConversionResult 0001                   __CFG_BOREN$SBORDIS 000000  
                           _RunBypas 3346                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 001B                     __size_of___awdiv 00A4  
                   __size_of___ftadd 0280                     __size_of___awmod 0090  
                   __size_of___ftdiv 014C                     __size_of___ftneg 0026  
                   __size_of___lldiv 0082                             ___altoft 38FE  
                   __size_of___ftmul 0176                     __size_of___llmod 006C  
                   __size_of___ftsub 003C                     __size_of___fttol 017C  
        __size_of_EUSART1_Initialize 003C                             ___awtoft 3BFE  
                           ___ftpack 3690                          _fround$1703 0081  
                        _fround$1704 007E                             ___lltoft 3AFE  
                     ??_Battery_Read 0003                      _Battery_Convert 3060  
                 Battery_Fault@fault 0069                     __size_of_isdigit 0020  
                           __ptext10 3AFE                             __ptext11 3A92  
                           __ptext20 3BFE                             __ptext12 398E  
                           __ptext21 3C46                             __ptext13 281A  
                         _T1GCONbits 000FCC                             __ptext30 3C82  
                           __ptext22 3738                             __ptext14 3DEC  
                           __ptext31 3EAE                             __ptext23 250A  
                           __ptext15 3A10                             __ptext40 2692  
                           __ptext32 3346                             __ptext24 3E7A  
                           __ptext16 22F6                             __ptext41 3E12  
                           __ptext33 3254                             __ptext25 3E38  
                           __ptext17 2B0C                             __ptext50 3D60  
                           __ptext42 2996                             __ptext34 3CF8  
                           __ptext26 3F2E                             __ptext18 37DC  
                           __ptext51 1336                             __ptext43 2076  
                           __ptext35 3502                             __ptext27 3BB0  
                           __ptext19 3162                             __ptext52 3DBE  
                           __ptext44 3690                             __ptext36 342E  
                           __ptext28 3F0A                             __ptext53 3E94  
                           __ptext37 3060                             __ptext29 3F18  
                           __ptext54 3EF6                             __ptext46 3B5A  
                           __ptext38 2DE2                             __ptext47 3EC6  
                           __ptext39 38FE                             __ptext48 3EDE  
                           __ptext49 3D30                             __powers_ 0650  
                  ??_TMR1_StartTimer 001B                        __size_of_main 00BC  
                       _TmpTemp_DegF 01C8                 __size_of_Temp_Filter 0188  
                         _RC1STAbits 000FAB   __end_of_INTERRUPT_InterruptManager 00A8  
         _INTERRUPT_InterruptManager 0008                             main@argc 00AD  
                          printf@exp 0219                             main@argv 00AF  
                _EUSART1_Receive_ISR 3D60                             log@coeff 0677  
                         _INTCONbits 000FF2                          ??_eval_poly 0098  
                           isdigit@c 001D               ??_INTERRUPT_Initialize 001B  
                           scale@scl 0081                        ??_Battery_Get 002F  
                           intlevel2 0000                     __tdiv_to_l_@exp1 0029  
                   __tdiv_to_l_@cntr 0028                       _Battery_Filter 2692  
                      _CountCallBack 003A                     __tdiv_to_l_@quot 0024  
               ?_EUSART1_Receive_ISR 0001          __end_of_ADC_StartConversion 3EAE  
                   _TempBattery_Volt 01AA                     ___lldiv@dividend 001B  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 3F0A  
       __end_of_EUSART1_Transmit_ISR 3D60                     ??_ADC_Initialize 001B  
                           printf@ap 020F                             printf@vd 0207  
            __end_of_Battery_Convert 3162               __size_of_EUSART1_Write 003A  
                       ?__tdiv_to_l_ 001B                          _printf$1053 0203  
                        _printf$1706 0200                     ___lldiv@quotient 0023  
                  __CFG_T3CMX$PORTC0 000000               __end_of_Battery_Filter 281A  
              ??_EUSART1_Receive_ISR 0001       __end_of_PIN_MANAGER_Initialize 3BFE  
              __end_of_Battery_Fault 35D4                    __CFG_FOSC$INTIO67 000000  
               __end_of_Battery_Read 3EF6                      _TMR1_Initialize 3E38  
                   _ADC_Buffer_Point 0038                  __end_of_Battery_Get 3D30  
                    Set_4051@Channel 0001  
