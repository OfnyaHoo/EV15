

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Jun 19 05:12:59 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    96                           	psect	text72,global,reloc=2,class=CODE,delta=1
    97                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    98  0000                     
    99                           	psect	idataCOMRAM
   100  003ABA                     __pidataCOMRAM:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _Transmit_stall
   104  003ABA  01                 	db	1
   105                           
   106                           	psect	idataBANK0
   107  003A9E                     __pidataBANK0:
   108                           	opt stack 0
   109                           
   110                           ;initializer for _Temp_DegF
   111  003A9E  00                 	db	0
   112  003A9F  8C                 	db	140
   113  003AA0  42                 	db	66
   114  003AA1  00                 	db	0
   115  003AA2  8C                 	db	140
   116  003AA3  42                 	db	66
   117  003AA4  00                 	db	0
   118  003AA5  8C                 	db	140
   119  003AA6  42                 	db	66
   120  003AA7  00                 	db	0
   121  003AA8  8C                 	db	140
   122  003AA9  42                 	db	66
   123                           
   124                           	psect	idataBANK1
   125  003950                     __pidataBANK1:
   126                           	opt stack 0
   127                           
   128                           ;initializer for _Battery_Volt
   129  003950  00                 	db	0
   130  003951  40                 	db	64
   131  003952  40                 	db	64
   132  003953  00                 	db	0
   133  003954  40                 	db	64
   134  003955  40                 	db	64
   135  003956  00                 	db	0
   136  003957  40                 	db	64
   137  003958  40                 	db	64
   138  003959  00                 	db	0
   139  00395A  40                 	db	64
   140  00395B  40                 	db	64
   141  00395C  00                 	db	0
   142  00395D  40                 	db	64
   143  00395E  40                 	db	64
   144  00395F  00                 	db	0
   145  003960  40                 	db	64
   146  003961  40                 	db	64
   147  003962  00                 	db	0
   148  003963  40                 	db	64
   149  003964  40                 	db	64
   150  003965  00                 	db	0
   151  003966  40                 	db	64
   152  003967  40                 	db	64
   153  003968  00                 	db	0
   154  003969  40                 	db	64
   155  00396A  40                 	db	64
   156  00396B  00                 	db	0
   157  00396C  40                 	db	64
   158  00396D  40                 	db	64
   159                           
   160                           	psect	smallconst
   161  000600                     __psmallconst:
   162                           	opt stack 0
   163  000600  00                 	db	0
   164  000601                     log@coeff:
   165                           	opt stack 0
   166  000601  00                 	db	0
   167  000602  00                 	db	0
   168  000603  00                 	db	0
   169  000604  00                 	db	0
   170  000605  80                 	db	128
   171  000606  3F                 	db	63
   172  000607  F0                 	db	240
   173  000608  FF                 	db	255
   174  000609  BE                 	db	190
   175  00060A  E2                 	db	226
   176  00060B  A9                 	db	169
   177  00060C  3E                 	db	62
   178  00060D  83                 	db	131
   179  00060E  76                 	db	118
   180  00060F  BE                 	db	190
   181  000610  AE                 	db	174
   182  000611  2B                 	db	43
   183  000612  3E                 	db	62
   184  000613  3C                 	db	60
   185  000614  C3                 	db	195
   186  000615  BD                 	db	189
   187  000616  D2                 	db	210
   188  000617  13                 	db	19
   189  000618  3D                 	db	61
   190  000619  78                 	db	120
   191  00061A  D3                 	db	211
   192  00061B  BB                 	db	187
   193  00061C                     __end_oflog@coeff:
   194                           	opt stack 0
   195  0000                     _ANSELA	set	3896
   196  0000                     _ANSELB	set	3897
   197  0000                     _ANSELC	set	3898
   198  0000                     _ANSELD	set	3899
   199  0000                     _ANSELE	set	3900
   200  0000                     _TMR1	set	4046
   201  0000                     _ADCON0	set	4034
   202  0000                     _ADCON0bits	set	4034
   203  0000                     _ADCON1	set	4033
   204  0000                     _ADCON2	set	4032
   205  0000                     _ADRESH	set	4036
   206  0000                     _ADRESL	set	4035
   207  0000                     _BAUD1CON	set	4024
   208  0000                     _INTCON2bits	set	4081
   209  0000                     _INTCONbits	set	4082
   210  0000                     _IPR1bits	set	3999
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATD	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _LATEbits	set	3981
   218  0000                     _OSCCON	set	4051
   219  0000                     _OSCCON2	set	4050
   220  0000                     _OSCTUNE	set	3995
   221  0000                     _PIE1bits	set	3997
   222  0000                     _PIR1bits	set	3998
   223  0000                     _RC1STA	set	4011
   224  0000                     _RC1STAbits	set	4011
   225  0000                     _RCONbits	set	4048
   226  0000                     _RCREG1	set	4014
   227  0000                     _SPBRG1	set	4015
   228  0000                     _SPBRGH1	set	4016
   229  0000                     _T1CON	set	4045
   230  0000                     _T1CONbits	set	4045
   231  0000                     _T1GCON	set	4044
   232  0000                     _T1GCONbits	set	4044
   233  0000                     _TMR1H	set	4047
   234  0000                     _TMR1L	set	4046
   235  0000                     _TRISA	set	3986
   236  0000                     _TRISB	set	3987
   237  0000                     _TRISC	set	3988
   238  0000                     _TRISCbits	set	3988
   239  0000                     _TRISD	set	3989
   240  0000                     _TRISE	set	3990
   241  0000                     _TX1STA	set	4012
   242  0000                     _TXREG1	set	4013
   243  0000                     _WPUB	set	3937
   244  0000                     _LATA0	set	31816
   245  0000                     _LATA4	set	31820
   246  0000                     _LATA6	set	31822
   247  0000                     _LATB0	set	31824
   248  0000                     _LATB1	set	31825
   249  0000                     _LATB3	set	31827
   250  0000                     _LATC0	set	31832
   251  0000                     _LATC1	set	31833
   252  0000                     _LATC4	set	31836
   253  0000                     _LATC5	set	31837
   254  0000                     _LATD1	set	31841
   255  0000                     _LATD2	set	31842
   256  0000                     _LATD3	set	31843
   257  0000                     _LATD5	set	31845
   258                           
   259                           ; #config settings
   260  00061C  00                 	db	0	; dummy byte at the end
   261  0000                     
   262                           	psect	cinit
   263  002E60                     __pcinit:
   264                           	opt stack 0
   265  002E60                     start_initialization:
   266                           	opt stack 0
   267  002E60                     __initialization:
   268                           	opt stack 0
   269                           
   270                           ; Clear objects allocated to BANK5 (206 bytes)
   271  002E60  EE05  F000         	lfsr	0,__pbssBANK5
   272  002E64  0ECE               	movlw	206
   273  002E66                     clear_0:
   274  002E66  6AEE               	clrf	postinc0,c
   275  002E68  06E8               	decf	wreg,f,c
   276  002E6A  E1FD               	bnz	clear_0
   277                           
   278                           ; Clear objects allocated to BANK4 (206 bytes)
   279  002E6C  EE04  F000         	lfsr	0,__pbssBANK4
   280  002E70  0ECE               	movlw	206
   281  002E72                     clear_1:
   282  002E72  6AEE               	clrf	postinc0,c
   283  002E74  06E8               	decf	wreg,f,c
   284  002E76  E1FD               	bnz	clear_1
   285                           
   286                           ; Clear objects allocated to BANK3 (200 bytes)
   287  002E78  EE03  F000         	lfsr	0,__pbssBANK3
   288  002E7C  0EC8               	movlw	200
   289  002E7E                     clear_2:
   290  002E7E  6AEE               	clrf	postinc0,c
   291  002E80  06E8               	decf	wreg,f,c
   292  002E82  E1FD               	bnz	clear_2
   293                           
   294                           ; Clear objects allocated to BANK2 (206 bytes)
   295  002E84  EE02  F000         	lfsr	0,__pbssBANK2
   296  002E88  0ECE               	movlw	206
   297  002E8A                     clear_3:
   298  002E8A  6AEE               	clrf	postinc0,c
   299  002E8C  06E8               	decf	wreg,f,c
   300  002E8E  E1FD               	bnz	clear_3
   301                           
   302                           ; Clear objects allocated to BANK1 (112 bytes)
   303  002E90  EE01  F000         	lfsr	0,__pbssBANK1
   304  002E94  0E70               	movlw	112
   305  002E96                     clear_4:
   306  002E96  6AEE               	clrf	postinc0,c
   307  002E98  06E8               	decf	wreg,f,c
   308  002E9A  E1FD               	bnz	clear_4
   309                           
   310                           ; Clear objects allocated to BANK0 (97 bytes)
   311  002E9C  EE00  F060         	lfsr	0,__pbssBANK0
   312  002EA0  0E61               	movlw	97
   313  002EA2                     clear_5:
   314  002EA2  6AEE               	clrf	postinc0,c
   315  002EA4  06E8               	decf	wreg,f,c
   316  002EA6  E1FD               	bnz	clear_5
   317                           
   318                           ; Clear objects allocated to COMRAM (24 bytes)
   319  002EA8  EE00  F02D         	lfsr	0,__pbssCOMRAM
   320  002EAC  0E18               	movlw	24
   321  002EAE                     clear_6:
   322  002EAE  6AEE               	clrf	postinc0,c
   323  002EB0  06E8               	decf	wreg,f,c
   324  002EB2  E1FD               	bnz	clear_6
   325                           
   326                           ; Initialize objects allocated to BANK1 (30 bytes)
   327                           ; load TBLPTR registers with __pidataBANK1
   328  002EB4  0E50               	movlw	low __pidataBANK1
   329  002EB6  6EF6               	movwf	tblptrl,c
   330  002EB8  0E39               	movlw	high __pidataBANK1
   331  002EBA  6EF7               	movwf	tblptrh,c
   332  002EBC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   333  002EBE  6EF8               	movwf	tblptru,c
   334  002EC0  EE01  F070         	lfsr	0,__pdataBANK1
   335  002EC4  EE10 F01E          	lfsr	1,30
   336  002EC8                     copy_data0:
   337  002EC8  0009               	tblrd		*+
   338  002ECA  CFF5 FFEE          	movff	tablat,postinc0
   339  002ECE  50E5               	movf	postdec1,w,c
   340  002ED0  50E1               	movf	fsr1l,w,c
   341  002ED2  E1FA               	bnz	copy_data0
   342                           
   343                           ; Initialize objects allocated to BANK0 (12 bytes)
   344                           ; load TBLPTR registers with __pidataBANK0
   345  002ED4  0E9E               	movlw	low __pidataBANK0
   346  002ED6  6EF6               	movwf	tblptrl,c
   347  002ED8  0E3A               	movlw	high __pidataBANK0
   348  002EDA  6EF7               	movwf	tblptrh,c
   349  002EDC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   350  002EDE  6EF8               	movwf	tblptru,c
   351  002EE0  EE00  F0F4         	lfsr	0,__pdataBANK0
   352  002EE4  EE10 F00C          	lfsr	1,12
   353  002EE8                     copy_data1:
   354  002EE8  0009               	tblrd		*+
   355  002EEA  CFF5 FFEE          	movff	tablat,postinc0
   356  002EEE  50E5               	movf	postdec1,w,c
   357  002EF0  50E1               	movf	fsr1l,w,c
   358  002EF2  E1FA               	bnz	copy_data1
   359                           
   360                           ; Initialize objects allocated to COMRAM (1 bytes)
   361                           ; load TBLPTR registers with __pidataCOMRAM
   362  002EF4  0EBA               	movlw	low __pidataCOMRAM
   363  002EF6  6EF6               	movwf	tblptrl,c
   364  002EF8  0E3A               	movlw	high __pidataCOMRAM
   365  002EFA  6EF7               	movwf	tblptrh,c
   366  002EFC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   367  002EFE  6EF8               	movwf	tblptru,c
   368  002F00  0009               	tblrd		*+	;fetch initializer
   369  002F02  CFF5 F045          	movff	tablat,__pdataCOMRAM
   370  002F06                     end_of_initialization:
   371                           	opt stack 0
   372  002F06                     __end_of__initialization:
   373                           	opt stack 0
   374  002F06  0E00               	movlw	low (__Lmediumconst shr (0+16))
   375  002F08  6EF8               	movwf	tblptru,c
   376  002F0A  0100               	movlb	0
   377  002F0C  EF26  F01B         	goto	_main	;jump to C main() function
   378                           tblptru	equ	0xFF8
   379                           tblptrh	equ	0xFF7
   380                           tblptrl	equ	0xFF6
   381                           tablat	equ	0xFF5
   382                           postinc0	equ	0xFEE
   383                           wreg	equ	0xFE8
   384                           postdec1	equ	0xFE5
   385                           fsr1l	equ	0xFE1
   386                           
   387                           	psect	bssCOMRAM
   388  00002D                     __pbssCOMRAM:
   389                           	opt stack 0
   390  00002D                     _ADC_Buffer_Point:
   391                           	opt stack 0
   392  00002D                     	ds	2
   393  00002F                     _CountCallBack:
   394                           	opt stack 0
   395  00002F                     	ds	2
   396  000031                     _serial_available:
   397                           	opt stack 0
   398  000031                     	ds	2
   399  000033                     _serial_read:
   400                           	opt stack 0
   401  000033                     	ds	2
   402  000035                     _serial_write:
   403                           	opt stack 0
   404  000035                     	ds	2
   405  000037                     _timer1ReloadVal:
   406                           	opt stack 0
   407  000037                     	ds	2
   408  000039                     _AKNAKsend:
   409                           	opt stack 0
   410  000039                     	ds	1
   411  00003A                     _Temp_Aquire:
   412                           	opt stack 0
   413  00003A                     	ds	1
   414  00003B                     _Volt_Aquire:
   415                           	opt stack 0
   416  00003B                     	ds	1
   417  00003C                     _calc_CS:
   418                           	opt stack 0
   419  00003C                     	ds	1
   420  00003D                     _maxDataAddress:
   421                           	opt stack 0
   422  00003D                     	ds	1
   423  00003E                     _moduleAddress:
   424                           	opt stack 0
   425  00003E                     	ds	1
   426  00003F                     _returnAddress:
   427                           	opt stack 0
   428  00003F                     	ds	1
   429  000040                     _rx_address:
   430                           	opt stack 0
   431  000040                     	ds	1
   432  000041                     _rx_array_inx:
   433                           	opt stack 0
   434  000041                     	ds	1
   435  000042                     _rx_len:
   436                           	opt stack 0
   437  000042                     	ds	1
   438  000043                     _group:
   439                           	opt stack 0
   440  000043                     	ds	2
   441                           tblptru	equ	0xFF8
   442                           tblptrh	equ	0xFF7
   443                           tblptrl	equ	0xFF6
   444                           tablat	equ	0xFF5
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           postdec1	equ	0xFE5
   448                           fsr1l	equ	0xFE1
   449                           
   450                           	psect	dataCOMRAM
   451  000045                     __pdataCOMRAM:
   452                           	opt stack 0
   453  000045                     _Transmit_stall:
   454                           	opt stack 0
   455  000045                     	ds	1
   456                           tblptru	equ	0xFF8
   457                           tblptrh	equ	0xFF7
   458                           tblptrl	equ	0xFF6
   459                           tablat	equ	0xFF5
   460                           postinc0	equ	0xFEE
   461                           wreg	equ	0xFE8
   462                           postdec1	equ	0xFE5
   463                           fsr1l	equ	0xFE1
   464                           
   465                           	psect	bssBANK0
   466  000060                     __pbssBANK0:
   467                           	opt stack 0
   468  000060                     _Battery_Adc:
   469                           	opt stack 0
   470  000060                     	ds	40
   471  000088                     _Temp_Done:
   472                           	opt stack 0
   473  000088                     	ds	2
   474  00008A                     _Volt_Done:
   475                           	opt stack 0
   476  00008A                     	ds	2
   477  00008C                     _addressErrorCounter:
   478                           	opt stack 0
   479  00008C                     	ds	2
   480  00008E                     _alignErrorCounter:
   481                           	opt stack 0
   482  00008E                     	ds	2
   483  000090                     _crcErrorCounter:
   484                           	opt stack 0
   485  000090                     	ds	2
   486  000092                     _dataAdressErrorCounter:
   487                           	opt stack 0
   488  000092                     	ds	2
   489  000094                     _errno:
   490                           	opt stack 0
   491  000094                     	ds	2
   492  000096                     _receiveArrayAddress:
   493                           	opt stack 0
   494  000096                     	ds	2
   495  000098                     _sendStructAddress:
   496                           	opt stack 0
   497  000098                     	ds	2
   498  00009A                     _serial_peek:
   499                           	opt stack 0
   500  00009A                     	ds	2
   501  00009C                     _crc_buffer:
   502                           	opt stack 0
   503  00009C                     	ds	17
   504  0000AD                     _TmpTemp_DegF:
   505                           	opt stack 0
   506  0000AD                     	ds	12
   507  0000B9                     _Temp_Adc:
   508                           	opt stack 0
   509  0000B9                     	ds	8
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec1	equ	0xFE5
   517                           fsr1l	equ	0xFE1
   518                           
   519                           	psect	dataBANK0
   520  0000F4                     __pdataBANK0:
   521                           	opt stack 0
   522  0000F4                     _Temp_DegF:
   523                           	opt stack 0
   524  0000F4                     	ds	12
   525                           tblptru	equ	0xFF8
   526                           tblptrh	equ	0xFF7
   527                           tblptrl	equ	0xFF6
   528                           tablat	equ	0xFF5
   529                           postinc0	equ	0xFEE
   530                           wreg	equ	0xFE8
   531                           postdec1	equ	0xFE5
   532                           fsr1l	equ	0xFE1
   533                           
   534                           	psect	bssBANK1
   535  000100                     __pbssBANK1:
   536                           	opt stack 0
   537  000100                     _PrevBattery_Volt:
   538                           	opt stack 0
   539  000100                     	ds	30
   540  00011E                     _TempBattery_Volt:
   541                           	opt stack 0
   542  00011E                     	ds	30
   543  00013C                     _PrevTemp_DegF:
   544                           	opt stack 0
   545  00013C                     	ds	12
   546  000148                     _receiveArray:
   547                           	opt stack 0
   548  000148                     	ds	40
   549                           tblptru	equ	0xFF8
   550                           tblptrh	equ	0xFF7
   551                           tblptrl	equ	0xFF6
   552                           tablat	equ	0xFF5
   553                           postinc0	equ	0xFEE
   554                           wreg	equ	0xFE8
   555                           postdec1	equ	0xFE5
   556                           fsr1l	equ	0xFE1
   557                           
   558                           	psect	dataBANK1
   559  000170                     __pdataBANK1:
   560                           	opt stack 0
   561  000170                     _Battery_Volt:
   562                           	opt stack 0
   563  000170                     	ds	30
   564                           tblptru	equ	0xFF8
   565                           tblptrh	equ	0xFF7
   566                           tblptrl	equ	0xFF6
   567                           tablat	equ	0xFF5
   568                           postinc0	equ	0xFEE
   569                           wreg	equ	0xFE8
   570                           postdec1	equ	0xFE5
   571                           fsr1l	equ	0xFE1
   572                           
   573                           	psect	bssBANK2
   574  000200                     __pbssBANK2:
   575                           	opt stack 0
   576  000200                     _ring_buffer:
   577                           	opt stack 0
   578  000200                     	ds	206
   579                           tblptru	equ	0xFF8
   580                           tblptrh	equ	0xFF7
   581                           tblptrl	equ	0xFF6
   582                           tablat	equ	0xFF5
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           postdec1	equ	0xFE5
   586                           fsr1l	equ	0xFE1
   587                           
   588                           	psect	bssBANK3
   589  000300                     __pbssBANK3:
   590                           	opt stack 0
   591  000300                     _rx_buffer:
   592                           	opt stack 0
   593  000300                     	ds	200
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1l	equ	0xFE1
   602                           
   603                           	psect	bssBANK4
   604  000400                     __pbssBANK4:
   605                           	opt stack 0
   606  000400                     _input_buffer:
   607                           	opt stack 0
   608  000400                     	ds	206
   609                           tblptru	equ	0xFF8
   610                           tblptrh	equ	0xFF7
   611                           tblptrl	equ	0xFF6
   612                           tablat	equ	0xFF5
   613                           postinc0	equ	0xFEE
   614                           wreg	equ	0xFE8
   615                           postdec1	equ	0xFE5
   616                           fsr1l	equ	0xFE1
   617                           
   618                           	psect	bssBANK5
   619  000500                     __pbssBANK5:
   620                           	opt stack 0
   621  000500                     _output_buffer:
   622                           	opt stack 0
   623  000500                     	ds	206
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec1	equ	0xFE5
   631                           fsr1l	equ	0xFE1
   632                           
   633                           	psect	cstackBANK1
   634  00018E                     __pcstackBANK1:
   635                           	opt stack 0
   636  00018E                     eval_poly@res:
   637                           	opt stack 0
   638                           
   639                           ; 3 bytes @ 0x0
   640  00018E                     	ds	3
   641  000191                     ?_log:
   642                           	opt stack 0
   643  000191                     log@x:
   644                           	opt stack 0
   645                           
   646                           ; 3 bytes @ 0x3
   647  000191                     	ds	3
   648  000194                     log@exponent:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x6
   652  000194                     	ds	2
   653  000196                     _Temp_Convert$2202:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x8
   657  000196                     	ds	2
   658  000198                     _Temp_Convert$2203:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0xA
   662  000198                     	ds	2
   663  00019A                     Temp_Convert@x:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0xC
   667  00019A                     	ds	2
   668  00019C                     Temp_Convert@steinhart:
   669                           	opt stack 0
   670                           
   671                           ; 3 bytes @ 0xE
   672  00019C                     	ds	3
   673  00019F                     
   674                           ; 2 bytes @ 0x11
   675  00019F                     	ds	2
   676  0001A1                     
   677                           ; 3 bytes @ 0x13
   678  0001A1                     	ds	3
   679                           tblptru	equ	0xFF8
   680                           tblptrh	equ	0xFF7
   681                           tblptrl	equ	0xFF6
   682                           tablat	equ	0xFF5
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           postdec1	equ	0xFE5
   686                           fsr1l	equ	0xFE1
   687                           
   688                           	psect	cstackBANK0
   689  0000C1                     __pcstackBANK0:
   690                           	opt stack 0
   691  0000C1                     ?___ftdiv:
   692                           	opt stack 0
   693  0000C1                     CRCcheck@SentCRC:
   694                           	opt stack 0
   695  0000C1                     RunBypas@cellbyp:
   696                           	opt stack 0
   697  0000C1                     begin@ptr:
   698                           	opt stack 0
   699  0000C1                     ___ftdiv@f1:
   700                           	opt stack 0
   701                           
   702                           ; 3 bytes @ 0x0
   703  0000C1                     	ds	1
   704  0000C2                     CRCcheck@calculatedCRC:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x1
   708  0000C2                     	ds	1
   709  0000C3                     begin@maxSize:
   710                           	opt stack 0
   711  0000C3                     RunBypas@batvolt:
   712                           	opt stack 0
   713  0000C3                     CRCcheck@arrayHolder:
   714                           	opt stack 0
   715                           
   716                           ; 3 bytes @ 0x2
   717  0000C3                     	ds	1
   718  0000C4                     begin@givenAddress:
   719                           	opt stack 0
   720  0000C4                     ___ftdiv@f2:
   721                           	opt stack 0
   722                           
   723                           ; 3 bytes @ 0x3
   724  0000C4                     	ds	1
   725  0000C5                     begin@error:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x4
   729  0000C5                     	ds	1
   730  0000C6                     RunBypas@i:
   731                           	opt stack 0
   732  0000C6                     begin@stufftosend:
   733                           	opt stack 0
   734  0000C6                     CRCcheck@rt:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x5
   738  0000C6                     	ds	1
   739  0000C7                     ??___ftdiv:
   740                           
   741                           ; 0 bytes @ 0x6
   742  0000C7                     	ds	1
   743  0000C8                     begin@stufftoreceive:
   744                           	opt stack 0
   745  0000C8                     receiveData@holder:
   746                           	opt stack 0
   747                           
   748                           ; 3 bytes @ 0x7
   749  0000C8                     	ds	2
   750  0000CA                     ___ftdiv@cntr:
   751                           	opt stack 0
   752  0000CA                     begin@stuffavailable:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x9
   756  0000CA                     	ds	1
   757  0000CB                     receiveData@holder_1131:
   758                           	opt stack 0
   759  0000CB                     ___ftdiv@f3:
   760                           	opt stack 0
   761                           
   762                           ; 3 bytes @ 0xA
   763  0000CB                     	ds	1
   764  0000CC                     begin@stuffpeek:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0xB
   768  0000CC                     	ds	2
   769  0000CE                     receiveData@crcHolder:
   770                           	opt stack 0
   771  0000CE                     ___ftdiv@exp:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0xD
   775  0000CE                     	ds	1
   776  0000CF                     receiveData@crcHolder_1132:
   777                           	opt stack 0
   778  0000CF                     ___ftdiv@sign:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0xE
   782  0000CF                     	ds	1
   783  0000D0                     ?___ftmul:
   784                           	opt stack 0
   785  0000D0                     receiveData@u:
   786                           	opt stack 0
   787  0000D0                     ___ftmul@f1:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0xF
   791  0000D0                     	ds	2
   792  0000D2                     receiveData@r:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x11
   796  0000D2                     	ds	1
   797  0000D3                     ___ftmul@f2:
   798                           	opt stack 0
   799                           
   800                           ; 3 bytes @ 0x12
   801  0000D3                     	ds	3
   802  0000D6                     ??___ftmul:
   803                           
   804                           ; 0 bytes @ 0x15
   805  0000D6                     	ds	3
   806  0000D9                     ___ftmul@exp:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x18
   810  0000D9                     	ds	1
   811  0000DA                     ___ftmul@f3_as_product:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0x19
   815  0000DA                     	ds	3
   816  0000DD                     ___ftmul@cntr:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x1C
   820  0000DD                     	ds	1
   821  0000DE                     ___ftmul@sign:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x1D
   825  0000DE                     	ds	1
   826  0000DF                     ?___ftadd:
   827                           	opt stack 0
   828  0000DF                     ?___fttol:
   829                           	opt stack 0
   830  0000DF                     ___ftadd@f1:
   831                           	opt stack 0
   832  0000DF                     ___fttol@f1:
   833                           	opt stack 0
   834                           
   835                           ; 3 bytes @ 0x1E
   836  0000DF                     	ds	3
   837  0000E2                     ___ftadd@f2:
   838                           	opt stack 0
   839                           
   840                           ; 3 bytes @ 0x21
   841  0000E2                     	ds	1
   842  0000E3                     ??___fttol:
   843                           
   844                           ; 0 bytes @ 0x22
   845  0000E3                     	ds	2
   846  0000E5                     ??___ftadd:
   847                           
   848                           ; 0 bytes @ 0x24
   849  0000E5                     	ds	3
   850  0000E8                     ___ftadd@sign:
   851                           	opt stack 0
   852  0000E8                     ___fttol@sign1:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x27
   856  0000E8                     	ds	1
   857  0000E9                     ___ftadd@exp2:
   858                           	opt stack 0
   859  0000E9                     ___fttol@lval:
   860                           	opt stack 0
   861                           
   862                           ; 4 bytes @ 0x28
   863  0000E9                     	ds	1
   864  0000EA                     ___ftadd@exp1:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x29
   868  0000EA                     	ds	1
   869  0000EB                     ??_Battery_Convert:
   870  0000EB                     ?___ftsub:
   871                           	opt stack 0
   872  0000EB                     ?_eval_poly:
   873                           	opt stack 0
   874  0000EB                     Temp_Filter@x:
   875                           	opt stack 0
   876  0000EB                     ___ftsub@f1:
   877                           	opt stack 0
   878  0000EB                     eval_poly@x:
   879                           	opt stack 0
   880                           
   881                           ; 3 bytes @ 0x2A
   882  0000EB                     	ds	2
   883  0000ED                     ___fttol@exp1:
   884                           	opt stack 0
   885  0000ED                     Battery_Convert@x:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x2C
   889  0000ED                     	ds	1
   890  0000EE                     ToSend@what:
   891                           	opt stack 0
   892  0000EE                     eval_poly@d:
   893                           	opt stack 0
   894  0000EE                     ___ftsub@f2:
   895                           	opt stack 0
   896                           
   897                           ; 3 bytes @ 0x2D
   898  0000EE                     	ds	2
   899  0000F0                     ToSend@where:
   900                           	opt stack 0
   901  0000F0                     eval_poly@n:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x2F
   905  0000F0                     	ds	2
   906  0000F2                     ??_eval_poly:
   907                           
   908                           ; 0 bytes @ 0x31
   909  0000F2                     	ds	2
   910                           tblptru	equ	0xFF8
   911                           tblptrh	equ	0xFF7
   912                           tblptrl	equ	0xFF6
   913                           tablat	equ	0xFF5
   914                           postinc0	equ	0xFEE
   915                           wreg	equ	0xFE8
   916                           postdec1	equ	0xFE5
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	cstackCOMRAM
   920  000001                     __pcstackCOMRAM:
   921                           	opt stack 0
   922  000001                     ??_ADC_StartConversion:
   923  000001                     ?_ADC_GetConversionResult:
   924                           	opt stack 0
   925  000001                     ?i2_UART_buff_size:
   926                           	opt stack 0
   927  000001                     ?i2_UART_buff_modulo_inc:
   928                           	opt stack 0
   929  000001                     Set_4051@Channel:
   930                           	opt stack 0
   931  000001                     i2UART_buff_size@_this:
   932                           	opt stack 0
   933  000001                     i2UART_buff_modulo_inc@value:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x0
   937  000001                     	ds	1
   938  000002                     ADC_StartConversion@channel:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x1
   942  000002                     	ds	1
   943  000003                     ??_Set_4051:
   944  000003                     ??_ADC_GetConversionResult:
   945  000003                     i2UART_buff_modulo_inc@modulus:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x2
   949  000003                     	ds	2
   950  000005                     ??_ADC_ISR:
   951  000005                     i2UART_buff_modulo_inc@my_value:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x4
   955  000005                     	ds	2
   956  000007                     i2UART_buff_put@_this:
   957                           	opt stack 0
   958  000007                     i2UART_buff_get@_this:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x6
   962  000007                     	ds	2
   963  000009                     ??i2_UART_buff_get:
   964  000009                     i2UART_buff_put@c:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x8
   968  000009                     	ds	1
   969  00000A                     ??i2_UART_buff_put:
   970                           
   971                           ; 0 bytes @ 0x9
   972  00000A                     	ds	1
   973  00000B                     i2UART_buff_get@c:
   974                           	opt stack 0
   975  00000B                     ADC_ISR@ADC_Result:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0xA
   979  00000B                     	ds	1
   980  00000C                     EUSART1_Receive_ISR@data:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0xB
   984  00000C                     	ds	1
   985  00000D                     ??_INTERRUPT_InterruptManager:
   986                           
   987                           ; 0 bytes @ 0xC
   988  00000D                     	ds	14
   989  00001B                     ?_FastTransfer_buffer_modulo_inc:
   990                           	opt stack 0
   991  00001B                     ?_UART_buff_modulo_inc:
   992                           	opt stack 0
   993  00001B                     ?_UART_buff_size:
   994                           	opt stack 0
   995  00001B                     ?___wmul:
   996                           	opt stack 0
   997  00001B                     ?___awdiv:
   998                           	opt stack 0
   999  00001B                     ?___ftpack:
  1000                           	opt stack 0
  1001  00001B                     ?_frexp:
  1002                           	opt stack 0
  1003  00001B                     SetBypass@pin:
  1004                           	opt stack 0
  1005  00001B                     CRC8@data:
  1006                           	opt stack 0
  1007  00001B                     FastTransfer_buffer_modulo_inc@value:
  1008                           	opt stack 0
  1009  00001B                     crcBufS_put@_this:
  1010                           	opt stack 0
  1011  00001B                     crcBufS_status_put@_this:
  1012                           	opt stack 0
  1013  00001B                     crcBufS_get@_this:
  1014                           	opt stack 0
  1015  00001B                     UART_buff_size@_this:
  1016                           	opt stack 0
  1017  00001B                     UART_buff_modulo_inc@value:
  1018                           	opt stack 0
  1019  00001B                     UART_buff_peek@_this:
  1020                           	opt stack 0
  1021  00001B                     ___wmul@multiplier:
  1022                           	opt stack 0
  1023  00001B                     ___awdiv@dividend:
  1024                           	opt stack 0
  1025  00001B                     memset@p1:
  1026                           	opt stack 0
  1027  00001B                     ___ftpack@arg:
  1028                           	opt stack 0
  1029  00001B                     frexp@value:
  1030                           	opt stack 0
  1031  00001B                     Delay@d_lenth:
  1032                           	opt stack 0
  1033                           
  1034                           ; 4 bytes @ 0x1A
  1035  00001B                     	ds	2
  1036  00001D                     ??_UART_buff_peek:
  1037  00001D                     ?_Receive_available:
  1038                           	opt stack 0
  1039  00001D                     CRC8@len:
  1040                           	opt stack 0
  1041  00001D                     crcBufS_put@address:
  1042                           	opt stack 0
  1043  00001D                     crcBufS_status_put@time:
  1044                           	opt stack 0
  1045  00001D                     crcBufS_get@time:
  1046                           	opt stack 0
  1047  00001D                     SetBypass@state:
  1048                           	opt stack 0
  1049  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1050                           	opt stack 0
  1051  00001D                     UART_buff_modulo_inc@modulus:
  1052                           	opt stack 0
  1053  00001D                     ___wmul@multiplicand:
  1054                           	opt stack 0
  1055  00001D                     ___awdiv@divisor:
  1056                           	opt stack 0
  1057  00001D                     memset@c:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x1C
  1061  00001D                     	ds	1
  1062  00001E                     CRC8@sum:
  1063                           	opt stack 0
  1064  00001E                     crcBufS_put@oldCRC:
  1065                           	opt stack 0
  1066  00001E                     crcBufS_status_put@status:
  1067                           	opt stack 0
  1068  00001E                     crcBufS_get@space:
  1069                           	opt stack 0
  1070  00001E                     ___ftpack@exp:
  1071                           	opt stack 0
  1072  00001E                     frexp@eptr:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x1D
  1076  00001E                     	ds	1
  1077  00001F                     ??_crcBufS_get:
  1078  00001F                     ??_Delay:
  1079  00001F                     ??_SetBypass:
  1080  00001F                     ??_crcBufS_status_put:
  1081  00001F                     CRC8@extract:
  1082                           	opt stack 0
  1083  00001F                     crcBufS_put@status:
  1084                           	opt stack 0
  1085  00001F                     ___awdiv@counter:
  1086                           	opt stack 0
  1087  00001F                     ___ftpack@sign:
  1088                           	opt stack 0
  1089  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1090                           	opt stack 0
  1091  00001F                     UART_buff_modulo_inc@my_value:
  1092                           	opt stack 0
  1093  00001F                     ___wmul@product:
  1094                           	opt stack 0
  1095  00001F                     memset@n:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x1E
  1099  00001F                     	ds	1
  1100  000020                     ??_crcBufS_put:
  1101  000020                     ??___ftpack:
  1102  000020                     ??_frexp:
  1103  000020                     CRC8@tempI:
  1104                           	opt stack 0
  1105  000020                     ___awdiv@sign:
  1106                           	opt stack 0
  1107  000020                     Delay@wait:
  1108                           	opt stack 0
  1109                           
  1110                           ; 4 bytes @ 0x1F
  1111  000020                     	ds	1
  1112  000021                     ?_Battery_Get:
  1113                           	opt stack 0
  1114  000021                     ?_Tempeture_Get:
  1115                           	opt stack 0
  1116  000021                     CRC8@crc:
  1117                           	opt stack 0
  1118  000021                     Battery_Filter@x:
  1119                           	opt stack 0
  1120  000021                     Battery_Get@channelnum:
  1121                           	opt stack 0
  1122  000021                     Tempeture_Get@channelnum:
  1123                           	opt stack 0
  1124  000021                     FastTransfer_buffer_put@_this:
  1125                           	opt stack 0
  1126  000021                     UART_buff_put@_this:
  1127                           	opt stack 0
  1128  000021                     UART_buff_get@_this:
  1129                           	opt stack 0
  1130  000021                     ___awdiv@quotient:
  1131                           	opt stack 0
  1132  000021                     memset@p:
  1133                           	opt stack 0
  1134  000021                     ___ftge@ff1:
  1135                           	opt stack 0
  1136                           
  1137                           ; 3 bytes @ 0x20
  1138  000021                     	ds	2
  1139  000023                     ??_UART_buff_get:
  1140  000023                     ?___altoft:
  1141                           	opt stack 0
  1142  000023                     ?___awtoft:
  1143                           	opt stack 0
  1144  000023                     FastTransfer_buffer_put@towhere:
  1145                           	opt stack 0
  1146  000023                     UART_buff_put@c:
  1147                           	opt stack 0
  1148  000023                     FastTransfer_buffer_flush@_this:
  1149                           	opt stack 0
  1150  000023                     crcBufS_status_put@wantedTime:
  1151                           	opt stack 0
  1152  000023                     UART_buff_init@_this:
  1153                           	opt stack 0
  1154  000023                     ___awtoft@c:
  1155                           	opt stack 0
  1156  000023                     ___altoft@c:
  1157                           	opt stack 0
  1158                           
  1159                           ; 4 bytes @ 0x22
  1160  000023                     	ds	1
  1161  000024                     ??_UART_buff_put:
  1162  000024                     FastTransfer_buffer_put@towhat:
  1163                           	opt stack 0
  1164  000024                     ___ftge@ff2:
  1165                           	opt stack 0
  1166                           
  1167                           ; 3 bytes @ 0x23
  1168  000024                     	ds	1
  1169  000025                     UART_buff_get@c:
  1170                           	opt stack 0
  1171  000025                     FastTransfer_buffer_flush@clearBuffer:
  1172                           	opt stack 0
  1173  000025                     crcBufS_get@wantedTime:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x24
  1177  000025                     	ds	1
  1178  000026                     ??_FastTransfer_buffer_put:
  1179  000026                     Send_put@_data:
  1180                           	opt stack 0
  1181  000026                     ___awtoft@sign:
  1182                           	opt stack 0
  1183                           
  1184                           ; 1 bytes @ 0x25
  1185  000026                     	ds	1
  1186  000027                     ??_sendData:
  1187  000027                     ??_receiveData:
  1188  000027                     ??___altoft:
  1189  000027                     ??___ftge:
  1190                           
  1191                           ; 0 bytes @ 0x26
  1192  000027                     	ds	1
  1193  000028                     sendData@whereToSend:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x27
  1197  000028                     	ds	1
  1198  000029                     sendData@CS:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x28
  1202  000029                     	ds	1
  1203  00002A                     Battery_Fault@fault:
  1204                           	opt stack 0
  1205  00002A                     Temp_Fault@fault:
  1206                           	opt stack 0
  1207  00002A                     sendData@i:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x29
  1211  00002A                     	ds	1
  1212  00002B                     ___altoft@exp:
  1213                           	opt stack 0
  1214  00002B                     Battery_Fault@i:
  1215                           	opt stack 0
  1216  00002B                     Temp_Fault@i:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x2A
  1220  00002B                     	ds	1
  1221  00002C                     ___altoft@sign:
  1222                           	opt stack 0
  1223                           
  1224                           ; 1 bytes @ 0x2B
  1225  00002C                     	ds	1
  1226  00002D                     tblptru	equ	0xFF8
  1227                           tblptrh	equ	0xFF7
  1228                           tblptrl	equ	0xFF6
  1229                           tablat	equ	0xFF5
  1230                           postinc0	equ	0xFEE
  1231                           wreg	equ	0xFE8
  1232                           postdec1	equ	0xFE5
  1233                           fsr1l	equ	0xFE1
  1234                           
  1235                           ; 0 bytes @ 0x2C
  1236 ;;
  1237 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1238 ;;
  1239 ;; *************** function _main *****************
  1240 ;; Defined at:
  1241 ;;		line 30 in file "Main.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;  argc            2   17[BANK1 ] int 
  1244 ;;  argv            3   19[BANK1 ] PTR PTR unsigned char 
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  2   17[BANK1 ] int 
  1249 ;; Registers used:
  1250 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1256 ;;      Params:         0       0       5       0       0       0       0
  1257 ;;      Locals:         0       0       0       0       0       0       0
  1258 ;;      Temps:          0       0       0       0       0       0       0
  1259 ;;      Totals:         0       0       5       0       0       0       0
  1260 ;;Total ram usage:        5 bytes
  1261 ;; Hardware stack levels required when called:   10
  1262 ;; This function calls:
  1263 ;;		_Battery_Convert
  1264 ;;		_Battery_Fault
  1265 ;;		_RunBypas
  1266 ;;		_SYSTEM_Initialize
  1267 ;;		_Temp_Convert
  1268 ;;		_Temp_Fault
  1269 ;;		_updateComms
  1270 ;; This function is called by:
  1271 ;;		Startup code after reset
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text0
  1276  00364C                     __ptext0:
  1277                           	opt stack 0
  1278  00364C                     _main:
  1279                           	opt stack 21
  1280                           
  1281                           ;Main.c: 32: SYSTEM_Initialize();
  1282                           
  1283                           ;incstack = 0
  1284  00364C  ECC9  F019         	call	_SYSTEM_Initialize	;wreg free
  1285                           
  1286                           ;Main.c: 51: (INTCONbits.GIE = 1);
  1287  003650  8EF2               	bsf	intcon,7,c	;volatile
  1288                           
  1289                           ;Main.c: 54: (INTCONbits.PEIE = 1);
  1290  003652  8CF2               	bsf	intcon,6,c	;volatile
  1291  003654  D000               	goto	l5383
  1292  003656                     l5383:
  1293                           
  1294                           ;Main.c: 65: {
  1295                           ;Main.c: 66: if (Temp_Done)
  1296  003656  0100               	movlb	0	; () banked
  1297  003658  5188               	movf	_Temp_Done& (0+255),w,b
  1298  00365A  0100               	movlb	0	; () banked
  1299  00365C  1189               	iorwf	(_Temp_Done+1)& (0+255),w,b
  1300  00365E  B4D8               	btfsc	status,2,c
  1301  003660  D005               	goto	l5389
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;Main.c: 67: {
  1305                           ;Main.c: 68: Temp_Convert();
  1306  003662  EC9B  F00B         	call	_Temp_Convert	;wreg free
  1307                           
  1308                           ;Main.c: 69: Temp_Fault();
  1309  003666  EC91  F019         	call	_Temp_Fault	;wreg free
  1310  00366A  D000               	goto	l5389
  1311  00366C                     l5389:
  1312                           
  1313                           ;Main.c: 74: }
  1314                           ;Main.c: 75: if (Volt_Done)
  1315  00366C  0100               	movlb	0	; () banked
  1316  00366E  518A               	movf	_Volt_Done& (0+255),w,b
  1317  003670  0100               	movlb	0	; () banked
  1318  003672  118B               	iorwf	(_Volt_Done+1)& (0+255),w,b
  1319  003674  B4D8               	btfsc	status,2,c
  1320  003676  D007               	goto	l5397
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;Main.c: 76: {
  1324                           ;Main.c: 77: Battery_Convert();
  1325  003678  EC2E  F013         	call	_Battery_Convert	;wreg free
  1326                           
  1327                           ;Main.c: 78: Battery_Fault();
  1328  00367C  EC88  F017         	call	_Battery_Fault	;wreg free
  1329                           
  1330                           ;Main.c: 79: RunBypas();
  1331  003680  EC9F  F014         	call	_RunBypas	;wreg free
  1332  003684  D000               	goto	l5397
  1333  003686                     l5397:
  1334                           
  1335                           ;Main.c: 84: }
  1336                           ;Main.c: 85: updateComms();
  1337  003686  EC59  F008         	call	_updateComms	;wreg free
  1338  00368A  D7E5               	goto	l5383
  1339                           
  1340                           ;Main.c: 103: }
  1341                           ;Main.c: 104: return (0);
  1342                           ;	Return value of _main is never used
  1343  00368C  EF55  F000         	goto	start
  1344  003690                     __end_of_main:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           intcon	equ	0xFF2
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1l	equ	0xFE1
  1355                           status	equ	0xFD8
  1356                           
  1357 ;; *************** function _updateComms *****************
  1358 ;; Defined at:
  1359 ;;		line 12 in file "Communications.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;		None
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;		None
  1364 ;; Return value:  Size  Location     Type
  1365 ;;		None               void
  1366 ;; Registers used:
  1367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1373 ;;      Params:         0       0       0       0       0       0       0
  1374 ;;      Locals:         0       0       0       0       0       0       0
  1375 ;;      Temps:          0       0       0       0       0       0       0
  1376 ;;      Totals:         0       0       0       0       0       0       0
  1377 ;;Total ram usage:        0 bytes
  1378 ;; Hardware stack levels used:    1
  1379 ;; Hardware stack levels required when called:    9
  1380 ;; This function calls:
  1381 ;;		_Battery_Get
  1382 ;;		_Delay
  1383 ;;		_Tempeture_Get
  1384 ;;		_ToSend
  1385 ;;		___ftmul
  1386 ;;		___fttol
  1387 ;;		_receiveData
  1388 ;;		_sendData
  1389 ;; This function is called by:
  1390 ;;		_main
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text1
  1395  0010B2                     __ptext1:
  1396                           	opt stack 0
  1397  0010B2                     _updateComms:
  1398                           	opt stack 21
  1399                           
  1400                           ;Communications.c: 15: if (receiveData()) {
  1401                           
  1402                           ;incstack = 0
  1403  0010B2  EC0F  F003         	call	_receiveData	;wreg free
  1404  0010B6  0900               	iorlw	0
  1405  0010B8  B4D8               	btfsc	status,2,c
  1406  0010BA  0012               	return	
  1407                           
  1408                           ;Communications.c: 16: Delay(5);
  1409  0010BC  0E05               	movlw	5
  1410  0010BE  6E1B               	movwf	Delay@d_lenth,c
  1411  0010C0  0E00               	movlw	0
  1412  0010C2  6E1C               	movwf	Delay@d_lenth+1,c
  1413  0010C4  0E00               	movlw	0
  1414  0010C6  6E1D               	movwf	Delay@d_lenth+2,c
  1415  0010C8  0E00               	movlw	0
  1416  0010CA  6E1E               	movwf	Delay@d_lenth+3,c
  1417  0010CC  ECDA  F01A         	call	_Delay	;wreg free
  1418                           
  1419                           ;Communications.c: 17: LATEbits.LATE1 = 1;
  1420  0010D0  828D               	bsf	3981,1,c	;volatile
  1421                           
  1422                           ;Communications.c: 18: Delay(5);
  1423  0010D2  0E05               	movlw	5
  1424  0010D4  6E1B               	movwf	Delay@d_lenth,c
  1425  0010D6  0E00               	movlw	0
  1426  0010D8  6E1C               	movwf	Delay@d_lenth+1,c
  1427  0010DA  0E00               	movlw	0
  1428  0010DC  6E1D               	movwf	Delay@d_lenth+2,c
  1429  0010DE  0E00               	movlw	0
  1430  0010E0  6E1E               	movwf	Delay@d_lenth+3,c
  1431  0010E2  ECDA  F01A         	call	_Delay	;wreg free
  1432                           
  1433                           ;Communications.c: 19: ToSend(0, 1);
  1434  0010E6  0E00               	movlw	0
  1435  0010E8  0100               	movlb	0	; () banked
  1436  0010EA  6FEF               	movwf	(ToSend@what+1)& (0+255),b
  1437  0010EC  0E01               	movlw	1
  1438  0010EE  6FEE               	movwf	ToSend@what& (0+255),b
  1439  0010F0  0E00               	movlw	0
  1440  0010F2  ECB7  F01C         	call	_ToSend
  1441                           
  1442                           ;Communications.c: 20: ToSend(1, (int) (Battery_Get(0)*1000.0));
  1443  0010F6  0E00               	movlw	0
  1444  0010F8  0100               	movlb	0	; () banked
  1445  0010FA  6FD3               	movwf	___ftmul@f2& (0+255),b
  1446  0010FC  0E7A               	movlw	122
  1447  0010FE  0100               	movlb	0	; () banked
  1448  001100  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1449  001102  0E44               	movlw	68
  1450  001104  0100               	movlb	0	; () banked
  1451  001106  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1452  001108  0E00               	movlw	0
  1453  00110A  6E22               	movwf	Battery_Get@channelnum+1,c
  1454  00110C  0E00               	movlw	0
  1455  00110E  6E21               	movwf	Battery_Get@channelnum,c
  1456  001110  ECEA  F01B         	call	_Battery_Get	;wreg free
  1457  001114  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1458  001118  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1459  00111C  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1460  001120  EC15  F00E         	call	___ftmul	;wreg free
  1461  001124  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1462  001128  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1463  00112C  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1464  001130  EC80  F00F         	call	___fttol	;wreg free
  1465  001134  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1466  001138  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1467  00113C  0E01               	movlw	1
  1468  00113E  ECB7  F01C         	call	_ToSend
  1469                           
  1470                           ;Communications.c: 21: ToSend(2, (int) (Battery_Get(1)*1000.0));
  1471  001142  0E00               	movlw	0
  1472  001144  0100               	movlb	0	; () banked
  1473  001146  6FD3               	movwf	___ftmul@f2& (0+255),b
  1474  001148  0E7A               	movlw	122
  1475  00114A  0100               	movlb	0	; () banked
  1476  00114C  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1477  00114E  0E44               	movlw	68
  1478  001150  0100               	movlb	0	; () banked
  1479  001152  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1480  001154  0E00               	movlw	0
  1481  001156  6E22               	movwf	Battery_Get@channelnum+1,c
  1482  001158  0E01               	movlw	1
  1483  00115A  6E21               	movwf	Battery_Get@channelnum,c
  1484  00115C  ECEA  F01B         	call	_Battery_Get	;wreg free
  1485  001160  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1486  001164  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1487  001168  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1488  00116C  EC15  F00E         	call	___ftmul	;wreg free
  1489  001170  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1490  001174  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1491  001178  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1492  00117C  EC80  F00F         	call	___fttol	;wreg free
  1493  001180  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1494  001184  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1495  001188  0E02               	movlw	2
  1496  00118A  ECB7  F01C         	call	_ToSend
  1497                           
  1498                           ;Communications.c: 22: ToSend(3, (int) (Battery_Get(2)*1000.0));
  1499  00118E  0E00               	movlw	0
  1500  001190  0100               	movlb	0	; () banked
  1501  001192  6FD3               	movwf	___ftmul@f2& (0+255),b
  1502  001194  0E7A               	movlw	122
  1503  001196  0100               	movlb	0	; () banked
  1504  001198  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1505  00119A  0E44               	movlw	68
  1506  00119C  0100               	movlb	0	; () banked
  1507  00119E  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1508  0011A0  0E00               	movlw	0
  1509  0011A2  6E22               	movwf	Battery_Get@channelnum+1,c
  1510  0011A4  0E02               	movlw	2
  1511  0011A6  6E21               	movwf	Battery_Get@channelnum,c
  1512  0011A8  ECEA  F01B         	call	_Battery_Get	;wreg free
  1513  0011AC  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1514  0011B0  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1515  0011B4  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1516  0011B8  EC15  F00E         	call	___ftmul	;wreg free
  1517  0011BC  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1518  0011C0  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1519  0011C4  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1520  0011C8  EC80  F00F         	call	___fttol	;wreg free
  1521  0011CC  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1522  0011D0  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1523  0011D4  0E03               	movlw	3
  1524  0011D6  ECB7  F01C         	call	_ToSend
  1525                           
  1526                           ;Communications.c: 23: ToSend(4, (int) (Battery_Get(3)*1000.0));
  1527  0011DA  0E00               	movlw	0
  1528  0011DC  0100               	movlb	0	; () banked
  1529  0011DE  6FD3               	movwf	___ftmul@f2& (0+255),b
  1530  0011E0  0E7A               	movlw	122
  1531  0011E2  0100               	movlb	0	; () banked
  1532  0011E4  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1533  0011E6  0E44               	movlw	68
  1534  0011E8  0100               	movlb	0	; () banked
  1535  0011EA  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1536  0011EC  0E00               	movlw	0
  1537  0011EE  6E22               	movwf	Battery_Get@channelnum+1,c
  1538  0011F0  0E03               	movlw	3
  1539  0011F2  6E21               	movwf	Battery_Get@channelnum,c
  1540  0011F4  ECEA  F01B         	call	_Battery_Get	;wreg free
  1541  0011F8  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1542  0011FC  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1543  001200  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1544  001204  EC15  F00E         	call	___ftmul	;wreg free
  1545  001208  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1546  00120C  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1547  001210  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1548  001214  EC80  F00F         	call	___fttol	;wreg free
  1549  001218  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1550  00121C  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1551  001220  0E04               	movlw	4
  1552  001222  ECB7  F01C         	call	_ToSend
  1553                           
  1554                           ;Communications.c: 24: ToSend(5, (int) (Battery_Get(4)*1000.0));
  1555  001226  0E00               	movlw	0
  1556  001228  0100               	movlb	0	; () banked
  1557  00122A  6FD3               	movwf	___ftmul@f2& (0+255),b
  1558  00122C  0E7A               	movlw	122
  1559  00122E  0100               	movlb	0	; () banked
  1560  001230  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1561  001232  0E44               	movlw	68
  1562  001234  0100               	movlb	0	; () banked
  1563  001236  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1564  001238  0E00               	movlw	0
  1565  00123A  6E22               	movwf	Battery_Get@channelnum+1,c
  1566  00123C  0E04               	movlw	4
  1567  00123E  6E21               	movwf	Battery_Get@channelnum,c
  1568  001240  ECEA  F01B         	call	_Battery_Get	;wreg free
  1569  001244  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1570  001248  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1571  00124C  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1572  001250  EC15  F00E         	call	___ftmul	;wreg free
  1573  001254  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1574  001258  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1575  00125C  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1576  001260  EC80  F00F         	call	___fttol	;wreg free
  1577  001264  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1578  001268  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1579  00126C  0E05               	movlw	5
  1580  00126E  ECB7  F01C         	call	_ToSend
  1581                           
  1582                           ;Communications.c: 25: ToSend(6, (int) (Battery_Get(5)*1000.0));
  1583  001272  0E00               	movlw	0
  1584  001274  0100               	movlb	0	; () banked
  1585  001276  6FD3               	movwf	___ftmul@f2& (0+255),b
  1586  001278  0E7A               	movlw	122
  1587  00127A  0100               	movlb	0	; () banked
  1588  00127C  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1589  00127E  0E44               	movlw	68
  1590  001280  0100               	movlb	0	; () banked
  1591  001282  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1592  001284  0E00               	movlw	0
  1593  001286  6E22               	movwf	Battery_Get@channelnum+1,c
  1594  001288  0E05               	movlw	5
  1595  00128A  6E21               	movwf	Battery_Get@channelnum,c
  1596  00128C  ECEA  F01B         	call	_Battery_Get	;wreg free
  1597  001290  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1598  001294  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1599  001298  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1600  00129C  EC15  F00E         	call	___ftmul	;wreg free
  1601  0012A0  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1602  0012A4  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1603  0012A8  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1604  0012AC  EC80  F00F         	call	___fttol	;wreg free
  1605  0012B0  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1606  0012B4  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1607  0012B8  0E06               	movlw	6
  1608  0012BA  ECB7  F01C         	call	_ToSend
  1609                           
  1610                           ;Communications.c: 26: ToSend(7, (int) (Battery_Get(6)*1000.0));
  1611  0012BE  0E00               	movlw	0
  1612  0012C0  0100               	movlb	0	; () banked
  1613  0012C2  6FD3               	movwf	___ftmul@f2& (0+255),b
  1614  0012C4  0E7A               	movlw	122
  1615  0012C6  0100               	movlb	0	; () banked
  1616  0012C8  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1617  0012CA  0E44               	movlw	68
  1618  0012CC  0100               	movlb	0	; () banked
  1619  0012CE  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1620  0012D0  0E00               	movlw	0
  1621  0012D2  6E22               	movwf	Battery_Get@channelnum+1,c
  1622  0012D4  0E06               	movlw	6
  1623  0012D6  6E21               	movwf	Battery_Get@channelnum,c
  1624  0012D8  ECEA  F01B         	call	_Battery_Get	;wreg free
  1625  0012DC  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1626  0012E0  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1627  0012E4  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1628  0012E8  EC15  F00E         	call	___ftmul	;wreg free
  1629  0012EC  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1630  0012F0  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1631  0012F4  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1632  0012F8  EC80  F00F         	call	___fttol	;wreg free
  1633  0012FC  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1634  001300  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1635  001304  0E07               	movlw	7
  1636  001306  ECB7  F01C         	call	_ToSend
  1637                           
  1638                           ;Communications.c: 27: ToSend(8, (int) (Battery_Get(7)*1000.0));
  1639  00130A  0E00               	movlw	0
  1640  00130C  0100               	movlb	0	; () banked
  1641  00130E  6FD3               	movwf	___ftmul@f2& (0+255),b
  1642  001310  0E7A               	movlw	122
  1643  001312  0100               	movlb	0	; () banked
  1644  001314  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1645  001316  0E44               	movlw	68
  1646  001318  0100               	movlb	0	; () banked
  1647  00131A  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1648  00131C  0E00               	movlw	0
  1649  00131E  6E22               	movwf	Battery_Get@channelnum+1,c
  1650  001320  0E07               	movlw	7
  1651  001322  6E21               	movwf	Battery_Get@channelnum,c
  1652  001324  ECEA  F01B         	call	_Battery_Get	;wreg free
  1653  001328  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1654  00132C  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1655  001330  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1656  001334  EC15  F00E         	call	___ftmul	;wreg free
  1657  001338  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1658  00133C  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1659  001340  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1660  001344  EC80  F00F         	call	___fttol	;wreg free
  1661  001348  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1662  00134C  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1663  001350  0E08               	movlw	8
  1664  001352  ECB7  F01C         	call	_ToSend
  1665                           
  1666                           ;Communications.c: 28: ToSend(9, (int) (Battery_Get(8)*1000.0));
  1667  001356  0E00               	movlw	0
  1668  001358  0100               	movlb	0	; () banked
  1669  00135A  6FD3               	movwf	___ftmul@f2& (0+255),b
  1670  00135C  0E7A               	movlw	122
  1671  00135E  0100               	movlb	0	; () banked
  1672  001360  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1673  001362  0E44               	movlw	68
  1674  001364  0100               	movlb	0	; () banked
  1675  001366  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1676  001368  0E00               	movlw	0
  1677  00136A  6E22               	movwf	Battery_Get@channelnum+1,c
  1678  00136C  0E08               	movlw	8
  1679  00136E  6E21               	movwf	Battery_Get@channelnum,c
  1680  001370  ECEA  F01B         	call	_Battery_Get	;wreg free
  1681  001374  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1682  001378  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1683  00137C  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1684  001380  EC15  F00E         	call	___ftmul	;wreg free
  1685  001384  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1686  001388  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1687  00138C  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1688  001390  EC80  F00F         	call	___fttol	;wreg free
  1689  001394  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1690  001398  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1691  00139C  0E09               	movlw	9
  1692  00139E  ECB7  F01C         	call	_ToSend
  1693                           
  1694                           ;Communications.c: 29: ToSend(10, (int) (Battery_Get(9)*1000.0));
  1695  0013A2  0E00               	movlw	0
  1696  0013A4  0100               	movlb	0	; () banked
  1697  0013A6  6FD3               	movwf	___ftmul@f2& (0+255),b
  1698  0013A8  0E7A               	movlw	122
  1699  0013AA  0100               	movlb	0	; () banked
  1700  0013AC  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1701  0013AE  0E44               	movlw	68
  1702  0013B0  0100               	movlb	0	; () banked
  1703  0013B2  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1704  0013B4  0E00               	movlw	0
  1705  0013B6  6E22               	movwf	Battery_Get@channelnum+1,c
  1706  0013B8  0E09               	movlw	9
  1707  0013BA  6E21               	movwf	Battery_Get@channelnum,c
  1708  0013BC  ECEA  F01B         	call	_Battery_Get	;wreg free
  1709  0013C0  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1710  0013C4  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1711  0013C8  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1712  0013CC  EC15  F00E         	call	___ftmul	;wreg free
  1713  0013D0  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1714  0013D4  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1715  0013D8  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1716  0013DC  EC80  F00F         	call	___fttol	;wreg free
  1717  0013E0  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1718  0013E4  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1719  0013E8  0E0A               	movlw	10
  1720  0013EA  ECB7  F01C         	call	_ToSend
  1721                           
  1722                           ;Communications.c: 30: ToSend(11, (int) Tempeture_Get(0));
  1723  0013EE  0E00               	movlw	0
  1724  0013F0  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1725  0013F2  0E00               	movlw	0
  1726  0013F4  6E21               	movwf	Tempeture_Get@channelnum,c
  1727  0013F6  ECD2  F01B         	call	_Tempeture_Get	;wreg free
  1728  0013FA  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1729  0013FE  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1730  001402  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1731  001406  EC80  F00F         	call	___fttol	;wreg free
  1732  00140A  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1733  00140E  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1734  001412  0E0B               	movlw	11
  1735  001414  ECB7  F01C         	call	_ToSend
  1736                           
  1737                           ;Communications.c: 31: ToSend(12, (int) Tempeture_Get(1));
  1738  001418  0E00               	movlw	0
  1739  00141A  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1740  00141C  0E01               	movlw	1
  1741  00141E  6E21               	movwf	Tempeture_Get@channelnum,c
  1742  001420  ECD2  F01B         	call	_Tempeture_Get	;wreg free
  1743  001424  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1744  001428  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1745  00142C  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1746  001430  EC80  F00F         	call	___fttol	;wreg free
  1747  001434  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1748  001438  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1749  00143C  0E0C               	movlw	12
  1750  00143E  ECB7  F01C         	call	_ToSend
  1751                           
  1752                           ;Communications.c: 32: ToSend(13, (int) Tempeture_Get(2));
  1753  001442  0E00               	movlw	0
  1754  001444  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1755  001446  0E02               	movlw	2
  1756  001448  6E21               	movwf	Tempeture_Get@channelnum,c
  1757  00144A  ECD2  F01B         	call	_Tempeture_Get	;wreg free
  1758  00144E  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1759  001452  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1760  001456  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1761  00145A  EC80  F00F         	call	___fttol	;wreg free
  1762  00145E  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1763  001462  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1764  001466  0E0D               	movlw	13
  1765  001468  ECB7  F01C         	call	_ToSend
  1766                           
  1767                           ;Communications.c: 33: ToSend(14, (int) Tempeture_Get(3));
  1768  00146C  0E00               	movlw	0
  1769  00146E  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1770  001470  0E03               	movlw	3
  1771  001472  6E21               	movwf	Tempeture_Get@channelnum,c
  1772  001474  ECD2  F01B         	call	_Tempeture_Get	;wreg free
  1773  001478  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1774  00147C  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1775  001480  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1776  001484  EC80  F00F         	call	___fttol	;wreg free
  1777  001488  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1778  00148C  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1779  001490  0E0E               	movlw	14
  1780  001492  ECB7  F01C         	call	_ToSend
  1781                           
  1782                           ;Communications.c: 34: sendData(16);
  1783  001496  0E10               	movlw	16
  1784  001498  EC79  F011         	call	_sendData
  1785                           
  1786                           ;Communications.c: 35: Delay(10);
  1787  00149C  0E0A               	movlw	10
  1788  00149E  6E1B               	movwf	Delay@d_lenth,c
  1789  0014A0  0E00               	movlw	0
  1790  0014A2  6E1C               	movwf	Delay@d_lenth+1,c
  1791  0014A4  0E00               	movlw	0
  1792  0014A6  6E1D               	movwf	Delay@d_lenth+2,c
  1793  0014A8  0E00               	movlw	0
  1794  0014AA  6E1E               	movwf	Delay@d_lenth+3,c
  1795  0014AC  ECDA  F01A         	call	_Delay	;wreg free
  1796                           
  1797                           ;Communications.c: 36: LATEbits.LATE1 = 0;
  1798  0014B0  928D               	bcf	3981,1,c	;volatile
  1799                           
  1800                           ;Communications.c: 37: LATAbits.LATA4 ^= 1;
  1801  0014B2  7889               	btg	3977,4,c	;volatile
  1802  0014B4  0012               	return	
  1803  0014B6  0012               	return		;funcret
  1804  0014B8                     __end_of_updateComms:
  1805                           	opt stack 0
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           intcon	equ	0xFF2
  1811                           postinc0	equ	0xFEE
  1812                           wreg	equ	0xFE8
  1813                           postdec1	equ	0xFE5
  1814                           fsr1l	equ	0xFE1
  1815                           status	equ	0xFD8
  1816                           
  1817 ;; *************** function _sendData *****************
  1818 ;; Defined at:
  1819 ;;		line 53 in file "FastTransfer.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;  whereToSend     1    wreg     unsigned char 
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;  whereToSend     1   39[COMRAM] unsigned char 
  1824 ;;  i               2   41[COMRAM] int 
  1825 ;;  CS              1   40[COMRAM] unsigned char 
  1826 ;; Return value:  Size  Location     Type
  1827 ;;		None               void
  1828 ;; Registers used:
  1829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1830 ;; Tracked objects:
  1831 ;;		On entry : 0/0
  1832 ;;		On exit  : 0/0
  1833 ;;		Unchanged: 0/0
  1834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1835 ;;      Params:         0       0       0       0       0       0       0
  1836 ;;      Locals:         4       0       0       0       0       0       0
  1837 ;;      Temps:          1       0       0       0       0       0       0
  1838 ;;      Totals:         5       0       0       0       0       0       0
  1839 ;;Total ram usage:        5 bytes
  1840 ;; Hardware stack levels used:    1
  1841 ;; Hardware stack levels required when called:    7
  1842 ;; This function calls:
  1843 ;;		Absolute function
  1844 ;;		_CRC8
  1845 ;;		_FastTransfer_buffer_flush
  1846 ;;		_Send_put
  1847 ;;		_crcBufS_put
  1848 ;; This function is called by:
  1849 ;;		_updateComms
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           	psect	text2
  1854  0022F2                     __ptext2:
  1855                           	opt stack 0
  1856  0022F2                     _sendData:
  1857                           	opt stack 22
  1858                           
  1859                           ;incstack = 0
  1860                           ;sendData@whereToSend stored from wreg
  1861  0022F2  6E28               	movwf	sendData@whereToSend,c
  1862                           
  1863                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1864  0022F4  C098  F01B         	movff	_sendStructAddress,CRC8@data
  1865  0022F8  C099  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1866  0022FC  C2CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1867  002300  EC60  F01A         	call	_CRC8	;wreg free
  1868  002304  6E29               	movwf	sendData@CS,c
  1869                           
  1870                           ;FastTransfer.c: 58: serial_write(0x06);
  1871  002306  D801               	call	u5278
  1872  002308  D00B               	goto	l4945
  1873  00230A                     u5278:
  1874  00230A  0005               	push	
  1875  00230C  6EFA               	movwf	pclath,c
  1876  00230E  5035               	movf	_serial_write,w,c
  1877  002310  6EFD               	movwf	tosl,c
  1878  002312  5036               	movf	_serial_write+1,w,c
  1879  002314  6EFE               	movwf	tosh,c
  1880  002316  50F8               	movf	tblptru,w,c
  1881  002318  6EFF               	movwf	tosu,c
  1882  00231A  50FA               	movf	pclath,w,c
  1883  00231C  0E06               	movlw	6
  1884  00231E  0012               	return		;indir
  1885  002320                     l4945:
  1886                           
  1887                           ;FastTransfer.c: 59: serial_write(0x85);
  1888  002320  D801               	call	u5288
  1889  002322  D00B               	goto	l4947
  1890  002324                     u5288:
  1891  002324  0005               	push	
  1892  002326  6EFA               	movwf	pclath,c
  1893  002328  5035               	movf	_serial_write,w,c
  1894  00232A  6EFD               	movwf	tosl,c
  1895  00232C  5036               	movf	_serial_write+1,w,c
  1896  00232E  6EFE               	movwf	tosh,c
  1897  002330  50F8               	movf	tblptru,w,c
  1898  002332  6EFF               	movwf	tosu,c
  1899  002334  50FA               	movf	pclath,w,c
  1900  002336  0E85               	movlw	133
  1901  002338  0012               	return		;indir
  1902  00233A                     l4947:
  1903                           
  1904                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1905  00233A  D801               	call	u5298
  1906  00233C  D00B               	goto	l4949
  1907  00233E                     u5298:
  1908  00233E  0005               	push	
  1909  002340  6EFA               	movwf	pclath,c
  1910  002342  5035               	movf	_serial_write,w,c
  1911  002344  6EFD               	movwf	tosl,c
  1912  002346  5036               	movf	_serial_write+1,w,c
  1913  002348  6EFE               	movwf	tosh,c
  1914  00234A  50F8               	movf	tblptru,w,c
  1915  00234C  6EFF               	movwf	tosu,c
  1916  00234E  50FA               	movf	pclath,w,c
  1917  002350  5028               	movf	sendData@whereToSend,w,c
  1918  002352  0012               	return		;indir
  1919  002354                     l4949:
  1920                           
  1921                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1922  002354  D801               	call	u5308
  1923  002356  D00B               	goto	l4951
  1924  002358                     u5308:
  1925  002358  0005               	push	
  1926  00235A  6EFA               	movwf	pclath,c
  1927  00235C  5035               	movf	_serial_write,w,c
  1928  00235E  6EFD               	movwf	tosl,c
  1929  002360  5036               	movf	_serial_write+1,w,c
  1930  002362  6EFE               	movwf	tosh,c
  1931  002364  50F8               	movf	tblptru,w,c
  1932  002366  6EFF               	movwf	tosu,c
  1933  002368  50FA               	movf	pclath,w,c
  1934  00236A  503E               	movf	_moduleAddress,w,c
  1935  00236C  0012               	return		;indir
  1936  00236E                     l4951:
  1937                           
  1938                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1939  00236E  D801               	call	u5318
  1940  002370  D00C               	goto	l4953
  1941  002372                     u5318:
  1942  002372  0005               	push	
  1943  002374  6EFA               	movwf	pclath,c
  1944  002376  5035               	movf	_serial_write,w,c
  1945  002378  6EFD               	movwf	tosl,c
  1946  00237A  5036               	movf	_serial_write+1,w,c
  1947  00237C  6EFE               	movwf	tosh,c
  1948  00237E  50F8               	movf	tblptru,w,c
  1949  002380  6EFF               	movwf	tosu,c
  1950  002382  50FA               	movf	pclath,w,c
  1951  002384  0102               	movlb	2	; () banked
  1952  002386  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1953  002388  0012               	return		;indir
  1954  00238A                     l4953:
  1955                           
  1956                           ;FastTransfer.c: 66: int i;
  1957                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1958  00238A  0E00               	movlw	0
  1959  00238C  6E2B               	movwf	sendData@i+1,c
  1960  00238E  0E00               	movlw	0
  1961  002390  6E2A               	movwf	sendData@i,c
  1962  002392  D018               	goto	l4959
  1963  002394                     l4955:
  1964                           
  1965                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1966  002394  D801               	call	u5328
  1967  002396  D013               	goto	l4957
  1968  002398                     u5328:
  1969  002398  0005               	push	
  1970  00239A  6EFA               	movwf	pclath,c
  1971  00239C  5035               	movf	_serial_write,w,c
  1972  00239E  6EFD               	movwf	tosl,c
  1973  0023A0  5036               	movf	_serial_write+1,w,c
  1974  0023A2  6EFE               	movwf	tosh,c
  1975  0023A4  50F8               	movf	tblptru,w,c
  1976  0023A6  6EFF               	movwf	tosu,c
  1977  0023A8  50FA               	movf	pclath,w,c
  1978  0023AA  502A               	movf	sendData@i,w,c
  1979  0023AC  0100               	movlb	0	; () banked
  1980  0023AE  2598               	addwf	_sendStructAddress& (0+255),w,b
  1981  0023B0  6ED9               	movwf	fsr2l,c
  1982  0023B2  502B               	movf	sendData@i+1,w,c
  1983  0023B4  0100               	movlb	0	; () banked
  1984  0023B6  2199               	addwfc	(_sendStructAddress+1)& (0+255),w,b
  1985  0023B8  6EDA               	movwf	fsr2h,c
  1986  0023BA  50DF               	movf	indf2,w,c
  1987  0023BC  0012               	return		;indir
  1988  0023BE                     l4957:
  1989  0023BE  4A2A               	infsnz	sendData@i,f,c
  1990  0023C0  2A2B               	incf	sendData@i+1,f,c
  1991  0023C2  D000               	goto	l4959
  1992  0023C4                     l4959:
  1993  0023C4  0102               	movlb	2	; () banked
  1994  0023C6  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1995  0023C8  5C2A               	subwf	sendData@i,w,c
  1996  0023CA  502B               	movf	sendData@i+1,w,c
  1997  0023CC  0A80               	xorlw	128
  1998  0023CE  6E27               	movwf	??_sendData& (0+255),c
  1999  0023D0  0102               	movlb	2	; () banked
  2000  0023D2  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  2001  0023D4  0A80               	xorlw	128
  2002  0023D6  5827               	subwfb	??_sendData& (0+255),w,c
  2003  0023D8  A0D8               	btfss	status,0,c
  2004  0023DA  D7DC               	goto	l4955
  2005                           
  2006                           ; BSR set to: 2
  2007                           ;FastTransfer.c: 69: }
  2008                           ;FastTransfer.c: 72: serial_write(CS);
  2009                           
  2010                           ; BSR set to: 2
  2011  0023DC  D801               	call	u5348
  2012  0023DE  D00B               	goto	l4963
  2013  0023E0                     u5348:
  2014  0023E0  0005               	push	
  2015  0023E2  6EFA               	movwf	pclath,c
  2016  0023E4  5035               	movf	_serial_write,w,c
  2017  0023E6  6EFD               	movwf	tosl,c
  2018  0023E8  5036               	movf	_serial_write+1,w,c
  2019  0023EA  6EFE               	movwf	tosh,c
  2020  0023EC  50F8               	movf	tblptru,w,c
  2021  0023EE  6EFF               	movwf	tosu,c
  2022  0023F0  50FA               	movf	pclath,w,c
  2023  0023F2  5029               	movf	sendData@CS,w,c
  2024  0023F4  0012               	return		;indir
  2025  0023F6                     l4963:
  2026                           
  2027                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  2028  0023F6  0E9C               	movlw	low _crc_buffer
  2029  0023F8  6E1B               	movwf	crcBufS_put@_this,c
  2030  0023FA  0E00               	movlw	high _crc_buffer
  2031  0023FC  6E1C               	movwf	crcBufS_put@_this+1,c
  2032  0023FE  C028  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  2033  002402  C029  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  2034  002406  0E00               	movlw	0
  2035  002408  6E1F               	movwf	crcBufS_put@status,c
  2036  00240A  ECF3  F015         	call	_crcBufS_put
  2037                           
  2038                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  2039  00240E  0E00               	movlw	low _ring_buffer
  2040  002410  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  2041  002412  0E02               	movlw	high _ring_buffer
  2042  002414  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  2043  002416  0E00               	movlw	0
  2044  002418  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  2045  00241A  0E01               	movlw	1
  2046  00241C  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  2047  00241E  ECFF  F019         	call	_FastTransfer_buffer_flush	;wreg free
  2048  002422  0012               	return		;funcret
  2049  002424                     __end_of_sendData:
  2050                           	opt stack 0
  2051                           tosu	equ	0xFFF
  2052                           tosh	equ	0xFFE
  2053                           tosl	equ	0xFFD
  2054                           pclath	equ	0xFFA
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           intcon	equ	0xFF2
  2060                           postinc0	equ	0xFEE
  2061                           wreg	equ	0xFE8
  2062                           postdec1	equ	0xFE5
  2063                           fsr1l	equ	0xFE1
  2064                           indf2	equ	0xFDF
  2065                           fsr2h	equ	0xFDA
  2066                           fsr2l	equ	0xFD9
  2067                           status	equ	0xFD8
  2068                           
  2069 ;; *************** function _crcBufS_put *****************
  2070 ;; Defined at:
  2071 ;;		line 321 in file "FastTransfer.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2074 ;;		 -> crc_buffer(17), 
  2075 ;;  address         1   28[COMRAM] unsigned char 
  2076 ;;  oldCRC          1   29[COMRAM] unsigned char 
  2077 ;;  status          1   30[COMRAM] unsigned char 
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;		None
  2080 ;; Return value:  Size  Location     Type
  2081 ;;		None               void
  2082 ;; Registers used:
  2083 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2089 ;;      Params:         5       0       0       0       0       0       0
  2090 ;;      Locals:         0       0       0       0       0       0       0
  2091 ;;      Temps:          2       0       0       0       0       0       0
  2092 ;;      Totals:         7       0       0       0       0       0       0
  2093 ;;Total ram usage:        7 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    4
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_sendData
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text3
  2104  002BE6                     __ptext3:
  2105                           	opt stack 0
  2106  002BE6                     _crcBufS_put:
  2107                           	opt stack 24
  2108                           
  2109                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  2110                           
  2111                           ;incstack = 0
  2112  002BE6  EE20 F00F          	lfsr	2,15
  2113  002BEA  501B               	movf	crcBufS_put@_this,w,c
  2114  002BEC  26D9               	addwf	fsr2l,f,c
  2115  002BEE  501C               	movf	crcBufS_put@_this+1,w,c
  2116  002BF0  22DA               	addwfc	fsr2h,f,c
  2117  002BF2  CFDE F020          	movff	postinc2,??_crcBufS_put
  2118  002BF6  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2119  002BFA  5020               	movf	??_crcBufS_put,w,c
  2120  002BFC  241B               	addwf	crcBufS_put@_this,w,c
  2121  002BFE  6ED9               	movwf	fsr2l,c
  2122  002C00  5021               	movf	??_crcBufS_put+1,w,c
  2123  002C02  201C               	addwfc	crcBufS_put@_this+1,w,c
  2124  002C04  6EDA               	movwf	fsr2h,c
  2125  002C06  C01D  FFDF         	movff	crcBufS_put@address,indf2
  2126                           
  2127                           ;FastTransfer.c: 323: _this->head++;
  2128  002C0A  EE20 F00F          	lfsr	2,15
  2129  002C0E  501B               	movf	crcBufS_put@_this,w,c
  2130  002C10  26D9               	addwf	fsr2l,f,c
  2131  002C12  501C               	movf	crcBufS_put@_this+1,w,c
  2132  002C14  22DA               	addwfc	fsr2h,f,c
  2133  002C16  2ADE               	incf	postinc2,f,c
  2134  002C18  0E00               	movlw	0
  2135  002C1A  22DD               	addwfc	postdec2,f,c
  2136                           
  2137                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  2138  002C1C  EE20 F00F          	lfsr	2,15
  2139  002C20  501B               	movf	crcBufS_put@_this,w,c
  2140  002C22  26D9               	addwf	fsr2l,f,c
  2141  002C24  501C               	movf	crcBufS_put@_this+1,w,c
  2142  002C26  22DA               	addwfc	fsr2h,f,c
  2143  002C28  CFDE F020          	movff	postinc2,??_crcBufS_put
  2144  002C2C  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2145  002C30  5020               	movf	??_crcBufS_put,w,c
  2146  002C32  241B               	addwf	crcBufS_put@_this,w,c
  2147  002C34  6ED9               	movwf	fsr2l,c
  2148  002C36  5021               	movf	??_crcBufS_put+1,w,c
  2149  002C38  201C               	addwfc	crcBufS_put@_this+1,w,c
  2150  002C3A  6EDA               	movwf	fsr2h,c
  2151  002C3C  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  2152                           
  2153                           ;FastTransfer.c: 325: _this->head++;
  2154  002C40  EE20 F00F          	lfsr	2,15
  2155  002C44  501B               	movf	crcBufS_put@_this,w,c
  2156  002C46  26D9               	addwf	fsr2l,f,c
  2157  002C48  501C               	movf	crcBufS_put@_this+1,w,c
  2158  002C4A  22DA               	addwfc	fsr2h,f,c
  2159  002C4C  2ADE               	incf	postinc2,f,c
  2160  002C4E  0E00               	movlw	0
  2161  002C50  22DD               	addwfc	postdec2,f,c
  2162                           
  2163                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  2164  002C52  EE20 F00F          	lfsr	2,15
  2165  002C56  501B               	movf	crcBufS_put@_this,w,c
  2166  002C58  26D9               	addwf	fsr2l,f,c
  2167  002C5A  501C               	movf	crcBufS_put@_this+1,w,c
  2168  002C5C  22DA               	addwfc	fsr2h,f,c
  2169  002C5E  CFDE F020          	movff	postinc2,??_crcBufS_put
  2170  002C62  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2171  002C66  5020               	movf	??_crcBufS_put,w,c
  2172  002C68  241B               	addwf	crcBufS_put@_this,w,c
  2173  002C6A  6ED9               	movwf	fsr2l,c
  2174  002C6C  5021               	movf	??_crcBufS_put+1,w,c
  2175  002C6E  201C               	addwfc	crcBufS_put@_this+1,w,c
  2176  002C70  6EDA               	movwf	fsr2h,c
  2177  002C72  C01F  FFDF         	movff	crcBufS_put@status,indf2
  2178                           
  2179                           ;FastTransfer.c: 327: _this->head++;
  2180  002C76  EE20 F00F          	lfsr	2,15
  2181  002C7A  501B               	movf	crcBufS_put@_this,w,c
  2182  002C7C  26D9               	addwf	fsr2l,f,c
  2183  002C7E  501C               	movf	crcBufS_put@_this+1,w,c
  2184  002C80  22DA               	addwfc	fsr2h,f,c
  2185  002C82  2ADE               	incf	postinc2,f,c
  2186  002C84  0E00               	movlw	0
  2187  002C86  22DD               	addwfc	postdec2,f,c
  2188                           
  2189                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  2190  002C88  EE20 F00F          	lfsr	2,15
  2191  002C8C  501B               	movf	crcBufS_put@_this,w,c
  2192  002C8E  26D9               	addwf	fsr2l,f,c
  2193  002C90  501C               	movf	crcBufS_put@_this+1,w,c
  2194  002C92  22DA               	addwfc	fsr2h,f,c
  2195  002C94  0E01               	movlw	1
  2196  002C96  BEDB               	btfsc	plusw2,7,c
  2197  002C98  0012               	return	
  2198  002C9A  0E01               	movlw	1
  2199  002C9C  50DB               	movf	plusw2,w,c
  2200  002C9E  E104               	bnz	u2700
  2201  002CA0  0E0F               	movlw	15
  2202  002CA2  5CDE               	subwf	postinc2,w,c
  2203  002CA4  A0D8               	btfss	status,0,c
  2204  002CA6  0012               	return	
  2205  002CA8                     u2700:
  2206                           
  2207                           ;FastTransfer.c: 329: _this->head = 0;
  2208  002CA8  EE20 F00F          	lfsr	2,15
  2209  002CAC  501B               	movf	crcBufS_put@_this,w,c
  2210  002CAE  26D9               	addwf	fsr2l,f,c
  2211  002CB0  501C               	movf	crcBufS_put@_this+1,w,c
  2212  002CB2  22DA               	addwfc	fsr2h,f,c
  2213  002CB4  0E00               	movlw	0
  2214  002CB6  6EDE               	movwf	postinc2,c
  2215  002CB8  0E00               	movlw	0
  2216  002CBA  6EDD               	movwf	postdec2,c
  2217  002CBC  0012               	return	
  2218  002CBE  0012               	return		;funcret
  2219  002CC0                     __end_of_crcBufS_put:
  2220                           	opt stack 0
  2221                           tosu	equ	0xFFF
  2222                           tosh	equ	0xFFE
  2223                           tosl	equ	0xFFD
  2224                           pclath	equ	0xFFA
  2225                           tblptru	equ	0xFF8
  2226                           tblptrh	equ	0xFF7
  2227                           tblptrl	equ	0xFF6
  2228                           tablat	equ	0xFF5
  2229                           intcon	equ	0xFF2
  2230                           postinc0	equ	0xFEE
  2231                           wreg	equ	0xFE8
  2232                           postdec1	equ	0xFE5
  2233                           fsr1l	equ	0xFE1
  2234                           indf2	equ	0xFDF
  2235                           postinc2	equ	0xFDE
  2236                           postdec2	equ	0xFDD
  2237                           plusw2	equ	0xFDB
  2238                           fsr2h	equ	0xFDA
  2239                           fsr2l	equ	0xFD9
  2240                           status	equ	0xFD8
  2241                           
  2242 ;; *************** function _FastTransfer_buffer_flush *****************
  2243 ;; Defined at:
  2244 ;;		line 261 in file "FastTransfer.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  2247 ;;		 -> ring_buffer(206), 
  2248 ;;  clearBuffer     2   36[COMRAM] const int 
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;		None
  2251 ;; Return value:  Size  Location     Type
  2252 ;;		None               void
  2253 ;; Registers used:
  2254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2260 ;;      Params:         4       0       0       0       0       0       0
  2261 ;;      Locals:         0       0       0       0       0       0       0
  2262 ;;      Temps:          0       0       0       0       0       0       0
  2263 ;;      Totals:         4       0       0       0       0       0       0
  2264 ;;Total ram usage:        4 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:    5
  2267 ;; This function calls:
  2268 ;;		_memset
  2269 ;; This function is called by:
  2270 ;;		_sendData
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           	psect	text4
  2275  0033FE                     __ptext4:
  2276                           	opt stack 0
  2277  0033FE                     _FastTransfer_buffer_flush:
  2278                           	opt stack 23
  2279                           
  2280                           ;FastTransfer.c: 262: _this->count = 0;
  2281                           
  2282                           ;incstack = 0
  2283  0033FE  EE20 F0CC          	lfsr	2,204
  2284  003402  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2285  003404  26D9               	addwf	fsr2l,f,c
  2286  003406  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2287  003408  22DA               	addwfc	fsr2h,f,c
  2288  00340A  0E00               	movlw	0
  2289  00340C  6EDE               	movwf	postinc2,c
  2290  00340E  0E00               	movlw	0
  2291  003410  6EDD               	movwf	postdec2,c
  2292                           
  2293                           ;FastTransfer.c: 263: _this->head = 0;
  2294  003412  EE20 F0C8          	lfsr	2,200
  2295  003416  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2296  003418  26D9               	addwf	fsr2l,f,c
  2297  00341A  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2298  00341C  22DA               	addwfc	fsr2h,f,c
  2299  00341E  0E00               	movlw	0
  2300  003420  6EDE               	movwf	postinc2,c
  2301  003422  0E00               	movlw	0
  2302  003424  6EDD               	movwf	postdec2,c
  2303                           
  2304                           ;FastTransfer.c: 264: _this->tail = 0;
  2305  003426  EE20 F0CA          	lfsr	2,202
  2306  00342A  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2307  00342C  26D9               	addwf	fsr2l,f,c
  2308  00342E  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2309  003430  22DA               	addwfc	fsr2h,f,c
  2310  003432  0E00               	movlw	0
  2311  003434  6EDE               	movwf	postinc2,c
  2312  003436  0E00               	movlw	0
  2313  003438  6EDD               	movwf	postdec2,c
  2314                           
  2315                           ;FastTransfer.c: 265: if (clearBuffer) {
  2316  00343A  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  2317  00343C  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  2318  00343E  B4D8               	btfsc	status,2,c
  2319  003440  0012               	return	
  2320                           
  2321                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  2322  003442  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2323  003446  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2324  00344A  0E00               	movlw	0
  2325  00344C  6E1E               	movwf	memset@c+1,c
  2326  00344E  0E00               	movlw	0
  2327  003450  6E1D               	movwf	memset@c,c
  2328  003452  0E00               	movlw	0
  2329  003454  6E20               	movwf	memset@n+1,c
  2330  003456  0EC8               	movlw	200
  2331  003458  6E1F               	movwf	memset@n,c
  2332  00345A  EC30  F01C         	call	_memset	;wreg free
  2333  00345E  0012               	return	
  2334  003460  0012               	return		;funcret
  2335  003462                     __end_of_FastTransfer_buffer_flush:
  2336                           	opt stack 0
  2337                           tosu	equ	0xFFF
  2338                           tosh	equ	0xFFE
  2339                           tosl	equ	0xFFD
  2340                           pclath	equ	0xFFA
  2341                           tblptru	equ	0xFF8
  2342                           tblptrh	equ	0xFF7
  2343                           tblptrl	equ	0xFF6
  2344                           tablat	equ	0xFF5
  2345                           intcon	equ	0xFF2
  2346                           postinc0	equ	0xFEE
  2347                           wreg	equ	0xFE8
  2348                           postdec1	equ	0xFE5
  2349                           fsr1l	equ	0xFE1
  2350                           indf2	equ	0xFDF
  2351                           postinc2	equ	0xFDE
  2352                           postdec2	equ	0xFDD
  2353                           plusw2	equ	0xFDB
  2354                           fsr2h	equ	0xFDA
  2355                           fsr2l	equ	0xFD9
  2356                           status	equ	0xFD8
  2357                           
  2358 ;; *************** function _receiveData *****************
  2359 ;; Defined at:
  2360 ;;		line 82 in file "FastTransfer.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;		None
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  holder          3   10[BANK0 ] unsigned char [3]
  2365 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  2366 ;;  holder          3    7[BANK0 ] unsigned char [3]
  2367 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  2368 ;;  u               2   15[BANK0 ] int 
  2369 ;;  r               2   17[BANK0 ] int 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      unsigned char 
  2372 ;; Registers used:
  2373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2379 ;;      Params:         0       0       0       0       0       0       0
  2380 ;;      Locals:         0      12       0       0       0       0       0
  2381 ;;      Temps:          6       0       0       0       0       0       0
  2382 ;;      Totals:         6      12       0       0       0       0       0
  2383 ;;Total ram usage:       18 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    8
  2386 ;; This function calls:
  2387 ;;		Absolute function
  2388 ;;		_CRC8
  2389 ;;		_CRCcheck
  2390 ;;		_Receive_available
  2391 ;;		_Receive_get
  2392 ;;		_Receive_peek
  2393 ;;		_Send_put
  2394 ;; This function is called by:
  2395 ;;		_updateComms
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text5
  2400  00061E                     __ptext5:
  2401                           	opt stack 0
  2402  00061E                     _receiveData:
  2403                           	opt stack 21
  2404                           
  2405                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2406                           
  2407                           ;incstack = 0
  2408  00061E  5042               	movf	_rx_len,w,c
  2409  000620  A4D8               	btfss	status,2,c
  2410  000622  D0AA               	goto	l5005
  2411                           
  2412                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2413  000624  D801               	call	u5368
  2414  000626  D00A               	goto	u5369
  2415  000628                     u5368:
  2416  000628  0005               	push	
  2417  00062A  6EFA               	movwf	pclath,c
  2418  00062C  5031               	movf	_serial_available,w,c
  2419  00062E  6EFD               	movwf	tosl,c
  2420  000630  5032               	movf	_serial_available+1,w,c
  2421  000632  6EFE               	movwf	tosh,c
  2422  000634  50F8               	movf	tblptru,w,c
  2423  000636  6EFF               	movwf	tosu,c
  2424  000638  50FA               	movf	pclath,w,c
  2425  00063A  0012               	return		;indir
  2426  00063C                     u5369:
  2427  00063C  BE1E               	btfsc	?_Receive_available+1,7,c
  2428  00063E  D09C               	goto	l5005
  2429  000640  501E               	movf	?_Receive_available+1,w,c
  2430  000642  E120               	bnz	l4981
  2431  000644  0E05               	movlw	5
  2432  000646  5C1D               	subwf	?_Receive_available,w,c
  2433  000648  B0D8               	btfsc	status,0,c
  2434  00064A  D01C               	goto	l4981
  2435  00064C  D095               	goto	l5005
  2436                           
  2437                           ;FastTransfer.c: 89: while (serial_read() != 0x06) {
  2438  00064E  D01A               	goto	l4981
  2439  000650                     l4973:
  2440                           
  2441                           ;FastTransfer.c: 93: alignErrorCounter++;
  2442  000650  0100               	movlb	0	; () banked
  2443  000652  4B8E               	infsnz	_alignErrorCounter& (0+255),f,b
  2444  000654  2B8F               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2448  000656  D801               	call	u5388
  2449  000658  D00A               	goto	u5389
  2450  00065A                     u5388:
  2451  00065A  0005               	push	
  2452  00065C  6EFA               	movwf	pclath,c
  2453  00065E  5031               	movf	_serial_available,w,c
  2454  000660  6EFD               	movwf	tosl,c
  2455  000662  5032               	movf	_serial_available+1,w,c
  2456  000664  6EFE               	movwf	tosh,c
  2457  000666  50F8               	movf	tblptru,w,c
  2458  000668  6EFF               	movwf	tosu,c
  2459  00066A  50FA               	movf	pclath,w,c
  2460  00066C  0012               	return		;indir
  2461  00066E                     u5389:
  2462  00066E  BE1E               	btfsc	?_Receive_available+1,7,c
  2463  000670  D006               	goto	l4977
  2464  000672  501E               	movf	?_Receive_available+1,w,c
  2465  000674  E107               	bnz	l4981
  2466  000676  0E05               	movlw	5
  2467  000678  5C1D               	subwf	?_Receive_available,w,c
  2468  00067A  B0D8               	btfsc	status,0,c
  2469  00067C  D003               	goto	l4981
  2470  00067E                     l4977:
  2471                           
  2472                           ;FastTransfer.c: 95: return 0;
  2473  00067E  0E00               	movlw	0
  2474  000680  0012               	return	
  2475  000682  D000               	goto	l4981
  2476  000684                     l4981:
  2477  000684  D801               	call	u5408
  2478  000686  D00A               	goto	u5409
  2479  000688                     u5408:
  2480  000688  0005               	push	
  2481  00068A  6EFA               	movwf	pclath,c
  2482  00068C  5033               	movf	_serial_read,w,c
  2483  00068E  6EFD               	movwf	tosl,c
  2484  000690  5034               	movf	_serial_read+1,w,c
  2485  000692  6EFE               	movwf	tosh,c
  2486  000694  50F8               	movf	tblptru,w,c
  2487  000696  6EFF               	movwf	tosu,c
  2488  000698  50FA               	movf	pclath,w,c
  2489  00069A  0012               	return		;indir
  2490  00069C                     u5409:
  2491  00069C  0A06               	xorlw	6
  2492  00069E  A4D8               	btfss	status,2,c
  2493  0006A0  D7D7               	goto	l4973
  2494                           
  2495                           ;FastTransfer.c: 96: }
  2496                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2497  0006A2  D801               	call	u5428
  2498  0006A4  D00A               	goto	u5429
  2499  0006A6                     u5428:
  2500  0006A6  0005               	push	
  2501  0006A8  6EFA               	movwf	pclath,c
  2502  0006AA  5033               	movf	_serial_read,w,c
  2503  0006AC  6EFD               	movwf	tosl,c
  2504  0006AE  5034               	movf	_serial_read+1,w,c
  2505  0006B0  6EFE               	movwf	tosh,c
  2506  0006B2  50F8               	movf	tblptru,w,c
  2507  0006B4  6EFF               	movwf	tosu,c
  2508  0006B6  50FA               	movf	pclath,w,c
  2509  0006B8  0012               	return		;indir
  2510  0006BA                     u5429:
  2511  0006BA  0A85               	xorlw	133
  2512  0006BC  A4D8               	btfss	status,2,c
  2513  0006BE  D05C               	goto	l5005
  2514                           
  2515                           ;FastTransfer.c: 98: rx_address = serial_read();
  2516  0006C0  D801               	call	u5448
  2517  0006C2  D00A               	goto	u5449
  2518  0006C4                     u5448:
  2519  0006C4  0005               	push	
  2520  0006C6  6EFA               	movwf	pclath,c
  2521  0006C8  5033               	movf	_serial_read,w,c
  2522  0006CA  6EFD               	movwf	tosl,c
  2523  0006CC  5034               	movf	_serial_read+1,w,c
  2524  0006CE  6EFE               	movwf	tosh,c
  2525  0006D0  50F8               	movf	tblptru,w,c
  2526  0006D2  6EFF               	movwf	tosu,c
  2527  0006D4  50FA               	movf	pclath,w,c
  2528  0006D6  0012               	return		;indir
  2529  0006D8                     u5449:
  2530  0006D8  6E40               	movwf	_rx_address,c
  2531                           
  2532                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2533  0006DA  D801               	call	u5458
  2534  0006DC  D00A               	goto	u5459
  2535  0006DE                     u5458:
  2536  0006DE  0005               	push	
  2537  0006E0  6EFA               	movwf	pclath,c
  2538  0006E2  5033               	movf	_serial_read,w,c
  2539  0006E4  6EFD               	movwf	tosl,c
  2540  0006E6  5034               	movf	_serial_read+1,w,c
  2541  0006E8  6EFE               	movwf	tosh,c
  2542  0006EA  50F8               	movf	tblptru,w,c
  2543  0006EC  6EFF               	movwf	tosu,c
  2544  0006EE  50FA               	movf	pclath,w,c
  2545  0006F0  0012               	return		;indir
  2546  0006F2                     u5459:
  2547  0006F2  6E3F               	movwf	_returnAddress,c
  2548                           
  2549                           ;FastTransfer.c: 100: rx_len = serial_read();
  2550  0006F4  D801               	call	u5468
  2551  0006F6  D00A               	goto	u5469
  2552  0006F8                     u5468:
  2553  0006F8  0005               	push	
  2554  0006FA  6EFA               	movwf	pclath,c
  2555  0006FC  5033               	movf	_serial_read,w,c
  2556  0006FE  6EFD               	movwf	tosl,c
  2557  000700  5034               	movf	_serial_read+1,w,c
  2558  000702  6EFE               	movwf	tosh,c
  2559  000704  50F8               	movf	tblptru,w,c
  2560  000706  6EFF               	movwf	tosu,c
  2561  000708  50FA               	movf	pclath,w,c
  2562  00070A  0012               	return		;indir
  2563  00070C                     u5469:
  2564  00070C  6E42               	movwf	_rx_len,c
  2565                           
  2566                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2567  00070E  503E               	movf	_moduleAddress,w,c
  2568  000710  1840               	xorwf	_rx_address,w,c
  2569  000712  B4D8               	btfsc	status,2,c
  2570  000714  D031               	goto	l5005
  2571                           
  2572                           ;FastTransfer.c: 103: addressErrorCounter++;
  2573  000716  0100               	movlb	0	; () banked
  2574  000718  4B8C               	infsnz	_addressErrorCounter& (0+255),f,b
  2575  00071A  2B8D               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;FastTransfer.c: 106: int u;
  2579                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2580  00071C  0E00               	movlw	0
  2581  00071E  0100               	movlb	0	; () banked
  2582  000720  6FD1               	movwf	(receiveData@u+1)& (0+255),b
  2583  000722  0E00               	movlw	0
  2584  000724  6FD0               	movwf	receiveData@u& (0+255),b
  2585  000726  D010               	goto	l4997
  2586  000728                     l4993:
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;FastTransfer.c: 108: serial_read();
  2590  000728  D801               	call	u5488
  2591  00072A  D00A               	goto	l4995
  2592  00072C                     u5488:
  2593  00072C  0005               	push	
  2594  00072E  6EFA               	movwf	pclath,c
  2595  000730  5033               	movf	_serial_read,w,c
  2596  000732  6EFD               	movwf	tosl,c
  2597  000734  5034               	movf	_serial_read+1,w,c
  2598  000736  6EFE               	movwf	tosh,c
  2599  000738  50F8               	movf	tblptru,w,c
  2600  00073A  6EFF               	movwf	tosu,c
  2601  00073C  50FA               	movf	pclath,w,c
  2602  00073E  0012               	return		;indir
  2603  000740                     l4995:
  2604  000740  0100               	movlb	0	; () banked
  2605  000742  4BD0               	infsnz	receiveData@u& (0+255),f,b
  2606  000744  2BD1               	incf	(receiveData@u+1)& (0+255),f,b
  2607  000746  D000               	goto	l4997
  2608  000748                     l4997:
  2609                           
  2610                           ; BSR set to: 0
  2611  000748  5042               	movf	_rx_len,w,c
  2612  00074A  6E27               	movwf	??_receiveData& (0+255),c
  2613  00074C  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2614  00074E  0E01               	movlw	1
  2615  000750  2627               	addwf	??_receiveData,f,c
  2616  000752  0E00               	movlw	0
  2617  000754  2228               	addwfc	??_receiveData+1,f,c
  2618  000756  0100               	movlb	0	; () banked
  2619  000758  51D0               	movf	receiveData@u& (0+255),w,b
  2620  00075A  5C27               	subwf	??_receiveData,w,c
  2621  00075C  5028               	movf	??_receiveData+1,w,c
  2622  00075E  0A80               	xorlw	128
  2623  000760  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2624  000762  0100               	movlb	0	; () banked
  2625  000764  51D1               	movf	(receiveData@u+1)& (0+255),w,b
  2626  000766  0A80               	xorlw	128
  2627  000768  5829               	subwfb	(??_receiveData+2)& (0+255),w,c
  2628  00076A  B0D8               	btfsc	status,0,c
  2629  00076C  D7DD               	goto	l4993
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;FastTransfer.c: 109: }
  2633                           ;FastTransfer.c: 110: rx_len = 0;
  2634                           
  2635                           ; BSR set to: 0
  2636  00076E  0E00               	movlw	0
  2637  000770  6E42               	movwf	_rx_len,c
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;FastTransfer.c: 111: return 0;
  2641  000772  0E00               	movlw	0
  2642                           
  2643                           ; BSR set to: 0
  2644  000774  0012               	return	
  2645                           
  2646                           ; BSR set to: 0
  2647                           
  2648                           ; BSR set to: 0
  2649                           
  2650                           ; BSR set to: 0
  2651  000776  D000               	goto	l5005
  2652  000778                     l5005:
  2653                           
  2654                           ;FastTransfer.c: 112: }
  2655                           ;FastTransfer.c: 114: }
  2656                           ;FastTransfer.c: 115: }
  2657                           ;FastTransfer.c: 116: }
  2658                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2659  000778  5042               	movf	_rx_len,w,c
  2660  00077A  B4D8               	btfsc	status,2,c
  2661  00077C  D269               	goto	l5129
  2662                           
  2663                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2664  00077E  5041               	movf	_rx_array_inx,w,c
  2665  000780  B4D8               	btfsc	status,2,c
  2666  000782  D002               	goto	l5011
  2667  000784  D048               	goto	l5029
  2668                           
  2669                           ;FastTransfer.c: 123: while (!(serial_available() >= 1));
  2670  000786  D000               	goto	l5011
  2671  000788                     l5011:
  2672  000788  D801               	call	u5528
  2673  00078A  D00A               	goto	u5529
  2674  00078C                     u5528:
  2675  00078C  0005               	push	
  2676  00078E  6EFA               	movwf	pclath,c
  2677  000790  5031               	movf	_serial_available,w,c
  2678  000792  6EFD               	movwf	tosl,c
  2679  000794  5032               	movf	_serial_available+1,w,c
  2680  000796  6EFE               	movwf	tosh,c
  2681  000798  50F8               	movf	tblptru,w,c
  2682  00079A  6EFF               	movwf	tosu,c
  2683  00079C  50FA               	movf	pclath,w,c
  2684  00079E  0012               	return		;indir
  2685  0007A0                     u5529:
  2686  0007A0  BE1E               	btfsc	?_Receive_available+1,7,c
  2687  0007A2  D7F2               	goto	l5011
  2688  0007A4  501E               	movf	?_Receive_available+1,w,c
  2689  0007A6  E105               	bnz	l5013
  2690  0007A8  041D               	decf	?_Receive_available,w,c
  2691  0007AA  B0D8               	btfsc	status,0,c
  2692  0007AC  D002               	goto	l5013
  2693  0007AE  D7EC               	goto	l5011
  2694  0007B0  D000               	goto	l5013
  2695  0007B2                     l5013:
  2696                           
  2697                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2698  0007B2  D801               	call	u5548
  2699  0007B4  D00B               	goto	u5549
  2700  0007B6                     u5548:
  2701  0007B6  0005               	push	
  2702  0007B8  0100               	movlb	0	; () banked
  2703  0007BA  6EFA               	movwf	pclath,c
  2704  0007BC  519A               	movf	_serial_peek& (0+255),w,b
  2705  0007BE  6EFD               	movwf	tosl,c
  2706  0007C0  519B               	movf	(_serial_peek+1)& (0+255),w,b
  2707  0007C2  6EFE               	movwf	tosh,c
  2708  0007C4  50F8               	movf	tblptru,w,c
  2709  0007C6  6EFF               	movwf	tosu,c
  2710  0007C8  50FA               	movf	pclath,w,c
  2711  0007CA  0012               	return		;indir
  2712  0007CC                     u5549:
  2713  0007CC  0AFF               	xorlw	255
  2714  0007CE  A4D8               	btfss	status,2,c
  2715  0007D0  D022               	goto	l5029
  2716                           
  2717                           ;FastTransfer.c: 125: CRCcheck();
  2718  0007D2  EC5E  F00D         	call	_CRCcheck	;wreg free
  2719                           
  2720                           ;FastTransfer.c: 126: rx_len = 0;
  2721  0007D6  0E00               	movlw	0
  2722  0007D8  6E42               	movwf	_rx_len,c
  2723                           
  2724                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2725  0007DA  0E00               	movlw	0
  2726  0007DC  6E41               	movwf	_rx_array_inx,c
  2727                           
  2728                           ;FastTransfer.c: 128: return 0;
  2729  0007DE  0E00               	movlw	0
  2730  0007E0  0012               	return	
  2731                           
  2732                           ;FastTransfer.c: 129: }
  2733                           ;FastTransfer.c: 130: }
  2734                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2735  0007E2  D019               	goto	l5029
  2736  0007E4                     l5025:
  2737                           
  2738                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2739  0007E4  D801               	call	u5568
  2740  0007E6  D00A               	goto	u5569
  2741  0007E8                     u5568:
  2742  0007E8  0005               	push	
  2743  0007EA  6EFA               	movwf	pclath,c
  2744  0007EC  5033               	movf	_serial_read,w,c
  2745  0007EE  6EFD               	movwf	tosl,c
  2746  0007F0  5034               	movf	_serial_read+1,w,c
  2747  0007F2  6EFE               	movwf	tosh,c
  2748  0007F4  50F8               	movf	tblptru,w,c
  2749  0007F6  6EFF               	movwf	tosu,c
  2750  0007F8  50FA               	movf	pclath,w,c
  2751  0007FA  0012               	return		;indir
  2752  0007FC                     u5569:
  2753  0007FC  6E27               	movwf	??_receiveData& (0+255),c
  2754  0007FE  5041               	movf	_rx_array_inx,w,c
  2755  000800  0D01               	mullw	1
  2756  000802  0E00               	movlw	low _rx_buffer
  2757  000804  24F3               	addwf	prodl,w,c
  2758  000806  6ED9               	movwf	fsr2l,c
  2759  000808  0E03               	movlw	high _rx_buffer
  2760  00080A  20F4               	addwfc	prodh,w,c
  2761  00080C  6EDA               	movwf	fsr2h,c
  2762  00080E  C027  FFDF         	movff	??_receiveData,indf2
  2763  000812  2A41               	incf	_rx_array_inx,f,c
  2764  000814  D000               	goto	l5029
  2765  000816                     l5029:
  2766  000816  D801               	call	u5578
  2767  000818  D00A               	goto	u5579
  2768  00081A                     u5578:
  2769  00081A  0005               	push	
  2770  00081C  6EFA               	movwf	pclath,c
  2771  00081E  5031               	movf	_serial_available,w,c
  2772  000820  6EFD               	movwf	tosl,c
  2773  000822  5032               	movf	_serial_available+1,w,c
  2774  000824  6EFE               	movwf	tosh,c
  2775  000826  50F8               	movf	tblptru,w,c
  2776  000828  6EFF               	movwf	tosu,c
  2777  00082A  50FA               	movf	pclath,w,c
  2778  00082C  0012               	return		;indir
  2779  00082E                     u5579:
  2780  00082E  501D               	movf	?_Receive_available,w,c
  2781  000830  101E               	iorwf	?_Receive_available+1,w,c
  2782  000832  B4D8               	btfsc	status,2,c
  2783  000834  D006               	goto	l5033
  2784  000836  5041               	movf	_rx_array_inx,w,c
  2785  000838  5C42               	subwf	_rx_len,w,c
  2786  00083A  A0D8               	btfss	status,0,c
  2787  00083C  D002               	goto	l5033
  2788  00083E  D7D2               	goto	l5025
  2789  000840  D000               	goto	l5033
  2790  000842                     l5033:
  2791                           
  2792                           ;FastTransfer.c: 135: }
  2793                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2794  000842  5042               	movf	_rx_len,w,c
  2795  000844  6E27               	movwf	??_receiveData& (0+255),c
  2796  000846  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2797  000848  0EFF               	movlw	255
  2798  00084A  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2799  00084C  0EFF               	movlw	255
  2800  00084E  6E2A               	movwf	(??_receiveData+3)& (0+255),c
  2801  000850  5041               	movf	_rx_array_inx,w,c
  2802  000852  6E2B               	movwf	(??_receiveData+4)& (0+255),c
  2803  000854  6A2C               	clrf	(??_receiveData+5)& (0+255),c
  2804  000856  5029               	movf	??_receiveData+2,w,c
  2805  000858  262B               	addwf	??_receiveData+4,f,c
  2806  00085A  502A               	movf	??_receiveData+3,w,c
  2807  00085C  222C               	addwfc	??_receiveData+5,f,c
  2808  00085E  5027               	movf	??_receiveData,w,c
  2809  000860  182B               	xorwf	??_receiveData+4,w,c
  2810  000862  E103               	bnz	u5601
  2811  000864  5028               	movf	??_receiveData+1,w,c
  2812  000866  182C               	xorwf	??_receiveData+5,w,c
  2813  000868  A4D8               	btfss	status,2,c
  2814  00086A                     u5601:
  2815  00086A  D1F2               	goto	l5129
  2816                           
  2817                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2818  00086C  0E00               	movlw	low _rx_buffer
  2819  00086E  6E1B               	movwf	CRC8@data,c
  2820  000870  0E03               	movlw	high _rx_buffer
  2821  000872  6E1C               	movwf	CRC8@data+1,c
  2822  000874  C042  F01D         	movff	_rx_len,CRC8@len
  2823  000878  EC60  F01A         	call	_CRC8	;wreg free
  2824  00087C  6E3C               	movwf	_calc_CS,c
  2825                           
  2826                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2827  00087E  0EFF               	movlw	255
  2828  000880  6E27               	movwf	??_receiveData& (0+255),c
  2829  000882  0EFF               	movlw	255
  2830  000884  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2831  000886  5041               	movf	_rx_array_inx,w,c
  2832  000888  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2833  00088A  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2834  00088C  5027               	movf	??_receiveData,w,c
  2835  00088E  2629               	addwf	??_receiveData+2,f,c
  2836  000890  5028               	movf	??_receiveData+1,w,c
  2837  000892  222A               	addwfc	??_receiveData+3,f,c
  2838  000894  0E00               	movlw	low _rx_buffer
  2839  000896  2429               	addwf	??_receiveData+2,w,c
  2840  000898  6ED9               	movwf	fsr2l,c
  2841  00089A  0E03               	movlw	high _rx_buffer
  2842  00089C  202A               	addwfc	??_receiveData+3,w,c
  2843  00089E  6EDA               	movwf	fsr2h,c
  2844  0008A0  503C               	movf	_calc_CS,w,c
  2845  0008A2  18DE               	xorwf	postinc2,w,c
  2846  0008A4  A4D8               	btfss	status,2,c
  2847  0008A6  D11D               	goto	l5091
  2848                           
  2849                           ;FastTransfer.c: 147: int r;
  2850                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2851  0008A8  0E00               	movlw	0
  2852  0008AA  0100               	movlb	0	; () banked
  2853  0008AC  6FD3               	movwf	(receiveData@r+1)& (0+255),b
  2854  0008AE  0E00               	movlw	0
  2855  0008B0  6FD2               	movwf	receiveData@r& (0+255),b
  2856  0008B2  D054               	goto	l5051
  2857  0008B4                     l5041:
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2861  0008B4  0E00               	movlw	low _rx_buffer
  2862  0008B6  0100               	movlb	0	; () banked
  2863  0008B8  25D2               	addwf	receiveData@r& (0+255),w,b
  2864  0008BA  6ED9               	movwf	fsr2l,c
  2865  0008BC  0E03               	movlw	high _rx_buffer
  2866  0008BE  0100               	movlb	0	; () banked
  2867  0008C0  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2868  0008C2  6EDA               	movwf	fsr2h,c
  2869  0008C4  503D               	movf	_maxDataAddress,w,c
  2870  0008C6  5CDE               	subwf	postinc2,w,c
  2871  0008C8  B0D8               	btfsc	status,0,c
  2872  0008CA  D039               	goto	l5047
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2876  0008CC  0E01               	movlw	1
  2877  0008CE  0100               	movlb	0	; () banked
  2878  0008D0  25D2               	addwf	receiveData@r& (0+255),w,b
  2879  0008D2  6E27               	movwf	??_receiveData& (0+255),c
  2880  0008D4  0E00               	movlw	0
  2881  0008D6  0100               	movlb	0	; () banked
  2882  0008D8  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2883  0008DA  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2884  0008DC  0E00               	movlw	low _rx_buffer
  2885  0008DE  2427               	addwf	??_receiveData,w,c
  2886  0008E0  6ED9               	movwf	fsr2l,c
  2887  0008E2  0E03               	movlw	high _rx_buffer
  2888  0008E4  2028               	addwfc	??_receiveData+1,w,c
  2889  0008E6  6EDA               	movwf	fsr2h,c
  2890  0008E8  50DF               	movf	indf2,w,c
  2891  0008EA  6E43               	movwf	_group,c
  2892                           
  2893                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2894  0008EC  0E02               	movlw	2
  2895  0008EE  0100               	movlb	0	; () banked
  2896  0008F0  25D2               	addwf	receiveData@r& (0+255),w,b
  2897  0008F2  6E27               	movwf	??_receiveData& (0+255),c
  2898  0008F4  0E00               	movlw	0
  2899  0008F6  0100               	movlb	0	; () banked
  2900  0008F8  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2901  0008FA  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2902  0008FC  0E00               	movlw	low _rx_buffer
  2903  0008FE  2427               	addwf	??_receiveData,w,c
  2904  000900  6ED9               	movwf	fsr2l,c
  2905  000902  0E03               	movlw	high _rx_buffer
  2906  000904  2028               	addwfc	??_receiveData+1,w,c
  2907  000906  6EDA               	movwf	fsr2h,c
  2908  000908  50DF               	movf	indf2,w,c
  2909  00090A  6E44               	movwf	_group+1,c
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2913  00090C  0E00               	movlw	low _rx_buffer
  2914  00090E  0100               	movlb	0	; () banked
  2915  000910  25D2               	addwf	receiveData@r& (0+255),w,b
  2916  000912  6ED9               	movwf	fsr2l,c
  2917  000914  0E03               	movlw	high _rx_buffer
  2918  000916  0100               	movlb	0	; () banked
  2919  000918  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2920  00091A  6EDA               	movwf	fsr2h,c
  2921  00091C  50DF               	movf	indf2,w,c
  2922  00091E  6E27               	movwf	??_receiveData& (0+255),c
  2923  000920  5027               	movf	??_receiveData,w,c
  2924  000922  0D02               	mullw	2
  2925  000924  50F3               	movf	prodl,w,c
  2926  000926  0100               	movlb	0	; () banked
  2927  000928  2596               	addwf	_receiveArrayAddress& (0+255),w,b
  2928  00092A  6ED9               	movwf	fsr2l,c
  2929  00092C  50F4               	movf	prodh,w,c
  2930  00092E  0100               	movlb	0	; () banked
  2931  000930  2197               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  2932  000932  6EDA               	movwf	fsr2h,c
  2933  000934  C043  FFDE         	movff	_group,postinc2
  2934  000938  C044  FFDD         	movff	_group+1,postdec2
  2935                           
  2936                           ;FastTransfer.c: 153: } else {
  2937  00093C  D004               	goto	l5049
  2938  00093E                     l5047:
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2942  00093E  0100               	movlb	0	; () banked
  2943  000940  4B92               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2944  000942  2B93               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2945  000944  D000               	goto	l5049
  2946  000946                     l5049:
  2947                           
  2948                           ; BSR set to: 0
  2949  000946  0E03               	movlw	3
  2950  000948  0100               	movlb	0	; () banked
  2951  00094A  25D2               	addwf	receiveData@r& (0+255),w,b
  2952  00094C  0100               	movlb	0	; () banked
  2953  00094E  6FD2               	movwf	receiveData@r& (0+255),b
  2954  000950  0E00               	movlw	0
  2955  000952  0100               	movlb	0	; () banked
  2956  000954  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2957  000956  0100               	movlb	0	; () banked
  2958  000958  6FD3               	movwf	(receiveData@r+1)& (0+255),b
  2959  00095A  D000               	goto	l5051
  2960  00095C                     l5051:
  2961                           
  2962                           ; BSR set to: 0
  2963  00095C  5042               	movf	_rx_len,w,c
  2964  00095E  6E27               	movwf	??_receiveData& (0+255),c
  2965  000960  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2966  000962  5027               	movf	??_receiveData,w,c
  2967  000964  0100               	movlb	0	; () banked
  2968  000966  5DD2               	subwf	receiveData@r& (0+255),w,b
  2969  000968  0100               	movlb	0	; () banked
  2970  00096A  51D3               	movf	(receiveData@r+1)& (0+255),w,b
  2971  00096C  0A80               	xorlw	128
  2972  00096E  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2973  000970  5028               	movf	??_receiveData+1,w,c
  2974  000972  0A80               	xorlw	128
  2975  000974  5829               	subwfb	(??_receiveData+2)& (0+255),w,c
  2976  000976  A0D8               	btfss	status,0,c
  2977  000978  D79D               	goto	l5041
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;FastTransfer.c: 155: }
  2981                           ;FastTransfer.c: 156: }
  2982                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2983                           
  2984                           ; BSR set to: 0
  2985  00097A  5039               	movf	_AKNAKsend,w,c
  2986  00097C  B4D8               	btfsc	status,2,c
  2987  00097E  D0AA               	goto	l5081
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;FastTransfer.c: 160: unsigned char holder[3];
  2991                           ;FastTransfer.c: 161: holder[0] = 255;
  2992  000980  0100               	movlb	0	; () banked
  2993  000982  69C8               	setf	receiveData@holder& (0+255),b
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;FastTransfer.c: 162: holder[1] = 1;
  2997  000984  0E01               	movlw	1
  2998  000986  0100               	movlb	0	; () banked
  2999  000988  6FC9               	movwf	(receiveData@holder+1)& (0+255),b
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  3003  00098A  0EFF               	movlw	255
  3004  00098C  6E27               	movwf	??_receiveData& (0+255),c
  3005  00098E  0EFF               	movlw	255
  3006  000990  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3007  000992  5041               	movf	_rx_array_inx,w,c
  3008  000994  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3009  000996  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3010  000998  5027               	movf	??_receiveData,w,c
  3011  00099A  2629               	addwf	??_receiveData+2,f,c
  3012  00099C  5028               	movf	??_receiveData+1,w,c
  3013  00099E  222A               	addwfc	??_receiveData+3,f,c
  3014  0009A0  0E00               	movlw	low _rx_buffer
  3015  0009A2  2429               	addwf	??_receiveData+2,w,c
  3016  0009A4  6ED9               	movwf	fsr2l,c
  3017  0009A6  0E03               	movlw	high _rx_buffer
  3018  0009A8  202A               	addwfc	??_receiveData+3,w,c
  3019  0009AA  6EDA               	movwf	fsr2h,c
  3020  0009AC  50DF               	movf	indf2,w,c
  3021  0009AE  0100               	movlb	0	; () banked
  3022  0009B0  6FCA               	movwf	(receiveData@holder+2)& (0+255),b
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  3026  0009B2  0EC8               	movlw	low receiveData@holder
  3027  0009B4  6E1B               	movwf	CRC8@data,c
  3028  0009B6  0E00               	movlw	high receiveData@holder
  3029  0009B8  6E1C               	movwf	CRC8@data+1,c
  3030  0009BA  0E03               	movlw	3
  3031  0009BC  6E1D               	movwf	CRC8@len,c
  3032  0009BE  EC60  F01A         	call	_CRC8	;wreg free
  3033  0009C2  0100               	movlb	0	; () banked
  3034  0009C4  6FCE               	movwf	receiveData@crcHolder& (0+255),b
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;FastTransfer.c: 165: serial_write(0x06);
  3038  0009C6  D801               	call	u5658
  3039  0009C8  D00B               	goto	l5065
  3040  0009CA                     u5658:
  3041  0009CA  0005               	push	
  3042  0009CC  6EFA               	movwf	pclath,c
  3043  0009CE  5035               	movf	_serial_write,w,c
  3044  0009D0  6EFD               	movwf	tosl,c
  3045  0009D2  5036               	movf	_serial_write+1,w,c
  3046  0009D4  6EFE               	movwf	tosh,c
  3047  0009D6  50F8               	movf	tblptru,w,c
  3048  0009D8  6EFF               	movwf	tosu,c
  3049  0009DA  50FA               	movf	pclath,w,c
  3050  0009DC  0E06               	movlw	6
  3051  0009DE  0012               	return		;indir
  3052  0009E0                     l5065:
  3053                           
  3054                           ;FastTransfer.c: 166: serial_write(0x85);
  3055  0009E0  D801               	call	u5668
  3056  0009E2  D00B               	goto	l5067
  3057  0009E4                     u5668:
  3058  0009E4  0005               	push	
  3059  0009E6  6EFA               	movwf	pclath,c
  3060  0009E8  5035               	movf	_serial_write,w,c
  3061  0009EA  6EFD               	movwf	tosl,c
  3062  0009EC  5036               	movf	_serial_write+1,w,c
  3063  0009EE  6EFE               	movwf	tosh,c
  3064  0009F0  50F8               	movf	tblptru,w,c
  3065  0009F2  6EFF               	movwf	tosu,c
  3066  0009F4  50FA               	movf	pclath,w,c
  3067  0009F6  0E85               	movlw	133
  3068  0009F8  0012               	return		;indir
  3069  0009FA                     l5067:
  3070                           
  3071                           ;FastTransfer.c: 167: serial_write(returnAddress);
  3072  0009FA  D801               	call	u5678
  3073  0009FC  D00B               	goto	l5069
  3074  0009FE                     u5678:
  3075  0009FE  0005               	push	
  3076  000A00  6EFA               	movwf	pclath,c
  3077  000A02  5035               	movf	_serial_write,w,c
  3078  000A04  6EFD               	movwf	tosl,c
  3079  000A06  5036               	movf	_serial_write+1,w,c
  3080  000A08  6EFE               	movwf	tosh,c
  3081  000A0A  50F8               	movf	tblptru,w,c
  3082  000A0C  6EFF               	movwf	tosu,c
  3083  000A0E  50FA               	movf	pclath,w,c
  3084  000A10  503F               	movf	_returnAddress,w,c
  3085  000A12  0012               	return		;indir
  3086  000A14                     l5069:
  3087                           
  3088                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  3089  000A14  D801               	call	u5688
  3090  000A16  D00B               	goto	l5071
  3091  000A18                     u5688:
  3092  000A18  0005               	push	
  3093  000A1A  6EFA               	movwf	pclath,c
  3094  000A1C  5035               	movf	_serial_write,w,c
  3095  000A1E  6EFD               	movwf	tosl,c
  3096  000A20  5036               	movf	_serial_write+1,w,c
  3097  000A22  6EFE               	movwf	tosh,c
  3098  000A24  50F8               	movf	tblptru,w,c
  3099  000A26  6EFF               	movwf	tosu,c
  3100  000A28  50FA               	movf	pclath,w,c
  3101  000A2A  503E               	movf	_moduleAddress,w,c
  3102  000A2C  0012               	return		;indir
  3103  000A2E                     l5071:
  3104                           
  3105                           ;FastTransfer.c: 169: serial_write(3);
  3106  000A2E  D801               	call	u5698
  3107  000A30  D00B               	goto	l5073
  3108  000A32                     u5698:
  3109  000A32  0005               	push	
  3110  000A34  6EFA               	movwf	pclath,c
  3111  000A36  5035               	movf	_serial_write,w,c
  3112  000A38  6EFD               	movwf	tosl,c
  3113  000A3A  5036               	movf	_serial_write+1,w,c
  3114  000A3C  6EFE               	movwf	tosh,c
  3115  000A3E  50F8               	movf	tblptru,w,c
  3116  000A40  6EFF               	movwf	tosu,c
  3117  000A42  50FA               	movf	pclath,w,c
  3118  000A44  0E03               	movlw	3
  3119  000A46  0012               	return		;indir
  3120  000A48                     l5073:
  3121                           
  3122                           ;FastTransfer.c: 170: serial_write(255);
  3123  000A48  D801               	call	u5708
  3124  000A4A  D00B               	goto	l5075
  3125  000A4C                     u5708:
  3126  000A4C  0005               	push	
  3127  000A4E  6EFA               	movwf	pclath,c
  3128  000A50  5035               	movf	_serial_write,w,c
  3129  000A52  6EFD               	movwf	tosl,c
  3130  000A54  5036               	movf	_serial_write+1,w,c
  3131  000A56  6EFE               	movwf	tosh,c
  3132  000A58  50F8               	movf	tblptru,w,c
  3133  000A5A  6EFF               	movwf	tosu,c
  3134  000A5C  50FA               	movf	pclath,w,c
  3135  000A5E  0EFF               	movlw	255
  3136  000A60  0012               	return		;indir
  3137  000A62                     l5075:
  3138                           
  3139                           ;FastTransfer.c: 171: serial_write(1);
  3140  000A62  D801               	call	u5718
  3141  000A64  D00B               	goto	l5077
  3142  000A66                     u5718:
  3143  000A66  0005               	push	
  3144  000A68  6EFA               	movwf	pclath,c
  3145  000A6A  5035               	movf	_serial_write,w,c
  3146  000A6C  6EFD               	movwf	tosl,c
  3147  000A6E  5036               	movf	_serial_write+1,w,c
  3148  000A70  6EFE               	movwf	tosh,c
  3149  000A72  50F8               	movf	tblptru,w,c
  3150  000A74  6EFF               	movwf	tosu,c
  3151  000A76  50FA               	movf	pclath,w,c
  3152  000A78  0E01               	movlw	1
  3153  000A7A  0012               	return		;indir
  3154  000A7C                     l5077:
  3155                           
  3156                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  3157  000A7C  D801               	call	u5728
  3158  000A7E  D01C               	goto	l5079
  3159  000A80                     u5728:
  3160  000A80  0005               	push	
  3161  000A82  6EFA               	movwf	pclath,c
  3162  000A84  5035               	movf	_serial_write,w,c
  3163  000A86  6EFD               	movwf	tosl,c
  3164  000A88  5036               	movf	_serial_write+1,w,c
  3165  000A8A  6EFE               	movwf	tosh,c
  3166  000A8C  50F8               	movf	tblptru,w,c
  3167  000A8E  6EFF               	movwf	tosu,c
  3168  000A90  50FA               	movf	pclath,w,c
  3169  000A92  0EFF               	movlw	255
  3170  000A94  6E27               	movwf	??_receiveData& (0+255),c
  3171  000A96  0EFF               	movlw	255
  3172  000A98  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3173  000A9A  5041               	movf	_rx_array_inx,w,c
  3174  000A9C  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3175  000A9E  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3176  000AA0  5027               	movf	??_receiveData,w,c
  3177  000AA2  2629               	addwf	??_receiveData+2,f,c
  3178  000AA4  5028               	movf	??_receiveData+1,w,c
  3179  000AA6  222A               	addwfc	??_receiveData+3,f,c
  3180  000AA8  0E00               	movlw	low _rx_buffer
  3181  000AAA  2429               	addwf	??_receiveData+2,w,c
  3182  000AAC  6ED9               	movwf	fsr2l,c
  3183  000AAE  0E03               	movlw	high _rx_buffer
  3184  000AB0  202A               	addwfc	??_receiveData+3,w,c
  3185  000AB2  6EDA               	movwf	fsr2h,c
  3186  000AB4  50DF               	movf	indf2,w,c
  3187  000AB6  0012               	return		;indir
  3188  000AB8                     l5079:
  3189                           
  3190                           ;FastTransfer.c: 173: serial_write(crcHolder);
  3191  000AB8  D801               	call	u5738
  3192  000ABA  D00C               	goto	l5081
  3193  000ABC                     u5738:
  3194  000ABC  0005               	push	
  3195  000ABE  6EFA               	movwf	pclath,c
  3196  000AC0  5035               	movf	_serial_write,w,c
  3197  000AC2  6EFD               	movwf	tosl,c
  3198  000AC4  5036               	movf	_serial_write+1,w,c
  3199  000AC6  6EFE               	movwf	tosh,c
  3200  000AC8  50F8               	movf	tblptru,w,c
  3201  000ACA  6EFF               	movwf	tosu,c
  3202  000ACC  50FA               	movf	pclath,w,c
  3203  000ACE  0100               	movlb	0	; () banked
  3204  000AD0  51CE               	movf	receiveData@crcHolder& (0+255),w,b
  3205  000AD2  0012               	return		;indir
  3206  000AD4                     l5081:
  3207                           
  3208                           ;FastTransfer.c: 174: }
  3209                           ;FastTransfer.c: 178: rx_len = 0;
  3210  000AD4  0E00               	movlw	0
  3211  000AD6  6E42               	movwf	_rx_len,c
  3212                           
  3213                           ;FastTransfer.c: 179: rx_array_inx = 0;
  3214  000AD8  0E00               	movlw	0
  3215  000ADA  6E41               	movwf	_rx_array_inx,c
  3216                           
  3217                           ;FastTransfer.c: 180: return 1;
  3218  000ADC  0E01               	movlw	1
  3219  000ADE  0012               	return	
  3220                           
  3221                           ;FastTransfer.c: 181: } else {
  3222  000AE0  D0B7               	goto	l5129
  3223  000AE2                     l5091:
  3224                           
  3225                           ;FastTransfer.c: 182: crcErrorCounter++;
  3226  000AE2  0100               	movlb	0	; () banked
  3227  000AE4  4B90               	infsnz	_crcErrorCounter& (0+255),f,b
  3228  000AE6  2B91               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;FastTransfer.c: 184: if (AKNAKsend) {
  3232  000AE8  5039               	movf	_AKNAKsend,w,c
  3233  000AEA  B4D8               	btfsc	status,2,c
  3234  000AEC  D0AA               	goto	l5121
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;FastTransfer.c: 185: unsigned char holder[3];
  3238                           ;FastTransfer.c: 186: holder[0] = 255;
  3239  000AEE  0100               	movlb	0	; () banked
  3240  000AF0  69CB               	setf	receiveData@holder_1131& (0+255),b
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;FastTransfer.c: 187: holder[1] = 2;
  3244  000AF2  0E02               	movlw	2
  3245  000AF4  0100               	movlb	0	; () banked
  3246  000AF6  6FCC               	movwf	(receiveData@holder_1131+1)& (0+255),b
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  3250  000AF8  0EFF               	movlw	255
  3251  000AFA  6E27               	movwf	??_receiveData& (0+255),c
  3252  000AFC  0EFF               	movlw	255
  3253  000AFE  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3254  000B00  5041               	movf	_rx_array_inx,w,c
  3255  000B02  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3256  000B04  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3257  000B06  5027               	movf	??_receiveData,w,c
  3258  000B08  2629               	addwf	??_receiveData+2,f,c
  3259  000B0A  5028               	movf	??_receiveData+1,w,c
  3260  000B0C  222A               	addwfc	??_receiveData+3,f,c
  3261  000B0E  0E00               	movlw	low _rx_buffer
  3262  000B10  2429               	addwf	??_receiveData+2,w,c
  3263  000B12  6ED9               	movwf	fsr2l,c
  3264  000B14  0E03               	movlw	high _rx_buffer
  3265  000B16  202A               	addwfc	??_receiveData+3,w,c
  3266  000B18  6EDA               	movwf	fsr2h,c
  3267  000B1A  50DF               	movf	indf2,w,c
  3268  000B1C  0100               	movlb	0	; () banked
  3269  000B1E  6FCD               	movwf	(receiveData@holder_1131+2)& (0+255),b
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  3273  000B20  0ECB               	movlw	low receiveData@holder_1131
  3274  000B22  6E1B               	movwf	CRC8@data,c
  3275  000B24  0E00               	movlw	high receiveData@holder_1131
  3276  000B26  6E1C               	movwf	CRC8@data+1,c
  3277  000B28  0E03               	movlw	3
  3278  000B2A  6E1D               	movwf	CRC8@len,c
  3279  000B2C  EC60  F01A         	call	_CRC8
  3280  000B30  0100               	movlb	0	; () banked
  3281  000B32  6FCF               	movwf	receiveData@crcHolder_1132& (0+255),b
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;FastTransfer.c: 190: serial_write(0x06);
  3285  000B34  D801               	call	u5758
  3286  000B36  D00B               	goto	l5105
  3287  000B38                     u5758:
  3288  000B38  0005               	push	
  3289  000B3A  6EFA               	movwf	pclath,c
  3290  000B3C  5035               	movf	_serial_write,w,c
  3291  000B3E  6EFD               	movwf	tosl,c
  3292  000B40  5036               	movf	_serial_write+1,w,c
  3293  000B42  6EFE               	movwf	tosh,c
  3294  000B44  50F8               	movf	tblptru,w,c
  3295  000B46  6EFF               	movwf	tosu,c
  3296  000B48  50FA               	movf	pclath,w,c
  3297  000B4A  0E06               	movlw	6
  3298  000B4C  0012               	return		;indir
  3299  000B4E                     l5105:
  3300                           
  3301                           ;FastTransfer.c: 191: serial_write(0x85);
  3302  000B4E  D801               	call	u5768
  3303  000B50  D00B               	goto	l5107
  3304  000B52                     u5768:
  3305  000B52  0005               	push	
  3306  000B54  6EFA               	movwf	pclath,c
  3307  000B56  5035               	movf	_serial_write,w,c
  3308  000B58  6EFD               	movwf	tosl,c
  3309  000B5A  5036               	movf	_serial_write+1,w,c
  3310  000B5C  6EFE               	movwf	tosh,c
  3311  000B5E  50F8               	movf	tblptru,w,c
  3312  000B60  6EFF               	movwf	tosu,c
  3313  000B62  50FA               	movf	pclath,w,c
  3314  000B64  0E85               	movlw	133
  3315  000B66  0012               	return		;indir
  3316  000B68                     l5107:
  3317                           
  3318                           ;FastTransfer.c: 192: serial_write(returnAddress);
  3319  000B68  D801               	call	u5778
  3320  000B6A  D00B               	goto	l5109
  3321  000B6C                     u5778:
  3322  000B6C  0005               	push	
  3323  000B6E  6EFA               	movwf	pclath,c
  3324  000B70  5035               	movf	_serial_write,w,c
  3325  000B72  6EFD               	movwf	tosl,c
  3326  000B74  5036               	movf	_serial_write+1,w,c
  3327  000B76  6EFE               	movwf	tosh,c
  3328  000B78  50F8               	movf	tblptru,w,c
  3329  000B7A  6EFF               	movwf	tosu,c
  3330  000B7C  50FA               	movf	pclath,w,c
  3331  000B7E  503F               	movf	_returnAddress,w,c
  3332  000B80  0012               	return		;indir
  3333  000B82                     l5109:
  3334                           
  3335                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3336  000B82  D801               	call	u5788
  3337  000B84  D00B               	goto	l5111
  3338  000B86                     u5788:
  3339  000B86  0005               	push	
  3340  000B88  6EFA               	movwf	pclath,c
  3341  000B8A  5035               	movf	_serial_write,w,c
  3342  000B8C  6EFD               	movwf	tosl,c
  3343  000B8E  5036               	movf	_serial_write+1,w,c
  3344  000B90  6EFE               	movwf	tosh,c
  3345  000B92  50F8               	movf	tblptru,w,c
  3346  000B94  6EFF               	movwf	tosu,c
  3347  000B96  50FA               	movf	pclath,w,c
  3348  000B98  503E               	movf	_moduleAddress,w,c
  3349  000B9A  0012               	return		;indir
  3350  000B9C                     l5111:
  3351                           
  3352                           ;FastTransfer.c: 194: serial_write(3);
  3353  000B9C  D801               	call	u5798
  3354  000B9E  D00B               	goto	l5113
  3355  000BA0                     u5798:
  3356  000BA0  0005               	push	
  3357  000BA2  6EFA               	movwf	pclath,c
  3358  000BA4  5035               	movf	_serial_write,w,c
  3359  000BA6  6EFD               	movwf	tosl,c
  3360  000BA8  5036               	movf	_serial_write+1,w,c
  3361  000BAA  6EFE               	movwf	tosh,c
  3362  000BAC  50F8               	movf	tblptru,w,c
  3363  000BAE  6EFF               	movwf	tosu,c
  3364  000BB0  50FA               	movf	pclath,w,c
  3365  000BB2  0E03               	movlw	3
  3366  000BB4  0012               	return		;indir
  3367  000BB6                     l5113:
  3368                           
  3369                           ;FastTransfer.c: 195: serial_write(255);
  3370  000BB6  D801               	call	u5808
  3371  000BB8  D00B               	goto	l5115
  3372  000BBA                     u5808:
  3373  000BBA  0005               	push	
  3374  000BBC  6EFA               	movwf	pclath,c
  3375  000BBE  5035               	movf	_serial_write,w,c
  3376  000BC0  6EFD               	movwf	tosl,c
  3377  000BC2  5036               	movf	_serial_write+1,w,c
  3378  000BC4  6EFE               	movwf	tosh,c
  3379  000BC6  50F8               	movf	tblptru,w,c
  3380  000BC8  6EFF               	movwf	tosu,c
  3381  000BCA  50FA               	movf	pclath,w,c
  3382  000BCC  0EFF               	movlw	255
  3383  000BCE  0012               	return		;indir
  3384  000BD0                     l5115:
  3385                           
  3386                           ;FastTransfer.c: 196: serial_write(2);
  3387  000BD0  D801               	call	u5818
  3388  000BD2  D00B               	goto	l5117
  3389  000BD4                     u5818:
  3390  000BD4  0005               	push	
  3391  000BD6  6EFA               	movwf	pclath,c
  3392  000BD8  5035               	movf	_serial_write,w,c
  3393  000BDA  6EFD               	movwf	tosl,c
  3394  000BDC  5036               	movf	_serial_write+1,w,c
  3395  000BDE  6EFE               	movwf	tosh,c
  3396  000BE0  50F8               	movf	tblptru,w,c
  3397  000BE2  6EFF               	movwf	tosu,c
  3398  000BE4  50FA               	movf	pclath,w,c
  3399  000BE6  0E02               	movlw	2
  3400  000BE8  0012               	return		;indir
  3401  000BEA                     l5117:
  3402                           
  3403                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3404  000BEA  D801               	call	u5828
  3405  000BEC  D01C               	goto	l5119
  3406  000BEE                     u5828:
  3407  000BEE  0005               	push	
  3408  000BF0  6EFA               	movwf	pclath,c
  3409  000BF2  5035               	movf	_serial_write,w,c
  3410  000BF4  6EFD               	movwf	tosl,c
  3411  000BF6  5036               	movf	_serial_write+1,w,c
  3412  000BF8  6EFE               	movwf	tosh,c
  3413  000BFA  50F8               	movf	tblptru,w,c
  3414  000BFC  6EFF               	movwf	tosu,c
  3415  000BFE  50FA               	movf	pclath,w,c
  3416  000C00  0EFF               	movlw	255
  3417  000C02  6E27               	movwf	??_receiveData& (0+255),c
  3418  000C04  0EFF               	movlw	255
  3419  000C06  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3420  000C08  5041               	movf	_rx_array_inx,w,c
  3421  000C0A  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3422  000C0C  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3423  000C0E  5027               	movf	??_receiveData,w,c
  3424  000C10  2629               	addwf	??_receiveData+2,f,c
  3425  000C12  5028               	movf	??_receiveData+1,w,c
  3426  000C14  222A               	addwfc	??_receiveData+3,f,c
  3427  000C16  0E00               	movlw	low _rx_buffer
  3428  000C18  2429               	addwf	??_receiveData+2,w,c
  3429  000C1A  6ED9               	movwf	fsr2l,c
  3430  000C1C  0E03               	movlw	high _rx_buffer
  3431  000C1E  202A               	addwfc	??_receiveData+3,w,c
  3432  000C20  6EDA               	movwf	fsr2h,c
  3433  000C22  50DF               	movf	indf2,w,c
  3434  000C24  0012               	return		;indir
  3435  000C26                     l5119:
  3436                           
  3437                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3438  000C26  D801               	call	u5838
  3439  000C28  D00C               	goto	l5121
  3440  000C2A                     u5838:
  3441  000C2A  0005               	push	
  3442  000C2C  6EFA               	movwf	pclath,c
  3443  000C2E  5035               	movf	_serial_write,w,c
  3444  000C30  6EFD               	movwf	tosl,c
  3445  000C32  5036               	movf	_serial_write+1,w,c
  3446  000C34  6EFE               	movwf	tosh,c
  3447  000C36  50F8               	movf	tblptru,w,c
  3448  000C38  6EFF               	movwf	tosu,c
  3449  000C3A  50FA               	movf	pclath,w,c
  3450  000C3C  0100               	movlb	0	; () banked
  3451  000C3E  51CF               	movf	receiveData@crcHolder_1132& (0+255),w,b
  3452  000C40  0012               	return		;indir
  3453  000C42                     l5121:
  3454                           
  3455                           ;FastTransfer.c: 199: }
  3456                           ;FastTransfer.c: 202: rx_len = 0;
  3457  000C42  0E00               	movlw	0
  3458  000C44  6E42               	movwf	_rx_len,c
  3459                           
  3460                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3461  000C46  0E00               	movlw	0
  3462  000C48  6E41               	movwf	_rx_array_inx,c
  3463                           
  3464                           ;FastTransfer.c: 204: return 0;
  3465  000C4A  0E00               	movlw	0
  3466  000C4C  0012               	return	
  3467  000C4E  D000               	goto	l5129
  3468  000C50                     l5129:
  3469                           
  3470                           ;FastTransfer.c: 205: }
  3471                           ;FastTransfer.c: 206: }
  3472                           ;FastTransfer.c: 207: }
  3473                           ;FastTransfer.c: 210: return 0;
  3474  000C50  0E00               	movlw	0
  3475  000C52  0012               	return	
  3476  000C54  0012               	return		;funcret
  3477  000C56                     __end_of_receiveData:
  3478                           	opt stack 0
  3479                           tosu	equ	0xFFF
  3480                           tosh	equ	0xFFE
  3481                           tosl	equ	0xFFD
  3482                           pclath	equ	0xFFA
  3483                           tblptru	equ	0xFF8
  3484                           tblptrh	equ	0xFF7
  3485                           tblptrl	equ	0xFF6
  3486                           tablat	equ	0xFF5
  3487                           prodh	equ	0xFF4
  3488                           prodl	equ	0xFF3
  3489                           intcon	equ	0xFF2
  3490                           postinc0	equ	0xFEE
  3491                           wreg	equ	0xFE8
  3492                           postdec1	equ	0xFE5
  3493                           fsr1l	equ	0xFE1
  3494                           indf2	equ	0xFDF
  3495                           postinc2	equ	0xFDE
  3496                           postdec2	equ	0xFDD
  3497                           plusw2	equ	0xFDB
  3498                           fsr2h	equ	0xFDA
  3499                           fsr2l	equ	0xFD9
  3500                           status	equ	0xFD8
  3501                           
  3502 ;; *************** function _Send_put *****************
  3503 ;; Defined at:
  3504 ;;		line 130 in file "UART.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;  _data           1    wreg     unsigned char 
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;  _data           1   37[COMRAM] unsigned char 
  3509 ;; Return value:  Size  Location     Type
  3510 ;;		None               void
  3511 ;; Registers used:
  3512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3518 ;;      Params:         0       0       0       0       0       0       0
  3519 ;;      Locals:         1       0       0       0       0       0       0
  3520 ;;      Temps:          0       0       0       0       0       0       0
  3521 ;;      Totals:         1       0       0       0       0       0       0
  3522 ;;Total ram usage:        1 bytes
  3523 ;; Hardware stack levels used:    1
  3524 ;; Hardware stack levels required when called:    6
  3525 ;; This function calls:
  3526 ;;		_UART_buff_get
  3527 ;;		_UART_buff_put
  3528 ;; This function is called by:
  3529 ;;		_SYSTEM_Initialize
  3530 ;;		_putch
  3531 ;;		_sendData
  3532 ;;		_receiveData
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text6
  3537  003774                     __ptext6:
  3538                           	opt stack 0
  3539  003774                     _Send_put:
  3540                           	opt stack 22
  3541                           
  3542                           ;incstack = 0
  3543                           ;Send_put@_data stored from wreg
  3544  003774  6E26               	movwf	Send_put@_data,c
  3545                           
  3546                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3547  003776  0E00               	movlw	low _output_buffer
  3548  003778  6E21               	movwf	UART_buff_put@_this,c
  3549  00377A  0E05               	movlw	high _output_buffer
  3550  00377C  6E22               	movwf	UART_buff_put@_this+1,c
  3551  00377E  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  3552  003782  EC12  F012         	call	_UART_buff_put
  3553                           
  3554                           ;UART.c: 132: if (Transmit_stall == 1) {
  3555  003786  0445               	decf	_Transmit_stall,w,c
  3556  003788  A4D8               	btfss	status,2,c
  3557  00378A  0012               	return	
  3558                           
  3559                           ;UART.c: 133: Transmit_stall = 0;
  3560  00378C  0E00               	movlw	0
  3561  00378E  6E45               	movwf	_Transmit_stall,c
  3562                           
  3563                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3564  003790  0E00               	movlw	low _output_buffer
  3565  003792  6E21               	movwf	UART_buff_get@_this,c
  3566  003794  0E05               	movlw	high _output_buffer
  3567  003796  6E22               	movwf	UART_buff_get@_this+1,c
  3568  003798  EC76  F018         	call	_UART_buff_get	;wreg free
  3569  00379C  6EAD               	movwf	4013,c	;volatile
  3570                           
  3571                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3572  00379E  889D               	bsf	3997,4,c	;volatile
  3573  0037A0  0012               	return	
  3574  0037A2  0012               	return		;funcret
  3575  0037A4                     __end_of_Send_put:
  3576                           	opt stack 0
  3577                           tosu	equ	0xFFF
  3578                           tosh	equ	0xFFE
  3579                           tosl	equ	0xFFD
  3580                           pclath	equ	0xFFA
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           prodh	equ	0xFF4
  3586                           prodl	equ	0xFF3
  3587                           intcon	equ	0xFF2
  3588                           postinc0	equ	0xFEE
  3589                           wreg	equ	0xFE8
  3590                           postdec1	equ	0xFE5
  3591                           fsr1l	equ	0xFE1
  3592                           indf2	equ	0xFDF
  3593                           postinc2	equ	0xFDE
  3594                           postdec2	equ	0xFDD
  3595                           plusw2	equ	0xFDB
  3596                           fsr2h	equ	0xFDA
  3597                           fsr2l	equ	0xFD9
  3598                           status	equ	0xFD8
  3599                           
  3600 ;; *************** function _UART_buff_put *****************
  3601 ;; Defined at:
  3602 ;;		line 68 in file "UART.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3605 ;;		 -> output_buffer(206), input_buffer(206), 
  3606 ;;  c               1   34[COMRAM] const unsigned char 
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;		None
  3609 ;; Return value:  Size  Location     Type
  3610 ;;		None               void
  3611 ;; Registers used:
  3612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3618 ;;      Params:         3       0       0       0       0       0       0
  3619 ;;      Locals:         0       0       0       0       0       0       0
  3620 ;;      Temps:          2       0       0       0       0       0       0
  3621 ;;      Totals:         5       0       0       0       0       0       0
  3622 ;;Total ram usage:        5 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    5
  3625 ;; This function calls:
  3626 ;;		_UART_buff_modulo_inc
  3627 ;; This function is called by:
  3628 ;;		_Send_put
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           	psect	text7
  3633  002424                     __ptext7:
  3634                           	opt stack 0
  3635  002424                     _UART_buff_put:
  3636                           	opt stack 22
  3637                           
  3638                           ;UART.c: 69: if (_this->count < 200) {
  3639                           
  3640                           ;incstack = 0
  3641  002424  EE20 F0CC          	lfsr	2,204
  3642  002428  5021               	movf	UART_buff_put@_this,w,c
  3643  00242A  26D9               	addwf	fsr2l,f,c
  3644  00242C  5022               	movf	UART_buff_put@_this+1,w,c
  3645  00242E  22DA               	addwfc	fsr2h,f,c
  3646  002430  0E01               	movlw	1
  3647  002432  BEDB               	btfsc	plusw2,7,c
  3648  002434  D007               	goto	l4523
  3649  002436  0E01               	movlw	1
  3650  002438  50DB               	movf	plusw2,w,c
  3651  00243A  E13A               	bnz	l4529
  3652  00243C  0EC8               	movlw	200
  3653  00243E  5CDE               	subwf	postinc2,w,c
  3654  002440  B0D8               	btfsc	status,0,c
  3655  002442  D036               	goto	l4529
  3656  002444                     l4523:
  3657                           
  3658                           ;UART.c: 70: _this->buf[_this->head] = c;
  3659  002444  EE20 F0C8          	lfsr	2,200
  3660  002448  5021               	movf	UART_buff_put@_this,w,c
  3661  00244A  26D9               	addwf	fsr2l,f,c
  3662  00244C  5022               	movf	UART_buff_put@_this+1,w,c
  3663  00244E  22DA               	addwfc	fsr2h,f,c
  3664  002450  CFDE F024          	movff	postinc2,??_UART_buff_put
  3665  002454  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3666  002458  5024               	movf	??_UART_buff_put,w,c
  3667  00245A  2421               	addwf	UART_buff_put@_this,w,c
  3668  00245C  6ED9               	movwf	fsr2l,c
  3669  00245E  5025               	movf	??_UART_buff_put+1,w,c
  3670  002460  2022               	addwfc	UART_buff_put@_this+1,w,c
  3671  002462  6EDA               	movwf	fsr2h,c
  3672  002464  C023  FFDF         	movff	UART_buff_put@c,indf2
  3673                           
  3674                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3675  002468  EE20 F0C8          	lfsr	2,200
  3676  00246C  5021               	movf	UART_buff_put@_this,w,c
  3677  00246E  26D9               	addwf	fsr2l,f,c
  3678  002470  5022               	movf	UART_buff_put@_this+1,w,c
  3679  002472  22DA               	addwfc	fsr2h,f,c
  3680  002474  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3681  002478  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3682  00247C  0E00               	movlw	0
  3683  00247E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3684  002480  0EC8               	movlw	200
  3685  002482  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3686  002484  EC02  F01C         	call	_UART_buff_modulo_inc	;wreg free
  3687  002488  EE20 F0C8          	lfsr	2,200
  3688  00248C  5021               	movf	UART_buff_put@_this,w,c
  3689  00248E  26D9               	addwf	fsr2l,f,c
  3690  002490  5022               	movf	UART_buff_put@_this+1,w,c
  3691  002492  22DA               	addwfc	fsr2h,f,c
  3692  002494  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3693  002498  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3694                           
  3695                           ;UART.c: 72: ++_this->count;
  3696  00249C  EE20 F0CC          	lfsr	2,204
  3697  0024A0  5021               	movf	UART_buff_put@_this,w,c
  3698  0024A2  26D9               	addwf	fsr2l,f,c
  3699  0024A4  5022               	movf	UART_buff_put@_this+1,w,c
  3700  0024A6  22DA               	addwfc	fsr2h,f,c
  3701  0024A8  2ADE               	incf	postinc2,f,c
  3702  0024AA  0E00               	movlw	0
  3703  0024AC  22DD               	addwfc	postdec2,f,c
  3704                           
  3705                           ;UART.c: 73: } else {
  3706  0024AE  0012               	return	
  3707  0024B0                     l4529:
  3708                           
  3709                           ;UART.c: 74: _this->buf[_this->head] = c;
  3710  0024B0  EE20 F0C8          	lfsr	2,200
  3711  0024B4  5021               	movf	UART_buff_put@_this,w,c
  3712  0024B6  26D9               	addwf	fsr2l,f,c
  3713  0024B8  5022               	movf	UART_buff_put@_this+1,w,c
  3714  0024BA  22DA               	addwfc	fsr2h,f,c
  3715  0024BC  CFDE F024          	movff	postinc2,??_UART_buff_put
  3716  0024C0  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3717  0024C4  5024               	movf	??_UART_buff_put,w,c
  3718  0024C6  2421               	addwf	UART_buff_put@_this,w,c
  3719  0024C8  6ED9               	movwf	fsr2l,c
  3720  0024CA  5025               	movf	??_UART_buff_put+1,w,c
  3721  0024CC  2022               	addwfc	UART_buff_put@_this+1,w,c
  3722  0024CE  6EDA               	movwf	fsr2h,c
  3723  0024D0  C023  FFDF         	movff	UART_buff_put@c,indf2
  3724                           
  3725                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3726  0024D4  EE20 F0C8          	lfsr	2,200
  3727  0024D8  5021               	movf	UART_buff_put@_this,w,c
  3728  0024DA  26D9               	addwf	fsr2l,f,c
  3729  0024DC  5022               	movf	UART_buff_put@_this+1,w,c
  3730  0024DE  22DA               	addwfc	fsr2h,f,c
  3731  0024E0  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3732  0024E4  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3733  0024E8  0E00               	movlw	0
  3734  0024EA  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3735  0024EC  0EC8               	movlw	200
  3736  0024EE  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3737  0024F0  EC02  F01C         	call	_UART_buff_modulo_inc	;wreg free
  3738  0024F4  EE20 F0C8          	lfsr	2,200
  3739  0024F8  5021               	movf	UART_buff_put@_this,w,c
  3740  0024FA  26D9               	addwf	fsr2l,f,c
  3741  0024FC  5022               	movf	UART_buff_put@_this+1,w,c
  3742  0024FE  22DA               	addwfc	fsr2h,f,c
  3743  002500  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3744  002504  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3745                           
  3746                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3747  002508  EE20 F0CA          	lfsr	2,202
  3748  00250C  5021               	movf	UART_buff_put@_this,w,c
  3749  00250E  26D9               	addwf	fsr2l,f,c
  3750  002510  5022               	movf	UART_buff_put@_this+1,w,c
  3751  002512  22DA               	addwfc	fsr2h,f,c
  3752  002514  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3753  002518  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3754  00251C  0E00               	movlw	0
  3755  00251E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3756  002520  0EC8               	movlw	200
  3757  002522  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3758  002524  EC02  F01C         	call	_UART_buff_modulo_inc	;wreg free
  3759  002528  EE20 F0CA          	lfsr	2,202
  3760  00252C  5021               	movf	UART_buff_put@_this,w,c
  3761  00252E  26D9               	addwf	fsr2l,f,c
  3762  002530  5022               	movf	UART_buff_put@_this+1,w,c
  3763  002532  22DA               	addwfc	fsr2h,f,c
  3764  002534  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3765  002538  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3766  00253C  0012               	return	
  3767  00253E  0012               	return		;funcret
  3768  002540                     __end_of_UART_buff_put:
  3769                           	opt stack 0
  3770                           tosu	equ	0xFFF
  3771                           tosh	equ	0xFFE
  3772                           tosl	equ	0xFFD
  3773                           pclath	equ	0xFFA
  3774                           tblptru	equ	0xFF8
  3775                           tblptrh	equ	0xFF7
  3776                           tblptrl	equ	0xFF6
  3777                           tablat	equ	0xFF5
  3778                           prodh	equ	0xFF4
  3779                           prodl	equ	0xFF3
  3780                           intcon	equ	0xFF2
  3781                           postinc0	equ	0xFEE
  3782                           wreg	equ	0xFE8
  3783                           postdec1	equ	0xFE5
  3784                           fsr1l	equ	0xFE1
  3785                           indf2	equ	0xFDF
  3786                           postinc2	equ	0xFDE
  3787                           postdec2	equ	0xFDD
  3788                           plusw2	equ	0xFDB
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function _Receive_peek *****************
  3794 ;; Defined at:
  3795 ;;		line 118 in file "UART.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;		None
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;		None
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      unsigned char 
  3802 ;; Registers used:
  3803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3809 ;;      Params:         0       0       0       0       0       0       0
  3810 ;;      Locals:         0       0       0       0       0       0       0
  3811 ;;      Temps:          0       0       0       0       0       0       0
  3812 ;;      Totals:         0       0       0       0       0       0       0
  3813 ;;Total ram usage:        0 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    5
  3816 ;; This function calls:
  3817 ;;		_UART_buff_peek
  3818 ;; This function is called by:
  3819 ;;		_SYSTEM_Initialize
  3820 ;;		_receiveData
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           	psect	text8
  3825  003A70                     __ptext8:
  3826                           	opt stack 0
  3827  003A70                     _Receive_peek:
  3828                           	opt stack 23
  3829                           
  3830                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3831                           
  3832                           ;incstack = 0
  3833  003A70  0E00               	movlw	low _input_buffer
  3834  003A72  6E1B               	movwf	UART_buff_peek@_this,c
  3835  003A74  0E04               	movlw	high _input_buffer
  3836  003A76  6E1C               	movwf	UART_buff_peek@_this+1,c
  3837  003A78  EC72  F01C         	call	_UART_buff_peek	;wreg free
  3838  003A7C  0012               	return	
  3839  003A7E  0012               	return		;funcret
  3840  003A80                     __end_of_Receive_peek:
  3841                           	opt stack 0
  3842                           tosu	equ	0xFFF
  3843                           tosh	equ	0xFFE
  3844                           tosl	equ	0xFFD
  3845                           pclath	equ	0xFFA
  3846                           tblptru	equ	0xFF8
  3847                           tblptrh	equ	0xFF7
  3848                           tblptrl	equ	0xFF6
  3849                           tablat	equ	0xFF5
  3850                           prodh	equ	0xFF4
  3851                           prodl	equ	0xFF3
  3852                           intcon	equ	0xFF2
  3853                           postinc0	equ	0xFEE
  3854                           wreg	equ	0xFE8
  3855                           postdec1	equ	0xFE5
  3856                           fsr1l	equ	0xFE1
  3857                           indf2	equ	0xFDF
  3858                           postinc2	equ	0xFDE
  3859                           postdec2	equ	0xFDD
  3860                           plusw2	equ	0xFDB
  3861                           fsr2h	equ	0xFDA
  3862                           fsr2l	equ	0xFD9
  3863                           status	equ	0xFD8
  3864                           
  3865 ;; *************** function _UART_buff_peek *****************
  3866 ;; Defined at:
  3867 ;;		line 114 in file "UART.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3870 ;;		 -> input_buffer(206), 
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;		None
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  1    wreg      unsigned char 
  3875 ;; Registers used:
  3876 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3882 ;;      Params:         2       0       0       0       0       0       0
  3883 ;;      Locals:         0       0       0       0       0       0       0
  3884 ;;      Temps:          2       0       0       0       0       0       0
  3885 ;;      Totals:         4       0       0       0       0       0       0
  3886 ;;Total ram usage:        4 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    4
  3889 ;; This function calls:
  3890 ;;		Nothing
  3891 ;; This function is called by:
  3892 ;;		_Receive_peek
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           	psect	text9
  3897  0038E4                     __ptext9:
  3898                           	opt stack 0
  3899  0038E4                     _UART_buff_peek:
  3900                           	opt stack 23
  3901                           
  3902                           ;UART.c: 115: return _this->buf[_this->tail];
  3903                           
  3904                           ;incstack = 0
  3905  0038E4  EE20 F0CA          	lfsr	2,202
  3906  0038E8  501B               	movf	UART_buff_peek@_this,w,c
  3907  0038EA  26D9               	addwf	fsr2l,f,c
  3908  0038EC  501C               	movf	UART_buff_peek@_this+1,w,c
  3909  0038EE  22DA               	addwfc	fsr2h,f,c
  3910  0038F0  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3911  0038F4  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3912  0038F8  501D               	movf	??_UART_buff_peek,w,c
  3913  0038FA  241B               	addwf	UART_buff_peek@_this,w,c
  3914  0038FC  6ED9               	movwf	fsr2l,c
  3915  0038FE  501E               	movf	??_UART_buff_peek+1,w,c
  3916  003900  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3917  003902  6EDA               	movwf	fsr2h,c
  3918  003904  50DF               	movf	indf2,w,c
  3919  003906  0012               	return	
  3920  003908  0012               	return		;funcret
  3921  00390A                     __end_of_UART_buff_peek:
  3922                           	opt stack 0
  3923                           tosu	equ	0xFFF
  3924                           tosh	equ	0xFFE
  3925                           tosl	equ	0xFFD
  3926                           pclath	equ	0xFFA
  3927                           tblptru	equ	0xFF8
  3928                           tblptrh	equ	0xFF7
  3929                           tblptrl	equ	0xFF6
  3930                           tablat	equ	0xFF5
  3931                           prodh	equ	0xFF4
  3932                           prodl	equ	0xFF3
  3933                           intcon	equ	0xFF2
  3934                           postinc0	equ	0xFEE
  3935                           wreg	equ	0xFE8
  3936                           postdec1	equ	0xFE5
  3937                           fsr1l	equ	0xFE1
  3938                           indf2	equ	0xFDF
  3939                           postinc2	equ	0xFDE
  3940                           postdec2	equ	0xFDD
  3941                           plusw2	equ	0xFDB
  3942                           fsr2h	equ	0xFDA
  3943                           fsr2l	equ	0xFD9
  3944                           status	equ	0xFD8
  3945                           
  3946 ;; *************** function _CRCcheck *****************
  3947 ;; Defined at:
  3948 ;;		line 373 in file "FastTransfer.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;		None
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  rt              2    5[BANK0 ] int 
  3953 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3954 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3955 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;		None               void
  3958 ;; Registers used:
  3959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3965 ;;      Params:         0       0       0       0       0       0       0
  3966 ;;      Locals:         0       7       0       0       0       0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0
  3968 ;;      Totals:         0       7       0       0       0       0       0
  3969 ;;Total ram usage:        7 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    7
  3972 ;; This function calls:
  3973 ;;		Absolute function
  3974 ;;		_CRC8
  3975 ;;		_Receive_available
  3976 ;;		_Receive_get
  3977 ;;		_crcBufS_get
  3978 ;;		_crcBufS_status_put
  3979 ;; This function is called by:
  3980 ;;		_receiveData
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text10
  3985  001ABC                     __ptext10:
  3986                           	opt stack 0
  3987  001ABC                     _CRCcheck:
  3988                           	opt stack 21
  3989                           
  3990                           ;FastTransfer.c: 375: while (!(serial_available() > 3));
  3991                           
  3992                           ;incstack = 0
  3993  001ABC  D000               	goto	l4673
  3994  001ABE                     l4673:
  3995  001ABE  D801               	call	u4828
  3996  001AC0  D00A               	goto	u4829
  3997  001AC2                     u4828:
  3998  001AC2  0005               	push	
  3999  001AC4  6EFA               	movwf	pclath,c
  4000  001AC6  5031               	movf	_serial_available,w,c
  4001  001AC8  6EFD               	movwf	tosl,c
  4002  001ACA  5032               	movf	_serial_available+1,w,c
  4003  001ACC  6EFE               	movwf	tosh,c
  4004  001ACE  50F8               	movf	tblptru,w,c
  4005  001AD0  6EFF               	movwf	tosu,c
  4006  001AD2  50FA               	movf	pclath,w,c
  4007  001AD4  0012               	return		;indir
  4008  001AD6                     u4829:
  4009  001AD6  BE1E               	btfsc	?_Receive_available+1,7,c
  4010  001AD8  D7F2               	goto	l4673
  4011  001ADA  501E               	movf	?_Receive_available+1,w,c
  4012  001ADC  E106               	bnz	l4675
  4013  001ADE  0E04               	movlw	4
  4014  001AE0  5C1D               	subwf	?_Receive_available,w,c
  4015  001AE2  B0D8               	btfsc	status,0,c
  4016  001AE4  D002               	goto	l4675
  4017  001AE6  D7EB               	goto	l4673
  4018  001AE8  D000               	goto	l4675
  4019  001AEA                     l4675:
  4020                           
  4021                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  4022                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  4023  001AEA  D801               	call	u4848
  4024  001AEC  D00A               	goto	u4849
  4025  001AEE                     u4848:
  4026  001AEE  0005               	push	
  4027  001AF0  6EFA               	movwf	pclath,c
  4028  001AF2  5033               	movf	_serial_read,w,c
  4029  001AF4  6EFD               	movwf	tosl,c
  4030  001AF6  5034               	movf	_serial_read+1,w,c
  4031  001AF8  6EFE               	movwf	tosh,c
  4032  001AFA  50F8               	movf	tblptru,w,c
  4033  001AFC  6EFF               	movwf	tosu,c
  4034  001AFE  50FA               	movf	pclath,w,c
  4035  001B00  0012               	return		;indir
  4036  001B02                     u4849:
  4037  001B02  0100               	movlb	0	; () banked
  4038  001B04  6FC3               	movwf	CRCcheck@arrayHolder& (0+255),b
  4039                           
  4040                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  4041  001B06  D801               	call	u4858
  4042  001B08  D00A               	goto	u4859
  4043  001B0A                     u4858:
  4044  001B0A  0005               	push	
  4045  001B0C  6EFA               	movwf	pclath,c
  4046  001B0E  5033               	movf	_serial_read,w,c
  4047  001B10  6EFD               	movwf	tosl,c
  4048  001B12  5034               	movf	_serial_read+1,w,c
  4049  001B14  6EFE               	movwf	tosh,c
  4050  001B16  50F8               	movf	tblptru,w,c
  4051  001B18  6EFF               	movwf	tosu,c
  4052  001B1A  50FA               	movf	pclath,w,c
  4053  001B1C  0012               	return		;indir
  4054  001B1E                     u4859:
  4055  001B1E  0100               	movlb	0	; () banked
  4056  001B20  6FC4               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  4057                           
  4058                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  4059  001B22  D801               	call	u4868
  4060  001B24  D00A               	goto	u4869
  4061  001B26                     u4868:
  4062  001B26  0005               	push	
  4063  001B28  6EFA               	movwf	pclath,c
  4064  001B2A  5033               	movf	_serial_read,w,c
  4065  001B2C  6EFD               	movwf	tosl,c
  4066  001B2E  5034               	movf	_serial_read+1,w,c
  4067  001B30  6EFE               	movwf	tosh,c
  4068  001B32  50F8               	movf	tblptru,w,c
  4069  001B34  6EFF               	movwf	tosu,c
  4070  001B36  50FA               	movf	pclath,w,c
  4071  001B38  0012               	return		;indir
  4072  001B3A                     u4869:
  4073  001B3A  0100               	movlb	0	; () banked
  4074  001B3C  6FC5               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  4075                           
  4076                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  4077  001B3E  D801               	call	u4878
  4078  001B40  D00A               	goto	u4879
  4079  001B42                     u4878:
  4080  001B42  0005               	push	
  4081  001B44  6EFA               	movwf	pclath,c
  4082  001B46  5033               	movf	_serial_read,w,c
  4083  001B48  6EFD               	movwf	tosl,c
  4084  001B4A  5034               	movf	_serial_read+1,w,c
  4085  001B4C  6EFE               	movwf	tosh,c
  4086  001B4E  50F8               	movf	tblptru,w,c
  4087  001B50  6EFF               	movwf	tosu,c
  4088  001B52  50FA               	movf	pclath,w,c
  4089  001B54  0012               	return		;indir
  4090  001B56                     u4879:
  4091  001B56  0100               	movlb	0	; () banked
  4092  001B58  6FC1               	movwf	CRCcheck@SentCRC& (0+255),b
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  4096  001B5A  0EC3               	movlw	low CRCcheck@arrayHolder
  4097  001B5C  6E1B               	movwf	CRC8@data,c
  4098  001B5E  0E00               	movlw	high CRCcheck@arrayHolder
  4099  001B60  6E1C               	movwf	CRC8@data+1,c
  4100  001B62  0E03               	movlw	3
  4101  001B64  6E1D               	movwf	CRC8@len,c
  4102  001B66  EC60  F01A         	call	_CRC8	;wreg free
  4103  001B6A  0100               	movlb	0	; () banked
  4104  001B6C  6FC2               	movwf	CRCcheck@calculatedCRC& (0+255),b
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  4108  001B6E  0100               	movlb	0	; () banked
  4109  001B70  51C2               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  4110  001B72  0100               	movlb	0	; () banked
  4111  001B74  19C1               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  4112  001B76  A4D8               	btfss	status,2,c
  4113  001B78  D053               	goto	l4705
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;FastTransfer.c: 387: int rt;
  4117                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  4118  001B7A  0E00               	movlw	0
  4119  001B7C  0100               	movlb	0	; () banked
  4120  001B7E  6FC7               	movwf	(CRCcheck@rt+1)& (0+255),b
  4121  001B80  0E00               	movlw	0
  4122  001B82  6FC6               	movwf	CRCcheck@rt& (0+255),b
  4123  001B84                     l4683:
  4124                           
  4125                           ; BSR set to: 0
  4126  001B84  0100               	movlb	0	; () banked
  4127  001B86  BFC7               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  4128  001B88  D00A               	goto	l4687
  4129  001B8A  0100               	movlb	0	; () banked
  4130  001B8C  51C7               	movf	(CRCcheck@rt+1)& (0+255),w,b
  4131  001B8E  E14C               	bnz	l713
  4132  001B90  0E05               	movlw	5
  4133  001B92  0100               	movlb	0	; () banked
  4134  001B94  5DC6               	subwf	CRCcheck@rt& (0+255),w,b
  4135  001B96  B0D8               	btfsc	status,0,c
  4136  001B98  0012               	return	
  4137  001B9A  D001               	goto	l4687
  4138                           
  4139                           ; BSR set to: 0
  4140  001B9C  0012               	return	
  4141  001B9E                     l4687:
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  4145  001B9E  0E9C               	movlw	low _crc_buffer
  4146  001BA0  6E1B               	movwf	crcBufS_get@_this,c
  4147  001BA2  0E00               	movlw	high _crc_buffer
  4148  001BA4  6E1C               	movwf	crcBufS_get@_this+1,c
  4149  001BA6  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4150  001BAA  0E00               	movlw	0
  4151  001BAC  6E1E               	movwf	crcBufS_get@space,c
  4152  001BAE  EC2B  F014         	call	_crcBufS_get	;wreg free
  4153  001BB2  183F               	xorwf	_returnAddress,w,c
  4154  001BB4  A4D8               	btfss	status,2,c
  4155  001BB6  D02F               	goto	l4701
  4156                           
  4157                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  4158  001BB8  0E9C               	movlw	low _crc_buffer
  4159  001BBA  6E1B               	movwf	crcBufS_get@_this,c
  4160  001BBC  0E00               	movlw	high _crc_buffer
  4161  001BBE  6E1C               	movwf	crcBufS_get@_this+1,c
  4162  001BC0  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4163  001BC4  0E01               	movlw	1
  4164  001BC6  6E1E               	movwf	crcBufS_get@space,c
  4165  001BC8  EC2B  F014         	call	_crcBufS_get	;wreg free
  4166  001BCC  0100               	movlb	0	; () banked
  4167  001BCE  19C5               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  4168  001BD0  A4D8               	btfss	status,2,c
  4169  001BD2  D021               	goto	l4701
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  4173  001BD4  0100               	movlb	0	; () banked
  4174  001BD6  05C4               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4175  001BD8  A4D8               	btfss	status,2,c
  4176  001BDA  D00C               	goto	l4697
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  4180  001BDC  0E9C               	movlw	low _crc_buffer
  4181  001BDE  6E1B               	movwf	crcBufS_status_put@_this,c
  4182  001BE0  0E00               	movlw	high _crc_buffer
  4183  001BE2  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4184  001BE4  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4185  001BE8  0E01               	movlw	1
  4186  001BEA  6E1E               	movwf	crcBufS_status_put@status,c
  4187  001BEC  EC60  F016         	call	_crcBufS_status_put	;wreg free
  4188                           
  4189                           ;FastTransfer.c: 393: break;
  4190  001BF0  0012               	return	
  4191                           
  4192                           ;FastTransfer.c: 394: } else if (arrayHolder[1] == 2) {
  4193  001BF2  D011               	goto	l4701
  4194  001BF4                     l4697:
  4195  001BF4  0E02               	movlw	2
  4196  001BF6  0100               	movlb	0	; () banked
  4197  001BF8  19C4               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4198  001BFA  A4D8               	btfss	status,2,c
  4199  001BFC  D00C               	goto	l4701
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  4203  001BFE  0E9C               	movlw	low _crc_buffer
  4204  001C00  6E1B               	movwf	crcBufS_status_put@_this,c
  4205  001C02  0E00               	movlw	high _crc_buffer
  4206  001C04  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4207  001C06  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4208  001C0A  0E02               	movlw	2
  4209  001C0C  6E1E               	movwf	crcBufS_status_put@status,c
  4210  001C0E  EC60  F016         	call	_crcBufS_status_put	;wreg free
  4211                           
  4212                           ;FastTransfer.c: 396: break;
  4213  001C12  0012               	return	
  4214  001C14  D000               	goto	l4701
  4215  001C16                     l4701:
  4216  001C16  0100               	movlb	0	; () banked
  4217  001C18  4BC6               	infsnz	CRCcheck@rt& (0+255),f,b
  4218  001C1A  2BC7               	incf	(CRCcheck@rt+1)& (0+255),f,b
  4219  001C1C  D7B3               	goto	l4683
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;FastTransfer.c: 397: }
  4223                           ;FastTransfer.c: 398: }
  4224                           ;FastTransfer.c: 399: }
  4225                           ;FastTransfer.c: 400: }
  4226                           ;FastTransfer.c: 401: } else {
  4227                           
  4228                           ; BSR set to: 0
  4229  001C1E  0012               	return	
  4230  001C20                     l4705:
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;FastTransfer.c: 402: crcErrorCounter++;
  4234  001C20  0100               	movlb	0	; () banked
  4235  001C22  4B90               	infsnz	_crcErrorCounter& (0+255),f,b
  4236  001C24  2B91               	incf	(_crcErrorCounter+1)& (0+255),f,b
  4237  001C26  0012               	return	
  4238  001C28                     l713:
  4239  001C28  0012               	return		;funcret
  4240  001C2A                     __end_of_CRCcheck:
  4241                           	opt stack 0
  4242                           tosu	equ	0xFFF
  4243                           tosh	equ	0xFFE
  4244                           tosl	equ	0xFFD
  4245                           pclath	equ	0xFFA
  4246                           tblptru	equ	0xFF8
  4247                           tblptrh	equ	0xFF7
  4248                           tblptrl	equ	0xFF6
  4249                           tablat	equ	0xFF5
  4250                           prodh	equ	0xFF4
  4251                           prodl	equ	0xFF3
  4252                           intcon	equ	0xFF2
  4253                           postinc0	equ	0xFEE
  4254                           wreg	equ	0xFE8
  4255                           postdec1	equ	0xFE5
  4256                           fsr1l	equ	0xFE1
  4257                           indf2	equ	0xFDF
  4258                           postinc2	equ	0xFDE
  4259                           postdec2	equ	0xFDD
  4260                           plusw2	equ	0xFDB
  4261                           fsr2h	equ	0xFDA
  4262                           fsr2l	equ	0xFD9
  4263                           status	equ	0xFD8
  4264                           
  4265 ;; *************** function _crcBufS_status_put *****************
  4266 ;; Defined at:
  4267 ;;		line 336 in file "FastTransfer.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4270 ;;		 -> crc_buffer(17), 
  4271 ;;  time            1   28[COMRAM] unsigned char 
  4272 ;;  status          1   29[COMRAM] unsigned char 
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;  wantedTime      2   34[COMRAM] int 
  4275 ;; Return value:  Size  Location     Type
  4276 ;;		None               void
  4277 ;; Registers used:
  4278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4284 ;;      Params:         4       0       0       0       0       0       0
  4285 ;;      Locals:         2       0       0       0       0       0       0
  4286 ;;      Temps:          4       0       0       0       0       0       0
  4287 ;;      Totals:        10       0       0       0       0       0       0
  4288 ;;Total ram usage:       10 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    4
  4291 ;; This function calls:
  4292 ;;		Nothing
  4293 ;; This function is called by:
  4294 ;;		_CRCcheck
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text11
  4299  002CC0                     __ptext11:
  4300                           	opt stack 0
  4301  002CC0                     _crcBufS_status_put:
  4302                           	opt stack 23
  4303                           
  4304                           ;FastTransfer.c: 337: if (time >= 5) {
  4305                           
  4306                           ;incstack = 0
  4307  002CC0  0E04               	movlw	4
  4308  002CC2  641D               	cpfsgt	crcBufS_status_put@time,c
  4309  002CC4  D003               	goto	l4511
  4310                           
  4311                           ;FastTransfer.c: 338: time = 5 - 1;
  4312  002CC6  0E04               	movlw	4
  4313  002CC8  6E1D               	movwf	crcBufS_status_put@time,c
  4314  002CCA  D000               	goto	l4511
  4315  002CCC                     l4511:
  4316                           
  4317                           ;FastTransfer.c: 339: }
  4318                           ;FastTransfer.c: 340: time = time + 1;
  4319  002CCC  281D               	incf	crcBufS_status_put@time,w,c
  4320  002CCE  6E1D               	movwf	crcBufS_status_put@time,c
  4321                           
  4322                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  4323  002CD0  501D               	movf	crcBufS_status_put@time,w,c
  4324  002CD2  0D03               	mullw	3
  4325  002CD4  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  4326  002CD8  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  4327                           
  4328                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  4329  002CDC  EE20 F00F          	lfsr	2,15
  4330  002CE0  501B               	movf	crcBufS_status_put@_this,w,c
  4331  002CE2  26D9               	addwf	fsr2l,f,c
  4332  002CE4  501C               	movf	crcBufS_status_put@_this+1,w,c
  4333  002CE6  22DA               	addwfc	fsr2h,f,c
  4334  002CE8  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4335  002CEA  5CDE               	subwf	postinc2,w,c
  4336  002CEC  50DE               	movf	postinc2,w,c
  4337  002CEE  0A80               	xorlw	128
  4338  002CF0  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4339  002CF2  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4340  002CF4  0A80               	xorlw	128
  4341  002CF6  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4342  002CF8  B0D8               	btfsc	status,0,c
  4343  002CFA  D02B               	goto	l4519
  4344                           
  4345                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4346  002CFC  EE20 F00F          	lfsr	2,15
  4347  002D00  501B               	movf	crcBufS_status_put@_this,w,c
  4348  002D02  26D9               	addwf	fsr2l,f,c
  4349  002D04  501C               	movf	crcBufS_status_put@_this+1,w,c
  4350  002D06  22DA               	addwfc	fsr2h,f,c
  4351  002D08  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4352  002D0C  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4353  002D10  1E1F               	comf	??_crcBufS_status_put,f,c
  4354  002D12  1E20               	comf	??_crcBufS_status_put+1,f,c
  4355  002D14  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4356  002D16  2A20               	incf	??_crcBufS_status_put+1,f,c
  4357  002D18  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4358  002D1A  261F               	addwf	??_crcBufS_status_put,f,c
  4359  002D1C  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4360  002D1E  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4361  002D20  1E1F               	comf	??_crcBufS_status_put,f,c
  4362  002D22  1E20               	comf	??_crcBufS_status_put+1,f,c
  4363  002D24  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4364  002D26  2A20               	incf	??_crcBufS_status_put+1,f,c
  4365  002D28  0E0F               	movlw	15
  4366  002D2A  241F               	addwf	??_crcBufS_status_put,w,c
  4367  002D2C  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4368  002D2E  0E00               	movlw	0
  4369  002D30  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4370  002D32  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4371                           
  4372                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4373  002D34  0E02               	movlw	2
  4374  002D36  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4375  002D38  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4376  002D3A  0E00               	movlw	0
  4377  002D3C  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4378  002D3E  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4379  002D40  501F               	movf	??_crcBufS_status_put,w,c
  4380  002D42  241B               	addwf	crcBufS_status_put@_this,w,c
  4381  002D44  6ED9               	movwf	fsr2l,c
  4382  002D46  5020               	movf	??_crcBufS_status_put+1,w,c
  4383  002D48  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4384  002D4A  6EDA               	movwf	fsr2h,c
  4385  002D4C  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4386                           
  4387                           ;FastTransfer.c: 345: } else {
  4388  002D50  0012               	return	
  4389  002D52                     l4519:
  4390                           
  4391                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4392  002D52  EE20 F00F          	lfsr	2,15
  4393  002D56  501B               	movf	crcBufS_status_put@_this,w,c
  4394  002D58  26D9               	addwf	fsr2l,f,c
  4395  002D5A  501C               	movf	crcBufS_status_put@_this+1,w,c
  4396  002D5C  22DA               	addwfc	fsr2h,f,c
  4397  002D5E  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4398  002D62  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4399  002D66  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4400  002D6A  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4401  002D6E  1E21               	comf	??_crcBufS_status_put+2,f,c
  4402  002D70  1E22               	comf	??_crcBufS_status_put+3,f,c
  4403  002D72  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4404  002D74  2A22               	incf	??_crcBufS_status_put+3,f,c
  4405  002D76  501F               	movf	??_crcBufS_status_put,w,c
  4406  002D78  2621               	addwf	??_crcBufS_status_put+2,f,c
  4407  002D7A  5020               	movf	??_crcBufS_status_put+1,w,c
  4408  002D7C  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4409  002D7E  0E02               	movlw	2
  4410  002D80  2621               	addwf	??_crcBufS_status_put+2,f,c
  4411  002D82  0E00               	movlw	0
  4412  002D84  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4413  002D86  5021               	movf	??_crcBufS_status_put+2,w,c
  4414  002D88  241B               	addwf	crcBufS_status_put@_this,w,c
  4415  002D8A  6ED9               	movwf	fsr2l,c
  4416  002D8C  5022               	movf	??_crcBufS_status_put+3,w,c
  4417  002D8E  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4418  002D90  6EDA               	movwf	fsr2h,c
  4419  002D92  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4420  002D96  0012               	return	
  4421  002D98  0012               	return		;funcret
  4422  002D9A                     __end_of_crcBufS_status_put:
  4423                           	opt stack 0
  4424                           tosu	equ	0xFFF
  4425                           tosh	equ	0xFFE
  4426                           tosl	equ	0xFFD
  4427                           pclath	equ	0xFFA
  4428                           tblptru	equ	0xFF8
  4429                           tblptrh	equ	0xFF7
  4430                           tblptrl	equ	0xFF6
  4431                           tablat	equ	0xFF5
  4432                           prodh	equ	0xFF4
  4433                           prodl	equ	0xFF3
  4434                           intcon	equ	0xFF2
  4435                           postinc0	equ	0xFEE
  4436                           wreg	equ	0xFE8
  4437                           postdec1	equ	0xFE5
  4438                           fsr1l	equ	0xFE1
  4439                           indf2	equ	0xFDF
  4440                           postinc2	equ	0xFDE
  4441                           postdec2	equ	0xFDD
  4442                           plusw2	equ	0xFDB
  4443                           fsr2h	equ	0xFDA
  4444                           fsr2l	equ	0xFD9
  4445                           status	equ	0xFD8
  4446                           
  4447 ;; *************** function _crcBufS_get *****************
  4448 ;; Defined at:
  4449 ;;		line 353 in file "FastTransfer.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4452 ;;		 -> crc_buffer(17), 
  4453 ;;  time            1   28[COMRAM] unsigned char 
  4454 ;;  space           1   29[COMRAM] unsigned char 
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  wantedTime      2   36[COMRAM] int 
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  1    wreg      unsigned char 
  4459 ;; Registers used:
  4460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4466 ;;      Params:         4       0       0       0       0       0       0
  4467 ;;      Locals:         2       0       0       0       0       0       0
  4468 ;;      Temps:          6       0       0       0       0       0       0
  4469 ;;      Totals:        12       0       0       0       0       0       0
  4470 ;;Total ram usage:       12 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:    4
  4473 ;; This function calls:
  4474 ;;		Nothing
  4475 ;; This function is called by:
  4476 ;;		_CRCcheck
  4477 ;;		_AKNAK
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           	psect	text12
  4482  002856                     __ptext12:
  4483                           	opt stack 0
  4484  002856                     _crcBufS_get:
  4485                           	opt stack 23
  4486                           
  4487                           ;FastTransfer.c: 354: if (time >= 5) {
  4488                           
  4489                           ;incstack = 0
  4490  002856  0E04               	movlw	4
  4491  002858  641D               	cpfsgt	crcBufS_get@time,c
  4492  00285A  D003               	goto	l4487
  4493                           
  4494                           ;FastTransfer.c: 355: time = 5 - 1;
  4495  00285C  0E04               	movlw	4
  4496  00285E  6E1D               	movwf	crcBufS_get@time,c
  4497  002860  D000               	goto	l4487
  4498  002862                     l4487:
  4499                           
  4500                           ;FastTransfer.c: 356: }
  4501                           ;FastTransfer.c: 357: if (space >= 3) {
  4502  002862  0E02               	movlw	2
  4503  002864  641E               	cpfsgt	crcBufS_get@space,c
  4504  002866  D003               	goto	l4491
  4505                           
  4506                           ;FastTransfer.c: 358: space = 3 - 1;
  4507  002868  0E02               	movlw	2
  4508  00286A  6E1E               	movwf	crcBufS_get@space,c
  4509  00286C  D000               	goto	l4491
  4510  00286E                     l4491:
  4511                           
  4512                           ;FastTransfer.c: 359: }
  4513                           ;FastTransfer.c: 360: time = time + 1;
  4514  00286E  281D               	incf	crcBufS_get@time,w,c
  4515  002870  6E1D               	movwf	crcBufS_get@time,c
  4516                           
  4517                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4518  002872  501D               	movf	crcBufS_get@time,w,c
  4519  002874  0D03               	mullw	3
  4520  002876  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  4521  00287A  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  4522                           
  4523                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4524  00287E  EE20 F00F          	lfsr	2,15
  4525  002882  501B               	movf	crcBufS_get@_this,w,c
  4526  002884  26D9               	addwf	fsr2l,f,c
  4527  002886  501C               	movf	crcBufS_get@_this+1,w,c
  4528  002888  22DA               	addwfc	fsr2h,f,c
  4529  00288A  5025               	movf	crcBufS_get@wantedTime,w,c
  4530  00288C  5CDE               	subwf	postinc2,w,c
  4531  00288E  50DE               	movf	postinc2,w,c
  4532  002890  0A80               	xorlw	128
  4533  002892  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4534  002894  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4535  002896  0A80               	xorlw	128
  4536  002898  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4537  00289A  B0D8               	btfsc	status,0,c
  4538  00289C  D02A               	goto	l4503
  4539                           
  4540                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4541  00289E  EE20 F00F          	lfsr	2,15
  4542  0028A2  501B               	movf	crcBufS_get@_this,w,c
  4543  0028A4  26D9               	addwf	fsr2l,f,c
  4544  0028A6  501C               	movf	crcBufS_get@_this+1,w,c
  4545  0028A8  22DA               	addwfc	fsr2h,f,c
  4546  0028AA  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4547  0028AE  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4548  0028B2  1E1F               	comf	??_crcBufS_get,f,c
  4549  0028B4  1E20               	comf	??_crcBufS_get+1,f,c
  4550  0028B6  4A1F               	infsnz	??_crcBufS_get,f,c
  4551  0028B8  2A20               	incf	??_crcBufS_get+1,f,c
  4552  0028BA  5025               	movf	crcBufS_get@wantedTime,w,c
  4553  0028BC  261F               	addwf	??_crcBufS_get,f,c
  4554  0028BE  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4555  0028C0  2220               	addwfc	??_crcBufS_get+1,f,c
  4556  0028C2  1E1F               	comf	??_crcBufS_get,f,c
  4557  0028C4  1E20               	comf	??_crcBufS_get+1,f,c
  4558  0028C6  4A1F               	infsnz	??_crcBufS_get,f,c
  4559  0028C8  2A20               	incf	??_crcBufS_get+1,f,c
  4560  0028CA  0E0F               	movlw	15
  4561  0028CC  241F               	addwf	??_crcBufS_get,w,c
  4562  0028CE  6E25               	movwf	crcBufS_get@wantedTime,c
  4563  0028D0  0E00               	movlw	0
  4564  0028D2  2020               	addwfc	??_crcBufS_get+1,w,c
  4565  0028D4  6E26               	movwf	crcBufS_get@wantedTime+1,c
  4566                           
  4567                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4568  0028D6  501E               	movf	crcBufS_get@space,w,c
  4569  0028D8  2425               	addwf	crcBufS_get@wantedTime,w,c
  4570  0028DA  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4571  0028DC  0E00               	movlw	0
  4572  0028DE  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  4573  0028E0  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4574  0028E2  501F               	movf	??_crcBufS_get,w,c
  4575  0028E4  241B               	addwf	crcBufS_get@_this,w,c
  4576  0028E6  6ED9               	movwf	fsr2l,c
  4577  0028E8  5020               	movf	??_crcBufS_get+1,w,c
  4578  0028EA  201C               	addwfc	crcBufS_get@_this+1,w,c
  4579  0028EC  6EDA               	movwf	fsr2h,c
  4580  0028EE  50DF               	movf	indf2,w,c
  4581                           
  4582                           ;FastTransfer.c: 365: } else {
  4583  0028F0  0012               	return	
  4584  0028F2                     l4503:
  4585                           
  4586                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4587  0028F2  EE20 F00F          	lfsr	2,15
  4588  0028F6  501B               	movf	crcBufS_get@_this,w,c
  4589  0028F8  26D9               	addwf	fsr2l,f,c
  4590  0028FA  501C               	movf	crcBufS_get@_this+1,w,c
  4591  0028FC  22DA               	addwfc	fsr2h,f,c
  4592  0028FE  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4593  002902  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4594  002906  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4595  00290A  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4596  00290E  1E21               	comf	??_crcBufS_get+2,f,c
  4597  002910  1E22               	comf	??_crcBufS_get+3,f,c
  4598  002912  4A21               	infsnz	??_crcBufS_get+2,f,c
  4599  002914  2A22               	incf	??_crcBufS_get+3,f,c
  4600  002916  501E               	movf	crcBufS_get@space,w,c
  4601  002918  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4602  00291A  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4603  00291C  5021               	movf	??_crcBufS_get+2,w,c
  4604  00291E  2623               	addwf	??_crcBufS_get+4,f,c
  4605  002920  5022               	movf	??_crcBufS_get+3,w,c
  4606  002922  2224               	addwfc	??_crcBufS_get+5,f,c
  4607  002924  501F               	movf	??_crcBufS_get,w,c
  4608  002926  2623               	addwf	??_crcBufS_get+4,f,c
  4609  002928  5020               	movf	??_crcBufS_get+1,w,c
  4610  00292A  2224               	addwfc	??_crcBufS_get+5,f,c
  4611  00292C  5023               	movf	??_crcBufS_get+4,w,c
  4612  00292E  241B               	addwf	crcBufS_get@_this,w,c
  4613  002930  6ED9               	movwf	fsr2l,c
  4614  002932  5024               	movf	??_crcBufS_get+5,w,c
  4615  002934  201C               	addwfc	crcBufS_get@_this+1,w,c
  4616  002936  6EDA               	movwf	fsr2h,c
  4617  002938  50DF               	movf	indf2,w,c
  4618  00293A  0012               	return	
  4619  00293C  0012               	return		;funcret
  4620  00293E                     __end_of_crcBufS_get:
  4621                           	opt stack 0
  4622                           tosu	equ	0xFFF
  4623                           tosh	equ	0xFFE
  4624                           tosl	equ	0xFFD
  4625                           pclath	equ	0xFFA
  4626                           tblptru	equ	0xFF8
  4627                           tblptrh	equ	0xFF7
  4628                           tblptrl	equ	0xFF6
  4629                           tablat	equ	0xFF5
  4630                           prodh	equ	0xFF4
  4631                           prodl	equ	0xFF3
  4632                           intcon	equ	0xFF2
  4633                           postinc0	equ	0xFEE
  4634                           wreg	equ	0xFE8
  4635                           postdec1	equ	0xFE5
  4636                           fsr1l	equ	0xFE1
  4637                           indf2	equ	0xFDF
  4638                           postinc2	equ	0xFDE
  4639                           postdec2	equ	0xFDD
  4640                           plusw2	equ	0xFDB
  4641                           fsr2h	equ	0xFDA
  4642                           fsr2l	equ	0xFD9
  4643                           status	equ	0xFD8
  4644                           
  4645 ;; *************** function _Receive_get *****************
  4646 ;; Defined at:
  4647 ;;		line 126 in file "UART.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;		None
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;		None
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  1    wreg      unsigned char 
  4654 ;; Registers used:
  4655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4661 ;;      Params:         0       0       0       0       0       0       0
  4662 ;;      Locals:         0       0       0       0       0       0       0
  4663 ;;      Temps:          0       0       0       0       0       0       0
  4664 ;;      Totals:         0       0       0       0       0       0       0
  4665 ;;Total ram usage:        0 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:    6
  4668 ;; This function calls:
  4669 ;;		_UART_buff_get
  4670 ;; This function is called by:
  4671 ;;		_SYSTEM_Initialize
  4672 ;;		_getch
  4673 ;;		_CRCcheck
  4674 ;;		_receiveData
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           	psect	text13
  4679  003A80                     __ptext13:
  4680                           	opt stack 0
  4681  003A80                     _Receive_get:
  4682                           	opt stack 22
  4683                           
  4684                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4685                           
  4686                           ;incstack = 0
  4687  003A80  0E00               	movlw	low _input_buffer
  4688  003A82  6E21               	movwf	UART_buff_get@_this,c
  4689  003A84  0E04               	movlw	high _input_buffer
  4690  003A86  6E22               	movwf	UART_buff_get@_this+1,c
  4691  003A88  EC76  F018         	call	_UART_buff_get	;wreg free
  4692  003A8C  0012               	return	
  4693  003A8E  0012               	return		;funcret
  4694  003A90                     __end_of_Receive_get:
  4695                           	opt stack 0
  4696                           tosu	equ	0xFFF
  4697                           tosh	equ	0xFFE
  4698                           tosl	equ	0xFFD
  4699                           pclath	equ	0xFFA
  4700                           tblptru	equ	0xFF8
  4701                           tblptrh	equ	0xFF7
  4702                           tblptrl	equ	0xFF6
  4703                           tablat	equ	0xFF5
  4704                           prodh	equ	0xFF4
  4705                           prodl	equ	0xFF3
  4706                           intcon	equ	0xFF2
  4707                           postinc0	equ	0xFEE
  4708                           wreg	equ	0xFE8
  4709                           postdec1	equ	0xFE5
  4710                           fsr1l	equ	0xFE1
  4711                           indf2	equ	0xFDF
  4712                           postinc2	equ	0xFDE
  4713                           postdec2	equ	0xFDD
  4714                           plusw2	equ	0xFDB
  4715                           fsr2h	equ	0xFDA
  4716                           fsr2l	equ	0xFD9
  4717                           status	equ	0xFD8
  4718                           
  4719 ;; *************** function _UART_buff_get *****************
  4720 ;; Defined at:
  4721 ;;		line 81 in file "UART.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4724 ;;		 -> output_buffer(206), input_buffer(206), 
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;  c               1   36[COMRAM] unsigned char 
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      unsigned char 
  4729 ;; Registers used:
  4730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4736 ;;      Params:         2       0       0       0       0       0       0
  4737 ;;      Locals:         1       0       0       0       0       0       0
  4738 ;;      Temps:          2       0       0       0       0       0       0
  4739 ;;      Totals:         5       0       0       0       0       0       0
  4740 ;;Total ram usage:        5 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    5
  4743 ;; This function calls:
  4744 ;;		_UART_buff_modulo_inc
  4745 ;; This function is called by:
  4746 ;;		_Receive_get
  4747 ;;		_Send_put
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text14
  4752  0030EC                     __ptext14:
  4753                           	opt stack 0
  4754  0030EC                     _UART_buff_get:
  4755                           	opt stack 22
  4756                           
  4757                           ;UART.c: 82: unsigned char c;
  4758                           ;UART.c: 83: if (_this->count > 0) {
  4759                           
  4760                           ;incstack = 0
  4761  0030EC  EE20 F0CC          	lfsr	2,204
  4762  0030F0  5021               	movf	UART_buff_get@_this,w,c
  4763  0030F2  26D9               	addwf	fsr2l,f,c
  4764  0030F4  5022               	movf	UART_buff_get@_this+1,w,c
  4765  0030F6  22DA               	addwfc	fsr2h,f,c
  4766  0030F8  0E01               	movlw	1
  4767  0030FA  BEDB               	btfsc	plusw2,7,c
  4768  0030FC  D03C               	goto	l4407
  4769  0030FE  0E01               	movlw	1
  4770  003100  50DB               	movf	plusw2,w,c
  4771  003102  E103               	bnz	u4360
  4772  003104  04DE               	decf	postinc2,w,c
  4773  003106  A0D8               	btfss	status,0,c
  4774  003108  D036               	goto	l4407
  4775  00310A                     u4360:
  4776                           
  4777                           ;UART.c: 84: c = _this->buf[_this->tail];
  4778  00310A  EE20 F0CA          	lfsr	2,202
  4779  00310E  5021               	movf	UART_buff_get@_this,w,c
  4780  003110  26D9               	addwf	fsr2l,f,c
  4781  003112  5022               	movf	UART_buff_get@_this+1,w,c
  4782  003114  22DA               	addwfc	fsr2h,f,c
  4783  003116  CFDE F023          	movff	postinc2,??_UART_buff_get
  4784  00311A  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4785  00311E  5023               	movf	??_UART_buff_get,w,c
  4786  003120  2421               	addwf	UART_buff_get@_this,w,c
  4787  003122  6ED9               	movwf	fsr2l,c
  4788  003124  5024               	movf	??_UART_buff_get+1,w,c
  4789  003126  2022               	addwfc	UART_buff_get@_this+1,w,c
  4790  003128  6EDA               	movwf	fsr2h,c
  4791  00312A  50DF               	movf	indf2,w,c
  4792  00312C  6E25               	movwf	UART_buff_get@c,c
  4793                           
  4794                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4795  00312E  EE20 F0CA          	lfsr	2,202
  4796  003132  5021               	movf	UART_buff_get@_this,w,c
  4797  003134  26D9               	addwf	fsr2l,f,c
  4798  003136  5022               	movf	UART_buff_get@_this+1,w,c
  4799  003138  22DA               	addwfc	fsr2h,f,c
  4800  00313A  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4801  00313E  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4802  003142  0E00               	movlw	0
  4803  003144  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4804  003146  0EC8               	movlw	200
  4805  003148  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4806  00314A  EC02  F01C         	call	_UART_buff_modulo_inc	;wreg free
  4807  00314E  EE20 F0CA          	lfsr	2,202
  4808  003152  5021               	movf	UART_buff_get@_this,w,c
  4809  003154  26D9               	addwf	fsr2l,f,c
  4810  003156  5022               	movf	UART_buff_get@_this+1,w,c
  4811  003158  22DA               	addwfc	fsr2h,f,c
  4812  00315A  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4813  00315E  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4814                           
  4815                           ;UART.c: 86: --_this->count;
  4816  003162  EE20 F0CC          	lfsr	2,204
  4817  003166  5021               	movf	UART_buff_get@_this,w,c
  4818  003168  26D9               	addwf	fsr2l,f,c
  4819  00316A  5022               	movf	UART_buff_get@_this+1,w,c
  4820  00316C  22DA               	addwfc	fsr2h,f,c
  4821  00316E  06DE               	decf	postinc2,f,c
  4822  003170  0E00               	movlw	0
  4823  003172  5ADD               	subwfb	postdec2,f,c
  4824                           
  4825                           ;UART.c: 87: } else {
  4826  003174  D002               	goto	l778
  4827  003176                     l4407:
  4828                           
  4829                           ;UART.c: 88: c = 0;
  4830  003176  0E00               	movlw	0
  4831  003178  6E25               	movwf	UART_buff_get@c,c
  4832  00317A                     l778:
  4833                           
  4834                           ;UART.c: 89: }
  4835                           ;UART.c: 90: return (c);
  4836  00317A  5025               	movf	UART_buff_get@c,w,c
  4837  00317C  0012               	return	
  4838  00317E  0012               	return		;funcret
  4839  003180                     __end_of_UART_buff_get:
  4840                           	opt stack 0
  4841                           tosu	equ	0xFFF
  4842                           tosh	equ	0xFFE
  4843                           tosl	equ	0xFFD
  4844                           pclath	equ	0xFFA
  4845                           tblptru	equ	0xFF8
  4846                           tblptrh	equ	0xFF7
  4847                           tblptrl	equ	0xFF6
  4848                           tablat	equ	0xFF5
  4849                           prodh	equ	0xFF4
  4850                           prodl	equ	0xFF3
  4851                           intcon	equ	0xFF2
  4852                           postinc0	equ	0xFEE
  4853                           wreg	equ	0xFE8
  4854                           postdec1	equ	0xFE5
  4855                           fsr1l	equ	0xFE1
  4856                           indf2	equ	0xFDF
  4857                           postinc2	equ	0xFDE
  4858                           postdec2	equ	0xFDD
  4859                           plusw2	equ	0xFDB
  4860                           fsr2h	equ	0xFDA
  4861                           fsr2l	equ	0xFD9
  4862                           status	equ	0xFD8
  4863                           
  4864 ;; *************** function _UART_buff_modulo_inc *****************
  4865 ;; Defined at:
  4866 ;;		line 106 in file "UART.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  value           2   26[COMRAM] const unsigned int 
  4869 ;;  modulus         2   28[COMRAM] const unsigned int 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  my_value        2   30[COMRAM] unsigned int 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  2   26[COMRAM] unsigned int 
  4874 ;; Registers used:
  4875 ;;		wreg, status,2, status,0
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4881 ;;      Params:         4       0       0       0       0       0       0
  4882 ;;      Locals:         2       0       0       0       0       0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0
  4884 ;;      Totals:         6       0       0       0       0       0       0
  4885 ;;Total ram usage:        6 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    4
  4888 ;; This function calls:
  4889 ;;		Nothing
  4890 ;; This function is called by:
  4891 ;;		_UART_buff_put
  4892 ;;		_UART_buff_get
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text15
  4897  003804                     __ptext15:
  4898                           	opt stack 0
  4899  003804                     _UART_buff_modulo_inc:
  4900                           	opt stack 22
  4901                           
  4902                           ;UART.c: 107: unsigned int my_value = value + 1;
  4903                           
  4904                           ;incstack = 0
  4905  003804  0E01               	movlw	1
  4906  003806  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4907  003808  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4908  00380A  0E00               	movlw	0
  4909  00380C  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4910  00380E  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4911                           
  4912                           ;UART.c: 108: if (my_value >= modulus) {
  4913  003810  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4914  003812  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4915  003814  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4916  003816  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4917  003818  A0D8               	btfss	status,0,c
  4918  00381A  D005               	goto	l4395
  4919                           
  4920                           ;UART.c: 109: my_value = 0;
  4921  00381C  0E00               	movlw	0
  4922  00381E  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4923  003820  0E00               	movlw	0
  4924  003822  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4925  003824  D000               	goto	l4395
  4926  003826                     l4395:
  4927                           
  4928                           ;UART.c: 110: }
  4929                           ;UART.c: 111: return (my_value);
  4930  003826  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4931  00382A  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4932  00382E  0012               	return	
  4933  003830  0012               	return		;funcret
  4934  003832                     __end_of_UART_buff_modulo_inc:
  4935                           	opt stack 0
  4936                           tosu	equ	0xFFF
  4937                           tosh	equ	0xFFE
  4938                           tosl	equ	0xFFD
  4939                           pclath	equ	0xFFA
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           prodh	equ	0xFF4
  4945                           prodl	equ	0xFF3
  4946                           intcon	equ	0xFF2
  4947                           postinc0	equ	0xFEE
  4948                           wreg	equ	0xFE8
  4949                           postdec1	equ	0xFE5
  4950                           fsr1l	equ	0xFE1
  4951                           indf2	equ	0xFDF
  4952                           postinc2	equ	0xFDE
  4953                           postdec2	equ	0xFDD
  4954                           plusw2	equ	0xFDB
  4955                           fsr2h	equ	0xFDA
  4956                           fsr2l	equ	0xFD9
  4957                           status	equ	0xFD8
  4958                           
  4959 ;; *************** function _Receive_available *****************
  4960 ;; Defined at:
  4961 ;;		line 122 in file "UART.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;		None
  4966 ;; Return value:  Size  Location     Type
  4967 ;;                  2   28[COMRAM] int 
  4968 ;; Registers used:
  4969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4975 ;;      Params:         2       0       0       0       0       0       0
  4976 ;;      Locals:         0       0       0       0       0       0       0
  4977 ;;      Temps:          0       0       0       0       0       0       0
  4978 ;;      Totals:         2       0       0       0       0       0       0
  4979 ;;Total ram usage:        2 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:    5
  4982 ;; This function calls:
  4983 ;;		_UART_buff_size
  4984 ;; This function is called by:
  4985 ;;		_SYSTEM_Initialize
  4986 ;;		_CRCcheck
  4987 ;;		_receiveData
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           	psect	text16
  4992  0039E2                     __ptext16:
  4993                           	opt stack 0
  4994  0039E2                     _Receive_available:
  4995                           	opt stack 23
  4996                           
  4997                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4998                           
  4999                           ;incstack = 0
  5000  0039E2  0E00               	movlw	low _input_buffer
  5001  0039E4  6E1B               	movwf	UART_buff_size@_this,c
  5002  0039E6  0E04               	movlw	high _input_buffer
  5003  0039E8  6E1C               	movwf	UART_buff_size@_this+1,c
  5004  0039EA  ECFD  F01C         	call	_UART_buff_size	;wreg free
  5005  0039EE  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  5006  0039F2  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  5007  0039F6  0012               	return	
  5008  0039F8  0012               	return		;funcret
  5009  0039FA                     __end_of_Receive_available:
  5010                           	opt stack 0
  5011                           tosu	equ	0xFFF
  5012                           tosh	equ	0xFFE
  5013                           tosl	equ	0xFFD
  5014                           pclath	equ	0xFFA
  5015                           tblptru	equ	0xFF8
  5016                           tblptrh	equ	0xFF7
  5017                           tblptrl	equ	0xFF6
  5018                           tablat	equ	0xFF5
  5019                           prodh	equ	0xFF4
  5020                           prodl	equ	0xFF3
  5021                           intcon	equ	0xFF2
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           postdec1	equ	0xFE5
  5025                           fsr1l	equ	0xFE1
  5026                           indf2	equ	0xFDF
  5027                           postinc2	equ	0xFDE
  5028                           postdec2	equ	0xFDD
  5029                           plusw2	equ	0xFDB
  5030                           fsr2h	equ	0xFDA
  5031                           fsr2l	equ	0xFD9
  5032                           status	equ	0xFD8
  5033                           
  5034 ;; *************** function _UART_buff_size *****************
  5035 ;; Defined at:
  5036 ;;		line 102 in file "UART.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  5039 ;;		 -> output_buffer(206), input_buffer(206), 
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;		None
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  2   26[COMRAM] int 
  5044 ;; Registers used:
  5045 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5051 ;;      Params:         2       0       0       0       0       0       0
  5052 ;;      Locals:         0       0       0       0       0       0       0
  5053 ;;      Temps:          0       0       0       0       0       0       0
  5054 ;;      Totals:         2       0       0       0       0       0       0
  5055 ;;Total ram usage:        2 bytes
  5056 ;; Hardware stack levels used:    1
  5057 ;; Hardware stack levels required when called:    4
  5058 ;; This function calls:
  5059 ;;		Nothing
  5060 ;; This function is called by:
  5061 ;;		_Receive_available
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text17
  5066  0039FA                     __ptext17:
  5067                           	opt stack 0
  5068  0039FA                     _UART_buff_size:
  5069                           	opt stack 23
  5070                           
  5071                           ;UART.c: 103: return (_this->count);
  5072                           
  5073                           ;incstack = 0
  5074  0039FA  EE20 F0CC          	lfsr	2,204
  5075  0039FE  501B               	movf	UART_buff_size@_this,w,c
  5076  003A00  26D9               	addwf	fsr2l,f,c
  5077  003A02  501C               	movf	UART_buff_size@_this+1,w,c
  5078  003A04  22DA               	addwfc	fsr2h,f,c
  5079  003A06  CFDE F01B          	movff	postinc2,?_UART_buff_size
  5080  003A0A  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  5081  003A0E  0012               	return	
  5082  003A10  0012               	return		;funcret
  5083  003A12                     __end_of_UART_buff_size:
  5084                           	opt stack 0
  5085                           tosu	equ	0xFFF
  5086                           tosh	equ	0xFFE
  5087                           tosl	equ	0xFFD
  5088                           pclath	equ	0xFFA
  5089                           tblptru	equ	0xFF8
  5090                           tblptrh	equ	0xFF7
  5091                           tblptrl	equ	0xFF6
  5092                           tablat	equ	0xFF5
  5093                           prodh	equ	0xFF4
  5094                           prodl	equ	0xFF3
  5095                           intcon	equ	0xFF2
  5096                           postinc0	equ	0xFEE
  5097                           wreg	equ	0xFE8
  5098                           postdec1	equ	0xFE5
  5099                           fsr1l	equ	0xFE1
  5100                           indf2	equ	0xFDF
  5101                           postinc2	equ	0xFDE
  5102                           postdec2	equ	0xFDD
  5103                           plusw2	equ	0xFDB
  5104                           fsr2h	equ	0xFDA
  5105                           fsr2l	equ	0xFD9
  5106                           status	equ	0xFD8
  5107                           
  5108 ;; *************** function _CRC8 *****************
  5109 ;; Defined at:
  5110 ;;		line 34 in file "FastTransfer.c"
  5111 ;; Parameters:    Size  Location     Type
  5112 ;;  data            2   26[COMRAM] PTR const unsigned char 
  5113 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1131(3), receiveData@holder(3), 
  5114 ;;		 -> rx_buffer(200), ring_buffer(206), 
  5115 ;;  len             1   28[COMRAM] unsigned char 
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;  sum             1   29[COMRAM] unsigned char 
  5118 ;;  tempI           1   31[COMRAM] unsigned char 
  5119 ;;  extract         1   30[COMRAM] unsigned char 
  5120 ;;  crc             1   32[COMRAM] unsigned char 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  1    wreg      unsigned char 
  5123 ;; Registers used:
  5124 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5130 ;;      Params:         3       0       0       0       0       0       0
  5131 ;;      Locals:         4       0       0       0       0       0       0
  5132 ;;      Temps:          0       0       0       0       0       0       0
  5133 ;;      Totals:         7       0       0       0       0       0       0
  5134 ;;Total ram usage:        7 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    4
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_sendData
  5141 ;;		_receiveData
  5142 ;;		_CRCcheck
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           	psect	text18
  5147  0034C0                     __ptext18:
  5148                           	opt stack 0
  5149  0034C0                     _CRC8:
  5150                           	opt stack 24
  5151                           
  5152                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  5153                           
  5154                           ;incstack = 0
  5155  0034C0  0E00               	movlw	0
  5156  0034C2  6E21               	movwf	CRC8@crc,c
  5157                           
  5158                           ;FastTransfer.c: 36: while (len--) {
  5159  0034C4  D01F               	goto	l4469
  5160  0034C6                     l4453:
  5161                           
  5162                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  5163  0034C6  C01B  FFD9         	movff	CRC8@data,fsr2l
  5164  0034CA  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  5165  0034CE  50DF               	movf	indf2,w,c
  5166  0034D0  6E1F               	movwf	CRC8@extract,c
  5167  0034D2  4A1B               	infsnz	CRC8@data,f,c
  5168  0034D4  2A1C               	incf	CRC8@data+1,f,c
  5169                           
  5170                           ;FastTransfer.c: 38: unsigned char tempI;
  5171                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  5172  0034D6  0E08               	movlw	8
  5173  0034D8  6E20               	movwf	CRC8@tempI,c
  5174  0034DA  D00F               	goto	l4467
  5175  0034DC                     l4459:
  5176                           
  5177                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  5178  0034DC  5021               	movf	CRC8@crc,w,c
  5179  0034DE  181F               	xorwf	CRC8@extract,w,c
  5180  0034E0  0B01               	andlw	1
  5181  0034E2  6E1E               	movwf	CRC8@sum,c
  5182                           
  5183                           ;FastTransfer.c: 41: crc >>= 1;
  5184  0034E4  90D8               	bcf	status,0,c
  5185  0034E6  3221               	rrcf	CRC8@crc,f,c
  5186                           
  5187                           ;FastTransfer.c: 42: if (sum) {
  5188  0034E8  501E               	movf	CRC8@sum,w,c
  5189  0034EA  B4D8               	btfsc	status,2,c
  5190  0034EC  D002               	goto	l599
  5191                           
  5192                           ;FastTransfer.c: 43: crc ^= 0x8C;
  5193  0034EE  0E8C               	movlw	140
  5194  0034F0  1A21               	xorwf	CRC8@crc,f,c
  5195  0034F2                     l599:
  5196                           
  5197                           ;FastTransfer.c: 44: }
  5198                           ;FastTransfer.c: 45: extract >>= 1;
  5199  0034F2  90D8               	bcf	status,0,c
  5200  0034F4  321F               	rrcf	CRC8@extract,f,c
  5201  0034F6  0620               	decf	CRC8@tempI,f,c
  5202  0034F8  D000               	goto	l4467
  5203  0034FA                     l4467:
  5204  0034FA  5020               	movf	CRC8@tempI,w,c
  5205  0034FC  B4D8               	btfsc	status,2,c
  5206  0034FE  D002               	goto	l4469
  5207  003500  D7ED               	goto	l4459
  5208  003502  D000               	goto	l4469
  5209  003504                     l4469:
  5210  003504  061D               	decf	CRC8@len,f,c
  5211  003506  281D               	incf	CRC8@len,w,c
  5212  003508  A4D8               	btfss	status,2,c
  5213  00350A  D7DD               	goto	l4453
  5214                           
  5215                           ;FastTransfer.c: 46: }
  5216                           ;FastTransfer.c: 47: }
  5217                           ;FastTransfer.c: 48: return crc;
  5218  00350C  5021               	movf	CRC8@crc,w,c
  5219  00350E  0012               	return	
  5220  003510  0012               	return		;funcret
  5221  003512                     __end_of_CRC8:
  5222                           	opt stack 0
  5223                           tosu	equ	0xFFF
  5224                           tosh	equ	0xFFE
  5225                           tosl	equ	0xFFD
  5226                           pclath	equ	0xFFA
  5227                           tblptru	equ	0xFF8
  5228                           tblptrh	equ	0xFF7
  5229                           tblptrl	equ	0xFF6
  5230                           tablat	equ	0xFF5
  5231                           prodh	equ	0xFF4
  5232                           prodl	equ	0xFF3
  5233                           intcon	equ	0xFF2
  5234                           postinc0	equ	0xFEE
  5235                           wreg	equ	0xFE8
  5236                           postdec1	equ	0xFE5
  5237                           fsr1l	equ	0xFE1
  5238                           indf2	equ	0xFDF
  5239                           postinc2	equ	0xFDE
  5240                           postdec2	equ	0xFDD
  5241                           plusw2	equ	0xFDB
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function ___fttol *****************
  5247 ;; Defined at:
  5248 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  f1              3   30[BANK0 ] float 
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;  lval            4   40[BANK0 ] unsigned long 
  5253 ;;  exp1            1   44[BANK0 ] unsigned char 
  5254 ;;  sign1           1   39[BANK0 ] unsigned char 
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  4   30[BANK0 ] long 
  5257 ;; Registers used:
  5258 ;;		wreg, status,2, status,0
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5264 ;;      Params:         0       4       0       0       0       0       0
  5265 ;;      Locals:         0       6       0       0       0       0       0
  5266 ;;      Temps:          0       5       0       0       0       0       0
  5267 ;;      Totals:         0      15       0       0       0       0       0
  5268 ;;Total ram usage:       15 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    4
  5271 ;; This function calls:
  5272 ;;		Nothing
  5273 ;; This function is called by:
  5274 ;;		_updateComms
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text19
  5279  001F00                     __ptext19:
  5280                           	opt stack 0
  5281  001F00                     ___fttol:
  5282                           	opt stack 25
  5283                           
  5284                           ;incstack = 0
  5285  001F00  C0E1  F0E3         	movff	___fttol@f1+2,??___fttol
  5286  001F04  0100               	movlb	0	; () banked
  5287  001F06  6BE4               	clrf	(??___fttol+1)& (0+255),b
  5288  001F08  6BE5               	clrf	(??___fttol+2)& (0+255),b
  5289  001F0A  0100               	movlb	0	; () banked
  5290  001F0C  35E0               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5291  001F0E  0100               	movlb	0	; () banked
  5292  001F10  37E3               	rlcf	??___fttol& (0+255),f,b
  5293  001F12  E301               	bnc	u3871
  5294  001F14  81E4               	bsf	(??___fttol+1)& (0+255),0,b
  5295  001F16                     u3871:
  5296  001F16  0100               	movlb	0	; () banked
  5297  001F18  51E3               	movf	??___fttol& (0+255),w,b
  5298  001F1A  0100               	movlb	0	; () banked
  5299  001F1C  6FED               	movwf	___fttol@exp1& (0+255),b
  5300  001F1E  0100               	movlb	0	; () banked
  5301  001F20  51ED               	movf	___fttol@exp1& (0+255),w,b
  5302  001F22  A4D8               	btfss	status,2,c
  5303  001F24  D00A               	goto	l3899
  5304                           
  5305                           ; BSR set to: 0
  5306  001F26  0E00               	movlw	0
  5307  001F28  0100               	movlb	0	; () banked
  5308  001F2A  6FDF               	movwf	?___fttol& (0+255),b
  5309  001F2C  0E00               	movlw	0
  5310  001F2E  6FE0               	movwf	(?___fttol+1)& (0+255),b
  5311  001F30  0E00               	movlw	0
  5312  001F32  6FE1               	movwf	(?___fttol+2)& (0+255),b
  5313  001F34  0E00               	movlw	0
  5314  001F36  6FE2               	movwf	(?___fttol+3)& (0+255),b
  5315                           
  5316                           ; BSR set to: 0
  5317  001F38  0012               	return	
  5318  001F3A                     l3899:
  5319                           
  5320                           ; BSR set to: 0
  5321  001F3A  0E17               	movlw	23
  5322  001F3C  0100               	movlb	0	; () banked
  5323  001F3E  6FE3               	movwf	??___fttol& (0+255),b
  5324  001F40  C0DF  F0E4         	movff	___fttol@f1,??___fttol+1
  5325  001F44  C0E0  F0E5         	movff	___fttol@f1+1,??___fttol+2
  5326  001F48  C0E1  F0E6         	movff	___fttol@f1+2,??___fttol+3
  5327  001F4C  0100               	movlb	0	; () banked
  5328  001F4E  29E3               	incf	??___fttol& (0+255),w,b
  5329  001F50  0100               	movlb	0	; () banked
  5330  001F52  6FE7               	movwf	(??___fttol+4)& (0+255),b
  5331  001F54  D005               	goto	u3890
  5332  001F56                     u3895:
  5333  001F56  0100               	movlb	0	; () banked
  5334  001F58  90D8               	bcf	status,0,c
  5335  001F5A  33E6               	rrcf	(??___fttol+3)& (0+255),f,b
  5336  001F5C  33E5               	rrcf	(??___fttol+2)& (0+255),f,b
  5337  001F5E  33E4               	rrcf	(??___fttol+1)& (0+255),f,b
  5338  001F60                     u3890:
  5339  001F60  0100               	movlb	0	; () banked
  5340  001F62  2FE7               	decfsz	(??___fttol+4)& (0+255),f,b
  5341  001F64  D7F8               	goto	u3895
  5342  001F66  0100               	movlb	0	; () banked
  5343  001F68  51E4               	movf	(??___fttol+1)& (0+255),w,b
  5344  001F6A  0100               	movlb	0	; () banked
  5345  001F6C  6FE8               	movwf	___fttol@sign1& (0+255),b
  5346                           
  5347                           ; BSR set to: 0
  5348  001F6E  0100               	movlb	0	; () banked
  5349  001F70  8FE0               	bsf	(___fttol@f1+1)& (0+255),7,b
  5350                           
  5351                           ; BSR set to: 0
  5352  001F72  0EFF               	movlw	255
  5353  001F74  0100               	movlb	0	; () banked
  5354  001F76  17DF               	andwf	___fttol@f1& (0+255),f,b
  5355  001F78  0EFF               	movlw	255
  5356  001F7A  0100               	movlb	0	; () banked
  5357  001F7C  17E0               	andwf	(___fttol@f1+1)& (0+255),f,b
  5358  001F7E  0E00               	movlw	0
  5359  001F80  0100               	movlb	0	; () banked
  5360  001F82  17E1               	andwf	(___fttol@f1+2)& (0+255),f,b
  5361                           
  5362                           ; BSR set to: 0
  5363  001F84  0100               	movlb	0	; () banked
  5364  001F86  51DF               	movf	___fttol@f1& (0+255),w,b
  5365  001F88  0100               	movlb	0	; () banked
  5366  001F8A  6FE9               	movwf	___fttol@lval& (0+255),b
  5367  001F8C  0100               	movlb	0	; () banked
  5368  001F8E  51E0               	movf	(___fttol@f1+1)& (0+255),w,b
  5369  001F90  0100               	movlb	0	; () banked
  5370  001F92  6FEA               	movwf	(___fttol@lval+1)& (0+255),b
  5371  001F94  0100               	movlb	0	; () banked
  5372  001F96  51E1               	movf	(___fttol@f1+2)& (0+255),w,b
  5373  001F98  0100               	movlb	0	; () banked
  5374  001F9A  6FEB               	movwf	(___fttol@lval+2)& (0+255),b
  5375  001F9C  0100               	movlb	0	; () banked
  5376  001F9E  6BEC               	clrf	(___fttol@lval+3)& (0+255),b
  5377                           
  5378                           ; BSR set to: 0
  5379  001FA0  0E8E               	movlw	142
  5380  001FA2  0100               	movlb	0	; () banked
  5381  001FA4  5FED               	subwf	___fttol@exp1& (0+255),f,b
  5382                           
  5383                           ; BSR set to: 0
  5384  001FA6  0100               	movlb	0	; () banked
  5385  001FA8  AFED               	btfss	___fttol@exp1& (0+255),7,b
  5386  001FAA  D01B               	goto	l3921
  5387                           
  5388                           ; BSR set to: 0
  5389  001FAC  0100               	movlb	0	; () banked
  5390  001FAE  51ED               	movf	___fttol@exp1& (0+255),w,b
  5391  001FB0  0A80               	xorlw	128
  5392  001FB2  0F8F               	addlw	143
  5393  001FB4  B0D8               	btfsc	status,0,c
  5394  001FB6  D00B               	goto	l3917
  5395                           
  5396                           ; BSR set to: 0
  5397  001FB8  0E00               	movlw	0
  5398  001FBA  0100               	movlb	0	; () banked
  5399  001FBC  6FDF               	movwf	?___fttol& (0+255),b
  5400  001FBE  0E00               	movlw	0
  5401  001FC0  6FE0               	movwf	(?___fttol+1)& (0+255),b
  5402  001FC2  0E00               	movlw	0
  5403  001FC4  6FE1               	movwf	(?___fttol+2)& (0+255),b
  5404  001FC6  0E00               	movlw	0
  5405  001FC8  6FE2               	movwf	(?___fttol+3)& (0+255),b
  5406                           
  5407                           ; BSR set to: 0
  5408  001FCA  0012               	return	
  5409                           
  5410                           ; BSR set to: 0
  5411  001FCC  D000               	goto	l3917
  5412  001FCE                     l3917:
  5413                           
  5414                           ; BSR set to: 0
  5415  001FCE  0100               	movlb	0	; () banked
  5416  001FD0  90D8               	bcf	status,0,c
  5417  001FD2  33EC               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5418  001FD4  33EB               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5419  001FD6  33EA               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5420  001FD8  33E9               	rrcf	___fttol@lval& (0+255),f,b
  5421                           
  5422                           ; BSR set to: 0
  5423  001FDA  0100               	movlb	0	; () banked
  5424  001FDC  3FED               	incfsz	___fttol@exp1& (0+255),f,b
  5425  001FDE  D7F7               	goto	l3917
  5426                           
  5427                           ; BSR set to: 0
  5428  001FE0  D01F               	goto	l3931
  5429  001FE2                     l3921:
  5430                           
  5431                           ; BSR set to: 0
  5432  001FE2  0E17               	movlw	23
  5433  001FE4  0100               	movlb	0	; () banked
  5434  001FE6  65ED               	cpfsgt	___fttol@exp1& (0+255),b
  5435  001FE8  D014               	goto	l3929
  5436                           
  5437                           ; BSR set to: 0
  5438  001FEA  0E00               	movlw	0
  5439  001FEC  0100               	movlb	0	; () banked
  5440  001FEE  6FDF               	movwf	?___fttol& (0+255),b
  5441  001FF0  0E00               	movlw	0
  5442  001FF2  6FE0               	movwf	(?___fttol+1)& (0+255),b
  5443  001FF4  0E00               	movlw	0
  5444  001FF6  6FE1               	movwf	(?___fttol+2)& (0+255),b
  5445  001FF8  0E00               	movlw	0
  5446  001FFA  6FE2               	movwf	(?___fttol+3)& (0+255),b
  5447                           
  5448                           ; BSR set to: 0
  5449  001FFC  0012               	return	
  5450                           
  5451                           ; BSR set to: 0
  5452  001FFE  D009               	goto	l3929
  5453  002000                     l3927:
  5454                           
  5455                           ; BSR set to: 0
  5456  002000  0100               	movlb	0	; () banked
  5457  002002  90D8               	bcf	status,0,c
  5458  002004  37E9               	rlcf	___fttol@lval& (0+255),f,b
  5459  002006  37EA               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5460  002008  37EB               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5461  00200A  37EC               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5462  00200C  0100               	movlb	0	; () banked
  5463  00200E  07ED               	decf	___fttol@exp1& (0+255),f,b
  5464  002010  D000               	goto	l3929
  5465  002012                     l3929:
  5466                           
  5467                           ; BSR set to: 0
  5468  002012  0100               	movlb	0	; () banked
  5469  002014  51ED               	movf	___fttol@exp1& (0+255),w,b
  5470  002016  0100               	movlb	0	; () banked
  5471  002018  B4D8               	btfsc	status,2,c
  5472  00201A  D002               	goto	l3931
  5473  00201C  D7F1               	goto	l3927
  5474                           
  5475                           ; BSR set to: 0
  5476  00201E  D000               	goto	l3931
  5477  002020                     l3931:
  5478                           
  5479                           ; BSR set to: 0
  5480  002020  0100               	movlb	0	; () banked
  5481  002022  51E8               	movf	___fttol@sign1& (0+255),w,b
  5482  002024  0100               	movlb	0	; () banked
  5483  002026  B4D8               	btfsc	status,2,c
  5484  002028  D00A               	goto	l3935
  5485                           
  5486                           ; BSR set to: 0
  5487  00202A  0100               	movlb	0	; () banked
  5488  00202C  1FEC               	comf	(___fttol@lval+3)& (0+255),f,b
  5489  00202E  1FEB               	comf	(___fttol@lval+2)& (0+255),f,b
  5490  002030  1FEA               	comf	(___fttol@lval+1)& (0+255),f,b
  5491  002032  6DE9               	negf	___fttol@lval& (0+255),b
  5492  002034  0E00               	movlw	0
  5493  002036  23EA               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5494  002038  23EB               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5495  00203A  23EC               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5496  00203C  D000               	goto	l3935
  5497  00203E                     l3935:
  5498                           
  5499                           ; BSR set to: 0
  5500  00203E  C0E9  F0DF         	movff	___fttol@lval,?___fttol
  5501  002042  C0EA  F0E0         	movff	___fttol@lval+1,?___fttol+1
  5502  002046  C0EB  F0E1         	movff	___fttol@lval+2,?___fttol+2
  5503  00204A  C0EC  F0E2         	movff	___fttol@lval+3,?___fttol+3
  5504  00204E  0012               	return	
  5505                           
  5506                           ; BSR set to: 0
  5507                           
  5508                           ; BSR set to: 0
  5509  002050  0012               	return		;funcret
  5510  002052                     __end_of___fttol:
  5511                           	opt stack 0
  5512                           tosu	equ	0xFFF
  5513                           tosh	equ	0xFFE
  5514                           tosl	equ	0xFFD
  5515                           pclath	equ	0xFFA
  5516                           tblptru	equ	0xFF8
  5517                           tblptrh	equ	0xFF7
  5518                           tblptrl	equ	0xFF6
  5519                           tablat	equ	0xFF5
  5520                           prodh	equ	0xFF4
  5521                           prodl	equ	0xFF3
  5522                           intcon	equ	0xFF2
  5523                           postinc0	equ	0xFEE
  5524                           wreg	equ	0xFE8
  5525                           postdec1	equ	0xFE5
  5526                           fsr1l	equ	0xFE1
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           postdec2	equ	0xFDD
  5530                           plusw2	equ	0xFDB
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function _ToSend *****************
  5536 ;; Defined at:
  5537 ;;		line 216 in file "FastTransfer.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  where           1    wreg     unsigned char 
  5540 ;;  what            2   45[BANK0 ] unsigned int 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;  where           1   47[BANK0 ] unsigned char 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;		None               void
  5545 ;; Registers used:
  5546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5552 ;;      Params:         0       2       0       0       0       0       0
  5553 ;;      Locals:         0       1       0       0       0       0       0
  5554 ;;      Temps:          0       0       0       0       0       0       0
  5555 ;;      Totals:         0       3       0       0       0       0       0
  5556 ;;Total ram usage:        3 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    6
  5559 ;; This function calls:
  5560 ;;		_FastTransfer_buffer_put
  5561 ;; This function is called by:
  5562 ;;		_updateComms
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           	psect	text20
  5567  00396E                     __ptext20:
  5568                           	opt stack 0
  5569  00396E                     _ToSend:
  5570                           	opt stack 23
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;incstack = 0
  5574                           ;ToSend@where stored from wreg
  5575  00396E  0100               	movlb	0	; () banked
  5576  003970  6FF0               	movwf	ToSend@where& (0+255),b
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  5580  003972  0E00               	movlw	low _ring_buffer
  5581  003974  6E21               	movwf	FastTransfer_buffer_put@_this,c
  5582  003976  0E02               	movlw	high _ring_buffer
  5583  003978  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  5584  00397A  C0F0  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  5585  00397E  C0EE  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  5586  003982  C0EF  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  5587  003986  ECCB  F00E         	call	_FastTransfer_buffer_put	;wreg free
  5588  00398A  0012               	return		;funcret
  5589  00398C                     __end_of_ToSend:
  5590                           	opt stack 0
  5591                           tosu	equ	0xFFF
  5592                           tosh	equ	0xFFE
  5593                           tosl	equ	0xFFD
  5594                           pclath	equ	0xFFA
  5595                           tblptru	equ	0xFF8
  5596                           tblptrh	equ	0xFF7
  5597                           tblptrl	equ	0xFF6
  5598                           tablat	equ	0xFF5
  5599                           prodh	equ	0xFF4
  5600                           prodl	equ	0xFF3
  5601                           intcon	equ	0xFF2
  5602                           postinc0	equ	0xFEE
  5603                           wreg	equ	0xFE8
  5604                           postdec1	equ	0xFE5
  5605                           fsr1l	equ	0xFE1
  5606                           indf2	equ	0xFDF
  5607                           postinc2	equ	0xFDE
  5608                           postdec2	equ	0xFDD
  5609                           plusw2	equ	0xFDB
  5610                           fsr2h	equ	0xFDA
  5611                           fsr2l	equ	0xFD9
  5612                           status	equ	0xFD8
  5613                           
  5614 ;; *************** function _FastTransfer_buffer_put *****************
  5615 ;; Defined at:
  5616 ;;		line 223 in file "FastTransfer.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  5619 ;;		 -> ring_buffer(206), 
  5620 ;;  towhere         1   34[COMRAM] unsigned char 
  5621 ;;  towhat          2   35[COMRAM] unsigned int 
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;		None
  5624 ;; Return value:  Size  Location     Type
  5625 ;;		None               void
  5626 ;; Registers used:
  5627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5633 ;;      Params:         5       0       0       0       0       0       0
  5634 ;;      Locals:         0       0       0       0       0       0       0
  5635 ;;      Temps:          2       0       0       0       0       0       0
  5636 ;;      Totals:         7       0       0       0       0       0       0
  5637 ;;Total ram usage:        7 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    5
  5640 ;; This function calls:
  5641 ;;		_FastTransfer_buffer_modulo_inc
  5642 ;; This function is called by:
  5643 ;;		_ToSend
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text21
  5648  001D96                     __ptext21:
  5649                           	opt stack 0
  5650  001D96                     _FastTransfer_buffer_put:
  5651                           	opt stack 23
  5652                           
  5653                           ;FastTransfer.c: 225: group.integer = towhat;
  5654                           
  5655                           ;incstack = 0
  5656  001D96  C024  F043         	movff	FastTransfer_buffer_put@towhat,_group
  5657  001D9A  C025  F044         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  5658                           
  5659                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  5660  001D9E  EE20 F0CC          	lfsr	2,204
  5661  001DA2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5662  001DA4  26D9               	addwf	fsr2l,f,c
  5663  001DA6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5664  001DA8  22DA               	addwfc	fsr2h,f,c
  5665  001DAA  0E01               	movlw	1
  5666  001DAC  BEDB               	btfsc	plusw2,7,c
  5667  001DAE  D007               	goto	l4711
  5668  001DB0  0E01               	movlw	1
  5669  001DB2  50DB               	movf	plusw2,w,c
  5670  001DB4  E103               	bnz	u4951
  5671  001DB6  0EC5               	movlw	197
  5672  001DB8  5CDE               	subwf	postinc2,w,c
  5673  001DBA  B0D8               	btfsc	status,0,c
  5674  001DBC                     u4951:
  5675  001DBC  0012               	return	
  5676  001DBE                     l4711:
  5677                           
  5678                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  5679  001DBE  EE20 F0C8          	lfsr	2,200
  5680  001DC2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5681  001DC4  26D9               	addwf	fsr2l,f,c
  5682  001DC6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5683  001DC8  22DA               	addwfc	fsr2h,f,c
  5684  001DCA  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5685  001DCE  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5686  001DD2  5026               	movf	??_FastTransfer_buffer_put,w,c
  5687  001DD4  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5688  001DD6  6ED9               	movwf	fsr2l,c
  5689  001DD8  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5690  001DDA  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5691  001DDC  6EDA               	movwf	fsr2h,c
  5692  001DDE  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  5693                           
  5694                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5695  001DE2  EE20 F0C8          	lfsr	2,200
  5696  001DE6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5697  001DE8  26D9               	addwf	fsr2l,f,c
  5698  001DEA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5699  001DEC  22DA               	addwfc	fsr2h,f,c
  5700  001DEE  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5701  001DF2  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5702  001DF6  0E00               	movlw	0
  5703  001DF8  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5704  001DFA  0EC8               	movlw	200
  5705  001DFC  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5706  001DFE  EC19  F01C         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5707  001E02  EE20 F0C8          	lfsr	2,200
  5708  001E06  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5709  001E08  26D9               	addwf	fsr2l,f,c
  5710  001E0A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5711  001E0C  22DA               	addwfc	fsr2h,f,c
  5712  001E0E  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5713  001E12  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5714                           
  5715                           ;FastTransfer.c: 230: ++_this->count;
  5716  001E16  EE20 F0CC          	lfsr	2,204
  5717  001E1A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5718  001E1C  26D9               	addwf	fsr2l,f,c
  5719  001E1E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5720  001E20  22DA               	addwfc	fsr2h,f,c
  5721  001E22  2ADE               	incf	postinc2,f,c
  5722  001E24  0E00               	movlw	0
  5723  001E26  22DD               	addwfc	postdec2,f,c
  5724                           
  5725                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  5726  001E28  EE20 F0C8          	lfsr	2,200
  5727  001E2C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5728  001E2E  26D9               	addwf	fsr2l,f,c
  5729  001E30  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5730  001E32  22DA               	addwfc	fsr2h,f,c
  5731  001E34  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5732  001E38  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5733  001E3C  5026               	movf	??_FastTransfer_buffer_put,w,c
  5734  001E3E  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5735  001E40  6ED9               	movwf	fsr2l,c
  5736  001E42  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5737  001E44  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5738  001E46  6EDA               	movwf	fsr2h,c
  5739  001E48  C043  FFDF         	movff	_group,indf2
  5740                           
  5741                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5742  001E4C  EE20 F0C8          	lfsr	2,200
  5743  001E50  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5744  001E52  26D9               	addwf	fsr2l,f,c
  5745  001E54  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5746  001E56  22DA               	addwfc	fsr2h,f,c
  5747  001E58  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5748  001E5C  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5749  001E60  0E00               	movlw	0
  5750  001E62  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5751  001E64  0EC8               	movlw	200
  5752  001E66  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5753  001E68  EC19  F01C         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5754  001E6C  EE20 F0C8          	lfsr	2,200
  5755  001E70  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5756  001E72  26D9               	addwf	fsr2l,f,c
  5757  001E74  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5758  001E76  22DA               	addwfc	fsr2h,f,c
  5759  001E78  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5760  001E7C  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5761                           
  5762                           ;FastTransfer.c: 233: ++_this->count;
  5763  001E80  EE20 F0CC          	lfsr	2,204
  5764  001E84  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5765  001E86  26D9               	addwf	fsr2l,f,c
  5766  001E88  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5767  001E8A  22DA               	addwfc	fsr2h,f,c
  5768  001E8C  2ADE               	incf	postinc2,f,c
  5769  001E8E  0E00               	movlw	0
  5770  001E90  22DD               	addwfc	postdec2,f,c
  5771                           
  5772                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  5773  001E92  EE20 F0C8          	lfsr	2,200
  5774  001E96  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5775  001E98  26D9               	addwf	fsr2l,f,c
  5776  001E9A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5777  001E9C  22DA               	addwfc	fsr2h,f,c
  5778  001E9E  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5779  001EA2  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5780  001EA6  5026               	movf	??_FastTransfer_buffer_put,w,c
  5781  001EA8  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5782  001EAA  6ED9               	movwf	fsr2l,c
  5783  001EAC  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5784  001EAE  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5785  001EB0  6EDA               	movwf	fsr2h,c
  5786  001EB2  C044  FFDF         	movff	_group+1,indf2
  5787                           
  5788                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5789  001EB6  EE20 F0C8          	lfsr	2,200
  5790  001EBA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5791  001EBC  26D9               	addwf	fsr2l,f,c
  5792  001EBE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5793  001EC0  22DA               	addwfc	fsr2h,f,c
  5794  001EC2  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5795  001EC6  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5796  001ECA  0E00               	movlw	0
  5797  001ECC  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5798  001ECE  0EC8               	movlw	200
  5799  001ED0  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5800  001ED2  EC19  F01C         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5801  001ED6  EE20 F0C8          	lfsr	2,200
  5802  001EDA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5803  001EDC  26D9               	addwf	fsr2l,f,c
  5804  001EDE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5805  001EE0  22DA               	addwfc	fsr2h,f,c
  5806  001EE2  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5807  001EE6  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5808                           
  5809                           ;FastTransfer.c: 236: ++_this->count;
  5810  001EEA  EE20 F0CC          	lfsr	2,204
  5811  001EEE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5812  001EF0  26D9               	addwf	fsr2l,f,c
  5813  001EF2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5814  001EF4  22DA               	addwfc	fsr2h,f,c
  5815  001EF6  2ADE               	incf	postinc2,f,c
  5816  001EF8  0E00               	movlw	0
  5817  001EFA  22DD               	addwfc	postdec2,f,c
  5818  001EFC  0012               	return	
  5819  001EFE  0012               	return		;funcret
  5820  001F00                     __end_of_FastTransfer_buffer_put:
  5821                           	opt stack 0
  5822                           tosu	equ	0xFFF
  5823                           tosh	equ	0xFFE
  5824                           tosl	equ	0xFFD
  5825                           pclath	equ	0xFFA
  5826                           tblptru	equ	0xFF8
  5827                           tblptrh	equ	0xFF7
  5828                           tblptrl	equ	0xFF6
  5829                           tablat	equ	0xFF5
  5830                           prodh	equ	0xFF4
  5831                           prodl	equ	0xFF3
  5832                           intcon	equ	0xFF2
  5833                           postinc0	equ	0xFEE
  5834                           wreg	equ	0xFE8
  5835                           postdec1	equ	0xFE5
  5836                           fsr1l	equ	0xFE1
  5837                           indf2	equ	0xFDF
  5838                           postinc2	equ	0xFDE
  5839                           postdec2	equ	0xFDD
  5840                           plusw2	equ	0xFDB
  5841                           fsr2h	equ	0xFDA
  5842                           fsr2l	equ	0xFD9
  5843                           status	equ	0xFD8
  5844                           
  5845 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  5846 ;; Defined at:
  5847 ;;		line 273 in file "FastTransfer.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;  value           2   26[COMRAM] const unsigned int 
  5850 ;;  modulus         2   28[COMRAM] const unsigned int 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  my_value        2   30[COMRAM] unsigned int 
  5853 ;; Return value:  Size  Location     Type
  5854 ;;                  2   26[COMRAM] unsigned int 
  5855 ;; Registers used:
  5856 ;;		wreg, status,2, status,0
  5857 ;; Tracked objects:
  5858 ;;		On entry : 0/0
  5859 ;;		On exit  : 0/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5862 ;;      Params:         4       0       0       0       0       0       0
  5863 ;;      Locals:         2       0       0       0       0       0       0
  5864 ;;      Temps:          0       0       0       0       0       0       0
  5865 ;;      Totals:         6       0       0       0       0       0       0
  5866 ;;Total ram usage:        6 bytes
  5867 ;; Hardware stack levels used:    1
  5868 ;; Hardware stack levels required when called:    4
  5869 ;; This function calls:
  5870 ;;		Nothing
  5871 ;; This function is called by:
  5872 ;;		_FastTransfer_buffer_put
  5873 ;;		_FastTransfer_buffer_get
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           	psect	text22
  5878  003832                     __ptext22:
  5879                           	opt stack 0
  5880  003832                     _FastTransfer_buffer_modulo_inc:
  5881                           	opt stack 23
  5882                           
  5883                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  5884                           
  5885                           ;incstack = 0
  5886  003832  0E01               	movlw	1
  5887  003834  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  5888  003836  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5889  003838  0E00               	movlw	0
  5890  00383A  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  5891  00383C  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5892                           
  5893                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  5894  00383E  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  5895  003840  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  5896  003842  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  5897  003844  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  5898  003846  A0D8               	btfss	status,0,c
  5899  003848  D005               	goto	l4479
  5900                           
  5901                           ;FastTransfer.c: 276: my_value = 0;
  5902  00384A  0E00               	movlw	0
  5903  00384C  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5904  00384E  0E00               	movlw	0
  5905  003850  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5906  003852  D000               	goto	l4479
  5907  003854                     l4479:
  5908                           
  5909                           ;FastTransfer.c: 277: }
  5910                           ;FastTransfer.c: 278: return (my_value);
  5911  003854  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  5912  003858  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  5913  00385C  0012               	return	
  5914  00385E  0012               	return		;funcret
  5915  003860                     __end_of_FastTransfer_buffer_modulo_inc:
  5916                           	opt stack 0
  5917                           tosu	equ	0xFFF
  5918                           tosh	equ	0xFFE
  5919                           tosl	equ	0xFFD
  5920                           pclath	equ	0xFFA
  5921                           tblptru	equ	0xFF8
  5922                           tblptrh	equ	0xFF7
  5923                           tblptrl	equ	0xFF6
  5924                           tablat	equ	0xFF5
  5925                           prodh	equ	0xFF4
  5926                           prodl	equ	0xFF3
  5927                           intcon	equ	0xFF2
  5928                           postinc0	equ	0xFEE
  5929                           wreg	equ	0xFE8
  5930                           postdec1	equ	0xFE5
  5931                           fsr1l	equ	0xFE1
  5932                           indf2	equ	0xFDF
  5933                           postinc2	equ	0xFDE
  5934                           postdec2	equ	0xFDD
  5935                           plusw2	equ	0xFDB
  5936                           fsr2h	equ	0xFDA
  5937                           fsr2l	equ	0xFD9
  5938                           status	equ	0xFD8
  5939                           
  5940 ;; *************** function _Tempeture_Get *****************
  5941 ;; Defined at:
  5942 ;;		line 82 in file "Tempeture.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;  channelnum      2   32[COMRAM] int 
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;		None
  5947 ;; Return value:  Size  Location     Type
  5948 ;;                  3   32[COMRAM] float 
  5949 ;; Registers used:
  5950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5956 ;;      Params:         3       0       0       0       0       0       0
  5957 ;;      Locals:         0       0       0       0       0       0       0
  5958 ;;      Temps:          0       0       0       0       0       0       0
  5959 ;;      Totals:         3       0       0       0       0       0       0
  5960 ;;Total ram usage:        3 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:    5
  5963 ;; This function calls:
  5964 ;;		___wmul
  5965 ;; This function is called by:
  5966 ;;		_updateComms
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text23
  5971  0037A4                     __ptext23:
  5972                           	opt stack 0
  5973  0037A4                     _Tempeture_Get:
  5974                           	opt stack 24
  5975                           
  5976                           ;Tempeture.c: 83: return Temp_DegF[channelnum];
  5977                           
  5978                           ;incstack = 0
  5979  0037A4  C021  F01B         	movff	Tempeture_Get@channelnum,___wmul@multiplier
  5980  0037A8  C022  F01C         	movff	Tempeture_Get@channelnum+1,___wmul@multiplier+1
  5981  0037AC  0E00               	movlw	0
  5982  0037AE  6E1E               	movwf	___wmul@multiplicand+1,c
  5983  0037B0  0E03               	movlw	3
  5984  0037B2  6E1D               	movwf	___wmul@multiplicand,c
  5985  0037B4  EC5E  F01C         	call	___wmul	;wreg free
  5986  0037B8  0EF4               	movlw	low _Temp_DegF
  5987  0037BA  241B               	addwf	?___wmul,w,c
  5988  0037BC  6ED9               	movwf	fsr2l,c
  5989  0037BE  0E00               	movlw	high _Temp_DegF
  5990  0037C0  201C               	addwfc	?___wmul+1,w,c
  5991  0037C2  6EDA               	movwf	fsr2h,c
  5992  0037C4  CFDE F021          	movff	postinc2,?_Tempeture_Get
  5993  0037C8  CFDE F022          	movff	postinc2,?_Tempeture_Get+1
  5994  0037CC  CFDD F023          	movff	postdec2,?_Tempeture_Get+2
  5995  0037D0  0012               	return	
  5996  0037D2  0012               	return		;funcret
  5997  0037D4                     __end_of_Tempeture_Get:
  5998                           	opt stack 0
  5999                           tosu	equ	0xFFF
  6000                           tosh	equ	0xFFE
  6001                           tosl	equ	0xFFD
  6002                           pclath	equ	0xFFA
  6003                           tblptru	equ	0xFF8
  6004                           tblptrh	equ	0xFF7
  6005                           tblptrl	equ	0xFF6
  6006                           tablat	equ	0xFF5
  6007                           prodh	equ	0xFF4
  6008                           prodl	equ	0xFF3
  6009                           intcon	equ	0xFF2
  6010                           postinc0	equ	0xFEE
  6011                           wreg	equ	0xFE8
  6012                           postdec1	equ	0xFE5
  6013                           fsr1l	equ	0xFE1
  6014                           indf2	equ	0xFDF
  6015                           postinc2	equ	0xFDE
  6016                           postdec2	equ	0xFDD
  6017                           plusw2	equ	0xFDB
  6018                           fsr2h	equ	0xFDA
  6019                           fsr2l	equ	0xFD9
  6020                           status	equ	0xFD8
  6021                           
  6022 ;; *************** function _Delay *****************
  6023 ;; Defined at:
  6024 ;;		line 37 in file "Functions.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;  d_lenth         4   26[COMRAM] long 
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;  wait            4   31[COMRAM] long 
  6029 ;; Return value:  Size  Location     Type
  6030 ;;		None               void
  6031 ;; Registers used:
  6032 ;;		wreg, status,2, status,0
  6033 ;; Tracked objects:
  6034 ;;		On entry : 0/0
  6035 ;;		On exit  : 0/0
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6038 ;;      Params:         4       0       0       0       0       0       0
  6039 ;;      Locals:         4       0       0       0       0       0       0
  6040 ;;      Temps:          1       0       0       0       0       0       0
  6041 ;;      Totals:         9       0       0       0       0       0       0
  6042 ;;Total ram usage:        9 bytes
  6043 ;; Hardware stack levels used:    1
  6044 ;; Hardware stack levels required when called:    4
  6045 ;; This function calls:
  6046 ;;		Nothing
  6047 ;; This function is called by:
  6048 ;;		_updateComms
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           	psect	text24
  6053  0035B4                     __ptext24:
  6054                           	opt stack 0
  6055  0035B4                     _Delay:
  6056                           	opt stack 25
  6057                           
  6058                           ;Functions.c: 39: long int wait = 0;
  6059                           
  6060                           ;incstack = 0
  6061  0035B4  0E00               	movlw	0
  6062  0035B6  6E20               	movwf	Delay@wait,c
  6063  0035B8  0E00               	movlw	0
  6064  0035BA  6E21               	movwf	Delay@wait+1,c
  6065  0035BC  0E00               	movlw	0
  6066  0035BE  6E22               	movwf	Delay@wait+2,c
  6067  0035C0  0E00               	movlw	0
  6068  0035C2  6E23               	movwf	Delay@wait+3,c
  6069  0035C4  D00E               	goto	l3579
  6070  0035C6                     l3575:
  6071                           
  6072                           ;Functions.c: 41: {
  6073                           ;Functions.c: 42: _delay((unsigned long)((1)*(8000000/4000.0)));
  6074  0035C6  0E03               	movlw	3
  6075  0035C8  6E1F               	movwf	??_Delay& (0+255),c
  6076  0035CA  0E98               	movlw	152
  6077  0035CC                     u6177:
  6078  0035CC  2EE8               	decfsz	wreg,f,c
  6079  0035CE  D7FE               	goto	u6177
  6080  0035D0  2E1F               	decfsz	??_Delay& (0+255),f,c
  6081  0035D2  D7FC               	goto	u6177
  6082  0035D4  0E01               	movlw	1
  6083  0035D6  2620               	addwf	Delay@wait,f,c
  6084  0035D8  0E00               	movlw	0
  6085  0035DA  2221               	addwfc	Delay@wait+1,f,c
  6086  0035DC  2222               	addwfc	Delay@wait+2,f,c
  6087  0035DE  2223               	addwfc	Delay@wait+3,f,c
  6088  0035E0  D000               	goto	l3579
  6089  0035E2                     l3579:
  6090  0035E2  501B               	movf	Delay@d_lenth,w,c
  6091  0035E4  5C20               	subwf	Delay@wait,w,c
  6092  0035E6  501C               	movf	Delay@d_lenth+1,w,c
  6093  0035E8  5821               	subwfb	Delay@wait+1,w,c
  6094  0035EA  501D               	movf	Delay@d_lenth+2,w,c
  6095  0035EC  5822               	subwfb	Delay@wait+2,w,c
  6096  0035EE  5023               	movf	Delay@wait+3,w,c
  6097  0035F0  0A80               	xorlw	128
  6098  0035F2  6E1F               	movwf	??_Delay& (0+255),c
  6099  0035F4  501E               	movf	Delay@d_lenth+3,w,c
  6100  0035F6  0A80               	xorlw	128
  6101  0035F8  581F               	subwfb	??_Delay& (0+255),w,c
  6102  0035FA  A0D8               	btfss	status,0,c
  6103  0035FC  D7E4               	goto	l3575
  6104  0035FE  0012               	return		;funcret
  6105  003600                     __end_of_Delay:
  6106                           	opt stack 0
  6107                           tosu	equ	0xFFF
  6108                           tosh	equ	0xFFE
  6109                           tosl	equ	0xFFD
  6110                           pclath	equ	0xFFA
  6111                           tblptru	equ	0xFF8
  6112                           tblptrh	equ	0xFF7
  6113                           tblptrl	equ	0xFF6
  6114                           tablat	equ	0xFF5
  6115                           prodh	equ	0xFF4
  6116                           prodl	equ	0xFF3
  6117                           intcon	equ	0xFF2
  6118                           postinc0	equ	0xFEE
  6119                           wreg	equ	0xFE8
  6120                           postdec1	equ	0xFE5
  6121                           fsr1l	equ	0xFE1
  6122                           indf2	equ	0xFDF
  6123                           postinc2	equ	0xFDE
  6124                           postdec2	equ	0xFDD
  6125                           plusw2	equ	0xFDB
  6126                           fsr2h	equ	0xFDA
  6127                           fsr2l	equ	0xFD9
  6128                           status	equ	0xFD8
  6129                           
  6130 ;; *************** function _Temp_Fault *****************
  6131 ;; Defined at:
  6132 ;;		line 16 in file "Tempeture.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;		None
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;  i               2   42[COMRAM] int 
  6137 ;;  fault           1   41[COMRAM] unsigned char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  1    wreg      unsigned char 
  6140 ;; Registers used:
  6141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6147 ;;      Params:         0       0       0       0       0       0       0
  6148 ;;      Locals:         3       0       0       0       0       0       0
  6149 ;;      Temps:          0       0       0       0       0       0       0
  6150 ;;      Totals:         3       0       0       0       0       0       0
  6151 ;;Total ram usage:        3 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    5
  6154 ;; This function calls:
  6155 ;;		___ftge
  6156 ;;		___wmul
  6157 ;; This function is called by:
  6158 ;;		_main
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           	psect	text25
  6163  003322                     __ptext25:
  6164                           	opt stack 0
  6165  003322                     _Temp_Fault:
  6166                           	opt stack 25
  6167                           
  6168                           ;Tempeture.c: 18: char fault = 0;
  6169                           
  6170                           ;incstack = 0
  6171  003322  0E00               	movlw	0
  6172  003324  6E2A               	movwf	Temp_Fault@fault,c
  6173                           
  6174                           ;Tempeture.c: 19: for (int i = 0; i < 4; i++) {
  6175  003326  0E00               	movlw	0
  6176  003328  6E2C               	movwf	Temp_Fault@i+1,c
  6177  00332A  0E00               	movlw	0
  6178  00332C  6E2B               	movwf	Temp_Fault@i,c
  6179  00332E                     l5267:
  6180  00332E  BE2C               	btfsc	Temp_Fault@i+1,7,c
  6181  003330  D008               	goto	l5271
  6182  003332  502C               	movf	Temp_Fault@i+1,w,c
  6183  003334  E12D               	bnz	l341
  6184  003336  0E04               	movlw	4
  6185  003338  5C2B               	subwf	Temp_Fault@i,w,c
  6186  00333A  B0D8               	btfsc	status,0,c
  6187  00333C  0012               	return	
  6188  00333E  D001               	goto	l5271
  6189  003340  0012               	return	
  6190  003342                     l5271:
  6191                           
  6192                           ;Tempeture.c: 20: if (60.5 > Temp_DegF[i]) {
  6193  003342  C02B  F01B         	movff	Temp_Fault@i,___wmul@multiplier
  6194  003346  C02C  F01C         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  6195  00334A  0E00               	movlw	0
  6196  00334C  6E1E               	movwf	___wmul@multiplicand+1,c
  6197  00334E  0E03               	movlw	3
  6198  003350  6E1D               	movwf	___wmul@multiplicand,c
  6199  003352  EC5E  F01C         	call	___wmul	;wreg free
  6200  003356  0EF4               	movlw	low _Temp_DegF
  6201  003358  241B               	addwf	?___wmul,w,c
  6202  00335A  6ED9               	movwf	fsr2l,c
  6203  00335C  0E00               	movlw	high _Temp_DegF
  6204  00335E  201C               	addwfc	?___wmul+1,w,c
  6205  003360  6EDA               	movwf	fsr2h,c
  6206  003362  CFDE F021          	movff	postinc2,___ftge@ff1
  6207  003366  CFDE F022          	movff	postinc2,___ftge@ff1+1
  6208  00336A  CFDD F023          	movff	postdec2,___ftge@ff1+2
  6209  00336E  0E00               	movlw	0
  6210  003370  6E24               	movwf	___ftge@ff2,c
  6211  003372  0E72               	movlw	114
  6212  003374  6E25               	movwf	___ftge@ff2+1,c
  6213  003376  0E42               	movlw	66
  6214  003378  6E26               	movwf	___ftge@ff2+2,c
  6215  00337A  EC2B  F018         	call	___ftge	;wreg free
  6216  00337E  B0D8               	btfsc	status,0,c
  6217  003380  D003               	goto	l5275
  6218                           
  6219                           ;Tempeture.c: 21: fault = 1;
  6220  003382  0E01               	movlw	1
  6221  003384  6E2A               	movwf	Temp_Fault@fault,c
  6222  003386  D000               	goto	l5275
  6223  003388                     l5275:
  6224  003388  4A2B               	infsnz	Temp_Fault@i,f,c
  6225  00338A  2A2C               	incf	Temp_Fault@i+1,f,c
  6226  00338C  D7D0               	goto	l5267
  6227  00338E  0012               	return	
  6228  003390                     l341:
  6229  003390  0012               	return		;funcret
  6230  003392                     __end_of_Temp_Fault:
  6231                           	opt stack 0
  6232                           tosu	equ	0xFFF
  6233                           tosh	equ	0xFFE
  6234                           tosl	equ	0xFFD
  6235                           pclath	equ	0xFFA
  6236                           tblptru	equ	0xFF8
  6237                           tblptrh	equ	0xFF7
  6238                           tblptrl	equ	0xFF6
  6239                           tablat	equ	0xFF5
  6240                           prodh	equ	0xFF4
  6241                           prodl	equ	0xFF3
  6242                           intcon	equ	0xFF2
  6243                           postinc0	equ	0xFEE
  6244                           wreg	equ	0xFE8
  6245                           postdec1	equ	0xFE5
  6246                           fsr1l	equ	0xFE1
  6247                           indf2	equ	0xFDF
  6248                           postinc2	equ	0xFDE
  6249                           postdec2	equ	0xFDD
  6250                           plusw2	equ	0xFDB
  6251                           fsr2h	equ	0xFDA
  6252                           fsr2l	equ	0xFD9
  6253                           status	equ	0xFD8
  6254                           
  6255 ;; *************** function _Temp_Convert *****************
  6256 ;; Defined at:
  6257 ;;		line 61 in file "Tempeture.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;		None
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;  steinhart       3   14[BANK1 ] float 
  6262 ;;  x               2   12[BANK1 ] int 
  6263 ;; Return value:  Size  Location     Type
  6264 ;;		None               void
  6265 ;; Registers used:
  6266 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6272 ;;      Params:         0       0       0       0       0       0       0
  6273 ;;      Locals:         0       0       9       0       0       0       0
  6274 ;;      Temps:          0       0       0       0       0       0       0
  6275 ;;      Totals:         0       0       9       0       0       0       0
  6276 ;;Total ram usage:        9 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    8
  6279 ;; This function calls:
  6280 ;;		_Temp_Filter
  6281 ;;		___awdiv
  6282 ;;		___awtoft
  6283 ;;		___ftadd
  6284 ;;		___ftdiv
  6285 ;;		___ftmul
  6286 ;;		___ftsub
  6287 ;;		___wmul
  6288 ;;		_log
  6289 ;; This function is called by:
  6290 ;;		_main
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text26
  6295  001736                     __ptext26:
  6296                           	opt stack 0
  6297  001736                     _Temp_Convert:
  6298                           	opt stack 22
  6299                           
  6300                           ;Tempeture.c: 62: int x;
  6301                           ;Tempeture.c: 63: float steinhart;
  6302                           ;Tempeture.c: 64: for (x = 0; x < 4; x++) {
  6303                           
  6304                           ;incstack = 0
  6305  001736  0E00               	movlw	0
  6306  001738  0101               	movlb	1	; () banked
  6307  00173A  6F9B               	movwf	(Temp_Convert@x+1)& (0+255),b
  6308  00173C  0E00               	movlw	0
  6309  00173E  6F9A               	movwf	Temp_Convert@x& (0+255),b
  6310                           
  6311                           ; BSR set to: 1
  6312  001740  0101               	movlb	1	; () banked
  6313  001742  BF9B               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  6314  001744  D00A               	goto	l5285
  6315  001746  0101               	movlb	1	; () banked
  6316  001748  519B               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6317  00174A  E106               	bnz	u6040
  6318  00174C  0E04               	movlw	4
  6319  00174E  0101               	movlb	1	; () banked
  6320  001750  5D9A               	subwf	Temp_Convert@x& (0+255),w,b
  6321  001752  B0D8               	btfsc	status,0,c
  6322  001754  D0F5               	goto	l5309
  6323  001756  D001               	goto	l5285
  6324  001758                     u6040:
  6325                           
  6326                           ; BSR set to: 1
  6327  001758  D0F3               	goto	l5309
  6328  00175A                     l5285:
  6329                           
  6330                           ; BSR set to: 1
  6331                           ;Tempeture.c: 65: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6332  00175A  90D8               	bcf	status,0,c
  6333  00175C  0101               	movlb	1	; () banked
  6334  00175E  359A               	rlcf	Temp_Convert@x& (0+255),w,b
  6335  001760  6ED9               	movwf	fsr2l,c
  6336  001762  0101               	movlb	1	; () banked
  6337  001764  359B               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  6338  001766  6EDA               	movwf	fsr2h,c
  6339  001768  0EB9               	movlw	low _Temp_Adc
  6340  00176A  26D9               	addwf	fsr2l,f,c
  6341  00176C  0E00               	movlw	high _Temp_Adc
  6342  00176E  22DA               	addwfc	fsr2h,f,c
  6343  001770  CFDE F01D          	movff	postinc2,___awdiv@divisor
  6344  001774  CFDD F01E          	movff	postdec2,___awdiv@divisor+1
  6345  001778  0E03               	movlw	3
  6346  00177A  6E1C               	movwf	___awdiv@dividend+1,c
  6347  00177C  681B               	setf	___awdiv@dividend,c
  6348  00177E  ECE0  F017         	call	___awdiv	;wreg free
  6349  001782  0EFF               	movlw	255
  6350  001784  241B               	addwf	?___awdiv,w,c
  6351  001786  0101               	movlb	1	; () banked
  6352  001788  6F96               	movwf	_Temp_Convert$2202& (0+255),b
  6353  00178A  0EFF               	movlw	255
  6354  00178C  201C               	addwfc	?___awdiv+1,w,c
  6355  00178E  0101               	movlb	1	; () banked
  6356  001790  6F97               	movwf	(_Temp_Convert$2202+1)& (0+255),b
  6357                           
  6358                           ; BSR set to: 1
  6359                           ;Tempeture.c: 65: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6360  001792  C196  F01D         	movff	_Temp_Convert$2202,___awdiv@divisor
  6361  001796  C197  F01E         	movff	_Temp_Convert$2202+1,___awdiv@divisor+1
  6362  00179A  0E27               	movlw	39
  6363  00179C  6E1C               	movwf	___awdiv@dividend+1,c
  6364  00179E  0E10               	movlw	16
  6365  0017A0  6E1B               	movwf	___awdiv@dividend,c
  6366  0017A2  ECE0  F017         	call	___awdiv	;wreg free
  6367  0017A6  C01B  F198         	movff	?___awdiv,_Temp_Convert$2203
  6368  0017AA  C01C  F199         	movff	?___awdiv+1,_Temp_Convert$2203+1
  6369                           
  6370                           ;Tempeture.c: 65: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6371  0017AE  0E27               	movlw	39
  6372  0017B0  6E1E               	movwf	___awdiv@divisor+1,c
  6373  0017B2  0E10               	movlw	16
  6374  0017B4  6E1D               	movwf	___awdiv@divisor,c
  6375  0017B6  C198  F01B         	movff	_Temp_Convert$2203,___awdiv@dividend
  6376  0017BA  C199  F01C         	movff	_Temp_Convert$2203+1,___awdiv@dividend+1
  6377  0017BE  ECE0  F017         	call	___awdiv	;wreg free
  6378  0017C2  C01B  F023         	movff	?___awdiv,___awtoft@c
  6379  0017C6  C01C  F024         	movff	?___awdiv+1,___awtoft@c+1
  6380  0017CA  EC48  F01B         	call	___awtoft	;wreg free
  6381  0017CE  C023  F19C         	movff	?___awtoft,Temp_Convert@steinhart
  6382  0017D2  C024  F19D         	movff	?___awtoft+1,Temp_Convert@steinhart+1
  6383  0017D6  C025  F19E         	movff	?___awtoft+2,Temp_Convert@steinhart+2
  6384                           
  6385                           ;Tempeture.c: 66: steinhart = log(steinhart);
  6386  0017DA  C19C  F191         	movff	Temp_Convert@steinhart,log@x
  6387  0017DE  C19D  F192         	movff	Temp_Convert@steinhart+1,log@x+1
  6388  0017E2  C19E  F193         	movff	Temp_Convert@steinhart+2,log@x+2
  6389  0017E6  ECD2  F010         	call	_log	;wreg free
  6390  0017EA  C191  F19C         	movff	?_log,Temp_Convert@steinhart
  6391  0017EE  C192  F19D         	movff	?_log+1,Temp_Convert@steinhart+1
  6392  0017F2  C193  F19E         	movff	?_log+2,Temp_Convert@steinhart+2
  6393                           
  6394                           ;Tempeture.c: 67: steinhart /= 3950;
  6395  0017F6  C19C  F0C1         	movff	Temp_Convert@steinhart,___ftdiv@f1
  6396  0017FA  C19D  F0C2         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  6397  0017FE  C19E  F0C3         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  6398  001802  0EE0               	movlw	224
  6399  001804  0100               	movlb	0	; () banked
  6400  001806  6FC4               	movwf	___ftdiv@f2& (0+255),b
  6401  001808  0E76               	movlw	118
  6402  00180A  0100               	movlb	0	; () banked
  6403  00180C  6FC5               	movwf	(___ftdiv@f2+1)& (0+255),b
  6404  00180E  0E45               	movlw	69
  6405  001810  0100               	movlb	0	; () banked
  6406  001812  6FC6               	movwf	(___ftdiv@f2+2)& (0+255),b
  6407  001814  EC29  F010         	call	___ftdiv	;wreg free
  6408  001818  C0C1  F19C         	movff	?___ftdiv,Temp_Convert@steinhart
  6409  00181C  C0C2  F19D         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6410  001820  C0C3  F19E         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6411                           
  6412                           ;Tempeture.c: 68: steinhart += 1.0 / (25 + 273.15);
  6413  001824  C19C  F0DF         	movff	Temp_Convert@steinhart,___ftadd@f1
  6414  001828  C19D  F0E0         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  6415  00182C  C19E  F0E1         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  6416  001830  0ECF               	movlw	207
  6417  001832  0100               	movlb	0	; () banked
  6418  001834  6FE2               	movwf	___ftadd@f2& (0+255),b
  6419  001836  0E5B               	movlw	91
  6420  001838  0100               	movlb	0	; () banked
  6421  00183A  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  6422  00183C  0E3B               	movlw	59
  6423  00183E  0100               	movlb	0	; () banked
  6424  001840  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  6425  001842  EC5C  F00A         	call	___ftadd	;wreg free
  6426  001846  C0DF  F19C         	movff	?___ftadd,Temp_Convert@steinhart
  6427  00184A  C0E0  F19D         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6428  00184E  C0E1  F19E         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6429                           
  6430                           ;Tempeture.c: 69: steinhart = 1.0 / steinhart;
  6431  001852  0E00               	movlw	0
  6432  001854  0100               	movlb	0	; () banked
  6433  001856  6FC1               	movwf	___ftdiv@f1& (0+255),b
  6434  001858  0E80               	movlw	128
  6435  00185A  0100               	movlb	0	; () banked
  6436  00185C  6FC2               	movwf	(___ftdiv@f1+1)& (0+255),b
  6437  00185E  0E3F               	movlw	63
  6438  001860  0100               	movlb	0	; () banked
  6439  001862  6FC3               	movwf	(___ftdiv@f1+2)& (0+255),b
  6440  001864  C19C  F0C4         	movff	Temp_Convert@steinhart,___ftdiv@f2
  6441  001868  C19D  F0C5         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  6442  00186C  C19E  F0C6         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  6443  001870  EC29  F010         	call	___ftdiv	;wreg free
  6444  001874  C0C1  F19C         	movff	?___ftdiv,Temp_Convert@steinhart
  6445  001878  C0C2  F19D         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6446  00187C  C0C3  F19E         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6447                           
  6448                           ;Tempeture.c: 70: steinhart -= 273.15;
  6449  001880  C19C  F0EB         	movff	Temp_Convert@steinhart,___ftsub@f1
  6450  001884  C19D  F0EC         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  6451  001888  C19E  F0ED         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  6452  00188C  0E93               	movlw	147
  6453  00188E  0100               	movlb	0	; () banked
  6454  001890  6FEE               	movwf	___ftsub@f2& (0+255),b
  6455  001892  0E88               	movlw	136
  6456  001894  0100               	movlb	0	; () banked
  6457  001896  6FEF               	movwf	(___ftsub@f2+1)& (0+255),b
  6458  001898  0E43               	movlw	67
  6459  00189A  0100               	movlb	0	; () banked
  6460  00189C  6FF0               	movwf	(___ftsub@f2+2)& (0+255),b
  6461  00189E  ECB2  F01A         	call	___ftsub	;wreg free
  6462  0018A2  C0EB  F19C         	movff	?___ftsub,Temp_Convert@steinhart
  6463  0018A6  C0EC  F19D         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  6464  0018AA  C0ED  F19E         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  6465                           
  6466                           ;Tempeture.c: 71: steinhart = (steinhart * 1.800) + 32.00;
  6467  0018AE  0E66               	movlw	102
  6468  0018B0  0100               	movlb	0	; () banked
  6469  0018B2  6FD3               	movwf	___ftmul@f2& (0+255),b
  6470  0018B4  0EE6               	movlw	230
  6471  0018B6  0100               	movlb	0	; () banked
  6472  0018B8  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  6473  0018BA  0E3F               	movlw	63
  6474  0018BC  0100               	movlb	0	; () banked
  6475  0018BE  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  6476  0018C0  C19C  F0D0         	movff	Temp_Convert@steinhart,___ftmul@f1
  6477  0018C4  C19D  F0D1         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  6478  0018C8  C19E  F0D2         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  6479  0018CC  EC15  F00E         	call	___ftmul	;wreg free
  6480  0018D0  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6481  0018D4  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6482  0018D8  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6483  0018DC  0E00               	movlw	0
  6484  0018DE  0100               	movlb	0	; () banked
  6485  0018E0  6FE2               	movwf	___ftadd@f2& (0+255),b
  6486  0018E2  0E00               	movlw	0
  6487  0018E4  0100               	movlb	0	; () banked
  6488  0018E6  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  6489  0018E8  0E42               	movlw	66
  6490  0018EA  0100               	movlb	0	; () banked
  6491  0018EC  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  6492  0018EE  EC5C  F00A         	call	___ftadd	;wreg free
  6493  0018F2  C0DF  F19C         	movff	?___ftadd,Temp_Convert@steinhart
  6494  0018F6  C0E0  F19D         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6495  0018FA  C0E1  F19E         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6496                           
  6497                           ;Tempeture.c: 72: TmpTemp_DegF[x] = steinhart;
  6498  0018FE  C19A  F01B         	movff	Temp_Convert@x,___wmul@multiplier
  6499  001902  C19B  F01C         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  6500  001906  0E00               	movlw	0
  6501  001908  6E1E               	movwf	___wmul@multiplicand+1,c
  6502  00190A  0E03               	movlw	3
  6503  00190C  6E1D               	movwf	___wmul@multiplicand,c
  6504  00190E  EC5E  F01C         	call	___wmul	;wreg free
  6505  001912  0EAD               	movlw	low _TmpTemp_DegF
  6506  001914  241B               	addwf	?___wmul,w,c
  6507  001916  6ED9               	movwf	fsr2l,c
  6508  001918  0E00               	movlw	high _TmpTemp_DegF
  6509  00191A  201C               	addwfc	?___wmul+1,w,c
  6510  00191C  6EDA               	movwf	fsr2h,c
  6511  00191E  C19C  FFDE         	movff	Temp_Convert@steinhart,postinc2
  6512  001922  C19D  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  6513  001926  C19E  FFDE         	movff	Temp_Convert@steinhart+2,postinc2
  6514  00192A  0101               	movlb	1	; () banked
  6515  00192C  4B9A               	infsnz	Temp_Convert@x& (0+255),f,b
  6516  00192E  2B9B               	incf	(Temp_Convert@x+1)& (0+255),f,b
  6517                           
  6518                           ; BSR set to: 1
  6519  001930  0101               	movlb	1	; () banked
  6520  001932  BF9B               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  6521  001934  D712               	goto	l5285
  6522  001936  0101               	movlb	1	; () banked
  6523  001938  519B               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6524  00193A  E102               	bnz	l5309
  6525  00193C  D707               	goto	L1
  6526  00193E  D000               	goto	l5309
  6527  001940                     l5309:
  6528                           
  6529                           ; BSR set to: 1
  6530                           ;Tempeture.c: 73: }
  6531                           ;Tempeture.c: 74: Temp_Filter();
  6532  001940  ECA3  F00C         	call	_Temp_Filter	;wreg free
  6533  001944  0012               	return		;funcret
  6534  001946                     __end_of_Temp_Convert:
  6535                           	opt stack 0
  6536                           tosu	equ	0xFFF
  6537                           tosh	equ	0xFFE
  6538                           tosl	equ	0xFFD
  6539                           pclath	equ	0xFFA
  6540                           tblptru	equ	0xFF8
  6541                           tblptrh	equ	0xFF7
  6542                           tblptrl	equ	0xFF6
  6543                           tablat	equ	0xFF5
  6544                           prodh	equ	0xFF4
  6545                           prodl	equ	0xFF3
  6546                           intcon	equ	0xFF2
  6547                           postinc0	equ	0xFEE
  6548                           wreg	equ	0xFE8
  6549                           postdec1	equ	0xFE5
  6550                           fsr1l	equ	0xFE1
  6551                           indf2	equ	0xFDF
  6552                           postinc2	equ	0xFDE
  6553                           postdec2	equ	0xFDD
  6554                           plusw2	equ	0xFDB
  6555                           fsr2h	equ	0xFDA
  6556                           fsr2l	equ	0xFD9
  6557                           status	equ	0xFD8
  6558                           
  6559 ;; *************** function _log *****************
  6560 ;; Defined at:
  6561 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;  x               3    3[BANK1 ] int 
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;  exponent        2    6[BANK1 ] int 
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  3    3[BANK1 ] int 
  6568 ;; Registers used:
  6569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6575 ;;      Params:         0       0       3       0       0       0       0
  6576 ;;      Locals:         0       0       2       0       0       0       0
  6577 ;;      Temps:          0       0       0       0       0       0       0
  6578 ;;      Totals:         0       0       5       0       0       0       0
  6579 ;;Total ram usage:        5 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    7
  6582 ;; This function calls:
  6583 ;;		___awtoft
  6584 ;;		___ftadd
  6585 ;;		___ftmul
  6586 ;;		_eval_poly
  6587 ;;		_frexp
  6588 ;; This function is called by:
  6589 ;;		_Temp_Convert
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           	psect	text27
  6594  0021A4                     __ptext27:
  6595                           	opt stack 0
  6596  0021A4                     _log:
  6597                           	opt stack 22
  6598                           
  6599                           ;incstack = 0
  6600  0021A4  0101               	movlb	1	; () banked
  6601  0021A6  AF93               	btfss	(log@x+2)& (0+255),7,b
  6602  0021A8  D00F               	goto	l4891
  6603                           
  6604                           ; BSR set to: 1
  6605  0021AA  0E00               	movlw	0
  6606  0021AC  0100               	movlb	0	; () banked
  6607  0021AE  6F95               	movwf	(_errno+1)& (0+255),b
  6608  0021B0  0E21               	movlw	33
  6609  0021B2  6F94               	movwf	_errno& (0+255),b
  6610  0021B4  0E00               	movlw	0
  6611  0021B6  0101               	movlb	1	; () banked
  6612  0021B8  6F91               	movwf	?_log& (0+255),b
  6613  0021BA  0E00               	movlw	0
  6614  0021BC  0101               	movlb	1	; () banked
  6615  0021BE  6F92               	movwf	(?_log+1)& (0+255),b
  6616  0021C0  0E00               	movlw	0
  6617  0021C2  0101               	movlb	1	; () banked
  6618  0021C4  6F93               	movwf	(?_log+2)& (0+255),b
  6619                           
  6620                           ; BSR set to: 1
  6621  0021C6  0012               	return	
  6622  0021C8                     l4891:
  6623                           
  6624                           ; BSR set to: 1
  6625  0021C8  0101               	movlb	1	; () banked
  6626  0021CA  5191               	movf	log@x& (0+255),w,b
  6627  0021CC  0101               	movlb	1	; () banked
  6628  0021CE  1192               	iorwf	(log@x+1)& (0+255),w,b
  6629  0021D0  0101               	movlb	1	; () banked
  6630  0021D2  1193               	iorwf	(log@x+2)& (0+255),w,b
  6631  0021D4  A4D8               	btfss	status,2,c
  6632  0021D6  D00F               	goto	l4897
  6633                           
  6634                           ; BSR set to: 1
  6635  0021D8  0E00               	movlw	0
  6636  0021DA  0100               	movlb	0	; () banked
  6637  0021DC  6F95               	movwf	(_errno+1)& (0+255),b
  6638  0021DE  0E22               	movlw	34
  6639  0021E0  6F94               	movwf	_errno& (0+255),b
  6640  0021E2  0E00               	movlw	0
  6641  0021E4  0101               	movlb	1	; () banked
  6642  0021E6  6F91               	movwf	?_log& (0+255),b
  6643  0021E8  0E00               	movlw	0
  6644  0021EA  0101               	movlb	1	; () banked
  6645  0021EC  6F92               	movwf	(?_log+1)& (0+255),b
  6646  0021EE  0E00               	movlw	0
  6647  0021F0  0101               	movlb	1	; () banked
  6648  0021F2  6F93               	movwf	(?_log+2)& (0+255),b
  6649                           
  6650                           ; BSR set to: 1
  6651  0021F4  0012               	return	
  6652  0021F6                     l4897:
  6653                           
  6654                           ; BSR set to: 1
  6655  0021F6  0E00               	movlw	0
  6656  0021F8  0100               	movlb	0	; () banked
  6657  0021FA  6FD3               	movwf	___ftmul@f2& (0+255),b
  6658  0021FC  0E00               	movlw	0
  6659  0021FE  0100               	movlb	0	; () banked
  6660  002200  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  6661  002202  0E40               	movlw	64
  6662  002204  0100               	movlb	0	; () banked
  6663  002206  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  6664  002208  0E94               	movlw	low log@exponent
  6665  00220A  6E1E               	movwf	frexp@eptr,c
  6666  00220C  0E01               	movlw	high log@exponent
  6667  00220E  6E1F               	movwf	frexp@eptr+1,c
  6668  002210  C191  F01B         	movff	log@x,frexp@value
  6669  002214  C192  F01C         	movff	log@x+1,frexp@value+1
  6670  002218  C193  F01D         	movff	log@x+2,frexp@value+2
  6671  00221C  EC0A  F019         	call	_frexp	;wreg free
  6672  002220  C01B  F0D0         	movff	?_frexp,___ftmul@f1
  6673  002224  C01C  F0D1         	movff	?_frexp+1,___ftmul@f1+1
  6674  002228  C01D  F0D2         	movff	?_frexp+2,___ftmul@f1+2
  6675  00222C  EC15  F00E         	call	___ftmul	;wreg free
  6676  002230  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6677  002234  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6678  002238  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6679  00223C  0E00               	movlw	0
  6680  00223E  0100               	movlb	0	; () banked
  6681  002240  6FE2               	movwf	___ftadd@f2& (0+255),b
  6682  002242  0E80               	movlw	128
  6683  002244  0100               	movlb	0	; () banked
  6684  002246  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  6685  002248  0EBF               	movlw	191
  6686  00224A  0100               	movlb	0	; () banked
  6687  00224C  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  6688  00224E  EC5C  F00A         	call	___ftadd	;wreg free
  6689  002252  C0DF  F191         	movff	?___ftadd,log@x
  6690  002256  C0E0  F192         	movff	?___ftadd+1,log@x+1
  6691  00225A  C0E1  F193         	movff	?___ftadd+2,log@x+2
  6692  00225E  0101               	movlb	1	; () banked
  6693  002260  0794               	decf	log@exponent& (0+255),f,b
  6694  002262  A0D8               	btfss	status,0,c
  6695  002264  0795               	decf	(log@exponent+1)& (0+255),f,b
  6696                           
  6697                           ; BSR set to: 1
  6698  002266  C191  F0EB         	movff	log@x,eval_poly@x
  6699  00226A  C192  F0EC         	movff	log@x+1,eval_poly@x+1
  6700  00226E  C193  F0ED         	movff	log@x+2,eval_poly@x+2
  6701  002272  0E01               	movlw	low log@coeff
  6702  002274  0100               	movlb	0	; () banked
  6703  002276  6FEE               	movwf	eval_poly@d& (0+255),b
  6704  002278  0E06               	movlw	high log@coeff
  6705  00227A  0100               	movlb	0	; () banked
  6706  00227C  6FEF               	movwf	(eval_poly@d+1)& (0+255),b
  6707  00227E  0E00               	movlw	0
  6708  002280  0100               	movlb	0	; () banked
  6709  002282  6FF1               	movwf	(eval_poly@n+1)& (0+255),b
  6710  002284  0E08               	movlw	8
  6711  002286  6FF0               	movwf	eval_poly@n& (0+255),b
  6712  002288  EC11  F015         	call	_eval_poly	;wreg free
  6713  00228C  C0EB  F191         	movff	?_eval_poly,log@x
  6714  002290  C0EC  F192         	movff	?_eval_poly+1,log@x+1
  6715  002294  C0ED  F193         	movff	?_eval_poly+2,log@x+2
  6716  002298  0E72               	movlw	114
  6717  00229A  0100               	movlb	0	; () banked
  6718  00229C  6FD3               	movwf	___ftmul@f2& (0+255),b
  6719  00229E  0E31               	movlw	49
  6720  0022A0  0100               	movlb	0	; () banked
  6721  0022A2  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  6722  0022A4  0E3F               	movlw	63
  6723  0022A6  0100               	movlb	0	; () banked
  6724  0022A8  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  6725  0022AA  C194  F023         	movff	log@exponent,___awtoft@c
  6726  0022AE  C195  F024         	movff	log@exponent+1,___awtoft@c+1
  6727  0022B2  EC48  F01B         	call	___awtoft	;wreg free
  6728  0022B6  C023  F0D0         	movff	?___awtoft,___ftmul@f1
  6729  0022BA  C024  F0D1         	movff	?___awtoft+1,___ftmul@f1+1
  6730  0022BE  C025  F0D2         	movff	?___awtoft+2,___ftmul@f1+2
  6731  0022C2  EC15  F00E         	call	___ftmul	;wreg free
  6732  0022C6  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6733  0022CA  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6734  0022CE  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6735  0022D2  C191  F0E2         	movff	log@x,___ftadd@f2
  6736  0022D6  C192  F0E3         	movff	log@x+1,___ftadd@f2+1
  6737  0022DA  C193  F0E4         	movff	log@x+2,___ftadd@f2+2
  6738  0022DE  EC5C  F00A         	call	___ftadd	;wreg free
  6739  0022E2  C0DF  F191         	movff	?___ftadd,?_log
  6740  0022E6  C0E0  F192         	movff	?___ftadd+1,?_log+1
  6741  0022EA  C0E1  F193         	movff	?___ftadd+2,?_log+2
  6742  0022EE  0012               	return	
  6743  0022F0  0012               	return		;funcret
  6744  0022F2                     __end_of_log:
  6745                           	opt stack 0
  6746                           tosu	equ	0xFFF
  6747                           tosh	equ	0xFFE
  6748                           tosl	equ	0xFFD
  6749                           pclath	equ	0xFFA
  6750                           tblptru	equ	0xFF8
  6751                           tblptrh	equ	0xFF7
  6752                           tblptrl	equ	0xFF6
  6753                           tablat	equ	0xFF5
  6754                           prodh	equ	0xFF4
  6755                           prodl	equ	0xFF3
  6756                           intcon	equ	0xFF2
  6757                           postinc0	equ	0xFEE
  6758                           wreg	equ	0xFE8
  6759                           postdec1	equ	0xFE5
  6760                           fsr1l	equ	0xFE1
  6761                           indf2	equ	0xFDF
  6762                           postinc2	equ	0xFDE
  6763                           postdec2	equ	0xFDD
  6764                           plusw2	equ	0xFDB
  6765                           fsr2h	equ	0xFDA
  6766                           fsr2l	equ	0xFD9
  6767                           status	equ	0xFD8
  6768                           
  6769 ;; *************** function _frexp *****************
  6770 ;; Defined at:
  6771 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;  value           3   26[COMRAM] int 
  6774 ;;  eptr            2   29[COMRAM] PTR int 
  6775 ;;		 -> log@exponent(2), 
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  3   26[COMRAM] PTR int 
  6780 ;; Registers used:
  6781 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6787 ;;      Params:         5       0       0       0       0       0       0
  6788 ;;      Locals:         0       0       0       0       0       0       0
  6789 ;;      Temps:          2       0       0       0       0       0       0
  6790 ;;      Totals:         7       0       0       0       0       0       0
  6791 ;;Total ram usage:        7 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    4
  6794 ;; This function calls:
  6795 ;;		Nothing
  6796 ;; This function is called by:
  6797 ;;		_log
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text28
  6802  003214                     __ptext28:
  6803                           	opt stack 0
  6804  003214                     _frexp:
  6805                           	opt stack 24
  6806                           
  6807                           ;incstack = 0
  6808  003214  501B               	movf	frexp@value,w,c
  6809  003216  101C               	iorwf	frexp@value+1,w,c
  6810  003218  101D               	iorwf	frexp@value+2,w,c
  6811  00321A  A4D8               	btfss	status,2,c
  6812  00321C  D00F               	goto	l4803
  6813  00321E  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6814  003222  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6815  003226  0E00               	movlw	0
  6816  003228  6EDE               	movwf	postinc2,c
  6817  00322A  0E00               	movlw	0
  6818  00322C  6EDD               	movwf	postdec2,c
  6819  00322E  0E00               	movlw	0
  6820  003230  6E1B               	movwf	?_frexp,c
  6821  003232  0E00               	movlw	0
  6822  003234  6E1C               	movwf	?_frexp+1,c
  6823  003236  0E00               	movlw	0
  6824  003238  6E1D               	movwf	?_frexp+2,c
  6825  00323A  0012               	return	
  6826  00323C                     l4803:
  6827  00323C  501D               	movf	frexp@value+2,w,c
  6828  00323E  0B7F               	andlw	127
  6829  003240  6E20               	movwf	??_frexp& (0+255),c
  6830  003242  6A21               	clrf	(??_frexp+1)& (0+255),c
  6831  003244  90D8               	bcf	status,0,c
  6832  003246  3620               	rlcf	??_frexp,f,c
  6833  003248  3621               	rlcf	??_frexp+1,f,c
  6834  00324A  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6835  00324E  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6836  003252  C020  FFDE         	movff	??_frexp,postinc2
  6837  003256  C021  FFDD         	movff	??_frexp+1,postdec2
  6838  00325A  AE1C               	btfss	frexp@value+1,7,c
  6839  00325C  D003               	goto	u5050
  6840  00325E  6A20               	clrf	??_frexp& (0+255),c
  6841  003260  2A20               	incf	??_frexp& (0+255),f,c
  6842  003262  D001               	goto	u5058
  6843  003264                     u5050:
  6844  003264  6A20               	clrf	??_frexp& (0+255),c
  6845  003266                     u5058:
  6846  003266  5020               	movf	??_frexp,w,c
  6847  003268  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6848  00326C  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6849  003270  12DE               	iorwf	postinc2,f,c
  6850  003272  0E00               	movlw	0
  6851  003274  12DD               	iorwf	postdec2,f,c
  6852  003276  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6853  00327A  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6854  00327E  0E82               	movlw	130
  6855  003280  26DE               	addwf	postinc2,f,c
  6856  003282  0EFF               	movlw	255
  6857  003284  22DD               	addwfc	postdec2,f,c
  6858  003286  801D               	bsf	frexp@value+2,0,c
  6859  003288  821D               	bsf	frexp@value+2,1,c
  6860  00328A  841D               	bsf	frexp@value+2,2,c
  6861  00328C  861D               	bsf	frexp@value+2,3,c
  6862  00328E  881D               	bsf	frexp@value+2,4,c
  6863  003290  8A1D               	bsf	frexp@value+2,5,c
  6864  003292  9C1D               	bcf	frexp@value+2,6,c
  6865  003294  9E1C               	bcf	frexp@value+1,7,c
  6866  003296  C01B  F01B         	movff	frexp@value,?_frexp
  6867  00329A  C01C  F01C         	movff	frexp@value+1,?_frexp+1
  6868  00329E  C01D  F01D         	movff	frexp@value+2,?_frexp+2
  6869  0032A2  0012               	return	
  6870  0032A4  0012               	return		;funcret
  6871  0032A6                     __end_of_frexp:
  6872                           	opt stack 0
  6873                           tosu	equ	0xFFF
  6874                           tosh	equ	0xFFE
  6875                           tosl	equ	0xFFD
  6876                           pclath	equ	0xFFA
  6877                           tblptru	equ	0xFF8
  6878                           tblptrh	equ	0xFF7
  6879                           tblptrl	equ	0xFF6
  6880                           tablat	equ	0xFF5
  6881                           prodh	equ	0xFF4
  6882                           prodl	equ	0xFF3
  6883                           intcon	equ	0xFF2
  6884                           postinc0	equ	0xFEE
  6885                           wreg	equ	0xFE8
  6886                           postdec1	equ	0xFE5
  6887                           fsr1l	equ	0xFE1
  6888                           indf2	equ	0xFDF
  6889                           postinc2	equ	0xFDE
  6890                           postdec2	equ	0xFDD
  6891                           plusw2	equ	0xFDB
  6892                           fsr2h	equ	0xFDA
  6893                           fsr2l	equ	0xFD9
  6894                           status	equ	0xFD8
  6895                           
  6896 ;; *************** function _eval_poly *****************
  6897 ;; Defined at:
  6898 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  6899 ;; Parameters:    Size  Location     Type
  6900 ;;  x               3   42[BANK0 ] PTR int 
  6901 ;;  d               2   45[BANK0 ] PTR const 
  6902 ;;		 -> log@coeff(27), 
  6903 ;;  n               2   47[BANK0 ] int 
  6904 ;; Auto vars:     Size  Location     Type
  6905 ;;  res             3    0[BANK1 ] int 
  6906 ;; Return value:  Size  Location     Type
  6907 ;;                  3   42[BANK0 ] int 
  6908 ;; Registers used:
  6909 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6910 ;; Tracked objects:
  6911 ;;		On entry : 0/0
  6912 ;;		On exit  : 0/0
  6913 ;;		Unchanged: 0/0
  6914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6915 ;;      Params:         0       7       0       0       0       0       0
  6916 ;;      Locals:         0       0       3       0       0       0       0
  6917 ;;      Temps:          0       2       0       0       0       0       0
  6918 ;;      Totals:         0       9       3       0       0       0       0
  6919 ;;Total ram usage:       12 bytes
  6920 ;; Hardware stack levels used:    1
  6921 ;; Hardware stack levels required when called:    6
  6922 ;; This function calls:
  6923 ;;		___ftadd
  6924 ;;		___ftmul
  6925 ;;		___wmul
  6926 ;; This function is called by:
  6927 ;;		_log
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           	psect	text29
  6932  002A22                     __ptext29:
  6933                           	opt stack 0
  6934  002A22                     _eval_poly:
  6935                           	opt stack 22
  6936                           
  6937                           ;incstack = 0
  6938  002A22  C0F0  F01B         	movff	eval_poly@n,___wmul@multiplier
  6939  002A26  C0F1  F01C         	movff	eval_poly@n+1,___wmul@multiplier+1
  6940  002A2A  0E00               	movlw	0
  6941  002A2C  6E1E               	movwf	___wmul@multiplicand+1,c
  6942  002A2E  0E03               	movlw	3
  6943  002A30  6E1D               	movwf	___wmul@multiplicand,c
  6944  002A32  EC5E  F01C         	call	___wmul	;wreg free
  6945  002A36  C0EE  F0F2         	movff	eval_poly@d,??_eval_poly
  6946  002A3A  C0EF  F0F3         	movff	eval_poly@d+1,??_eval_poly+1
  6947  002A3E  501B               	movf	?___wmul,w,c
  6948  002A40  0100               	movlb	0	; () banked
  6949  002A42  27F2               	addwf	??_eval_poly& (0+255),f,b
  6950  002A44  501C               	movf	?___wmul+1,w,c
  6951  002A46  0100               	movlb	0	; () banked
  6952  002A48  23F3               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6953  002A4A  C0F2  FFF6         	movff	??_eval_poly,tblptrl
  6954  002A4E  C0F3  FFF7         	movff	??_eval_poly+1,tblptrh
  6955  002A52                     	if	0	;tblptru may be non-zero
  6956  002A52                     	endif
  6957  002A52                     	if	0	;tblptru may be non-zero
  6958  002A52                     	endif
  6959  002A52  0009               	tblrd		*+
  6960  002A54  CFF5 F18E          	movff	tablat,eval_poly@res
  6961  002A58  0009               	tblrd		*+
  6962  002A5A  CFF5 F18F          	movff	tablat,eval_poly@res+1
  6963  002A5E  000A               	tblrd		*-
  6964  002A60  CFF5 F190          	movff	tablat,eval_poly@res+2
  6965  002A64  D042               	goto	l4819
  6966  002A66                     l4817:
  6967                           
  6968                           ; BSR set to: 0
  6969  002A66  C18E  F0D3         	movff	eval_poly@res,___ftmul@f2
  6970  002A6A  C18F  F0D4         	movff	eval_poly@res+1,___ftmul@f2+1
  6971  002A6E  C190  F0D5         	movff	eval_poly@res+2,___ftmul@f2+2
  6972  002A72  C0EB  F0D0         	movff	eval_poly@x,___ftmul@f1
  6973  002A76  C0EC  F0D1         	movff	eval_poly@x+1,___ftmul@f1+1
  6974  002A7A  C0ED  F0D2         	movff	eval_poly@x+2,___ftmul@f1+2
  6975  002A7E  EC15  F00E         	call	___ftmul	;wreg free
  6976  002A82  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6977  002A86  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6978  002A8A  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6979  002A8E  0E00               	movlw	0
  6980  002A90  6E1E               	movwf	___wmul@multiplicand+1,c
  6981  002A92  0E03               	movlw	3
  6982  002A94  6E1D               	movwf	___wmul@multiplicand,c
  6983  002A96  0100               	movlb	0	; () banked
  6984  002A98  07F0               	decf	eval_poly@n& (0+255),f,b
  6985  002A9A  A0D8               	btfss	status,0,c
  6986  002A9C  07F1               	decf	(eval_poly@n+1)& (0+255),f,b
  6987  002A9E  C0F0  F01B         	movff	eval_poly@n,___wmul@multiplier
  6988  002AA2  C0F1  F01C         	movff	eval_poly@n+1,___wmul@multiplier+1
  6989  002AA6  EC5E  F01C         	call	___wmul	;wreg free
  6990  002AAA  C0EE  F0F2         	movff	eval_poly@d,??_eval_poly
  6991  002AAE  C0EF  F0F3         	movff	eval_poly@d+1,??_eval_poly+1
  6992  002AB2  501B               	movf	?___wmul,w,c
  6993  002AB4  0100               	movlb	0	; () banked
  6994  002AB6  27F2               	addwf	??_eval_poly& (0+255),f,b
  6995  002AB8  501C               	movf	?___wmul+1,w,c
  6996  002ABA  0100               	movlb	0	; () banked
  6997  002ABC  23F3               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6998  002ABE  C0F2  FFF6         	movff	??_eval_poly,tblptrl
  6999  002AC2  C0F3  FFF7         	movff	??_eval_poly+1,tblptrh
  7000  002AC6                     	if	0	;tblptru may be non-zero
  7001  002AC6                     	endif
  7002  002AC6                     	if	0	;tblptru may be non-zero
  7003  002AC6                     	endif
  7004  002AC6  0009               	tblrd		*+
  7005  002AC8  CFF5 F0E2          	movff	tablat,___ftadd@f2
  7006  002ACC  0009               	tblrd		*+
  7007  002ACE  CFF5 F0E3          	movff	tablat,___ftadd@f2+1
  7008  002AD2  000A               	tblrd		*-
  7009  002AD4  CFF5 F0E4          	movff	tablat,___ftadd@f2+2
  7010  002AD8  EC5C  F00A         	call	___ftadd	;wreg free
  7011  002ADC  C0DF  F18E         	movff	?___ftadd,eval_poly@res
  7012  002AE0  C0E0  F18F         	movff	?___ftadd+1,eval_poly@res+1
  7013  002AE4  C0E1  F190         	movff	?___ftadd+2,eval_poly@res+2
  7014  002AE8  D000               	goto	l4819
  7015  002AEA                     l4819:
  7016  002AEA  0100               	movlb	0	; () banked
  7017  002AEC  51F0               	movf	eval_poly@n& (0+255),w,b
  7018  002AEE  0100               	movlb	0	; () banked
  7019  002AF0  11F1               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7020  002AF2  A4D8               	btfss	status,2,c
  7021  002AF4  D7B8               	goto	l4817
  7022                           
  7023                           ; BSR set to: 0
  7024  002AF6  C18E  F0EB         	movff	eval_poly@res,?_eval_poly
  7025  002AFA  C18F  F0EC         	movff	eval_poly@res+1,?_eval_poly+1
  7026  002AFE  C190  F0ED         	movff	eval_poly@res+2,?_eval_poly+2
  7027                           
  7028                           ; BSR set to: 0
  7029  002B02  0012               	return		;funcret
  7030  002B04                     __end_of_eval_poly:
  7031                           	opt stack 0
  7032                           tosu	equ	0xFFF
  7033                           tosh	equ	0xFFE
  7034                           tosl	equ	0xFFD
  7035                           pclath	equ	0xFFA
  7036                           tblptru	equ	0xFF8
  7037                           tblptrh	equ	0xFF7
  7038                           tblptrl	equ	0xFF6
  7039                           tablat	equ	0xFF5
  7040                           prodh	equ	0xFF4
  7041                           prodl	equ	0xFF3
  7042                           intcon	equ	0xFF2
  7043                           postinc0	equ	0xFEE
  7044                           wreg	equ	0xFE8
  7045                           postdec1	equ	0xFE5
  7046                           fsr1l	equ	0xFE1
  7047                           indf2	equ	0xFDF
  7048                           postinc2	equ	0xFDE
  7049                           postdec2	equ	0xFDD
  7050                           plusw2	equ	0xFDB
  7051                           fsr2h	equ	0xFDA
  7052                           fsr2l	equ	0xFD9
  7053                           status	equ	0xFD8
  7054                           
  7055 ;; *************** function ___awtoft *****************
  7056 ;; Defined at:
  7057 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;  c               2   34[COMRAM] int 
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;  sign            1   37[COMRAM] unsigned char 
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  3   34[COMRAM] float 
  7064 ;; Registers used:
  7065 ;;		wreg, status,2, status,0, cstack
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7071 ;;      Params:         3       0       0       0       0       0       0
  7072 ;;      Locals:         1       0       0       0       0       0       0
  7073 ;;      Temps:          0       0       0       0       0       0       0
  7074 ;;      Totals:         4       0       0       0       0       0       0
  7075 ;;Total ram usage:        4 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:    5
  7078 ;; This function calls:
  7079 ;;		___ftpack
  7080 ;; This function is called by:
  7081 ;;		_Temp_Convert
  7082 ;;		_log
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           	psect	text30
  7087  003690                     __ptext30:
  7088                           	opt stack 0
  7089  003690                     ___awtoft:
  7090                           	opt stack 23
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;incstack = 0
  7094  003690  0E00               	movlw	0
  7095  003692  6E26               	movwf	___awtoft@sign,c
  7096  003694  AE24               	btfss	___awtoft@c+1,7,c
  7097  003696  D007               	goto	l4791
  7098  003698  6C23               	negf	___awtoft@c,c
  7099  00369A  1E24               	comf	___awtoft@c+1,f,c
  7100  00369C  B0D8               	btfsc	status,0,c
  7101  00369E  2A24               	incf	___awtoft@c+1,f,c
  7102  0036A0  0E01               	movlw	1
  7103  0036A2  6E26               	movwf	___awtoft@sign,c
  7104  0036A4  D000               	goto	l4791
  7105  0036A6                     l4791:
  7106  0036A6  C023  F01B         	movff	___awtoft@c,___ftpack@arg
  7107  0036AA  C024  F01C         	movff	___awtoft@c+1,___ftpack@arg+1
  7108  0036AE  6A1D               	clrf	___ftpack@arg+2,c
  7109  0036B0  0E8E               	movlw	142
  7110  0036B2  6E1E               	movwf	___ftpack@exp,c
  7111  0036B4  C026  F01F         	movff	___awtoft@sign,___ftpack@sign
  7112  0036B8  ECCD  F016         	call	___ftpack	;wreg free
  7113  0036BC  C01B  F023         	movff	?___ftpack,?___awtoft
  7114  0036C0  C01C  F024         	movff	?___ftpack+1,?___awtoft+1
  7115  0036C4  C01D  F025         	movff	?___ftpack+2,?___awtoft+2
  7116  0036C8  0012               	return	
  7117  0036CA  0012               	return		;funcret
  7118  0036CC                     __end_of___awtoft:
  7119                           	opt stack 0
  7120                           tosu	equ	0xFFF
  7121                           tosh	equ	0xFFE
  7122                           tosl	equ	0xFFD
  7123                           pclath	equ	0xFFA
  7124                           tblptru	equ	0xFF8
  7125                           tblptrh	equ	0xFF7
  7126                           tblptrl	equ	0xFF6
  7127                           tablat	equ	0xFF5
  7128                           prodh	equ	0xFF4
  7129                           prodl	equ	0xFF3
  7130                           intcon	equ	0xFF2
  7131                           postinc0	equ	0xFEE
  7132                           wreg	equ	0xFE8
  7133                           postdec1	equ	0xFE5
  7134                           fsr1l	equ	0xFE1
  7135                           indf2	equ	0xFDF
  7136                           postinc2	equ	0xFDE
  7137                           postdec2	equ	0xFDD
  7138                           plusw2	equ	0xFDB
  7139                           fsr2h	equ	0xFDA
  7140                           fsr2l	equ	0xFD9
  7141                           status	equ	0xFD8
  7142                           
  7143 ;; *************** function ___ftsub *****************
  7144 ;; Defined at:
  7145 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;  f1              3   42[BANK0 ] float 
  7148 ;;  f2              3   45[BANK0 ] float 
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;		None
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  3   42[BANK0 ] float 
  7153 ;; Registers used:
  7154 ;;		wreg, status,2, status,0, cstack
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7160 ;;      Params:         0       6       0       0       0       0       0
  7161 ;;      Locals:         0       0       0       0       0       0       0
  7162 ;;      Temps:          0       0       0       0       0       0       0
  7163 ;;      Totals:         0       6       0       0       0       0       0
  7164 ;;Total ram usage:        6 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    6
  7167 ;; This function calls:
  7168 ;;		___ftadd
  7169 ;; This function is called by:
  7170 ;;		_Temp_Convert
  7171 ;; This function uses a non-reentrant model
  7172 ;;
  7173                           
  7174                           	psect	text31
  7175  003564                     __ptext31:
  7176                           	opt stack 0
  7177  003564                     ___ftsub:
  7178                           	opt stack 23
  7179                           
  7180                           ;incstack = 0
  7181  003564  0100               	movlb	0	; () banked
  7182  003566  51EE               	movf	___ftsub@f2& (0+255),w,b
  7183  003568  0100               	movlb	0	; () banked
  7184  00356A  11EF               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7185  00356C  0100               	movlb	0	; () banked
  7186  00356E  11F0               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7187  003570  B4D8               	btfsc	status,2,c
  7188  003572  D00A               	goto	l5201
  7189                           
  7190                           ; BSR set to: 0
  7191  003574  0E00               	movlw	0
  7192  003576  0100               	movlb	0	; () banked
  7193  003578  1BEE               	xorwf	___ftsub@f2& (0+255),f,b
  7194  00357A  0E00               	movlw	0
  7195  00357C  0100               	movlb	0	; () banked
  7196  00357E  1BEF               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7197  003580  0E80               	movlw	128
  7198  003582  0100               	movlb	0	; () banked
  7199  003584  1BF0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7200  003586  D000               	goto	l5201
  7201  003588                     l5201:
  7202                           
  7203                           ; BSR set to: 0
  7204  003588  C0EB  F0DF         	movff	___ftsub@f1,___ftadd@f1
  7205  00358C  C0EC  F0E0         	movff	___ftsub@f1+1,___ftadd@f1+1
  7206  003590  C0ED  F0E1         	movff	___ftsub@f1+2,___ftadd@f1+2
  7207  003594  C0EE  F0E2         	movff	___ftsub@f2,___ftadd@f2
  7208  003598  C0EF  F0E3         	movff	___ftsub@f2+1,___ftadd@f2+1
  7209  00359C  C0F0  F0E4         	movff	___ftsub@f2+2,___ftadd@f2+2
  7210  0035A0  EC5C  F00A         	call	___ftadd	;wreg free
  7211  0035A4  C0DF  F0EB         	movff	?___ftadd,?___ftsub
  7212  0035A8  C0E0  F0EC         	movff	?___ftadd+1,?___ftsub+1
  7213  0035AC  C0E1  F0ED         	movff	?___ftadd+2,?___ftsub+2
  7214  0035B0  0012               	return	
  7215  0035B2  0012               	return		;funcret
  7216  0035B4                     __end_of___ftsub:
  7217                           	opt stack 0
  7218                           tosu	equ	0xFFF
  7219                           tosh	equ	0xFFE
  7220                           tosl	equ	0xFFD
  7221                           pclath	equ	0xFFA
  7222                           tblptru	equ	0xFF8
  7223                           tblptrh	equ	0xFF7
  7224                           tblptrl	equ	0xFF6
  7225                           tablat	equ	0xFF5
  7226                           prodh	equ	0xFF4
  7227                           prodl	equ	0xFF3
  7228                           intcon	equ	0xFF2
  7229                           postinc0	equ	0xFEE
  7230                           wreg	equ	0xFE8
  7231                           postdec1	equ	0xFE5
  7232                           fsr1l	equ	0xFE1
  7233                           indf2	equ	0xFDF
  7234                           postinc2	equ	0xFDE
  7235                           postdec2	equ	0xFDD
  7236                           plusw2	equ	0xFDB
  7237                           fsr2h	equ	0xFDA
  7238                           fsr2l	equ	0xFD9
  7239                           status	equ	0xFD8
  7240                           
  7241 ;; *************** function _Temp_Filter *****************
  7242 ;; Defined at:
  7243 ;;		line 45 in file "Tempeture.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;		None
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  x               2   42[BANK0 ] int 
  7248 ;; Return value:  Size  Location     Type
  7249 ;;		None               void
  7250 ;; Registers used:
  7251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7257 ;;      Params:         0       0       0       0       0       0       0
  7258 ;;      Locals:         0       2       0       0       0       0       0
  7259 ;;      Temps:          0       0       0       0       0       0       0
  7260 ;;      Totals:         0       2       0       0       0       0       0
  7261 ;;Total ram usage:        2 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:    6
  7264 ;; This function calls:
  7265 ;;		___ftadd
  7266 ;;		___ftmul
  7267 ;;		___wmul
  7268 ;; This function is called by:
  7269 ;;		_Temp_Convert
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272                           
  7273                           	psect	text32
  7274  001946                     __ptext32:
  7275                           	opt stack 0
  7276  001946                     _Temp_Filter:
  7277                           	opt stack 23
  7278                           
  7279                           ;Tempeture.c: 47: int x;
  7280                           ;Tempeture.c: 48: for (x = 0; x < 4; x++) {
  7281                           
  7282                           ;incstack = 0
  7283  001946  0E00               	movlw	0
  7284  001948  0100               	movlb	0	; () banked
  7285  00194A  6FEC               	movwf	(Temp_Filter@x+1)& (0+255),b
  7286  00194C  0E00               	movlw	0
  7287  00194E  6FEB               	movwf	Temp_Filter@x& (0+255),b
  7288  001950                     l4863:
  7289                           
  7290                           ; BSR set to: 0
  7291  001950  0100               	movlb	0	; () banked
  7292  001952  BFEC               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  7293  001954  D00A               	goto	l4867
  7294  001956  0100               	movlb	0	; () banked
  7295  001958  51EC               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7296  00195A  E172               	bnz	l4873
  7297  00195C  0E04               	movlw	4
  7298  00195E  0100               	movlb	0	; () banked
  7299  001960  5DEB               	subwf	Temp_Filter@x& (0+255),w,b
  7300  001962  B0D8               	btfsc	status,0,c
  7301  001964  D06D               	goto	l4873
  7302  001966  D001               	goto	l4867
  7303                           
  7304                           ; BSR set to: 0
  7305  001968  D06B               	goto	l4873
  7306  00196A                     l4867:
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;Tempeture.c: 49: Temp_DegF[x] = (0.88 * TmpTemp_DegF[x] + ((1 - 0.88) * PrevTemp_DegF[x
      +                          ]));
  7310  00196A  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7311  00196E  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7312  001972  0E00               	movlw	0
  7313  001974  6E1E               	movwf	___wmul@multiplicand+1,c
  7314  001976  0E03               	movlw	3
  7315  001978  6E1D               	movwf	___wmul@multiplicand,c
  7316  00197A  EC5E  F01C         	call	___wmul	;wreg free
  7317  00197E  0EF4               	movlw	low _Temp_DegF
  7318  001980  241B               	addwf	?___wmul,w,c
  7319  001982  6ED9               	movwf	fsr2l,c
  7320  001984  0E00               	movlw	high _Temp_DegF
  7321  001986  201C               	addwfc	?___wmul+1,w,c
  7322  001988  6EDA               	movwf	fsr2h,c
  7323  00198A  0E48               	movlw	72
  7324  00198C  0100               	movlb	0	; () banked
  7325  00198E  6FD3               	movwf	___ftmul@f2& (0+255),b
  7326  001990  0E61               	movlw	97
  7327  001992  0100               	movlb	0	; () banked
  7328  001994  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  7329  001996  0E3F               	movlw	63
  7330  001998  0100               	movlb	0	; () banked
  7331  00199A  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  7332  00199C  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7333  0019A0  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7334  0019A4  0E00               	movlw	0
  7335  0019A6  6E1E               	movwf	___wmul@multiplicand+1,c
  7336  0019A8  0E03               	movlw	3
  7337  0019AA  6E1D               	movwf	___wmul@multiplicand,c
  7338  0019AC  EC5E  F01C         	call	___wmul	;wreg free
  7339  0019B0  0EAD               	movlw	low _TmpTemp_DegF
  7340  0019B2  241B               	addwf	?___wmul,w,c
  7341  0019B4  6EE1               	movwf	fsr1l,c
  7342  0019B6  0E00               	movlw	high _TmpTemp_DegF
  7343  0019B8  201C               	addwfc	?___wmul+1,w,c
  7344  0019BA  6EE2               	movwf	fsr1h,c
  7345  0019BC  CFE6 F0D0          	movff	postinc1,___ftmul@f1
  7346  0019C0  CFE6 F0D1          	movff	postinc1,___ftmul@f1+1
  7347  0019C4  CFE5 F0D2          	movff	postdec1,___ftmul@f1+2
  7348  0019C8  EC15  F00E         	call	___ftmul	;wreg free
  7349  0019CC  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  7350  0019D0  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  7351  0019D4  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  7352  0019D8  0EC3               	movlw	195
  7353  0019DA  0100               	movlb	0	; () banked
  7354  0019DC  6FD3               	movwf	___ftmul@f2& (0+255),b
  7355  0019DE  0EF5               	movlw	245
  7356  0019E0  0100               	movlb	0	; () banked
  7357  0019E2  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  7358  0019E4  0E3D               	movlw	61
  7359  0019E6  0100               	movlb	0	; () banked
  7360  0019E8  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  7361  0019EA  0E00               	movlw	0
  7362  0019EC  6E1E               	movwf	___wmul@multiplicand+1,c
  7363  0019EE  0E03               	movlw	3
  7364  0019F0  6E1D               	movwf	___wmul@multiplicand,c
  7365  0019F2  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7366  0019F6  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7367  0019FA  EC5E  F01C         	call	___wmul	;wreg free
  7368  0019FE  0E3C               	movlw	low _PrevTemp_DegF
  7369  001A00  241B               	addwf	?___wmul,w,c
  7370  001A02  6EE1               	movwf	fsr1l,c
  7371  001A04  0E01               	movlw	high _PrevTemp_DegF
  7372  001A06  201C               	addwfc	?___wmul+1,w,c
  7373  001A08  6EE2               	movwf	fsr1h,c
  7374  001A0A  CFE6 F0D0          	movff	postinc1,___ftmul@f1
  7375  001A0E  CFE6 F0D1          	movff	postinc1,___ftmul@f1+1
  7376  001A12  CFE5 F0D2          	movff	postdec1,___ftmul@f1+2
  7377  001A16  EC15  F00E         	call	___ftmul	;wreg free
  7378  001A1A  C0D0  F0E2         	movff	?___ftmul,___ftadd@f2
  7379  001A1E  C0D1  F0E3         	movff	?___ftmul+1,___ftadd@f2+1
  7380  001A22  C0D2  F0E4         	movff	?___ftmul+2,___ftadd@f2+2
  7381  001A26  EC5C  F00A         	call	___ftadd	;wreg free
  7382  001A2A  C0DF  FFDE         	movff	?___ftadd,postinc2
  7383  001A2E  C0E0  FFDE         	movff	?___ftadd+1,postinc2
  7384  001A32  C0E1  FFDE         	movff	?___ftadd+2,postinc2
  7385  001A36  0100               	movlb	0	; () banked
  7386  001A38  4BEB               	infsnz	Temp_Filter@x& (0+255),f,b
  7387  001A3A  2BEC               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7388  001A3C  D789               	goto	l4863
  7389                           
  7390                           ; BSR set to: 0
  7391  001A3E  D000               	goto	l4873
  7392  001A40                     l4873:
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;Tempeture.c: 50: }
  7396                           ;Tempeture.c: 51: for (x = 0; x < 4; x++) {
  7397  001A40  0E00               	movlw	0
  7398  001A42  0100               	movlb	0	; () banked
  7399  001A44  6FEC               	movwf	(Temp_Filter@x+1)& (0+255),b
  7400  001A46  0E00               	movlw	0
  7401  001A48  6FEB               	movwf	Temp_Filter@x& (0+255),b
  7402  001A4A                     l4875:
  7403                           
  7404                           ; BSR set to: 0
  7405  001A4A  0100               	movlb	0	; () banked
  7406  001A4C  BFEC               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  7407  001A4E  D00A               	goto	l4879
  7408  001A50  0100               	movlb	0	; () banked
  7409  001A52  51EC               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7410  001A54  E132               	bnz	l351
  7411  001A56  0E04               	movlw	4
  7412  001A58  0100               	movlb	0	; () banked
  7413  001A5A  5DEB               	subwf	Temp_Filter@x& (0+255),w,b
  7414  001A5C  B0D8               	btfsc	status,0,c
  7415  001A5E  0012               	return	
  7416  001A60  D001               	goto	l4879
  7417                           
  7418                           ; BSR set to: 0
  7419  001A62  0012               	return	
  7420  001A64                     l4879:
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;Tempeture.c: 52: PrevTemp_DegF[x] = Temp_DegF[x];
  7424  001A64  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7425  001A68  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7426  001A6C  0E00               	movlw	0
  7427  001A6E  6E1E               	movwf	___wmul@multiplicand+1,c
  7428  001A70  0E03               	movlw	3
  7429  001A72  6E1D               	movwf	___wmul@multiplicand,c
  7430  001A74  EC5E  F01C         	call	___wmul	;wreg free
  7431  001A78  0EF4               	movlw	low _Temp_DegF
  7432  001A7A  241B               	addwf	?___wmul,w,c
  7433  001A7C  6ED9               	movwf	fsr2l,c
  7434  001A7E  0E00               	movlw	high _Temp_DegF
  7435  001A80  201C               	addwfc	?___wmul+1,w,c
  7436  001A82  6EDA               	movwf	fsr2h,c
  7437  001A84  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7438  001A88  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7439  001A8C  0E00               	movlw	0
  7440  001A8E  6E1E               	movwf	___wmul@multiplicand+1,c
  7441  001A90  0E03               	movlw	3
  7442  001A92  6E1D               	movwf	___wmul@multiplicand,c
  7443  001A94  EC5E  F01C         	call	___wmul	;wreg free
  7444  001A98  0E3C               	movlw	low _PrevTemp_DegF
  7445  001A9A  241B               	addwf	?___wmul,w,c
  7446  001A9C  6EE1               	movwf	fsr1l,c
  7447  001A9E  0E01               	movlw	high _PrevTemp_DegF
  7448  001AA0  201C               	addwfc	?___wmul+1,w,c
  7449  001AA2  6EE2               	movwf	fsr1h,c
  7450  001AA4  CFDE FFE6          	movff	postinc2,postinc1
  7451  001AA8  CFDE FFE6          	movff	postinc2,postinc1
  7452  001AAC  CFDE FFE6          	movff	postinc2,postinc1
  7453  001AB0  0100               	movlb	0	; () banked
  7454  001AB2  4BEB               	infsnz	Temp_Filter@x& (0+255),f,b
  7455  001AB4  2BEC               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7456  001AB6  D7C9               	goto	l4875
  7457                           
  7458                           ; BSR set to: 0
  7459  001AB8  0012               	return	
  7460  001ABA                     l351:
  7461                           
  7462                           ; BSR set to: 0
  7463  001ABA  0012               	return		;funcret
  7464  001ABC                     __end_of_Temp_Filter:
  7465                           	opt stack 0
  7466                           tosu	equ	0xFFF
  7467                           tosh	equ	0xFFE
  7468                           tosl	equ	0xFFD
  7469                           pclath	equ	0xFFA
  7470                           tblptru	equ	0xFF8
  7471                           tblptrh	equ	0xFF7
  7472                           tblptrl	equ	0xFF6
  7473                           tablat	equ	0xFF5
  7474                           prodh	equ	0xFF4
  7475                           prodl	equ	0xFF3
  7476                           intcon	equ	0xFF2
  7477                           postinc0	equ	0xFEE
  7478                           wreg	equ	0xFE8
  7479                           postinc1	equ	0xFE6
  7480                           postdec1	equ	0xFE5
  7481                           fsr1h	equ	0xFE2
  7482                           fsr1l	equ	0xFE1
  7483                           indf2	equ	0xFDF
  7484                           postinc2	equ	0xFDE
  7485                           postdec2	equ	0xFDD
  7486                           plusw2	equ	0xFDB
  7487                           fsr2h	equ	0xFDA
  7488                           fsr2l	equ	0xFD9
  7489                           status	equ	0xFD8
  7490                           
  7491 ;; *************** function _SYSTEM_Initialize *****************
  7492 ;; Defined at:
  7493 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;		None
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;		None
  7498 ;; Return value:  Size  Location     Type
  7499 ;;		None               void
  7500 ;; Registers used:
  7501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7507 ;;      Params:         0       0       0       0       0       0       0
  7508 ;;      Locals:         0       0       0       0       0       0       0
  7509 ;;      Temps:          0       0       0       0       0       0       0
  7510 ;;      Totals:         0       0       0       0       0       0       0
  7511 ;;Total ram usage:        0 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    7
  7514 ;; This function calls:
  7515 ;;		_ADC_Initialize
  7516 ;;		_EUSART1_Initialize
  7517 ;;		_INTERRUPT_Initialize
  7518 ;;		_OSCILLATOR_Initialize
  7519 ;;		_PIN_MANAGER_Initialize
  7520 ;;		_TMR1_Initialize
  7521 ;;		_begin
  7522 ;; This function is called by:
  7523 ;;		_main
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           	psect	text33
  7528  003392                     __ptext33:
  7529                           	opt stack 0
  7530  003392                     _SYSTEM_Initialize:
  7531                           	opt stack 23
  7532                           
  7533                           ;mcc.c: 113: OSCILLATOR_Initialize();
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;incstack = 0
  7537  003392  EC48  F01D         	call	_OSCILLATOR_Initialize	;wreg free
  7538                           
  7539                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  7540  003396  EC89  F01A         	call	_PIN_MANAGER_Initialize	;wreg free
  7541                           
  7542                           ;mcc.c: 115: INTERRUPT_Initialize();
  7543  00339A  EC55  F01D         	call	_INTERRUPT_Initialize	;wreg free
  7544                           
  7545                           ;mcc.c: 116: ADC_Initialize();
  7546  00339E  EC09  F01D         	call	_ADC_Initialize	;wreg free
  7547                           
  7548                           ;mcc.c: 117: EUSART1_Initialize();
  7549  0033A2  EC66  F01B         	call	_EUSART1_Initialize	;wreg free
  7550                           
  7551                           ;mcc.c: 118: TMR1_Initialize();
  7552  0033A6  EC97  F01C         	call	_TMR1_Initialize	;wreg free
  7553                           
  7554                           ;mcc.c: 119: begin(receiveArray, sizeof (receiveArray), 1, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  7555  0033AA  0E48               	movlw	low _receiveArray
  7556  0033AC  0100               	movlb	0	; () banked
  7557  0033AE  6FC1               	movwf	begin@ptr& (0+255),b
  7558  0033B0  0E01               	movlw	high _receiveArray
  7559  0033B2  0100               	movlb	0	; () banked
  7560  0033B4  6FC2               	movwf	(begin@ptr+1)& (0+255),b
  7561  0033B6  0E28               	movlw	40
  7562  0033B8  0100               	movlb	0	; () banked
  7563  0033BA  6FC3               	movwf	begin@maxSize& (0+255),b
  7564  0033BC  0E01               	movlw	1
  7565  0033BE  0100               	movlb	0	; () banked
  7566  0033C0  6FC4               	movwf	begin@givenAddress& (0+255),b
  7567  0033C2  0E00               	movlw	0
  7568  0033C4  0100               	movlb	0	; () banked
  7569  0033C6  6FC5               	movwf	begin@error& (0+255),b
  7570  0033C8  0E74               	movlw	low _Send_put
  7571  0033CA  0100               	movlb	0	; () banked
  7572  0033CC  6FC6               	movwf	begin@stufftosend& (0+255),b
  7573  0033CE  0E37               	movlw	high _Send_put
  7574  0033D0  0100               	movlb	0	; () banked
  7575  0033D2  6FC7               	movwf	(begin@stufftosend+1)& (0+255),b
  7576  0033D4  0E80               	movlw	low _Receive_get
  7577  0033D6  0100               	movlb	0	; () banked
  7578  0033D8  6FC8               	movwf	begin@stufftoreceive& (0+255),b
  7579  0033DA  0E3A               	movlw	high _Receive_get
  7580  0033DC  0100               	movlb	0	; () banked
  7581  0033DE  6FC9               	movwf	(begin@stufftoreceive+1)& (0+255),b
  7582  0033E0  0EE2               	movlw	low _Receive_available
  7583  0033E2  0100               	movlb	0	; () banked
  7584  0033E4  6FCA               	movwf	begin@stuffavailable& (0+255),b
  7585  0033E6  0E39               	movlw	high _Receive_available
  7586  0033E8  0100               	movlb	0	; () banked
  7587  0033EA  6FCB               	movwf	(begin@stuffavailable+1)& (0+255),b
  7588  0033EC  0E70               	movlw	low _Receive_peek
  7589  0033EE  0100               	movlb	0	; () banked
  7590  0033F0  6FCC               	movwf	begin@stuffpeek& (0+255),b
  7591  0033F2  0E3A               	movlw	high _Receive_peek
  7592  0033F4  0100               	movlb	0	; () banked
  7593  0033F6  6FCD               	movwf	(begin@stuffpeek+1)& (0+255),b
  7594  0033F8  EC31  F01A         	call	_begin	;wreg free
  7595  0033FC  0012               	return		;funcret
  7596  0033FE                     __end_of_SYSTEM_Initialize:
  7597                           	opt stack 0
  7598                           tosu	equ	0xFFF
  7599                           tosh	equ	0xFFE
  7600                           tosl	equ	0xFFD
  7601                           pclath	equ	0xFFA
  7602                           tblptru	equ	0xFF8
  7603                           tblptrh	equ	0xFF7
  7604                           tblptrl	equ	0xFF6
  7605                           tablat	equ	0xFF5
  7606                           prodh	equ	0xFF4
  7607                           prodl	equ	0xFF3
  7608                           intcon	equ	0xFF2
  7609                           postinc0	equ	0xFEE
  7610                           wreg	equ	0xFE8
  7611                           postinc1	equ	0xFE6
  7612                           postdec1	equ	0xFE5
  7613                           fsr1h	equ	0xFE2
  7614                           fsr1l	equ	0xFE1
  7615                           indf2	equ	0xFDF
  7616                           postinc2	equ	0xFDE
  7617                           postdec2	equ	0xFDD
  7618                           plusw2	equ	0xFDB
  7619                           fsr2h	equ	0xFDA
  7620                           fsr2l	equ	0xFD9
  7621                           status	equ	0xFD8
  7622                           
  7623 ;; *************** function _begin *****************
  7624 ;; Defined at:
  7625 ;;		line 18 in file "FastTransfer.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  7628 ;;		 -> receiveArray(40), 
  7629 ;;  maxSize         1    2[BANK0 ] unsigned char 
  7630 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  7631 ;;  error           1    4[BANK0 ] unsigned char 
  7632 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  7633 ;;		 -> Send_put(0), 
  7634 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  7635 ;;		 -> Receive_get(1), 
  7636 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  7637 ;;		 -> Receive_available(2), 
  7638 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  7639 ;;		 -> Receive_peek(1), 
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;		None
  7642 ;; Return value:  Size  Location     Type
  7643 ;;		None               void
  7644 ;; Registers used:
  7645 ;;		wreg, status,2, status,0, cstack
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7651 ;;      Params:         0      13       0       0       0       0       0
  7652 ;;      Locals:         0       0       0       0       0       0       0
  7653 ;;      Temps:          0       0       0       0       0       0       0
  7654 ;;      Totals:         0      13       0       0       0       0       0
  7655 ;;Total ram usage:       13 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; Hardware stack levels required when called:    5
  7658 ;; This function calls:
  7659 ;;		___awdiv
  7660 ;; This function is called by:
  7661 ;;		_SYSTEM_Initialize
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           	psect	text34
  7666  003462                     __ptext34:
  7667                           	opt stack 0
  7668  003462                     _begin:
  7669                           	opt stack 24
  7670                           
  7671                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  7672                           
  7673                           ;incstack = 0
  7674  003462  C0C1  F096         	movff	begin@ptr,_receiveArrayAddress
  7675  003466  C0C2  F097         	movff	begin@ptr+1,_receiveArrayAddress+1
  7676                           
  7677                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  7678  00346A  C0C4  F03E         	movff	begin@givenAddress,_moduleAddress
  7679                           
  7680                           ;FastTransfer.c: 21: serial_write = stufftosend;
  7681  00346E  C0C6  F035         	movff	begin@stufftosend,_serial_write
  7682  003472  C0C7  F036         	movff	begin@stufftosend+1,_serial_write+1
  7683                           
  7684                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  7685  003476  C0CA  F031         	movff	begin@stuffavailable,_serial_available
  7686  00347A  C0CB  F032         	movff	begin@stuffavailable+1,_serial_available+1
  7687                           
  7688                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  7689  00347E  C0CC  F09A         	movff	begin@stuffpeek,_serial_peek
  7690  003482  C0CD  F09B         	movff	begin@stuffpeek+1,_serial_peek+1
  7691                           
  7692                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  7693  003486  C0C8  F033         	movff	begin@stufftoreceive,_serial_read
  7694  00348A  C0C9  F034         	movff	begin@stufftoreceive+1,_serial_read+1
  7695                           
  7696                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  7697  00348E  C0C3  F01B         	movff	begin@maxSize,___awdiv@dividend
  7698  003492  6A1C               	clrf	___awdiv@dividend+1,c
  7699  003494  0E00               	movlw	0
  7700  003496  6E1E               	movwf	___awdiv@divisor+1,c
  7701  003498  0E02               	movlw	2
  7702  00349A  6E1D               	movwf	___awdiv@divisor,c
  7703  00349C  ECE0  F017         	call	___awdiv	;wreg free
  7704  0034A0  501B               	movf	?___awdiv,w,c
  7705  0034A2  6E3D               	movwf	_maxDataAddress,c
  7706                           
  7707                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  7708  0034A4  0E00               	movlw	low _ring_buffer
  7709  0034A6  0100               	movlb	0	; () banked
  7710  0034A8  6F98               	movwf	_sendStructAddress& (0+255),b
  7711  0034AA  0E02               	movlw	high _ring_buffer
  7712  0034AC  0100               	movlb	0	; () banked
  7713  0034AE  6F99               	movwf	(_sendStructAddress+1)& (0+255),b
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;FastTransfer.c: 27: AKNAKsend = error;
  7717  0034B0  C0C5  F039         	movff	begin@error,_AKNAKsend
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  7721  0034B4  0E00               	movlw	0
  7722  0034B6  0100               	movlb	0	; () banked
  7723  0034B8  6F8F               	movwf	(_alignErrorCounter+1)& (0+255),b
  7724  0034BA  0E00               	movlw	0
  7725  0034BC  6F8E               	movwf	_alignErrorCounter& (0+255),b
  7726                           
  7727                           ; BSR set to: 0
  7728  0034BE  0012               	return		;funcret
  7729  0034C0                     __end_of_begin:
  7730                           	opt stack 0
  7731                           tosu	equ	0xFFF
  7732                           tosh	equ	0xFFE
  7733                           tosl	equ	0xFFD
  7734                           pclath	equ	0xFFA
  7735                           tblptru	equ	0xFF8
  7736                           tblptrh	equ	0xFF7
  7737                           tblptrl	equ	0xFF6
  7738                           tablat	equ	0xFF5
  7739                           prodh	equ	0xFF4
  7740                           prodl	equ	0xFF3
  7741                           intcon	equ	0xFF2
  7742                           postinc0	equ	0xFEE
  7743                           wreg	equ	0xFE8
  7744                           postinc1	equ	0xFE6
  7745                           postdec1	equ	0xFE5
  7746                           fsr1h	equ	0xFE2
  7747                           fsr1l	equ	0xFE1
  7748                           indf2	equ	0xFDF
  7749                           postinc2	equ	0xFDE
  7750                           postdec2	equ	0xFDD
  7751                           plusw2	equ	0xFDB
  7752                           fsr2h	equ	0xFDA
  7753                           fsr2l	equ	0xFD9
  7754                           status	equ	0xFD8
  7755                           
  7756 ;; *************** function ___awdiv *****************
  7757 ;; Defined at:
  7758 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;  dividend        2   26[COMRAM] int 
  7761 ;;  divisor         2   28[COMRAM] int 
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;  quotient        2   32[COMRAM] int 
  7764 ;;  sign            1   31[COMRAM] unsigned char 
  7765 ;;  counter         1   30[COMRAM] unsigned char 
  7766 ;; Return value:  Size  Location     Type
  7767 ;;                  2   26[COMRAM] int 
  7768 ;; Registers used:
  7769 ;;		wreg, status,2, status,0
  7770 ;; Tracked objects:
  7771 ;;		On entry : 0/0
  7772 ;;		On exit  : 0/0
  7773 ;;		Unchanged: 0/0
  7774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7775 ;;      Params:         4       0       0       0       0       0       0
  7776 ;;      Locals:         4       0       0       0       0       0       0
  7777 ;;      Temps:          0       0       0       0       0       0       0
  7778 ;;      Totals:         8       0       0       0       0       0       0
  7779 ;;Total ram usage:        8 bytes
  7780 ;; Hardware stack levels used:    1
  7781 ;; Hardware stack levels required when called:    4
  7782 ;; This function calls:
  7783 ;;		Nothing
  7784 ;; This function is called by:
  7785 ;;		_Temp_Convert
  7786 ;;		_begin
  7787 ;; This function uses a non-reentrant model
  7788 ;;
  7789                           
  7790                           	psect	text35
  7791  002FC0                     __ptext35:
  7792                           	opt stack 0
  7793  002FC0                     ___awdiv:
  7794                           	opt stack 25
  7795                           
  7796                           ; BSR set to: 0
  7797                           ;incstack = 0
  7798  002FC0  0E00               	movlw	0
  7799  002FC2  6E20               	movwf	___awdiv@sign,c
  7800  002FC4  AE1E               	btfss	___awdiv@divisor+1,7,c
  7801  002FC6  D007               	goto	l4747
  7802  002FC8  6C1D               	negf	___awdiv@divisor,c
  7803  002FCA  1E1E               	comf	___awdiv@divisor+1,f,c
  7804  002FCC  B0D8               	btfsc	status,0,c
  7805  002FCE  2A1E               	incf	___awdiv@divisor+1,f,c
  7806  002FD0  0E01               	movlw	1
  7807  002FD2  6E20               	movwf	___awdiv@sign,c
  7808  002FD4  D000               	goto	l4747
  7809  002FD6                     l4747:
  7810  002FD6  AE1C               	btfss	___awdiv@dividend+1,7,c
  7811  002FD8  D007               	goto	l4753
  7812  002FDA  6C1B               	negf	___awdiv@dividend,c
  7813  002FDC  1E1C               	comf	___awdiv@dividend+1,f,c
  7814  002FDE  B0D8               	btfsc	status,0,c
  7815  002FE0  2A1C               	incf	___awdiv@dividend+1,f,c
  7816  002FE2  0E01               	movlw	1
  7817  002FE4  1A20               	xorwf	___awdiv@sign,f,c
  7818  002FE6  D000               	goto	l4753
  7819  002FE8                     l4753:
  7820  002FE8  0E00               	movlw	0
  7821  002FEA  6E22               	movwf	___awdiv@quotient+1,c
  7822  002FEC  0E00               	movlw	0
  7823  002FEE  6E21               	movwf	___awdiv@quotient,c
  7824  002FF0  501D               	movf	___awdiv@divisor,w,c
  7825  002FF2  101E               	iorwf	___awdiv@divisor+1,w,c
  7826  002FF4  B4D8               	btfsc	status,2,c
  7827  002FF6  D021               	goto	l4775
  7828  002FF8  0E01               	movlw	1
  7829  002FFA  6E1F               	movwf	___awdiv@counter,c
  7830  002FFC  D005               	goto	l4761
  7831  002FFE                     l4759:
  7832  002FFE  90D8               	bcf	status,0,c
  7833  003000  361D               	rlcf	___awdiv@divisor,f,c
  7834  003002  361E               	rlcf	___awdiv@divisor+1,f,c
  7835  003004  2A1F               	incf	___awdiv@counter,f,c
  7836  003006  D000               	goto	l4761
  7837  003008                     l4761:
  7838  003008  BE1E               	btfsc	___awdiv@divisor+1,7,c
  7839  00300A  D002               	goto	l4763
  7840  00300C  D7F8               	goto	l4759
  7841  00300E  D000               	goto	l4763
  7842  003010                     l4763:
  7843  003010  90D8               	bcf	status,0,c
  7844  003012  3621               	rlcf	___awdiv@quotient,f,c
  7845  003014  3622               	rlcf	___awdiv@quotient+1,f,c
  7846  003016  501D               	movf	___awdiv@divisor,w,c
  7847  003018  5C1B               	subwf	___awdiv@dividend,w,c
  7848  00301A  501E               	movf	___awdiv@divisor+1,w,c
  7849  00301C  581C               	subwfb	___awdiv@dividend+1,w,c
  7850  00301E  A0D8               	btfss	status,0,c
  7851  003020  D006               	goto	l4771
  7852  003022  501D               	movf	___awdiv@divisor,w,c
  7853  003024  5E1B               	subwf	___awdiv@dividend,f,c
  7854  003026  501E               	movf	___awdiv@divisor+1,w,c
  7855  003028  5A1C               	subwfb	___awdiv@dividend+1,f,c
  7856  00302A  8021               	bsf	___awdiv@quotient,0,c
  7857  00302C  D000               	goto	l4771
  7858  00302E                     l4771:
  7859  00302E  90D8               	bcf	status,0,c
  7860  003030  321E               	rrcf	___awdiv@divisor+1,f,c
  7861  003032  321D               	rrcf	___awdiv@divisor,f,c
  7862  003034  2E1F               	decfsz	___awdiv@counter,f,c
  7863  003036  D7EC               	goto	l4763
  7864  003038  D000               	goto	l4775
  7865  00303A                     l4775:
  7866  00303A  5020               	movf	___awdiv@sign,w,c
  7867  00303C  B4D8               	btfsc	status,2,c
  7868  00303E  D005               	goto	l4779
  7869  003040  6C21               	negf	___awdiv@quotient,c
  7870  003042  1E22               	comf	___awdiv@quotient+1,f,c
  7871  003044  B0D8               	btfsc	status,0,c
  7872  003046  2A22               	incf	___awdiv@quotient+1,f,c
  7873  003048  D000               	goto	l4779
  7874  00304A                     l4779:
  7875  00304A  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  7876  00304E  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  7877  003052  0012               	return	
  7878  003054  0012               	return		;funcret
  7879  003056                     __end_of___awdiv:
  7880                           	opt stack 0
  7881                           tosu	equ	0xFFF
  7882                           tosh	equ	0xFFE
  7883                           tosl	equ	0xFFD
  7884                           pclath	equ	0xFFA
  7885                           tblptru	equ	0xFF8
  7886                           tblptrh	equ	0xFF7
  7887                           tblptrl	equ	0xFF6
  7888                           tablat	equ	0xFF5
  7889                           prodh	equ	0xFF4
  7890                           prodl	equ	0xFF3
  7891                           intcon	equ	0xFF2
  7892                           postinc0	equ	0xFEE
  7893                           wreg	equ	0xFE8
  7894                           postinc1	equ	0xFE6
  7895                           postdec1	equ	0xFE5
  7896                           fsr1h	equ	0xFE2
  7897                           fsr1l	equ	0xFE1
  7898                           indf2	equ	0xFDF
  7899                           postinc2	equ	0xFDE
  7900                           postdec2	equ	0xFDD
  7901                           plusw2	equ	0xFDB
  7902                           fsr2h	equ	0xFDA
  7903                           fsr2l	equ	0xFD9
  7904                           status	equ	0xFD8
  7905                           
  7906 ;; *************** function _TMR1_Initialize *****************
  7907 ;; Defined at:
  7908 ;;		line 18 in file "mcc_generated_files/tmr1.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;		None
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;		None
  7913 ;; Return value:  Size  Location     Type
  7914 ;;		None               void
  7915 ;; Registers used:
  7916 ;;		wreg, status,2, cstack
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7922 ;;      Params:         0       0       0       0       0       0       0
  7923 ;;      Locals:         0       0       0       0       0       0       0
  7924 ;;      Temps:          0       0       0       0       0       0       0
  7925 ;;      Totals:         0       0       0       0       0       0       0
  7926 ;;Total ram usage:        0 bytes
  7927 ;; Hardware stack levels used:    1
  7928 ;; Hardware stack levels required when called:    5
  7929 ;; This function calls:
  7930 ;;		_TMR1_StartTimer
  7931 ;; This function is called by:
  7932 ;;		_SYSTEM_Initialize
  7933 ;; This function uses a non-reentrant model
  7934 ;;
  7935                           
  7936                           	psect	text36
  7937  00392E                     __ptext36:
  7938                           	opt stack 0
  7939  00392E                     _TMR1_Initialize:
  7940                           	opt stack 24
  7941                           
  7942                           ;tmr1.c: 23: T1CON = 0x30;
  7943                           
  7944                           ;incstack = 0
  7945  00392E  0E30               	movlw	48
  7946  003930  6ECD               	movwf	4045,c	;volatile
  7947                           
  7948                           ;tmr1.c: 26: T1GCON = 0x00;
  7949  003932  0E00               	movlw	0
  7950  003934  6ECC               	movwf	4044,c	;volatile
  7951                           
  7952                           ;tmr1.c: 29: TMR1H = 0x0B;
  7953  003936  0E0B               	movlw	11
  7954  003938  6ECF               	movwf	4047,c	;volatile
  7955                           
  7956                           ;tmr1.c: 32: TMR1L = 0xDC;
  7957  00393A  0EDC               	movlw	220
  7958  00393C  6ECE               	movwf	4046,c	;volatile
  7959                           
  7960                           ;tmr1.c: 35: timer1ReloadVal=TMR1;
  7961  00393E  CFCE F037          	movff	4046,_timer1ReloadVal	;volatile
  7962  003942  CFCF F038          	movff	4047,_timer1ReloadVal+1	;volatile
  7963                           
  7964                           ;tmr1.c: 38: PIR1bits.TMR1IF = 0;
  7965  003946  909E               	bcf	3998,0,c	;volatile
  7966                           
  7967                           ;tmr1.c: 41: PIE1bits.TMR1IE = 1;
  7968  003948  809D               	bsf	3997,0,c	;volatile
  7969                           
  7970                           ;tmr1.c: 44: TMR1_StartTimer();
  7971  00394A  EC5B  F01D         	call	_TMR1_StartTimer	;wreg free
  7972  00394E  0012               	return		;funcret
  7973  003950                     __end_of_TMR1_Initialize:
  7974                           	opt stack 0
  7975                           tosu	equ	0xFFF
  7976                           tosh	equ	0xFFE
  7977                           tosl	equ	0xFFD
  7978                           pclath	equ	0xFFA
  7979                           tblptru	equ	0xFF8
  7980                           tblptrh	equ	0xFF7
  7981                           tblptrl	equ	0xFF6
  7982                           tablat	equ	0xFF5
  7983                           prodh	equ	0xFF4
  7984                           prodl	equ	0xFF3
  7985                           intcon	equ	0xFF2
  7986                           postinc0	equ	0xFEE
  7987                           wreg	equ	0xFE8
  7988                           postinc1	equ	0xFE6
  7989                           postdec1	equ	0xFE5
  7990                           fsr1h	equ	0xFE2
  7991                           fsr1l	equ	0xFE1
  7992                           indf2	equ	0xFDF
  7993                           postinc2	equ	0xFDE
  7994                           postdec2	equ	0xFDD
  7995                           plusw2	equ	0xFDB
  7996                           fsr2h	equ	0xFDA
  7997                           fsr2l	equ	0xFD9
  7998                           status	equ	0xFD8
  7999                           
  8000 ;; *************** function _TMR1_StartTimer *****************
  8001 ;; Defined at:
  8002 ;;		line 47 in file "mcc_generated_files/tmr1.c"
  8003 ;; Parameters:    Size  Location     Type
  8004 ;;		None
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;		None
  8007 ;; Return value:  Size  Location     Type
  8008 ;;		None               void
  8009 ;; Registers used:
  8010 ;;		None
  8011 ;; Tracked objects:
  8012 ;;		On entry : 0/0
  8013 ;;		On exit  : 0/0
  8014 ;;		Unchanged: 0/0
  8015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8016 ;;      Params:         0       0       0       0       0       0       0
  8017 ;;      Locals:         0       0       0       0       0       0       0
  8018 ;;      Temps:          0       0       0       0       0       0       0
  8019 ;;      Totals:         0       0       0       0       0       0       0
  8020 ;;Total ram usage:        0 bytes
  8021 ;; Hardware stack levels used:    1
  8022 ;; Hardware stack levels required when called:    4
  8023 ;; This function calls:
  8024 ;;		Nothing
  8025 ;; This function is called by:
  8026 ;;		_TMR1_Initialize
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           	psect	text37
  8031  003AB6                     __ptext37:
  8032                           	opt stack 0
  8033  003AB6                     _TMR1_StartTimer:
  8034                           	opt stack 24
  8035                           
  8036                           ;tmr1.c: 50: T1CONbits.TMR1ON = 1;
  8037                           
  8038                           ;incstack = 0
  8039  003AB6  80CD               	bsf	4045,0,c	;volatile
  8040  003AB8  0012               	return		;funcret
  8041  003ABA                     __end_of_TMR1_StartTimer:
  8042                           	opt stack 0
  8043                           tosu	equ	0xFFF
  8044                           tosh	equ	0xFFE
  8045                           tosl	equ	0xFFD
  8046                           pclath	equ	0xFFA
  8047                           tblptru	equ	0xFF8
  8048                           tblptrh	equ	0xFF7
  8049                           tblptrl	equ	0xFF6
  8050                           tablat	equ	0xFF5
  8051                           prodh	equ	0xFF4
  8052                           prodl	equ	0xFF3
  8053                           intcon	equ	0xFF2
  8054                           postinc0	equ	0xFEE
  8055                           wreg	equ	0xFE8
  8056                           postinc1	equ	0xFE6
  8057                           postdec1	equ	0xFE5
  8058                           fsr1h	equ	0xFE2
  8059                           fsr1l	equ	0xFE1
  8060                           indf2	equ	0xFDF
  8061                           postinc2	equ	0xFDE
  8062                           postdec2	equ	0xFDD
  8063                           plusw2	equ	0xFDB
  8064                           fsr2h	equ	0xFDA
  8065                           fsr2l	equ	0xFD9
  8066                           status	equ	0xFD8
  8067                           
  8068 ;; *************** function _PIN_MANAGER_Initialize *****************
  8069 ;; Defined at:
  8070 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;		None
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;		None
  8075 ;; Return value:  Size  Location     Type
  8076 ;;		None               void
  8077 ;; Registers used:
  8078 ;;		wreg, status,2
  8079 ;; Tracked objects:
  8080 ;;		On entry : 0/0
  8081 ;;		On exit  : 0/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8084 ;;      Params:         0       0       0       0       0       0       0
  8085 ;;      Locals:         0       0       0       0       0       0       0
  8086 ;;      Temps:          0       0       0       0       0       0       0
  8087 ;;      Totals:         0       0       0       0       0       0       0
  8088 ;;Total ram usage:        0 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    4
  8091 ;; This function calls:
  8092 ;;		Nothing
  8093 ;; This function is called by:
  8094 ;;		_SYSTEM_Initialize
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           	psect	text38
  8099  003512                     __ptext38:
  8100                           	opt stack 0
  8101  003512                     _PIN_MANAGER_Initialize:
  8102                           	opt stack 25
  8103                           
  8104                           ;pin_manager.c: 8: LATA = 0x00;
  8105                           
  8106                           ;incstack = 0
  8107  003512  0E00               	movlw	0
  8108  003514  6E89               	movwf	3977,c	;volatile
  8109                           
  8110                           ;pin_manager.c: 9: TRISA = 0xAE;
  8111  003516  0EAE               	movlw	174
  8112  003518  6E92               	movwf	3986,c	;volatile
  8113                           
  8114                           ;pin_manager.c: 10: ANSELA = 0x2E;
  8115  00351A  0E2E               	movlw	46
  8116  00351C  010F               	movlb	15	; () banked
  8117  00351E  6F38               	movwf	56,b	;volatile
  8118                           
  8119                           ;pin_manager.c: 12: LATB = 0x00;
  8120  003520  0E00               	movlw	0
  8121  003522  6E8A               	movwf	3978,c	;volatile
  8122                           
  8123                           ;pin_manager.c: 13: TRISB = 0xF4;
  8124  003524  0EF4               	movlw	244
  8125  003526  6E93               	movwf	3987,c	;volatile
  8126                           
  8127                           ;pin_manager.c: 14: ANSELB = 0x34;
  8128  003528  0E34               	movlw	52
  8129  00352A  010F               	movlb	15	; () banked
  8130  00352C  6F39               	movwf	57,b	;volatile
  8131                           
  8132                           ;pin_manager.c: 15: WPUB = 0x00;
  8133  00352E  0E00               	movlw	0
  8134  003530  6E61               	movwf	3937,c	;volatile
  8135                           
  8136                           ;pin_manager.c: 17: LATC = 0x48;
  8137  003532  0E48               	movlw	72
  8138  003534  6E8B               	movwf	3979,c	;volatile
  8139                           
  8140                           ;pin_manager.c: 18: TRISC = 0xC4;
  8141  003536  0EC4               	movlw	196
  8142  003538  6E94               	movwf	3988,c	;volatile
  8143                           
  8144                           ;pin_manager.c: 19: ANSELC = 0x04;
  8145  00353A  0E04               	movlw	4
  8146  00353C  010F               	movlb	15	; () banked
  8147  00353E  6F3A               	movwf	58,b	;volatile
  8148                           
  8149                           ;pin_manager.c: 21: LATD = 0x00;
  8150  003540  0E00               	movlw	0
  8151  003542  6E8C               	movwf	3980,c	;volatile
  8152                           
  8153                           ;pin_manager.c: 22: TRISD = 0xD1;
  8154  003544  0ED1               	movlw	209
  8155  003546  6E95               	movwf	3989,c	;volatile
  8156                           
  8157                           ;pin_manager.c: 23: ANSELD = 0xD1;
  8158  003548  0ED1               	movlw	209
  8159  00354A  010F               	movlb	15	; () banked
  8160  00354C  6F3B               	movwf	59,b	;volatile
  8161                           
  8162                           ;pin_manager.c: 25: LATE = 0x00;
  8163  00354E  0E00               	movlw	0
  8164  003550  6E8D               	movwf	3981,c	;volatile
  8165                           
  8166                           ;pin_manager.c: 26: TRISE = 0x04;
  8167  003552  0E04               	movlw	4
  8168  003554  6E96               	movwf	3990,c	;volatile
  8169                           
  8170                           ;pin_manager.c: 27: ANSELE = 0x04;
  8171  003556  0E04               	movlw	4
  8172  003558  010F               	movlb	15	; () banked
  8173  00355A  6F3C               	movwf	60,b	;volatile
  8174                           
  8175                           ; BSR set to: 15
  8176                           ;pin_manager.c: 29: TRISCbits.TRISC6 = 1;
  8177  00355C  8C94               	bsf	3988,6,c	;volatile
  8178                           
  8179                           ; BSR set to: 15
  8180                           ;pin_manager.c: 30: TRISCbits.TRISC7 = 1;
  8181  00355E  8E94               	bsf	3988,7,c	;volatile
  8182                           
  8183                           ; BSR set to: 15
  8184                           ;pin_manager.c: 34: INTCON2bits.nRBPU = 0x01;
  8185  003560  8EF1               	bsf	intcon2,7,c	;volatile
  8186                           
  8187                           ; BSR set to: 15
  8188  003562  0012               	return		;funcret
  8189  003564                     __end_of_PIN_MANAGER_Initialize:
  8190                           	opt stack 0
  8191                           tosu	equ	0xFFF
  8192                           tosh	equ	0xFFE
  8193                           tosl	equ	0xFFD
  8194                           pclath	equ	0xFFA
  8195                           tblptru	equ	0xFF8
  8196                           tblptrh	equ	0xFF7
  8197                           tblptrl	equ	0xFF6
  8198                           tablat	equ	0xFF5
  8199                           prodh	equ	0xFF4
  8200                           prodl	equ	0xFF3
  8201                           intcon	equ	0xFF2
  8202                           intcon2	equ	0xFF1
  8203                           postinc0	equ	0xFEE
  8204                           wreg	equ	0xFE8
  8205                           postinc1	equ	0xFE6
  8206                           postdec1	equ	0xFE5
  8207                           fsr1h	equ	0xFE2
  8208                           fsr1l	equ	0xFE1
  8209                           indf2	equ	0xFDF
  8210                           postinc2	equ	0xFDE
  8211                           postdec2	equ	0xFDD
  8212                           plusw2	equ	0xFDB
  8213                           fsr2h	equ	0xFDA
  8214                           fsr2l	equ	0xFD9
  8215                           status	equ	0xFD8
  8216                           
  8217 ;; *************** function _OSCILLATOR_Initialize *****************
  8218 ;; Defined at:
  8219 ;;		line 124 in file "mcc_generated_files/mcc.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;		None
  8222 ;; Auto vars:     Size  Location     Type
  8223 ;;		None
  8224 ;; Return value:  Size  Location     Type
  8225 ;;		None               void
  8226 ;; Registers used:
  8227 ;;		wreg, status,2
  8228 ;; Tracked objects:
  8229 ;;		On entry : 0/0
  8230 ;;		On exit  : 0/0
  8231 ;;		Unchanged: 0/0
  8232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8233 ;;      Params:         0       0       0       0       0       0       0
  8234 ;;      Locals:         0       0       0       0       0       0       0
  8235 ;;      Temps:          0       0       0       0       0       0       0
  8236 ;;      Totals:         0       0       0       0       0       0       0
  8237 ;;Total ram usage:        0 bytes
  8238 ;; Hardware stack levels used:    1
  8239 ;; Hardware stack levels required when called:    4
  8240 ;; This function calls:
  8241 ;;		Nothing
  8242 ;; This function is called by:
  8243 ;;		_SYSTEM_Initialize
  8244 ;; This function uses a non-reentrant model
  8245 ;;
  8246                           
  8247                           	psect	text39
  8248  003A90                     __ptext39:
  8249                           	opt stack 0
  8250  003A90                     _OSCILLATOR_Initialize:
  8251                           	opt stack 25
  8252                           
  8253                           ;mcc.c: 126: OSCCON = 0x62;
  8254                           
  8255                           ; BSR set to: 15
  8256                           ;incstack = 0
  8257  003A90  0E62               	movlw	98
  8258  003A92  6ED3               	movwf	4051,c	;volatile
  8259                           
  8260                           ;mcc.c: 128: OSCCON2 = 0x04;
  8261  003A94  0E04               	movlw	4
  8262  003A96  6ED2               	movwf	4050,c	;volatile
  8263                           
  8264                           ;mcc.c: 130: OSCTUNE = 0x00;
  8265  003A98  0E00               	movlw	0
  8266  003A9A  6E9B               	movwf	3995,c	;volatile
  8267  003A9C  0012               	return		;funcret
  8268  003A9E                     __end_of_OSCILLATOR_Initialize:
  8269                           	opt stack 0
  8270                           tosu	equ	0xFFF
  8271                           tosh	equ	0xFFE
  8272                           tosl	equ	0xFFD
  8273                           pclath	equ	0xFFA
  8274                           tblptru	equ	0xFF8
  8275                           tblptrh	equ	0xFF7
  8276                           tblptrl	equ	0xFF6
  8277                           tablat	equ	0xFF5
  8278                           prodh	equ	0xFF4
  8279                           prodl	equ	0xFF3
  8280                           intcon	equ	0xFF2
  8281                           intcon2	equ	0xFF1
  8282                           postinc0	equ	0xFEE
  8283                           wreg	equ	0xFE8
  8284                           postinc1	equ	0xFE6
  8285                           postdec1	equ	0xFE5
  8286                           fsr1h	equ	0xFE2
  8287                           fsr1l	equ	0xFE1
  8288                           indf2	equ	0xFDF
  8289                           postinc2	equ	0xFDE
  8290                           postdec2	equ	0xFDD
  8291                           plusw2	equ	0xFDB
  8292                           fsr2h	equ	0xFDA
  8293                           fsr2l	equ	0xFD9
  8294                           status	equ	0xFD8
  8295                           
  8296 ;; *************** function _INTERRUPT_Initialize *****************
  8297 ;; Defined at:
  8298 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;		None
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;		None
  8303 ;; Return value:  Size  Location     Type
  8304 ;;		None               void
  8305 ;; Registers used:
  8306 ;;		None
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8312 ;;      Params:         0       0       0       0       0       0       0
  8313 ;;      Locals:         0       0       0       0       0       0       0
  8314 ;;      Temps:          0       0       0       0       0       0       0
  8315 ;;      Totals:         0       0       0       0       0       0       0
  8316 ;;Total ram usage:        0 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; Hardware stack levels required when called:    4
  8319 ;; This function calls:
  8320 ;;		Nothing
  8321 ;; This function is called by:
  8322 ;;		_SYSTEM_Initialize
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326                           	psect	text40
  8327  003AAA                     __ptext40:
  8328                           	opt stack 0
  8329  003AAA                     _INTERRUPT_Initialize:
  8330                           	opt stack 25
  8331                           
  8332                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  8333                           
  8334                           ;incstack = 0
  8335  003AAA  9ED0               	bcf	4048,7,c	;volatile
  8336                           
  8337                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  8338  003AAC  9A9F               	bcf	3999,5,c	;volatile
  8339                           
  8340                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  8341  003AAE  9C9F               	bcf	3999,6,c	;volatile
  8342                           
  8343                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  8344  003AB0  909F               	bcf	3999,0,c	;volatile
  8345                           
  8346                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  8347  003AB2  989F               	bcf	3999,4,c	;volatile
  8348  003AB4  0012               	return		;funcret
  8349  003AB6                     __end_of_INTERRUPT_Initialize:
  8350                           	opt stack 0
  8351                           tosu	equ	0xFFF
  8352                           tosh	equ	0xFFE
  8353                           tosl	equ	0xFFD
  8354                           pclath	equ	0xFFA
  8355                           tblptru	equ	0xFF8
  8356                           tblptrh	equ	0xFF7
  8357                           tblptrl	equ	0xFF6
  8358                           tablat	equ	0xFF5
  8359                           prodh	equ	0xFF4
  8360                           prodl	equ	0xFF3
  8361                           intcon	equ	0xFF2
  8362                           intcon2	equ	0xFF1
  8363                           postinc0	equ	0xFEE
  8364                           wreg	equ	0xFE8
  8365                           postinc1	equ	0xFE6
  8366                           postdec1	equ	0xFE5
  8367                           fsr1h	equ	0xFE2
  8368                           fsr1l	equ	0xFE1
  8369                           indf2	equ	0xFDF
  8370                           postinc2	equ	0xFDE
  8371                           postdec2	equ	0xFDD
  8372                           plusw2	equ	0xFDB
  8373                           fsr2h	equ	0xFDA
  8374                           fsr2l	equ	0xFD9
  8375                           status	equ	0xFD8
  8376                           
  8377 ;; *************** function _EUSART1_Initialize *****************
  8378 ;; Defined at:
  8379 ;;		line 21 in file "UART.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;		None
  8382 ;; Auto vars:     Size  Location     Type
  8383 ;;		None
  8384 ;; Return value:  Size  Location     Type
  8385 ;;		None               void
  8386 ;; Registers used:
  8387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8393 ;;      Params:         0       0       0       0       0       0       0
  8394 ;;      Locals:         0       0       0       0       0       0       0
  8395 ;;      Temps:          0       0       0       0       0       0       0
  8396 ;;      Totals:         0       0       0       0       0       0       0
  8397 ;;Total ram usage:        0 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:    6
  8400 ;; This function calls:
  8401 ;;		_UART_buff_init
  8402 ;; This function is called by:
  8403 ;;		_SYSTEM_Initialize
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           	psect	text41
  8408  0036CC                     __ptext41:
  8409                           	opt stack 0
  8410  0036CC                     _EUSART1_Initialize:
  8411                           	opt stack 23
  8412                           
  8413                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  8414                           
  8415                           ;incstack = 0
  8416  0036CC  9A9D               	bcf	3997,5,c	;volatile
  8417                           
  8418                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  8419  0036CE  989D               	bcf	3997,4,c	;volatile
  8420                           
  8421                           ;UART.c: 29: BAUD1CON = 0x48;
  8422  0036D0  0E48               	movlw	72
  8423  0036D2  6EB8               	movwf	4024,c	;volatile
  8424                           
  8425                           ;UART.c: 32: RC1STA = 0x98;
  8426  0036D4  0E98               	movlw	152
  8427  0036D6  6EAB               	movwf	4011,c	;volatile
  8428                           
  8429                           ;UART.c: 35: TX1STA = 0x26;
  8430  0036D8  0E26               	movlw	38
  8431  0036DA  6EAC               	movwf	4012,c	;volatile
  8432                           
  8433                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  8434  0036DC  0E33               	movlw	51
  8435  0036DE  6EAF               	movwf	4015,c	;volatile
  8436                           
  8437                           ;UART.c: 41: SPBRGH1 = 0x00;
  8438  0036E0  0E00               	movlw	0
  8439  0036E2  6EB0               	movwf	4016,c	;volatile
  8440                           
  8441                           ;UART.c: 44: TXREG1 = 0x00;
  8442  0036E4  0E00               	movlw	0
  8443  0036E6  6EAD               	movwf	4013,c	;volatile
  8444                           
  8445                           ;UART.c: 47: RCREG1 = 0x00;
  8446  0036E8  0E00               	movlw	0
  8447  0036EA  6EAE               	movwf	4014,c	;volatile
  8448                           
  8449                           ;UART.c: 49: UART_buff_init(&input_buffer);
  8450  0036EC  0E00               	movlw	low _input_buffer
  8451  0036EE  6E23               	movwf	UART_buff_init@_this,c
  8452  0036F0  0E04               	movlw	high _input_buffer
  8453  0036F2  6E24               	movwf	UART_buff_init@_this+1,c
  8454  0036F4  ECC6  F01C         	call	_UART_buff_init	;wreg free
  8455                           
  8456                           ;UART.c: 50: UART_buff_init(&output_buffer);
  8457  0036F8  0E00               	movlw	low _output_buffer
  8458  0036FA  6E23               	movwf	UART_buff_init@_this,c
  8459  0036FC  0E05               	movlw	high _output_buffer
  8460  0036FE  6E24               	movwf	UART_buff_init@_this+1,c
  8461  003700  ECC6  F01C         	call	_UART_buff_init	;wreg free
  8462                           
  8463                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  8464  003704  8A9D               	bsf	3997,5,c	;volatile
  8465  003706  0012               	return		;funcret
  8466  003708                     __end_of_EUSART1_Initialize:
  8467                           	opt stack 0
  8468                           tosu	equ	0xFFF
  8469                           tosh	equ	0xFFE
  8470                           tosl	equ	0xFFD
  8471                           pclath	equ	0xFFA
  8472                           tblptru	equ	0xFF8
  8473                           tblptrh	equ	0xFF7
  8474                           tblptrl	equ	0xFF6
  8475                           tablat	equ	0xFF5
  8476                           prodh	equ	0xFF4
  8477                           prodl	equ	0xFF3
  8478                           intcon	equ	0xFF2
  8479                           intcon2	equ	0xFF1
  8480                           postinc0	equ	0xFEE
  8481                           wreg	equ	0xFE8
  8482                           postinc1	equ	0xFE6
  8483                           postdec1	equ	0xFE5
  8484                           fsr1h	equ	0xFE2
  8485                           fsr1l	equ	0xFE1
  8486                           indf2	equ	0xFDF
  8487                           postinc2	equ	0xFDE
  8488                           postdec2	equ	0xFDD
  8489                           plusw2	equ	0xFDB
  8490                           fsr2h	equ	0xFDA
  8491                           fsr2l	equ	0xFD9
  8492                           status	equ	0xFD8
  8493                           
  8494 ;; *************** function _UART_buff_init *****************
  8495 ;; Defined at:
  8496 ;;		line 56 in file "UART.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  8499 ;;		 -> output_buffer(206), input_buffer(206), 
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;		None
  8502 ;; Return value:  Size  Location     Type
  8503 ;;		None               void
  8504 ;; Registers used:
  8505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8511 ;;      Params:         2       0       0       0       0       0       0
  8512 ;;      Locals:         0       0       0       0       0       0       0
  8513 ;;      Temps:          0       0       0       0       0       0       0
  8514 ;;      Totals:         2       0       0       0       0       0       0
  8515 ;;Total ram usage:        2 bytes
  8516 ;; Hardware stack levels used:    1
  8517 ;; Hardware stack levels required when called:    5
  8518 ;; This function calls:
  8519 ;;		_memset
  8520 ;; This function is called by:
  8521 ;;		_EUSART1_Initialize
  8522 ;; This function uses a non-reentrant model
  8523 ;;
  8524                           
  8525                           	psect	text42
  8526  00398C                     __ptext42:
  8527                           	opt stack 0
  8528  00398C                     _UART_buff_init:
  8529                           	opt stack 23
  8530                           
  8531                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  8532                           
  8533                           ;incstack = 0
  8534  00398C  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  8535  003990  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  8536  003994  0E00               	movlw	0
  8537  003996  6E1E               	movwf	memset@c+1,c
  8538  003998  0E00               	movlw	0
  8539  00399A  6E1D               	movwf	memset@c,c
  8540  00399C  0E00               	movlw	0
  8541  00399E  6E20               	movwf	memset@n+1,c
  8542  0039A0  0ECE               	movlw	206
  8543  0039A2  6E1F               	movwf	memset@n,c
  8544  0039A4  EC30  F01C         	call	_memset	;wreg free
  8545  0039A8  0012               	return		;funcret
  8546  0039AA                     __end_of_UART_buff_init:
  8547                           	opt stack 0
  8548                           tosu	equ	0xFFF
  8549                           tosh	equ	0xFFE
  8550                           tosl	equ	0xFFD
  8551                           pclath	equ	0xFFA
  8552                           tblptru	equ	0xFF8
  8553                           tblptrh	equ	0xFF7
  8554                           tblptrl	equ	0xFF6
  8555                           tablat	equ	0xFF5
  8556                           prodh	equ	0xFF4
  8557                           prodl	equ	0xFF3
  8558                           intcon	equ	0xFF2
  8559                           intcon2	equ	0xFF1
  8560                           postinc0	equ	0xFEE
  8561                           wreg	equ	0xFE8
  8562                           postinc1	equ	0xFE6
  8563                           postdec1	equ	0xFE5
  8564                           fsr1h	equ	0xFE2
  8565                           fsr1l	equ	0xFE1
  8566                           indf2	equ	0xFDF
  8567                           postinc2	equ	0xFDE
  8568                           postdec2	equ	0xFDD
  8569                           plusw2	equ	0xFDB
  8570                           fsr2h	equ	0xFDA
  8571                           fsr2l	equ	0xFD9
  8572                           status	equ	0xFD8
  8573                           
  8574 ;; *************** function _memset *****************
  8575 ;; Defined at:
  8576 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\memset.c"
  8577 ;; Parameters:    Size  Location     Type
  8578 ;;  p1              2   26[COMRAM] PTR void 
  8579 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8580 ;;  c               2   28[COMRAM] int 
  8581 ;;  n               2   30[COMRAM] unsigned int 
  8582 ;; Auto vars:     Size  Location     Type
  8583 ;;  p               2   32[COMRAM] PTR unsigned char 
  8584 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8585 ;; Return value:  Size  Location     Type
  8586 ;;                  2   26[COMRAM] PTR void 
  8587 ;; Registers used:
  8588 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8589 ;; Tracked objects:
  8590 ;;		On entry : 0/0
  8591 ;;		On exit  : 0/0
  8592 ;;		Unchanged: 0/0
  8593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8594 ;;      Params:         6       0       0       0       0       0       0
  8595 ;;      Locals:         2       0       0       0       0       0       0
  8596 ;;      Temps:          0       0       0       0       0       0       0
  8597 ;;      Totals:         8       0       0       0       0       0       0
  8598 ;;Total ram usage:        8 bytes
  8599 ;; Hardware stack levels used:    1
  8600 ;; Hardware stack levels required when called:    4
  8601 ;; This function calls:
  8602 ;;		Nothing
  8603 ;; This function is called by:
  8604 ;;		_FastTransfer_buffer_flush
  8605 ;;		_UART_buff_init
  8606 ;;		_UART_buff_flush
  8607 ;; This function uses a non-reentrant model
  8608 ;;
  8609                           
  8610                           	psect	text43
  8611  003860                     __ptext43:
  8612                           	opt stack 0
  8613  003860                     _memset:
  8614                           	opt stack 23
  8615                           
  8616                           ;incstack = 0
  8617  003860  C01B  F021         	movff	memset@p1,memset@p
  8618  003864  C01C  F022         	movff	memset@p1+1,memset@p+1
  8619  003868  D009               	goto	l3059
  8620  00386A                     l3055:
  8621  00386A  C021  FFD9         	movff	memset@p,fsr2l
  8622  00386E  C022  FFDA         	movff	memset@p+1,fsr2h
  8623  003872  C01D  FFDF         	movff	memset@c,indf2
  8624  003876  4A21               	infsnz	memset@p,f,c
  8625  003878  2A22               	incf	memset@p+1,f,c
  8626  00387A  D000               	goto	l3059
  8627  00387C                     l3059:
  8628  00387C  061F               	decf	memset@n,f,c
  8629  00387E  A0D8               	btfss	status,0,c
  8630  003880  0620               	decf	memset@n+1,f,c
  8631  003882  281F               	incf	memset@n,w,c
  8632  003884  E1F2               	bnz	l3055
  8633  003886  2820               	incf	memset@n+1,w,c
  8634  003888  A4D8               	btfss	status,2,c
  8635  00388A  D7EF               	goto	l3055
  8636                           
  8637                           ;	Return value of _memset is never used
  8638  00388C  0012               	return		;funcret
  8639  00388E                     __end_of_memset:
  8640                           	opt stack 0
  8641                           tosu	equ	0xFFF
  8642                           tosh	equ	0xFFE
  8643                           tosl	equ	0xFFD
  8644                           pclath	equ	0xFFA
  8645                           tblptru	equ	0xFF8
  8646                           tblptrh	equ	0xFF7
  8647                           tblptrl	equ	0xFF6
  8648                           tablat	equ	0xFF5
  8649                           prodh	equ	0xFF4
  8650                           prodl	equ	0xFF3
  8651                           intcon	equ	0xFF2
  8652                           intcon2	equ	0xFF1
  8653                           postinc0	equ	0xFEE
  8654                           wreg	equ	0xFE8
  8655                           postinc1	equ	0xFE6
  8656                           postdec1	equ	0xFE5
  8657                           fsr1h	equ	0xFE2
  8658                           fsr1l	equ	0xFE1
  8659                           indf2	equ	0xFDF
  8660                           postinc2	equ	0xFDE
  8661                           postdec2	equ	0xFDD
  8662                           plusw2	equ	0xFDB
  8663                           fsr2h	equ	0xFDA
  8664                           fsr2l	equ	0xFD9
  8665                           status	equ	0xFD8
  8666                           
  8667 ;; *************** function _ADC_Initialize *****************
  8668 ;; Defined at:
  8669 ;;		line 13 in file "mcc_generated_files/adc.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;		None
  8672 ;; Auto vars:     Size  Location     Type
  8673 ;;		None
  8674 ;; Return value:  Size  Location     Type
  8675 ;;		None               void
  8676 ;; Registers used:
  8677 ;;		wreg, status,2
  8678 ;; Tracked objects:
  8679 ;;		On entry : 0/0
  8680 ;;		On exit  : 0/0
  8681 ;;		Unchanged: 0/0
  8682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8683 ;;      Params:         0       0       0       0       0       0       0
  8684 ;;      Locals:         0       0       0       0       0       0       0
  8685 ;;      Temps:          0       0       0       0       0       0       0
  8686 ;;      Totals:         0       0       0       0       0       0       0
  8687 ;;Total ram usage:        0 bytes
  8688 ;; Hardware stack levels used:    1
  8689 ;; Hardware stack levels required when called:    4
  8690 ;; This function calls:
  8691 ;;		Nothing
  8692 ;; This function is called by:
  8693 ;;		_SYSTEM_Initialize
  8694 ;; This function uses a non-reentrant model
  8695 ;;
  8696                           
  8697                           	psect	text44
  8698  003A12                     __ptext44:
  8699                           	opt stack 0
  8700  003A12                     _ADC_Initialize:
  8701                           	opt stack 25
  8702                           
  8703                           ;adc.c: 18: ADCON0 = 0x01;
  8704                           
  8705                           ;incstack = 0
  8706  003A12  0E01               	movlw	1
  8707  003A14  6EC2               	movwf	4034,c	;volatile
  8708                           
  8709                           ;adc.c: 21: ADCON1 = 0x80;
  8710  003A16  0E80               	movlw	128
  8711  003A18  6EC1               	movwf	4033,c	;volatile
  8712                           
  8713                           ;adc.c: 24: ADCON2 = 0xA9;
  8714  003A1A  0EA9               	movlw	169
  8715  003A1C  6EC0               	movwf	4032,c	;volatile
  8716                           
  8717                           ;adc.c: 27: ADRESL = 0x00;
  8718  003A1E  0E00               	movlw	0
  8719  003A20  6EC3               	movwf	4035,c	;volatile
  8720                           
  8721                           ;adc.c: 30: ADRESH = 0x00;
  8722  003A22  0E00               	movlw	0
  8723  003A24  6EC4               	movwf	4036,c	;volatile
  8724                           
  8725                           ;adc.c: 33: PIE1bits.ADIE = 1;
  8726  003A26  8C9D               	bsf	3997,6,c	;volatile
  8727  003A28  0012               	return		;funcret
  8728  003A2A                     __end_of_ADC_Initialize:
  8729                           	opt stack 0
  8730                           tosu	equ	0xFFF
  8731                           tosh	equ	0xFFE
  8732                           tosl	equ	0xFFD
  8733                           pclath	equ	0xFFA
  8734                           tblptru	equ	0xFF8
  8735                           tblptrh	equ	0xFF7
  8736                           tblptrl	equ	0xFF6
  8737                           tablat	equ	0xFF5
  8738                           prodh	equ	0xFF4
  8739                           prodl	equ	0xFF3
  8740                           intcon	equ	0xFF2
  8741                           intcon2	equ	0xFF1
  8742                           postinc0	equ	0xFEE
  8743                           wreg	equ	0xFE8
  8744                           postinc1	equ	0xFE6
  8745                           postdec1	equ	0xFE5
  8746                           fsr1h	equ	0xFE2
  8747                           fsr1l	equ	0xFE1
  8748                           indf2	equ	0xFDF
  8749                           postinc2	equ	0xFDE
  8750                           postdec2	equ	0xFDD
  8751                           plusw2	equ	0xFDB
  8752                           fsr2h	equ	0xFDA
  8753                           fsr2l	equ	0xFD9
  8754                           status	equ	0xFD8
  8755                           
  8756 ;; *************** function _RunBypas *****************
  8757 ;; Defined at:
  8758 ;;		line 129 in file "Bypass.c"
  8759 ;; Parameters:    Size  Location     Type
  8760 ;;		None
  8761 ;; Auto vars:     Size  Location     Type
  8762 ;;  batvolt         3    2[BANK0 ] float 
  8763 ;;  i               2    5[BANK0 ] int 
  8764 ;;  cellbyp         2    0[BANK0 ] int 
  8765 ;; Return value:  Size  Location     Type
  8766 ;;                  2  409[None  ] int 
  8767 ;; Registers used:
  8768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8769 ;; Tracked objects:
  8770 ;;		On entry : 0/0
  8771 ;;		On exit  : 0/0
  8772 ;;		Unchanged: 0/0
  8773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8774 ;;      Params:         0       0       0       0       0       0       0
  8775 ;;      Locals:         0       7       0       0       0       0       0
  8776 ;;      Temps:          0       0       0       0       0       0       0
  8777 ;;      Totals:         0       7       0       0       0       0       0
  8778 ;;Total ram usage:        7 bytes
  8779 ;; Hardware stack levels used:    1
  8780 ;; Hardware stack levels required when called:    6
  8781 ;; This function calls:
  8782 ;;		_Battery_Get
  8783 ;;		_SetBypass
  8784 ;;		___ftge
  8785 ;; This function is called by:
  8786 ;;		_main
  8787 ;; This function uses a non-reentrant model
  8788 ;;
  8789                           
  8790                           	psect	text45
  8791  00293E                     __ptext45:
  8792                           	opt stack 0
  8793  00293E                     _RunBypas:
  8794                           	opt stack 24
  8795                           
  8796                           ;Bypass.c: 131: int cellbyp = 0;
  8797                           
  8798                           ;incstack = 0
  8799  00293E  0E00               	movlw	0
  8800  002940  0100               	movlb	0	; () banked
  8801  002942  6FC2               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  8802  002944  0E00               	movlw	0
  8803  002946  6FC1               	movwf	RunBypas@cellbyp& (0+255),b
  8804                           
  8805                           ;Bypass.c: 132: int i = 0;
  8806  002948  0E00               	movlw	0
  8807  00294A  0100               	movlb	0	; () banked
  8808  00294C  6FC7               	movwf	(RunBypas@i+1)& (0+255),b
  8809  00294E  0E00               	movlw	0
  8810  002950  6FC6               	movwf	RunBypas@i& (0+255),b
  8811                           
  8812                           ;Bypass.c: 133: float batvolt = 0;
  8813  002952  0E00               	movlw	0
  8814  002954  0100               	movlb	0	; () banked
  8815  002956  6FC3               	movwf	RunBypas@batvolt& (0+255),b
  8816  002958  0E00               	movlw	0
  8817  00295A  0100               	movlb	0	; () banked
  8818  00295C  6FC4               	movwf	(RunBypas@batvolt+1)& (0+255),b
  8819  00295E  0E00               	movlw	0
  8820  002960  0100               	movlb	0	; () banked
  8821  002962  6FC5               	movwf	(RunBypas@batvolt+2)& (0+255),b
  8822                           
  8823                           ;Bypass.c: 135: for(i = 0; i<=9;i++)
  8824  002964  0E00               	movlw	0
  8825  002966  0100               	movlb	0	; () banked
  8826  002968  6FC7               	movwf	(RunBypas@i+1)& (0+255),b
  8827  00296A  0E00               	movlw	0
  8828  00296C  6FC6               	movwf	RunBypas@i& (0+255),b
  8829  00296E                     l5313:
  8830                           
  8831                           ; BSR set to: 0
  8832  00296E  0100               	movlb	0	; () banked
  8833  002970  BFC7               	btfsc	(RunBypas@i+1)& (0+255),7,b
  8834  002972  D00A               	goto	l5317
  8835  002974  0100               	movlb	0	; () banked
  8836  002976  51C7               	movf	(RunBypas@i+1)& (0+255),w,b
  8837  002978  E153               	bnz	l529
  8838  00297A  0E0A               	movlw	10
  8839  00297C  0100               	movlb	0	; () banked
  8840  00297E  5DC6               	subwf	RunBypas@i& (0+255),w,b
  8841  002980  B0D8               	btfsc	status,0,c
  8842  002982  0012               	return	
  8843  002984  D001               	goto	l5317
  8844                           
  8845                           ; BSR set to: 0
  8846  002986  0012               	return	
  8847  002988                     l5317:
  8848                           
  8849                           ; BSR set to: 0
  8850                           ;Bypass.c: 136: {
  8851                           ;Bypass.c: 137: batvolt = Battery_Get(i);
  8852  002988  C0C6  F021         	movff	RunBypas@i,Battery_Get@channelnum
  8853  00298C  C0C7  F022         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  8854  002990  ECEA  F01B         	call	_Battery_Get	;wreg free
  8855  002994  C021  F0C3         	movff	?_Battery_Get,RunBypas@batvolt
  8856  002998  C022  F0C4         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  8857  00299C  C023  F0C5         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  8858                           
  8859                           ;Bypass.c: 139: if(batvolt >= 4.18)
  8860  0029A0  C0C3  F021         	movff	RunBypas@batvolt,___ftge@ff1
  8861  0029A4  C0C4  F022         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  8862  0029A8  C0C5  F023         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  8863  0029AC  0EC3               	movlw	195
  8864  0029AE  6E24               	movwf	___ftge@ff2,c
  8865  0029B0  0E85               	movlw	133
  8866  0029B2  6E25               	movwf	___ftge@ff2+1,c
  8867  0029B4  0E40               	movlw	64
  8868  0029B6  6E26               	movwf	___ftge@ff2+2,c
  8869  0029B8  EC2B  F018         	call	___ftge	;wreg free
  8870  0029BC  A0D8               	btfss	status,0,c
  8871  0029BE  D010               	goto	l5325
  8872                           
  8873                           ;Bypass.c: 140: {
  8874                           ;Bypass.c: 141: SetBypass(i,1);
  8875  0029C0  C0C6  F01B         	movff	RunBypas@i,SetBypass@pin
  8876  0029C4  C0C7  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8877  0029C8  0E00               	movlw	0
  8878  0029CA  6E1E               	movwf	SetBypass@state+1,c
  8879  0029CC  0E01               	movlw	1
  8880  0029CE  6E1D               	movwf	SetBypass@state,c
  8881  0029D0  ECB1  F013         	call	_SetBypass	;wreg free
  8882                           
  8883                           ;Bypass.c: 142: cellbyp = 1;
  8884  0029D4  0E00               	movlw	0
  8885  0029D6  0100               	movlb	0	; () banked
  8886  0029D8  6FC2               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  8887  0029DA  0E01               	movlw	1
  8888  0029DC  6FC1               	movwf	RunBypas@cellbyp& (0+255),b
  8889  0029DE  D000               	goto	l5325
  8890  0029E0                     l5325:
  8891                           
  8892                           ;Bypass.c: 143: }
  8893                           ;Bypass.c: 144: if(batvolt <= 4.15)
  8894  0029E0  0ECD               	movlw	205
  8895  0029E2  6E21               	movwf	___ftge@ff1,c
  8896  0029E4  0E84               	movlw	132
  8897  0029E6  6E22               	movwf	___ftge@ff1+1,c
  8898  0029E8  0E40               	movlw	64
  8899  0029EA  6E23               	movwf	___ftge@ff1+2,c
  8900  0029EC  C0C3  F024         	movff	RunBypas@batvolt,___ftge@ff2
  8901  0029F0  C0C4  F025         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  8902  0029F4  C0C5  F026         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  8903  0029F8  EC2B  F018         	call	___ftge	;wreg free
  8904  0029FC  A0D8               	btfss	status,0,c
  8905  0029FE  D00B               	goto	l5329
  8906                           
  8907                           ;Bypass.c: 145: {
  8908                           ;Bypass.c: 146: SetBypass(i,0);
  8909  002A00  C0C6  F01B         	movff	RunBypas@i,SetBypass@pin
  8910  002A04  C0C7  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8911  002A08  0E00               	movlw	0
  8912  002A0A  6E1E               	movwf	SetBypass@state+1,c
  8913  002A0C  0E00               	movlw	0
  8914  002A0E  6E1D               	movwf	SetBypass@state,c
  8915  002A10  ECB1  F013         	call	_SetBypass	;wreg free
  8916  002A14  D000               	goto	l5329
  8917  002A16                     l5329:
  8918  002A16  0100               	movlb	0	; () banked
  8919  002A18  4BC6               	infsnz	RunBypas@i& (0+255),f,b
  8920  002A1A  2BC7               	incf	(RunBypas@i+1)& (0+255),f,b
  8921  002A1C  D7A8               	goto	l5313
  8922                           
  8923                           ; BSR set to: 0
  8924  002A1E  0012               	return	
  8925  002A20                     l529:
  8926                           
  8927                           ; BSR set to: 0
  8928  002A20  0012               	return		;funcret
  8929  002A22                     __end_of_RunBypas:
  8930                           	opt stack 0
  8931                           tosu	equ	0xFFF
  8932                           tosh	equ	0xFFE
  8933                           tosl	equ	0xFFD
  8934                           pclath	equ	0xFFA
  8935                           tblptru	equ	0xFF8
  8936                           tblptrh	equ	0xFF7
  8937                           tblptrl	equ	0xFF6
  8938                           tablat	equ	0xFF5
  8939                           prodh	equ	0xFF4
  8940                           prodl	equ	0xFF3
  8941                           intcon	equ	0xFF2
  8942                           intcon2	equ	0xFF1
  8943                           postinc0	equ	0xFEE
  8944                           wreg	equ	0xFE8
  8945                           postinc1	equ	0xFE6
  8946                           postdec1	equ	0xFE5
  8947                           fsr1h	equ	0xFE2
  8948                           fsr1l	equ	0xFE1
  8949                           indf2	equ	0xFDF
  8950                           postinc2	equ	0xFDE
  8951                           postdec2	equ	0xFDD
  8952                           plusw2	equ	0xFDB
  8953                           fsr2h	equ	0xFDA
  8954                           fsr2l	equ	0xFD9
  8955                           status	equ	0xFD8
  8956                           
  8957 ;; *************** function _SetBypass *****************
  8958 ;; Defined at:
  8959 ;;		line 18 in file "Bypass.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;  pin             2   26[COMRAM] int 
  8962 ;;  state           2   28[COMRAM] int 
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;		None
  8965 ;; Return value:  Size  Location     Type
  8966 ;;                  2   26[COMRAM] int 
  8967 ;; Registers used:
  8968 ;;		wreg, status,2, status,0
  8969 ;; Tracked objects:
  8970 ;;		On entry : 0/0
  8971 ;;		On exit  : 0/0
  8972 ;;		Unchanged: 0/0
  8973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8974 ;;      Params:         4       0       0       0       0       0       0
  8975 ;;      Locals:         0       0       0       0       0       0       0
  8976 ;;      Temps:          2       0       0       0       0       0       0
  8977 ;;      Totals:         6       0       0       0       0       0       0
  8978 ;;Total ram usage:        6 bytes
  8979 ;; Hardware stack levels used:    1
  8980 ;; Hardware stack levels required when called:    4
  8981 ;; This function calls:
  8982 ;;		Nothing
  8983 ;; This function is called by:
  8984 ;;		_RunBypas
  8985 ;; This function uses a non-reentrant model
  8986 ;;
  8987                           
  8988                           	psect	text46
  8989  002762                     __ptext46:
  8990                           	opt stack 0
  8991  002762                     _SetBypass:
  8992                           	opt stack 25
  8993                           
  8994                           ;Bypass.c: 20: switch (pin) {
  8995                           
  8996                           ; BSR set to: 0
  8997                           ;incstack = 0
  8998  002762  D050               	goto	l4935
  8999  002764                     l4913:
  9000                           
  9001                           ;Bypass.c: 22: if (state)
  9002  002764  501D               	movf	SetBypass@state,w,c
  9003  002766  101E               	iorwf	SetBypass@state+1,w,c
  9004  002768  B4D8               	btfsc	status,2,c
  9005  00276A  D002               	goto	l456
  9006                           
  9007                           ;Bypass.c: 23: {
  9008                           ;Bypass.c: 24: do { LATC5 = 1; } while(0);
  9009  00276C  8A8B               	bsf	3979,5,c	;volatile
  9010                           
  9011                           ;Bypass.c: 25: }
  9012  00276E  0012               	return	
  9013  002770                     l456:
  9014  002770  9A8B               	bcf	3979,5,c	;volatile
  9015                           
  9016                           ;Bypass.c: 29: }
  9017                           ;Bypass.c: 30: break;
  9018  002772  0012               	return	
  9019  002774                     l4915:
  9020                           
  9021                           ;Bypass.c: 32: if (state)
  9022  002774  501D               	movf	SetBypass@state,w,c
  9023  002776  101E               	iorwf	SetBypass@state+1,w,c
  9024  002778  B4D8               	btfsc	status,2,c
  9025  00277A  D002               	goto	l464
  9026                           
  9027                           ;Bypass.c: 33: {
  9028                           ;Bypass.c: 34: do { LATC4 = 1; } while(0);
  9029  00277C  888B               	bsf	3979,4,c	;volatile
  9030                           
  9031                           ;Bypass.c: 35: }
  9032  00277E  0012               	return	
  9033  002780                     l464:
  9034  002780  988B               	bcf	3979,4,c	;volatile
  9035                           
  9036                           ;Bypass.c: 39: }
  9037                           ;Bypass.c: 40: break;
  9038  002782  0012               	return	
  9039  002784                     l4917:
  9040                           
  9041                           ;Bypass.c: 42: if (state)
  9042  002784  501D               	movf	SetBypass@state,w,c
  9043  002786  101E               	iorwf	SetBypass@state+1,w,c
  9044  002788  B4D8               	btfsc	status,2,c
  9045  00278A  D002               	goto	l471
  9046                           
  9047                           ;Bypass.c: 43: {
  9048                           ;Bypass.c: 44: do { LATD3 = 1; } while(0);
  9049  00278C  868C               	bsf	3980,3,c	;volatile
  9050                           
  9051                           ;Bypass.c: 45: }
  9052  00278E  0012               	return	
  9053  002790                     l471:
  9054  002790  968C               	bcf	3980,3,c	;volatile
  9055                           
  9056                           ;Bypass.c: 49: }
  9057                           ;Bypass.c: 50: break;
  9058  002792  0012               	return	
  9059  002794                     l4919:
  9060                           
  9061                           ;Bypass.c: 52: if (state)
  9062  002794  501D               	movf	SetBypass@state,w,c
  9063  002796  101E               	iorwf	SetBypass@state+1,w,c
  9064  002798  B4D8               	btfsc	status,2,c
  9065  00279A  D002               	goto	l478
  9066                           
  9067                           ;Bypass.c: 53: {
  9068                           ;Bypass.c: 54: do { LATD2 = 1; } while(0);
  9069  00279C  848C               	bsf	3980,2,c	;volatile
  9070                           
  9071                           ;Bypass.c: 55: }
  9072  00279E  0012               	return	
  9073  0027A0                     l478:
  9074  0027A0  948C               	bcf	3980,2,c	;volatile
  9075                           
  9076                           ;Bypass.c: 59: }
  9077                           ;Bypass.c: 60: break;
  9078  0027A2  0012               	return	
  9079  0027A4                     l4921:
  9080                           
  9081                           ;Bypass.c: 62: if (state)
  9082  0027A4  501D               	movf	SetBypass@state,w,c
  9083  0027A6  101E               	iorwf	SetBypass@state+1,w,c
  9084  0027A8  B4D8               	btfsc	status,2,c
  9085  0027AA  D002               	goto	l485
  9086                           
  9087                           ;Bypass.c: 63: {
  9088                           ;Bypass.c: 64: do { LATD1 = 1; } while(0);
  9089  0027AC  828C               	bsf	3980,1,c	;volatile
  9090                           
  9091                           ;Bypass.c: 65: }
  9092  0027AE  0012               	return	
  9093  0027B0                     l485:
  9094  0027B0  928C               	bcf	3980,1,c	;volatile
  9095                           
  9096                           ;Bypass.c: 69: }
  9097                           ;Bypass.c: 70: break;
  9098  0027B2  0012               	return	
  9099  0027B4                     l4923:
  9100                           
  9101                           ;Bypass.c: 72: if (state)
  9102  0027B4  501D               	movf	SetBypass@state,w,c
  9103  0027B6  101E               	iorwf	SetBypass@state+1,w,c
  9104  0027B8  B4D8               	btfsc	status,2,c
  9105  0027BA  D002               	goto	l492
  9106                           
  9107                           ;Bypass.c: 73: {
  9108                           ;Bypass.c: 74: do { LATD5 = 1; } while(0);
  9109  0027BC  8A8C               	bsf	3980,5,c	;volatile
  9110                           
  9111                           ;Bypass.c: 75: }
  9112  0027BE  0012               	return	
  9113  0027C0                     l492:
  9114  0027C0  9A8C               	bcf	3980,5,c	;volatile
  9115                           
  9116                           ;Bypass.c: 79: }
  9117                           ;Bypass.c: 80: break;
  9118  0027C2  0012               	return	
  9119  0027C4                     l4925:
  9120                           
  9121                           ;Bypass.c: 82: if (state)
  9122  0027C4  501D               	movf	SetBypass@state,w,c
  9123  0027C6  101E               	iorwf	SetBypass@state+1,w,c
  9124  0027C8  B4D8               	btfsc	status,2,c
  9125  0027CA  D002               	goto	l499
  9126                           
  9127                           ;Bypass.c: 83: {
  9128                           ;Bypass.c: 84: do { LATB0 = 1; } while(0);
  9129  0027CC  808A               	bsf	3978,0,c	;volatile
  9130                           
  9131                           ;Bypass.c: 85: }
  9132  0027CE  0012               	return	
  9133  0027D0                     l499:
  9134  0027D0  908A               	bcf	3978,0,c	;volatile
  9135                           
  9136                           ;Bypass.c: 89: }
  9137                           ;Bypass.c: 90: break;
  9138  0027D2  0012               	return	
  9139  0027D4                     l4927:
  9140                           
  9141                           ;Bypass.c: 92: if (state)
  9142  0027D4  501D               	movf	SetBypass@state,w,c
  9143  0027D6  101E               	iorwf	SetBypass@state+1,w,c
  9144  0027D8  B4D8               	btfsc	status,2,c
  9145  0027DA  D002               	goto	l506
  9146                           
  9147                           ;Bypass.c: 93: {
  9148                           ;Bypass.c: 94: do { LATB1 = 1; } while(0);
  9149  0027DC  828A               	bsf	3978,1,c	;volatile
  9150                           
  9151                           ;Bypass.c: 95: }
  9152  0027DE  0012               	return	
  9153  0027E0                     l506:
  9154  0027E0  928A               	bcf	3978,1,c	;volatile
  9155                           
  9156                           ;Bypass.c: 99: }
  9157                           ;Bypass.c: 100: break;
  9158  0027E2  0012               	return	
  9159  0027E4                     l4929:
  9160                           
  9161                           ;Bypass.c: 102: if (state)
  9162  0027E4  501D               	movf	SetBypass@state,w,c
  9163  0027E6  101E               	iorwf	SetBypass@state+1,w,c
  9164  0027E8  B4D8               	btfsc	status,2,c
  9165  0027EA  D002               	goto	l513
  9166                           
  9167                           ;Bypass.c: 103: {
  9168                           ;Bypass.c: 104: do { LATB3 = 1; } while(0);
  9169  0027EC  868A               	bsf	3978,3,c	;volatile
  9170                           
  9171                           ;Bypass.c: 105: }
  9172  0027EE  0012               	return	
  9173  0027F0                     l513:
  9174  0027F0  968A               	bcf	3978,3,c	;volatile
  9175                           
  9176                           ;Bypass.c: 109: }
  9177                           ;Bypass.c: 110: break;
  9178  0027F2  0012               	return	
  9179  0027F4                     l4931:
  9180                           
  9181                           ;Bypass.c: 112: if (state)
  9182  0027F4  501D               	movf	SetBypass@state,w,c
  9183  0027F6  101E               	iorwf	SetBypass@state+1,w,c
  9184  0027F8  B4D8               	btfsc	status,2,c
  9185  0027FA  D002               	goto	l520
  9186                           
  9187                           ;Bypass.c: 113: {
  9188                           ;Bypass.c: 114: do { LATA0 = 1; } while(0);
  9189  0027FC  8089               	bsf	3977,0,c	;volatile
  9190                           
  9191                           ;Bypass.c: 115: }
  9192  0027FE  0012               	return	
  9193  002800                     l520:
  9194  002800  9089               	bcf	3977,0,c	;volatile
  9195                           
  9196                           ;Bypass.c: 121: }
  9197                           
  9198                           ;Bypass.c: 119: }
  9199                           ;Bypass.c: 120: break;
  9200  002802  0012               	return	
  9201  002804                     l4935:
  9202  002804  C01B  F01F         	movff	SetBypass@pin,??_SetBypass
  9203  002808  C01C  F020         	movff	SetBypass@pin+1,??_SetBypass+1
  9204                           
  9205                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9206                           ; Switch size 1, requested type "space"
  9207                           ; Number of cases is 1, Range of values is 0 to 0
  9208                           ; switch strategies available:
  9209                           ; Name         Instructions Cycles
  9210                           ; simple_byte            4     3 (average)
  9211                           ;	Chosen strategy is simple_byte
  9212  00280C  5020               	movf	??_SetBypass+1,w,c
  9213  00280E  0A00               	xorlw	0	; case 0
  9214  002810  A4D8               	btfss	status,2,c
  9215  002812  0012               	return	
  9216                           
  9217                           ; Switch size 1, requested type "space"
  9218                           ; Number of cases is 10, Range of values is 0 to 9
  9219                           ; switch strategies available:
  9220                           ; Name         Instructions Cycles
  9221                           ; simple_byte           31    16 (average)
  9222                           ;	Chosen strategy is simple_byte
  9223  002814  501F               	movf	??_SetBypass,w,c
  9224  002816  0A00               	xorlw	0	; case 0
  9225  002818  B4D8               	btfsc	status,2,c
  9226  00281A  D7A4               	goto	l4913
  9227  00281C  0A01               	xorlw	1	; case 1
  9228  00281E  B4D8               	btfsc	status,2,c
  9229  002820  D7A9               	goto	l4915
  9230  002822  0A03               	xorlw	3	; case 2
  9231  002824  B4D8               	btfsc	status,2,c
  9232  002826  D7AE               	goto	l4917
  9233  002828  0A01               	xorlw	1	; case 3
  9234  00282A  B4D8               	btfsc	status,2,c
  9235  00282C  D7B3               	goto	l4919
  9236  00282E  0A07               	xorlw	7	; case 4
  9237  002830  B4D8               	btfsc	status,2,c
  9238  002832  D7B8               	goto	l4921
  9239  002834  0A01               	xorlw	1	; case 5
  9240  002836  B4D8               	btfsc	status,2,c
  9241  002838  D7BD               	goto	l4923
  9242  00283A  0A03               	xorlw	3	; case 6
  9243  00283C  B4D8               	btfsc	status,2,c
  9244  00283E  D7C2               	goto	l4925
  9245  002840  0A01               	xorlw	1	; case 7
  9246  002842  B4D8               	btfsc	status,2,c
  9247  002844  D7C7               	goto	l4927
  9248  002846  0A0F               	xorlw	15	; case 8
  9249  002848  B4D8               	btfsc	status,2,c
  9250  00284A  D7CC               	goto	l4929
  9251  00284C  0A01               	xorlw	1	; case 9
  9252  00284E  A4D8               	btfss	status,2,c
  9253  002850  0012               	return	
  9254  002852  D7D0               	goto	l4931
  9255  002854  0012               	return		;funcret
  9256  002856                     __end_of_SetBypass:
  9257                           	opt stack 0
  9258                           tosu	equ	0xFFF
  9259                           tosh	equ	0xFFE
  9260                           tosl	equ	0xFFD
  9261                           pclath	equ	0xFFA
  9262                           tblptru	equ	0xFF8
  9263                           tblptrh	equ	0xFF7
  9264                           tblptrl	equ	0xFF6
  9265                           tablat	equ	0xFF5
  9266                           prodh	equ	0xFF4
  9267                           prodl	equ	0xFF3
  9268                           intcon	equ	0xFF2
  9269                           intcon2	equ	0xFF1
  9270                           postinc0	equ	0xFEE
  9271                           wreg	equ	0xFE8
  9272                           postinc1	equ	0xFE6
  9273                           postdec1	equ	0xFE5
  9274                           fsr1h	equ	0xFE2
  9275                           fsr1l	equ	0xFE1
  9276                           indf2	equ	0xFDF
  9277                           postinc2	equ	0xFDE
  9278                           postdec2	equ	0xFDD
  9279                           plusw2	equ	0xFDB
  9280                           fsr2h	equ	0xFDA
  9281                           fsr2l	equ	0xFD9
  9282                           status	equ	0xFD8
  9283                           
  9284 ;; *************** function _Battery_Get *****************
  9285 ;; Defined at:
  9286 ;;		line 84 in file "Battery.c"
  9287 ;; Parameters:    Size  Location     Type
  9288 ;;  channelnum      2   32[COMRAM] int 
  9289 ;; Auto vars:     Size  Location     Type
  9290 ;;		None
  9291 ;; Return value:  Size  Location     Type
  9292 ;;                  3   32[COMRAM] float 
  9293 ;; Registers used:
  9294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9295 ;; Tracked objects:
  9296 ;;		On entry : 0/0
  9297 ;;		On exit  : 0/0
  9298 ;;		Unchanged: 0/0
  9299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9300 ;;      Params:         3       0       0       0       0       0       0
  9301 ;;      Locals:         0       0       0       0       0       0       0
  9302 ;;      Temps:          0       0       0       0       0       0       0
  9303 ;;      Totals:         3       0       0       0       0       0       0
  9304 ;;Total ram usage:        3 bytes
  9305 ;; Hardware stack levels used:    1
  9306 ;; Hardware stack levels required when called:    5
  9307 ;; This function calls:
  9308 ;;		___wmul
  9309 ;; This function is called by:
  9310 ;;		_RunBypas
  9311 ;;		_updateComms
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315                           	psect	text47
  9316  0037D4                     __ptext47:
  9317                           	opt stack 0
  9318  0037D4                     _Battery_Get:
  9319                           	opt stack 24
  9320                           
  9321                           ;Battery.c: 86: return Battery_Volt[channelnum];
  9322                           
  9323                           ;incstack = 0
  9324  0037D4  C021  F01B         	movff	Battery_Get@channelnum,___wmul@multiplier
  9325  0037D8  C022  F01C         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  9326  0037DC  0E00               	movlw	0
  9327  0037DE  6E1E               	movwf	___wmul@multiplicand+1,c
  9328  0037E0  0E03               	movlw	3
  9329  0037E2  6E1D               	movwf	___wmul@multiplicand,c
  9330  0037E4  EC5E  F01C         	call	___wmul	;wreg free
  9331  0037E8  0E70               	movlw	low _Battery_Volt
  9332  0037EA  241B               	addwf	?___wmul,w,c
  9333  0037EC  6ED9               	movwf	fsr2l,c
  9334  0037EE  0E01               	movlw	high _Battery_Volt
  9335  0037F0  201C               	addwfc	?___wmul+1,w,c
  9336  0037F2  6EDA               	movwf	fsr2h,c
  9337  0037F4  CFDE F021          	movff	postinc2,?_Battery_Get
  9338  0037F8  CFDE F022          	movff	postinc2,?_Battery_Get+1
  9339  0037FC  CFDD F023          	movff	postdec2,?_Battery_Get+2
  9340  003800  0012               	return	
  9341  003802  0012               	return		;funcret
  9342  003804                     __end_of_Battery_Get:
  9343                           	opt stack 0
  9344                           tosu	equ	0xFFF
  9345                           tosh	equ	0xFFE
  9346                           tosl	equ	0xFFD
  9347                           pclath	equ	0xFFA
  9348                           tblptru	equ	0xFF8
  9349                           tblptrh	equ	0xFF7
  9350                           tblptrl	equ	0xFF6
  9351                           tablat	equ	0xFF5
  9352                           prodh	equ	0xFF4
  9353                           prodl	equ	0xFF3
  9354                           intcon	equ	0xFF2
  9355                           intcon2	equ	0xFF1
  9356                           postinc0	equ	0xFEE
  9357                           wreg	equ	0xFE8
  9358                           postinc1	equ	0xFE6
  9359                           postdec1	equ	0xFE5
  9360                           fsr1h	equ	0xFE2
  9361                           fsr1l	equ	0xFE1
  9362                           indf2	equ	0xFDF
  9363                           postinc2	equ	0xFDE
  9364                           postdec2	equ	0xFDD
  9365                           plusw2	equ	0xFDB
  9366                           fsr2h	equ	0xFDA
  9367                           fsr2l	equ	0xFD9
  9368                           status	equ	0xFD8
  9369                           
  9370 ;; *************** function _Battery_Fault *****************
  9371 ;; Defined at:
  9372 ;;		line 66 in file "Battery.c"
  9373 ;; Parameters:    Size  Location     Type
  9374 ;;		None
  9375 ;; Auto vars:     Size  Location     Type
  9376 ;;  i               2   42[COMRAM] int 
  9377 ;;  fault           1   41[COMRAM] unsigned char 
  9378 ;; Return value:  Size  Location     Type
  9379 ;;                  1    wreg      unsigned char 
  9380 ;; Registers used:
  9381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9382 ;; Tracked objects:
  9383 ;;		On entry : 0/0
  9384 ;;		On exit  : 0/0
  9385 ;;		Unchanged: 0/0
  9386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9387 ;;      Params:         0       0       0       0       0       0       0
  9388 ;;      Locals:         3       0       0       0       0       0       0
  9389 ;;      Temps:          0       0       0       0       0       0       0
  9390 ;;      Totals:         3       0       0       0       0       0       0
  9391 ;;Total ram usage:        3 bytes
  9392 ;; Hardware stack levels used:    1
  9393 ;; Hardware stack levels required when called:    5
  9394 ;; This function calls:
  9395 ;;		___ftge
  9396 ;;		___wmul
  9397 ;; This function is called by:
  9398 ;;		_main
  9399 ;; This function uses a non-reentrant model
  9400 ;;
  9401                           
  9402                           	psect	text48
  9403  002F10                     __ptext48:
  9404                           	opt stack 0
  9405  002F10                     _Battery_Fault:
  9406                           	opt stack 25
  9407                           
  9408                           ;Battery.c: 67: char fault = 0;
  9409                           
  9410                           ;incstack = 0
  9411  002F10  0E00               	movlw	0
  9412  002F12  6E2A               	movwf	Battery_Fault@fault,c
  9413                           
  9414                           ;Battery.c: 68: for (int i = 0; i <= 9; i++) {
  9415  002F14  0E00               	movlw	0
  9416  002F16  6E2C               	movwf	Battery_Fault@i+1,c
  9417  002F18  0E00               	movlw	0
  9418  002F1A  6E2B               	movwf	Battery_Fault@i,c
  9419  002F1C                     l5251:
  9420  002F1C  BE2C               	btfsc	Battery_Fault@i+1,7,c
  9421  002F1E  D008               	goto	l5255
  9422  002F20  502C               	movf	Battery_Fault@i+1,w,c
  9423  002F22  E14D               	bnz	l296
  9424  002F24  0E0A               	movlw	10
  9425  002F26  5C2B               	subwf	Battery_Fault@i,w,c
  9426  002F28  B0D8               	btfsc	status,0,c
  9427  002F2A  0012               	return	
  9428  002F2C  D001               	goto	l5255
  9429  002F2E  0012               	return	
  9430  002F30                     l5255:
  9431                           
  9432                           ;Battery.c: 69: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i])) {
  9433  002F30  0E00               	movlw	0
  9434  002F32  6E21               	movwf	___ftge@ff1,c
  9435  002F34  0E40               	movlw	64
  9436  002F36  6E22               	movwf	___ftge@ff1+1,c
  9437  002F38  0E40               	movlw	64
  9438  002F3A  6E23               	movwf	___ftge@ff1+2,c
  9439  002F3C  C02B  F01B         	movff	Battery_Fault@i,___wmul@multiplier
  9440  002F40  C02C  F01C         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9441  002F44  0E00               	movlw	0
  9442  002F46  6E1E               	movwf	___wmul@multiplicand+1,c
  9443  002F48  0E03               	movlw	3
  9444  002F4A  6E1D               	movwf	___wmul@multiplicand,c
  9445  002F4C  EC5E  F01C         	call	___wmul	;wreg free
  9446  002F50  0E70               	movlw	low _Battery_Volt
  9447  002F52  241B               	addwf	?___wmul,w,c
  9448  002F54  6ED9               	movwf	fsr2l,c
  9449  002F56  0E01               	movlw	high _Battery_Volt
  9450  002F58  201C               	addwfc	?___wmul+1,w,c
  9451  002F5A  6EDA               	movwf	fsr2h,c
  9452  002F5C  CFDE F024          	movff	postinc2,___ftge@ff2
  9453  002F60  CFDE F025          	movff	postinc2,___ftge@ff2+1
  9454  002F64  CFDD F026          	movff	postdec2,___ftge@ff2+2
  9455  002F68  EC2B  F018         	call	___ftge	;wreg free
  9456  002F6C  B0D8               	btfsc	status,0,c
  9457  002F6E  D023               	goto	l5261
  9458  002F70  C02B  F01B         	movff	Battery_Fault@i,___wmul@multiplier
  9459  002F74  C02C  F01C         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9460  002F78  0E00               	movlw	0
  9461  002F7A  6E1E               	movwf	___wmul@multiplicand+1,c
  9462  002F7C  0E03               	movlw	3
  9463  002F7E  6E1D               	movwf	___wmul@multiplicand,c
  9464  002F80  EC5E  F01C         	call	___wmul	;wreg free
  9465  002F84  0E70               	movlw	low _Battery_Volt
  9466  002F86  241B               	addwf	?___wmul,w,c
  9467  002F88  6ED9               	movwf	fsr2l,c
  9468  002F8A  0E01               	movlw	high _Battery_Volt
  9469  002F8C  201C               	addwfc	?___wmul+1,w,c
  9470  002F8E  6EDA               	movwf	fsr2h,c
  9471  002F90  CFDE F021          	movff	postinc2,___ftge@ff1
  9472  002F94  CFDE F022          	movff	postinc2,___ftge@ff1+1
  9473  002F98  CFDD F023          	movff	postdec2,___ftge@ff1+2
  9474  002F9C  0EB8               	movlw	184
  9475  002F9E  6E24               	movwf	___ftge@ff2,c
  9476  002FA0  0E86               	movlw	134
  9477  002FA2  6E25               	movwf	___ftge@ff2+1,c
  9478  002FA4  0E40               	movlw	64
  9479  002FA6  6E26               	movwf	___ftge@ff2+2,c
  9480  002FA8  EC2B  F018         	call	___ftge	;wreg free
  9481  002FAC  B0D8               	btfsc	status,0,c
  9482  002FAE  D003               	goto	l5261
  9483                           
  9484                           ;Battery.c: 70: fault = 1;
  9485  002FB0  0E01               	movlw	1
  9486  002FB2  6E2A               	movwf	Battery_Fault@fault,c
  9487  002FB4  D000               	goto	l5261
  9488  002FB6                     l5261:
  9489  002FB6  4A2B               	infsnz	Battery_Fault@i,f,c
  9490  002FB8  2A2C               	incf	Battery_Fault@i+1,f,c
  9491  002FBA  D7B0               	goto	l5251
  9492  002FBC  0012               	return	
  9493  002FBE                     l296:
  9494  002FBE  0012               	return		;funcret
  9495  002FC0                     __end_of_Battery_Fault:
  9496                           	opt stack 0
  9497                           tosu	equ	0xFFF
  9498                           tosh	equ	0xFFE
  9499                           tosl	equ	0xFFD
  9500                           pclath	equ	0xFFA
  9501                           tblptru	equ	0xFF8
  9502                           tblptrh	equ	0xFF7
  9503                           tblptrl	equ	0xFF6
  9504                           tablat	equ	0xFF5
  9505                           prodh	equ	0xFF4
  9506                           prodl	equ	0xFF3
  9507                           intcon	equ	0xFF2
  9508                           intcon2	equ	0xFF1
  9509                           postinc0	equ	0xFEE
  9510                           wreg	equ	0xFE8
  9511                           postinc1	equ	0xFE6
  9512                           postdec1	equ	0xFE5
  9513                           fsr1h	equ	0xFE2
  9514                           fsr1l	equ	0xFE1
  9515                           indf2	equ	0xFDF
  9516                           postinc2	equ	0xFDE
  9517                           postdec2	equ	0xFDD
  9518                           plusw2	equ	0xFDB
  9519                           fsr2h	equ	0xFDA
  9520                           fsr2l	equ	0xFD9
  9521                           status	equ	0xFD8
  9522                           
  9523 ;; *************** function ___ftge *****************
  9524 ;; Defined at:
  9525 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  9526 ;; Parameters:    Size  Location     Type
  9527 ;;  ff1             3   32[COMRAM] float 
  9528 ;;  ff2             3   35[COMRAM] float 
  9529 ;; Auto vars:     Size  Location     Type
  9530 ;;		None
  9531 ;; Return value:  Size  Location     Type
  9532 ;;		None               void
  9533 ;; Registers used:
  9534 ;;		wreg, status,2, status,0
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9540 ;;      Params:         6       0       0       0       0       0       0
  9541 ;;      Locals:         0       0       0       0       0       0       0
  9542 ;;      Temps:          3       0       0       0       0       0       0
  9543 ;;      Totals:         9       0       0       0       0       0       0
  9544 ;;Total ram usage:        9 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; Hardware stack levels required when called:    4
  9547 ;; This function calls:
  9548 ;;		Nothing
  9549 ;; This function is called by:
  9550 ;;		_Battery_Fault
  9551 ;;		_Temp_Fault
  9552 ;;		_RunBypas
  9553 ;; This function uses a non-reentrant model
  9554 ;;
  9555                           
  9556                           	psect	text49
  9557  003056                     __ptext49:
  9558                           	opt stack 0
  9559  003056                     ___ftge:
  9560                           	opt stack 25
  9561                           
  9562                           ;incstack = 0
  9563  003056  AE23               	btfss	___ftge@ff1+2,7,c
  9564  003058  D017               	goto	l5209
  9565  00305A  C021  F027         	movff	___ftge@ff1,??___ftge
  9566  00305E  C022  F028         	movff	___ftge@ff1+1,??___ftge+1
  9567  003062  C023  F029         	movff	___ftge@ff1+2,??___ftge+2
  9568  003066  1E27               	comf	??___ftge,f,c
  9569  003068  1E28               	comf	??___ftge+1,f,c
  9570  00306A  1E29               	comf	??___ftge+2,f,c
  9571  00306C  2A27               	incf	??___ftge,f,c
  9572  00306E  0E00               	movlw	0
  9573  003070  2228               	addwfc	??___ftge+1,f,c
  9574  003072  2229               	addwfc	??___ftge+2,f,c
  9575  003074  0E00               	movlw	0
  9576  003076  2427               	addwf	??___ftge,w,c
  9577  003078  6E21               	movwf	___ftge@ff1,c
  9578  00307A  0E00               	movlw	0
  9579  00307C  2028               	addwfc	??___ftge+1,w,c
  9580  00307E  6E22               	movwf	___ftge@ff1+1,c
  9581  003080  0E80               	movlw	128
  9582  003082  2029               	addwfc	??___ftge+2,w,c
  9583  003084  6E23               	movwf	___ftge@ff1+2,c
  9584  003086  D000               	goto	l5209
  9585  003088                     l5209:
  9586  003088  AE26               	btfss	___ftge@ff2+2,7,c
  9587  00308A  D017               	goto	l5213
  9588  00308C  C024  F027         	movff	___ftge@ff2,??___ftge
  9589  003090  C025  F028         	movff	___ftge@ff2+1,??___ftge+1
  9590  003094  C026  F029         	movff	___ftge@ff2+2,??___ftge+2
  9591  003098  1E27               	comf	??___ftge,f,c
  9592  00309A  1E28               	comf	??___ftge+1,f,c
  9593  00309C  1E29               	comf	??___ftge+2,f,c
  9594  00309E  2A27               	incf	??___ftge,f,c
  9595  0030A0  0E00               	movlw	0
  9596  0030A2  2228               	addwfc	??___ftge+1,f,c
  9597  0030A4  2229               	addwfc	??___ftge+2,f,c
  9598  0030A6  0E00               	movlw	0
  9599  0030A8  2427               	addwf	??___ftge,w,c
  9600  0030AA  6E24               	movwf	___ftge@ff2,c
  9601  0030AC  0E00               	movlw	0
  9602  0030AE  2028               	addwfc	??___ftge+1,w,c
  9603  0030B0  6E25               	movwf	___ftge@ff2+1,c
  9604  0030B2  0E80               	movlw	128
  9605  0030B4  2029               	addwfc	??___ftge+2,w,c
  9606  0030B6  6E26               	movwf	___ftge@ff2+2,c
  9607  0030B8  D000               	goto	l5213
  9608  0030BA                     l5213:
  9609  0030BA  0E00               	movlw	0
  9610  0030BC  1A21               	xorwf	___ftge@ff1,f,c
  9611  0030BE  0E00               	movlw	0
  9612  0030C0  1A22               	xorwf	___ftge@ff1+1,f,c
  9613  0030C2  0E80               	movlw	128
  9614  0030C4  1A23               	xorwf	___ftge@ff1+2,f,c
  9615  0030C6  0E00               	movlw	0
  9616  0030C8  1A24               	xorwf	___ftge@ff2,f,c
  9617  0030CA  0E00               	movlw	0
  9618  0030CC  1A25               	xorwf	___ftge@ff2+1,f,c
  9619  0030CE  0E80               	movlw	128
  9620  0030D0  1A26               	xorwf	___ftge@ff2+2,f,c
  9621  0030D2  5024               	movf	___ftge@ff2,w,c
  9622  0030D4  5C21               	subwf	___ftge@ff1,w,c
  9623  0030D6  5025               	movf	___ftge@ff2+1,w,c
  9624  0030D8  5822               	subwfb	___ftge@ff1+1,w,c
  9625  0030DA  5026               	movf	___ftge@ff2+2,w,c
  9626  0030DC  5823               	subwfb	___ftge@ff1+2,w,c
  9627  0030DE  B0D8               	btfsc	status,0,c
  9628  0030E0  D002               	goto	l5219
  9629  0030E2  90D8               	bcf	status,0,c
  9630  0030E4  0012               	return	
  9631  0030E6                     l5219:
  9632  0030E6  80D8               	bsf	status,0,c
  9633  0030E8  0012               	return	
  9634  0030EA  0012               	return		;funcret
  9635  0030EC                     __end_of___ftge:
  9636                           	opt stack 0
  9637                           tosu	equ	0xFFF
  9638                           tosh	equ	0xFFE
  9639                           tosl	equ	0xFFD
  9640                           pclath	equ	0xFFA
  9641                           tblptru	equ	0xFF8
  9642                           tblptrh	equ	0xFF7
  9643                           tblptrl	equ	0xFF6
  9644                           tablat	equ	0xFF5
  9645                           prodh	equ	0xFF4
  9646                           prodl	equ	0xFF3
  9647                           intcon	equ	0xFF2
  9648                           intcon2	equ	0xFF1
  9649                           postinc0	equ	0xFEE
  9650                           wreg	equ	0xFE8
  9651                           postinc1	equ	0xFE6
  9652                           postdec1	equ	0xFE5
  9653                           fsr1h	equ	0xFE2
  9654                           fsr1l	equ	0xFE1
  9655                           indf2	equ	0xFDF
  9656                           postinc2	equ	0xFDE
  9657                           postdec2	equ	0xFDD
  9658                           plusw2	equ	0xFDB
  9659                           fsr2h	equ	0xFDA
  9660                           fsr2l	equ	0xFD9
  9661                           status	equ	0xFD8
  9662                           
  9663 ;; *************** function _Battery_Convert *****************
  9664 ;; Defined at:
  9665 ;;		line 33 in file "Battery.c"
  9666 ;; Parameters:    Size  Location     Type
  9667 ;;		None
  9668 ;; Auto vars:     Size  Location     Type
  9669 ;;  x               2   44[BANK0 ] int 
  9670 ;; Return value:  Size  Location     Type
  9671 ;;		None               void
  9672 ;; Registers used:
  9673 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9674 ;; Tracked objects:
  9675 ;;		On entry : 0/0
  9676 ;;		On exit  : 0/0
  9677 ;;		Unchanged: 0/0
  9678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9679 ;;      Params:         0       0       0       0       0       0       0
  9680 ;;      Locals:         0       2       0       0       0       0       0
  9681 ;;      Temps:          0       2       0       0       0       0       0
  9682 ;;      Totals:         0       4       0       0       0       0       0
  9683 ;;Total ram usage:        4 bytes
  9684 ;; Hardware stack levels used:    1
  9685 ;; Hardware stack levels required when called:    6
  9686 ;; This function calls:
  9687 ;;		_Battery_Filter
  9688 ;;		___altoft
  9689 ;;		___ftadd
  9690 ;;		___ftdiv
  9691 ;;		___ftmul
  9692 ;;		___wmul
  9693 ;; This function is called by:
  9694 ;;		_main
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           	psect	text50
  9699  00265C                     __ptext50:
  9700                           	opt stack 0
  9701  00265C                     _Battery_Convert:
  9702                           	opt stack 24
  9703                           
  9704                           ;Battery.c: 34: int x;
  9705                           ;Battery.c: 35: for (x = 0; x <= 9; x++) {
  9706                           
  9707                           ;incstack = 0
  9708  00265C  0E00               	movlw	0
  9709  00265E  0100               	movlb	0	; () banked
  9710  002660  6FEE               	movwf	(Battery_Convert@x+1)& (0+255),b
  9711  002662  0E00               	movlw	0
  9712  002664  6FED               	movwf	Battery_Convert@x& (0+255),b
  9713  002666                     l5237:
  9714                           
  9715                           ; BSR set to: 0
  9716  002666  0100               	movlb	0	; () banked
  9717  002668  BFEE               	btfsc	(Battery_Convert@x+1)& (0+255),7,b
  9718  00266A  D00A               	goto	l5241
  9719  00266C  0100               	movlb	0	; () banked
  9720  00266E  51EE               	movf	(Battery_Convert@x+1)& (0+255),w,b
  9721  002670  E175               	bnz	l5247
  9722  002672  0E0A               	movlw	10
  9723  002674  0100               	movlb	0	; () banked
  9724  002676  5DED               	subwf	Battery_Convert@x& (0+255),w,b
  9725  002678  B0D8               	btfsc	status,0,c
  9726  00267A  D070               	goto	l5247
  9727  00267C  D001               	goto	l5241
  9728                           
  9729                           ; BSR set to: 0
  9730  00267E  D06E               	goto	l5247
  9731  002680                     l5241:
  9732                           
  9733                           ; BSR set to: 0
  9734                           ;Battery.c: 36: TempBattery_Volt[x] = ((Battery_Adc[x] / 1024.0)*5.0) + 0.05;
  9735  002680  C0ED  F01B         	movff	Battery_Convert@x,___wmul@multiplier
  9736  002684  C0EE  F01C         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  9737  002688  0E00               	movlw	0
  9738  00268A  6E1E               	movwf	___wmul@multiplicand+1,c
  9739  00268C  0E03               	movlw	3
  9740  00268E  6E1D               	movwf	___wmul@multiplicand,c
  9741  002690  EC5E  F01C         	call	___wmul	;wreg free
  9742  002694  0E1E               	movlw	low _TempBattery_Volt
  9743  002696  241B               	addwf	?___wmul,w,c
  9744  002698  6ED9               	movwf	fsr2l,c
  9745  00269A  0E01               	movlw	high _TempBattery_Volt
  9746  00269C  201C               	addwfc	?___wmul+1,w,c
  9747  00269E  6EDA               	movwf	fsr2h,c
  9748  0026A0  0E00               	movlw	0
  9749  0026A2  0100               	movlb	0	; () banked
  9750  0026A4  6FD3               	movwf	___ftmul@f2& (0+255),b
  9751  0026A6  0EA0               	movlw	160
  9752  0026A8  0100               	movlb	0	; () banked
  9753  0026AA  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  9754  0026AC  0E40               	movlw	64
  9755  0026AE  0100               	movlb	0	; () banked
  9756  0026B0  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  9757  0026B2  0E00               	movlw	0
  9758  0026B4  0100               	movlb	0	; () banked
  9759  0026B6  6FC4               	movwf	___ftdiv@f2& (0+255),b
  9760  0026B8  0E80               	movlw	128
  9761  0026BA  0100               	movlb	0	; () banked
  9762  0026BC  6FC5               	movwf	(___ftdiv@f2+1)& (0+255),b
  9763  0026BE  0E44               	movlw	68
  9764  0026C0  0100               	movlb	0	; () banked
  9765  0026C2  6FC6               	movwf	(___ftdiv@f2+2)& (0+255),b
  9766  0026C4  0E60               	movlw	low _Battery_Adc
  9767  0026C6  0100               	movlb	0	; () banked
  9768  0026C8  6FEB               	movwf	??_Battery_Convert& (0+255),b
  9769  0026CA  0E00               	movlw	high _Battery_Adc
  9770  0026CC  0100               	movlb	0	; () banked
  9771  0026CE  6FEC               	movwf	(??_Battery_Convert+1)& (0+255),b
  9772  0026D0  90D8               	bcf	status,0,c
  9773  0026D2  0100               	movlb	0	; () banked
  9774  0026D4  35ED               	rlcf	Battery_Convert@x& (0+255),w,b
  9775  0026D6  6EE1               	movwf	fsr1l,c
  9776  0026D8  0100               	movlb	0	; () banked
  9777  0026DA  35EE               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  9778  0026DC  6EE2               	movwf	fsr1h,c
  9779  0026DE  90D8               	bcf	status,0,c
  9780  0026E0  36E1               	rlcf	fsr1l,f,c
  9781  0026E2  36E2               	rlcf	fsr1h,f,c
  9782  0026E4  0100               	movlb	0	; () banked
  9783  0026E6  51EB               	movf	??_Battery_Convert& (0+255),w,b
  9784  0026E8  26E1               	addwf	fsr1l,f,c
  9785  0026EA  0100               	movlb	0	; () banked
  9786  0026EC  51EC               	movf	(??_Battery_Convert+1)& (0+255),w,b
  9787  0026EE  22E2               	addwfc	fsr1h,f,c
  9788  0026F0  CFE6 F023          	movff	postinc1,___altoft@c
  9789  0026F4  CFE6 F024          	movff	postinc1,___altoft@c+1
  9790  0026F8  CFE6 F025          	movff	postinc1,___altoft@c+2
  9791  0026FC  CFE6 F026          	movff	postinc1,___altoft@c+3
  9792  002700  EC53  F019         	call	___altoft	;wreg free
  9793  002704  C023  F0C1         	movff	?___altoft,___ftdiv@f1
  9794  002708  C024  F0C2         	movff	?___altoft+1,___ftdiv@f1+1
  9795  00270C  C025  F0C3         	movff	?___altoft+2,___ftdiv@f1+2
  9796  002710  EC29  F010         	call	___ftdiv	;wreg free
  9797  002714  C0C1  F0D0         	movff	?___ftdiv,___ftmul@f1
  9798  002718  C0C2  F0D1         	movff	?___ftdiv+1,___ftmul@f1+1
  9799  00271C  C0C3  F0D2         	movff	?___ftdiv+2,___ftmul@f1+2
  9800  002720  EC15  F00E         	call	___ftmul	;wreg free
  9801  002724  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  9802  002728  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  9803  00272C  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  9804  002730  0ECD               	movlw	205
  9805  002732  0100               	movlb	0	; () banked
  9806  002734  6FE2               	movwf	___ftadd@f2& (0+255),b
  9807  002736  0E4C               	movlw	76
  9808  002738  0100               	movlb	0	; () banked
  9809  00273A  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  9810  00273C  0E3D               	movlw	61
  9811  00273E  0100               	movlb	0	; () banked
  9812  002740  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  9813  002742  EC5C  F00A         	call	___ftadd	;wreg free
  9814  002746  C0DF  FFDE         	movff	?___ftadd,postinc2
  9815  00274A  C0E0  FFDE         	movff	?___ftadd+1,postinc2
  9816  00274E  C0E1  FFDE         	movff	?___ftadd+2,postinc2
  9817  002752  0100               	movlb	0	; () banked
  9818  002754  4BED               	infsnz	Battery_Convert@x& (0+255),f,b
  9819  002756  2BEE               	incf	(Battery_Convert@x+1)& (0+255),f,b
  9820  002758  D786               	goto	l5237
  9821                           
  9822                           ; BSR set to: 0
  9823  00275A  D000               	goto	l5247
  9824  00275C                     l5247:
  9825                           
  9826                           ; BSR set to: 0
  9827                           ;Battery.c: 37: }
  9828                           ;Battery.c: 38: Battery_Filter();
  9829  00275C  EC82  F015         	call	_Battery_Filter	;wreg free
  9830  002760  0012               	return		;funcret
  9831  002762                     __end_of_Battery_Convert:
  9832                           	opt stack 0
  9833                           tosu	equ	0xFFF
  9834                           tosh	equ	0xFFE
  9835                           tosl	equ	0xFFD
  9836                           pclath	equ	0xFFA
  9837                           tblptru	equ	0xFF8
  9838                           tblptrh	equ	0xFF7
  9839                           tblptrl	equ	0xFF6
  9840                           tablat	equ	0xFF5
  9841                           prodh	equ	0xFF4
  9842                           prodl	equ	0xFF3
  9843                           intcon	equ	0xFF2
  9844                           intcon2	equ	0xFF1
  9845                           postinc0	equ	0xFEE
  9846                           wreg	equ	0xFE8
  9847                           postinc1	equ	0xFE6
  9848                           postdec1	equ	0xFE5
  9849                           fsr1h	equ	0xFE2
  9850                           fsr1l	equ	0xFE1
  9851                           indf2	equ	0xFDF
  9852                           postinc2	equ	0xFDE
  9853                           postdec2	equ	0xFDD
  9854                           plusw2	equ	0xFDB
  9855                           fsr2h	equ	0xFDA
  9856                           fsr2l	equ	0xFD9
  9857                           status	equ	0xFD8
  9858                           
  9859 ;; *************** function ___ftmul *****************
  9860 ;; Defined at:
  9861 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9862 ;; Parameters:    Size  Location     Type
  9863 ;;  f1              3   15[BANK0 ] float 
  9864 ;;  f2              3   18[BANK0 ] float 
  9865 ;; Auto vars:     Size  Location     Type
  9866 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  9867 ;;  sign            1   29[BANK0 ] unsigned char 
  9868 ;;  cntr            1   28[BANK0 ] unsigned char 
  9869 ;;  exp             1   24[BANK0 ] unsigned char 
  9870 ;; Return value:  Size  Location     Type
  9871 ;;                  3   15[BANK0 ] float 
  9872 ;; Registers used:
  9873 ;;		wreg, status,2, status,0, cstack
  9874 ;; Tracked objects:
  9875 ;;		On entry : 0/0
  9876 ;;		On exit  : 0/0
  9877 ;;		Unchanged: 0/0
  9878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9879 ;;      Params:         0       6       0       0       0       0       0
  9880 ;;      Locals:         0       6       0       0       0       0       0
  9881 ;;      Temps:          0       3       0       0       0       0       0
  9882 ;;      Totals:         0      15       0       0       0       0       0
  9883 ;;Total ram usage:       15 bytes
  9884 ;; Hardware stack levels used:    1
  9885 ;; Hardware stack levels required when called:    5
  9886 ;; This function calls:
  9887 ;;		___ftpack
  9888 ;; This function is called by:
  9889 ;;		_Battery_Convert
  9890 ;;		_Temp_Filter
  9891 ;;		_Temp_Convert
  9892 ;;		_updateComms
  9893 ;;		_log
  9894 ;;		_eval_poly
  9895 ;; This function uses a non-reentrant model
  9896 ;;
  9897                           
  9898                           	psect	text51
  9899  001C2A                     __ptext51:
  9900                           	opt stack 0
  9901  001C2A                     ___ftmul:
  9902                           	opt stack 24
  9903                           
  9904                           ;incstack = 0
  9905  001C2A  C0D2  F0D6         	movff	___ftmul@f1+2,??___ftmul
  9906  001C2E  0100               	movlb	0	; () banked
  9907  001C30  6BD7               	clrf	(??___ftmul+1)& (0+255),b
  9908  001C32  6BD8               	clrf	(??___ftmul+2)& (0+255),b
  9909  001C34  0100               	movlb	0	; () banked
  9910  001C36  35D1               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9911  001C38  0100               	movlb	0	; () banked
  9912  001C3A  37D6               	rlcf	??___ftmul& (0+255),f,b
  9913  001C3C  E301               	bnc	u4761
  9914  001C3E  81D7               	bsf	(??___ftmul+1)& (0+255),0,b
  9915  001C40                     u4761:
  9916  001C40  0100               	movlb	0	; () banked
  9917  001C42  51D6               	movf	??___ftmul& (0+255),w,b
  9918  001C44  0100               	movlb	0	; () banked
  9919  001C46  6FD9               	movwf	___ftmul@exp& (0+255),b
  9920  001C48  0100               	movlb	0	; () banked
  9921  001C4A  51D9               	movf	___ftmul@exp& (0+255),w,b
  9922  001C4C  A4D8               	btfss	status,2,c
  9923  001C4E  D00A               	goto	l4629
  9924                           
  9925                           ; BSR set to: 0
  9926  001C50  0E00               	movlw	0
  9927  001C52  0100               	movlb	0	; () banked
  9928  001C54  6FD0               	movwf	?___ftmul& (0+255),b
  9929  001C56  0E00               	movlw	0
  9930  001C58  0100               	movlb	0	; () banked
  9931  001C5A  6FD1               	movwf	(?___ftmul+1)& (0+255),b
  9932  001C5C  0E00               	movlw	0
  9933  001C5E  0100               	movlb	0	; () banked
  9934  001C60  6FD2               	movwf	(?___ftmul+2)& (0+255),b
  9935                           
  9936                           ; BSR set to: 0
  9937  001C62  0012               	return	
  9938  001C64                     l4629:
  9939                           
  9940                           ; BSR set to: 0
  9941  001C64  C0D5  F0D6         	movff	___ftmul@f2+2,??___ftmul
  9942  001C68  0100               	movlb	0	; () banked
  9943  001C6A  6BD7               	clrf	(??___ftmul+1)& (0+255),b
  9944  001C6C  6BD8               	clrf	(??___ftmul+2)& (0+255),b
  9945  001C6E  0100               	movlb	0	; () banked
  9946  001C70  35D4               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  9947  001C72  0100               	movlb	0	; () banked
  9948  001C74  37D6               	rlcf	??___ftmul& (0+255),f,b
  9949  001C76  E301               	bnc	u4781
  9950  001C78  81D7               	bsf	(??___ftmul+1)& (0+255),0,b
  9951  001C7A                     u4781:
  9952  001C7A  0100               	movlb	0	; () banked
  9953  001C7C  51D6               	movf	??___ftmul& (0+255),w,b
  9954  001C7E  0100               	movlb	0	; () banked
  9955  001C80  6FDE               	movwf	___ftmul@sign& (0+255),b
  9956  001C82  0100               	movlb	0	; () banked
  9957  001C84  51DE               	movf	___ftmul@sign& (0+255),w,b
  9958  001C86  A4D8               	btfss	status,2,c
  9959  001C88  D00A               	goto	l4635
  9960                           
  9961                           ; BSR set to: 0
  9962  001C8A  0E00               	movlw	0
  9963  001C8C  0100               	movlb	0	; () banked
  9964  001C8E  6FD0               	movwf	?___ftmul& (0+255),b
  9965  001C90  0E00               	movlw	0
  9966  001C92  0100               	movlb	0	; () banked
  9967  001C94  6FD1               	movwf	(?___ftmul+1)& (0+255),b
  9968  001C96  0E00               	movlw	0
  9969  001C98  0100               	movlb	0	; () banked
  9970  001C9A  6FD2               	movwf	(?___ftmul+2)& (0+255),b
  9971                           
  9972                           ; BSR set to: 0
  9973  001C9C  0012               	return	
  9974  001C9E                     l4635:
  9975                           
  9976                           ; BSR set to: 0
  9977  001C9E  0100               	movlb	0	; () banked
  9978  001CA0  51DE               	movf	___ftmul@sign& (0+255),w,b
  9979  001CA2  0F7B               	addlw	123
  9980  001CA4  0100               	movlb	0	; () banked
  9981  001CA6  27D9               	addwf	___ftmul@exp& (0+255),f,b
  9982                           
  9983                           ; BSR set to: 0
  9984  001CA8  C0D2  F0DE         	movff	___ftmul@f1+2,___ftmul@sign
  9985  001CAC  0100               	movlb	0	; () banked
  9986  001CAE  51D5               	movf	(___ftmul@f2+2)& (0+255),w,b
  9987  001CB0  0100               	movlb	0	; () banked
  9988  001CB2  1BDE               	xorwf	___ftmul@sign& (0+255),f,b
  9989  001CB4  0E80               	movlw	128
  9990  001CB6  0100               	movlb	0	; () banked
  9991  001CB8  17DE               	andwf	___ftmul@sign& (0+255),f,b
  9992                           
  9993                           ; BSR set to: 0
  9994  001CBA  0100               	movlb	0	; () banked
  9995  001CBC  8FD1               	bsf	(___ftmul@f1+1)& (0+255),7,b
  9996                           
  9997                           ; BSR set to: 0
  9998  001CBE  0100               	movlb	0	; () banked
  9999  001CC0  8FD4               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10000                           
 10001                           ; BSR set to: 0
 10002  001CC2  0EFF               	movlw	255
 10003  001CC4  0100               	movlb	0	; () banked
 10004  001CC6  17D3               	andwf	___ftmul@f2& (0+255),f,b
 10005  001CC8  0EFF               	movlw	255
 10006  001CCA  0100               	movlb	0	; () banked
 10007  001CCC  17D4               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10008  001CCE  0E00               	movlw	0
 10009  001CD0  0100               	movlb	0	; () banked
 10010  001CD2  17D5               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10011                           
 10012                           ; BSR set to: 0
 10013  001CD4  0E00               	movlw	0
 10014  001CD6  0100               	movlb	0	; () banked
 10015  001CD8  6FDA               	movwf	___ftmul@f3_as_product& (0+255),b
 10016  001CDA  0E00               	movlw	0
 10017  001CDC  0100               	movlb	0	; () banked
 10018  001CDE  6FDB               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10019  001CE0  0E00               	movlw	0
 10020  001CE2  0100               	movlb	0	; () banked
 10021  001CE4  6FDC               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10022                           
 10023                           ; BSR set to: 0
 10024  001CE6  0E07               	movlw	7
 10025  001CE8  0100               	movlb	0	; () banked
 10026  001CEA  6FDD               	movwf	___ftmul@cntr& (0+255),b
 10027  001CEC  D000               	goto	l4649
 10028  001CEE                     l4649:
 10029                           
 10030                           ; BSR set to: 0
 10031  001CEE  0100               	movlb	0	; () banked
 10032  001CF0  A1D0               	btfss	___ftmul@f1& (0+255),0,b
 10033  001CF2  D00D               	goto	l4653
 10034                           
 10035                           ; BSR set to: 0
 10036  001CF4  0100               	movlb	0	; () banked
 10037  001CF6  51D3               	movf	___ftmul@f2& (0+255),w,b
 10038  001CF8  0100               	movlb	0	; () banked
 10039  001CFA  27DA               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10040  001CFC  0100               	movlb	0	; () banked
 10041  001CFE  51D4               	movf	(___ftmul@f2+1)& (0+255),w,b
 10042  001D00  0100               	movlb	0	; () banked
 10043  001D02  23DB               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10044  001D04  0100               	movlb	0	; () banked
 10045  001D06  51D5               	movf	(___ftmul@f2+2)& (0+255),w,b
 10046  001D08  0100               	movlb	0	; () banked
 10047  001D0A  23DC               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10048  001D0C  D000               	goto	l4653
 10049  001D0E                     l4653:
 10050                           
 10051                           ; BSR set to: 0
 10052  001D0E  0100               	movlb	0	; () banked
 10053  001D10  90D8               	bcf	status,0,c
 10054  001D12  33D2               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10055  001D14  33D1               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10056  001D16  33D0               	rrcf	___ftmul@f1& (0+255),f,b
 10057  001D18  0100               	movlb	0	; () banked
 10058  001D1A  90D8               	bcf	status,0,c
 10059  001D1C  37D3               	rlcf	___ftmul@f2& (0+255),f,b
 10060  001D1E  37D4               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10061  001D20  37D5               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10062                           
 10063                           ; BSR set to: 0
 10064  001D22  0100               	movlb	0	; () banked
 10065  001D24  2FDD               	decfsz	___ftmul@cntr& (0+255),f,b
 10066  001D26  D7E3               	goto	l4649
 10067  001D28  D000               	goto	l4657
 10068  001D2A                     l4657:
 10069                           
 10070                           ; BSR set to: 0
 10071  001D2A  0E09               	movlw	9
 10072  001D2C  0100               	movlb	0	; () banked
 10073  001D2E  6FDD               	movwf	___ftmul@cntr& (0+255),b
 10074  001D30  D000               	goto	l4659
 10075  001D32                     l4659:
 10076                           
 10077                           ; BSR set to: 0
 10078  001D32  0100               	movlb	0	; () banked
 10079  001D34  A1D0               	btfss	___ftmul@f1& (0+255),0,b
 10080  001D36  D00D               	goto	l4663
 10081                           
 10082                           ; BSR set to: 0
 10083  001D38  0100               	movlb	0	; () banked
 10084  001D3A  51D3               	movf	___ftmul@f2& (0+255),w,b
 10085  001D3C  0100               	movlb	0	; () banked
 10086  001D3E  27DA               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10087  001D40  0100               	movlb	0	; () banked
 10088  001D42  51D4               	movf	(___ftmul@f2+1)& (0+255),w,b
 10089  001D44  0100               	movlb	0	; () banked
 10090  001D46  23DB               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10091  001D48  0100               	movlb	0	; () banked
 10092  001D4A  51D5               	movf	(___ftmul@f2+2)& (0+255),w,b
 10093  001D4C  0100               	movlb	0	; () banked
 10094  001D4E  23DC               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10095  001D50  D000               	goto	l4663
 10096  001D52                     l4663:
 10097                           
 10098                           ; BSR set to: 0
 10099  001D52  0100               	movlb	0	; () banked
 10100  001D54  90D8               	bcf	status,0,c
 10101  001D56  33D2               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10102  001D58  33D1               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10103  001D5A  33D0               	rrcf	___ftmul@f1& (0+255),f,b
 10104  001D5C  0100               	movlb	0	; () banked
 10105  001D5E  90D8               	bcf	status,0,c
 10106  001D60  33DC               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10107  001D62  33DB               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10108  001D64  33DA               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10109                           
 10110                           ; BSR set to: 0
 10111  001D66  0100               	movlb	0	; () banked
 10112  001D68  2FDD               	decfsz	___ftmul@cntr& (0+255),f,b
 10113  001D6A  D7E3               	goto	l4659
 10114  001D6C  D000               	goto	l4667
 10115  001D6E                     l4667:
 10116                           
 10117                           ; BSR set to: 0
 10118  001D6E  C0DA  F01B         	movff	___ftmul@f3_as_product,___ftpack@arg
 10119  001D72  C0DB  F01C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10120  001D76  C0DC  F01D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10121  001D7A  C0D9  F01E         	movff	___ftmul@exp,___ftpack@exp
 10122  001D7E  C0DE  F01F         	movff	___ftmul@sign,___ftpack@sign
 10123  001D82  ECCD  F016         	call	___ftpack	;wreg free
 10124  001D86  C01B  F0D0         	movff	?___ftpack,?___ftmul
 10125  001D8A  C01C  F0D1         	movff	?___ftpack+1,?___ftmul+1
 10126  001D8E  C01D  F0D2         	movff	?___ftpack+2,?___ftmul+2
 10127  001D92  0012               	return	
 10128  001D94  0012               	return		;funcret
 10129  001D96                     __end_of___ftmul:
 10130                           	opt stack 0
 10131                           tosu	equ	0xFFF
 10132                           tosh	equ	0xFFE
 10133                           tosl	equ	0xFFD
 10134                           pclath	equ	0xFFA
 10135                           tblptru	equ	0xFF8
 10136                           tblptrh	equ	0xFF7
 10137                           tblptrl	equ	0xFF6
 10138                           tablat	equ	0xFF5
 10139                           prodh	equ	0xFF4
 10140                           prodl	equ	0xFF3
 10141                           intcon	equ	0xFF2
 10142                           intcon2	equ	0xFF1
 10143                           postinc0	equ	0xFEE
 10144                           wreg	equ	0xFE8
 10145                           postinc1	equ	0xFE6
 10146                           postdec1	equ	0xFE5
 10147                           fsr1h	equ	0xFE2
 10148                           fsr1l	equ	0xFE1
 10149                           indf2	equ	0xFDF
 10150                           postinc2	equ	0xFDE
 10151                           postdec2	equ	0xFDD
 10152                           plusw2	equ	0xFDB
 10153                           fsr2h	equ	0xFDA
 10154                           fsr2l	equ	0xFD9
 10155                           status	equ	0xFD8
 10156                           
 10157 ;; *************** function ___ftdiv *****************
 10158 ;; Defined at:
 10159 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 10160 ;; Parameters:    Size  Location     Type
 10161 ;;  f1              3    0[BANK0 ] float 
 10162 ;;  f2              3    3[BANK0 ] float 
 10163 ;; Auto vars:     Size  Location     Type
 10164 ;;  f3              3   10[BANK0 ] float 
 10165 ;;  sign            1   14[BANK0 ] unsigned char 
 10166 ;;  exp             1   13[BANK0 ] unsigned char 
 10167 ;;  cntr            1    9[BANK0 ] unsigned char 
 10168 ;; Return value:  Size  Location     Type
 10169 ;;                  3    0[BANK0 ] float 
 10170 ;; Registers used:
 10171 ;;		wreg, status,2, status,0, cstack
 10172 ;; Tracked objects:
 10173 ;;		On entry : 0/0
 10174 ;;		On exit  : 0/0
 10175 ;;		Unchanged: 0/0
 10176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10177 ;;      Params:         0       6       0       0       0       0       0
 10178 ;;      Locals:         0       6       0       0       0       0       0
 10179 ;;      Temps:          0       3       0       0       0       0       0
 10180 ;;      Totals:         0      15       0       0       0       0       0
 10181 ;;Total ram usage:       15 bytes
 10182 ;; Hardware stack levels used:    1
 10183 ;; Hardware stack levels required when called:    5
 10184 ;; This function calls:
 10185 ;;		___ftpack
 10186 ;; This function is called by:
 10187 ;;		_Battery_Convert
 10188 ;;		_Temp_Convert
 10189 ;; This function uses a non-reentrant model
 10190 ;;
 10191                           
 10192                           	psect	text52
 10193  002052                     __ptext52:
 10194                           	opt stack 0
 10195  002052                     ___ftdiv:
 10196                           	opt stack 24
 10197                           
 10198                           ;incstack = 0
 10199  002052  C0C3  F0C7         	movff	___ftdiv@f1+2,??___ftdiv
 10200  002056  0100               	movlb	0	; () banked
 10201  002058  6BC8               	clrf	(??___ftdiv+1)& (0+255),b
 10202  00205A  6BC9               	clrf	(??___ftdiv+2)& (0+255),b
 10203  00205C  0100               	movlb	0	; () banked
 10204  00205E  35C2               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10205  002060  0100               	movlb	0	; () banked
 10206  002062  37C7               	rlcf	??___ftdiv& (0+255),f,b
 10207  002064  E301               	bnc	u5861
 10208  002066  81C8               	bsf	(??___ftdiv+1)& (0+255),0,b
 10209  002068                     u5861:
 10210  002068  0100               	movlb	0	; () banked
 10211  00206A  51C7               	movf	??___ftdiv& (0+255),w,b
 10212  00206C  0100               	movlb	0	; () banked
 10213  00206E  6FCE               	movwf	___ftdiv@exp& (0+255),b
 10214  002070  0100               	movlb	0	; () banked
 10215  002072  51CE               	movf	___ftdiv@exp& (0+255),w,b
 10216  002074  A4D8               	btfss	status,2,c
 10217  002076  D00A               	goto	l5157
 10218                           
 10219                           ; BSR set to: 0
 10220  002078  0E00               	movlw	0
 10221  00207A  0100               	movlb	0	; () banked
 10222  00207C  6FC1               	movwf	?___ftdiv& (0+255),b
 10223  00207E  0E00               	movlw	0
 10224  002080  0100               	movlb	0	; () banked
 10225  002082  6FC2               	movwf	(?___ftdiv+1)& (0+255),b
 10226  002084  0E00               	movlw	0
 10227  002086  0100               	movlb	0	; () banked
 10228  002088  6FC3               	movwf	(?___ftdiv+2)& (0+255),b
 10229                           
 10230                           ; BSR set to: 0
 10231  00208A  0012               	return	
 10232  00208C                     l5157:
 10233                           
 10234                           ; BSR set to: 0
 10235  00208C  C0C6  F0C7         	movff	___ftdiv@f2+2,??___ftdiv
 10236  002090  0100               	movlb	0	; () banked
 10237  002092  6BC8               	clrf	(??___ftdiv+1)& (0+255),b
 10238  002094  6BC9               	clrf	(??___ftdiv+2)& (0+255),b
 10239  002096  0100               	movlb	0	; () banked
 10240  002098  35C5               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 10241  00209A  0100               	movlb	0	; () banked
 10242  00209C  37C7               	rlcf	??___ftdiv& (0+255),f,b
 10243  00209E  E301               	bnc	u5881
 10244  0020A0  81C8               	bsf	(??___ftdiv+1)& (0+255),0,b
 10245  0020A2                     u5881:
 10246  0020A2  0100               	movlb	0	; () banked
 10247  0020A4  51C7               	movf	??___ftdiv& (0+255),w,b
 10248  0020A6  0100               	movlb	0	; () banked
 10249  0020A8  6FCF               	movwf	___ftdiv@sign& (0+255),b
 10250  0020AA  0100               	movlb	0	; () banked
 10251  0020AC  51CF               	movf	___ftdiv@sign& (0+255),w,b
 10252  0020AE  A4D8               	btfss	status,2,c
 10253  0020B0  D00A               	goto	l5163
 10254                           
 10255                           ; BSR set to: 0
 10256  0020B2  0E00               	movlw	0
 10257  0020B4  0100               	movlb	0	; () banked
 10258  0020B6  6FC1               	movwf	?___ftdiv& (0+255),b
 10259  0020B8  0E00               	movlw	0
 10260  0020BA  0100               	movlb	0	; () banked
 10261  0020BC  6FC2               	movwf	(?___ftdiv+1)& (0+255),b
 10262  0020BE  0E00               	movlw	0
 10263  0020C0  0100               	movlb	0	; () banked
 10264  0020C2  6FC3               	movwf	(?___ftdiv+2)& (0+255),b
 10265                           
 10266                           ; BSR set to: 0
 10267  0020C4  0012               	return	
 10268  0020C6                     l5163:
 10269                           
 10270                           ; BSR set to: 0
 10271  0020C6  0E00               	movlw	0
 10272  0020C8  0100               	movlb	0	; () banked
 10273  0020CA  6FCB               	movwf	___ftdiv@f3& (0+255),b
 10274  0020CC  0E00               	movlw	0
 10275  0020CE  0100               	movlb	0	; () banked
 10276  0020D0  6FCC               	movwf	(___ftdiv@f3+1)& (0+255),b
 10277  0020D2  0E00               	movlw	0
 10278  0020D4  0100               	movlb	0	; () banked
 10279  0020D6  6FCD               	movwf	(___ftdiv@f3+2)& (0+255),b
 10280                           
 10281                           ; BSR set to: 0
 10282  0020D8  0100               	movlb	0	; () banked
 10283  0020DA  51CF               	movf	___ftdiv@sign& (0+255),w,b
 10284  0020DC  0F89               	addlw	137
 10285  0020DE  0100               	movlb	0	; () banked
 10286  0020E0  5FCE               	subwf	___ftdiv@exp& (0+255),f,b
 10287                           
 10288                           ; BSR set to: 0
 10289  0020E2  C0C3  F0CF         	movff	___ftdiv@f1+2,___ftdiv@sign
 10290                           
 10291                           ; BSR set to: 0
 10292  0020E6  0100               	movlb	0	; () banked
 10293  0020E8  51C6               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10294  0020EA  0100               	movlb	0	; () banked
 10295  0020EC  1BCF               	xorwf	___ftdiv@sign& (0+255),f,b
 10296                           
 10297                           ; BSR set to: 0
 10298  0020EE  0E80               	movlw	128
 10299  0020F0  0100               	movlb	0	; () banked
 10300  0020F2  17CF               	andwf	___ftdiv@sign& (0+255),f,b
 10301                           
 10302                           ; BSR set to: 0
 10303  0020F4  0100               	movlb	0	; () banked
 10304  0020F6  8FC2               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 10305                           
 10306                           ; BSR set to: 0
 10307  0020F8  0EFF               	movlw	255
 10308  0020FA  0100               	movlb	0	; () banked
 10309  0020FC  17C1               	andwf	___ftdiv@f1& (0+255),f,b
 10310  0020FE  0EFF               	movlw	255
 10311  002100  0100               	movlb	0	; () banked
 10312  002102  17C2               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 10313  002104  0E00               	movlw	0
 10314  002106  0100               	movlb	0	; () banked
 10315  002108  17C3               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 10316                           
 10317                           ; BSR set to: 0
 10318  00210A  0100               	movlb	0	; () banked
 10319  00210C  8FC5               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 10320                           
 10321                           ; BSR set to: 0
 10322  00210E  0EFF               	movlw	255
 10323  002110  0100               	movlb	0	; () banked
 10324  002112  17C4               	andwf	___ftdiv@f2& (0+255),f,b
 10325  002114  0EFF               	movlw	255
 10326  002116  0100               	movlb	0	; () banked
 10327  002118  17C5               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 10328  00211A  0E00               	movlw	0
 10329  00211C  0100               	movlb	0	; () banked
 10330  00211E  17C6               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 10331                           
 10332                           ; BSR set to: 0
 10333  002120  0E18               	movlw	24
 10334  002122  0100               	movlb	0	; () banked
 10335  002124  6FCA               	movwf	___ftdiv@cntr& (0+255),b
 10336  002126  D000               	goto	l5183
 10337  002128                     l5183:
 10338                           
 10339                           ; BSR set to: 0
 10340  002128  0100               	movlb	0	; () banked
 10341  00212A  90D8               	bcf	status,0,c
 10342  00212C  37CB               	rlcf	___ftdiv@f3& (0+255),f,b
 10343  00212E  37CC               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10344  002130  37CD               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10345                           
 10346                           ; BSR set to: 0
 10347  002132  0100               	movlb	0	; () banked
 10348  002134  51C4               	movf	___ftdiv@f2& (0+255),w,b
 10349  002136  0100               	movlb	0	; () banked
 10350  002138  5DC1               	subwf	___ftdiv@f1& (0+255),w,b
 10351  00213A  0100               	movlb	0	; () banked
 10352  00213C  51C5               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10353  00213E  0100               	movlb	0	; () banked
 10354  002140  59C2               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 10355  002142  0100               	movlb	0	; () banked
 10356  002144  51C6               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10357  002146  0100               	movlb	0	; () banked
 10358  002148  59C3               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 10359  00214A  A0D8               	btfss	status,0,c
 10360  00214C  D00E               	goto	l1207
 10361                           
 10362                           ; BSR set to: 0
 10363  00214E  0100               	movlb	0	; () banked
 10364  002150  51C4               	movf	___ftdiv@f2& (0+255),w,b
 10365  002152  0100               	movlb	0	; () banked
 10366  002154  5FC1               	subwf	___ftdiv@f1& (0+255),f,b
 10367  002156  0100               	movlb	0	; () banked
 10368  002158  51C5               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10369  00215A  0100               	movlb	0	; () banked
 10370  00215C  5BC2               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10371  00215E  0100               	movlb	0	; () banked
 10372  002160  51C6               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10373  002162  0100               	movlb	0	; () banked
 10374  002164  5BC3               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10375                           
 10376                           ; BSR set to: 0
 10377  002166  0100               	movlb	0	; () banked
 10378  002168  81CB               	bsf	___ftdiv@f3& (0+255),0,b
 10379  00216A                     l1207:
 10380                           
 10381                           ; BSR set to: 0
 10382  00216A  0100               	movlb	0	; () banked
 10383  00216C  90D8               	bcf	status,0,c
 10384  00216E  37C1               	rlcf	___ftdiv@f1& (0+255),f,b
 10385  002170  37C2               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10386  002172  37C3               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10387                           
 10388                           ; BSR set to: 0
 10389  002174  0100               	movlb	0	; () banked
 10390  002176  2FCA               	decfsz	___ftdiv@cntr& (0+255),f,b
 10391  002178  D7D7               	goto	l5183
 10392  00217A  D000               	goto	l5193
 10393  00217C                     l5193:
 10394                           
 10395                           ; BSR set to: 0
 10396  00217C  C0CB  F01B         	movff	___ftdiv@f3,___ftpack@arg
 10397  002180  C0CC  F01C         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10398  002184  C0CD  F01D         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10399  002188  C0CE  F01E         	movff	___ftdiv@exp,___ftpack@exp
 10400  00218C  C0CF  F01F         	movff	___ftdiv@sign,___ftpack@sign
 10401  002190  ECCD  F016         	call	___ftpack	;wreg free
 10402  002194  C01B  F0C1         	movff	?___ftpack,?___ftdiv
 10403  002198  C01C  F0C2         	movff	?___ftpack+1,?___ftdiv+1
 10404  00219C  C01D  F0C3         	movff	?___ftpack+2,?___ftdiv+2
 10405  0021A0  0012               	return	
 10406  0021A2  0012               	return		;funcret
 10407  0021A4                     __end_of___ftdiv:
 10408                           	opt stack 0
 10409                           tosu	equ	0xFFF
 10410                           tosh	equ	0xFFE
 10411                           tosl	equ	0xFFD
 10412                           pclath	equ	0xFFA
 10413                           tblptru	equ	0xFF8
 10414                           tblptrh	equ	0xFF7
 10415                           tblptrl	equ	0xFF6
 10416                           tablat	equ	0xFF5
 10417                           prodh	equ	0xFF4
 10418                           prodl	equ	0xFF3
 10419                           intcon	equ	0xFF2
 10420                           intcon2	equ	0xFF1
 10421                           postinc0	equ	0xFEE
 10422                           wreg	equ	0xFE8
 10423                           postinc1	equ	0xFE6
 10424                           postdec1	equ	0xFE5
 10425                           fsr1h	equ	0xFE2
 10426                           fsr1l	equ	0xFE1
 10427                           indf2	equ	0xFDF
 10428                           postinc2	equ	0xFDE
 10429                           postdec2	equ	0xFDD
 10430                           plusw2	equ	0xFDB
 10431                           fsr2h	equ	0xFDA
 10432                           fsr2l	equ	0xFD9
 10433                           status	equ	0xFD8
 10434                           
 10435 ;; *************** function ___ftadd *****************
 10436 ;; Defined at:
 10437 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 10438 ;; Parameters:    Size  Location     Type
 10439 ;;  f1              3   30[BANK0 ] float 
 10440 ;;  f2              3   33[BANK0 ] float 
 10441 ;; Auto vars:     Size  Location     Type
 10442 ;;  exp1            1   41[BANK0 ] unsigned char 
 10443 ;;  exp2            1   40[BANK0 ] unsigned char 
 10444 ;;  sign            1   39[BANK0 ] unsigned char 
 10445 ;; Return value:  Size  Location     Type
 10446 ;;                  3   30[BANK0 ] float 
 10447 ;; Registers used:
 10448 ;;		wreg, status,2, status,0, cstack
 10449 ;; Tracked objects:
 10450 ;;		On entry : 0/0
 10451 ;;		On exit  : 0/0
 10452 ;;		Unchanged: 0/0
 10453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10454 ;;      Params:         0       6       0       0       0       0       0
 10455 ;;      Locals:         0       3       0       0       0       0       0
 10456 ;;      Temps:          0       3       0       0       0       0       0
 10457 ;;      Totals:         0      12       0       0       0       0       0
 10458 ;;Total ram usage:       12 bytes
 10459 ;; Hardware stack levels used:    1
 10460 ;; Hardware stack levels required when called:    5
 10461 ;; This function calls:
 10462 ;;		___ftpack
 10463 ;; This function is called by:
 10464 ;;		_Battery_Convert
 10465 ;;		_Temp_Filter
 10466 ;;		_Temp_Convert
 10467 ;;		___ftsub
 10468 ;;		_log
 10469 ;;		_eval_poly
 10470 ;; This function uses a non-reentrant model
 10471 ;;
 10472                           
 10473                           	psect	text53
 10474  0014B8                     __ptext53:
 10475                           	opt stack 0
 10476  0014B8                     ___ftadd:
 10477                           	opt stack 22
 10478                           
 10479                           ;incstack = 0
 10480  0014B8  C0E1  F0E5         	movff	___ftadd@f1+2,??___ftadd
 10481  0014BC  0100               	movlb	0	; () banked
 10482  0014BE  6BE6               	clrf	(??___ftadd+1)& (0+255),b
 10483  0014C0  6BE7               	clrf	(??___ftadd+2)& (0+255),b
 10484  0014C2  0100               	movlb	0	; () banked
 10485  0014C4  35E0               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10486  0014C6  0100               	movlb	0	; () banked
 10487  0014C8  37E5               	rlcf	??___ftadd& (0+255),f,b
 10488  0014CA  E301               	bnc	u4551
 10489  0014CC  81E6               	bsf	(??___ftadd+1)& (0+255),0,b
 10490  0014CE                     u4551:
 10491  0014CE  0100               	movlb	0	; () banked
 10492  0014D0  51E5               	movf	??___ftadd& (0+255),w,b
 10493  0014D2  0100               	movlb	0	; () banked
 10494  0014D4  6FEA               	movwf	___ftadd@exp1& (0+255),b
 10495  0014D6  C0E4  F0E5         	movff	___ftadd@f2+2,??___ftadd
 10496  0014DA  0100               	movlb	0	; () banked
 10497  0014DC  6BE6               	clrf	(??___ftadd+1)& (0+255),b
 10498  0014DE  6BE7               	clrf	(??___ftadd+2)& (0+255),b
 10499  0014E0  0100               	movlb	0	; () banked
 10500  0014E2  35E3               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10501  0014E4  0100               	movlb	0	; () banked
 10502  0014E6  37E5               	rlcf	??___ftadd& (0+255),f,b
 10503  0014E8  E301               	bnc	u4561
 10504  0014EA  81E6               	bsf	(??___ftadd+1)& (0+255),0,b
 10505  0014EC                     u4561:
 10506  0014EC  0100               	movlb	0	; () banked
 10507  0014EE  51E5               	movf	??___ftadd& (0+255),w,b
 10508  0014F0  0100               	movlb	0	; () banked
 10509  0014F2  6FE9               	movwf	___ftadd@exp2& (0+255),b
 10510                           
 10511                           ; BSR set to: 0
 10512  0014F4  0100               	movlb	0	; () banked
 10513  0014F6  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10514  0014F8  0100               	movlb	0	; () banked
 10515  0014FA  B4D8               	btfsc	status,2,c
 10516  0014FC  D011               	goto	l1172
 10517                           
 10518                           ; BSR set to: 0
 10519  0014FE  0100               	movlb	0	; () banked
 10520  001500  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10521  001502  0100               	movlb	0	; () banked
 10522  001504  5DEA               	subwf	___ftadd@exp1& (0+255),w,b
 10523  001506  B0D8               	btfsc	status,0,c
 10524  001508  D012               	goto	l4561
 10525                           
 10526                           ; BSR set to: 0
 10527  00150A  0100               	movlb	0	; () banked
 10528  00150C  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10529  00150E  0800               	sublw	0
 10530  001510  0100               	movlb	0	; () banked
 10531  001512  25E9               	addwf	___ftadd@exp2& (0+255),w,b
 10532  001514  0100               	movlb	0	; () banked
 10533  001516  6FE5               	movwf	??___ftadd& (0+255),b
 10534  001518  0E18               	movlw	24
 10535  00151A  0100               	movlb	0	; () banked
 10536  00151C  65E5               	cpfsgt	??___ftadd& (0+255),b
 10537  00151E  D007               	goto	l4561
 10538  001520                     l1172:
 10539                           
 10540                           ; BSR set to: 0
 10541  001520  C0E2  F0DF         	movff	___ftadd@f2,?___ftadd
 10542  001524  C0E3  F0E0         	movff	___ftadd@f2+1,?___ftadd+1
 10543  001528  C0E4  F0E1         	movff	___ftadd@f2+2,?___ftadd+2
 10544  00152C  0012               	return	
 10545  00152E                     l4561:
 10546                           
 10547                           ; BSR set to: 0
 10548  00152E  0100               	movlb	0	; () banked
 10549  001530  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10550  001532  0100               	movlb	0	; () banked
 10551  001534  B4D8               	btfsc	status,2,c
 10552  001536  D011               	goto	l1176
 10553                           
 10554                           ; BSR set to: 0
 10555  001538  0100               	movlb	0	; () banked
 10556  00153A  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10557  00153C  0100               	movlb	0	; () banked
 10558  00153E  5DE9               	subwf	___ftadd@exp2& (0+255),w,b
 10559  001540  B0D8               	btfsc	status,0,c
 10560  001542  D012               	goto	l4567
 10561                           
 10562                           ; BSR set to: 0
 10563  001544  0100               	movlb	0	; () banked
 10564  001546  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10565  001548  0800               	sublw	0
 10566  00154A  0100               	movlb	0	; () banked
 10567  00154C  25EA               	addwf	___ftadd@exp1& (0+255),w,b
 10568  00154E  0100               	movlb	0	; () banked
 10569  001550  6FE5               	movwf	??___ftadd& (0+255),b
 10570  001552  0E18               	movlw	24
 10571  001554  0100               	movlb	0	; () banked
 10572  001556  65E5               	cpfsgt	??___ftadd& (0+255),b
 10573  001558  D007               	goto	l4567
 10574  00155A                     l1176:
 10575                           
 10576                           ; BSR set to: 0
 10577  00155A  C0DF  F0DF         	movff	___ftadd@f1,?___ftadd
 10578  00155E  C0E0  F0E0         	movff	___ftadd@f1+1,?___ftadd+1
 10579  001562  C0E1  F0E1         	movff	___ftadd@f1+2,?___ftadd+2
 10580  001566  0012               	return	
 10581  001568                     l4567:
 10582                           
 10583                           ; BSR set to: 0
 10584  001568  0E06               	movlw	6
 10585  00156A  0100               	movlb	0	; () banked
 10586  00156C  6FE8               	movwf	___ftadd@sign& (0+255),b
 10587                           
 10588                           ; BSR set to: 0
 10589  00156E  0100               	movlb	0	; () banked
 10590  001570  AFE1               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10591  001572  D003               	goto	l4573
 10592                           
 10593                           ; BSR set to: 0
 10594  001574  0100               	movlb	0	; () banked
 10595  001576  8FE8               	bsf	___ftadd@sign& (0+255),7,b
 10596  001578  D000               	goto	l4573
 10597  00157A                     l4573:
 10598                           
 10599                           ; BSR set to: 0
 10600  00157A  0100               	movlb	0	; () banked
 10601  00157C  AFE4               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10602  00157E  D002               	goto	l1178
 10603                           
 10604                           ; BSR set to: 0
 10605  001580  0100               	movlb	0	; () banked
 10606  001582  8DE8               	bsf	___ftadd@sign& (0+255),6,b
 10607  001584                     l1178:
 10608                           
 10609                           ; BSR set to: 0
 10610  001584  0100               	movlb	0	; () banked
 10611  001586  8FE0               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10612                           
 10613                           ; BSR set to: 0
 10614  001588  0EFF               	movlw	255
 10615  00158A  0100               	movlb	0	; () banked
 10616  00158C  17DF               	andwf	___ftadd@f1& (0+255),f,b
 10617  00158E  0EFF               	movlw	255
 10618  001590  0100               	movlb	0	; () banked
 10619  001592  17E0               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10620  001594  0E00               	movlw	0
 10621  001596  0100               	movlb	0	; () banked
 10622  001598  17E1               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10623  00159A  0100               	movlb	0	; () banked
 10624  00159C  8FE3               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10625                           
 10626                           ; BSR set to: 0
 10627  00159E  0EFF               	movlw	255
 10628  0015A0  0100               	movlb	0	; () banked
 10629  0015A2  17E2               	andwf	___ftadd@f2& (0+255),f,b
 10630  0015A4  0EFF               	movlw	255
 10631  0015A6  0100               	movlb	0	; () banked
 10632  0015A8  17E3               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10633  0015AA  0E00               	movlw	0
 10634  0015AC  0100               	movlb	0	; () banked
 10635  0015AE  17E4               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10636                           
 10637                           ; BSR set to: 0
 10638  0015B0  0100               	movlb	0	; () banked
 10639  0015B2  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10640  0015B4  0100               	movlb	0	; () banked
 10641  0015B6  5DEA               	subwf	___ftadd@exp1& (0+255),w,b
 10642  0015B8  B0D8               	btfsc	status,0,c
 10643  0015BA  D028               	goto	l4593
 10644  0015BC                     l4583:
 10645                           
 10646                           ; BSR set to: 0
 10647  0015BC  0100               	movlb	0	; () banked
 10648  0015BE  90D8               	bcf	status,0,c
 10649  0015C0  37E2               	rlcf	___ftadd@f2& (0+255),f,b
 10650  0015C2  37E3               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10651  0015C4  37E4               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10652  0015C6  0100               	movlb	0	; () banked
 10653  0015C8  07E9               	decf	___ftadd@exp2& (0+255),f,b
 10654                           
 10655                           ; BSR set to: 0
 10656  0015CA  0100               	movlb	0	; () banked
 10657  0015CC  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10658  0015CE  0100               	movlb	0	; () banked
 10659  0015D0  19E9               	xorwf	___ftadd@exp2& (0+255),w,b
 10660  0015D2  B4D8               	btfsc	status,2,c
 10661  0015D4  D013               	goto	l4591
 10662                           
 10663                           ; BSR set to: 0
 10664  0015D6  0100               	movlb	0	; () banked
 10665  0015D8  07E8               	decf	___ftadd@sign& (0+255),f,b
 10666  0015DA  C0E8  F0E5         	movff	___ftadd@sign,??___ftadd
 10667  0015DE  0E07               	movlw	7
 10668  0015E0  0100               	movlb	0	; () banked
 10669  0015E2  17E5               	andwf	??___ftadd& (0+255),f,b
 10670  0015E4  B4D8               	btfsc	status,2,c
 10671  0015E6  D00A               	goto	l4591
 10672  0015E8  D7E9               	goto	l4583
 10673                           
 10674                           ; BSR set to: 0
 10675                           
 10676                           ; BSR set to: 0
 10677  0015EA  D008               	goto	l4591
 10678  0015EC                     l4589:
 10679                           
 10680                           ; BSR set to: 0
 10681  0015EC  0100               	movlb	0	; () banked
 10682  0015EE  90D8               	bcf	status,0,c
 10683  0015F0  33E1               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10684  0015F2  33E0               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10685  0015F4  33DF               	rrcf	___ftadd@f1& (0+255),f,b
 10686  0015F6  0100               	movlb	0	; () banked
 10687  0015F8  2BEA               	incf	___ftadd@exp1& (0+255),f,b
 10688  0015FA  D000               	goto	l4591
 10689  0015FC                     l4591:
 10690                           
 10691                           ; BSR set to: 0
 10692  0015FC  0100               	movlb	0	; () banked
 10693  0015FE  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10694  001600  0100               	movlb	0	; () banked
 10695  001602  19EA               	xorwf	___ftadd@exp1& (0+255),w,b
 10696  001604  B4D8               	btfsc	status,2,c
 10697  001606  D030               	goto	l1187
 10698  001608  D7F1               	goto	l4589
 10699                           
 10700                           ; BSR set to: 0
 10701  00160A  D02E               	goto	l1187
 10702  00160C                     l4593:
 10703                           
 10704                           ; BSR set to: 0
 10705  00160C  0100               	movlb	0	; () banked
 10706  00160E  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10707  001610  0100               	movlb	0	; () banked
 10708  001612  5DE9               	subwf	___ftadd@exp2& (0+255),w,b
 10709  001614  B0D8               	btfsc	status,0,c
 10710  001616  D028               	goto	l1187
 10711  001618                     l4595:
 10712                           
 10713                           ; BSR set to: 0
 10714  001618  0100               	movlb	0	; () banked
 10715  00161A  90D8               	bcf	status,0,c
 10716  00161C  37DF               	rlcf	___ftadd@f1& (0+255),f,b
 10717  00161E  37E0               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10718  001620  37E1               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10719  001622  0100               	movlb	0	; () banked
 10720  001624  07EA               	decf	___ftadd@exp1& (0+255),f,b
 10721                           
 10722                           ; BSR set to: 0
 10723  001626  0100               	movlb	0	; () banked
 10724  001628  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10725  00162A  0100               	movlb	0	; () banked
 10726  00162C  19E9               	xorwf	___ftadd@exp2& (0+255),w,b
 10727  00162E  B4D8               	btfsc	status,2,c
 10728  001630  D013               	goto	l4603
 10729                           
 10730                           ; BSR set to: 0
 10731  001632  0100               	movlb	0	; () banked
 10732  001634  07E8               	decf	___ftadd@sign& (0+255),f,b
 10733  001636  C0E8  F0E5         	movff	___ftadd@sign,??___ftadd
 10734  00163A  0E07               	movlw	7
 10735  00163C  0100               	movlb	0	; () banked
 10736  00163E  17E5               	andwf	??___ftadd& (0+255),f,b
 10737  001640  B4D8               	btfsc	status,2,c
 10738  001642  D00A               	goto	l4603
 10739  001644  D7E9               	goto	l4595
 10740                           
 10741                           ; BSR set to: 0
 10742                           
 10743                           ; BSR set to: 0
 10744  001646  D008               	goto	l4603
 10745  001648                     l4601:
 10746                           
 10747                           ; BSR set to: 0
 10748  001648  0100               	movlb	0	; () banked
 10749  00164A  90D8               	bcf	status,0,c
 10750  00164C  33E4               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10751  00164E  33E3               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10752  001650  33E2               	rrcf	___ftadd@f2& (0+255),f,b
 10753  001652  0100               	movlb	0	; () banked
 10754  001654  2BE9               	incf	___ftadd@exp2& (0+255),f,b
 10755  001656  D000               	goto	l4603
 10756  001658                     l4603:
 10757                           
 10758                           ; BSR set to: 0
 10759  001658  0100               	movlb	0	; () banked
 10760  00165A  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10761  00165C  0100               	movlb	0	; () banked
 10762  00165E  19EA               	xorwf	___ftadd@exp1& (0+255),w,b
 10763  001660  B4D8               	btfsc	status,2,c
 10764  001662  D002               	goto	l1187
 10765  001664  D7F1               	goto	l4601
 10766                           
 10767                           ; BSR set to: 0
 10768  001666  D000               	goto	l1187
 10769  001668                     l1187:
 10770                           
 10771                           ; BSR set to: 0
 10772  001668  0100               	movlb	0	; () banked
 10773  00166A  AFE8               	btfss	___ftadd@sign& (0+255),7,b
 10774  00166C  D012               	goto	l1196
 10775                           
 10776                           ; BSR set to: 0
 10777  00166E  0EFF               	movlw	255
 10778  001670  0100               	movlb	0	; () banked
 10779  001672  1BDF               	xorwf	___ftadd@f1& (0+255),f,b
 10780  001674  0EFF               	movlw	255
 10781  001676  0100               	movlb	0	; () banked
 10782  001678  1BE0               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10783  00167A  0EFF               	movlw	255
 10784  00167C  0100               	movlb	0	; () banked
 10785  00167E  1BE1               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10786  001680  0E01               	movlw	1
 10787  001682  0100               	movlb	0	; () banked
 10788  001684  27DF               	addwf	___ftadd@f1& (0+255),f,b
 10789  001686  0E00               	movlw	0
 10790  001688  0100               	movlb	0	; () banked
 10791  00168A  23E0               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10792  00168C  0E00               	movlw	0
 10793  00168E  0100               	movlb	0	; () banked
 10794  001690  23E1               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10795  001692                     l1196:
 10796                           
 10797                           ; BSR set to: 0
 10798  001692  0100               	movlb	0	; () banked
 10799  001694  ADE8               	btfss	___ftadd@sign& (0+255),6,b
 10800  001696  D013               	goto	l4609
 10801                           
 10802                           ; BSR set to: 0
 10803  001698  0EFF               	movlw	255
 10804  00169A  0100               	movlb	0	; () banked
 10805  00169C  1BE2               	xorwf	___ftadd@f2& (0+255),f,b
 10806  00169E  0EFF               	movlw	255
 10807  0016A0  0100               	movlb	0	; () banked
 10808  0016A2  1BE3               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10809  0016A4  0EFF               	movlw	255
 10810  0016A6  0100               	movlb	0	; () banked
 10811  0016A8  1BE4               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10812  0016AA  0E01               	movlw	1
 10813  0016AC  0100               	movlb	0	; () banked
 10814  0016AE  27E2               	addwf	___ftadd@f2& (0+255),f,b
 10815  0016B0  0E00               	movlw	0
 10816  0016B2  0100               	movlb	0	; () banked
 10817  0016B4  23E3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10818  0016B6  0E00               	movlw	0
 10819  0016B8  0100               	movlb	0	; () banked
 10820  0016BA  23E4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10821  0016BC  D000               	goto	l4609
 10822  0016BE                     l4609:
 10823                           
 10824                           ; BSR set to: 0
 10825  0016BE  0E00               	movlw	0
 10826  0016C0  0100               	movlb	0	; () banked
 10827  0016C2  6FE8               	movwf	___ftadd@sign& (0+255),b
 10828                           
 10829                           ; BSR set to: 0
 10830  0016C4  0100               	movlb	0	; () banked
 10831  0016C6  51DF               	movf	___ftadd@f1& (0+255),w,b
 10832  0016C8  0100               	movlb	0	; () banked
 10833  0016CA  27E2               	addwf	___ftadd@f2& (0+255),f,b
 10834  0016CC  0100               	movlb	0	; () banked
 10835  0016CE  51E0               	movf	(___ftadd@f1+1)& (0+255),w,b
 10836  0016D0  0100               	movlb	0	; () banked
 10837  0016D2  23E3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10838  0016D4  0100               	movlb	0	; () banked
 10839  0016D6  51E1               	movf	(___ftadd@f1+2)& (0+255),w,b
 10840  0016D8  0100               	movlb	0	; () banked
 10841  0016DA  23E4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10842                           
 10843                           ; BSR set to: 0
 10844  0016DC  0100               	movlb	0	; () banked
 10845  0016DE  AFE4               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10846  0016E0  D016               	goto	l4619
 10847                           
 10848                           ; BSR set to: 0
 10849  0016E2  0EFF               	movlw	255
 10850  0016E4  0100               	movlb	0	; () banked
 10851  0016E6  1BE2               	xorwf	___ftadd@f2& (0+255),f,b
 10852  0016E8  0EFF               	movlw	255
 10853  0016EA  0100               	movlb	0	; () banked
 10854  0016EC  1BE3               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10855  0016EE  0EFF               	movlw	255
 10856  0016F0  0100               	movlb	0	; () banked
 10857  0016F2  1BE4               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10858  0016F4  0E01               	movlw	1
 10859  0016F6  0100               	movlb	0	; () banked
 10860  0016F8  27E2               	addwf	___ftadd@f2& (0+255),f,b
 10861  0016FA  0E00               	movlw	0
 10862  0016FC  0100               	movlb	0	; () banked
 10863  0016FE  23E3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10864  001700  0E00               	movlw	0
 10865  001702  0100               	movlb	0	; () banked
 10866  001704  23E4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10867                           
 10868                           ; BSR set to: 0
 10869  001706  0E01               	movlw	1
 10870  001708  0100               	movlb	0	; () banked
 10871  00170A  6FE8               	movwf	___ftadd@sign& (0+255),b
 10872  00170C  D000               	goto	l4619
 10873  00170E                     l4619:
 10874                           
 10875                           ; BSR set to: 0
 10876  00170E  C0E2  F01B         	movff	___ftadd@f2,___ftpack@arg
 10877  001712  C0E3  F01C         	movff	___ftadd@f2+1,___ftpack@arg+1
 10878  001716  C0E4  F01D         	movff	___ftadd@f2+2,___ftpack@arg+2
 10879  00171A  C0EA  F01E         	movff	___ftadd@exp1,___ftpack@exp
 10880  00171E  C0E8  F01F         	movff	___ftadd@sign,___ftpack@sign
 10881  001722  ECCD  F016         	call	___ftpack	;wreg free
 10882  001726  C01B  F0DF         	movff	?___ftpack,?___ftadd
 10883  00172A  C01C  F0E0         	movff	?___ftpack+1,?___ftadd+1
 10884  00172E  C01D  F0E1         	movff	?___ftpack+2,?___ftadd+2
 10885  001732  0012               	return	
 10886  001734  0012               	return		;funcret
 10887  001736                     __end_of___ftadd:
 10888                           	opt stack 0
 10889                           tosu	equ	0xFFF
 10890                           tosh	equ	0xFFE
 10891                           tosl	equ	0xFFD
 10892                           pclath	equ	0xFFA
 10893                           tblptru	equ	0xFF8
 10894                           tblptrh	equ	0xFF7
 10895                           tblptrl	equ	0xFF6
 10896                           tablat	equ	0xFF5
 10897                           prodh	equ	0xFF4
 10898                           prodl	equ	0xFF3
 10899                           intcon	equ	0xFF2
 10900                           intcon2	equ	0xFF1
 10901                           postinc0	equ	0xFEE
 10902                           wreg	equ	0xFE8
 10903                           postinc1	equ	0xFE6
 10904                           postdec1	equ	0xFE5
 10905                           fsr1h	equ	0xFE2
 10906                           fsr1l	equ	0xFE1
 10907                           indf2	equ	0xFDF
 10908                           postinc2	equ	0xFDE
 10909                           postdec2	equ	0xFDD
 10910                           plusw2	equ	0xFDB
 10911                           fsr2h	equ	0xFDA
 10912                           fsr2l	equ	0xFD9
 10913                           status	equ	0xFD8
 10914                           
 10915 ;; *************** function ___altoft *****************
 10916 ;; Defined at:
 10917 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altoft.c"
 10918 ;; Parameters:    Size  Location     Type
 10919 ;;  c               4   34[COMRAM] long 
 10920 ;; Auto vars:     Size  Location     Type
 10921 ;;  sign            1   43[COMRAM] unsigned char 
 10922 ;;  exp             1   42[COMRAM] unsigned char 
 10923 ;; Return value:  Size  Location     Type
 10924 ;;                  3   34[COMRAM] float 
 10925 ;; Registers used:
 10926 ;;		wreg, status,2, status,0, cstack
 10927 ;; Tracked objects:
 10928 ;;		On entry : 0/0
 10929 ;;		On exit  : 0/0
 10930 ;;		Unchanged: 0/0
 10931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10932 ;;      Params:         4       0       0       0       0       0       0
 10933 ;;      Locals:         2       0       0       0       0       0       0
 10934 ;;      Temps:          4       0       0       0       0       0       0
 10935 ;;      Totals:        10       0       0       0       0       0       0
 10936 ;;Total ram usage:       10 bytes
 10937 ;; Hardware stack levels used:    1
 10938 ;; Hardware stack levels required when called:    5
 10939 ;; This function calls:
 10940 ;;		___ftpack
 10941 ;; This function is called by:
 10942 ;;		_Battery_Convert
 10943 ;; This function uses a non-reentrant model
 10944 ;;
 10945                           
 10946                           	psect	text54
 10947  0032A6                     __ptext54:
 10948                           	opt stack 0
 10949  0032A6                     ___altoft:
 10950                           	opt stack 24
 10951                           
 10952                           ;incstack = 0
 10953  0032A6  0E00               	movlw	0
 10954  0032A8  6E2C               	movwf	___altoft@sign,c
 10955  0032AA  0E8E               	movlw	142
 10956  0032AC  6E2B               	movwf	___altoft@exp,c
 10957  0032AE  AE26               	btfss	___altoft@c+3,7,c
 10958  0032B0  D012               	goto	l5145
 10959  0032B2  1E26               	comf	___altoft@c+3,f,c
 10960  0032B4  1E25               	comf	___altoft@c+2,f,c
 10961  0032B6  1E24               	comf	___altoft@c+1,f,c
 10962  0032B8  6C23               	negf	___altoft@c,c
 10963  0032BA  0E00               	movlw	0
 10964  0032BC  2224               	addwfc	___altoft@c+1,f,c
 10965  0032BE  2225               	addwfc	___altoft@c+2,f,c
 10966  0032C0  2226               	addwfc	___altoft@c+3,f,c
 10967  0032C2  0E01               	movlw	1
 10968  0032C4  6E2C               	movwf	___altoft@sign,c
 10969  0032C6  D007               	goto	l5145
 10970  0032C8                     l5143:
 10971  0032C8  90D8               	bcf	status,0,c
 10972  0032CA  3226               	rrcf	___altoft@c+3,f,c
 10973  0032CC  3225               	rrcf	___altoft@c+2,f,c
 10974  0032CE  3224               	rrcf	___altoft@c+1,f,c
 10975  0032D0  3223               	rrcf	___altoft@c,f,c
 10976  0032D2  2A2B               	incf	___altoft@exp,f,c
 10977  0032D4  D000               	goto	l5145
 10978  0032D6                     l5145:
 10979  0032D6  0E00               	movlw	0
 10980  0032D8  1423               	andwf	___altoft@c,w,c
 10981  0032DA  6E27               	movwf	??___altoft& (0+255),c
 10982  0032DC  0E00               	movlw	0
 10983  0032DE  1424               	andwf	___altoft@c+1,w,c
 10984  0032E0  6E28               	movwf	(??___altoft+1)& (0+255),c
 10985  0032E2  0E00               	movlw	0
 10986  0032E4  1425               	andwf	___altoft@c+2,w,c
 10987  0032E6  6E29               	movwf	(??___altoft+2)& (0+255),c
 10988  0032E8  0EFF               	movlw	255
 10989  0032EA  1426               	andwf	___altoft@c+3,w,c
 10990  0032EC  6E2A               	movwf	(??___altoft+3)& (0+255),c
 10991  0032EE  5027               	movf	??___altoft,w,c
 10992  0032F0  1028               	iorwf	??___altoft+1,w,c
 10993  0032F2  1029               	iorwf	??___altoft+2,w,c
 10994  0032F4  102A               	iorwf	??___altoft+3,w,c
 10995  0032F6  A4D8               	btfss	status,2,c
 10996  0032F8  D7E7               	goto	l5143
 10997  0032FA  C023  F01B         	movff	___altoft@c,___ftpack@arg
 10998  0032FE  C024  F01C         	movff	___altoft@c+1,___ftpack@arg+1
 10999  003302  C025  F01D         	movff	___altoft@c+2,___ftpack@arg+2
 11000  003306  C02B  F01E         	movff	___altoft@exp,___ftpack@exp
 11001  00330A  C02C  F01F         	movff	___altoft@sign,___ftpack@sign
 11002  00330E  ECCD  F016         	call	___ftpack	;wreg free
 11003  003312  C01B  F023         	movff	?___ftpack,?___altoft
 11004  003316  C01C  F024         	movff	?___ftpack+1,?___altoft+1
 11005  00331A  C01D  F025         	movff	?___ftpack+2,?___altoft+2
 11006  00331E  0012               	return	
 11007  003320  0012               	return		;funcret
 11008  003322                     __end_of___altoft:
 11009                           	opt stack 0
 11010                           tosu	equ	0xFFF
 11011                           tosh	equ	0xFFE
 11012                           tosl	equ	0xFFD
 11013                           pclath	equ	0xFFA
 11014                           tblptru	equ	0xFF8
 11015                           tblptrh	equ	0xFF7
 11016                           tblptrl	equ	0xFF6
 11017                           tablat	equ	0xFF5
 11018                           prodh	equ	0xFF4
 11019                           prodl	equ	0xFF3
 11020                           intcon	equ	0xFF2
 11021                           intcon2	equ	0xFF1
 11022                           postinc0	equ	0xFEE
 11023                           wreg	equ	0xFE8
 11024                           postinc1	equ	0xFE6
 11025                           postdec1	equ	0xFE5
 11026                           fsr1h	equ	0xFE2
 11027                           fsr1l	equ	0xFE1
 11028                           indf2	equ	0xFDF
 11029                           postinc2	equ	0xFDE
 11030                           postdec2	equ	0xFDD
 11031                           plusw2	equ	0xFDB
 11032                           fsr2h	equ	0xFDA
 11033                           fsr2l	equ	0xFD9
 11034                           status	equ	0xFD8
 11035                           
 11036 ;; *************** function ___ftpack *****************
 11037 ;; Defined at:
 11038 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;  arg             3   26[COMRAM] unsigned um
 11041 ;;  exp             1   29[COMRAM] unsigned char 
 11042 ;;  sign            1   30[COMRAM] unsigned char 
 11043 ;; Auto vars:     Size  Location     Type
 11044 ;;		None
 11045 ;; Return value:  Size  Location     Type
 11046 ;;                  3   26[COMRAM] float 
 11047 ;; Registers used:
 11048 ;;		wreg, status,2, status,0
 11049 ;; Tracked objects:
 11050 ;;		On entry : 0/0
 11051 ;;		On exit  : 0/0
 11052 ;;		Unchanged: 0/0
 11053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11054 ;;      Params:         5       0       0       0       0       0       0
 11055 ;;      Locals:         0       0       0       0       0       0       0
 11056 ;;      Temps:          3       0       0       0       0       0       0
 11057 ;;      Totals:         8       0       0       0       0       0       0
 11058 ;;Total ram usage:        8 bytes
 11059 ;; Hardware stack levels used:    1
 11060 ;; Hardware stack levels required when called:    4
 11061 ;; This function calls:
 11062 ;;		Nothing
 11063 ;; This function is called by:
 11064 ;;		___altoft
 11065 ;;		___awtoft
 11066 ;;		___ftadd
 11067 ;;		___ftdiv
 11068 ;;		___ftmul
 11069 ;; This function uses a non-reentrant model
 11070 ;;
 11071                           
 11072                           	psect	text55
 11073  002D9A                     __ptext55:
 11074                           	opt stack 0
 11075  002D9A                     ___ftpack:
 11076                           	opt stack 24
 11077                           
 11078                           ;incstack = 0
 11079  002D9A  501E               	movf	___ftpack@exp,w,c
 11080  002D9C  B4D8               	btfsc	status,2,c
 11081  002D9E  D005               	goto	l4419
 11082  002DA0  501B               	movf	___ftpack@arg,w,c
 11083  002DA2  101C               	iorwf	___ftpack@arg+1,w,c
 11084  002DA4  101D               	iorwf	___ftpack@arg+2,w,c
 11085  002DA6  A4D8               	btfss	status,2,c
 11086  002DA8  D00E               	goto	l4425
 11087  002DAA                     l4419:
 11088  002DAA  0E00               	movlw	0
 11089  002DAC  6E1B               	movwf	?___ftpack,c
 11090  002DAE  0E00               	movlw	0
 11091  002DB0  6E1C               	movwf	?___ftpack+1,c
 11092  002DB2  0E00               	movlw	0
 11093  002DB4  6E1D               	movwf	?___ftpack+2,c
 11094  002DB6  0012               	return	
 11095  002DB8  D006               	goto	l4425
 11096  002DBA                     l4423:
 11097  002DBA  2A1E               	incf	___ftpack@exp,f,c
 11098  002DBC  90D8               	bcf	status,0,c
 11099  002DBE  321D               	rrcf	___ftpack@arg+2,f,c
 11100  002DC0  321C               	rrcf	___ftpack@arg+1,f,c
 11101  002DC2  321B               	rrcf	___ftpack@arg,f,c
 11102  002DC4  D000               	goto	l4425
 11103  002DC6                     l4425:
 11104  002DC6  0E00               	movlw	0
 11105  002DC8  141B               	andwf	___ftpack@arg,w,c
 11106  002DCA  6E20               	movwf	??___ftpack& (0+255),c
 11107  002DCC  0E00               	movlw	0
 11108  002DCE  141C               	andwf	___ftpack@arg+1,w,c
 11109  002DD0  6E21               	movwf	(??___ftpack+1)& (0+255),c
 11110  002DD2  0EFE               	movlw	254
 11111  002DD4  141D               	andwf	___ftpack@arg+2,w,c
 11112  002DD6  6E22               	movwf	(??___ftpack+2)& (0+255),c
 11113  002DD8  5020               	movf	??___ftpack,w,c
 11114  002DDA  1021               	iorwf	??___ftpack+1,w,c
 11115  002DDC  1022               	iorwf	??___ftpack+2,w,c
 11116  002DDE  B4D8               	btfsc	status,2,c
 11117  002DE0  D00E               	goto	l4431
 11118  002DE2  D7EB               	goto	l4423
 11119  002DE4  D00C               	goto	l4431
 11120  002DE6                     l4427:
 11121  002DE6  2A1E               	incf	___ftpack@exp,f,c
 11122  002DE8  0E01               	movlw	1
 11123  002DEA  261B               	addwf	___ftpack@arg,f,c
 11124  002DEC  0E00               	movlw	0
 11125  002DEE  221C               	addwfc	___ftpack@arg+1,f,c
 11126  002DF0  0E00               	movlw	0
 11127  002DF2  221D               	addwfc	___ftpack@arg+2,f,c
 11128  002DF4  90D8               	bcf	status,0,c
 11129  002DF6  321D               	rrcf	___ftpack@arg+2,f,c
 11130  002DF8  321C               	rrcf	___ftpack@arg+1,f,c
 11131  002DFA  321B               	rrcf	___ftpack@arg,f,c
 11132  002DFC  D000               	goto	l4431
 11133  002DFE                     l4431:
 11134  002DFE  0E00               	movlw	0
 11135  002E00  141B               	andwf	___ftpack@arg,w,c
 11136  002E02  6E20               	movwf	??___ftpack& (0+255),c
 11137  002E04  0E00               	movlw	0
 11138  002E06  141C               	andwf	___ftpack@arg+1,w,c
 11139  002E08  6E21               	movwf	(??___ftpack+1)& (0+255),c
 11140  002E0A  0EFF               	movlw	255
 11141  002E0C  141D               	andwf	___ftpack@arg+2,w,c
 11142  002E0E  6E22               	movwf	(??___ftpack+2)& (0+255),c
 11143  002E10  5020               	movf	??___ftpack,w,c
 11144  002E12  1021               	iorwf	??___ftpack+1,w,c
 11145  002E14  1022               	iorwf	??___ftpack+2,w,c
 11146  002E16  B4D8               	btfsc	status,2,c
 11147  002E18  D008               	goto	l4435
 11148  002E1A  D7E5               	goto	l4427
 11149  002E1C  D006               	goto	l4435
 11150  002E1E                     l4433:
 11151  002E1E  061E               	decf	___ftpack@exp,f,c
 11152  002E20  90D8               	bcf	status,0,c
 11153  002E22  361B               	rlcf	___ftpack@arg,f,c
 11154  002E24  361C               	rlcf	___ftpack@arg+1,f,c
 11155  002E26  361D               	rlcf	___ftpack@arg+2,f,c
 11156  002E28  D000               	goto	l4435
 11157  002E2A                     l4435:
 11158  002E2A  BE1C               	btfsc	___ftpack@arg+1,7,c
 11159  002E2C  D004               	goto	l1143
 11160  002E2E  0E02               	movlw	2
 11161  002E30  601E               	cpfslt	___ftpack@exp,c
 11162  002E32  D7F5               	goto	l4433
 11163  002E34  D000               	goto	l1143
 11164  002E36                     l1143:
 11165  002E36  B01E               	btfsc	___ftpack@exp,0,c
 11166  002E38  D002               	goto	l4441
 11167  002E3A  9E1C               	bcf	___ftpack@arg+1,7,c
 11168  002E3C  D000               	goto	l4441
 11169  002E3E                     l4441:
 11170  002E3E  90D8               	bcf	status,0,c
 11171  002E40  321E               	rrcf	___ftpack@exp,f,c
 11172  002E42  501E               	movf	___ftpack@exp,w,c
 11173  002E44  121D               	iorwf	___ftpack@arg+2,f,c
 11174  002E46  501F               	movf	___ftpack@sign,w,c
 11175  002E48  B4D8               	btfsc	status,2,c
 11176  002E4A  D002               	goto	l4447
 11177  002E4C  8E1D               	bsf	___ftpack@arg+2,7,c
 11178  002E4E  D000               	goto	l4447
 11179  002E50                     l4447:
 11180  002E50  C01B  F01B         	movff	___ftpack@arg,?___ftpack
 11181  002E54  C01C  F01C         	movff	___ftpack@arg+1,?___ftpack+1
 11182  002E58  C01D  F01D         	movff	___ftpack@arg+2,?___ftpack+2
 11183  002E5C  0012               	return	
 11184  002E5E  0012               	return		;funcret
 11185  002E60                     __end_of___ftpack:
 11186                           	opt stack 0
 11187                           tosu	equ	0xFFF
 11188                           tosh	equ	0xFFE
 11189                           tosl	equ	0xFFD
 11190                           pclath	equ	0xFFA
 11191                           tblptru	equ	0xFF8
 11192                           tblptrh	equ	0xFF7
 11193                           tblptrl	equ	0xFF6
 11194                           tablat	equ	0xFF5
 11195                           prodh	equ	0xFF4
 11196                           prodl	equ	0xFF3
 11197                           intcon	equ	0xFF2
 11198                           intcon2	equ	0xFF1
 11199                           postinc0	equ	0xFEE
 11200                           wreg	equ	0xFE8
 11201                           postinc1	equ	0xFE6
 11202                           postdec1	equ	0xFE5
 11203                           fsr1h	equ	0xFE2
 11204                           fsr1l	equ	0xFE1
 11205                           indf2	equ	0xFDF
 11206                           postinc2	equ	0xFDE
 11207                           postdec2	equ	0xFDD
 11208                           plusw2	equ	0xFDB
 11209                           fsr2h	equ	0xFDA
 11210                           fsr2l	equ	0xFD9
 11211                           status	equ	0xFD8
 11212                           
 11213 ;; *************** function _Battery_Filter *****************
 11214 ;; Defined at:
 11215 ;;		line 48 in file "Battery.c"
 11216 ;; Parameters:    Size  Location     Type
 11217 ;;		None
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;  x               2   32[COMRAM] int 
 11220 ;; Return value:  Size  Location     Type
 11221 ;;		None               void
 11222 ;; Registers used:
 11223 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11229 ;;      Params:         0       0       0       0       0       0       0
 11230 ;;      Locals:         2       0       0       0       0       0       0
 11231 ;;      Temps:          0       0       0       0       0       0       0
 11232 ;;      Totals:         2       0       0       0       0       0       0
 11233 ;;Total ram usage:        2 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; Hardware stack levels required when called:    5
 11236 ;; This function calls:
 11237 ;;		___wmul
 11238 ;; This function is called by:
 11239 ;;		_Battery_Convert
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           	psect	text56
 11244  002B04                     __ptext56:
 11245                           	opt stack 0
 11246  002B04                     _Battery_Filter:
 11247                           	opt stack 24
 11248                           
 11249                           ;Battery.c: 50: int x;
 11250                           ;Battery.c: 51: for (x = 0; x <= 9; x++) {
 11251                           
 11252                           ;incstack = 0
 11253  002B04  0E00               	movlw	0
 11254  002B06  6E22               	movwf	Battery_Filter@x+1,c
 11255  002B08  0E00               	movlw	0
 11256  002B0A  6E21               	movwf	Battery_Filter@x,c
 11257  002B0C                     l4835:
 11258  002B0C  BE22               	btfsc	Battery_Filter@x+1,7,c
 11259  002B0E  D008               	goto	l4839
 11260  002B10  5022               	movf	Battery_Filter@x+1,w,c
 11261  002B12  E130               	bnz	l4845
 11262  002B14  0E0A               	movlw	10
 11263  002B16  5C21               	subwf	Battery_Filter@x,w,c
 11264  002B18  B0D8               	btfsc	status,0,c
 11265  002B1A  D02C               	goto	l4845
 11266  002B1C  D001               	goto	l4839
 11267  002B1E  D02A               	goto	l4845
 11268  002B20                     l4839:
 11269                           
 11270                           ;Battery.c: 52: Battery_Volt[x] = TempBattery_Volt[x];
 11271  002B20  C021  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 11272  002B24  C022  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 11273  002B28  0E00               	movlw	0
 11274  002B2A  6E1E               	movwf	___wmul@multiplicand+1,c
 11275  002B2C  0E03               	movlw	3
 11276  002B2E  6E1D               	movwf	___wmul@multiplicand,c
 11277  002B30  EC5E  F01C         	call	___wmul	;wreg free
 11278  002B34  0E1E               	movlw	low _TempBattery_Volt
 11279  002B36  241B               	addwf	?___wmul,w,c
 11280  002B38  6ED9               	movwf	fsr2l,c
 11281  002B3A  0E01               	movlw	high _TempBattery_Volt
 11282  002B3C  201C               	addwfc	?___wmul+1,w,c
 11283  002B3E  6EDA               	movwf	fsr2h,c
 11284  002B40  C021  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 11285  002B44  C022  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 11286  002B48  0E00               	movlw	0
 11287  002B4A  6E1E               	movwf	___wmul@multiplicand+1,c
 11288  002B4C  0E03               	movlw	3
 11289  002B4E  6E1D               	movwf	___wmul@multiplicand,c
 11290  002B50  EC5E  F01C         	call	___wmul	;wreg free
 11291  002B54  0E70               	movlw	low _Battery_Volt
 11292  002B56  241B               	addwf	?___wmul,w,c
 11293  002B58  6EE1               	movwf	fsr1l,c
 11294  002B5A  0E01               	movlw	high _Battery_Volt
 11295  002B5C  201C               	addwfc	?___wmul+1,w,c
 11296  002B5E  6EE2               	movwf	fsr1h,c
 11297  002B60  CFDE FFE6          	movff	postinc2,postinc1
 11298  002B64  CFDE FFE6          	movff	postinc2,postinc1
 11299  002B68  CFDE FFE6          	movff	postinc2,postinc1
 11300  002B6C  4A21               	infsnz	Battery_Filter@x,f,c
 11301  002B6E  2A22               	incf	Battery_Filter@x+1,f,c
 11302  002B70  D7CD               	goto	l4835
 11303  002B72  D000               	goto	l4845
 11304  002B74                     l4845:
 11305                           
 11306                           ;Battery.c: 53: }
 11307                           ;Battery.c: 54: for (x = 0; x <= 9; x++) {
 11308  002B74  0E00               	movlw	0
 11309  002B76  6E22               	movwf	Battery_Filter@x+1,c
 11310  002B78  0E00               	movlw	0
 11311  002B7A  6E21               	movwf	Battery_Filter@x,c
 11312  002B7C                     l4847:
 11313  002B7C  BE22               	btfsc	Battery_Filter@x+1,7,c
 11314  002B7E  D008               	goto	l4851
 11315  002B80  5022               	movf	Battery_Filter@x+1,w,c
 11316  002B82  E130               	bnz	l290
 11317  002B84  0E0A               	movlw	10
 11318  002B86  5C21               	subwf	Battery_Filter@x,w,c
 11319  002B88  B0D8               	btfsc	status,0,c
 11320  002B8A  0012               	return	
 11321  002B8C  D001               	goto	l4851
 11322  002B8E  0012               	return	
 11323  002B90                     l4851:
 11324                           
 11325                           ;Battery.c: 55: PrevBattery_Volt[x] = Battery_Volt[x];
 11326  002B90  C021  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 11327  002B94  C022  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 11328  002B98  0E00               	movlw	0
 11329  002B9A  6E1E               	movwf	___wmul@multiplicand+1,c
 11330  002B9C  0E03               	movlw	3
 11331  002B9E  6E1D               	movwf	___wmul@multiplicand,c
 11332  002BA0  EC5E  F01C         	call	___wmul	;wreg free
 11333  002BA4  0E70               	movlw	low _Battery_Volt
 11334  002BA6  241B               	addwf	?___wmul,w,c
 11335  002BA8  6ED9               	movwf	fsr2l,c
 11336  002BAA  0E01               	movlw	high _Battery_Volt
 11337  002BAC  201C               	addwfc	?___wmul+1,w,c
 11338  002BAE  6EDA               	movwf	fsr2h,c
 11339  002BB0  C021  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 11340  002BB4  C022  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 11341  002BB8  0E00               	movlw	0
 11342  002BBA  6E1E               	movwf	___wmul@multiplicand+1,c
 11343  002BBC  0E03               	movlw	3
 11344  002BBE  6E1D               	movwf	___wmul@multiplicand,c
 11345  002BC0  EC5E  F01C         	call	___wmul	;wreg free
 11346  002BC4  0E00               	movlw	low _PrevBattery_Volt
 11347  002BC6  241B               	addwf	?___wmul,w,c
 11348  002BC8  6EE1               	movwf	fsr1l,c
 11349  002BCA  0E01               	movlw	high _PrevBattery_Volt
 11350  002BCC  201C               	addwfc	?___wmul+1,w,c
 11351  002BCE  6EE2               	movwf	fsr1h,c
 11352  002BD0  CFDE FFE6          	movff	postinc2,postinc1
 11353  002BD4  CFDE FFE6          	movff	postinc2,postinc1
 11354  002BD8  CFDE FFE6          	movff	postinc2,postinc1
 11355  002BDC  4A21               	infsnz	Battery_Filter@x,f,c
 11356  002BDE  2A22               	incf	Battery_Filter@x+1,f,c
 11357  002BE0  D7CD               	goto	l4847
 11358  002BE2  0012               	return	
 11359  002BE4                     l290:
 11360  002BE4  0012               	return		;funcret
 11361  002BE6                     __end_of_Battery_Filter:
 11362                           	opt stack 0
 11363                           tosu	equ	0xFFF
 11364                           tosh	equ	0xFFE
 11365                           tosl	equ	0xFFD
 11366                           pclath	equ	0xFFA
 11367                           tblptru	equ	0xFF8
 11368                           tblptrh	equ	0xFF7
 11369                           tblptrl	equ	0xFF6
 11370                           tablat	equ	0xFF5
 11371                           prodh	equ	0xFF4
 11372                           prodl	equ	0xFF3
 11373                           intcon	equ	0xFF2
 11374                           intcon2	equ	0xFF1
 11375                           postinc0	equ	0xFEE
 11376                           wreg	equ	0xFE8
 11377                           postinc1	equ	0xFE6
 11378                           postdec1	equ	0xFE5
 11379                           fsr1h	equ	0xFE2
 11380                           fsr1l	equ	0xFE1
 11381                           indf2	equ	0xFDF
 11382                           postinc2	equ	0xFDE
 11383                           postdec2	equ	0xFDD
 11384                           plusw2	equ	0xFDB
 11385                           fsr2h	equ	0xFDA
 11386                           fsr2l	equ	0xFD9
 11387                           status	equ	0xFD8
 11388                           
 11389 ;; *************** function ___wmul *****************
 11390 ;; Defined at:
 11391 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;  multiplier      2   26[COMRAM] unsigned int 
 11394 ;;  multiplicand    2   28[COMRAM] unsigned int 
 11395 ;; Auto vars:     Size  Location     Type
 11396 ;;  product         2   30[COMRAM] unsigned int 
 11397 ;; Return value:  Size  Location     Type
 11398 ;;                  2   26[COMRAM] unsigned int 
 11399 ;; Registers used:
 11400 ;;		wreg, status,2, status,0, prodl, prodh
 11401 ;; Tracked objects:
 11402 ;;		On entry : 0/0
 11403 ;;		On exit  : 0/0
 11404 ;;		Unchanged: 0/0
 11405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11406 ;;      Params:         4       0       0       0       0       0       0
 11407 ;;      Locals:         2       0       0       0       0       0       0
 11408 ;;      Temps:          0       0       0       0       0       0       0
 11409 ;;      Totals:         6       0       0       0       0       0       0
 11410 ;;Total ram usage:        6 bytes
 11411 ;; Hardware stack levels used:    1
 11412 ;; Hardware stack levels required when called:    4
 11413 ;; This function calls:
 11414 ;;		Nothing
 11415 ;; This function is called by:
 11416 ;;		_Battery_Convert
 11417 ;;		_Battery_Filter
 11418 ;;		_Battery_Fault
 11419 ;;		_Battery_Get
 11420 ;;		_Temp_Fault
 11421 ;;		_Temp_Filter
 11422 ;;		_Temp_Convert
 11423 ;;		_Tempeture_Get
 11424 ;;		_eval_poly
 11425 ;; This function uses a non-reentrant model
 11426 ;;
 11427                           
 11428                           	psect	text57
 11429  0038BC                     __ptext57:
 11430                           	opt stack 0
 11431  0038BC                     ___wmul:
 11432                           	opt stack 24
 11433                           
 11434                           ;incstack = 0
 11435  0038BC  501B               	movf	___wmul@multiplier,w,c
 11436  0038BE  021D               	mulwf	___wmul@multiplicand,c
 11437  0038C0  CFF3 F01F          	movff	prodl,___wmul@product
 11438  0038C4  CFF4 F020          	movff	prodh,___wmul@product+1
 11439  0038C8  501B               	movf	___wmul@multiplier,w,c
 11440  0038CA  021E               	mulwf	___wmul@multiplicand+1,c
 11441  0038CC  50F3               	movf	prodl,w,c
 11442  0038CE  2620               	addwf	___wmul@product+1,f,c
 11443  0038D0  501C               	movf	___wmul@multiplier+1,w,c
 11444  0038D2  021D               	mulwf	___wmul@multiplicand,c
 11445  0038D4  50F3               	movf	prodl,w,c
 11446  0038D6  2620               	addwf	___wmul@product+1,f,c
 11447  0038D8  C01F  F01B         	movff	___wmul@product,?___wmul
 11448  0038DC  C020  F01C         	movff	___wmul@product+1,?___wmul+1
 11449  0038E0  0012               	return	
 11450  0038E2  0012               	return		;funcret
 11451  0038E4                     __end_of___wmul:
 11452                           	opt stack 0
 11453                           tosu	equ	0xFFF
 11454                           tosh	equ	0xFFE
 11455                           tosl	equ	0xFFD
 11456                           pclath	equ	0xFFA
 11457                           tblptru	equ	0xFF8
 11458                           tblptrh	equ	0xFF7
 11459                           tblptrl	equ	0xFF6
 11460                           tablat	equ	0xFF5
 11461                           prodh	equ	0xFF4
 11462                           prodl	equ	0xFF3
 11463                           intcon	equ	0xFF2
 11464                           intcon2	equ	0xFF1
 11465                           postinc0	equ	0xFEE
 11466                           wreg	equ	0xFE8
 11467                           postinc1	equ	0xFE6
 11468                           postdec1	equ	0xFE5
 11469                           fsr1h	equ	0xFE2
 11470                           fsr1l	equ	0xFE1
 11471                           indf2	equ	0xFDF
 11472                           postinc2	equ	0xFDE
 11473                           postdec2	equ	0xFDD
 11474                           plusw2	equ	0xFDB
 11475                           fsr2h	equ	0xFDA
 11476                           fsr2l	equ	0xFD9
 11477                           status	equ	0xFD8
 11478                           
 11479 ;; *************** function _INTERRUPT_InterruptManager *****************
 11480 ;; Defined at:
 11481 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
 11482 ;; Parameters:    Size  Location     Type
 11483 ;;		None
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;		None
 11486 ;; Return value:  Size  Location     Type
 11487 ;;		None               void
 11488 ;; Registers used:
 11489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11490 ;; Tracked objects:
 11491 ;;		On entry : 0/0
 11492 ;;		On exit  : 0/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11495 ;;      Params:         0       0       0       0       0       0       0
 11496 ;;      Locals:         0       0       0       0       0       0       0
 11497 ;;      Temps:         14       0       0       0       0       0       0
 11498 ;;      Totals:        14       0       0       0       0       0       0
 11499 ;;Total ram usage:       14 bytes
 11500 ;; Hardware stack levels used:    1
 11501 ;; Hardware stack levels required when called:    3
 11502 ;; This function calls:
 11503 ;;		_ADC_ISR
 11504 ;;		_EUSART1_Receive_ISR
 11505 ;;		_EUSART1_Transmit_ISR
 11506 ;;		_TMR1_ISR
 11507 ;; This function is called by:
 11508 ;;		Interrupt level 2
 11509 ;; This function uses a non-reentrant model
 11510 ;;
 11511                           
 11512                           	psect	intcode
 11513  000008                     __pintcode:
 11514                           	opt stack 0
 11515  000008                     _INTERRUPT_InterruptManager:
 11516                           	opt stack 21
 11517                           
 11518                           ;incstack = 0
 11519  000008  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
 11520  00000C  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 11521  000010  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 11522  000014  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 11523  000018  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 11524  00001C  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 11525  000020  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 11526  000024  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 11527  000028  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
 11528  00002C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
 11529  000030  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 11530  000034  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 11531  000038  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 11532  00003C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
 11533                           
 11534                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 11535  000040  BA9D               	btfsc	3997,5,c	;volatile
 11536  000042  AA9E               	btfss	3998,5,c	;volatile
 11537  000044  D003               	goto	i2l207
 11538                           
 11539                           ;interrupt_manager.c: 73: {
 11540                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
 11541  000046  ECD5  F01C         	call	_EUSART1_Receive_ISR	;wreg free
 11542                           
 11543                           ;interrupt_manager.c: 75: }
 11544  00004A  D012               	goto	i2l215
 11545  00004C                     i2l207:
 11546                           
 11547                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 11548  00004C  BC9D               	btfsc	3997,6,c	;volatile
 11549  00004E  AC9E               	btfss	3998,6,c	;volatile
 11550  000050  D003               	goto	i2l209
 11551                           
 11552                           ;interrupt_manager.c: 77: {
 11553                           ;interrupt_manager.c: 78: ADC_ISR();
 11554  000052  EC2B  F006         	call	_ADC_ISR	;wreg free
 11555                           
 11556                           ;interrupt_manager.c: 79: }
 11557  000056  D00C               	goto	i2l215
 11558  000058                     i2l209:
 11559                           
 11560                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 11561  000058  B09D               	btfsc	3997,0,c	;volatile
 11562  00005A  A09E               	btfss	3998,0,c	;volatile
 11563  00005C  D003               	goto	i2l211
 11564                           
 11565                           ;interrupt_manager.c: 81: {
 11566                           ;interrupt_manager.c: 82: TMR1_ISR();
 11567  00005E  EC00  F01B         	call	_TMR1_ISR	;wreg free
 11568                           
 11569                           ;interrupt_manager.c: 83: }
 11570  000062  D006               	goto	i2l215
 11571  000064                     i2l211:
 11572                           
 11573                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 11574  000064  B89D               	btfsc	3997,4,c	;volatile
 11575  000066  A89E               	btfss	3998,4,c	;volatile
 11576  000068  D003               	goto	i2l215
 11577                           
 11578                           ;interrupt_manager.c: 85: {
 11579                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
 11580  00006A  ECA0  F01B         	call	_EUSART1_Transmit_ISR	;wreg free
 11581                           
 11582                           ;interrupt_manager.c: 88: else
 11583                           ;interrupt_manager.c: 89: {
 11584                           
 11585                           ;interrupt_manager.c: 87: }
 11586  00006E  D000               	goto	i2l215
 11587  000070                     i2l215:
 11588  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 11589  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 11590  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 11591  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 11592  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 11593  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 11594  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 11595  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 11596  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 11597  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 11598  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 11599  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 11600  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 11601  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 11602  0000A8  0011               	retfie		f
 11603  0000AA                     __end_of_INTERRUPT_InterruptManager:
 11604                           	opt stack 0
 11605                           tosu	equ	0xFFF
 11606                           tosh	equ	0xFFE
 11607                           tosl	equ	0xFFD
 11608                           pclatu	equ	0xFFB
 11609                           pclath	equ	0xFFA
 11610                           tblptru	equ	0xFF8
 11611                           tblptrh	equ	0xFF7
 11612                           tblptrl	equ	0xFF6
 11613                           tablat	equ	0xFF5
 11614                           prodh	equ	0xFF4
 11615                           prodl	equ	0xFF3
 11616                           intcon	equ	0xFF2
 11617                           intcon2	equ	0xFF1
 11618                           postinc0	equ	0xFEE
 11619                           fsr0h	equ	0xFEA
 11620                           fsr0l	equ	0xFE9
 11621                           wreg	equ	0xFE8
 11622                           postinc1	equ	0xFE6
 11623                           postdec1	equ	0xFE5
 11624                           fsr1h	equ	0xFE2
 11625                           fsr1l	equ	0xFE1
 11626                           indf2	equ	0xFDF
 11627                           postinc2	equ	0xFDE
 11628                           postdec2	equ	0xFDD
 11629                           plusw2	equ	0xFDB
 11630                           fsr2h	equ	0xFDA
 11631                           fsr2l	equ	0xFD9
 11632                           status	equ	0xFD8
 11633                           
 11634 ;; *************** function _TMR1_ISR *****************
 11635 ;; Defined at:
 11636 ;;		line 112 in file "mcc_generated_files/tmr1.c"
 11637 ;; Parameters:    Size  Location     Type
 11638 ;;		None
 11639 ;; Auto vars:     Size  Location     Type
 11640 ;;		None
 11641 ;; Return value:  Size  Location     Type
 11642 ;;		None               void
 11643 ;; Registers used:
 11644 ;;		wreg, status,2, status,0, cstack
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11650 ;;      Params:         0       0       0       0       0       0       0
 11651 ;;      Locals:         0       0       0       0       0       0       0
 11652 ;;      Temps:          0       0       0       0       0       0       0
 11653 ;;      Totals:         0       0       0       0       0       0       0
 11654 ;;Total ram usage:        0 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; Hardware stack levels required when called:    2
 11657 ;; This function calls:
 11658 ;;		_Battery_Read
 11659 ;;		_Temp_Read
 11660 ;; This function is called by:
 11661 ;;		_INTERRUPT_InterruptManager
 11662 ;; This function uses a non-reentrant model
 11663 ;;
 11664                           
 11665                           	psect	text59
 11666  003600                     __ptext59:
 11667                           	opt stack 0
 11668  003600                     _TMR1_ISR:
 11669                           	opt stack 21
 11670                           
 11671                           ;tmr1.c: 116: PIR1bits.TMR1IF = 0;
 11672                           
 11673                           ;incstack = 0
 11674  003600  909E               	bcf	3998,0,c	;volatile
 11675                           
 11676                           ;tmr1.c: 119: TMR1H = (timer1ReloadVal >> 8);
 11677  003602  5038               	movf	_timer1ReloadVal+1,w,c	;volatile
 11678  003604  6ECF               	movwf	4047,c	;volatile
 11679                           
 11680                           ;tmr1.c: 120: TMR1L = (uint8_t) timer1ReloadVal;
 11681  003606  C037  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 11682                           
 11683                           ;tmr1.c: 123: if (++CountCallBack >= 4)
 11684  00360A  4A2F               	infsnz	_CountCallBack,f,c
 11685  00360C  2A30               	incf	_CountCallBack+1,f,c
 11686  00360E  BE30               	btfsc	_CountCallBack+1,7,c
 11687  003610  D00D               	goto	i2l3979
 11688  003612  5030               	movf	_CountCallBack+1,w,c
 11689  003614  E104               	bnz	i2u397_40
 11690  003616  0E04               	movlw	4
 11691  003618  5C2F               	subwf	_CountCallBack,w,c
 11692  00361A  A0D8               	btfss	status,0,c
 11693  00361C  D007               	goto	i2l3979
 11694  00361E                     i2u397_40:
 11695                           
 11696                           ;tmr1.c: 124: {
 11697                           ;tmr1.c: 126: do { LATA4 = ~LATA4; } while(0);
 11698  00361E  7889               	btg	3977,4,c	;volatile
 11699  003620  D000               	goto	i2l3977
 11700  003622                     i2l3977:
 11701                           
 11702                           ;tmr1.c: 129: CountCallBack = 0;
 11703  003622  0E00               	movlw	0
 11704  003624  6E30               	movwf	_CountCallBack+1,c
 11705  003626  0E00               	movlw	0
 11706  003628  6E2F               	movwf	_CountCallBack,c
 11707  00362A  D000               	goto	i2l3979
 11708  00362C                     i2l3979:
 11709                           
 11710                           ;tmr1.c: 130: }
 11711                           ;tmr1.c: 135: if(CountCallBack == 1)
 11712  00362C  042F               	decf	_CountCallBack,w,c
 11713  00362E  1030               	iorwf	_CountCallBack+1,w,c
 11714  003630  A4D8               	btfss	status,2,c
 11715  003632  D003               	goto	i2l3983
 11716                           
 11717                           ;tmr1.c: 136: {
 11718                           ;tmr1.c: 137: Battery_Read();
 11719  003634  EC15  F01D         	call	_Battery_Read	;wreg free
 11720  003638  D000               	goto	i2l3983
 11721  00363A                     i2l3983:
 11722                           
 11723                           ;tmr1.c: 138: }
 11724                           ;tmr1.c: 139: if(CountCallBack == 3)
 11725  00363A  0E03               	movlw	3
 11726  00363C  182F               	xorwf	_CountCallBack,w,c
 11727  00363E  1030               	iorwf	_CountCallBack+1,w,c
 11728  003640  A4D8               	btfss	status,2,c
 11729  003642  0012               	return	
 11730                           
 11731                           ;tmr1.c: 140: {
 11732                           ;tmr1.c: 141: Temp_Read();
 11733  003644  EC85  F01C         	call	_Temp_Read	;wreg free
 11734  003648  0012               	return	
 11735  00364A  0012               	return		;funcret
 11736  00364C                     __end_of_TMR1_ISR:
 11737                           	opt stack 0
 11738                           tosu	equ	0xFFF
 11739                           tosh	equ	0xFFE
 11740                           tosl	equ	0xFFD
 11741                           pclatu	equ	0xFFB
 11742                           pclath	equ	0xFFA
 11743                           tblptru	equ	0xFF8
 11744                           tblptrh	equ	0xFF7
 11745                           tblptrl	equ	0xFF6
 11746                           tablat	equ	0xFF5
 11747                           prodh	equ	0xFF4
 11748                           prodl	equ	0xFF3
 11749                           intcon	equ	0xFF2
 11750                           intcon2	equ	0xFF1
 11751                           postinc0	equ	0xFEE
 11752                           fsr0h	equ	0xFEA
 11753                           fsr0l	equ	0xFE9
 11754                           wreg	equ	0xFE8
 11755                           postinc1	equ	0xFE6
 11756                           postdec1	equ	0xFE5
 11757                           fsr1h	equ	0xFE2
 11758                           fsr1l	equ	0xFE1
 11759                           indf2	equ	0xFDF
 11760                           postinc2	equ	0xFDE
 11761                           postdec2	equ	0xFDD
 11762                           plusw2	equ	0xFDB
 11763                           fsr2h	equ	0xFDA
 11764                           fsr2l	equ	0xFD9
 11765                           status	equ	0xFD8
 11766                           
 11767 ;; *************** function _Temp_Read *****************
 11768 ;; Defined at:
 11769 ;;		line 32 in file "Tempeture.c"
 11770 ;; Parameters:    Size  Location     Type
 11771 ;;		None
 11772 ;; Auto vars:     Size  Location     Type
 11773 ;;		None
 11774 ;; Return value:  Size  Location     Type
 11775 ;;		None               void
 11776 ;; Registers used:
 11777 ;;		wreg, status,2, status,0, cstack
 11778 ;; Tracked objects:
 11779 ;;		On entry : 0/0
 11780 ;;		On exit  : 0/0
 11781 ;;		Unchanged: 0/0
 11782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11783 ;;      Params:         0       0       0       0       0       0       0
 11784 ;;      Locals:         0       0       0       0       0       0       0
 11785 ;;      Temps:          0       0       0       0       0       0       0
 11786 ;;      Totals:         0       0       0       0       0       0       0
 11787 ;;Total ram usage:        0 bytes
 11788 ;; Hardware stack levels used:    1
 11789 ;; Hardware stack levels required when called:    1
 11790 ;; This function calls:
 11791 ;;		_ADC_StartConversion
 11792 ;;		_Set_4051
 11793 ;; This function is called by:
 11794 ;;		_TMR1_ISR
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           	psect	text60
 11799  00390A                     __ptext60:
 11800                           	opt stack 0
 11801  00390A                     _Temp_Read:
 11802                           	opt stack 21
 11803                           
 11804                           ;Tempeture.c: 34: ADC_Buffer_Point = 0;
 11805                           
 11806                           ;incstack = 0
 11807  00390A  0E00               	movlw	0
 11808  00390C  6E2E               	movwf	_ADC_Buffer_Point+1,c
 11809  00390E  0E00               	movlw	0
 11810  003910  6E2D               	movwf	_ADC_Buffer_Point,c
 11811                           
 11812                           ;Tempeture.c: 35: Temp_Aquire = 1;
 11813  003912  0E01               	movlw	1
 11814  003914  6E3A               	movwf	_Temp_Aquire,c
 11815                           
 11816                           ;Tempeture.c: 36: Set_4051(1);
 11817  003916  0E00               	movlw	0
 11818  003918  6E02               	movwf	Set_4051@Channel+1,c
 11819  00391A  0E01               	movlw	1
 11820  00391C  6E01               	movwf	Set_4051@Channel,c
 11821  00391E  EC84  F01B         	call	_Set_4051	;wreg free
 11822                           
 11823                           ;Tempeture.c: 37: ADCON1 = 0x80;
 11824  003922  0E80               	movlw	128
 11825  003924  6EC1               	movwf	4033,c	;volatile
 11826                           
 11827                           ;Tempeture.c: 38: ADC_StartConversion(Temp1);
 11828  003926  0E0E               	movlw	14
 11829  003928  ECE4  F01C         	call	_ADC_StartConversion
 11830  00392C  0012               	return		;funcret
 11831  00392E                     __end_of_Temp_Read:
 11832                           	opt stack 0
 11833                           tosu	equ	0xFFF
 11834                           tosh	equ	0xFFE
 11835                           tosl	equ	0xFFD
 11836                           pclatu	equ	0xFFB
 11837                           pclath	equ	0xFFA
 11838                           tblptru	equ	0xFF8
 11839                           tblptrh	equ	0xFF7
 11840                           tblptrl	equ	0xFF6
 11841                           tablat	equ	0xFF5
 11842                           prodh	equ	0xFF4
 11843                           prodl	equ	0xFF3
 11844                           intcon	equ	0xFF2
 11845                           intcon2	equ	0xFF1
 11846                           postinc0	equ	0xFEE
 11847                           fsr0h	equ	0xFEA
 11848                           fsr0l	equ	0xFE9
 11849                           wreg	equ	0xFE8
 11850                           postinc1	equ	0xFE6
 11851                           postdec1	equ	0xFE5
 11852                           fsr1h	equ	0xFE2
 11853                           fsr1l	equ	0xFE1
 11854                           indf2	equ	0xFDF
 11855                           postinc2	equ	0xFDE
 11856                           postdec2	equ	0xFDD
 11857                           plusw2	equ	0xFDB
 11858                           fsr2h	equ	0xFDA
 11859                           fsr2l	equ	0xFD9
 11860                           status	equ	0xFD8
 11861                           
 11862 ;; *************** function _Battery_Read *****************
 11863 ;; Defined at:
 11864 ;;		line 18 in file "Battery.c"
 11865 ;; Parameters:    Size  Location     Type
 11866 ;;		None
 11867 ;; Auto vars:     Size  Location     Type
 11868 ;;		None
 11869 ;; Return value:  Size  Location     Type
 11870 ;;		None               void
 11871 ;; Registers used:
 11872 ;;		wreg, status,2, status,0, cstack
 11873 ;; Tracked objects:
 11874 ;;		On entry : 0/0
 11875 ;;		On exit  : 0/0
 11876 ;;		Unchanged: 0/0
 11877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11878 ;;      Params:         0       0       0       0       0       0       0
 11879 ;;      Locals:         0       0       0       0       0       0       0
 11880 ;;      Temps:          0       0       0       0       0       0       0
 11881 ;;      Totals:         0       0       0       0       0       0       0
 11882 ;;Total ram usage:        0 bytes
 11883 ;; Hardware stack levels used:    1
 11884 ;; Hardware stack levels required when called:    1
 11885 ;; This function calls:
 11886 ;;		_ADC_StartConversion
 11887 ;; This function is called by:
 11888 ;;		_TMR1_ISR
 11889 ;; This function uses a non-reentrant model
 11890 ;;
 11891                           
 11892                           	psect	text61
 11893  003A2A                     __ptext61:
 11894                           	opt stack 0
 11895  003A2A                     _Battery_Read:
 11896                           	opt stack 21
 11897                           
 11898                           ;Battery.c: 20: ADC_Buffer_Point = 0;
 11899                           
 11900                           ;incstack = 0
 11901  003A2A  0E00               	movlw	0
 11902  003A2C  6E2E               	movwf	_ADC_Buffer_Point+1,c
 11903  003A2E  0E00               	movlw	0
 11904  003A30  6E2D               	movwf	_ADC_Buffer_Point,c
 11905                           
 11906                           ;Battery.c: 21: Volt_Aquire = 1;
 11907  003A32  0E01               	movlw	1
 11908  003A34  6E3B               	movwf	_Volt_Aquire,c
 11909                           
 11910                           ;Battery.c: 22: ADCON1 = 0x80;
 11911  003A36  0E80               	movlw	128
 11912  003A38  6EC1               	movwf	4033,c	;volatile
 11913                           
 11914                           ;Battery.c: 23: ADC_StartConversion(Battery1);
 11915  003A3A  0E01               	movlw	1
 11916  003A3C  ECE4  F01C         	call	_ADC_StartConversion
 11917  003A40  0012               	return		;funcret
 11918  003A42                     __end_of_Battery_Read:
 11919                           	opt stack 0
 11920                           tosu	equ	0xFFF
 11921                           tosh	equ	0xFFE
 11922                           tosl	equ	0xFFD
 11923                           pclatu	equ	0xFFB
 11924                           pclath	equ	0xFFA
 11925                           tblptru	equ	0xFF8
 11926                           tblptrh	equ	0xFF7
 11927                           tblptrl	equ	0xFF6
 11928                           tablat	equ	0xFF5
 11929                           prodh	equ	0xFF4
 11930                           prodl	equ	0xFF3
 11931                           intcon	equ	0xFF2
 11932                           intcon2	equ	0xFF1
 11933                           postinc0	equ	0xFEE
 11934                           fsr0h	equ	0xFEA
 11935                           fsr0l	equ	0xFE9
 11936                           wreg	equ	0xFE8
 11937                           postinc1	equ	0xFE6
 11938                           postdec1	equ	0xFE5
 11939                           fsr1h	equ	0xFE2
 11940                           fsr1l	equ	0xFE1
 11941                           indf2	equ	0xFDF
 11942                           postinc2	equ	0xFDE
 11943                           postdec2	equ	0xFDD
 11944                           plusw2	equ	0xFDB
 11945                           fsr2h	equ	0xFDA
 11946                           fsr2l	equ	0xFD9
 11947                           status	equ	0xFD8
 11948                           
 11949 ;; *************** function _EUSART1_Transmit_ISR *****************
 11950 ;; Defined at:
 11951 ;;		line 157 in file "UART.c"
 11952 ;; Parameters:    Size  Location     Type
 11953 ;;		None
 11954 ;; Auto vars:     Size  Location     Type
 11955 ;;		None
 11956 ;; Return value:  Size  Location     Type
 11957 ;;		None               void
 11958 ;; Registers used:
 11959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11960 ;; Tracked objects:
 11961 ;;		On entry : 0/0
 11962 ;;		On exit  : 0/0
 11963 ;;		Unchanged: 0/0
 11964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11965 ;;      Params:         0       0       0       0       0       0       0
 11966 ;;      Locals:         0       0       0       0       0       0       0
 11967 ;;      Temps:          0       0       0       0       0       0       0
 11968 ;;      Totals:         0       0       0       0       0       0       0
 11969 ;;Total ram usage:        0 bytes
 11970 ;; Hardware stack levels used:    1
 11971 ;; Hardware stack levels required when called:    2
 11972 ;; This function calls:
 11973 ;;		i2_UART_buff_get
 11974 ;;		i2_UART_buff_size
 11975 ;; This function is called by:
 11976 ;;		_INTERRUPT_InterruptManager
 11977 ;; This function uses a non-reentrant model
 11978 ;;
 11979                           
 11980                           	psect	text62
 11981  003740                     __ptext62:
 11982                           	opt stack 0
 11983  003740                     _EUSART1_Transmit_ISR:
 11984                           	opt stack 21
 11985                           
 11986                           ;UART.c: 159: if (UART_buff_size(&output_buffer) > 0) {
 11987                           
 11988                           ;incstack = 0
 11989  003740  0E00               	movlw	low _output_buffer
 11990  003742  6E01               	movwf	i2UART_buff_size@_this,c
 11991  003744  0E05               	movlw	high _output_buffer
 11992  003746  6E02               	movwf	i2UART_buff_size@_this+1,c
 11993  003748  EC21  F01D         	call	i2_UART_buff_size	;wreg free
 11994  00374C  BE02               	btfsc	?i2_UART_buff_size+1,7,c
 11995  00374E  D00D               	goto	i2l4093
 11996  003750  5002               	movf	?i2_UART_buff_size+1,w,c
 11997  003752  E103               	bnz	i2u403_40
 11998  003754  0401               	decf	?i2_UART_buff_size,w,c
 11999  003756  A0D8               	btfss	status,0,c
 12000  003758  D008               	goto	i2l4093
 12001  00375A                     i2u403_40:
 12002                           
 12003                           ;UART.c: 160: TXREG1 = UART_buff_get(&output_buffer);
 12004  00375A  0E00               	movlw	low _output_buffer
 12005  00375C  6E07               	movwf	i2UART_buff_get@_this,c
 12006  00375E  0E05               	movlw	high _output_buffer
 12007  003760  6E08               	movwf	i2UART_buff_get@_this+1,c
 12008  003762  ECC0  F018         	call	i2_UART_buff_get	;wreg free
 12009  003766  6EAD               	movwf	4013,c	;volatile
 12010                           
 12011                           ;UART.c: 161: } else {
 12012  003768  0012               	return	
 12013  00376A                     i2l4093:
 12014                           
 12015                           ;UART.c: 162: Transmit_stall = 1;
 12016  00376A  0E01               	movlw	1
 12017  00376C  6E45               	movwf	_Transmit_stall,c
 12018                           
 12019                           ;UART.c: 163: PIE1bits.TX1IE = 0;
 12020  00376E  989D               	bcf	3997,4,c	;volatile
 12021  003770  0012               	return	
 12022  003772  0012               	return		;funcret
 12023  003774                     __end_of_EUSART1_Transmit_ISR:
 12024                           	opt stack 0
 12025                           tosu	equ	0xFFF
 12026                           tosh	equ	0xFFE
 12027                           tosl	equ	0xFFD
 12028                           pclatu	equ	0xFFB
 12029                           pclath	equ	0xFFA
 12030                           tblptru	equ	0xFF8
 12031                           tblptrh	equ	0xFF7
 12032                           tblptrl	equ	0xFF6
 12033                           tablat	equ	0xFF5
 12034                           prodh	equ	0xFF4
 12035                           prodl	equ	0xFF3
 12036                           intcon	equ	0xFF2
 12037                           intcon2	equ	0xFF1
 12038                           postinc0	equ	0xFEE
 12039                           fsr0h	equ	0xFEA
 12040                           fsr0l	equ	0xFE9
 12041                           wreg	equ	0xFE8
 12042                           postinc1	equ	0xFE6
 12043                           postdec1	equ	0xFE5
 12044                           fsr1h	equ	0xFE2
 12045                           fsr1l	equ	0xFE1
 12046                           indf2	equ	0xFDF
 12047                           postinc2	equ	0xFDE
 12048                           postdec2	equ	0xFDD
 12049                           plusw2	equ	0xFDB
 12050                           fsr2h	equ	0xFDA
 12051                           fsr2l	equ	0xFD9
 12052                           status	equ	0xFD8
 12053                           
 12054 ;; *************** function i2_UART_buff_size *****************
 12055 ;; Defined at:
 12056 ;;		line 102 in file "UART.c"
 12057 ;; Parameters:    Size  Location     Type
 12058 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
 12059 ;;		 -> output_buffer(206), input_buffer(206), 
 12060 ;; Auto vars:     Size  Location     Type
 12061 ;;		None
 12062 ;; Return value:  Size  Location     Type
 12063 ;;                  2    0[COMRAM] int 
 12064 ;; Registers used:
 12065 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12066 ;; Tracked objects:
 12067 ;;		On entry : 0/0
 12068 ;;		On exit  : 0/0
 12069 ;;		Unchanged: 0/0
 12070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12071 ;;      Params:         2       0       0       0       0       0       0
 12072 ;;      Locals:         0       0       0       0       0       0       0
 12073 ;;      Temps:          0       0       0       0       0       0       0
 12074 ;;      Totals:         2       0       0       0       0       0       0
 12075 ;;Total ram usage:        2 bytes
 12076 ;; Hardware stack levels used:    1
 12077 ;; This function calls:
 12078 ;;		Nothing
 12079 ;; This function is called by:
 12080 ;;		_EUSART1_Transmit_ISR
 12081 ;; This function uses a non-reentrant model
 12082 ;;
 12083                           
 12084                           	psect	text63
 12085  003A42                     __ptext63:
 12086                           	opt stack 0
 12087  003A42                     i2_UART_buff_size:
 12088                           	opt stack 22
 12089                           
 12090                           ;UART.c: 103: return (_this->count);
 12091                           
 12092                           ;incstack = 0
 12093  003A42  EE20 F0CC          	lfsr	2,204
 12094  003A46  5001               	movf	i2UART_buff_size@_this,w,c
 12095  003A48  26D9               	addwf	fsr2l,f,c
 12096  003A4A  5002               	movf	i2UART_buff_size@_this+1,w,c
 12097  003A4C  22DA               	addwfc	fsr2h,f,c
 12098  003A4E  CFDE F001          	movff	postinc2,?i2_UART_buff_size
 12099  003A52  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
 12100  003A56  0012               	return	
 12101  003A58  0012               	return		;funcret
 12102  003A5A                     __end_ofi2_UART_buff_size:
 12103                           	opt stack 0
 12104                           tosu	equ	0xFFF
 12105                           tosh	equ	0xFFE
 12106                           tosl	equ	0xFFD
 12107                           pclatu	equ	0xFFB
 12108                           pclath	equ	0xFFA
 12109                           tblptru	equ	0xFF8
 12110                           tblptrh	equ	0xFF7
 12111                           tblptrl	equ	0xFF6
 12112                           tablat	equ	0xFF5
 12113                           prodh	equ	0xFF4
 12114                           prodl	equ	0xFF3
 12115                           intcon	equ	0xFF2
 12116                           intcon2	equ	0xFF1
 12117                           postinc0	equ	0xFEE
 12118                           fsr0h	equ	0xFEA
 12119                           fsr0l	equ	0xFE9
 12120                           wreg	equ	0xFE8
 12121                           postinc1	equ	0xFE6
 12122                           postdec1	equ	0xFE5
 12123                           fsr1h	equ	0xFE2
 12124                           fsr1l	equ	0xFE1
 12125                           indf2	equ	0xFDF
 12126                           postinc2	equ	0xFDE
 12127                           postdec2	equ	0xFDD
 12128                           plusw2	equ	0xFDB
 12129                           fsr2h	equ	0xFDA
 12130                           fsr2l	equ	0xFD9
 12131                           status	equ	0xFD8
 12132                           
 12133 ;; *************** function i2_UART_buff_get *****************
 12134 ;; Defined at:
 12135 ;;		line 81 in file "UART.c"
 12136 ;; Parameters:    Size  Location     Type
 12137 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 12138 ;;		 -> output_buffer(206), input_buffer(206), 
 12139 ;; Auto vars:     Size  Location     Type
 12140 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 12141 ;; Return value:  Size  Location     Type
 12142 ;;                  1    wreg      unsigned char 
 12143 ;; Registers used:
 12144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12145 ;; Tracked objects:
 12146 ;;		On entry : 0/0
 12147 ;;		On exit  : 0/0
 12148 ;;		Unchanged: 0/0
 12149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12150 ;;      Params:         2       0       0       0       0       0       0
 12151 ;;      Locals:         1       0       0       0       0       0       0
 12152 ;;      Temps:          2       0       0       0       0       0       0
 12153 ;;      Totals:         5       0       0       0       0       0       0
 12154 ;;Total ram usage:        5 bytes
 12155 ;; Hardware stack levels used:    1
 12156 ;; Hardware stack levels required when called:    1
 12157 ;; This function calls:
 12158 ;;		i2_UART_buff_modulo_inc
 12159 ;; This function is called by:
 12160 ;;		_EUSART1_Transmit_ISR
 12161 ;; This function uses a non-reentrant model
 12162 ;;
 12163                           
 12164                           	psect	text64
 12165  003180                     __ptext64:
 12166                           	opt stack 0
 12167  003180                     i2_UART_buff_get:
 12168                           	opt stack 21
 12169                           
 12170                           ;UART.c: 82: unsigned char c;
 12171                           ;UART.c: 83: if (_this->count > 0) {
 12172                           
 12173                           ;incstack = 0
 12174  003180  EE20 F0CC          	lfsr	2,204
 12175  003184  5007               	movf	i2UART_buff_get@_this,w,c
 12176  003186  26D9               	addwf	fsr2l,f,c
 12177  003188  5008               	movf	i2UART_buff_get@_this+1,w,c
 12178  00318A  22DA               	addwfc	fsr2h,f,c
 12179  00318C  0E01               	movlw	1
 12180  00318E  BEDB               	btfsc	plusw2,7,c
 12181  003190  D03C               	goto	i2l3961
 12182  003192  0E01               	movlw	1
 12183  003194  50DB               	movf	plusw2,w,c
 12184  003196  E103               	bnz	i2u396_40
 12185  003198  04DE               	decf	postinc2,w,c
 12186  00319A  A0D8               	btfss	status,0,c
 12187  00319C  D036               	goto	i2l3961
 12188  00319E                     i2u396_40:
 12189                           
 12190                           ;UART.c: 84: c = _this->buf[_this->tail];
 12191  00319E  EE20 F0CA          	lfsr	2,202
 12192  0031A2  5007               	movf	i2UART_buff_get@_this,w,c
 12193  0031A4  26D9               	addwf	fsr2l,f,c
 12194  0031A6  5008               	movf	i2UART_buff_get@_this+1,w,c
 12195  0031A8  22DA               	addwfc	fsr2h,f,c
 12196  0031AA  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 12197  0031AE  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 12198  0031B2  5009               	movf	??i2_UART_buff_get,w,c
 12199  0031B4  2407               	addwf	i2UART_buff_get@_this,w,c
 12200  0031B6  6ED9               	movwf	fsr2l,c
 12201  0031B8  500A               	movf	??i2_UART_buff_get+1,w,c
 12202  0031BA  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 12203  0031BC  6EDA               	movwf	fsr2h,c
 12204  0031BE  50DF               	movf	indf2,w,c
 12205  0031C0  6E0B               	movwf	i2UART_buff_get@c,c
 12206                           
 12207                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 12208  0031C2  EE20 F0CA          	lfsr	2,202
 12209  0031C6  5007               	movf	i2UART_buff_get@_this,w,c
 12210  0031C8  26D9               	addwf	fsr2l,f,c
 12211  0031CA  5008               	movf	i2UART_buff_get@_this+1,w,c
 12212  0031CC  22DA               	addwfc	fsr2h,f,c
 12213  0031CE  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12214  0031D2  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12215  0031D6  0E00               	movlw	0
 12216  0031D8  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12217  0031DA  0EC8               	movlw	200
 12218  0031DC  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12219  0031DE  EC47  F01C         	call	i2_UART_buff_modulo_inc	;wreg free
 12220  0031E2  EE20 F0CA          	lfsr	2,202
 12221  0031E6  5007               	movf	i2UART_buff_get@_this,w,c
 12222  0031E8  26D9               	addwf	fsr2l,f,c
 12223  0031EA  5008               	movf	i2UART_buff_get@_this+1,w,c
 12224  0031EC  22DA               	addwfc	fsr2h,f,c
 12225  0031EE  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12226  0031F2  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12227                           
 12228                           ;UART.c: 86: --_this->count;
 12229  0031F6  EE20 F0CC          	lfsr	2,204
 12230  0031FA  5007               	movf	i2UART_buff_get@_this,w,c
 12231  0031FC  26D9               	addwf	fsr2l,f,c
 12232  0031FE  5008               	movf	i2UART_buff_get@_this+1,w,c
 12233  003200  22DA               	addwfc	fsr2h,f,c
 12234  003202  06DE               	decf	postinc2,f,c
 12235  003204  0E00               	movlw	0
 12236  003206  5ADD               	subwfb	postdec2,f,c
 12237                           
 12238                           ;UART.c: 87: } else {
 12239  003208  D002               	goto	i2l778
 12240  00320A                     i2l3961:
 12241                           
 12242                           ;UART.c: 88: c = 0;
 12243  00320A  0E00               	movlw	0
 12244  00320C  6E0B               	movwf	i2UART_buff_get@c,c
 12245  00320E                     i2l778:
 12246                           
 12247                           ;UART.c: 89: }
 12248                           ;UART.c: 90: return (c);
 12249  00320E  500B               	movf	i2UART_buff_get@c,w,c
 12250  003210  0012               	return	
 12251  003212  0012               	return		;funcret
 12252  003214                     __end_ofi2_UART_buff_get:
 12253                           	opt stack 0
 12254                           tosu	equ	0xFFF
 12255                           tosh	equ	0xFFE
 12256                           tosl	equ	0xFFD
 12257                           pclatu	equ	0xFFB
 12258                           pclath	equ	0xFFA
 12259                           tblptru	equ	0xFF8
 12260                           tblptrh	equ	0xFF7
 12261                           tblptrl	equ	0xFF6
 12262                           tablat	equ	0xFF5
 12263                           prodh	equ	0xFF4
 12264                           prodl	equ	0xFF3
 12265                           intcon	equ	0xFF2
 12266                           intcon2	equ	0xFF1
 12267                           postinc0	equ	0xFEE
 12268                           fsr0h	equ	0xFEA
 12269                           fsr0l	equ	0xFE9
 12270                           wreg	equ	0xFE8
 12271                           postinc1	equ	0xFE6
 12272                           postdec1	equ	0xFE5
 12273                           fsr1h	equ	0xFE2
 12274                           fsr1l	equ	0xFE1
 12275                           indf2	equ	0xFDF
 12276                           postinc2	equ	0xFDE
 12277                           postdec2	equ	0xFDD
 12278                           plusw2	equ	0xFDB
 12279                           fsr2h	equ	0xFDA
 12280                           fsr2l	equ	0xFD9
 12281                           status	equ	0xFD8
 12282                           
 12283 ;; *************** function _EUSART1_Receive_ISR *****************
 12284 ;; Defined at:
 12285 ;;		line 139 in file "UART.c"
 12286 ;; Parameters:    Size  Location     Type
 12287 ;;		None
 12288 ;; Auto vars:     Size  Location     Type
 12289 ;;  data            1   11[COMRAM] unsigned char 
 12290 ;; Return value:  Size  Location     Type
 12291 ;;		None               void
 12292 ;; Registers used:
 12293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12294 ;; Tracked objects:
 12295 ;;		On entry : 0/0
 12296 ;;		On exit  : 0/0
 12297 ;;		Unchanged: 0/0
 12298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12299 ;;      Params:         0       0       0       0       0       0       0
 12300 ;;      Locals:         1       0       0       0       0       0       0
 12301 ;;      Temps:          0       0       0       0       0       0       0
 12302 ;;      Totals:         1       0       0       0       0       0       0
 12303 ;;Total ram usage:        1 bytes
 12304 ;; Hardware stack levels used:    1
 12305 ;; Hardware stack levels required when called:    2
 12306 ;; This function calls:
 12307 ;;		i2_UART_buff_put
 12308 ;; This function is called by:
 12309 ;;		_INTERRUPT_InterruptManager
 12310 ;; This function uses a non-reentrant model
 12311 ;;
 12312                           
 12313                           	psect	text65
 12314  0039AA                     __ptext65:
 12315                           	opt stack 0
 12316  0039AA                     _EUSART1_Receive_ISR:
 12317                           	opt stack 21
 12318                           
 12319                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
 12320                           
 12321                           ;incstack = 0
 12322  0039AA  A2AB               	btfss	4011,1,c	;volatile
 12323  0039AC  D002               	goto	i2l809
 12324                           
 12325                           ;UART.c: 143: RC1STAbits.CREN = 0;
 12326  0039AE  98AB               	bcf	4011,4,c	;volatile
 12327                           
 12328                           ;UART.c: 144: RC1STAbits.CREN = 1;
 12329  0039B0  88AB               	bsf	4011,4,c	;volatile
 12330  0039B2                     i2l809:
 12331                           
 12332                           ;UART.c: 145: }
 12333                           ;UART.c: 153: unsigned char data = RCREG1;
 12334  0039B2  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 12335                           
 12336                           ;UART.c: 154: UART_buff_put(&input_buffer, data);
 12337  0039B6  0E00               	movlw	low _input_buffer
 12338  0039B8  6E07               	movwf	i2UART_buff_put@_this,c
 12339  0039BA  0E04               	movlw	high _input_buffer
 12340  0039BC  6E08               	movwf	i2UART_buff_put@_this+1,c
 12341  0039BE  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 12342  0039C2  ECA0  F012         	call	i2_UART_buff_put	;wreg free
 12343  0039C6  0012               	return		;funcret
 12344  0039C8                     __end_of_EUSART1_Receive_ISR:
 12345                           	opt stack 0
 12346                           tosu	equ	0xFFF
 12347                           tosh	equ	0xFFE
 12348                           tosl	equ	0xFFD
 12349                           pclatu	equ	0xFFB
 12350                           pclath	equ	0xFFA
 12351                           tblptru	equ	0xFF8
 12352                           tblptrh	equ	0xFF7
 12353                           tblptrl	equ	0xFF6
 12354                           tablat	equ	0xFF5
 12355                           prodh	equ	0xFF4
 12356                           prodl	equ	0xFF3
 12357                           intcon	equ	0xFF2
 12358                           intcon2	equ	0xFF1
 12359                           postinc0	equ	0xFEE
 12360                           fsr0h	equ	0xFEA
 12361                           fsr0l	equ	0xFE9
 12362                           wreg	equ	0xFE8
 12363                           postinc1	equ	0xFE6
 12364                           postdec1	equ	0xFE5
 12365                           fsr1h	equ	0xFE2
 12366                           fsr1l	equ	0xFE1
 12367                           indf2	equ	0xFDF
 12368                           postinc2	equ	0xFDE
 12369                           postdec2	equ	0xFDD
 12370                           plusw2	equ	0xFDB
 12371                           fsr2h	equ	0xFDA
 12372                           fsr2l	equ	0xFD9
 12373                           status	equ	0xFD8
 12374                           
 12375 ;; *************** function i2_UART_buff_put *****************
 12376 ;; Defined at:
 12377 ;;		line 68 in file "UART.c"
 12378 ;; Parameters:    Size  Location     Type
 12379 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 12380 ;;		 -> output_buffer(206), input_buffer(206), 
 12381 ;;  c               1    8[COMRAM] const unsigned char 
 12382 ;; Auto vars:     Size  Location     Type
 12383 ;;		None
 12384 ;; Return value:  Size  Location     Type
 12385 ;;		None               void
 12386 ;; Registers used:
 12387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12388 ;; Tracked objects:
 12389 ;;		On entry : 0/0
 12390 ;;		On exit  : 0/0
 12391 ;;		Unchanged: 0/0
 12392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12393 ;;      Params:         3       0       0       0       0       0       0
 12394 ;;      Locals:         0       0       0       0       0       0       0
 12395 ;;      Temps:          2       0       0       0       0       0       0
 12396 ;;      Totals:         5       0       0       0       0       0       0
 12397 ;;Total ram usage:        5 bytes
 12398 ;; Hardware stack levels used:    1
 12399 ;; Hardware stack levels required when called:    1
 12400 ;; This function calls:
 12401 ;;		i2_UART_buff_modulo_inc
 12402 ;; This function is called by:
 12403 ;;		_EUSART1_Receive_ISR
 12404 ;; This function uses a non-reentrant model
 12405 ;;
 12406                           
 12407                           	psect	text66
 12408  002540                     __ptext66:
 12409                           	opt stack 0
 12410  002540                     i2_UART_buff_put:
 12411                           	opt stack 21
 12412                           
 12413                           ;UART.c: 69: if (_this->count < 200) {
 12414                           
 12415                           ;incstack = 0
 12416  002540  EE20 F0CC          	lfsr	2,204
 12417  002544  5007               	movf	i2UART_buff_put@_this,w,c
 12418  002546  26D9               	addwf	fsr2l,f,c
 12419  002548  5008               	movf	i2UART_buff_put@_this+1,w,c
 12420  00254A  22DA               	addwfc	fsr2h,f,c
 12421  00254C  0E01               	movlw	1
 12422  00254E  BEDB               	btfsc	plusw2,7,c
 12423  002550  D007               	goto	i2l3941
 12424  002552  0E01               	movlw	1
 12425  002554  50DB               	movf	plusw2,w,c
 12426  002556  E13A               	bnz	i2l3947
 12427  002558  0EC8               	movlw	200
 12428  00255A  5CDE               	subwf	postinc2,w,c
 12429  00255C  B0D8               	btfsc	status,0,c
 12430  00255E  D036               	goto	i2l3947
 12431  002560                     i2l3941:
 12432                           
 12433                           ;UART.c: 70: _this->buf[_this->head] = c;
 12434  002560  EE20 F0C8          	lfsr	2,200
 12435  002564  5007               	movf	i2UART_buff_put@_this,w,c
 12436  002566  26D9               	addwf	fsr2l,f,c
 12437  002568  5008               	movf	i2UART_buff_put@_this+1,w,c
 12438  00256A  22DA               	addwfc	fsr2h,f,c
 12439  00256C  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 12440  002570  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 12441  002574  500A               	movf	??i2_UART_buff_put,w,c
 12442  002576  2407               	addwf	i2UART_buff_put@_this,w,c
 12443  002578  6ED9               	movwf	fsr2l,c
 12444  00257A  500B               	movf	??i2_UART_buff_put+1,w,c
 12445  00257C  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 12446  00257E  6EDA               	movwf	fsr2h,c
 12447  002580  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 12448                           
 12449                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
 12450  002584  EE20 F0C8          	lfsr	2,200
 12451  002588  5007               	movf	i2UART_buff_put@_this,w,c
 12452  00258A  26D9               	addwf	fsr2l,f,c
 12453  00258C  5008               	movf	i2UART_buff_put@_this+1,w,c
 12454  00258E  22DA               	addwfc	fsr2h,f,c
 12455  002590  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12456  002594  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12457  002598  0E00               	movlw	0
 12458  00259A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12459  00259C  0EC8               	movlw	200
 12460  00259E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12461  0025A0  EC47  F01C         	call	i2_UART_buff_modulo_inc	;wreg free
 12462  0025A4  EE20 F0C8          	lfsr	2,200
 12463  0025A8  5007               	movf	i2UART_buff_put@_this,w,c
 12464  0025AA  26D9               	addwf	fsr2l,f,c
 12465  0025AC  5008               	movf	i2UART_buff_put@_this+1,w,c
 12466  0025AE  22DA               	addwfc	fsr2h,f,c
 12467  0025B0  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12468  0025B4  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12469                           
 12470                           ;UART.c: 72: ++_this->count;
 12471  0025B8  EE20 F0CC          	lfsr	2,204
 12472  0025BC  5007               	movf	i2UART_buff_put@_this,w,c
 12473  0025BE  26D9               	addwf	fsr2l,f,c
 12474  0025C0  5008               	movf	i2UART_buff_put@_this+1,w,c
 12475  0025C2  22DA               	addwfc	fsr2h,f,c
 12476  0025C4  2ADE               	incf	postinc2,f,c
 12477  0025C6  0E00               	movlw	0
 12478  0025C8  22DD               	addwfc	postdec2,f,c
 12479                           
 12480                           ;UART.c: 73: } else {
 12481  0025CA  0012               	return	
 12482  0025CC                     i2l3947:
 12483                           
 12484                           ;UART.c: 74: _this->buf[_this->head] = c;
 12485  0025CC  EE20 F0C8          	lfsr	2,200
 12486  0025D0  5007               	movf	i2UART_buff_put@_this,w,c
 12487  0025D2  26D9               	addwf	fsr2l,f,c
 12488  0025D4  5008               	movf	i2UART_buff_put@_this+1,w,c
 12489  0025D6  22DA               	addwfc	fsr2h,f,c
 12490  0025D8  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 12491  0025DC  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 12492  0025E0  500A               	movf	??i2_UART_buff_put,w,c
 12493  0025E2  2407               	addwf	i2UART_buff_put@_this,w,c
 12494  0025E4  6ED9               	movwf	fsr2l,c
 12495  0025E6  500B               	movf	??i2_UART_buff_put+1,w,c
 12496  0025E8  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 12497  0025EA  6EDA               	movwf	fsr2h,c
 12498  0025EC  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 12499                           
 12500                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
 12501  0025F0  EE20 F0C8          	lfsr	2,200
 12502  0025F4  5007               	movf	i2UART_buff_put@_this,w,c
 12503  0025F6  26D9               	addwf	fsr2l,f,c
 12504  0025F8  5008               	movf	i2UART_buff_put@_this+1,w,c
 12505  0025FA  22DA               	addwfc	fsr2h,f,c
 12506  0025FC  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12507  002600  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12508  002604  0E00               	movlw	0
 12509  002606  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12510  002608  0EC8               	movlw	200
 12511  00260A  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12512  00260C  EC47  F01C         	call	i2_UART_buff_modulo_inc	;wreg free
 12513  002610  EE20 F0C8          	lfsr	2,200
 12514  002614  5007               	movf	i2UART_buff_put@_this,w,c
 12515  002616  26D9               	addwf	fsr2l,f,c
 12516  002618  5008               	movf	i2UART_buff_put@_this+1,w,c
 12517  00261A  22DA               	addwfc	fsr2h,f,c
 12518  00261C  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12519  002620  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12520                           
 12521                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 12522  002624  EE20 F0CA          	lfsr	2,202
 12523  002628  5007               	movf	i2UART_buff_put@_this,w,c
 12524  00262A  26D9               	addwf	fsr2l,f,c
 12525  00262C  5008               	movf	i2UART_buff_put@_this+1,w,c
 12526  00262E  22DA               	addwfc	fsr2h,f,c
 12527  002630  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12528  002634  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12529  002638  0E00               	movlw	0
 12530  00263A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12531  00263C  0EC8               	movlw	200
 12532  00263E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12533  002640  EC47  F01C         	call	i2_UART_buff_modulo_inc	;wreg free
 12534  002644  EE20 F0CA          	lfsr	2,202
 12535  002648  5007               	movf	i2UART_buff_put@_this,w,c
 12536  00264A  26D9               	addwf	fsr2l,f,c
 12537  00264C  5008               	movf	i2UART_buff_put@_this+1,w,c
 12538  00264E  22DA               	addwfc	fsr2h,f,c
 12539  002650  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12540  002654  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12541  002658  0012               	return	
 12542  00265A  0012               	return		;funcret
 12543  00265C                     __end_ofi2_UART_buff_put:
 12544                           	opt stack 0
 12545                           tosu	equ	0xFFF
 12546                           tosh	equ	0xFFE
 12547                           tosl	equ	0xFFD
 12548                           pclatu	equ	0xFFB
 12549                           pclath	equ	0xFFA
 12550                           tblptru	equ	0xFF8
 12551                           tblptrh	equ	0xFF7
 12552                           tblptrl	equ	0xFF6
 12553                           tablat	equ	0xFF5
 12554                           prodh	equ	0xFF4
 12555                           prodl	equ	0xFF3
 12556                           intcon	equ	0xFF2
 12557                           intcon2	equ	0xFF1
 12558                           postinc0	equ	0xFEE
 12559                           fsr0h	equ	0xFEA
 12560                           fsr0l	equ	0xFE9
 12561                           wreg	equ	0xFE8
 12562                           postinc1	equ	0xFE6
 12563                           postdec1	equ	0xFE5
 12564                           fsr1h	equ	0xFE2
 12565                           fsr1l	equ	0xFE1
 12566                           indf2	equ	0xFDF
 12567                           postinc2	equ	0xFDE
 12568                           postdec2	equ	0xFDD
 12569                           plusw2	equ	0xFDB
 12570                           fsr2h	equ	0xFDA
 12571                           fsr2l	equ	0xFD9
 12572                           status	equ	0xFD8
 12573                           
 12574 ;; *************** function i2_UART_buff_modulo_inc *****************
 12575 ;; Defined at:
 12576 ;;		line 106 in file "UART.c"
 12577 ;; Parameters:    Size  Location     Type
 12578 ;;  value           2    0[COMRAM] const unsigned int 
 12579 ;;  modulus         2    2[COMRAM] const unsigned int 
 12580 ;; Auto vars:     Size  Location     Type
 12581 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 12582 ;; Return value:  Size  Location     Type
 12583 ;;                  2    0[COMRAM] unsigned int 
 12584 ;; Registers used:
 12585 ;;		wreg, status,2, status,0
 12586 ;; Tracked objects:
 12587 ;;		On entry : 0/0
 12588 ;;		On exit  : 0/0
 12589 ;;		Unchanged: 0/0
 12590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12591 ;;      Params:         4       0       0       0       0       0       0
 12592 ;;      Locals:         2       0       0       0       0       0       0
 12593 ;;      Temps:          0       0       0       0       0       0       0
 12594 ;;      Totals:         6       0       0       0       0       0       0
 12595 ;;Total ram usage:        6 bytes
 12596 ;; Hardware stack levels used:    1
 12597 ;; This function calls:
 12598 ;;		Nothing
 12599 ;; This function is called by:
 12600 ;;		i2_UART_buff_put
 12601 ;;		i2_UART_buff_get
 12602 ;; This function uses a non-reentrant model
 12603 ;;
 12604                           
 12605                           	psect	text67
 12606  00388E                     __ptext67:
 12607                           	opt stack 0
 12608  00388E                     i2_UART_buff_modulo_inc:
 12609                           	opt stack 21
 12610                           
 12611                           ;UART.c: 107: unsigned int my_value = value + 1;
 12612                           
 12613                           ;incstack = 0
 12614  00388E  0E01               	movlw	1
 12615  003890  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 12616  003892  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 12617  003894  0E00               	movlw	0
 12618  003896  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 12619  003898  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 12620                           
 12621                           ;UART.c: 108: if (my_value >= modulus) {
 12622  00389A  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 12623  00389C  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 12624  00389E  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 12625  0038A0  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 12626  0038A2  A0D8               	btfss	status,0,c
 12627  0038A4  D005               	goto	i2l3429
 12628                           
 12629                           ;UART.c: 109: my_value = 0;
 12630  0038A6  0E00               	movlw	0
 12631  0038A8  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 12632  0038AA  0E00               	movlw	0
 12633  0038AC  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 12634  0038AE  D000               	goto	i2l3429
 12635  0038B0                     i2l3429:
 12636                           
 12637                           ;UART.c: 110: }
 12638                           ;UART.c: 111: return (my_value);
 12639  0038B0  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 12640  0038B4  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 12641  0038B8  0012               	return	
 12642  0038BA  0012               	return		;funcret
 12643  0038BC                     __end_ofi2_UART_buff_modulo_inc:
 12644                           	opt stack 0
 12645                           tosu	equ	0xFFF
 12646                           tosh	equ	0xFFE
 12647                           tosl	equ	0xFFD
 12648                           pclatu	equ	0xFFB
 12649                           pclath	equ	0xFFA
 12650                           tblptru	equ	0xFF8
 12651                           tblptrh	equ	0xFF7
 12652                           tblptrl	equ	0xFF6
 12653                           tablat	equ	0xFF5
 12654                           prodh	equ	0xFF4
 12655                           prodl	equ	0xFF3
 12656                           intcon	equ	0xFF2
 12657                           intcon2	equ	0xFF1
 12658                           postinc0	equ	0xFEE
 12659                           fsr0h	equ	0xFEA
 12660                           fsr0l	equ	0xFE9
 12661                           wreg	equ	0xFE8
 12662                           postinc1	equ	0xFE6
 12663                           postdec1	equ	0xFE5
 12664                           fsr1h	equ	0xFE2
 12665                           fsr1l	equ	0xFE1
 12666                           indf2	equ	0xFDF
 12667                           postinc2	equ	0xFDE
 12668                           postdec2	equ	0xFDD
 12669                           plusw2	equ	0xFDB
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674 ;; *************** function _ADC_ISR *****************
 12675 ;; Defined at:
 12676 ;;		line 82 in file "mcc_generated_files/adc.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;		None
 12679 ;; Auto vars:     Size  Location     Type
 12680 ;;  ADC_Result      2   10[COMRAM] int 
 12681 ;; Return value:  Size  Location     Type
 12682 ;;		None               void
 12683 ;; Registers used:
 12684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12685 ;; Tracked objects:
 12686 ;;		On entry : 0/0
 12687 ;;		On exit  : 0/0
 12688 ;;		Unchanged: 0/0
 12689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12690 ;;      Params:         0       0       0       0       0       0       0
 12691 ;;      Locals:         2       0       0       0       0       0       0
 12692 ;;      Temps:          6       0       0       0       0       0       0
 12693 ;;      Totals:         8       0       0       0       0       0       0
 12694 ;;Total ram usage:        8 bytes
 12695 ;; Hardware stack levels used:    1
 12696 ;; Hardware stack levels required when called:    1
 12697 ;; This function calls:
 12698 ;;		_ADC_GetConversionResult
 12699 ;;		_ADC_StartConversion
 12700 ;;		_Set_4051
 12701 ;; This function is called by:
 12702 ;;		_INTERRUPT_InterruptManager
 12703 ;; This function uses a non-reentrant model
 12704 ;;
 12705                           
 12706                           	psect	text68
 12707  000C56                     __ptext68:
 12708                           	opt stack 0
 12709  000C56                     _ADC_ISR:
 12710                           	opt stack 22
 12711                           
 12712                           ;adc.c: 85: PIR1bits.ADIF = 0;
 12713                           
 12714                           ;incstack = 0
 12715  000C56  9C9E               	bcf	3998,6,c	;volatile
 12716                           
 12717                           ;adc.c: 86: int ADC_Result = 0;
 12718  000C58  0E00               	movlw	0
 12719  000C5A  6E0C               	movwf	ADC_ISR@ADC_Result+1,c
 12720  000C5C  0E00               	movlw	0
 12721  000C5E  6E0B               	movwf	ADC_ISR@ADC_Result,c
 12722                           
 12723                           ;adc.c: 87: if (Temp_Aquire){
 12724  000C60  503A               	movf	_Temp_Aquire,w,c
 12725  000C62  B4D8               	btfsc	status,2,c
 12726  000C64  D07A               	goto	i2l4023
 12727                           
 12728                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
 12729  000C66  EC2D  F01D         	call	_ADC_GetConversionResult	;wreg free
 12730  000C6A  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 12731  000C6E  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 12732                           
 12733                           ;adc.c: 90: switch ( ADC_Buffer_Point )
 12734  000C72  D05A               	goto	i2l4019
 12735  000C74                     i2l3993:
 12736                           
 12737                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12738  000C74  90D8               	bcf	status,0,c
 12739  000C76  342D               	rlcf	_ADC_Buffer_Point,w,c
 12740  000C78  6ED9               	movwf	fsr2l,c
 12741  000C7A  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12742  000C7C  6EDA               	movwf	fsr2h,c
 12743  000C7E  0EB9               	movlw	low _Temp_Adc
 12744  000C80  26D9               	addwf	fsr2l,f,c
 12745  000C82  0E00               	movlw	high _Temp_Adc
 12746  000C84  22DA               	addwfc	fsr2h,f,c
 12747  000C86  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12748  000C8A  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12749                           
 12750                           ;adc.c: 94: Set_4051(2);
 12751  000C8E  0E00               	movlw	0
 12752  000C90  6E02               	movwf	Set_4051@Channel+1,c
 12753  000C92  0E02               	movlw	2
 12754  000C94  6E01               	movwf	Set_4051@Channel,c
 12755  000C96  EC84  F01B         	call	_Set_4051	;wreg free
 12756                           
 12757                           ;adc.c: 95: ADC_StartConversion(Temp1);
 12758  000C9A  0E0E               	movlw	14
 12759  000C9C  ECE4  F01C         	call	_ADC_StartConversion
 12760                           
 12761                           ;adc.c: 96: break;
 12762  000CA0  D059               	goto	i2l4021
 12763  000CA2                     i2l3999:
 12764                           
 12765                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12766  000CA2  90D8               	bcf	status,0,c
 12767  000CA4  342D               	rlcf	_ADC_Buffer_Point,w,c
 12768  000CA6  6ED9               	movwf	fsr2l,c
 12769  000CA8  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12770  000CAA  6EDA               	movwf	fsr2h,c
 12771  000CAC  0EB9               	movlw	low _Temp_Adc
 12772  000CAE  26D9               	addwf	fsr2l,f,c
 12773  000CB0  0E00               	movlw	high _Temp_Adc
 12774  000CB2  22DA               	addwfc	fsr2h,f,c
 12775  000CB4  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12776  000CB8  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12777                           
 12778                           ;adc.c: 99: Set_4051(4);
 12779  000CBC  0E00               	movlw	0
 12780  000CBE  6E02               	movwf	Set_4051@Channel+1,c
 12781  000CC0  0E04               	movlw	4
 12782  000CC2  6E01               	movwf	Set_4051@Channel,c
 12783  000CC4  EC84  F01B         	call	_Set_4051	;wreg free
 12784                           
 12785                           ;adc.c: 100: ADC_StartConversion(Temp1);
 12786  000CC8  0E0E               	movlw	14
 12787  000CCA  ECE4  F01C         	call	_ADC_StartConversion
 12788                           
 12789                           ;adc.c: 101: break;
 12790  000CCE  D042               	goto	i2l4021
 12791  000CD0                     i2l4005:
 12792                           
 12793                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12794  000CD0  90D8               	bcf	status,0,c
 12795  000CD2  342D               	rlcf	_ADC_Buffer_Point,w,c
 12796  000CD4  6ED9               	movwf	fsr2l,c
 12797  000CD6  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12798  000CD8  6EDA               	movwf	fsr2h,c
 12799  000CDA  0EB9               	movlw	low _Temp_Adc
 12800  000CDC  26D9               	addwf	fsr2l,f,c
 12801  000CDE  0E00               	movlw	high _Temp_Adc
 12802  000CE0  22DA               	addwfc	fsr2h,f,c
 12803  000CE2  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12804  000CE6  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12805                           
 12806                           ;adc.c: 104: Set_4051(5);
 12807  000CEA  0E00               	movlw	0
 12808  000CEC  6E02               	movwf	Set_4051@Channel+1,c
 12809  000CEE  0E05               	movlw	5
 12810  000CF0  6E01               	movwf	Set_4051@Channel,c
 12811  000CF2  EC84  F01B         	call	_Set_4051	;wreg free
 12812                           
 12813                           ;adc.c: 105: ADC_StartConversion(Temp1);
 12814  000CF6  0E0E               	movlw	14
 12815  000CF8  ECE4  F01C         	call	_ADC_StartConversion
 12816                           
 12817                           ;adc.c: 106: break;
 12818  000CFC  D02B               	goto	i2l4021
 12819  000CFE                     i2l4011:
 12820                           
 12821                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12822  000CFE  90D8               	bcf	status,0,c
 12823  000D00  342D               	rlcf	_ADC_Buffer_Point,w,c
 12824  000D02  6ED9               	movwf	fsr2l,c
 12825  000D04  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12826  000D06  6EDA               	movwf	fsr2h,c
 12827  000D08  0EB9               	movlw	low _Temp_Adc
 12828  000D0A  26D9               	addwf	fsr2l,f,c
 12829  000D0C  0E00               	movlw	high _Temp_Adc
 12830  000D0E  22DA               	addwfc	fsr2h,f,c
 12831  000D10  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12832  000D14  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12833                           
 12834                           ;adc.c: 109: Temp_Aquire = 0;
 12835  000D18  0E00               	movlw	0
 12836  000D1A  6E3A               	movwf	_Temp_Aquire,c
 12837                           
 12838                           ;adc.c: 110: Temp_Done = 1;
 12839  000D1C  0E00               	movlw	0
 12840  000D1E  0100               	movlb	0	; () banked
 12841  000D20  6F89               	movwf	(_Temp_Done+1)& (0+255),b
 12842  000D22  0E01               	movlw	1
 12843  000D24  6F88               	movwf	_Temp_Done& (0+255),b
 12844                           
 12845                           ; BSR set to: 0
 12846                           ;adc.c: 143: }
 12847                           
 12848                           ;adc.c: 112: break;
 12849  000D26  D016               	goto	i2l4021
 12850  000D28                     i2l4019:
 12851  000D28  C02D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 12852  000D2C  C02E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 12853                           
 12854                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12855                           ; Switch size 1, requested type "space"
 12856                           ; Number of cases is 1, Range of values is 0 to 0
 12857                           ; switch strategies available:
 12858                           ; Name         Instructions Cycles
 12859                           ; simple_byte            4     3 (average)
 12860                           ;	Chosen strategy is simple_byte
 12861  000D30  5006               	movf	??_ADC_ISR+1,w,c
 12862  000D32  0A00               	xorlw	0	; case 0
 12863  000D34  A4D8               	btfss	status,2,c
 12864  000D36  D00E               	goto	i2l4021
 12865                           
 12866                           ; Switch size 1, requested type "space"
 12867                           ; Number of cases is 4, Range of values is 0 to 3
 12868                           ; switch strategies available:
 12869                           ; Name         Instructions Cycles
 12870                           ; simple_byte           13     7 (average)
 12871                           ;	Chosen strategy is simple_byte
 12872  000D38  5005               	movf	??_ADC_ISR,w,c
 12873  000D3A  0A00               	xorlw	0	; case 0
 12874  000D3C  B4D8               	btfsc	status,2,c
 12875  000D3E  D79A               	goto	i2l3993
 12876  000D40  0A01               	xorlw	1	; case 1
 12877  000D42  B4D8               	btfsc	status,2,c
 12878  000D44  D7AE               	goto	i2l3999
 12879  000D46  0A03               	xorlw	3	; case 2
 12880  000D48  B4D8               	btfsc	status,2,c
 12881  000D4A  D7C2               	goto	i2l4005
 12882  000D4C  0A01               	xorlw	1	; case 3
 12883  000D4E  B4D8               	btfsc	status,2,c
 12884  000D50  D7D6               	goto	i2l4011
 12885  000D52  D000               	goto	i2l4021
 12886  000D54                     i2l4021:
 12887                           
 12888                           ;adc.c: 144: ADC_Buffer_Point++;
 12889  000D54  4A2D               	infsnz	_ADC_Buffer_Point,f,c
 12890  000D56  2A2E               	incf	_ADC_Buffer_Point+1,f,c
 12891  000D58  D000               	goto	i2l4023
 12892  000D5A                     i2l4023:
 12893                           
 12894                           ;adc.c: 145: }
 12895                           ;adc.c: 146: if (Volt_Aquire){
 12896  000D5A  503B               	movf	_Volt_Aquire,w,c
 12897  000D5C  B4D8               	btfsc	status,2,c
 12898  000D5E  0012               	return	
 12899                           
 12900                           ;adc.c: 148: ADC_Result = ADC_GetConversionResult();
 12901  000D60  EC2D  F01D         	call	_ADC_GetConversionResult	;wreg free
 12902  000D64  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 12903  000D68  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 12904                           
 12905                           ;adc.c: 149: switch ( ADC_Buffer_Point )
 12906  000D6C  D176               	goto	i2l4071
 12907  000D6E                     i2l4027:
 12908                           
 12909                           ;adc.c: 152: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12910  000D6E  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12911  000D72  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12912  000D76  0E00               	movlw	0
 12913  000D78  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12914  000D7A  0EFF               	movlw	255
 12915  000D7C  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12916  000D7E  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12917  000D80  0E60               	movlw	low _Battery_Adc
 12918  000D82  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12919  000D84  0E00               	movlw	high _Battery_Adc
 12920  000D86  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12921  000D88  90D8               	bcf	status,0,c
 12922  000D8A  342D               	rlcf	_ADC_Buffer_Point,w,c
 12923  000D8C  6ED9               	movwf	fsr2l,c
 12924  000D8E  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12925  000D90  6EDA               	movwf	fsr2h,c
 12926  000D92  90D8               	bcf	status,0,c
 12927  000D94  36D9               	rlcf	fsr2l,f,c
 12928  000D96  36DA               	rlcf	fsr2h,f,c
 12929  000D98  5009               	movf	??_ADC_ISR+4,w,c
 12930  000D9A  26D9               	addwf	fsr2l,f,c
 12931  000D9C  500A               	movf	??_ADC_ISR+5,w,c
 12932  000D9E  22DA               	addwfc	fsr2h,f,c
 12933  000DA0  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12934  000DA4  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12935  000DA8  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12936  000DAC  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 12937                           
 12938                           ;adc.c: 153: ADC_StartConversion(Battery2);
 12939  000DB0  0E03               	movlw	3
 12940  000DB2  ECE4  F01C         	call	_ADC_StartConversion
 12941                           
 12942                           ;adc.c: 154: break;
 12943  000DB6  D179               	goto	i2l4073
 12944  000DB8                     i2l4031:
 12945                           
 12946                           ;adc.c: 156: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12947  000DB8  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12948  000DBC  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12949  000DC0  0E00               	movlw	0
 12950  000DC2  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12951  000DC4  0EFF               	movlw	255
 12952  000DC6  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12953  000DC8  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12954  000DCA  0E60               	movlw	low _Battery_Adc
 12955  000DCC  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12956  000DCE  0E00               	movlw	high _Battery_Adc
 12957  000DD0  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12958  000DD2  90D8               	bcf	status,0,c
 12959  000DD4  342D               	rlcf	_ADC_Buffer_Point,w,c
 12960  000DD6  6ED9               	movwf	fsr2l,c
 12961  000DD8  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12962  000DDA  6EDA               	movwf	fsr2h,c
 12963  000DDC  90D8               	bcf	status,0,c
 12964  000DDE  36D9               	rlcf	fsr2l,f,c
 12965  000DE0  36DA               	rlcf	fsr2h,f,c
 12966  000DE2  5009               	movf	??_ADC_ISR+4,w,c
 12967  000DE4  26D9               	addwf	fsr2l,f,c
 12968  000DE6  500A               	movf	??_ADC_ISR+5,w,c
 12969  000DE8  22DA               	addwfc	fsr2h,f,c
 12970  000DEA  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12971  000DEE  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12972  000DF2  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12973  000DF6  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 12974                           
 12975                           ;adc.c: 157: ADC_StartConversion(Battery3);
 12976  000DFA  0E04               	movlw	4
 12977  000DFC  ECE4  F01C         	call	_ADC_StartConversion
 12978                           
 12979                           ;adc.c: 158: break;
 12980  000E00  D154               	goto	i2l4073
 12981  000E02                     i2l4035:
 12982                           
 12983                           ;adc.c: 160: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12984  000E02  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12985  000E06  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12986  000E0A  0E00               	movlw	0
 12987  000E0C  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12988  000E0E  0EFF               	movlw	255
 12989  000E10  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12990  000E12  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12991  000E14  0E60               	movlw	low _Battery_Adc
 12992  000E16  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12993  000E18  0E00               	movlw	high _Battery_Adc
 12994  000E1A  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12995  000E1C  90D8               	bcf	status,0,c
 12996  000E1E  342D               	rlcf	_ADC_Buffer_Point,w,c
 12997  000E20  6ED9               	movwf	fsr2l,c
 12998  000E22  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12999  000E24  6EDA               	movwf	fsr2h,c
 13000  000E26  90D8               	bcf	status,0,c
 13001  000E28  36D9               	rlcf	fsr2l,f,c
 13002  000E2A  36DA               	rlcf	fsr2h,f,c
 13003  000E2C  5009               	movf	??_ADC_ISR+4,w,c
 13004  000E2E  26D9               	addwf	fsr2l,f,c
 13005  000E30  500A               	movf	??_ADC_ISR+5,w,c
 13006  000E32  22DA               	addwfc	fsr2h,f,c
 13007  000E34  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13008  000E38  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13009  000E3C  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13010  000E40  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13011                           
 13012                           ;adc.c: 161: ADC_StartConversion(Battery4);
 13013  000E44  0E05               	movlw	5
 13014  000E46  ECE4  F01C         	call	_ADC_StartConversion
 13015                           
 13016                           ;adc.c: 162: break;
 13017  000E4A  D12F               	goto	i2l4073
 13018  000E4C                     i2l4039:
 13019                           
 13020                           ;adc.c: 164: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13021  000E4C  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13022  000E50  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13023  000E54  0E00               	movlw	0
 13024  000E56  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13025  000E58  0EFF               	movlw	255
 13026  000E5A  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13027  000E5C  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13028  000E5E  0E60               	movlw	low _Battery_Adc
 13029  000E60  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13030  000E62  0E00               	movlw	high _Battery_Adc
 13031  000E64  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13032  000E66  90D8               	bcf	status,0,c
 13033  000E68  342D               	rlcf	_ADC_Buffer_Point,w,c
 13034  000E6A  6ED9               	movwf	fsr2l,c
 13035  000E6C  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13036  000E6E  6EDA               	movwf	fsr2h,c
 13037  000E70  90D8               	bcf	status,0,c
 13038  000E72  36D9               	rlcf	fsr2l,f,c
 13039  000E74  36DA               	rlcf	fsr2h,f,c
 13040  000E76  5009               	movf	??_ADC_ISR+4,w,c
 13041  000E78  26D9               	addwf	fsr2l,f,c
 13042  000E7A  500A               	movf	??_ADC_ISR+5,w,c
 13043  000E7C  22DA               	addwfc	fsr2h,f,c
 13044  000E7E  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13045  000E82  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13046  000E86  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13047  000E8A  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13048                           
 13049                           ;adc.c: 165: ADC_StartConversion(Battery5);
 13050  000E8E  0E18               	movlw	24
 13051  000E90  ECE4  F01C         	call	_ADC_StartConversion
 13052                           
 13053                           ;adc.c: 166: break;
 13054  000E94  D10A               	goto	i2l4073
 13055  000E96                     i2l4043:
 13056                           
 13057                           ;adc.c: 168: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13058  000E96  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13059  000E9A  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13060  000E9E  0E00               	movlw	0
 13061  000EA0  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13062  000EA2  0EFF               	movlw	255
 13063  000EA4  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13064  000EA6  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13065  000EA8  0E60               	movlw	low _Battery_Adc
 13066  000EAA  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13067  000EAC  0E00               	movlw	high _Battery_Adc
 13068  000EAE  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13069  000EB0  90D8               	bcf	status,0,c
 13070  000EB2  342D               	rlcf	_ADC_Buffer_Point,w,c
 13071  000EB4  6ED9               	movwf	fsr2l,c
 13072  000EB6  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13073  000EB8  6EDA               	movwf	fsr2h,c
 13074  000EBA  90D8               	bcf	status,0,c
 13075  000EBC  36D9               	rlcf	fsr2l,f,c
 13076  000EBE  36DA               	rlcf	fsr2h,f,c
 13077  000EC0  5009               	movf	??_ADC_ISR+4,w,c
 13078  000EC2  26D9               	addwf	fsr2l,f,c
 13079  000EC4  500A               	movf	??_ADC_ISR+5,w,c
 13080  000EC6  22DA               	addwfc	fsr2h,f,c
 13081  000EC8  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13082  000ECC  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13083  000ED0  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13084  000ED4  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13085                           
 13086                           ;adc.c: 169: ADC_StartConversion(Battery6);
 13087  000ED8  0E1A               	movlw	26
 13088  000EDA  ECE4  F01C         	call	_ADC_StartConversion
 13089                           
 13090                           ;adc.c: 170: break;
 13091  000EDE  D0E5               	goto	i2l4073
 13092  000EE0                     i2l4047:
 13093                           
 13094                           ;adc.c: 172: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13095  000EE0  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13096  000EE4  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13097  000EE8  0E00               	movlw	0
 13098  000EEA  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13099  000EEC  0EFF               	movlw	255
 13100  000EEE  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13101  000EF0  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13102  000EF2  0E60               	movlw	low _Battery_Adc
 13103  000EF4  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13104  000EF6  0E00               	movlw	high _Battery_Adc
 13105  000EF8  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13106  000EFA  90D8               	bcf	status,0,c
 13107  000EFC  342D               	rlcf	_ADC_Buffer_Point,w,c
 13108  000EFE  6ED9               	movwf	fsr2l,c
 13109  000F00  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13110  000F02  6EDA               	movwf	fsr2h,c
 13111  000F04  90D8               	bcf	status,0,c
 13112  000F06  36D9               	rlcf	fsr2l,f,c
 13113  000F08  36DA               	rlcf	fsr2h,f,c
 13114  000F0A  5009               	movf	??_ADC_ISR+4,w,c
 13115  000F0C  26D9               	addwf	fsr2l,f,c
 13116  000F0E  500A               	movf	??_ADC_ISR+5,w,c
 13117  000F10  22DA               	addwfc	fsr2h,f,c
 13118  000F12  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13119  000F16  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13120  000F1A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13121  000F1E  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13122                           
 13123                           ;adc.c: 173: ADC_StartConversion(Battery7);
 13124  000F22  0E1B               	movlw	27
 13125  000F24  ECE4  F01C         	call	_ADC_StartConversion
 13126                           
 13127                           ;adc.c: 174: break;
 13128  000F28  D0C0               	goto	i2l4073
 13129  000F2A                     i2l4051:
 13130                           
 13131                           ;adc.c: 176: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13132  000F2A  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13133  000F2E  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13134  000F32  0E00               	movlw	0
 13135  000F34  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13136  000F36  0EFF               	movlw	255
 13137  000F38  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13138  000F3A  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13139  000F3C  0E60               	movlw	low _Battery_Adc
 13140  000F3E  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13141  000F40  0E00               	movlw	high _Battery_Adc
 13142  000F42  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13143  000F44  90D8               	bcf	status,0,c
 13144  000F46  342D               	rlcf	_ADC_Buffer_Point,w,c
 13145  000F48  6ED9               	movwf	fsr2l,c
 13146  000F4A  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13147  000F4C  6EDA               	movwf	fsr2h,c
 13148  000F4E  90D8               	bcf	status,0,c
 13149  000F50  36D9               	rlcf	fsr2l,f,c
 13150  000F52  36DA               	rlcf	fsr2h,f,c
 13151  000F54  5009               	movf	??_ADC_ISR+4,w,c
 13152  000F56  26D9               	addwf	fsr2l,f,c
 13153  000F58  500A               	movf	??_ADC_ISR+5,w,c
 13154  000F5A  22DA               	addwfc	fsr2h,f,c
 13155  000F5C  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13156  000F60  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13157  000F64  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13158  000F68  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13159                           
 13160                           ;adc.c: 177: ADC_StartConversion(Battery8);
 13161  000F6C  0E08               	movlw	8
 13162  000F6E  ECE4  F01C         	call	_ADC_StartConversion
 13163                           
 13164                           ;adc.c: 178: break;
 13165  000F72  D09B               	goto	i2l4073
 13166  000F74                     i2l4055:
 13167                           
 13168                           ;adc.c: 180: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13169  000F74  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13170  000F78  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13171  000F7C  0E00               	movlw	0
 13172  000F7E  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13173  000F80  0EFF               	movlw	255
 13174  000F82  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13175  000F84  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13176  000F86  0E60               	movlw	low _Battery_Adc
 13177  000F88  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13178  000F8A  0E00               	movlw	high _Battery_Adc
 13179  000F8C  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13180  000F8E  90D8               	bcf	status,0,c
 13181  000F90  342D               	rlcf	_ADC_Buffer_Point,w,c
 13182  000F92  6ED9               	movwf	fsr2l,c
 13183  000F94  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13184  000F96  6EDA               	movwf	fsr2h,c
 13185  000F98  90D8               	bcf	status,0,c
 13186  000F9A  36D9               	rlcf	fsr2l,f,c
 13187  000F9C  36DA               	rlcf	fsr2h,f,c
 13188  000F9E  5009               	movf	??_ADC_ISR+4,w,c
 13189  000FA0  26D9               	addwf	fsr2l,f,c
 13190  000FA2  500A               	movf	??_ADC_ISR+5,w,c
 13191  000FA4  22DA               	addwfc	fsr2h,f,c
 13192  000FA6  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13193  000FAA  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13194  000FAE  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13195  000FB2  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13196                           
 13197                           ;adc.c: 181: ADC_StartConversion(Battery9);
 13198  000FB6  0E0B               	movlw	11
 13199  000FB8  ECE4  F01C         	call	_ADC_StartConversion
 13200                           
 13201                           ;adc.c: 182: break;
 13202  000FBC  D076               	goto	i2l4073
 13203  000FBE                     i2l4059:
 13204                           
 13205                           ;adc.c: 184: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13206  000FBE  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13207  000FC2  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13208  000FC6  0E00               	movlw	0
 13209  000FC8  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13210  000FCA  0EFF               	movlw	255
 13211  000FCC  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13212  000FCE  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13213  000FD0  0E60               	movlw	low _Battery_Adc
 13214  000FD2  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13215  000FD4  0E00               	movlw	high _Battery_Adc
 13216  000FD6  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13217  000FD8  90D8               	bcf	status,0,c
 13218  000FDA  342D               	rlcf	_ADC_Buffer_Point,w,c
 13219  000FDC  6ED9               	movwf	fsr2l,c
 13220  000FDE  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13221  000FE0  6EDA               	movwf	fsr2h,c
 13222  000FE2  90D8               	bcf	status,0,c
 13223  000FE4  36D9               	rlcf	fsr2l,f,c
 13224  000FE6  36DA               	rlcf	fsr2h,f,c
 13225  000FE8  5009               	movf	??_ADC_ISR+4,w,c
 13226  000FEA  26D9               	addwf	fsr2l,f,c
 13227  000FEC  500A               	movf	??_ADC_ISR+5,w,c
 13228  000FEE  22DA               	addwfc	fsr2h,f,c
 13229  000FF0  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13230  000FF4  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13231  000FF8  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13232  000FFC  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13233                           
 13234                           ;adc.c: 185: ADC_StartConversion(Battery10);
 13235  001000  0E0D               	movlw	13
 13236  001002  ECE4  F01C         	call	_ADC_StartConversion
 13237                           
 13238                           ;adc.c: 186: break;
 13239  001006  D051               	goto	i2l4073
 13240  001008                     i2l4063:
 13241                           
 13242                           ;adc.c: 188: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13243  001008  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13244  00100C  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13245  001010  0E00               	movlw	0
 13246  001012  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13247  001014  0EFF               	movlw	255
 13248  001016  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13249  001018  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13250  00101A  0E60               	movlw	low _Battery_Adc
 13251  00101C  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13252  00101E  0E00               	movlw	high _Battery_Adc
 13253  001020  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13254  001022  90D8               	bcf	status,0,c
 13255  001024  342D               	rlcf	_ADC_Buffer_Point,w,c
 13256  001026  6ED9               	movwf	fsr2l,c
 13257  001028  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13258  00102A  6EDA               	movwf	fsr2h,c
 13259  00102C  90D8               	bcf	status,0,c
 13260  00102E  36D9               	rlcf	fsr2l,f,c
 13261  001030  36DA               	rlcf	fsr2h,f,c
 13262  001032  5009               	movf	??_ADC_ISR+4,w,c
 13263  001034  26D9               	addwf	fsr2l,f,c
 13264  001036  500A               	movf	??_ADC_ISR+5,w,c
 13265  001038  22DA               	addwfc	fsr2h,f,c
 13266  00103A  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13267  00103E  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13268  001042  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13269  001046  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13270                           
 13271                           ;adc.c: 189: Volt_Aquire = 0;
 13272  00104A  0E00               	movlw	0
 13273  00104C  6E3B               	movwf	_Volt_Aquire,c
 13274                           
 13275                           ;adc.c: 190: Volt_Done = 1;
 13276  00104E  0E00               	movlw	0
 13277  001050  0100               	movlb	0	; () banked
 13278  001052  6F8B               	movwf	(_Volt_Done+1)& (0+255),b
 13279  001054  0E01               	movlw	1
 13280  001056  6F8A               	movwf	_Volt_Done& (0+255),b
 13281                           
 13282                           ; BSR set to: 0
 13283                           ;adc.c: 192: }
 13284                           
 13285                           ;adc.c: 191: break;
 13286  001058  D028               	goto	i2l4073
 13287  00105A                     i2l4071:
 13288  00105A  C02D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 13289  00105E  C02E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 13290                           
 13291                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13292                           ; Switch size 1, requested type "space"
 13293                           ; Number of cases is 1, Range of values is 0 to 0
 13294                           ; switch strategies available:
 13295                           ; Name         Instructions Cycles
 13296                           ; simple_byte            4     3 (average)
 13297                           ;	Chosen strategy is simple_byte
 13298  001062  5006               	movf	??_ADC_ISR+1,w,c
 13299  001064  0A00               	xorlw	0	; case 0
 13300  001066  A4D8               	btfss	status,2,c
 13301  001068  D020               	goto	i2l4073
 13302                           
 13303                           ; Switch size 1, requested type "space"
 13304                           ; Number of cases is 10, Range of values is 0 to 9
 13305                           ; switch strategies available:
 13306                           ; Name         Instructions Cycles
 13307                           ; simple_byte           31    16 (average)
 13308                           ;	Chosen strategy is simple_byte
 13309  00106A  5005               	movf	??_ADC_ISR,w,c
 13310  00106C  0A00               	xorlw	0	; case 0
 13311  00106E  B4D8               	btfsc	status,2,c
 13312  001070  D67E               	goto	i2l4027
 13313  001072  0A01               	xorlw	1	; case 1
 13314  001074  B4D8               	btfsc	status,2,c
 13315  001076  D6A0               	goto	i2l4031
 13316  001078  0A03               	xorlw	3	; case 2
 13317  00107A  B4D8               	btfsc	status,2,c
 13318  00107C  D6C2               	goto	i2l4035
 13319  00107E  0A01               	xorlw	1	; case 3
 13320  001080  B4D8               	btfsc	status,2,c
 13321  001082  D6E4               	goto	i2l4039
 13322  001084  0A07               	xorlw	7	; case 4
 13323  001086  B4D8               	btfsc	status,2,c
 13324  001088  D706               	goto	i2l4043
 13325  00108A  0A01               	xorlw	1	; case 5
 13326  00108C  B4D8               	btfsc	status,2,c
 13327  00108E  D728               	goto	i2l4047
 13328  001090  0A03               	xorlw	3	; case 6
 13329  001092  B4D8               	btfsc	status,2,c
 13330  001094  D74A               	goto	i2l4051
 13331  001096  0A01               	xorlw	1	; case 7
 13332  001098  B4D8               	btfsc	status,2,c
 13333  00109A  D76C               	goto	i2l4055
 13334  00109C  0A0F               	xorlw	15	; case 8
 13335  00109E  B4D8               	btfsc	status,2,c
 13336  0010A0  D78E               	goto	i2l4059
 13337  0010A2  0A01               	xorlw	1	; case 9
 13338  0010A4  B4D8               	btfsc	status,2,c
 13339  0010A6  D7B0               	goto	i2l4063
 13340  0010A8  D000               	goto	i2l4073
 13341  0010AA                     i2l4073:
 13342                           
 13343                           ;adc.c: 193: ADC_Buffer_Point++;
 13344  0010AA  4A2D               	infsnz	_ADC_Buffer_Point,f,c
 13345  0010AC  2A2E               	incf	_ADC_Buffer_Point+1,f,c
 13346  0010AE  0012               	return	
 13347  0010B0  0012               	return		;funcret
 13348  0010B2                     __end_of_ADC_ISR:
 13349                           	opt stack 0
 13350                           tosu	equ	0xFFF
 13351                           tosh	equ	0xFFE
 13352                           tosl	equ	0xFFD
 13353                           pclatu	equ	0xFFB
 13354                           pclath	equ	0xFFA
 13355                           tblptru	equ	0xFF8
 13356                           tblptrh	equ	0xFF7
 13357                           tblptrl	equ	0xFF6
 13358                           tablat	equ	0xFF5
 13359                           prodh	equ	0xFF4
 13360                           prodl	equ	0xFF3
 13361                           intcon	equ	0xFF2
 13362                           intcon2	equ	0xFF1
 13363                           postinc0	equ	0xFEE
 13364                           fsr0h	equ	0xFEA
 13365                           fsr0l	equ	0xFE9
 13366                           wreg	equ	0xFE8
 13367                           postinc1	equ	0xFE6
 13368                           postdec1	equ	0xFE5
 13369                           fsr1h	equ	0xFE2
 13370                           fsr1l	equ	0xFE1
 13371                           indf2	equ	0xFDF
 13372                           postinc2	equ	0xFDE
 13373                           postdec2	equ	0xFDD
 13374                           plusw2	equ	0xFDB
 13375                           fsr2h	equ	0xFDA
 13376                           fsr2l	equ	0xFD9
 13377                           status	equ	0xFD8
 13378                           
 13379 ;; *************** function _Set_4051 *****************
 13380 ;; Defined at:
 13381 ;;		line 15 in file "Functions.c"
 13382 ;; Parameters:    Size  Location     Type
 13383 ;;  Channel         2    0[COMRAM] int 
 13384 ;; Auto vars:     Size  Location     Type
 13385 ;;		None
 13386 ;; Return value:  Size  Location     Type
 13387 ;;		None               void
 13388 ;; Registers used:
 13389 ;;		wreg, status,2, status,0
 13390 ;; Tracked objects:
 13391 ;;		On entry : 0/0
 13392 ;;		On exit  : 0/0
 13393 ;;		Unchanged: 0/0
 13394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13395 ;;      Params:         2       0       0       0       0       0       0
 13396 ;;      Locals:         0       0       0       0       0       0       0
 13397 ;;      Temps:          2       0       0       0       0       0       0
 13398 ;;      Totals:         4       0       0       0       0       0       0
 13399 ;;Total ram usage:        4 bytes
 13400 ;; Hardware stack levels used:    1
 13401 ;; This function calls:
 13402 ;;		Nothing
 13403 ;; This function is called by:
 13404 ;;		_ADC_ISR
 13405 ;;		_Temp_Read
 13406 ;; This function uses a non-reentrant model
 13407 ;;
 13408                           
 13409                           	psect	text69
 13410  003708                     __ptext69:
 13411                           	opt stack 0
 13412  003708                     _Set_4051:
 13413                           	opt stack 21
 13414                           
 13415                           ;Functions.c: 17: if (Channel & 0x01)
 13416                           
 13417                           ;incstack = 0
 13418  003708  A001               	btfss	Set_4051@Channel,0,c
 13419  00370A  D002               	goto	i2l3259
 13420                           
 13421                           ;Functions.c: 18: {
 13422                           ;Functions.c: 19: do { LATA6 = ~LATA6; } while(0);
 13423  00370C  7C89               	btg	3977,6,c	;volatile
 13424  00370E  D000               	goto	i2l3259
 13425  003710                     i2l3259:
 13426                           
 13427                           ;Functions.c: 20: }
 13428                           ;Functions.c: 21: if ((Channel>>1) & 0x01)
 13429  003710  3402               	rlcf	Set_4051@Channel+1,w,c
 13430  003712  3002               	rrcf	Set_4051@Channel+1,w,c
 13431  003714  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 13432  003716  3001               	rrcf	Set_4051@Channel,w,c
 13433  003718  6E03               	movwf	??_Set_4051& (0+255),c
 13434  00371A  A003               	btfss	??_Set_4051,0,c
 13435  00371C  D002               	goto	i2l3261
 13436                           
 13437                           ;Functions.c: 22: {
 13438                           ;Functions.c: 23: do { LATC0 = ~LATC0; } while(0);
 13439  00371E  708B               	btg	3979,0,c	;volatile
 13440  003720  D000               	goto	i2l3261
 13441  003722                     i2l3261:
 13442                           
 13443                           ;Functions.c: 24: }
 13444                           ;Functions.c: 25: if ((Channel>>2) & 0x01)
 13445  003722  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 13446  003726  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 13447  00372A  3404               	rlcf	??_Set_4051+1,w,c
 13448  00372C  3204               	rrcf	??_Set_4051+1,f,c
 13449  00372E  3203               	rrcf	??_Set_4051,f,c
 13450  003730  3404               	rlcf	??_Set_4051+1,w,c
 13451  003732  3204               	rrcf	??_Set_4051+1,f,c
 13452  003734  3203               	rrcf	??_Set_4051,f,c
 13453  003736  A003               	btfss	??_Set_4051,0,c
 13454  003738  0012               	return	
 13455                           
 13456                           ;Functions.c: 26: {
 13457                           ;Functions.c: 27: do { LATC1 = ~LATC1; } while(0);
 13458  00373A  728B               	btg	3979,1,c	;volatile
 13459  00373C  0012               	return	
 13460  00373E  0012               	return		;funcret
 13461  003740                     __end_of_Set_4051:
 13462                           	opt stack 0
 13463                           tosu	equ	0xFFF
 13464                           tosh	equ	0xFFE
 13465                           tosl	equ	0xFFD
 13466                           pclatu	equ	0xFFB
 13467                           pclath	equ	0xFFA
 13468                           tblptru	equ	0xFF8
 13469                           tblptrh	equ	0xFF7
 13470                           tblptrl	equ	0xFF6
 13471                           tablat	equ	0xFF5
 13472                           prodh	equ	0xFF4
 13473                           prodl	equ	0xFF3
 13474                           intcon	equ	0xFF2
 13475                           intcon2	equ	0xFF1
 13476                           postinc0	equ	0xFEE
 13477                           fsr0h	equ	0xFEA
 13478                           fsr0l	equ	0xFE9
 13479                           wreg	equ	0xFE8
 13480                           postinc1	equ	0xFE6
 13481                           postdec1	equ	0xFE5
 13482                           fsr1h	equ	0xFE2
 13483                           fsr1l	equ	0xFE1
 13484                           indf2	equ	0xFDF
 13485                           postinc2	equ	0xFDE
 13486                           postdec2	equ	0xFDD
 13487                           plusw2	equ	0xFDB
 13488                           fsr2h	equ	0xFDA
 13489                           fsr2l	equ	0xFD9
 13490                           status	equ	0xFD8
 13491                           
 13492 ;; *************** function _ADC_StartConversion *****************
 13493 ;; Defined at:
 13494 ;;		line 36 in file "mcc_generated_files/adc.c"
 13495 ;; Parameters:    Size  Location     Type
 13496 ;;  channel         1    wreg     enum E8837
 13497 ;; Auto vars:     Size  Location     Type
 13498 ;;  channel         1    1[COMRAM] enum E8837
 13499 ;; Return value:  Size  Location     Type
 13500 ;;		None               void
 13501 ;; Registers used:
 13502 ;;		wreg, status,2, status,0
 13503 ;; Tracked objects:
 13504 ;;		On entry : 0/0
 13505 ;;		On exit  : 0/0
 13506 ;;		Unchanged: 0/0
 13507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13508 ;;      Params:         0       0       0       0       0       0       0
 13509 ;;      Locals:         1       0       0       0       0       0       0
 13510 ;;      Temps:          1       0       0       0       0       0       0
 13511 ;;      Totals:         2       0       0       0       0       0       0
 13512 ;;Total ram usage:        2 bytes
 13513 ;; Hardware stack levels used:    1
 13514 ;; This function calls:
 13515 ;;		Nothing
 13516 ;; This function is called by:
 13517 ;;		_ADC_ISR
 13518 ;;		_Battery_Read
 13519 ;;		_Temp_Read
 13520 ;; This function uses a non-reentrant model
 13521 ;;
 13522                           
 13523                           	psect	text70
 13524  0039C8                     __ptext70:
 13525                           	opt stack 0
 13526  0039C8                     _ADC_StartConversion:
 13527                           	opt stack 21
 13528                           
 13529                           ;incstack = 0
 13530                           ;ADC_StartConversion@channel stored from wreg
 13531  0039C8  6E02               	movwf	ADC_StartConversion@channel,c
 13532                           
 13533                           ;adc.c: 39: ADCON0bits.CHS = channel;
 13534  0039CA  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 13535  0039CE  4601               	rlncf	??_ADC_StartConversion,f,c
 13536  0039D0  4601               	rlncf	??_ADC_StartConversion,f,c
 13537  0039D2  50C2               	movf	4034,w,c	;volatile
 13538  0039D4  1801               	xorwf	??_ADC_StartConversion,w,c
 13539  0039D6  0B83               	andlw	-125
 13540  0039D8  1801               	xorwf	??_ADC_StartConversion,w,c
 13541  0039DA  6EC2               	movwf	4034,c	;volatile
 13542                           
 13543                           ;adc.c: 42: ADCON0bits.ADON = 1;
 13544  0039DC  80C2               	bsf	4034,0,c	;volatile
 13545                           
 13546                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
 13547  0039DE  82C2               	bsf	4034,1,c	;volatile
 13548  0039E0  0012               	return		;funcret
 13549  0039E2                     __end_of_ADC_StartConversion:
 13550                           	opt stack 0
 13551                           tosu	equ	0xFFF
 13552                           tosh	equ	0xFFE
 13553                           tosl	equ	0xFFD
 13554                           pclatu	equ	0xFFB
 13555                           pclath	equ	0xFFA
 13556                           tblptru	equ	0xFF8
 13557                           tblptrh	equ	0xFF7
 13558                           tblptrl	equ	0xFF6
 13559                           tablat	equ	0xFF5
 13560                           prodh	equ	0xFF4
 13561                           prodl	equ	0xFF3
 13562                           intcon	equ	0xFF2
 13563                           intcon2	equ	0xFF1
 13564                           postinc0	equ	0xFEE
 13565                           fsr0h	equ	0xFEA
 13566                           fsr0l	equ	0xFE9
 13567                           wreg	equ	0xFE8
 13568                           postinc1	equ	0xFE6
 13569                           postdec1	equ	0xFE5
 13570                           fsr1h	equ	0xFE2
 13571                           fsr1l	equ	0xFE1
 13572                           indf2	equ	0xFDF
 13573                           postinc2	equ	0xFDE
 13574                           postdec2	equ	0xFDD
 13575                           plusw2	equ	0xFDB
 13576                           fsr2h	equ	0xFDA
 13577                           fsr2l	equ	0xFD9
 13578                           status	equ	0xFD8
 13579                           
 13580 ;; *************** function _ADC_GetConversionResult *****************
 13581 ;; Defined at:
 13582 ;;		line 55 in file "mcc_generated_files/adc.c"
 13583 ;; Parameters:    Size  Location     Type
 13584 ;;		None
 13585 ;; Auto vars:     Size  Location     Type
 13586 ;;		None
 13587 ;; Return value:  Size  Location     Type
 13588 ;;                  2    0[COMRAM] unsigned int 
 13589 ;; Registers used:
 13590 ;;		wreg, status,2, status,0
 13591 ;; Tracked objects:
 13592 ;;		On entry : 0/0
 13593 ;;		On exit  : 0/0
 13594 ;;		Unchanged: 0/0
 13595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13596 ;;      Params:         2       0       0       0       0       0       0
 13597 ;;      Locals:         0       0       0       0       0       0       0
 13598 ;;      Temps:          2       0       0       0       0       0       0
 13599 ;;      Totals:         4       0       0       0       0       0       0
 13600 ;;Total ram usage:        4 bytes
 13601 ;; Hardware stack levels used:    1
 13602 ;; This function calls:
 13603 ;;		Nothing
 13604 ;; This function is called by:
 13605 ;;		_ADC_ISR
 13606 ;; This function uses a non-reentrant model
 13607 ;;
 13608                           
 13609                           	psect	text71
 13610  003A5A                     __ptext71:
 13611                           	opt stack 0
 13612  003A5A                     _ADC_GetConversionResult:
 13613                           	opt stack 22
 13614                           
 13615                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
 13616                           
 13617                           ;incstack = 0
 13618  003A5A  50C4               	movf	4036,w,c	;volatile
 13619  003A5C  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 13620  003A5E  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 13621  003A60  50C3               	movf	4035,w,c	;volatile
 13622  003A62  2403               	addwf	??_ADC_GetConversionResult,w,c
 13623  003A64  6E01               	movwf	?_ADC_GetConversionResult,c
 13624  003A66  0E00               	movlw	0
 13625  003A68  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 13626  003A6A  6E02               	movwf	?_ADC_GetConversionResult+1,c
 13627  003A6C  0012               	return	
 13628  003A6E  0012               	return		;funcret
 13629  003A70                     __end_of_ADC_GetConversionResult:
 13630                           	opt stack 0
 13631                           tosu	equ	0xFFF
 13632                           tosh	equ	0xFFE
 13633                           tosl	equ	0xFFD
 13634                           pclatu	equ	0xFFB
 13635                           pclath	equ	0xFFA
 13636                           tblptru	equ	0xFF8
 13637                           tblptrh	equ	0xFF7
 13638                           tblptrl	equ	0xFF6
 13639                           tablat	equ	0xFF5
 13640                           prodh	equ	0xFF4
 13641                           prodl	equ	0xFF3
 13642                           intcon	equ	0xFF2
 13643                           intcon2	equ	0xFF1
 13644                           postinc0	equ	0xFEE
 13645                           fsr0h	equ	0xFEA
 13646                           fsr0l	equ	0xFE9
 13647                           wreg	equ	0xFE8
 13648                           postinc1	equ	0xFE6
 13649                           postdec1	equ	0xFE5
 13650                           fsr1h	equ	0xFE2
 13651                           fsr1l	equ	0xFE1
 13652                           indf2	equ	0xFDF
 13653                           postinc2	equ	0xFDE
 13654                           postdec2	equ	0xFDD
 13655                           plusw2	equ	0xFDB
 13656                           fsr2h	equ	0xFDA
 13657                           fsr2l	equ	0xFD9
 13658                           status	equ	0xFD8
 13659                           tosu	equ	0xFFF
 13660                           tosh	equ	0xFFE
 13661                           tosl	equ	0xFFD
 13662                           pclatu	equ	0xFFB
 13663                           pclath	equ	0xFFA
 13664                           tblptru	equ	0xFF8
 13665                           tblptrh	equ	0xFF7
 13666                           tblptrl	equ	0xFF6
 13667                           tablat	equ	0xFF5
 13668                           prodh	equ	0xFF4
 13669                           prodl	equ	0xFF3
 13670                           intcon	equ	0xFF2
 13671                           intcon2	equ	0xFF1
 13672                           postinc0	equ	0xFEE
 13673                           fsr0h	equ	0xFEA
 13674                           fsr0l	equ	0xFE9
 13675                           wreg	equ	0xFE8
 13676                           postinc1	equ	0xFE6
 13677                           postdec1	equ	0xFE5
 13678                           fsr1h	equ	0xFE2
 13679                           fsr1l	equ	0xFE1
 13680                           indf2	equ	0xFDF
 13681                           postinc2	equ	0xFDE
 13682                           postdec2	equ	0xFDD
 13683                           plusw2	equ	0xFDB
 13684                           fsr2h	equ	0xFDA
 13685                           fsr2l	equ	0xFD9
 13686                           status	equ	0xFD8
 13687                           
 13688                           	psect	text72
 13689  000000                     __ptext72:
 13690                           	opt stack 0
 13691                           tosu	equ	0xFFF
 13692                           tosh	equ	0xFFE
 13693                           tosl	equ	0xFFD
 13694                           pclatu	equ	0xFFB
 13695                           pclath	equ	0xFFA
 13696                           tblptru	equ	0xFF8
 13697                           tblptrh	equ	0xFF7
 13698                           tblptrl	equ	0xFF6
 13699                           tablat	equ	0xFF5
 13700                           prodh	equ	0xFF4
 13701                           prodl	equ	0xFF3
 13702                           intcon	equ	0xFF2
 13703                           intcon2	equ	0xFF1
 13704                           postinc0	equ	0xFEE
 13705                           fsr0h	equ	0xFEA
 13706                           fsr0l	equ	0xFE9
 13707                           wreg	equ	0xFE8
 13708                           postinc1	equ	0xFE6
 13709                           postdec1	equ	0xFE5
 13710                           fsr1h	equ	0xFE2
 13711                           fsr1l	equ	0xFE1
 13712                           indf2	equ	0xFDF
 13713                           postinc2	equ	0xFDE
 13714                           postdec2	equ	0xFDD
 13715                           plusw2	equ	0xFDB
 13716                           fsr2h	equ	0xFDA
 13717                           fsr2l	equ	0xFD9
 13718                           status	equ	0xFD8
 13719                           
 13720                           	psect	rparam
 13721  0000                     tosu	equ	0xFFF
 13722                           tosh	equ	0xFFE
 13723                           tosl	equ	0xFFD
 13724                           pclatu	equ	0xFFB
 13725                           pclath	equ	0xFFA
 13726                           tblptru	equ	0xFF8
 13727                           tblptrh	equ	0xFF7
 13728                           tblptrl	equ	0xFF6
 13729                           tablat	equ	0xFF5
 13730                           prodh	equ	0xFF4
 13731                           prodl	equ	0xFF3
 13732                           intcon	equ	0xFF2
 13733                           intcon2	equ	0xFF1
 13734                           postinc0	equ	0xFEE
 13735                           fsr0h	equ	0xFEA
 13736                           fsr0l	equ	0xFE9
 13737                           wreg	equ	0xFE8
 13738                           postinc1	equ	0xFE6
 13739                           postdec1	equ	0xFE5
 13740                           fsr1h	equ	0xFE2
 13741                           fsr1l	equ	0xFE1
 13742                           indf2	equ	0xFDF
 13743                           postinc2	equ	0xFDE
 13744                           postdec2	equ	0xFDD
 13745                           plusw2	equ	0xFDB
 13746                           fsr2h	equ	0xFDA
 13747                           fsr2l	equ	0xFD9
 13748                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        43
    BSS         1051
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      69
    BANK0           160     51     160
    BANK1           256     22     164
    BANK2           256      0     206
    BANK3           256      0     200
    BANK4           256      0     206
    BANK5           256      0     206

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK1[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK4[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1131(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK3[200]), ring_buffer(BANK2[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK2[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK1[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK1[40]), 


Critical Paths under _main in COMRAM

    _main->_Battery_Fault
    _main->_Temp_Fault
    _updateComms->_receiveData
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _receiveData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Tempeture_Get->___wmul
    _Temp_Fault->___ftge
    ___awtoft->___awdiv
    ___awtoft->___ftpack
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___altoft
    ___ftmul->___altoft
    ___ftdiv->___altoft
    ___ftadd->___altoft
    ___altoft->___ftpack
    _Battery_Filter->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _Temp_Read->_Set_4051
    _Battery_Read->_ADC_StartConversion
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _updateComms->_ToSend
    _receiveData->_CRCcheck
    ___fttol->___ftmul
    _ToSend->___fttol
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _SYSTEM_Initialize->_begin
    _Battery_Convert->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Temp_Convert
    _Temp_Convert->_log
    _log->_eval_poly

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  144157
                                             17 BANK1      5     0      5
                    _Battery_Convert
                      _Battery_Fault
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   33233
                        _Battery_Get
                              _Delay
                      _Tempeture_Get
                             _ToSend
                            ___ftmul
                            ___fttol
                        _receiveData
                           _sendData
 ---------------------------------------------------------------------------------
 (2) _sendData                                             5     5      0    5297
                                             38 COMRAM     5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (3) _crcBufS_put                                          7     2      5     564
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_flush                            4     0      4     910
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                             38 COMRAM     6     6      0
                                              7 BANK0     12    12      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (3) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (4) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              0 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1148
                                             30 BANK0     15    11      4
                        _Battery_Get (ARG)
                      _Tempeture_Get (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ToSend                                               3     1      2    2752
                                             45 BANK0      3     1      2
                        _Battery_Get (ARG)
            _FastTransfer_buffer_put
                      _Tempeture_Get (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Tempeture_Get                                        3     0      3    3343
                                             32 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Delay                                                9     5      4     238
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    4084
                                             41 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                         9     9      0   70558
                                              8 BANK1      9     9      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   29066
                                              3 BANK1      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     476
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   14442
                                             42 BANK0      9     2      7
                                              0 BANK1      3     3      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2811
                                             34 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5459
                                             42 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   14248
                                             42 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2747
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1925
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1061
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     822
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     822
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     672
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    5744
                                              0 BANK0      7     7      0
                        _Battery_Get
                          _SetBypass
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypass                                            6     2      4     649
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    3882
                                             32 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    4115
                                             41 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     968
                                             32 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   23676
                                             42 BANK0      4     4      0
                     _Battery_Filter
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5858
                                             15 BANK0     15     9      6
                        _Battery_Get (ARG)
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3520
                                              0 BANK0     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5095
                                             30 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2805
                                             34 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2524
                                             26 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0    3264
                                             32 COMRAM     2     2      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3004
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    2230
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0     366
                       _Battery_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (9) _Temp_Read                                            0     0      0     344
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (9) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              8     8      0     655
                                              4 COMRAM     8     8      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (10) _Set_4051                                            4     2      2     322
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _ADC_StartConversion                                 2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___wmul
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       _Battery_Get (ARG)
         ___wmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___wmul
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _RunBypas
     _Battery_Get
       ___wmul
     _SetBypass
     ___ftge
       ___wmul (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _begin
       ___awdiv
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       _Battery_Get (ARG)
         ___wmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___wmul
     _log
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             _Battery_Get (ARG)
               ___wmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _updateComms
     _Battery_Get
       ___wmul
     _Delay
     _Tempeture_Get
       ___wmul
     _ToSend
       _Battery_Get (ARG)
         ___wmul
       _FastTransfer_buffer_put (ARG)
         _FastTransfer_buffer_modulo_inc
       _Tempeture_Get (ARG)
         ___wmul
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         _Battery_Get (ARG)
           ___wmul
         _Tempeture_Get (ARG)
           ___wmul
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
     ___ftmul
       _Battery_Get (ARG)
         ___wmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___fttol
       _Battery_Get (ARG)
         ___wmul
       _Tempeture_Get (ARG)
         ___wmul
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _sendData
       Absolute function(Fake) *
       _CRC8 *
       _FastTransfer_buffer_flush *
         _memset
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
       _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Temp_Read
       _ADC_StartConversion
       _Set_4051

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0      CE      15       80.5%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100     16      A4       6       64.1%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     33      A0       4      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4BB       9        0.0%
DATA                 0      0     4BB      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Jun 19 05:12:59 2015

      __end_of_FastTransfer_buffer_flush 3462                   i2_UART_buff_modulo_inc 388E  
                           ___altoft@exp 002B                             _rx_array_inx 0041  
                          ___altoft@sign 002C                             ___awdiv@sign 0020  
                    ___wmul@multiplicand 001D                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                             ___ftadd@exp1 00EA  
                           ___ftadd@exp2 00E9                             ___ftadd@sign 00E8  
                                    l341 3390                                      l351 1ABA  
                                    l520 2800                                      l513 27F0  
                                    l290 2BE4                                      l506 27E0  
                                    l471 2790                                      l296 2FBE  
                                    l464 2780                                      l456 2770  
                                    l529 2A20                                      l713 1C28  
                                    l492 27C0                                      l485 27B0  
                                    l478 27A0                                      l499 27D0  
                                    l599 34F2                                      l778 317A  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0037                                      _log 21A4  
                        __end_of_ADC_ISR 10B2     FastTransfer_buffer_flush@clearBuffer 0025  
                                    prod 000FF3                                      tosl 000FFD  
                                    wreg 000FE8            i2UART_buff_modulo_inc@modulus 0003  
                           __CFG_LVP$OFF 000000                          ?_Battery_Filter 0001  
                           ___ftdiv@cntr 00CA                             ___ftdiv@sign 00CF  
                                   l1143 2E36                                     l1207 216A  
                                   l1172 1520                                     l1176 155A  
                                   l1178 1584                                     l1187 1668  
                                   l1196 1692                                     l3055 386A  
                                   l3059 387C                                     l5011 0788  
                                   l5013 07B2                                     l5005 0778  
                                   l5111 0B9C                                     l5201 3588  
                                   l5113 0BB6                                     l5105 0B4E  
                                   l5121 0C42                                     l5041 08B4  
                                   l5033 0842                                     l5025 07E4  
                                   l5115 0BD0                                     l5107 0B68  
                                   l5051 095C                                     l5213 30BA  
                                   l5117 0BEA                                     l5109 0B82  
                                   l5029 0816                                     l4431 2DFE  
                                   l4423 2DBA                                     l5143 32C8  
                                   l4407 3176                                     l4503 28F2  
                                   l4511 2CCC                                     l5119 0C26  
                                   l5071 0A2E                                     l5047 093E  
                                   l4441 2E3E                                     l4433 2E1E  
                                   l4425 2DC6                                     l5145 32D6  
                                   l4601 1648                                     l5241 2680  
                                   l5209 3088                                     l5313 296E  
                                   l5073 0A48                                     l5065 09E0  
                                   l5081 0AD4                                     l5049 0946  
                                   l5129 0C50                                     l4435 2E2A  
                                   l4427 2DE6                                     l4419 2DAA  
                                   l4603 1658                                     l5163 20C6  
                                   l5219 30E6                                     l5251 2F1C  
                                   l4523 2444                                     l5075 0A62  
                                   l5067 09FA                                     l5091 0AE2  
                                   l5157 208C                                     l5237 2666  
                                   l5261 2FB6                                     l5325 29E0  
                                   l5317 2988                                     l5309 1940  
                                   l4453 34C6                                     l4701 1C16  
                                   l5077 0A7C                                     l5069 0A14  
                                   l4447 2E50                                     l5183 2128  
                                   l5247 275C                                     l5255 2F30  
                                   l5271 3342                                     l3575 35C6  
                                   l4711 1DBE                                     l4519 2D52  
                                   l5079 0AB8                                     l4609 16BE  
                                   l4561 152E                                     l5193 217C  
                                   l5329 2A16                                     l3921 1FE2  
                                   l4705 1C20                                     l4529 24B0  
                                   l4619 170E                                     l4635 1C9E  
                                   l4803 323C                                     l5275 3388  
                                   l5267 332E                                     l3579 35E2  
                                   l3931 2020                                     l4459 34DC  
                                   l4467 34FA                                     l4395 3826  
                                   l4491 286E                                     l4573 157A  
                                   l4653 1D0E                                     l4629 1C64  
                                   l5285 175A                                     l3917 1FCE  
                                   l4469 3504                                     l4591 15FC  
                                   l4583 15BC                                     l4567 1568  
                                   l4663 1D52                                     l4479 3854  
                                   l3935 203E                                     l3927 2000  
                                   l4487 2862                                     l5383 3656  
                                   l4593 160C                                     l4657 1D2A  
                                   l4649 1CEE                                     l4921 27A4  
                                   l4913 2764                                     l4761 3008  
                                   l4753 2FE8                                     l4817 2A66  
                                   l3929 2012                                     l4673 1ABE  
                   receiveData@crcHolder 00CE                                     l4851 2B90  
                                   l4835 2B0C                                     l4595 1618  
                                   l4667 1D6E                                     l4659 1D32  
                                   l4931 27F4                                     l4923 27B4  
                                   l4915 2774                                     l4771 302E  
                                   l4763 3010                                     l4747 2FD6  
                                   l4819 2AEA                                     l4683 1B84  
                                   l4675 1AEA                                     l4845 2B74  
                                   l4589 15EC                                     l4925 27C4  
                                   l4917 2784                                     l5397 3686  
                                   l5389 366C                                     ?_log 0191  
                                   l4847 2B7C                                     l4839 2B20  
                                   l4927 27D4                                     l4919 2794  
                                   l4935 2804                                     l4759 2FFE  
                                   l4775 303A                                     l4863 1950  
                                   l4791 36A6                                     l4687 1B9E  
                                   l4951 236E                                     l4929 27E4  
                                   l4873 1A40                                     l4697 1BF4  
                                   l4953 238A                                     l4945 2320  
                                   l4779 304A                                     l4875 1A4A  
                                   l4867 196A                                     l4891 21C8  
                                   l3899 1F3A                                     l4963 23F6  
                                   l4955 2394                                     l4947 233A  
                                   l4973 0650                                     l4981 0684  
                                   l4957 23BE                                     l4949 2354  
                                   l4879 1A64                                     l4959 23C4  
                                   l4897 21F6                                     l4993 0728  
                                   l4977 067E                                     l4995 0740  
                                   l4997 0748                                     _CRC8 34C0  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     u2700 2CA8  
                                   u5050 3264                                     u6040 1758  
                                   u4360 310A                                     u5058 3266  
                                   u5308 2358                                     u5318 2372  
                                   u4551 14CE                                     u5408 0688  
                                   u5328 2398                                     u4561 14EC  
                                   u5601 086A                                     u5409 069C  
                                   u5428 06A6                                     u5348 23E0  
                                   u5429 06BA                                     u5278 230A  
                                   u3871 1F16                                     u5528 078C  
                                   u5448 06C4                                     u5368 0628  
                                   u5288 2324                                     u4761 1C40  
                                   u6177 35CC                                     u5529 07A0  
                                   u5449 06D8                                     u5369 063C  
                                   u3890 1F60                                     u5458 06DE  
                                   u5298 233E                                     u5459 06F2  
                                   u4828 1AC2                                     u5708 0A4C  
                                   u5548 07B6                                     u5468 06F8  
                                   u5388 065A                                     u4781 1C7A  
                                   u4829 1AD6                                     u5549 07CC  
                                   u5469 070C                                     u5389 066E  
                                   u5718 0A66                                     u4951 1DBC  
                                   u3895 1F56                                     u4848 1AEE  
                                   u5808 0BBA                                     u5728 0A80  
                                   u5568 07E8                                     u5488 072C  
                                   u4849 1B02                                     u5569 07FC  
                                   u4858 1B0A                                     u5818 0BD4  
                                   u5738 0ABC                                     u5658 09CA  
                                   u5578 081A                                     u4859 1B1E  
                                   u5579 082E                                     u4868 1B26  
                                   u5828 0BEE                                     u5668 09E4  
                                   u5861 2068                                     u4869 1B3A  
                                   u4878 1B42                                     u5838 0C2A  
                                   u5758 0B38                                     u5678 09FE  
                                   u4879 1B56                                     u5768 0B52  
                                   u5688 0A18                                     u5881 20A2  
                                   u5778 0B6C                                     u5698 0A32  
                                   u5788 0B86                                     u5798 0BA0  
                                   _TMR1 000FCE                                     _WPUB 000F61  
                Tempeture_Get@channelnum 0021                                     _main 364C  
                           ___ftpack@arg 001B                             ___ftpack@exp 001E  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                            __CFG_BORV$190 000000  
                                   log@x 0191                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 1F00                                     start 00AA  
                          __CFG_IESO$OFF 000000                             ___ftmul@cntr 00DD  
                           ___param_bank 000010                             ___ftmul@sign 00DE  
         i2UART_buff_modulo_inc@my_value 0005                        ADC_ISR@ADC_Result 000B  
                           ___fttol@exp1 00ED                                    ??_log 002D  
                           ___fttol@lval 00E9                                    ?_CRC8 001B  
                       __end_of_CRCcheck 1C2A                         ?_Battery_Convert 0001  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 3A9E  
                     crcBufS_put@address 001D                                    ?_main 019F  
                        __end_of___awdiv 3056                          __end_of___ftadd 1736  
                        __end_of___ftdiv 21A4                          _TMR1_StartTimer 3AB6  
                        __end_of___ftmul 1D96                          ___awdiv@divisor 001D  
                                  _T1CON 000FCD                          __end_of___ftsub 35B4  
                        __end_of___fttol 2052                                    _LATA0 007C48  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATC0 007C58                                    _LATA4 007C4C  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATA6 007C4E                                    _LATD1 007C61  
                                  _LATD2 007C62                                    _LATC4 007C5C  
                                  _LATD3 007C63                                    _LATC5 007C5D  
                                  _LATD5 007C65                           __CFG_DEBUG$OFF 000000  
                                  i2l211 0064                                    i2l215 0070  
                                  i2l207 004C                                    i2l209 0058  
                                  i2l809 39B2                                    i2l778 320E  
                        ___awdiv@counter 001F                                    _TMR1H 000FCF  
                                  _TMR1L 000FCE                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
       __size_of_ADC_GetConversionResult 0016                                    _Delay 35B4  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 3740                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR1_ISR 364C                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                                  _begin 3462                           __CFG_EBTRB$OFF 000000  
                          ___awtoft@sign 0026                                    _frexp 3214  
                                  _errno 0094                                    _group 0043  
                     __CFG_MCLRE$EXTMCLR 000000                            ___ftpack@sign 001F  
                         SetBypass@state 001D                  __end_of_TMR1_Initialize 3950  
                                  pclath 000FFA                              _Battery_Adc 0060  
                                  tablat 000FF5                              _Battery_Get 37D4  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00E8  
                                  plusw2 000FDB                           begin@stuffpeek 00CC  
                   __size_of_crcBufS_put 00DA                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
                        RunBypas@cellbyp 00C1                          RunBypas@batvolt 00C3  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 3512  
                        CRCcheck@SentCRC 00C1                          __initialization 2E60  
                            log@exponent 0194               __end_of_EUSART1_Initialize 3708  
                           __end_of_main 3690                               ToSend@what 00EE  
                                 ??_CRC8 001E                         __end_of_Set_4051 3740  
                              ??_ADC_ISR 0005              ?_INTERRUPT_InterruptManager 0001  
                                 ??_main 002D                            ___fttol@sign1 00E8  
                          __activetblptr 000002                         __end_of_Send_put 37A4  
             ADC_StartConversion@channel 0002                __size_ofi2_UART_buff_size 0018  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                         __end_of_RunBypas 2A22  
                          ?_Receive_peek 0001                                   ?_begin 00C1  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   ?_frexp 001B  
                       __end_of___altoft 3322                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                         ___awdiv@dividend 001B  
                       __end_of___awtoft 36CC                                   _ANSELA 000F38  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                       __end_of___ftpack 2E60                                   _T1GCON 000FCC  
                        i2_UART_buff_get 3180                                   _RC1STA 000FAB  
                  __size_of_Battery_Read 0018                          i2_UART_buff_put 2540  
                                 i2l4011 0CFE                                   i2l4005 0CD0  
                                 i2l4021 0D54                                   i2l4031 0DB8  
                                 i2l4023 0D5A                                   i2l4051 0F2A  
                                 i2l4043 0E96                                   i2l4035 0E02  
                                 i2l4027 0D6E                                   i2l4019 0D28  
                                 i2l3261 3722                           __CFG_WDTEN$OFF 000000  
                                 i2l4063 1008                                   i2l4055 0F74  
                                 i2l4047 0EE0                                   i2l4039 0E4C  
                                 i2l4071 105A                                   i2l4073 10AA  
                                 i2l3259 3710                                   i2l4059 0FBE  
                                 i2l3429 38B0                                   i2l4093 376A  
            UART_buff_modulo_inc@modulus 001D                                   i2l3941 2560  
                                 i2l3961 320A                                   i2l3947 25CC  
                                 i2l3983 363A                                   i2l3993 0C74  
                                 i2l3977 3622                                   i2l3979 362C  
                                 i2l3999 0CA2                                   _RCREG1 000FAE  
                          ??_Temp_Filter 002D                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                   _TX1STA 000FAC  
                                 _TXREG1 000FAD                               _Temp_Fault 3322  
                         __CFG_XINST$OFF 000000                                   _ToSend 396E  
                    __end_of_Receive_get 3A90                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0027                    __end_of_Tempeture_Get 37D4  
                                 ___ftge 3056                            _output_buffer 0500  
                       crcBufS_get@space 001E                  __end_of_TMR1_StartTimer 3ABA  
                     __size_of_SetBypass 00F4                                   ___wmul 38BC  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                              ??___ftadd 00E5                           __CFG_STVREN$ON 000000  
                              ??___ftdiv 00C7                                ??___ftmul 00D6  
                              ??___ftsub 002D                                ??___fttol 00E3  
                                 _memset 3860                                   clear_0 2E66  
                                 clear_1 2E72                                   clear_2 2E7E  
                                 clear_3 2E8A                                   clear_4 2E96  
                                 clear_5 2EA2                                   clear_6 2EAE  
                       ___awdiv@quotient 0021                       __size_of_Temp_Read 0024  
                                 _rx_len 0042                         __end_of_sendData 2424  
                  ___ftmul@f3_as_product 00DA                             __pdataCOMRAM 0045  
                           _Battery_Read 3A2A                            Send_put@_data 0026  
                           _Battery_Volt 0170                             __mediumconst 0000  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 016A             __end_of_UART_buff_modulo_inc 3832  
          __size_of_INTERRUPT_Initialize 000C                         ?_TMR1_Initialize 0001  
                      _SYSTEM_Initialize 3392                         __end_oflog@coeff 061C  
                             __accesstop 0060                  __end_of__initialization 2F06  
                             ___altoft@c 0023                                ?_CRCcheck 0001  
                             ___ftadd@f1 00DF                               ___ftadd@f2 00E2  
                             ___ftge@ff1 0021                               ___ftge@ff2 0024  
                     ?_SYSTEM_Initialize 0001                             eval_poly@res 018E  
                          ___rparam_used 000001                               ___ftdiv@f1 00C1  
                             ___ftdiv@f2 00C4                               ___ftdiv@f3 00CB  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                             ___awtoft@c 0023                            __end_of_Delay 3600  
                             ___ftmul@f1 00D0                               ___ftmul@f2 00D3  
                             ___ftsub@f1 00EB                               ___ftsub@f2 00EE  
                    __end_of_Temp_Filter 1ABC                               ___fttol@f1 00DF  
           __size_of_ADC_StartConversion 001A                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 2CC0                             __pidataBANK0 3A9E  
                           __pidataBANK1 3950                      ??_SYSTEM_Initialize 0025  
                       crcBufS_put@_this 001B                            __end_of_begin 34C0  
                              ?_TMR1_ISR 0001   __end_of_FastTransfer_buffer_modulo_inc 3860  
__size_of_FastTransfer_buffer_modulo_inc 002E           _FastTransfer_buffer_modulo_inc 3832  
                          __end_of_frexp 32A6             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 00F0                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                    Battery_Get@channelnum 0021  
                  __end_of_UART_buff_get 3180                   ??_EUSART1_Transmit_ISR 000C  
                _ADC_GetConversionResult 3A5A                    __end_of_UART_buff_put 2540  
                       ??_Battery_Filter 0021                                  ??_Delay 001F  
                __end_ofi2_UART_buff_get 3214                  __end_ofi2_UART_buff_put 265C  
            __end_of_EUSART1_Receive_ISR 39C8                _FastTransfer_buffer_flush 33FE  
                                CRC8@crc 0021                                  CRC8@len 001D  
                                CRC8@sum 001E                                  ??_begin 0023  
                          ?_Temp_Convert 0001                                  ??_frexp 0020  
              __end_of_SYSTEM_Initialize 33FE                   receiveData@holder_1131 00CB  
                      __end_of_SetBypass 2856                      _addressErrorCounter 008C  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                               __pbssBANK5 0500  
                     __size_of_eval_poly 00E2                          __CFG_PLLCFG$OFF 000000  
                      __end_of_Temp_Read 392E                              _Receive_get 3A80  
                              ?_Set_4051 0001                               ??_CRCcheck 0027  
                   ??_crcBufS_status_put 001F           __end_ofi2_UART_buff_modulo_inc 38BC  
                      begin@givenAddress 00C4                    Temp_Convert@steinhart 019C  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_peek 0026  
                            ?_Temp_Fault 0001                  __size_of_UART_buff_size 0018  
                              ?_Send_put 0001                     __size_of_receiveData 0638  
                                ?_ToSend 00EE                       __CFG_CCP2MX$PORTC1 000000  
                            Temp_Fault@i 002B                                  ?___ftge 0021  
                              ?_RunBypas 0001                                  ?___wmul 001B  
                       ?_TMR1_StartTimer 0001                               ??_TMR1_ISR 0005  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                              ?___altoft 0023                                  _ADC_ISR 0C56  
                                ?_memset 001B                               _crc_buffer 009C  
                              ?___awtoft 0023                                ?___ftpack 001B  
                __size_of_ADC_Initialize 0018                            Temp_Convert@x 019A  
                 __size_of_Battery_Fault 00B0                          Temp_Fault@fault 002A  
                     UART_buff_put@_this 0021                         i2_UART_buff_size 3A42  
            i2UART_buff_modulo_inc@value 0001                           Battery_Fault@i 002B  
                                _OSCCON2 000FD2                           ??_Temp_Convert 002D  
                      _Receive_available 39E2             UART_buff_modulo_inc@my_value 001F  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                      sendData@whereToSend 0028  
                    _receiveArrayAddress 0096                       ?_Receive_available 001D  
                             begin@error 00C5                             ?_Battery_Get 0021  
                             ??_Set_4051 0003                              _Temp_Filter 1946  
                            _Temp_Aquire 003A                      ??_Receive_available 001F  
                              ?_sendData 0001                        _alignErrorCounter 008E  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 0026  
                                __Hparam 0000                                  __Lparam 0000  
                        __size_of_ToSend 001E                     __end_of_Receive_peek 3A80  
                              _AKNAKsend 0039                               ??_RunBypas 002A  
                        __size_of___ftge 0096                                  ___awdiv 2FC0  
                                ___ftadd 14B8                     _UART_buff_modulo_inc 3804  
                                ___ftdiv 2052                          __size_of___wmul 0028  
                                ___ftmul 1C2A                                  ___ftsub 3564  
                                ___fttol 1F00                                  _calc_CS 003C  
                           __psmallconst 0600                               ??___altoft 0027  
              ??_ADC_GetConversionResult 0003                                  __pcinit 2E60  
                             ??___awtoft 0026                               ??___ftpack 0020  
                      __end_of_eval_poly 2B04                          __size_of_memset 002E  
                                __ramtop 0600                         i2UART_buff_get@c 000B  
                                __ptext0 364C                                  __ptext1 10B2  
                                __ptext2 22F2                                  __ptext3 2BE6  
                                __ptext4 33FE                                  __ptext5 061E  
                                __ptext6 3774                                  __ptext7 2424  
                                __ptext8 3A70                                  __ptext9 38E4  
                       i2UART_buff_put@c 0009                                _T1CONbits 000FCD  
                  _OSCILLATOR_Initialize 3A90                __end_of_Receive_available 39FA  
                           __size_of_log 014E                  _FastTransfer_buffer_put 1D96  
                    __size_of_Temp_Fault 0070                    CRCcheck@calculatedCRC 00C2  
                     _EUSART1_Initialize 36CC                         ?i2_UART_buff_get 0007  
               ??_PIN_MANAGER_Initialize 001B                         ?i2_UART_buff_put 0007  
           crcBufS_status_put@wantedTime 0023                 __size_of_Battery_Convert 0106  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 006C                     end_of_initialization 2F06  
                              Delay@wait 0020                      ?_EUSART1_Initialize 0001  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 0000  
                          _Battery_Fault 2F10                               ??_sendData 0027  
                  ?_UART_buff_modulo_inc 001B                     __size_of_updateComms 0406  
                                postdec1 000FE5                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc1 000FE6  
                                postinc2 000FDE                         Battery_Convert@x 00ED  
                       begin@stufftosend 00C6                      CRCcheck@arrayHolder 00C3  
                   ??_EUSART1_Initialize 0025                   _dataAdressErrorCounter 0092  
                             _rx_address 0040                                _TRISCbits 000F94  
                    _ADC_StartConversion 39C8                              _Volt_Aquire 003B  
                           begin@maxSize 00C3                           ?_Battery_Fault 0001  
     __size_of_FastTransfer_buffer_flush 0064                              ___ftdiv@exp 00CE  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 398C  
                         _UART_buff_peek 38E4                           _UART_buff_size 39FA  
                    __end_of_crcBufS_get 293E                      __end_of_crcBufS_put 2CC0  
                           SetBypass@pin 001B                        __size_of_CRCcheck 016E  
                           Delay@d_lenth 001B                              ___ftmul@exp 00D9  
                   ?_ADC_StartConversion 0001                            _moduleAddress 003E  
                   __end_of_Temp_Convert 1946                               CRCcheck@rt 00C6  
                         __end_of_ToSend 398C             __end_of_INTERRUPT_Initialize 3AB6  
                         __end_of___ftge 30EC                          _crcErrorCounter 0090  
                         __end_of___wmul 38E4                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 3ABA                        __size_of_TMR1_ISR 004C  
                         _ADC_Initialize 3A12                ??_FastTransfer_buffer_put 0026  
                 ?_OSCILLATOR_Initialize 0001                           __end_of_memset 388E  
                      crcBufS_put@status 001F                             receiveData@r 00D2  
             __size_of_Receive_available 0018                             receiveData@u 00D0  
                    start_initialization 2E60                               eval_poly@d 00EE  
                             eval_poly@n 00F0                               eval_poly@x 00EB  
        __size_of_PIN_MANAGER_Initialize 0052                    crcBufS_get@wantedTime 0025  
                            __end_of_log 22F2                   __size_of_Tempeture_Get 0030  
                 __end_of_UART_buff_init 39AA                   __end_of_UART_buff_peek 390A  
                         UART_buff_get@c 0025                   __end_of_UART_buff_size 3A12  
                             frexp@value 001B                             ?_Receive_get 0001  
                      ??_Battery_Convert 00EB                           UART_buff_put@c 0023  
                              _SetBypass 2762                    __size_of_Receive_peek 0010  
                   __size_of_Battery_Get 0030                             ??_Temp_Fault 002A  
               __end_ofi2_UART_buff_size 3A5A                        __size_of_Set_4051 0038  
                              _Temp_DegF 00F4                         _PrevBattery_Volt 0100  
                              _Temp_Done 0088                                _Temp_Read 390A  
                  ??_ADC_StartConversion 0001                                 ??_ToSend 002D  
                 ??_UART_buff_modulo_inc 001F                 __size_of_TMR1_Initialize 0022  
                               CRC8@data 001B                          crcBufS_get@time 001D  
                               ??___ftge 0027                        __size_of_Send_put 0030  
                               ??___wmul 001F                   __end_of_ADC_Initialize 3A2A  
                            __pdataBANK0 00F4                              __pdataBANK1 0170  
                              RunBypas@i 00C6                                 ?_ADC_ISR 0001  
                               ??_memset 0021                        __size_of_RunBypas 00E4  
                      __size_of___altoft 007C                        __size_of___awtoft 003C  
                      __size_of___ftpack 00C6                                _Volt_Done 008A  
                            __pbssCOMRAM 002D            __size_of_EUSART1_Transmit_ISR 0034  
                          __pcstackBANK0 00C1                            __pcstackBANK1 018E  
                     __end_of_Temp_Fault 3392                             _Receive_peek 3A70  
                    UART_buff_init@_this 0023                            _PrevTemp_DegF 013C  
                            _crcBufS_get 2856                      UART_buff_peek@_this 001B  
                            _crcBufS_put 2BE6                          ??_Battery_Fault 002A  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B             __size_of_EUSART1_Receive_ISR 001E  
                           ?_Temp_Filter 0001                            ??_receiveData 0027  
                             ?_SetBypass 001B              __size_of_crcBufS_status_put 00DA  
                             sendData@CS 0029                   __size_of_UART_buff_get 0094  
                 __size_of_UART_buff_put 011C                               ?_Temp_Read 0001  
                 _PIN_MANAGER_Initialize 3512                        __size_of_sendData 0132  
                      _Temp_Convert$2202 0196                        _Temp_Convert$2203 0198  
                              __pintcode 0008                            _Tempeture_Get 37A4  
                               ?___awdiv 001B                                 ?___ftadd 00DF  
                               ?___ftdiv 00C1                                 ?___ftmul 00D0  
                               ?___ftsub 00EB                                 ?___fttol 00DF  
                           Temp_Filter@x 00EB                          ?_ADC_Initialize 0001  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
                               _BAUD1CON 000FB8                              __smallconst 0600  
               __size_of_TMR1_StartTimer 0004                                _eval_poly 2A22  
                         __size_of_Delay 004C                           __size_of_begin 005E  
                         __size_of_frexp 0092                     _INTERRUPT_Initialize 3AAA  
                           _receiveArray 0148                  __size_of_Battery_Filter 00E2  
                               _CRCcheck 1ABC                           ___wmul@product 001F  
                               _LATAbits 000F89                                 _LATEbits 000F8D  
                  __size_of_Temp_Convert 0210                      UART_buff_size@_this 001B  
                               _IPR1bits 000F9F                                 _PIE1bits 000F9D  
    __size_of_INTERRUPT_InterruptManager 00A2                                 i2u403_40 375A  
                               _PIR1bits 000F9E                                 i2u396_40 319E  
                               i2u397_40 361E                          Battery_Filter@x 0021  
                    begin@stuffavailable 00CA                           ?_Tempeture_Get 0021  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0C56                                 _TMR1_ISR 3600  
         FastTransfer_buffer_flush@_this 0023                             _input_buffer 0400  
                              _rx_buffer 0300                        ??_TMR1_Initialize 001B  
                       __size_of_ADC_ISR 045C                               _ADCON0bits 000FC2  
                      ___wmul@multiplier 001B                     i2UART_buff_put@_this 0007  
                          _UART_buff_get 30EC                            ?_Battery_Read 0001  
                          _UART_buff_put 2424                               ?_eval_poly 00EB  
               ??i2_UART_buff_modulo_inc 0005                             _Temp_Convert 1736  
                            _INTCON2bits 000FF1                                copy_data0 2EC8  
                              copy_data1 2EE8                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 0098                 __size_ofi2_UART_buff_get 0094  
                               _Set_4051 3708                 __size_ofi2_UART_buff_put 011C  
                            ??_SetBypass 001F                                frexp@eptr 001E  
                          ??_updateComms 002D                     __size_of_Receive_get 0010  
                               __Hrparam 0000                              ??_Temp_Read 0005  
                               _Send_put 3774                                 _Temp_Adc 00B9  
                               __Lrparam 0000                 ?_ADC_GetConversionResult 0001  
                     __CFG_BOREN$SBORDIS 000000                                 _RunBypas 293E  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                       __size_of___awdiv 0096                         __size_of___ftadd 027E  
                       __size_of___ftdiv 0152                                 ___altoft 32A6  
                       __size_of___ftmul 016C                         __size_of___ftsub 0050  
                       __size_of___fttol 0152              __size_of_EUSART1_Initialize 003C  
                    begin@stufftoreceive 00C8                                 ___awtoft 3690  
                               ___ftpack 2D9A                           ?_UART_buff_get 0021  
                         ??_Battery_Read 0003                           ?_UART_buff_put 0021  
                            CRC8@extract 001F                                sendData@i 002A  
                        _Battery_Convert 265C                       Battery_Fault@fault 002A  
               crcBufS_status_put@status 001E                                 __ptext10 1ABC  
                               __ptext11 2CC0                                 __ptext20 396E  
                               __ptext12 2856                                 __ptext21 1D96  
                               __ptext13 3A80                               _T1GCONbits 000FCC  
                               __ptext30 3690                                 __ptext22 3832  
                               __ptext14 30EC                                 __ptext31 3564  
                               __ptext23 37A4                                 __ptext15 3804  
                               __ptext40 3AAA                                 __ptext32 1946  
                               __ptext24 35B4                                 __ptext16 39E2  
                               __ptext41 36CC                                 __ptext33 3392  
                               __ptext25 3322                                 __ptext17 39FA  
                               __ptext50 265C                                 __ptext42 398C  
                               __ptext34 3462                                 __ptext26 1736  
                               __ptext18 34C0                                 __ptext51 1C2A  
                               __ptext43 3860                                 __ptext35 2FC0  
                               __ptext27 21A4                                 __ptext19 1F00  
                               __ptext60 390A                                 __ptext52 2052  
                               __ptext44 3A12                                 __ptext36 392E  
                               __ptext28 3214                                 __ptext61 3A2A  
                               __ptext53 14B8                                 __ptext45 293E  
                               __ptext37 3AB6                                 __ptext29 2A22  
                               __ptext70 39C8                                 __ptext62 3740  
                               __ptext54 32A6                                 __ptext46 2762  
                               __ptext38 3512                                 __ptext71 3A5A  
                               __ptext63 3A42                                 __ptext55 2D9A  
                               __ptext47 37D4                                 __ptext39 3A90  
                               __ptext72 0000                                 __ptext64 3180  
                               __ptext56 2B04                                 __ptext48 2F10  
                               __ptext65 39AA                                 __ptext57 38BC  
                               __ptext49 3056                                 __ptext66 2540  
                               __ptext67 388E                                 __ptext59 3600  
                               __ptext68 0C56                                 __ptext69 3708  
                      ??_TMR1_StartTimer 001B                            __size_of_CRC8 0052  
                               begin@ptr 00C1                  EUSART1_Receive_ISR@data 000C  
                          _returnAddress 003F                            __size_of_main 0044  
                            _receiveData 061E                           _Transmit_stall 0045  
                               _sendData 22F2                             _TmpTemp_DegF 00AD  
                   __size_of_Temp_Filter 0176                          ??_Tempeture_Get 0024  
                      ?i2_UART_buff_size 0001                               _RC1STAbits 000FAB  
                     ??i2_UART_buff_size 0003                             _serial_write 0035  
                    __end_of_updateComms 14B8       __end_of_INTERRUPT_InterruptManager 00AA  
             _INTERRUPT_InterruptManager 0008                                 main@argc 019F  
                               main@argv 01A1                      _EUSART1_Receive_ISR 39AA  
                      receiveData@holder 00C8                                 log@coeff 0601  
                             _INTCONbits 000FF2                              ??_eval_poly 00F2  
              UART_buff_modulo_inc@value 001B                         ??_UART_buff_init 0025  
                       ??_UART_buff_peek 001D                         ??_UART_buff_size 001D  
                 ??_INTERRUPT_Initialize 001B                                 memset@p1 001B  
                       _serial_available 0031          __size_ofi2_UART_buff_modulo_inc 002E  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                          ??_Battery_Get 0024                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                           _Battery_Filter 2B04  
                          _CountCallBack 002F                     ?_EUSART1_Receive_ISR 0001  
            __end_of_ADC_StartConversion 39E2   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                         _TempBattery_Volt 011E  
                ?_PIN_MANAGER_Initialize 0001          __end_of_ADC_GetConversionResult 3A70  
           __end_of_EUSART1_Transmit_ISR 3774                              _ring_buffer 0200  
                       ??_ADC_Initialize 001B               ?_FastTransfer_buffer_flush 0023  
                      ??i2_UART_buff_get 0009                              _serial_peek 009A  
                            _serial_read 0033                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002E  
                __end_of_Battery_Convert 2762                          ??_UART_buff_get 0023  
                        ??_UART_buff_put 0024    FastTransfer_buffer_modulo_inc@modulus 001D  
                 crcBufS_status_put@time 001D                receiveData@crcHolder_1132 00CF  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003D  
                 __end_of_Battery_Filter 2BE6               __end_of_crcBufS_status_put 2D9A  
                  ??_EUSART1_Receive_ISR 000C           __end_of_PIN_MANAGER_Initialize 3564  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
                  __end_of_Battery_Fault 2FC0                        __CFG_FOSC$INTIO67 000000  
                   __end_of_Battery_Read 3A42                          _TMR1_Initialize 392E  
                            _updateComms 10B2                         _ADC_Buffer_Point 002D  
                    __end_of_Battery_Get 3804                          Set_4051@Channel 0001  
