

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun May 31 04:56:05 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           	psect	smallconst
    73  000600                     __psmallconst:
    74                           	opt stack 0
    75  000600  00                 	db	0
    76  000601                     _dpowers:
    77                           	opt stack 0
    78  000601  0001               	dw	1
    79  000603  0000               	dw	0
    80  000605  000A               	dw	10
    81  000607  0000               	dw	0
    82  000609  0064               	dw	100
    83  00060B  0000               	dw	0
    84  00060D  03E8               	dw	1000
    85  00060F  0000               	dw	0
    86  000611  2710               	dw	10000
    87  000613  0000               	dw	0
    88  000615  86A0               	dw	34464
    89  000617  0001               	dw	1
    90  000619  4240               	dw	16960
    91  00061B  000F               	dw	15
    92  00061D  9680               	dw	38528
    93  00061F  0098               	dw	152
    94  000621  E100               	dw	57600
    95  000623  05F5               	dw	1525
    96  000625  CA00               	dw	51712
    97  000627  3B9A               	dw	15258
    98  000629                     __end_of_dpowers:
    99                           	opt stack 0
   100  000629                     __npowers_:
   101                           	opt stack 0
   102  000629  00                 	db	0
   103  00062A  80                 	db	128
   104  00062B  3F                 	db	63
   105  00062C  CD                 	db	205
   106  00062D  CC                 	db	204
   107  00062E  3D                 	db	61
   108  00062F  D7                 	db	215
   109  000630  23                 	db	35
   110  000631  3C                 	db	60
   111  000632  12                 	db	18
   112  000633  83                 	db	131
   113  000634  3A                 	db	58
   114  000635  B7                 	db	183
   115  000636  D1                 	db	209
   116  000637  38                 	db	56
   117  000638  C6                 	db	198
   118  000639  27                 	db	39
   119  00063A  37                 	db	55
   120  00063B  38                 	db	56
   121  00063C  86                 	db	134
   122  00063D  35                 	db	53
   123  00063E  C0                 	db	192
   124  00063F  D6                 	db	214
   125  000640  33                 	db	51
   126  000641  CC                 	db	204
   127  000642  2B                 	db	43
   128  000643  32                 	db	50
   129  000644  70                 	db	112
   130  000645  89                 	db	137
   131  000646  30                 	db	48
   132  000647  E7                 	db	231
   133  000648  DB                 	db	219
   134  000649  2E                 	db	46
   135  00064A  E5                 	db	229
   136  00064B  3C                 	db	60
   137  00064C  1E                 	db	30
   138  00064D  42                 	db	66
   139  00064E  A2                 	db	162
   140  00064F  0D                 	db	13
   141  000650                     __end_of__npowers_:
   142                           	opt stack 0
   143  000650                     __powers_:
   144                           	opt stack 0
   145  000650  00                 	db	0
   146  000651  80                 	db	128
   147  000652  3F                 	db	63
   148  000653  00                 	db	0
   149  000654  20                 	db	32
   150  000655  41                 	db	65
   151  000656  00                 	db	0
   152  000657  C8                 	db	200
   153  000658  42                 	db	66
   154  000659  00                 	db	0
   155  00065A  7A                 	db	122
   156  00065B  44                 	db	68
   157  00065C  40                 	db	64
   158  00065D  1C                 	db	28
   159  00065E  46                 	db	70
   160  00065F  50                 	db	80
   161  000660  C3                 	db	195
   162  000661  47                 	db	71
   163  000662  24                 	db	36
   164  000663  74                 	db	116
   165  000664  49                 	db	73
   166  000665  97                 	db	151
   167  000666  18                 	db	24
   168  000667  4B                 	db	75
   169  000668  BC                 	db	188
   170  000669  BE                 	db	190
   171  00066A  4C                 	db	76
   172  00066B  6B                 	db	107
   173  00066C  6E                 	db	110
   174  00066D  4E                 	db	78
   175  00066E  03                 	db	3
   176  00066F  15                 	db	21
   177  000670  50                 	db	80
   178  000671  79                 	db	121
   179  000672  AD                 	db	173
   180  000673  60                 	db	96
   181  000674  F3                 	db	243
   182  000675  49                 	db	73
   183  000676  71                 	db	113
   184  000677                     __end_of__powers_:
   185                           	opt stack 0
   186  000677                     log@coeff:
   187                           	opt stack 0
   188  000677  00                 	db	0
   189  000678  00                 	db	0
   190  000679  00                 	db	0
   191  00067A  00                 	db	0
   192  00067B  80                 	db	128
   193  00067C  3F                 	db	63
   194  00067D  F0                 	db	240
   195  00067E  FF                 	db	255
   196  00067F  BE                 	db	190
   197  000680  E2                 	db	226
   198  000681  A9                 	db	169
   199  000682  3E                 	db	62
   200  000683  83                 	db	131
   201  000684  76                 	db	118
   202  000685  BE                 	db	190
   203  000686  AE                 	db	174
   204  000687  2B                 	db	43
   205  000688  3E                 	db	62
   206  000689  3C                 	db	60
   207  00068A  C3                 	db	195
   208  00068B  BD                 	db	189
   209  00068C  D2                 	db	210
   210  00068D  13                 	db	19
   211  00068E  3D                 	db	61
   212  00068F  78                 	db	120
   213  000690  D3                 	db	211
   214  000691  BB                 	db	187
   215  000692                     __end_oflog@coeff:
   216                           	opt stack 0
   217  0000                     _TMR1	set	4046
   218  0000                     _ADCON0	set	4034
   219  0000                     _ADCON0bits	set	4034
   220  0000                     _ADCON1	set	4033
   221  0000                     _ADCON2	set	4032
   222  0000                     _ADRESH	set	4036
   223  0000                     _ADRESL	set	4035
   224  0000                     _ANSELA	set	3896
   225  0000                     _ANSELB	set	3897
   226  0000                     _ANSELC	set	3898
   227  0000                     _ANSELD	set	3899
   228  0000                     _ANSELE	set	3900
   229  0000                     _BAUD1CON	set	4024
   230  0000                     _INTCON2bits	set	4081
   231  0000                     _INTCONbits	set	4082
   232  0000                     _IPR1bits	set	3999
   233  0000                     _LATA	set	3977
   234  0000                     _LATB	set	3978
   235  0000                     _LATC	set	3979
   236  0000                     _LATD	set	3980
   237  0000                     _LATE	set	3981
   238  0000                     _OSCCON	set	4051
   239  0000                     _OSCCON2	set	4050
   240  0000                     _OSCTUNE	set	3995
   241  0000                     _PIE1bits	set	3997
   242  0000                     _PIR1bits	set	3998
   243  0000                     _RC1STA	set	4011
   244  0000                     _RC1STAbits	set	4011
   245  0000                     _RCONbits	set	4048
   246  0000                     _RCREG1	set	4014
   247  0000                     _SPBRG1	set	4015
   248  0000                     _SPBRGH1	set	4016
   249  0000                     _T1CON	set	4045
   250  0000                     _T1CONbits	set	4045
   251  0000                     _T1GCON	set	4044
   252  0000                     _T1GCONbits	set	4044
   253  0000                     _TMR1H	set	4047
   254  0000                     _TMR1L	set	4046
   255  0000                     _TRISA	set	3986
   256  0000                     _TRISB	set	3987
   257  0000                     _TRISC	set	3988
   258  0000                     _TRISD	set	3989
   259  0000                     _TRISE	set	3990
   260  0000                     _TX1STA	set	4012
   261  0000                     _TXREG1	set	4013
   262  0000                     _WPUB	set	3937
   263  0000                     _LATA0	set	31816
   264  0000                     _LATA4	set	31820
   265  0000                     _LATA6	set	31822
   266  0000                     _LATB0	set	31824
   267  0000                     _LATB1	set	31825
   268  0000                     _LATB3	set	31827
   269  0000                     _LATC0	set	31832
   270  0000                     _LATC1	set	31833
   271  0000                     _LATC4	set	31836
   272  0000                     _LATC5	set	31837
   273  0000                     _LATD1	set	31841
   274  0000                     _LATD2	set	31842
   275  0000                     _LATD3	set	31843
   276  0000                     _LATD5	set	31845
   277  000692                     __stringdata:
   278                           	opt stack 0
   279  000692                     STR_2:
   280  000692  42                 	db	66	;'B'
   281  000693  61                 	db	97	;'a'
   282  000694  74                 	db	116	;'t'
   283  000695  74                 	db	116	;'t'
   284  000696  65                 	db	101	;'e'
   285  000697  72                 	db	114	;'r'
   286  000698  79                 	db	121	;'y'
   287  000699  20                 	db	32
   288  00069A  25                 	db	37
   289  00069B  64                 	db	100	;'d'
   290  00069C  20                 	db	32
   291  00069D  3D                 	db	61	;'='
   292  00069E  20                 	db	32
   293  00069F  25                 	db	37
   294  0006A0  30                 	db	48	;'0'
   295  0006A1  2E                 	db	46
   296  0006A2  30                 	db	48	;'0'
   297  0006A3  32                 	db	50	;'2'
   298  0006A4  66                 	db	102	;'f'
   299  0006A5  20                 	db	32
   300  0006A6  0D                 	db	13
   301  0006A7  0A                 	db	10
   302  0006A8  00                 	db	0
   303  0006A9                     STR_1:
   304  0006A9  48                 	db	72	;'H'
   305  0006AA  69                 	db	105	;'i'
   306  0006AB  20                 	db	32
   307  0006AC  52                 	db	82	;'R'
   308  0006AD  69                 	db	105	;'i'
   309  0006AE  63                 	db	99	;'c'
   310  0006AF  6B                 	db	107	;'k'
   311  0006B0  00                 	db	0
   312  0006B1                     __end_of__stringdata:
   313                           	opt stack 0
   314                           
   315                           ; #config settings
   316  0006B1  00                 	db	0	; dummy byte at the end
   317  0000                     
   318                           	psect	nvCOMRAM
   319  000043                     __pnvCOMRAM:
   320                           	opt stack 0
   321  000043                     _timer1ReloadVal:
   322                           	opt stack 0
   323  000043                     	ds	2
   324  000045                     _eusart1TxBufferRemaining:
   325                           	opt stack 0
   326  000045                     	ds	1
   327                           
   328                           	psect	cinit
   329  003D86                     __pcinit:
   330                           	opt stack 0
   331  003D86                     start_initialization:
   332                           	opt stack 0
   333  003D86                     __initialization:
   334                           	opt stack 0
   335                           
   336                           ; Clear objects allocated to BANK1 (230 bytes)
   337  003D86  EE01  F000         	lfsr	0,__pbssBANK1
   338  003D8A  0EE6               	movlw	230
   339  003D8C                     clear_0:
   340  003D8C  6AEE               	clrf	postinc0,c
   341  003D8E  06E8               	decf	wreg,f,c
   342  003D90  E1FD               	bnz	clear_0
   343                           
   344                           ; Clear objects allocated to BANK0 (66 bytes)
   345  003D92  EE00  F0B6         	lfsr	0,__pbssBANK0
   346  003D96  0E42               	movlw	66
   347  003D98                     clear_1:
   348  003D98  6AEE               	clrf	postinc0,c
   349  003D9A  06E8               	decf	wreg,f,c
   350  003D9C  E1FD               	bnz	clear_1
   351                           
   352                           ; Clear objects allocated to COMRAM (19 bytes)
   353  003D9E  EE00  F030         	lfsr	0,__pbssCOMRAM
   354  003DA2  0E13               	movlw	19
   355  003DA4                     clear_2:
   356  003DA4  6AEE               	clrf	postinc0,c
   357  003DA6  06E8               	decf	wreg,f,c
   358  003DA8  E1FD               	bnz	clear_2
   359  003DAA                     end_of_initialization:
   360                           	opt stack 0
   361  003DAA                     __end_of__initialization:
   362                           	opt stack 0
   363  003DAA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   364  003DAC  6EF8               	movwf	tblptru,c
   365  003DAE  0100               	movlb	0
   366  003DB0  EFE5  F01A         	goto	_main	;jump to C main() function
   367                           tblptru	equ	0xFF8
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           
   371                           	psect	bssCOMRAM
   372  000030                     __pbssCOMRAM:
   373                           	opt stack 0
   374  000030                     _eusart1TxBuffer:
   375                           	opt stack 0
   376  000030                     	ds	8
   377  000038                     _ADC_Buffer_Point:
   378                           	opt stack 0
   379  000038                     	ds	2
   380  00003A                     _CountCallBack:
   381                           	opt stack 0
   382  00003A                     	ds	2
   383  00003C                     _Temp_Aquire:
   384                           	opt stack 0
   385  00003C                     	ds	1
   386  00003D                     _Volt_Aquire:
   387                           	opt stack 0
   388  00003D                     	ds	1
   389  00003E                     _eusart1RxCount:
   390                           	opt stack 0
   391  00003E                     	ds	1
   392  00003F                     _eusart1RxHead:
   393                           	opt stack 0
   394  00003F                     	ds	1
   395  000040                     _eusart1RxTail:
   396                           	opt stack 0
   397  000040                     	ds	1
   398  000041                     _eusart1TxHead:
   399                           	opt stack 0
   400  000041                     	ds	1
   401  000042                     _eusart1TxTail:
   402                           	opt stack 0
   403  000042                     	ds	1
   404                           tblptru	equ	0xFF8
   405                           postinc0	equ	0xFEE
   406                           wreg	equ	0xFE8
   407                           
   408                           	psect	bssBANK0
   409  0000B6                     __pbssBANK0:
   410                           	opt stack 0
   411  0000B6                     _Battery_Adc:
   412                           	opt stack 0
   413  0000B6                     	ds	40
   414  0000DE                     _Temp_Done:
   415                           	opt stack 0
   416  0000DE                     	ds	2
   417  0000E0                     _Volt_Done:
   418                           	opt stack 0
   419  0000E0                     	ds	2
   420  0000E2                     _errno:
   421                           	opt stack 0
   422  0000E2                     	ds	2
   423  0000E4                     _Temp_Adc:
   424                           	opt stack 0
   425  0000E4                     	ds	20
   426                           tblptru	equ	0xFF8
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           
   430                           	psect	bssBANK1
   431  000100                     __pbssBANK1:
   432                           	opt stack 0
   433  000100                     _eusart1RxBuffer:
   434                           	opt stack 0
   435  000100                     	ds	50
   436  000132                     _Battery_Volt:
   437                           	opt stack 0
   438  000132                     	ds	30
   439  000150                     _PrevBattery_Volt:
   440                           	opt stack 0
   441  000150                     	ds	30
   442  00016E                     _PrevTemp_DegF:
   443                           	opt stack 0
   444  00016E                     	ds	30
   445  00018C                     _Temp_DegF:
   446                           	opt stack 0
   447  00018C                     	ds	30
   448  0001AA                     _TempBattery_Volt:
   449                           	opt stack 0
   450  0001AA                     	ds	30
   451  0001C8                     _TmpTemp_DegF:
   452                           	opt stack 0
   453  0001C8                     	ds	30
   454                           tblptru	equ	0xFF8
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           
   458                           	psect	cstackBANK2
   459  000200                     __pcstackBANK2:
   460                           	opt stack 0
   461  000200                     _printf$1706:
   462                           	opt stack 0
   463                           
   464                           ; 3 bytes @ 0x0
   465  000200                     	ds	3
   466  000203                     _printf$1053:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0x3
   470  000203                     	ds	4
   471  000207                     printf@vd:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0x7
   475  000207                     	ds	4
   476  00020B                     printf@vd_1055:
   477                           	opt stack 0
   478                           
   479                           ; 4 bytes @ 0xB
   480  00020B                     	ds	4
   481  00020F                     printf@ap:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0xF
   485  00020F                     	ds	2
   486  000211                     printf@integ:
   487                           	opt stack 0
   488                           
   489                           ; 3 bytes @ 0x11
   490  000211                     	ds	3
   491  000214                     printf@_val:
   492                           	opt stack 0
   493                           
   494                           ; 5 bytes @ 0x14
   495  000214                     	ds	5
   496  000219                     printf@exp:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x19
   500  000219                     	ds	2
   501  00021B                     printf@flag:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x1B
   505  00021B                     	ds	2
   506  00021D                     printf@width:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x1D
   510  00021D                     	ds	2
   511  00021F                     printf@fval:
   512                           	opt stack 0
   513                           
   514                           ; 3 bytes @ 0x1F
   515  00021F                     	ds	3
   516  000222                     printf@prec:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x22
   520  000222                     	ds	2
   521  000224                     printf@c:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x24
   525  000224                     	ds	1
   526                           tblptru	equ	0xFF8
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           
   530                           	psect	cstackBANK0
   531  000060                     __pcstackBANK0:
   532                           	opt stack 0
   533  000060                     ?___ftdiv:
   534                           	opt stack 0
   535  000060                     ?_Battery_Get:
   536                           	opt stack 0
   537  000060                     ___llmod@counter:
   538                           	opt stack 0
   539  000060                     Battery_Get@channelnum:
   540                           	opt stack 0
   541  000060                     ___ftdiv@f1:
   542                           	opt stack 0
   543  000060                     ___ftge@ff1:
   544                           	opt stack 0
   545                           
   546                           ; 3 bytes @ 0x0
   547  000060                     	ds	3
   548  000063                     ___ftdiv@f2:
   549                           	opt stack 0
   550  000063                     ___ftge@ff2:
   551                           	opt stack 0
   552                           
   553                           ; 3 bytes @ 0x3
   554  000063                     	ds	3
   555  000066                     ??___ftge:
   556  000066                     ___ftdiv@cntr:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x6
   560  000066                     	ds	1
   561  000067                     ___ftdiv@f3:
   562                           	opt stack 0
   563                           
   564                           ; 3 bytes @ 0x7
   565  000067                     	ds	2
   566  000069                     Battery_Fault@fault:
   567                           	opt stack 0
   568  000069                     Temp_Fault@fault:
   569                           	opt stack 0
   570  000069                     RunBypas@cellbyp:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x9
   574  000069                     	ds	1
   575  00006A                     ___ftdiv@exp:
   576                           	opt stack 0
   577  00006A                     Battery_Fault@i:
   578                           	opt stack 0
   579  00006A                     Temp_Fault@i:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0xA
   583  00006A                     	ds	1
   584  00006B                     ___ftdiv@sign:
   585                           	opt stack 0
   586  00006B                     RunBypas@batvolt:
   587                           	opt stack 0
   588                           
   589                           ; 3 bytes @ 0xB
   590  00006B                     	ds	1
   591  00006C                     ?___ftmul:
   592                           	opt stack 0
   593  00006C                     ___ftmul@f1:
   594                           	opt stack 0
   595                           
   596                           ; 3 bytes @ 0xC
   597  00006C                     	ds	2
   598  00006E                     RunBypas@i:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0xE
   602  00006E                     	ds	1
   603  00006F                     ___ftmul@f2:
   604                           	opt stack 0
   605                           
   606                           ; 3 bytes @ 0xF
   607  00006F                     	ds	3
   608  000072                     ??___ftmul:
   609                           
   610                           ; 0 bytes @ 0x12
   611  000072                     	ds	3
   612  000075                     ___ftmul@exp:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x15
   616  000075                     	ds	1
   617  000076                     ___ftmul@f3_as_product:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x16
   621  000076                     	ds	3
   622  000079                     ___ftmul@cntr:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x19
   626  000079                     	ds	1
   627  00007A                     ___ftmul@sign:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x1A
   631  00007A                     	ds	1
   632  00007B                     ?_fround:
   633                           	opt stack 0
   634  00007B                     ?_scale:
   635                           	opt stack 0
   636                           
   637                           ; 3 bytes @ 0x1B
   638  00007B                     	ds	3
   639  00007E                     _fround$1704:
   640                           	opt stack 0
   641  00007E                     _scale$1705:
   642                           	opt stack 0
   643                           
   644                           ; 3 bytes @ 0x1E
   645  00007E                     	ds	3
   646  000081                     scale@scl:
   647                           	opt stack 0
   648  000081                     _fround$1703:
   649                           	opt stack 0
   650                           
   651                           ; 3 bytes @ 0x21
   652  000081                     	ds	1
   653  000082                     ?___fttol:
   654                           	opt stack 0
   655  000082                     ___fttol@f1:
   656                           	opt stack 0
   657                           
   658                           ; 3 bytes @ 0x22
   659  000082                     	ds	2
   660  000084                     fround@prec:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x24
   664  000084                     	ds	1
   665  000085                     ?___ftadd:
   666                           	opt stack 0
   667  000085                     ___ftadd@f1:
   668                           	opt stack 0
   669                           
   670                           ; 3 bytes @ 0x25
   671  000085                     	ds	1
   672  000086                     ??___fttol:
   673                           
   674                           ; 0 bytes @ 0x26
   675  000086                     	ds	2
   676  000088                     ___ftadd@f2:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x28
   680  000088                     	ds	3
   681  00008B                     ??___ftadd:
   682  00008B                     ___fttol@sign1:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x2B
   686  00008B                     	ds	1
   687  00008C                     ___fttol@lval:
   688                           	opt stack 0
   689                           
   690                           ; 4 bytes @ 0x2C
   691  00008C                     	ds	2
   692  00008E                     ___ftadd@sign:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x2E
   696  00008E                     	ds	1
   697  00008F                     ___ftadd@exp2:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x2F
   701  00008F                     	ds	1
   702  000090                     ___ftadd@exp1:
   703                           	opt stack 0
   704  000090                     ___fttol@exp1:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x30
   708  000090                     	ds	1
   709  000091                     ?___ftsub:
   710                           	opt stack 0
   711  000091                     ?_eval_poly:
   712                           	opt stack 0
   713  000091                     Battery_Filter@x:
   714                           	opt stack 0
   715  000091                     Temp_Filter@x:
   716                           	opt stack 0
   717  000091                     ___ftsub@f1:
   718                           	opt stack 0
   719  000091                     eval_poly@x:
   720                           	opt stack 0
   721                           
   722                           ; 3 bytes @ 0x31
   723  000091                     	ds	2
   724  000093                     ??_Battery_Convert:
   725                           
   726                           ; 0 bytes @ 0x33
   727  000093                     	ds	1
   728  000094                     eval_poly@d:
   729                           	opt stack 0
   730  000094                     ___ftsub@f2:
   731                           	opt stack 0
   732                           
   733                           ; 3 bytes @ 0x34
   734  000094                     	ds	1
   735  000095                     Battery_Convert@x:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x35
   739  000095                     	ds	1
   740  000096                     eval_poly@n:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x36
   744  000096                     	ds	1
   745  000097                     ?_printf:
   746                           	opt stack 0
   747  000097                     printf@f:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x37
   751  000097                     	ds	1
   752  000098                     ??_eval_poly:
   753                           
   754                           ; 0 bytes @ 0x38
   755  000098                     	ds	2
   756  00009A                     eval_poly@res:
   757                           	opt stack 0
   758                           
   759                           ; 3 bytes @ 0x3A
   760  00009A                     	ds	3
   761  00009D                     ?_log:
   762                           	opt stack 0
   763  00009D                     log@x:
   764                           	opt stack 0
   765                           
   766                           ; 3 bytes @ 0x3D
   767  00009D                     	ds	1
   768  00009E                     ??_printf:
   769                           
   770                           ; 0 bytes @ 0x3E
   771  00009E                     	ds	2
   772  0000A0                     log@exponent:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x40
   776  0000A0                     	ds	2
   777  0000A2                     ??_Temp_Convert:
   778                           
   779                           ; 0 bytes @ 0x42
   780  0000A2                     	ds	2
   781  0000A4                     _Temp_Convert$1701:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x44
   785  0000A4                     	ds	2
   786  0000A6                     _Temp_Convert$1702:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x46
   790  0000A6                     	ds	2
   791  0000A8                     Temp_Convert@x:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x48
   795  0000A8                     	ds	2
   796  0000AA                     Temp_Convert@steinhart:
   797                           	opt stack 0
   798                           
   799                           ; 3 bytes @ 0x4A
   800  0000AA                     	ds	3
   801  0000AD                     
   802                           ; 2 bytes @ 0x4D
   803  0000AD                     	ds	2
   804  0000AF                     
   805                           ; 3 bytes @ 0x4F
   806  0000AF                     	ds	3
   807  0000B2                     main@x:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x52
   811  0000B2                     	ds	2
   812  0000B4                     main@x_971:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x54
   816  0000B4                     	ds	2
   817                           tblptru	equ	0xFF8
   818                           postinc0	equ	0xFEE
   819                           wreg	equ	0xFE8
   820                           
   821                           	psect	cstackCOMRAM
   822  000001                     __pcstackCOMRAM:
   823                           	opt stack 0
   824  000001                     ??_ADC_StartConversion:
   825  000001                     ?_ADC_GetConversionResult:
   826                           	opt stack 0
   827  000001                     Set_4051@Channel:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x0
   831  000001                     	ds	1
   832  000002                     ADC_StartConversion@channel:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x1
   836  000002                     	ds	1
   837  000003                     ??_Set_4051:
   838  000003                     ??_TMR1_ISR:
   839  000003                     ??_ADC_GetConversionResult:
   840                           
   841                           ; 0 bytes @ 0x2
   842  000003                     	ds	2
   843  000005                     ??_ADC_ISR:
   844                           
   845                           ; 0 bytes @ 0x4
   846  000005                     	ds	6
   847  00000B                     ADC_ISR@ADC_Result:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0xA
   851  00000B                     	ds	2
   852  00000D                     ??_INTERRUPT_InterruptManager:
   853                           
   854                           ; 0 bytes @ 0xC
   855  00000D                     	ds	14
   856  00001B                     ??_isdigit:
   857  00001B                     ?___awmod:
   858                           	opt stack 0
   859  00001B                     ?___ftpack:
   860                           	opt stack 0
   861  00001B                     ?_frexp:
   862                           	opt stack 0
   863  00001B                     ?___ftneg:
   864                           	opt stack 0
   865  00001B                     ?__tdiv_to_l_:
   866                           	opt stack 0
   867  00001B                     ?__div_to_l_:
   868                           	opt stack 0
   869  00001B                     ?___lldiv:
   870                           	opt stack 0
   871  00001B                     EUSART1_Write@txData:
   872                           	opt stack 0
   873  00001B                     SetBypass@pin:
   874                           	opt stack 0
   875  00001B                     ___awmod@dividend:
   876                           	opt stack 0
   877  00001B                     __div_to_l_@f1:
   878                           	opt stack 0
   879  00001B                     ___ftpack@arg:
   880                           	opt stack 0
   881  00001B                     __tdiv_to_l_@f1:
   882                           	opt stack 0
   883  00001B                     ___ftneg@f1:
   884                           	opt stack 0
   885  00001B                     frexp@value:
   886                           	opt stack 0
   887  00001B                     ___lldiv@dividend:
   888                           	opt stack 0
   889                           
   890                           ; 4 bytes @ 0x1A
   891  00001B                     	ds	1
   892  00001C                     putch@txData:
   893                           	opt stack 0
   894  00001C                     _isdigit$1336:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x1B
   898  00001C                     	ds	1
   899  00001D                     isdigit@c:
   900                           	opt stack 0
   901  00001D                     SetBypass@state:
   902                           	opt stack 0
   903  00001D                     ___awmod@divisor:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x1C
   907  00001D                     	ds	1
   908  00001E                     ___ftpack@exp:
   909                           	opt stack 0
   910  00001E                     frexp@eptr:
   911                           	opt stack 0
   912  00001E                     __div_to_l_@f2:
   913                           	opt stack 0
   914  00001E                     __tdiv_to_l_@f2:
   915                           	opt stack 0
   916                           
   917                           ; 3 bytes @ 0x1D
   918  00001E                     	ds	1
   919  00001F                     ??_SetBypass:
   920  00001F                     ___awmod@counter:
   921                           	opt stack 0
   922  00001F                     ___ftpack@sign:
   923                           	opt stack 0
   924  00001F                     ___lldiv@divisor:
   925                           	opt stack 0
   926                           
   927                           ; 4 bytes @ 0x1E
   928  00001F                     	ds	1
   929  000020                     ??___ftpack:
   930  000020                     ??_frexp:
   931  000020                     ___awmod@sign:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0x1F
   935  000020                     	ds	1
   936  000021                     ??__tdiv_to_l_:
   937  000021                     ??__div_to_l_:
   938  000021                     ?___awdiv:
   939                           	opt stack 0
   940  000021                     ___awdiv@dividend:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x20
   944  000021                     	ds	2
   945  000023                     ?___altoft:
   946                           	opt stack 0
   947  000023                     ?___lltoft:
   948                           	opt stack 0
   949  000023                     ___awdiv@divisor:
   950                           	opt stack 0
   951  000023                     ___altoft@c:
   952                           	opt stack 0
   953  000023                     ___lldiv@quotient:
   954                           	opt stack 0
   955  000023                     ___lltoft@c:
   956                           	opt stack 0
   957                           
   958                           ; 4 bytes @ 0x22
   959  000023                     	ds	1
   960  000024                     __tdiv_to_l_@quot:
   961                           	opt stack 0
   962                           
   963                           ; 4 bytes @ 0x23
   964  000024                     	ds	1
   965  000025                     ___awdiv@counter:
   966                           	opt stack 0
   967  000025                     __div_to_l_@quot:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0x24
   971  000025                     	ds	1
   972  000026                     ___awdiv@sign:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x25
   976  000026                     	ds	1
   977  000027                     ??___altoft:
   978  000027                     ??___lltoft:
   979  000027                     ___lldiv@counter:
   980                           	opt stack 0
   981  000027                     ___awdiv@quotient:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x26
   985  000027                     	ds	1
   986  000028                     ?___llmod:
   987                           	opt stack 0
   988  000028                     __tdiv_to_l_@cntr:
   989                           	opt stack 0
   990  000028                     ___llmod@dividend:
   991                           	opt stack 0
   992                           
   993                           ; 4 bytes @ 0x27
   994  000028                     	ds	1
   995  000029                     ?___wmul:
   996                           	opt stack 0
   997  000029                     ?___awtoft:
   998                           	opt stack 0
   999  000029                     __div_to_l_@cntr:
  1000                           	opt stack 0
  1001  000029                     __tdiv_to_l_@exp1:
  1002                           	opt stack 0
  1003  000029                     ___wmul@multiplier:
  1004                           	opt stack 0
  1005  000029                     ___awtoft@c:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x28
  1009  000029                     	ds	1
  1010  00002A                     __div_to_l_@exp1:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x29
  1014  00002A                     	ds	1
  1015  00002B                     ___altoft@exp:
  1016                           	opt stack 0
  1017  00002B                     ___lltoft@exp:
  1018                           	opt stack 0
  1019  00002B                     ___wmul@multiplicand:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x2A
  1023  00002B                     	ds	1
  1024  00002C                     ___altoft@sign:
  1025                           	opt stack 0
  1026  00002C                     ___awtoft@sign:
  1027                           	opt stack 0
  1028  00002C                     ___llmod@divisor:
  1029                           	opt stack 0
  1030                           
  1031                           ; 4 bytes @ 0x2B
  1032  00002C                     	ds	1
  1033  00002D                     ??___ftdiv:
  1034  00002D                     ___wmul@product:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x2C
  1038  00002D                     	ds	2
  1039  00002F                     
  1040                           ; 0 bytes @ 0x2E
  1041  00002F                     	ds	1
  1042  000030                     tblptru	equ	0xFF8
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           
  1046                           ; 0 bytes @ 0x2F
  1047 ;;
  1048 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1049 ;;
  1050 ;; *************** function _main *****************
  1051 ;; Defined at:
  1052 ;;		line 30 in file "Main.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;  argc            2   77[BANK0 ] int 
  1055 ;;  argv            3   79[BANK0 ] PTR PTR unsigned char 
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  x               2   84[BANK0 ] int 
  1058 ;;  x               2   82[BANK0 ] int 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  2   77[BANK0 ] int 
  1061 ;; Registers used:
  1062 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1068 ;;      Params:         0       5       0       0       0       0       0
  1069 ;;      Locals:         0       4       0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0
  1071 ;;      Totals:         0       9       0       0       0       0       0
  1072 ;;Total ram usage:        9 bytes
  1073 ;; Hardware stack levels required when called:    9
  1074 ;; This function calls:
  1075 ;;		_Battery_Convert
  1076 ;;		_Battery_Fault
  1077 ;;		_Battery_Get
  1078 ;;		_RunBypas
  1079 ;;		_SYSTEM_Initialize
  1080 ;;		_Temp_Convert
  1081 ;;		_Temp_Fault
  1082 ;;		_printf
  1083 ;; This function is called by:
  1084 ;;		Startup code after reset
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text0
  1089  0035CA                     __ptext0:
  1090                           	opt stack 0
  1091  0035CA                     _main:
  1092                           	opt stack 22
  1093                           
  1094                           ;Main.c: 32: SYSTEM_Initialize();
  1095                           
  1096                           ;incstack = 0
  1097  0035CA  EC38  F01F         	call	_SYSTEM_Initialize	;wreg free
  1098                           
  1099                           ;Main.c: 51: (INTCONbits.GIE = 1);
  1100  0035CE  8EF2               	bsf	intcon,7,c	;volatile
  1101                           
  1102                           ;Main.c: 54: (INTCONbits.PEIE = 1);
  1103  0035D0  8CF2               	bsf	intcon,6,c	;volatile
  1104                           
  1105                           ;Main.c: 63: printf("Hi Rick");
  1106  0035D2  0E06               	movlw	high STR_1
  1107  0035D4  0100               	movlb	0	; () banked
  1108  0035D6  6F98               	movwf	(printf@f+1)& (0+255),b
  1109  0035D8  0EA9               	movlw	low STR_1
  1110  0035DA  0100               	movlb	0	; () banked
  1111  0035DC  6F97               	movwf	printf@f& (0+255),b
  1112  0035DE  EC59  F003         	call	_printf	;wreg free
  1113  0035E2                     l5728:
  1114                           
  1115                           ;Main.c: 65: {
  1116                           ;Main.c: 66: if (Temp_Done)
  1117  0035E2  0100               	movlb	0	; () banked
  1118  0035E4  51DF               	movf	(_Temp_Done+1)& (0+255),w,b
  1119  0035E6  11DE               	iorwf	_Temp_Done& (0+255),w,b
  1120  0035E8  B4D8               	btfsc	status,2,c
  1121  0035EA  D017               	goto	l5744
  1122                           
  1123                           ; BSR set to: 0
  1124                           ;Main.c: 67: {
  1125                           ;Main.c: 68: Temp_Convert();
  1126  0035EC  EC76  F011         	call	_Temp_Convert	;wreg free
  1127                           
  1128                           ;Main.c: 69: Temp_Fault();
  1129  0035F0  EC03  F01D         	call	_Temp_Fault	;wreg free
  1130                           
  1131                           ;Main.c: 70: for (int x = 0;x<9;x++)
  1132  0035F4  0E00               	movlw	0
  1133  0035F6  0100               	movlb	0	; () banked
  1134  0035F8  6FB3               	movwf	(main@x+1)& (0+255),b
  1135  0035FA  0E00               	movlw	0
  1136  0035FC  0100               	movlb	0	; () banked
  1137  0035FE  6FB2               	movwf	main@x& (0+255),b
  1138  003600                     
  1139                           ; BSR set to: 0
  1140  003600  0100               	movlb	0	; () banked
  1141  003602  51B3               	movf	(main@x+1)& (0+255),w,b
  1142  003604  0A80               	xorlw	128
  1143  003606  0F80               	addlw	-128
  1144  003608  0E09               	movlw	9
  1145  00360A  B4D8               	btfsc	status,2,c
  1146  00360C  5DB2               	subwf	main@x& (0+255),w,b
  1147  00360E  B0D8               	btfsc	status,0,c
  1148  003610  D004               	goto	l5744
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;Main.c: 71: {
  1152                           
  1153                           ; BSR set to: 0
  1154                           
  1155                           ; BSR set to: 0
  1156  003612  0100               	movlb	0	; () banked
  1157  003614  4BB2               	infsnz	main@x& (0+255),f,b
  1158  003616  2BB3               	incf	(main@x+1)& (0+255),f,b
  1159  003618  D7F3               	goto	L1
  1160  00361A                     l5744:
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;Main.c: 73: }
  1164                           ;Main.c: 74: }
  1165                           ;Main.c: 75: if (Volt_Done)
  1166  00361A  0100               	movlb	0	; () banked
  1167  00361C  51E1               	movf	(_Volt_Done+1)& (0+255),w,b
  1168  00361E  11E0               	iorwf	_Volt_Done& (0+255),w,b
  1169  003620  B4D8               	btfsc	status,2,c
  1170  003622  D7DF               	goto	l5728
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;Main.c: 76: {
  1174                           ;Main.c: 77: Battery_Convert();
  1175  003624  EC2B  F018         	call	_Battery_Convert	;wreg free
  1176                           
  1177                           ;Main.c: 78: Battery_Fault();
  1178  003628  EC7C  F01A         	call	_Battery_Fault	;wreg free
  1179                           
  1180                           ;Main.c: 79: RunBypas();
  1181  00362C  EC9E  F019         	call	_RunBypas	;wreg free
  1182                           
  1183                           ;Main.c: 80: for (int x = 0;x<9;x++)
  1184  003630  0E00               	movlw	0
  1185  003632  0100               	movlb	0	; () banked
  1186  003634  6FB5               	movwf	(main@x_971+1)& (0+255),b
  1187  003636  0E00               	movlw	0
  1188  003638  0100               	movlb	0	; () banked
  1189  00363A  6FB4               	movwf	main@x_971& (0+255),b
  1190  00363C                     
  1191                           ; BSR set to: 0
  1192  00363C  0100               	movlb	0	; () banked
  1193  00363E  51B5               	movf	(main@x_971+1)& (0+255),w,b
  1194  003640  0A80               	xorlw	128
  1195  003642  0F80               	addlw	-128
  1196  003644  0E09               	movlw	9
  1197  003646  B4D8               	btfsc	status,2,c
  1198  003648  5DB4               	subwf	main@x_971& (0+255),w,b
  1199  00364A  B0D8               	btfsc	status,0,c
  1200  00364C  D7CA               	goto	l5728
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;Main.c: 81: {
  1204                           ;Main.c: 82: printf("Battery %d = %0.02f \r\n", x,Battery_Get(x));
  1205                           
  1206                           ; BSR set to: 0
  1207                           
  1208                           ; BSR set to: 0
  1209  00364E  0E06               	movlw	high STR_2
  1210  003650  0100               	movlb	0	; () banked
  1211  003652  6F98               	movwf	(printf@f+1)& (0+255),b
  1212  003654  0E92               	movlw	low STR_2
  1213  003656  0100               	movlb	0	; () banked
  1214  003658  6F97               	movwf	printf@f& (0+255),b
  1215  00365A  C0B4  F099         	movff	main@x_971,?_printf+2
  1216  00365E  C0B5  F09A         	movff	main@x_971+1,?_printf+3
  1217  003662  C0B4  F060         	movff	main@x_971,Battery_Get@channelnum
  1218  003666  C0B5  F061         	movff	main@x_971+1,Battery_Get@channelnum+1
  1219  00366A  EC77  F01E         	call	_Battery_Get	;wreg free
  1220  00366E  C060  F09B         	movff	?_Battery_Get,?_printf+4
  1221  003672  C061  F09C         	movff	?_Battery_Get+1,?_printf+5
  1222  003676  C062  F09D         	movff	?_Battery_Get+2,?_printf+6
  1223  00367A  EC59  F003         	call	_printf	;wreg free
  1224  00367E  0100               	movlb	0	; () banked
  1225  003680  4BB4               	infsnz	main@x_971& (0+255),f,b
  1226  003682  2BB5               	incf	(main@x_971+1)& (0+255),f,b
  1227  003684  D7DB               	goto	L2
  1228  003686                     __end_of_main:
  1229                           	opt stack 0
  1230                           tblptru	equ	0xFF8
  1231                           intcon	equ	0xFF2
  1232                           postinc0	equ	0xFEE
  1233                           wreg	equ	0xFE8
  1234                           status	equ	0xFD8
  1235                           
  1236 ;; *************** function _printf *****************
  1237 ;; Defined at:
  1238 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;  f               2   55[BANK0 ] PTR const unsigned char 
  1241 ;;		 -> STR_2(23), STR_1(8), 
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  vd              4    7[BANK2 ] unsigned long 
  1244 ;;  vd              4   11[BANK2 ] unsigned long 
  1245 ;;  _val            5   20[BANK2 ] struct .
  1246 ;;  fval            3   31[BANK2 ] struct .
  1247 ;;  integ           3   17[BANK2 ] struct .
  1248 ;;  ival            3    0        struct .
  1249 ;;  prec            2   34[BANK2 ] int 
  1250 ;;  width           2   29[BANK2 ] int 
  1251 ;;  flag            2   27[BANK2 ] unsigned short 
  1252 ;;  exp             2   25[BANK2 ] int 
  1253 ;;  ap              2   15[BANK2 ] PTR void [1]
  1254 ;;		 -> ?_printf(2), 
  1255 ;;  c               1   36[BANK2 ] char 
  1256 ;;  d               1    0        unsigned char 
  1257 ;; Return value:  Size  Location     Type
  1258 ;;                  2   55[BANK0 ] int 
  1259 ;; Registers used:
  1260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1261 ;; Tracked objects:
  1262 ;;		On entry : 0/0
  1263 ;;		On exit  : 0/0
  1264 ;;		Unchanged: 0/0
  1265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1266 ;;      Params:         0       7       0       0       0       0       0
  1267 ;;      Locals:         0       0       0      37       0       0       0
  1268 ;;      Temps:          0       6       0       0       0       0       0
  1269 ;;      Totals:         0      13       0      37       0       0       0
  1270 ;;Total ram usage:       50 bytes
  1271 ;; Hardware stack levels used:    1
  1272 ;; Hardware stack levels required when called:    7
  1273 ;; This function calls:
  1274 ;;		___awdiv
  1275 ;;		___ftadd
  1276 ;;		___ftge
  1277 ;;		___ftmul
  1278 ;;		___ftneg
  1279 ;;		___ftsub
  1280 ;;		___fttol
  1281 ;;		___lldiv
  1282 ;;		___llmod
  1283 ;;		___lltoft
  1284 ;;		___wmul
  1285 ;;		__div_to_l_
  1286 ;;		__tdiv_to_l_
  1287 ;;		_fround
  1288 ;;		_isdigit
  1289 ;;		_putch
  1290 ;;		_scale
  1291 ;; This function is called by:
  1292 ;;		_main
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	text1
  1297  0006B2                     __ptext1:
  1298                           	opt stack 0
  1299  0006B2                     _printf:
  1300                           	opt stack 23
  1301                           
  1302                           ;doprnt.c: 466: va_list ap;
  1303                           ;doprnt.c: 499: signed char c;
  1304                           ;doprnt.c: 501: int width;
  1305                           ;doprnt.c: 504: int prec;
  1306                           ;doprnt.c: 508: unsigned short flag;
  1307                           ;doprnt.c: 515: char d;
  1308                           ;doprnt.c: 516: double fval, integ;
  1309                           ;doprnt.c: 517: int exp;
  1310                           ;doprnt.c: 518: double ival;
  1311                           ;doprnt.c: 519: union {
  1312                           ;doprnt.c: 520: unsigned long _val;
  1313                           ;doprnt.c: 521: struct {
  1314                           ;doprnt.c: 522: const char * _cp;
  1315                           ;doprnt.c: 523: unsigned _len;
  1316                           ;doprnt.c: 524: } _str;
  1317                           ;doprnt.c: 525: } _val;
  1318                           ;doprnt.c: 542: *ap = __va_start();
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;incstack = 0
  1322  0006B2  0100               	movlb	0	; () banked
  1323  0006B4  0E00               	movlw	high (?_printf+2)
  1324  0006B6  0102               	movlb	2	; () banked
  1325  0006B8  6F10               	movwf	(printf@ap+1)& (0+255),b
  1326  0006BA  0100               	movlb	0	; () banked
  1327  0006BC  0E99               	movlw	low (?_printf+2)
  1328  0006BE  0102               	movlb	2	; () banked
  1329  0006C0  6F0F               	movwf	printf@ap& (0+255),b
  1330                           
  1331                           ;doprnt.c: 545: while(c = *f++) {
  1332  0006C2  EF84  F009         	goto	l5692
  1333  0006C6                     l5396:
  1334                           
  1335                           ; BSR set to: 2
  1336                           ;doprnt.c: 547: if(c != '%')
  1337  0006C6  0102               	movlb	2	; () banked
  1338  0006C8  5124               	movf	printf@c& (0+255),w,b
  1339  0006CA  0A25               	xorlw	37
  1340  0006CC  B4D8               	btfsc	status,2,c
  1341  0006CE  D006               	goto	l5400
  1342                           
  1343                           ; BSR set to: 2
  1344                           ;doprnt.c: 549: {
  1345                           ;doprnt.c: 550: (putch(c) );
  1346  0006D0  0102               	movlb	2	; () banked
  1347  0006D2  5124               	movf	printf@c& (0+255),w,b
  1348  0006D4  EC8D  F01F         	call	_putch
  1349                           
  1350                           ;doprnt.c: 551: continue;
  1351  0006D8  EF84  F009         	goto	l5692
  1352  0006DC                     l5400:
  1353                           
  1354                           ;doprnt.c: 552: }
  1355                           ;doprnt.c: 555: width = 0;
  1356  0006DC  0E00               	movlw	0
  1357  0006DE  0102               	movlb	2	; () banked
  1358  0006E0  6F1E               	movwf	(printf@width+1)& (0+255),b
  1359  0006E2  0E00               	movlw	0
  1360  0006E4  0102               	movlb	2	; () banked
  1361  0006E6  6F1D               	movwf	printf@width& (0+255),b
  1362                           
  1363                           ;doprnt.c: 557: flag = 0;
  1364  0006E8  0E00               	movlw	0
  1365  0006EA  0102               	movlb	2	; () banked
  1366  0006EC  6F1C               	movwf	(printf@flag+1)& (0+255),b
  1367  0006EE  0E00               	movlw	0
  1368  0006F0  0102               	movlb	2	; () banked
  1369  0006F2  6F1B               	movwf	printf@flag& (0+255),b
  1370  0006F4  D005               	goto	l5406
  1371  0006F6                     l5402:
  1372                           
  1373                           ;doprnt.c: 589: flag |= 0x04;
  1374  0006F6  0102               	movlb	2	; () banked
  1375  0006F8  851B               	bsf	printf@flag& (0+255),2,b
  1376                           
  1377                           ;doprnt.c: 590: f++;
  1378  0006FA  0100               	movlb	0	; () banked
  1379  0006FC  4B97               	infsnz	printf@f& (0+255),f,b
  1380  0006FE  2B98               	incf	(printf@f+1)& (0+255),f,b
  1381  000700                     l5406:
  1382  000700  0100               	movlb	0	; () banked
  1383  000702  C097  FFF6         	movff	printf@f,tblptrl
  1384  000706  0100               	movlb	0	; () banked
  1385  000708  C098  FFF7         	movff	printf@f+1,tblptrh
  1386  00070C                     	if	0	;tblptru may be non-zero
  1387  00070C                     	endif
  1388  00070C                     	if	0	;tblptru may be non-zero
  1389  00070C                     	endif
  1390  00070C  0008               	tblrd		*
  1391  00070E  50F5               	movf	tablat,w,c
  1392                           
  1393                           ; Switch size 1, requested type "space"
  1394                           ; Number of cases is 1, Range of values is 48 to 48
  1395                           ; switch strategies available:
  1396                           ; Name         Instructions Cycles
  1397                           ; simple_byte            4     3 (average)
  1398                           ;	Chosen strategy is simple_byte
  1399  000710  0A30               	xorlw	48	; case 48
  1400  000712  B4D8               	btfsc	status,2,c
  1401  000714  D7F0               	goto	l5402
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  1405                           
  1406                           ; BSR set to: 0
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;doprnt.c: 595: }
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;doprnt.c: 594: break;
  1413  000716  0100               	movlb	0	; () banked
  1414  000718  C097  FFF6         	movff	printf@f,tblptrl
  1415  00071C  0100               	movlb	0	; () banked
  1416  00071E  C098  FFF7         	movff	printf@f+1,tblptrh
  1417  000722                     	if	0	;tblptru may be non-zero
  1418  000722                     	endif
  1419  000722                     	if	0	;tblptru may be non-zero
  1420  000722                     	endif
  1421  000722  0008               	tblrd		*
  1422  000724  50F5               	movf	tablat,w,c
  1423  000726  EC28  F01F         	call	_isdigit
  1424  00072A  A0D8               	btfss	status,0,c
  1425  00072C  D043               	goto	l5420
  1426                           
  1427                           ;doprnt.c: 607: width = 0;
  1428  00072E  0E00               	movlw	0
  1429  000730  0102               	movlb	2	; () banked
  1430  000732  6F1E               	movwf	(printf@width+1)& (0+255),b
  1431  000734  0E00               	movlw	0
  1432  000736  0102               	movlb	2	; () banked
  1433  000738  6F1D               	movwf	printf@width& (0+255),b
  1434  00073A                     l5412:
  1435                           
  1436                           ;doprnt.c: 609: width *= 10;
  1437  00073A  C21D  F029         	movff	printf@width,___wmul@multiplier
  1438  00073E  C21E  F02A         	movff	printf@width+1,___wmul@multiplier+1
  1439  000742  0E00               	movlw	0
  1440  000744  6E2C               	movwf	___wmul@multiplicand+1,c
  1441  000746  0E0A               	movlw	10
  1442  000748  6E2B               	movwf	___wmul@multiplicand,c
  1443  00074A  EC04  F01F         	call	___wmul	;wreg free
  1444  00074E  C029  F21D         	movff	?___wmul,printf@width
  1445  000752  C02A  F21E         	movff	?___wmul+1,printf@width+1
  1446                           
  1447                           ;doprnt.c: 610: width += *f++ - '0';
  1448  000756  0ED0               	movlw	208
  1449  000758  0100               	movlb	0	; () banked
  1450  00075A  6F9E               	movwf	??_printf& (0+255),b
  1451  00075C  0EFF               	movlw	255
  1452  00075E  6F9F               	movwf	(??_printf+1)& (0+255),b
  1453  000760  0100               	movlb	0	; () banked
  1454  000762  C097  FFF6         	movff	printf@f,tblptrl
  1455  000766  0100               	movlb	0	; () banked
  1456  000768  C098  FFF7         	movff	printf@f+1,tblptrh
  1457  00076C                     	if	0	;tblptru may be non-zero
  1458  00076C                     	endif
  1459  00076C                     	if	0	;tblptru may be non-zero
  1460  00076C                     	endif
  1461  00076C  0008               	tblrd		*
  1462  00076E  50F5               	movf	tablat,w,c
  1463  000770  0100               	movlb	0	; () banked
  1464  000772  6FA0               	movwf	(??_printf+2)& (0+255),b
  1465  000774  6BA1               	clrf	(??_printf+3)& (0+255),b
  1466  000776  0100               	movlb	0	; () banked
  1467  000778  519E               	movf	??_printf& (0+255),w,b
  1468  00077A  0100               	movlb	0	; () banked
  1469  00077C  27A0               	addwf	(??_printf+2)& (0+255),f,b
  1470  00077E  0100               	movlb	0	; () banked
  1471  000780  519F               	movf	(??_printf+1)& (0+255),w,b
  1472  000782  0100               	movlb	0	; () banked
  1473  000784  23A1               	addwfc	(??_printf+3)& (0+255),f,b
  1474  000786  0100               	movlb	0	; () banked
  1475  000788  51A0               	movf	(??_printf+2)& (0+255),w,b
  1476  00078A  0102               	movlb	2	; () banked
  1477  00078C  271D               	addwf	printf@width& (0+255),f,b
  1478  00078E  0100               	movlb	0	; () banked
  1479  000790  51A1               	movf	(??_printf+3)& (0+255),w,b
  1480  000792  0102               	movlb	2	; () banked
  1481  000794  231E               	addwfc	(printf@width+1)& (0+255),f,b
  1482                           
  1483                           ; BSR set to: 2
  1484  000796  0100               	movlb	0	; () banked
  1485  000798  4B97               	infsnz	printf@f& (0+255),f,b
  1486  00079A  2B98               	incf	(printf@f+1)& (0+255),f,b
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  1490  00079C  0100               	movlb	0	; () banked
  1491  00079E  C097  FFF6         	movff	printf@f,tblptrl
  1492  0007A2  0100               	movlb	0	; () banked
  1493  0007A4  C098  FFF7         	movff	printf@f+1,tblptrh
  1494  0007A8                     	if	0	;tblptru may be non-zero
  1495  0007A8                     	endif
  1496  0007A8                     	if	0	;tblptru may be non-zero
  1497  0007A8                     	endif
  1498  0007A8  0008               	tblrd		*
  1499  0007AA  50F5               	movf	tablat,w,c
  1500  0007AC  EC28  F01F         	call	_isdigit
  1501  0007B0  B0D8               	btfsc	status,0,c
  1502  0007B2  D7C3               	goto	l5412
  1503  0007B4                     l5420:
  1504                           
  1505                           ;doprnt.c: 617: }
  1506                           ;doprnt.c: 620: if(*f == '.') {
  1507  0007B4  0100               	movlb	0	; () banked
  1508  0007B6  C097  FFF6         	movff	printf@f,tblptrl
  1509  0007BA  0100               	movlb	0	; () banked
  1510  0007BC  C098  FFF7         	movff	printf@f+1,tblptrh
  1511  0007C0                     	if	0	;tblptru may be non-zero
  1512  0007C0                     	endif
  1513  0007C0                     	if	0	;tblptru may be non-zero
  1514  0007C0                     	endif
  1515  0007C0  0008               	tblrd		*
  1516  0007C2  50F5               	movf	tablat,w,c
  1517  0007C4  0A2E               	xorlw	46
  1518  0007C6  A4D8               	btfss	status,2,c
  1519  0007C8  D039               	goto	l5432
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;doprnt.c: 621: flag |= 0x4000;
  1523  0007CA  0102               	movlb	2	; () banked
  1524  0007CC  8D1C               	bsf	(printf@flag+1)& (0+255),6,b
  1525                           
  1526                           ;doprnt.c: 622: f++;
  1527  0007CE  0100               	movlb	0	; () banked
  1528  0007D0  4B97               	infsnz	printf@f& (0+255),f,b
  1529  0007D2  2B98               	incf	(printf@f+1)& (0+255),f,b
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;doprnt.c: 629: {
  1533                           ;doprnt.c: 630: prec = 0;
  1534  0007D4  0E00               	movlw	0
  1535  0007D6  0102               	movlb	2	; () banked
  1536  0007D8  6F23               	movwf	(printf@prec+1)& (0+255),b
  1537  0007DA  0E00               	movlw	0
  1538  0007DC  0102               	movlb	2	; () banked
  1539  0007DE  6F22               	movwf	printf@prec& (0+255),b
  1540                           
  1541                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  1542  0007E0  D020               	goto	l5430
  1543  0007E2                     l5426:
  1544                           
  1545                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  1546  0007E2  C222  F029         	movff	printf@prec,___wmul@multiplier
  1547  0007E6  C223  F02A         	movff	printf@prec+1,___wmul@multiplier+1
  1548  0007EA  0E00               	movlw	0
  1549  0007EC  6E2C               	movwf	___wmul@multiplicand+1,c
  1550  0007EE  0E0A               	movlw	10
  1551  0007F0  6E2B               	movwf	___wmul@multiplicand,c
  1552  0007F2  EC04  F01F         	call	___wmul	;wreg free
  1553  0007F6  0100               	movlb	0	; () banked
  1554  0007F8  C097  FFF6         	movff	printf@f,tblptrl
  1555  0007FC  0100               	movlb	0	; () banked
  1556  0007FE  C098  FFF7         	movff	printf@f+1,tblptrh
  1557  000802                     	if	0	;tblptru may be non-zero
  1558  000802                     	endif
  1559  000802                     	if	0	;tblptru may be non-zero
  1560  000802                     	endif
  1561  000802  0008               	tblrd		*
  1562  000804  50F5               	movf	tablat,w,c
  1563  000806  2629               	addwf	?___wmul,f,c
  1564  000808  0E00               	movlw	0
  1565  00080A  222A               	addwfc	?___wmul+1,f,c
  1566  00080C  0ED0               	movlw	208
  1567  00080E  2429               	addwf	?___wmul,w,c
  1568  000810  0102               	movlb	2	; () banked
  1569  000812  6F22               	movwf	printf@prec& (0+255),b
  1570  000814  0EFF               	movlw	255
  1571  000816  202A               	addwfc	?___wmul+1,w,c
  1572  000818  0102               	movlb	2	; () banked
  1573  00081A  6F23               	movwf	(printf@prec+1)& (0+255),b
  1574                           
  1575                           ; BSR set to: 2
  1576  00081C  0100               	movlb	0	; () banked
  1577  00081E  4B97               	infsnz	printf@f& (0+255),f,b
  1578  000820  2B98               	incf	(printf@f+1)& (0+255),f,b
  1579  000822                     l5430:
  1580  000822  0100               	movlb	0	; () banked
  1581  000824  C097  FFF6         	movff	printf@f,tblptrl
  1582  000828  0100               	movlb	0	; () banked
  1583  00082A  C098  FFF7         	movff	printf@f+1,tblptrh
  1584  00082E                     	if	0	;tblptru may be non-zero
  1585  00082E                     	endif
  1586  00082E                     	if	0	;tblptru may be non-zero
  1587  00082E                     	endif
  1588  00082E  0008               	tblrd		*
  1589  000830  50F5               	movf	tablat,w,c
  1590  000832  EC28  F01F         	call	_isdigit
  1591  000836  A0D8               	btfss	status,0,c
  1592  000838  D00D               	goto	l5440
  1593  00083A  D7D3               	goto	l5426
  1594  00083C                     l5432:
  1595                           
  1596                           ;doprnt.c: 635: prec = 0;
  1597  00083C  0E00               	movlw	0
  1598  00083E  0102               	movlb	2	; () banked
  1599  000840  6F23               	movwf	(printf@prec+1)& (0+255),b
  1600  000842  0E00               	movlw	0
  1601  000844  0102               	movlb	2	; () banked
  1602  000846  6F22               	movwf	printf@prec& (0+255),b
  1603                           
  1604                           ; BSR set to: 2
  1605                           ;doprnt.c: 637: flag |= 0x1000;
  1606  000848  0102               	movlb	2	; () banked
  1607  00084A  891C               	bsf	(printf@flag+1)& (0+255),4,b
  1608  00084C  D003               	goto	l5440
  1609  00084E                     l5436:
  1610                           
  1611                           ; BSR set to: 2
  1612                           ;doprnt.c: 672: flag |= 0x400;
  1613  00084E  0102               	movlb	2	; () banked
  1614  000850  851C               	bsf	(printf@flag+1)& (0+255),2,b
  1615                           
  1616                           ;doprnt.c: 673: break;
  1617  000852  D01C               	goto	l5442
  1618  000854                     l5440:
  1619  000854  0100               	movlb	0	; () banked
  1620  000856  C097  FFF6         	movff	printf@f,tblptrl
  1621  00085A  0100               	movlb	0	; () banked
  1622  00085C  C098  FFF7         	movff	printf@f+1,tblptrh
  1623  000860  0100               	movlb	0	; () banked
  1624  000862  4B97               	infsnz	printf@f& (0+255),f,b
  1625  000864  2B98               	incf	(printf@f+1)& (0+255),f,b
  1626  000866                     	if	0	;tblptru may be non-zero
  1627  000866                     	endif
  1628  000866                     	if	0	;tblptru may be non-zero
  1629  000866                     	endif
  1630  000866  0008               	tblrd		*
  1631  000868  0102               	movlb	2	; () banked
  1632  00086A  CFF5 F224          	movff	tablat,printf@c
  1633  00086E  0102               	movlb	2	; () banked
  1634  000870  5124               	movf	printf@c& (0+255),w,b
  1635                           
  1636                           ; Switch size 1, requested type "space"
  1637                           ; Number of cases is 4, Range of values is 0 to 105
  1638                           ; switch strategies available:
  1639                           ; Name         Instructions Cycles
  1640                           ; simple_byte           13     7 (average)
  1641                           ;	Chosen strategy is simple_byte
  1642  000872  0A00               	xorlw	0	; case 0
  1643  000874  B4D8               	btfsc	status,2,c
  1644  000876  0012               	return	
  1645  000878  0A64               	xorlw	100	; case 100
  1646  00087A  B4D8               	btfsc	status,2,c
  1647  00087C  D007               	goto	l5442
  1648  00087E  0A02               	xorlw	2	; case 102
  1649  000880  B4D8               	btfsc	status,2,c
  1650  000882  D7E5               	goto	l5436
  1651  000884  0A0F               	xorlw	15	; case 105
  1652  000886  A4D8               	btfss	status,2,c
  1653  000888  EF84  F009         	goto	l5692
  1654  00088C                     l5442:
  1655                           
  1656                           ; BSR set to: 2
  1657                           ;doprnt.c: 834: if(flag & (0x700)) {
  1658  00088C  0E07               	movlw	7
  1659  00088E  0102               	movlb	2	; () banked
  1660  000890  151C               	andwf	(printf@flag+1)& (0+255),w,b
  1661  000892  B4D8               	btfsc	status,2,c
  1662  000894  D39E               	goto	l5606
  1663                           
  1664                           ; BSR set to: 2
  1665                           ;doprnt.c: 836: if(flag & 0x1000)
  1666  000896  0102               	movlb	2	; () banked
  1667  000898  A91C               	btfss	(printf@flag+1)& (0+255),4,b
  1668  00089A  D006               	goto	l5448
  1669                           
  1670                           ; BSR set to: 2
  1671                           ;doprnt.c: 838: prec = 6;
  1672  00089C  0E00               	movlw	0
  1673  00089E  0102               	movlb	2	; () banked
  1674  0008A0  6F23               	movwf	(printf@prec+1)& (0+255),b
  1675  0008A2  0E06               	movlw	6
  1676  0008A4  0102               	movlb	2	; () banked
  1677  0008A6  6F22               	movwf	printf@prec& (0+255),b
  1678  0008A8                     l5448:
  1679                           
  1680                           ; BSR set to: 2
  1681                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1682  0008A8  C20F  FFD9         	movff	printf@ap,fsr2l
  1683  0008AC  C210  FFDA         	movff	printf@ap+1,fsr2h
  1684  0008B0  0102               	movlb	2	; () banked
  1685  0008B2  CFDE F21F          	movff	postinc2,printf@fval
  1686  0008B6  0102               	movlb	2	; () banked
  1687  0008B8  CFDE F220          	movff	postinc2,printf@fval+1
  1688  0008BC  0102               	movlb	2	; () banked
  1689  0008BE  CFDD F221          	movff	postdec2,printf@fval+2
  1690                           
  1691                           ; BSR set to: 2
  1692  0008C2  0E03               	movlw	3
  1693  0008C4  0102               	movlb	2	; () banked
  1694  0008C6  270F               	addwf	printf@ap& (0+255),f,b
  1695  0008C8  0E00               	movlw	0
  1696  0008CA  0102               	movlb	2	; () banked
  1697  0008CC  2310               	addwfc	(printf@ap+1)& (0+255),f,b
  1698                           
  1699                           ; BSR set to: 2
  1700                           ;doprnt.c: 840: if(fval < 0.0) {
  1701  0008CE  0102               	movlb	2	; () banked
  1702  0008D0  5121               	movf	(printf@fval+2)& (0+255),w,b
  1703  0008D2  0A80               	xorlw	128
  1704  0008D4  0F80               	addlw	128
  1705  0008D6  E107               	bnz	u5965
  1706  0008D8  0E00               	movlw	0
  1707  0008DA  0102               	movlb	2	; () banked
  1708  0008DC  5D20               	subwf	(printf@fval+1)& (0+255),w,b
  1709  0008DE  E103               	bnz	u5965
  1710  0008E0  0E00               	movlw	0
  1711  0008E2  0102               	movlb	2	; () banked
  1712  0008E4  5D1F               	subwf	printf@fval& (0+255),w,b
  1713  0008E6                     u5965:
  1714  0008E6  B0D8               	btfsc	status,0,c
  1715  0008E8  D011               	goto	l5458
  1716                           
  1717                           ; BSR set to: 2
  1718                           ;doprnt.c: 841: fval = -fval;
  1719  0008EA  C21F  F01B         	movff	printf@fval,___ftneg@f1
  1720  0008EE  C220  F01C         	movff	printf@fval+1,___ftneg@f1+1
  1721  0008F2  C221  F01D         	movff	printf@fval+2,___ftneg@f1+2
  1722  0008F6  ECF1  F01E         	call	___ftneg	;wreg free
  1723  0008FA  C01B  F21F         	movff	?___ftneg,printf@fval
  1724  0008FE  C01C  F220         	movff	?___ftneg+1,printf@fval+1
  1725  000902  C01D  F221         	movff	?___ftneg+2,printf@fval+2
  1726                           
  1727                           ;doprnt.c: 842: flag |= 0x03;
  1728  000906  0E03               	movlw	3
  1729  000908  0102               	movlb	2	; () banked
  1730  00090A  131B               	iorwf	printf@flag& (0+255),f,b
  1731  00090C                     l5458:
  1732                           
  1733                           ; BSR set to: 2
  1734                           ;doprnt.c: 843: }
  1735                           ;doprnt.c: 844: exp = 0;
  1736  00090C  0E00               	movlw	0
  1737  00090E  0102               	movlb	2	; () banked
  1738  000910  6F1A               	movwf	(printf@exp+1)& (0+255),b
  1739  000912  0E00               	movlw	0
  1740  000914  0102               	movlb	2	; () banked
  1741  000916  6F19               	movwf	printf@exp& (0+255),b
  1742                           
  1743                           ; BSR set to: 2
  1744                           ;doprnt.c: 845: if( fval!=0) {
  1745  000918  0E7F               	movlw	127
  1746  00091A  0102               	movlb	2	; () banked
  1747  00091C  1521               	andwf	(printf@fval+2)& (0+255),w,b
  1748  00091E  0102               	movlb	2	; () banked
  1749  000920  1120               	iorwf	(printf@fval+1)& (0+255),w,b
  1750  000922  0102               	movlb	2	; () banked
  1751  000924  111F               	iorwf	printf@fval& (0+255),w,b
  1752  000926  B4D8               	btfsc	status,2,c
  1753  000928  D0A2               	goto	l5486
  1754                           
  1755                           ; BSR set to: 2
  1756                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1757  00092A  0E82               	movlw	130
  1758  00092C  0100               	movlb	0	; () banked
  1759  00092E  6F9E               	movwf	??_printf& (0+255),b
  1760  000930  0EFF               	movlw	255
  1761  000932  6F9F               	movwf	(??_printf+1)& (0+255),b
  1762  000934  0102               	movlb	2	; () banked
  1763  000936  C21F  F0A0         	movff	printf@fval,??_printf+2
  1764  00093A  0102               	movlb	2	; () banked
  1765  00093C  C220  F0A1         	movff	printf@fval+1,??_printf+3
  1766  000940  0102               	movlb	2	; () banked
  1767  000942  C221  F0A2         	movff	printf@fval+2,??_printf+4
  1768  000946  0102               	movlb	2	; () banked
  1769  000948  C222  F0A3         	movff	printf@fval+3,??_printf+5
  1770  00094C  0E10               	movlw	16
  1771  00094E  D006               	goto	u5980
  1772  000950                     u5985:
  1773  000950  0100               	movlb	0	; () banked
  1774  000952  90D8               	bcf	status,0,c
  1775  000954  33A3               	rrcf	(??_printf+5)& (0+255),f,b
  1776  000956  33A2               	rrcf	(??_printf+4)& (0+255),f,b
  1777  000958  33A1               	rrcf	(??_printf+3)& (0+255),f,b
  1778  00095A  33A0               	rrcf	(??_printf+2)& (0+255),f,b
  1779  00095C                     u5980:
  1780  00095C  2EE8               	decfsz	wreg,f,c
  1781  00095E  D7F8               	goto	u5985
  1782  000960  0100               	movlb	0	; () banked
  1783  000962  51A0               	movf	(??_printf+2)& (0+255),w,b
  1784  000964  0100               	movlb	0	; () banked
  1785  000966  259E               	addwf	??_printf& (0+255),w,b
  1786  000968  0102               	movlb	2	; () banked
  1787  00096A  6F19               	movwf	printf@exp& (0+255),b
  1788  00096C  0E00               	movlw	0
  1789  00096E  0100               	movlb	0	; () banked
  1790  000970  219F               	addwfc	(??_printf+1)& (0+255),w,b
  1791  000972  0102               	movlb	2	; () banked
  1792  000974  6F1A               	movwf	(printf@exp+1)& (0+255),b
  1793                           
  1794                           ; BSR set to: 2
  1795                           ;doprnt.c: 847: exp--;
  1796  000976  0102               	movlb	2	; () banked
  1797  000978  0719               	decf	printf@exp& (0+255),f,b
  1798  00097A  A0D8               	btfss	status,0,c
  1799  00097C  071A               	decf	(printf@exp+1)& (0+255),f,b
  1800                           
  1801                           ; BSR set to: 2
  1802                           ;doprnt.c: 848: exp *= 3;
  1803  00097E  C219  F029         	movff	printf@exp,___wmul@multiplier
  1804  000982  C21A  F02A         	movff	printf@exp+1,___wmul@multiplier+1
  1805  000986  0E00               	movlw	0
  1806  000988  6E2C               	movwf	___wmul@multiplicand+1,c
  1807  00098A  0E03               	movlw	3
  1808  00098C  6E2B               	movwf	___wmul@multiplicand,c
  1809  00098E  EC04  F01F         	call	___wmul	;wreg free
  1810  000992  C029  F219         	movff	?___wmul,printf@exp
  1811  000996  C02A  F21A         	movff	?___wmul+1,printf@exp+1
  1812                           
  1813                           ;doprnt.c: 849: exp /= 10;
  1814  00099A  C219  F021         	movff	printf@exp,___awdiv@dividend
  1815  00099E  C21A  F022         	movff	printf@exp+1,___awdiv@dividend+1
  1816  0009A2  0E00               	movlw	0
  1817  0009A4  6E24               	movwf	___awdiv@divisor+1,c
  1818  0009A6  0E0A               	movlw	10
  1819  0009A8  6E23               	movwf	___awdiv@divisor,c
  1820  0009AA  EC97  F01B         	call	___awdiv	;wreg free
  1821  0009AE  C021  F219         	movff	?___awdiv,printf@exp
  1822  0009B2  C022  F21A         	movff	?___awdiv+1,printf@exp+1
  1823                           
  1824                           ;doprnt.c: 850: if(exp < 0)
  1825  0009B6  0102               	movlb	2	; () banked
  1826  0009B8  511A               	movf	(printf@exp+1)& (0+255),w,b
  1827  0009BA  0A80               	xorlw	128
  1828  0009BC  6EF3               	movwf	prodl,c
  1829  0009BE  0E80               	movlw	128
  1830  0009C0  5CF3               	subwf	prodl,w,c
  1831  0009C2  0E00               	movlw	0
  1832  0009C4  B4D8               	btfsc	status,2,c
  1833  0009C6  5D19               	subwf	printf@exp& (0+255),w,b
  1834  0009C8  B0D8               	btfsc	status,0,c
  1835  0009CA  D004               	goto	l5474
  1836                           
  1837                           ; BSR set to: 2
  1838                           ;doprnt.c: 851: exp--;
  1839  0009CC  0102               	movlb	2	; () banked
  1840  0009CE  0719               	decf	printf@exp& (0+255),f,b
  1841  0009D0  A0D8               	btfss	status,0,c
  1842  0009D2  071A               	decf	(printf@exp+1)& (0+255),f,b
  1843  0009D4                     l5474:
  1844                           
  1845                           ; BSR set to: 2
  1846                           ;doprnt.c: 855: integ = scale(-exp);
  1847  0009D4  0102               	movlb	2	; () banked
  1848  0009D6  5119               	movf	printf@exp& (0+255),w,b
  1849  0009D8  0800               	sublw	0
  1850  0009DA  ECAE  F00C         	call	_scale
  1851  0009DE  C07B  F211         	movff	?_scale,printf@integ
  1852  0009E2  C07C  F212         	movff	?_scale+1,printf@integ+1
  1853  0009E6  C07D  F213         	movff	?_scale+2,printf@integ+2
  1854                           
  1855                           ;doprnt.c: 856: integ *= fval;
  1856  0009EA  C211  F06C         	movff	printf@integ,___ftmul@f1
  1857  0009EE  C212  F06D         	movff	printf@integ+1,___ftmul@f1+1
  1858  0009F2  C213  F06E         	movff	printf@integ+2,___ftmul@f1+2
  1859  0009F6  C21F  F06F         	movff	printf@fval,___ftmul@f2
  1860  0009FA  C220  F070         	movff	printf@fval+1,___ftmul@f2+1
  1861  0009FE  C221  F071         	movff	printf@fval+2,___ftmul@f2+2
  1862  000A02  ECC6  F014         	call	___ftmul	;wreg free
  1863  000A06  C06C  F211         	movff	?___ftmul,printf@integ
  1864  000A0A  C06D  F212         	movff	?___ftmul+1,printf@integ+1
  1865  000A0E  C06E  F213         	movff	?___ftmul+2,printf@integ+2
  1866                           
  1867                           ;doprnt.c: 857: if(integ < 1.0)
  1868  000A12  C211  F060         	movff	printf@integ,___ftge@ff1
  1869  000A16  C212  F061         	movff	printf@integ+1,___ftge@ff1+1
  1870  000A1A  C213  F062         	movff	printf@integ+2,___ftge@ff1+2
  1871  000A1E  0E00               	movlw	0
  1872  000A20  0100               	movlb	0	; () banked
  1873  000A22  6F63               	movwf	___ftge@ff2& (0+255),b
  1874  000A24  0E80               	movlw	128
  1875  000A26  0100               	movlb	0	; () banked
  1876  000A28  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1877  000A2A  0E3F               	movlw	63
  1878  000A2C  0100               	movlb	0	; () banked
  1879  000A2E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1880  000A30  EC12  F01A         	call	___ftge	;wreg free
  1881  000A34  B0D8               	btfsc	status,0,c
  1882  000A36  D005               	goto	l5482
  1883                           
  1884                           ;doprnt.c: 858: exp--;
  1885  000A38  0102               	movlb	2	; () banked
  1886  000A3A  0719               	decf	printf@exp& (0+255),f,b
  1887  000A3C  A0D8               	btfss	status,0,c
  1888  000A3E  071A               	decf	(printf@exp+1)& (0+255),f,b
  1889  000A40  D016               	goto	l5486
  1890  000A42                     l5482:
  1891                           
  1892                           ;doprnt.c: 859: else if(integ >= 10.0)
  1893  000A42  C211  F060         	movff	printf@integ,___ftge@ff1
  1894  000A46  C212  F061         	movff	printf@integ+1,___ftge@ff1+1
  1895  000A4A  C213  F062         	movff	printf@integ+2,___ftge@ff1+2
  1896  000A4E  0E00               	movlw	0
  1897  000A50  0100               	movlb	0	; () banked
  1898  000A52  6F63               	movwf	___ftge@ff2& (0+255),b
  1899  000A54  0E20               	movlw	32
  1900  000A56  0100               	movlb	0	; () banked
  1901  000A58  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1902  000A5A  0E41               	movlw	65
  1903  000A5C  0100               	movlb	0	; () banked
  1904  000A5E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1905  000A60  EC12  F01A         	call	___ftge	;wreg free
  1906  000A64  A0D8               	btfss	status,0,c
  1907  000A66  D003               	goto	l5486
  1908                           
  1909                           ;doprnt.c: 860: exp++;
  1910  000A68  0102               	movlb	2	; () banked
  1911  000A6A  4B19               	infsnz	printf@exp& (0+255),f,b
  1912  000A6C  2B1A               	incf	(printf@exp+1)& (0+255),f,b
  1913  000A6E                     l5486:
  1914                           
  1915                           ;doprnt.c: 861: }
  1916                           ;doprnt.c: 1121: if(prec <= 12)
  1917  000A6E  0102               	movlb	2	; () banked
  1918  000A70  5123               	movf	(printf@prec+1)& (0+255),w,b
  1919  000A72  0A80               	xorlw	128
  1920  000A74  6EF3               	movwf	prodl,c
  1921  000A76  0E80               	movlw	128
  1922  000A78  5CF3               	subwf	prodl,w,c
  1923  000A7A  0E0D               	movlw	13
  1924  000A7C  B4D8               	btfsc	status,2,c
  1925  000A7E  5D22               	subwf	printf@prec& (0+255),w,b
  1926  000A80  B0D8               	btfsc	status,0,c
  1927  000A82  D018               	goto	l5490
  1928                           
  1929                           ; BSR set to: 2
  1930                           ;doprnt.c: 1122: fval += fround(prec);
  1931  000A84  C21F  F085         	movff	printf@fval,___ftadd@f1
  1932  000A88  C220  F086         	movff	printf@fval+1,___ftadd@f1+1
  1933  000A8C  C221  F087         	movff	printf@fval+2,___ftadd@f1+2
  1934  000A90  0102               	movlb	2	; () banked
  1935  000A92  5122               	movf	printf@prec& (0+255),w,b
  1936  000A94  ECE9  F00E         	call	_fround
  1937  000A98  C07B  F088         	movff	?_fround,___ftadd@f2
  1938  000A9C  C07C  F089         	movff	?_fround+1,___ftadd@f2+1
  1939  000AA0  C07D  F08A         	movff	?_fround+2,___ftadd@f2+2
  1940  000AA4  EC36  F010         	call	___ftadd	;wreg free
  1941  000AA8  C085  F21F         	movff	?___ftadd,printf@fval
  1942  000AAC  C086  F220         	movff	?___ftadd+1,printf@fval+1
  1943  000AB0  C087  F221         	movff	?___ftadd+2,printf@fval+2
  1944  000AB4                     l5490:
  1945                           
  1946                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1947  000AB4  0102               	movlb	2	; () banked
  1948  000AB6  511A               	movf	(printf@exp+1)& (0+255),w,b
  1949  000AB8  0A80               	xorlw	128
  1950  000ABA  6EF3               	movwf	prodl,c
  1951  000ABC  0E80               	movlw	128
  1952  000ABE  5CF3               	subwf	prodl,w,c
  1953  000AC0  0E0A               	movlw	10
  1954  000AC2  B4D8               	btfsc	status,2,c
  1955  000AC4  5D19               	subwf	printf@exp& (0+255),w,b
  1956  000AC6  B0D8               	btfsc	status,0,c
  1957  000AC8  D029               	goto	l5498
  1958                           
  1959                           ; BSR set to: 2
  1960  000ACA  0E7F               	movlw	127
  1961  000ACC  0102               	movlb	2	; () banked
  1962  000ACE  1521               	andwf	(printf@fval+2)& (0+255),w,b
  1963  000AD0  0102               	movlb	2	; () banked
  1964  000AD2  1120               	iorwf	(printf@fval+1)& (0+255),w,b
  1965  000AD4  0102               	movlb	2	; () banked
  1966  000AD6  111F               	iorwf	printf@fval& (0+255),w,b
  1967  000AD8  B4D8               	btfsc	status,2,c
  1968  000ADA  D06F               	goto	l5514
  1969                           
  1970                           ; BSR set to: 2
  1971  000ADC  C21F  F082         	movff	printf@fval,___fttol@f1
  1972  000AE0  C220  F083         	movff	printf@fval+1,___fttol@f1+1
  1973  000AE4  C221  F084         	movff	printf@fval+2,___fttol@f1+2
  1974  000AE8  EC08  F014         	call	___fttol	;wreg free
  1975  000AEC  C082  F09E         	movff	?___fttol,??_printf
  1976  000AF0  C083  F09F         	movff	?___fttol+1,??_printf+1
  1977  000AF4  C084  F0A0         	movff	?___fttol+2,??_printf+2
  1978  000AF8  C085  F0A1         	movff	?___fttol+3,??_printf+3
  1979  000AFC  0100               	movlb	0	; () banked
  1980  000AFE  51A1               	movf	(??_printf+3)& (0+255),w,b
  1981  000B00  119E               	iorwf	??_printf& (0+255),w,b
  1982  000B02  119F               	iorwf	(??_printf+1)& (0+255),w,b
  1983  000B04  11A0               	iorwf	(??_printf+2)& (0+255),w,b
  1984  000B06  A4D8               	btfss	status,2,c
  1985  000B08  D058               	goto	l5514
  1986                           
  1987                           ; BSR set to: 0
  1988  000B0A  0102               	movlb	2	; () banked
  1989  000B0C  511A               	movf	(printf@exp+1)& (0+255),w,b
  1990  000B0E  0A80               	xorlw	128
  1991  000B10  0F80               	addlw	-128
  1992  000B12  0E02               	movlw	2
  1993  000B14  B4D8               	btfsc	status,2,c
  1994  000B16  5D19               	subwf	printf@exp& (0+255),w,b
  1995  000B18  A0D8               	btfss	status,0,c
  1996  000B1A  D04F               	goto	l5514
  1997  000B1C                     l5498:
  1998                           
  1999                           ; BSR set to: 2
  2000                           ;doprnt.c: 1129: if(integ < 4.294967296){
  2001  000B1C  C211  F060         	movff	printf@integ,___ftge@ff1
  2002  000B20  C212  F061         	movff	printf@integ+1,___ftge@ff1+1
  2003  000B24  C213  F062         	movff	printf@integ+2,___ftge@ff1+2
  2004  000B28  0E70               	movlw	112
  2005  000B2A  0100               	movlb	0	; () banked
  2006  000B2C  6F63               	movwf	___ftge@ff2& (0+255),b
  2007  000B2E  0E89               	movlw	137
  2008  000B30  0100               	movlb	0	; () banked
  2009  000B32  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2010  000B34  0E40               	movlw	64
  2011  000B36  0100               	movlb	0	; () banked
  2012  000B38  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2013  000B3A  EC12  F01A         	call	___ftge	;wreg free
  2014  000B3E  B0D8               	btfsc	status,0,c
  2015  000B40  D003               	goto	l5502
  2016                           
  2017                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2018  000B42  0102               	movlb	2	; () banked
  2019  000B44  0EF7               	movlw	247
  2020  000B46  D002               	goto	L3
  2021  000B48                     l5502:
  2022                           
  2023                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2024  000B48  0102               	movlb	2	; () banked
  2025  000B4A  0EF8               	movlw	248
  2026  000B4C                     L3:
  2027  000B4C  0102               	movlb	2	; () banked
  2028  000B4E  2719               	addwf	printf@exp& (0+255),f,b
  2029  000B50  0EFF               	movlw	255
  2030  000B52  0102               	movlb	2	; () banked
  2031  000B54  231A               	addwfc	(printf@exp+1)& (0+255),f,b
  2032                           
  2033                           ; BSR set to: 2
  2034                           ;doprnt.c: 1133: }
  2035                           ;doprnt.c: 1134: integ = scale(exp);
  2036                           
  2037                           ; BSR set to: 2
  2038  000B56  0102               	movlb	2	; () banked
  2039  000B58  5119               	movf	printf@exp& (0+255),w,b
  2040  000B5A  ECAE  F00C         	call	_scale
  2041  000B5E  C07B  F211         	movff	?_scale,printf@integ
  2042  000B62  C07C  F212         	movff	?_scale+1,printf@integ+1
  2043  000B66  C07D  F213         	movff	?_scale+2,printf@integ+2
  2044                           
  2045                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2046  000B6A  C21F  F01B         	movff	printf@fval,__tdiv_to_l_@f1
  2047  000B6E  C220  F01C         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2048  000B72  C221  F01D         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2049  000B76  C211  F01E         	movff	printf@integ,__tdiv_to_l_@f2
  2050  000B7A  C212  F01F         	movff	printf@integ+1,__tdiv_to_l_@f2+1
  2051  000B7E  C213  F020         	movff	printf@integ+2,__tdiv_to_l_@f2+2
  2052  000B82  EC92  F017         	call	__tdiv_to_l_	;wreg free
  2053  000B86  C01B  F203         	movff	?__tdiv_to_l_,_printf$1053
  2054  000B8A  C01C  F204         	movff	?__tdiv_to_l_+1,_printf$1053+1
  2055  000B8E  C01D  F205         	movff	?__tdiv_to_l_+2,_printf$1053+2
  2056  000B92  C01E  F206         	movff	?__tdiv_to_l_+3,_printf$1053+3
  2057  000B96  C203  F214         	movff	_printf$1053,printf@_val
  2058  000B9A  C204  F215         	movff	_printf$1053+1,printf@_val+1
  2059  000B9E  C205  F216         	movff	_printf$1053+2,printf@_val+2
  2060  000BA2  C206  F217         	movff	_printf$1053+3,printf@_val+3
  2061                           
  2062                           ;doprnt.c: 1138: fval = 0.0;
  2063  000BA6  0E00               	movlw	0
  2064  000BA8  0102               	movlb	2	; () banked
  2065  000BAA  6F1F               	movwf	printf@fval& (0+255),b
  2066  000BAC  0E00               	movlw	0
  2067  000BAE  0102               	movlb	2	; () banked
  2068  000BB0  6F20               	movwf	(printf@fval+1)& (0+255),b
  2069  000BB2  0E00               	movlw	0
  2070  000BB4  0102               	movlb	2	; () banked
  2071  000BB6  6F21               	movwf	(printf@fval+2)& (0+255),b
  2072                           
  2073                           ;doprnt.c: 1139: } else {
  2074  000BB8  D034               	goto	l5518
  2075  000BBA                     l5514:
  2076                           
  2077                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  2078  000BBA  C21F  F082         	movff	printf@fval,___fttol@f1
  2079  000BBE  C220  F083         	movff	printf@fval+1,___fttol@f1+1
  2080  000BC2  C221  F084         	movff	printf@fval+2,___fttol@f1+2
  2081  000BC6  EC08  F014         	call	___fttol	;wreg free
  2082  000BCA  C082  F214         	movff	?___fttol,printf@_val
  2083  000BCE  C083  F215         	movff	?___fttol+1,printf@_val+1
  2084  000BD2  C084  F216         	movff	?___fttol+2,printf@_val+2
  2085  000BD6  C085  F217         	movff	?___fttol+3,printf@_val+3
  2086                           
  2087                           ;doprnt.c: 1141: fval -= (double)_val._val;
  2088  000BDA  C21F  F091         	movff	printf@fval,___ftsub@f1
  2089  000BDE  C220  F092         	movff	printf@fval+1,___ftsub@f1+1
  2090  000BE2  C221  F093         	movff	printf@fval+2,___ftsub@f1+2
  2091  000BE6  C214  F023         	movff	printf@_val,___lltoft@c
  2092  000BEA  C215  F024         	movff	printf@_val+1,___lltoft@c+1
  2093  000BEE  C216  F025         	movff	printf@_val+2,___lltoft@c+2
  2094  000BF2  C217  F026         	movff	printf@_val+3,___lltoft@c+3
  2095  000BF6  EC7A  F01D         	call	___lltoft	;wreg free
  2096  000BFA  C023  F094         	movff	?___lltoft,___ftsub@f2
  2097  000BFE  C024  F095         	movff	?___lltoft+1,___ftsub@f2+1
  2098  000C02  C025  F096         	movff	?___lltoft+2,___ftsub@f2+2
  2099  000C06  EC1E  F01E         	call	___ftsub	;wreg free
  2100  000C0A  C091  F21F         	movff	?___ftsub,printf@fval
  2101  000C0E  C092  F220         	movff	?___ftsub+1,printf@fval+1
  2102  000C12  C093  F221         	movff	?___ftsub+2,printf@fval+2
  2103                           
  2104                           ;doprnt.c: 1142: exp = 0;
  2105  000C16  0E00               	movlw	0
  2106  000C18  0102               	movlb	2	; () banked
  2107  000C1A  6F1A               	movwf	(printf@exp+1)& (0+255),b
  2108  000C1C  0E00               	movlw	0
  2109  000C1E  0102               	movlb	2	; () banked
  2110  000C20  6F19               	movwf	printf@exp& (0+255),b
  2111  000C22                     l5518:
  2112                           
  2113                           ; BSR set to: 2
  2114                           ;doprnt.c: 1143: }
  2115                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2116  000C22  0E01               	movlw	1
  2117  000C24  0102               	movlb	2	; () banked
  2118  000C26  6F24               	movwf	printf@c& (0+255),b
  2119  000C28                     
  2120                           ; BSR set to: 2
  2121  000C28  0102               	movlb	2	; () banked
  2122  000C2A  5124               	movf	printf@c& (0+255),w,b
  2123  000C2C  0A0A               	xorlw	10
  2124  000C2E  B4D8               	btfsc	status,2,c
  2125  000C30  D01E               	goto	l5532
  2126                           
  2127                           ; BSR set to: 2
  2128                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  2129                           
  2130                           ; BSR set to: 2
  2131                           
  2132                           ; BSR set to: 2
  2133  000C32  0102               	movlb	2	; () banked
  2134  000C34  5124               	movf	printf@c& (0+255),w,b
  2135  000C36  0D04               	mullw	4
  2136  000C38  0E01               	movlw	low _dpowers
  2137  000C3A  24F3               	addwf	prodl,w,c
  2138  000C3C  6EF6               	movwf	tblptrl,c
  2139  000C3E  0E06               	movlw	high _dpowers
  2140  000C40  20F4               	addwfc	prodh,w,c
  2141  000C42  6EF7               	movwf	tblptrh,c
  2142  000C44                     	if	0	;There are less than 3 active tblptr bytes
  2143  000C44                     	endif
  2144  000C44  0009               	tblrd		*+
  2145  000C46  50F5               	movf	tablat,w,c
  2146  000C48  0102               	movlb	2	; () banked
  2147  000C4A  5D14               	subwf	printf@_val& (0+255),w,b
  2148  000C4C  0009               	tblrd		*+
  2149  000C4E  50F5               	movf	tablat,w,c
  2150  000C50  0102               	movlb	2	; () banked
  2151  000C52  5915               	subwfb	(printf@_val+1)& (0+255),w,b
  2152  000C54  0009               	tblrd		*+
  2153  000C56  50F5               	movf	tablat,w,c
  2154  000C58  0102               	movlb	2	; () banked
  2155  000C5A  5916               	subwfb	(printf@_val+2)& (0+255),w,b
  2156  000C5C  0009               	tblrd		*+
  2157  000C5E  50F5               	movf	tablat,w,c
  2158  000C60  0102               	movlb	2	; () banked
  2159  000C62  5917               	subwfb	(printf@_val+3)& (0+255),w,b
  2160  000C64  A0D8               	btfss	status,0,c
  2161  000C66  D003               	goto	l5532
  2162                           
  2163                           ; BSR set to: 2
  2164                           
  2165                           ; BSR set to: 2
  2166                           
  2167                           ; BSR set to: 2
  2168                           ;doprnt.c: 1147: break;
  2169  000C68  0102               	movlb	2	; () banked
  2170  000C6A  2B24               	incf	printf@c& (0+255),f,b
  2171  000C6C  D7DD               	goto	L4
  2172  000C6E                     l5532:
  2173                           
  2174                           ; BSR set to: 2
  2175                           ;doprnt.c: 1151: width -= prec + c + exp;
  2176  000C6E  0102               	movlb	2	; () banked
  2177  000C70  C224  F09E         	movff	printf@c,??_printf
  2178  000C74  0100               	movlb	0	; () banked
  2179  000C76  6B9F               	clrf	(??_printf+1)& (0+255),b
  2180  000C78  BF9E               	btfsc	??_printf& (0+255),7,b
  2181  000C7A  079F               	decf	(??_printf+1)& (0+255),f,b
  2182  000C7C  0102               	movlb	2	; () banked
  2183  000C7E  5122               	movf	printf@prec& (0+255),w,b
  2184  000C80  0100               	movlb	0	; () banked
  2185  000C82  279E               	addwf	??_printf& (0+255),f,b
  2186  000C84  0102               	movlb	2	; () banked
  2187  000C86  5123               	movf	(printf@prec+1)& (0+255),w,b
  2188  000C88  0100               	movlb	0	; () banked
  2189  000C8A  239F               	addwfc	(??_printf+1)& (0+255),f,b
  2190  000C8C  0102               	movlb	2	; () banked
  2191  000C8E  5119               	movf	printf@exp& (0+255),w,b
  2192  000C90  0100               	movlb	0	; () banked
  2193  000C92  279E               	addwf	??_printf& (0+255),f,b
  2194  000C94  0102               	movlb	2	; () banked
  2195  000C96  511A               	movf	(printf@exp+1)& (0+255),w,b
  2196  000C98  0100               	movlb	0	; () banked
  2197  000C9A  239F               	addwfc	(??_printf+1)& (0+255),f,b
  2198  000C9C  0100               	movlb	0	; () banked
  2199  000C9E  519E               	movf	??_printf& (0+255),w,b
  2200  000CA0  0102               	movlb	2	; () banked
  2201  000CA2  5F1D               	subwf	printf@width& (0+255),f,b
  2202  000CA4  0100               	movlb	0	; () banked
  2203  000CA6  519F               	movf	(??_printf+1)& (0+255),w,b
  2204  000CA8  0102               	movlb	2	; () banked
  2205  000CAA  5B1E               	subwfb	(printf@width+1)& (0+255),f,b
  2206                           
  2207                           ;doprnt.c: 1152: if(
  2208                           ;doprnt.c: 1156: prec)
  2209  000CAC  0102               	movlb	2	; () banked
  2210  000CAE  5123               	movf	(printf@prec+1)& (0+255),w,b
  2211  000CB0  1122               	iorwf	printf@prec& (0+255),w,b
  2212  000CB2  B4D8               	btfsc	status,2,c
  2213  000CB4  D004               	goto	l5536
  2214                           
  2215                           ; BSR set to: 2
  2216                           ;doprnt.c: 1157: width--;
  2217  000CB6  0102               	movlb	2	; () banked
  2218  000CB8  071D               	decf	printf@width& (0+255),f,b
  2219  000CBA  A0D8               	btfss	status,0,c
  2220  000CBC  071E               	decf	(printf@width+1)& (0+255),f,b
  2221  000CBE                     l5536:
  2222                           
  2223                           ; BSR set to: 2
  2224                           ;doprnt.c: 1158: if(flag & 0x03)
  2225  000CBE  0E03               	movlw	3
  2226  000CC0  0102               	movlb	2	; () banked
  2227  000CC2  151B               	andwf	printf@flag& (0+255),w,b
  2228  000CC4  0100               	movlb	0	; () banked
  2229  000CC6  6F9E               	movwf	??_printf& (0+255),b
  2230  000CC8  0E00               	movlw	0
  2231  000CCA  0102               	movlb	2	; () banked
  2232  000CCC  151C               	andwf	(printf@flag+1)& (0+255),w,b
  2233  000CCE  0100               	movlb	0	; () banked
  2234  000CD0  6F9F               	movwf	(??_printf+1)& (0+255),b
  2235  000CD2  0100               	movlb	0	; () banked
  2236  000CD4  519F               	movf	(??_printf+1)& (0+255),w,b
  2237  000CD6  119E               	iorwf	??_printf& (0+255),w,b
  2238  000CD8  B4D8               	btfsc	status,2,c
  2239  000CDA  D004               	goto	l5540
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;doprnt.c: 1159: width--;
  2243  000CDC  0102               	movlb	2	; () banked
  2244  000CDE  071D               	decf	printf@width& (0+255),f,b
  2245  000CE0  A0D8               	btfss	status,0,c
  2246  000CE2  071E               	decf	(printf@width+1)& (0+255),f,b
  2247  000CE4                     l5540:
  2248                           
  2249                           ;doprnt.c: 1162: if(flag & 0x04) {
  2250  000CE4  0102               	movlb	2	; () banked
  2251  000CE6  A51B               	btfss	printf@flag& (0+255),2,b
  2252  000CE8  D02D               	goto	l5556
  2253                           
  2254                           ; BSR set to: 2
  2255                           ;doprnt.c: 1166: if(flag & 0x03)
  2256  000CEA  0E03               	movlw	3
  2257  000CEC  0102               	movlb	2	; () banked
  2258  000CEE  151B               	andwf	printf@flag& (0+255),w,b
  2259  000CF0  0100               	movlb	0	; () banked
  2260  000CF2  6F9E               	movwf	??_printf& (0+255),b
  2261  000CF4  0E00               	movlw	0
  2262  000CF6  0102               	movlb	2	; () banked
  2263  000CF8  151C               	andwf	(printf@flag+1)& (0+255),w,b
  2264  000CFA  0100               	movlb	0	; () banked
  2265  000CFC  6F9F               	movwf	(??_printf+1)& (0+255),b
  2266  000CFE  0100               	movlb	0	; () banked
  2267  000D00  519F               	movf	(??_printf+1)& (0+255),w,b
  2268  000D02  119E               	iorwf	??_printf& (0+255),w,b
  2269  000D04  B4D8               	btfsc	status,2,c
  2270  000D06  D00B               	goto	l5550
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;doprnt.c: 1168: (putch('-') );
  2274  000D08  0E2D               	movlw	45
  2275  000D0A  EC8D  F01F         	call	_putch
  2276  000D0E  D007               	goto	l5550
  2277  000D10                     l5546:
  2278                           
  2279                           ;doprnt.c: 1178: (putch('0') );
  2280  000D10  0E30               	movlw	48
  2281  000D12  EC8D  F01F         	call	_putch
  2282                           
  2283                           ;doprnt.c: 1179: width--;
  2284  000D16  0102               	movlb	2	; () banked
  2285  000D18  071D               	decf	printf@width& (0+255),f,b
  2286  000D1A  A0D8               	btfss	status,0,c
  2287  000D1C  071E               	decf	(printf@width+1)& (0+255),f,b
  2288  000D1E                     l5550:
  2289  000D1E  0102               	movlb	2	; () banked
  2290  000D20  511E               	movf	(printf@width+1)& (0+255),w,b
  2291  000D22  0A80               	xorlw	128
  2292  000D24  6EF3               	movwf	prodl,c
  2293  000D26  0E80               	movlw	128
  2294  000D28  5CF3               	subwf	prodl,w,c
  2295  000D2A  0E01               	movlw	1
  2296  000D2C  B4D8               	btfsc	status,2,c
  2297  000D2E  5D1D               	subwf	printf@width& (0+255),w,b
  2298  000D30  A0D8               	btfss	status,0,c
  2299  000D32  D06C               	goto	l5568
  2300  000D34  D7ED               	goto	l5546
  2301  000D36                     l5552:
  2302                           
  2303                           ; BSR set to: 2
  2304                           ;doprnt.c: 1190: (putch(' ') );
  2305  000D36  0E20               	movlw	32
  2306  000D38  EC8D  F01F         	call	_putch
  2307                           
  2308                           ;doprnt.c: 1191: width--;
  2309  000D3C  0102               	movlb	2	; () banked
  2310  000D3E  071D               	decf	printf@width& (0+255),f,b
  2311  000D40  A0D8               	btfss	status,0,c
  2312  000D42  071E               	decf	(printf@width+1)& (0+255),f,b
  2313  000D44                     l5556:
  2314                           
  2315                           ; BSR set to: 2
  2316  000D44  0102               	movlb	2	; () banked
  2317  000D46  511E               	movf	(printf@width+1)& (0+255),w,b
  2318  000D48  0A80               	xorlw	128
  2319  000D4A  6EF3               	movwf	prodl,c
  2320  000D4C  0E80               	movlw	128
  2321  000D4E  5CF3               	subwf	prodl,w,c
  2322  000D50  0E01               	movlw	1
  2323  000D52  B4D8               	btfsc	status,2,c
  2324  000D54  5D1D               	subwf	printf@width& (0+255),w,b
  2325  000D56  B0D8               	btfsc	status,0,c
  2326  000D58  D7EE               	goto	l5552
  2327                           
  2328                           ; BSR set to: 2
  2329                           ;doprnt.c: 1192: }
  2330                           ;doprnt.c: 1197: if(flag & 0x03)
  2331                           
  2332                           ; BSR set to: 2
  2333  000D5A  0E03               	movlw	3
  2334  000D5C  0102               	movlb	2	; () banked
  2335  000D5E  151B               	andwf	printf@flag& (0+255),w,b
  2336  000D60  0100               	movlb	0	; () banked
  2337  000D62  6F9E               	movwf	??_printf& (0+255),b
  2338  000D64  0E00               	movlw	0
  2339  000D66  0102               	movlb	2	; () banked
  2340  000D68  151C               	andwf	(printf@flag+1)& (0+255),w,b
  2341  000D6A  0100               	movlb	0	; () banked
  2342  000D6C  6F9F               	movwf	(??_printf+1)& (0+255),b
  2343  000D6E  0100               	movlb	0	; () banked
  2344  000D70  519F               	movf	(??_printf+1)& (0+255),w,b
  2345  000D72  119E               	iorwf	??_printf& (0+255),w,b
  2346  000D74  B4D8               	btfsc	status,2,c
  2347  000D76  D04A               	goto	l5568
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;doprnt.c: 1199: (putch('-') );
  2351  000D78  0E2D               	movlw	45
  2352  000D7A  EC8D  F01F         	call	_putch
  2353  000D7E  D046               	goto	l5568
  2354  000D80                     l5562:
  2355                           
  2356                           ;doprnt.c: 1209: {
  2357                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  2358  000D80  C214  F01B         	movff	printf@_val,___lldiv@dividend
  2359  000D84  C215  F01C         	movff	printf@_val+1,___lldiv@dividend+1
  2360  000D88  C216  F01D         	movff	printf@_val+2,___lldiv@dividend+2
  2361  000D8C  C217  F01E         	movff	printf@_val+3,___lldiv@dividend+3
  2362  000D90  0102               	movlb	2	; () banked
  2363  000D92  5124               	movf	printf@c& (0+255),w,b
  2364  000D94  0D04               	mullw	4
  2365  000D96  0E01               	movlw	low _dpowers
  2366  000D98  24F3               	addwf	prodl,w,c
  2367  000D9A  6EF6               	movwf	tblptrl,c
  2368  000D9C  0E06               	movlw	high _dpowers
  2369  000D9E  20F4               	addwfc	prodh,w,c
  2370  000DA0  6EF7               	movwf	tblptrh,c
  2371  000DA2                     	if	0	;There are less than 3 active tblptr bytes
  2372  000DA2                     	endif
  2373  000DA2  0009               	tblrd		*+
  2374  000DA4  CFF5 F01F          	movff	tablat,___lldiv@divisor
  2375  000DA8  0009               	tblrd		*+
  2376  000DAA  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  2377  000DAE  0009               	tblrd		*+
  2378  000DB0  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  2379  000DB4  000A               	tblrd		*-
  2380  000DB6  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  2381  000DBA  ECC2  F01C         	call	___lldiv	;wreg free
  2382  000DBE  C01B  F207         	movff	?___lldiv,printf@vd
  2383  000DC2  C01C  F208         	movff	?___lldiv+1,printf@vd+1
  2384  000DC6  C01D  F209         	movff	?___lldiv+2,printf@vd+2
  2385  000DCA  C01E  F20A         	movff	?___lldiv+3,printf@vd+3
  2386                           
  2387                           ;doprnt.c: 1211: vd %= 10;
  2388  000DCE  C207  F028         	movff	printf@vd,___llmod@dividend
  2389  000DD2  C208  F029         	movff	printf@vd+1,___llmod@dividend+1
  2390  000DD6  C209  F02A         	movff	printf@vd+2,___llmod@dividend+2
  2391  000DDA  C20A  F02B         	movff	printf@vd+3,___llmod@dividend+3
  2392  000DDE  0E0A               	movlw	10
  2393  000DE0  6E2C               	movwf	___llmod@divisor,c
  2394  000DE2  0E00               	movlw	0
  2395  000DE4  6E2D               	movwf	___llmod@divisor+1,c
  2396  000DE6  0E00               	movlw	0
  2397  000DE8  6E2E               	movwf	___llmod@divisor+2,c
  2398  000DEA  0E00               	movlw	0
  2399  000DEC  6E2F               	movwf	___llmod@divisor+3,c
  2400  000DEE  EC44  F01D         	call	___llmod	;wreg free
  2401  000DF2  C028  F207         	movff	?___llmod,printf@vd
  2402  000DF6  C029  F208         	movff	?___llmod+1,printf@vd+1
  2403  000DFA  C02A  F209         	movff	?___llmod+2,printf@vd+2
  2404  000DFE  C02B  F20A         	movff	?___llmod+3,printf@vd+3
  2405                           
  2406                           ;doprnt.c: 1212: (putch('0' + vd) );
  2407  000E02  0102               	movlb	2	; () banked
  2408  000E04  5107               	movf	printf@vd& (0+255),w,b
  2409  000E06  0F30               	addlw	48
  2410  000E08  EC8D  F01F         	call	_putch
  2411  000E0C                     l5568:
  2412  000E0C  0102               	movlb	2	; () banked
  2413  000E0E  0724               	decf	printf@c& (0+255),f,b
  2414  000E10  0102               	movlb	2	; () banked
  2415  000E12  2924               	incf	printf@c& (0+255),w,b
  2416  000E14  B4D8               	btfsc	status,2,c
  2417  000E16  D008               	goto	l5574
  2418  000E18  D7B3               	goto	l5562
  2419  000E1A                     l5570:
  2420                           
  2421                           ; BSR set to: 2
  2422                           ;doprnt.c: 1217: (putch('0') );
  2423  000E1A  0E30               	movlw	48
  2424  000E1C  EC8D  F01F         	call	_putch
  2425                           
  2426                           ;doprnt.c: 1218: exp--;
  2427  000E20  0102               	movlb	2	; () banked
  2428  000E22  0719               	decf	printf@exp& (0+255),f,b
  2429  000E24  A0D8               	btfss	status,0,c
  2430  000E26  071A               	decf	(printf@exp+1)& (0+255),f,b
  2431  000E28                     l5574:
  2432                           
  2433                           ; BSR set to: 2
  2434  000E28  0102               	movlb	2	; () banked
  2435  000E2A  511A               	movf	(printf@exp+1)& (0+255),w,b
  2436  000E2C  0A80               	xorlw	128
  2437  000E2E  6EF3               	movwf	prodl,c
  2438  000E30  0E80               	movlw	128
  2439  000E32  5CF3               	subwf	prodl,w,c
  2440  000E34  0E01               	movlw	1
  2441  000E36  B4D8               	btfsc	status,2,c
  2442  000E38  5D19               	subwf	printf@exp& (0+255),w,b
  2443  000E3A  B0D8               	btfsc	status,0,c
  2444  000E3C  D7EE               	goto	l5570
  2445                           
  2446                           ; BSR set to: 2
  2447                           ;doprnt.c: 1219: }
  2448                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2449                           
  2450                           ; BSR set to: 2
  2451  000E3E  0102               	movlb	2	; () banked
  2452  000E40  5123               	movf	(printf@prec+1)& (0+255),w,b
  2453  000E42  0A80               	xorlw	128
  2454  000E44  0F80               	addlw	-128
  2455  000E46  0E09               	movlw	9
  2456  000E48  B4D8               	btfsc	status,2,c
  2457  000E4A  5D22               	subwf	printf@prec& (0+255),w,b
  2458  000E4C  A0D8               	btfss	status,0,c
  2459  000E4E  D004               	goto	l676
  2460                           
  2461                           ; BSR set to: 2
  2462                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2463  000E50  0E08               	movlw	8
  2464  000E52  0102               	movlb	2	; () banked
  2465  000E54  6F24               	movwf	printf@c& (0+255),b
  2466  000E56  D002               	goto	l5580
  2467  000E58                     l676:
  2468                           
  2469                           ; BSR set to: 2
  2470                           ;doprnt.c: 1222: else
  2471                           ;doprnt.c: 1223: c = prec;
  2472  000E58  C222  F224         	movff	printf@prec,printf@c
  2473  000E5C                     l5580:
  2474                           
  2475                           ; BSR set to: 2
  2476                           ;doprnt.c: 1224: prec -= c;
  2477  000E5C  0102               	movlb	2	; () banked
  2478  000E5E  5124               	movf	printf@c& (0+255),w,b
  2479  000E60  0102               	movlb	2	; () banked
  2480  000E62  5F22               	subwf	printf@prec& (0+255),f,b
  2481  000E64  0E00               	movlw	0
  2482  000E66  0102               	movlb	2	; () banked
  2483  000E68  BF24               	btfsc	printf@c& (0+255),7,b
  2484  000E6A  0EFF               	movlw	255
  2485  000E6C  0102               	movlb	2	; () banked
  2486  000E6E  5B23               	subwfb	(printf@prec+1)& (0+255),f,b
  2487                           
  2488                           ; BSR set to: 2
  2489                           ;doprnt.c: 1228: if(c)
  2490  000E70  0102               	movlb	2	; () banked
  2491  000E72  5124               	movf	printf@c& (0+255),w,b
  2492  000E74  B4D8               	btfsc	status,2,c
  2493  000E76  D003               	goto	l5586
  2494                           
  2495                           ; BSR set to: 2
  2496                           ;doprnt.c: 1230: (putch('.') );
  2497  000E78  0E2E               	movlw	46
  2498  000E7A  EC8D  F01F         	call	_putch
  2499  000E7E                     l5586:
  2500                           
  2501                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2502  000E7E  0102               	movlb	2	; () banked
  2503  000E80  5124               	movf	printf@c& (0+255),w,b
  2504  000E82  ECAE  F00C         	call	_scale
  2505  000E86  C07B  F200         	movff	?_scale,_printf$1706
  2506  000E8A  C07C  F201         	movff	?_scale+1,_printf$1706+1
  2507  000E8E  C07D  F202         	movff	?_scale+2,_printf$1706+2
  2508                           
  2509                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2510  000E92  C21F  F06F         	movff	printf@fval,___ftmul@f2
  2511  000E96  C220  F070         	movff	printf@fval+1,___ftmul@f2+1
  2512  000E9A  C221  F071         	movff	printf@fval+2,___ftmul@f2+2
  2513  000E9E  C200  F06C         	movff	_printf$1706,___ftmul@f1
  2514  000EA2  C201  F06D         	movff	_printf$1706+1,___ftmul@f1+1
  2515  000EA6  C202  F06E         	movff	_printf$1706+2,___ftmul@f1+2
  2516  000EAA  ECC6  F014         	call	___ftmul	;wreg free
  2517  000EAE  C06C  F082         	movff	?___ftmul,___fttol@f1
  2518  000EB2  C06D  F083         	movff	?___ftmul+1,___fttol@f1+1
  2519  000EB6  C06E  F084         	movff	?___ftmul+2,___fttol@f1+2
  2520  000EBA  EC08  F014         	call	___fttol	;wreg free
  2521  000EBE  C082  F214         	movff	?___fttol,printf@_val
  2522  000EC2  C083  F215         	movff	?___fttol+1,printf@_val+1
  2523  000EC6  C084  F216         	movff	?___fttol+2,printf@_val+2
  2524  000ECA  C085  F217         	movff	?___fttol+3,printf@_val+3
  2525                           
  2526                           ;doprnt.c: 1237: while(c--) {
  2527  000ECE  D06D               	goto	l5598
  2528  000ED0                     l5590:
  2529                           
  2530                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  2531  000ED0  C214  F01B         	movff	printf@_val,___lldiv@dividend
  2532  000ED4  C215  F01C         	movff	printf@_val+1,___lldiv@dividend+1
  2533  000ED8  C216  F01D         	movff	printf@_val+2,___lldiv@dividend+2
  2534  000EDC  C217  F01E         	movff	printf@_val+3,___lldiv@dividend+3
  2535  000EE0  0102               	movlb	2	; () banked
  2536  000EE2  5124               	movf	printf@c& (0+255),w,b
  2537  000EE4  0D04               	mullw	4
  2538  000EE6  0E01               	movlw	low _dpowers
  2539  000EE8  24F3               	addwf	prodl,w,c
  2540  000EEA  6EF6               	movwf	tblptrl,c
  2541  000EEC  0E06               	movlw	high _dpowers
  2542  000EEE  20F4               	addwfc	prodh,w,c
  2543  000EF0  6EF7               	movwf	tblptrh,c
  2544  000EF2                     	if	0	;There are less than 3 active tblptr bytes
  2545  000EF2                     	endif
  2546  000EF2  0009               	tblrd		*+
  2547  000EF4  CFF5 F01F          	movff	tablat,___lldiv@divisor
  2548  000EF8  0009               	tblrd		*+
  2549  000EFA  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  2550  000EFE  0009               	tblrd		*+
  2551  000F00  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  2552  000F04  000A               	tblrd		*-
  2553  000F06  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  2554  000F0A  ECC2  F01C         	call	___lldiv	;wreg free
  2555  000F0E  C01B  F20B         	movff	?___lldiv,printf@vd_1055
  2556  000F12  C01C  F20C         	movff	?___lldiv+1,printf@vd_1055+1
  2557  000F16  C01D  F20D         	movff	?___lldiv+2,printf@vd_1055+2
  2558  000F1A  C01E  F20E         	movff	?___lldiv+3,printf@vd_1055+3
  2559                           
  2560                           ;doprnt.c: 1239: vd %= 10;
  2561  000F1E  C20B  F028         	movff	printf@vd_1055,___llmod@dividend
  2562  000F22  C20C  F029         	movff	printf@vd_1055+1,___llmod@dividend+1
  2563  000F26  C20D  F02A         	movff	printf@vd_1055+2,___llmod@dividend+2
  2564  000F2A  C20E  F02B         	movff	printf@vd_1055+3,___llmod@dividend+3
  2565  000F2E  0E0A               	movlw	10
  2566  000F30  6E2C               	movwf	___llmod@divisor,c
  2567  000F32  0E00               	movlw	0
  2568  000F34  6E2D               	movwf	___llmod@divisor+1,c
  2569  000F36  0E00               	movlw	0
  2570  000F38  6E2E               	movwf	___llmod@divisor+2,c
  2571  000F3A  0E00               	movlw	0
  2572  000F3C  6E2F               	movwf	___llmod@divisor+3,c
  2573  000F3E  EC44  F01D         	call	___llmod	;wreg free
  2574  000F42  C028  F20B         	movff	?___llmod,printf@vd_1055
  2575  000F46  C029  F20C         	movff	?___llmod+1,printf@vd_1055+1
  2576  000F4A  C02A  F20D         	movff	?___llmod+2,printf@vd_1055+2
  2577  000F4E  C02B  F20E         	movff	?___llmod+3,printf@vd_1055+3
  2578                           
  2579                           ;doprnt.c: 1240: (putch('0' + vd) );
  2580  000F52  0102               	movlb	2	; () banked
  2581  000F54  510B               	movf	printf@vd_1055& (0+255),w,b
  2582  000F56  0F30               	addlw	48
  2583  000F58  EC8D  F01F         	call	_putch
  2584                           
  2585                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  2586  000F5C  C214  F028         	movff	printf@_val,___llmod@dividend
  2587  000F60  C215  F029         	movff	printf@_val+1,___llmod@dividend+1
  2588  000F64  C216  F02A         	movff	printf@_val+2,___llmod@dividend+2
  2589  000F68  C217  F02B         	movff	printf@_val+3,___llmod@dividend+3
  2590  000F6C  0102               	movlb	2	; () banked
  2591  000F6E  5124               	movf	printf@c& (0+255),w,b
  2592  000F70  0D04               	mullw	4
  2593  000F72  0E01               	movlw	low _dpowers
  2594  000F74  24F3               	addwf	prodl,w,c
  2595  000F76  6EF6               	movwf	tblptrl,c
  2596  000F78  0E06               	movlw	high _dpowers
  2597  000F7A  20F4               	addwfc	prodh,w,c
  2598  000F7C  6EF7               	movwf	tblptrh,c
  2599  000F7E                     	if	0	;There are less than 3 active tblptr bytes
  2600  000F7E                     	endif
  2601  000F7E  0009               	tblrd		*+
  2602  000F80  CFF5 F02C          	movff	tablat,___llmod@divisor
  2603  000F84  0009               	tblrd		*+
  2604  000F86  CFF5 F02D          	movff	tablat,___llmod@divisor+1
  2605  000F8A  0009               	tblrd		*+
  2606  000F8C  CFF5 F02E          	movff	tablat,___llmod@divisor+2
  2607  000F90  000A               	tblrd		*-
  2608  000F92  CFF5 F02F          	movff	tablat,___llmod@divisor+3
  2609  000F96  EC44  F01D         	call	___llmod	;wreg free
  2610  000F9A  C028  F214         	movff	?___llmod,printf@_val
  2611  000F9E  C029  F215         	movff	?___llmod+1,printf@_val+1
  2612  000FA2  C02A  F216         	movff	?___llmod+2,printf@_val+2
  2613  000FA6  C02B  F217         	movff	?___llmod+3,printf@_val+3
  2614  000FAA                     l5598:
  2615  000FAA  0102               	movlb	2	; () banked
  2616  000FAC  0724               	decf	printf@c& (0+255),f,b
  2617  000FAE  0102               	movlb	2	; () banked
  2618  000FB0  2924               	incf	printf@c& (0+255),w,b
  2619  000FB2  B4D8               	btfsc	status,2,c
  2620  000FB4  D008               	goto	l5604
  2621  000FB6  D78C               	goto	l5590
  2622  000FB8                     l5600:
  2623                           
  2624                           ; BSR set to: 2
  2625                           ;doprnt.c: 1245: (putch('0') );
  2626  000FB8  0E30               	movlw	48
  2627  000FBA  EC8D  F01F         	call	_putch
  2628                           
  2629                           ;doprnt.c: 1246: prec--;
  2630  000FBE  0102               	movlb	2	; () banked
  2631  000FC0  0722               	decf	printf@prec& (0+255),f,b
  2632  000FC2  A0D8               	btfss	status,0,c
  2633  000FC4  0723               	decf	(printf@prec+1)& (0+255),f,b
  2634  000FC6                     l5604:
  2635                           
  2636                           ; BSR set to: 2
  2637  000FC6  0102               	movlb	2	; () banked
  2638  000FC8  5123               	movf	(printf@prec+1)& (0+255),w,b
  2639  000FCA  1122               	iorwf	printf@prec& (0+255),w,b
  2640  000FCC  B4D8               	btfsc	status,2,c
  2641  000FCE  D19C               	goto	l5692
  2642  000FD0  D7F3               	goto	l5600
  2643  000FD2                     l5606:
  2644                           
  2645                           ; BSR set to: 2
  2646                           ;doprnt.c: 1255: }
  2647                           ;doprnt.c: 1262: {
  2648                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2649  000FD2  C20F  FFD9         	movff	printf@ap,fsr2l
  2650  000FD6  C210  FFDA         	movff	printf@ap+1,fsr2h
  2651  000FDA  0102               	movlb	2	; () banked
  2652  000FDC  CFDE F214          	movff	postinc2,printf@_val
  2653  000FE0  0102               	movlb	2	; () banked
  2654  000FE2  CFDD F215          	movff	postdec2,printf@_val+1
  2655  000FE6  0102               	movlb	2	; () banked
  2656  000FE8  0E00               	movlw	0
  2657  000FEA  0102               	movlb	2	; () banked
  2658  000FEC  BF15               	btfsc	(printf@_val+1)& (0+255),7,b
  2659  000FEE  0EFF               	movlw	-1
  2660  000FF0  0102               	movlb	2	; () banked
  2661  000FF2  6F16               	movwf	(printf@_val+2)& (0+255),b
  2662  000FF4  0102               	movlb	2	; () banked
  2663  000FF6  6F17               	movwf	(printf@_val+3)& (0+255),b
  2664                           
  2665                           ; BSR set to: 2
  2666  000FF8  0E02               	movlw	2
  2667  000FFA  0102               	movlb	2	; () banked
  2668  000FFC  270F               	addwf	printf@ap& (0+255),f,b
  2669  000FFE  0E00               	movlw	0
  2670  001000  0102               	movlb	2	; () banked
  2671  001002  2310               	addwfc	(printf@ap+1)& (0+255),f,b
  2672                           
  2673                           ; BSR set to: 2
  2674                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  2675  001004  0102               	movlb	2	; () banked
  2676  001006  5117               	movf	(printf@_val+3)& (0+255),w,b
  2677  001008  0A80               	xorlw	128
  2678  00100A  0F80               	addlw	128
  2679  00100C  E10B               	bnz	u6245
  2680  00100E  0E00               	movlw	0
  2681  001010  0102               	movlb	2	; () banked
  2682  001012  5D16               	subwf	(printf@_val+2)& (0+255),w,b
  2683  001014  E107               	bnz	u6245
  2684  001016  0E00               	movlw	0
  2685  001018  0102               	movlb	2	; () banked
  2686  00101A  5D15               	subwf	(printf@_val+1)& (0+255),w,b
  2687  00101C  E103               	bnz	u6245
  2688  00101E  0E00               	movlw	0
  2689  001020  0102               	movlb	2	; () banked
  2690  001022  5D14               	subwf	printf@_val& (0+255),w,b
  2691  001024                     u6245:
  2692  001024  B0D8               	btfsc	status,0,c
  2693  001026  D012               	goto	l5616
  2694                           
  2695                           ; BSR set to: 2
  2696                           ;doprnt.c: 1271: flag |= 0x03;
  2697  001028  0E03               	movlw	3
  2698  00102A  0102               	movlb	2	; () banked
  2699  00102C  131B               	iorwf	printf@flag& (0+255),f,b
  2700                           
  2701                           ; BSR set to: 2
  2702                           ;doprnt.c: 1272: _val._val = -_val._val;
  2703  00102E  0102               	movlb	2	; () banked
  2704  001030  1F17               	comf	(printf@_val+3)& (0+255),f,b
  2705  001032  0102               	movlb	2	; () banked
  2706  001034  1F16               	comf	(printf@_val+2)& (0+255),f,b
  2707  001036  0102               	movlb	2	; () banked
  2708  001038  1F15               	comf	(printf@_val+1)& (0+255),f,b
  2709  00103A  0102               	movlb	2	; () banked
  2710  00103C  6D14               	negf	printf@_val& (0+255),b
  2711  00103E  0E00               	movlw	0
  2712  001040  0102               	movlb	2	; () banked
  2713  001042  2315               	addwfc	(printf@_val+1)& (0+255),f,b
  2714  001044  0102               	movlb	2	; () banked
  2715  001046  2316               	addwfc	(printf@_val+2)& (0+255),f,b
  2716  001048  0102               	movlb	2	; () banked
  2717  00104A  2317               	addwfc	(printf@_val+3)& (0+255),f,b
  2718  00104C                     l5616:
  2719                           
  2720                           ; BSR set to: 2
  2721                           ;doprnt.c: 1273: }
  2722                           ;doprnt.c: 1275: }
  2723                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  2724  00104C  0102               	movlb	2	; () banked
  2725  00104E  5123               	movf	(printf@prec+1)& (0+255),w,b
  2726  001050  1122               	iorwf	printf@prec& (0+255),w,b
  2727  001052  A4D8               	btfss	status,2,c
  2728  001054  D00A               	goto	l5622
  2729                           
  2730                           ; BSR set to: 2
  2731  001056  0102               	movlb	2	; () banked
  2732  001058  5117               	movf	(printf@_val+3)& (0+255),w,b
  2733  00105A  1114               	iorwf	printf@_val& (0+255),w,b
  2734  00105C  1115               	iorwf	(printf@_val+1)& (0+255),w,b
  2735  00105E  1116               	iorwf	(printf@_val+2)& (0+255),w,b
  2736  001060  A4D8               	btfss	status,2,c
  2737  001062  D003               	goto	l5622
  2738                           
  2739                           ; BSR set to: 2
  2740                           ;doprnt.c: 1300: prec++;
  2741  001064  0102               	movlb	2	; () banked
  2742  001066  4B22               	infsnz	printf@prec& (0+255),f,b
  2743  001068  2B23               	incf	(printf@prec+1)& (0+255),f,b
  2744  00106A                     l5622:
  2745                           
  2746                           ; BSR set to: 2
  2747                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2748  00106A  0E01               	movlw	1
  2749  00106C  0102               	movlb	2	; () banked
  2750  00106E  6F24               	movwf	printf@c& (0+255),b
  2751  001070                     
  2752                           ; BSR set to: 2
  2753  001070  0102               	movlb	2	; () banked
  2754  001072  5124               	movf	printf@c& (0+255),w,b
  2755  001074  0A0A               	xorlw	10
  2756  001076  B4D8               	btfsc	status,2,c
  2757  001078  D01E               	goto	l5636
  2758                           
  2759                           ; BSR set to: 2
  2760                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2761                           
  2762                           ; BSR set to: 2
  2763                           
  2764                           ; BSR set to: 2
  2765  00107A  0102               	movlb	2	; () banked
  2766  00107C  5124               	movf	printf@c& (0+255),w,b
  2767  00107E  0D04               	mullw	4
  2768  001080  0E01               	movlw	low _dpowers
  2769  001082  24F3               	addwf	prodl,w,c
  2770  001084  6EF6               	movwf	tblptrl,c
  2771  001086  0E06               	movlw	high _dpowers
  2772  001088  20F4               	addwfc	prodh,w,c
  2773  00108A  6EF7               	movwf	tblptrh,c
  2774  00108C                     	if	0	;There are less than 3 active tblptr bytes
  2775  00108C                     	endif
  2776  00108C  0009               	tblrd		*+
  2777  00108E  50F5               	movf	tablat,w,c
  2778  001090  0102               	movlb	2	; () banked
  2779  001092  5D14               	subwf	printf@_val& (0+255),w,b
  2780  001094  0009               	tblrd		*+
  2781  001096  50F5               	movf	tablat,w,c
  2782  001098  0102               	movlb	2	; () banked
  2783  00109A  5915               	subwfb	(printf@_val+1)& (0+255),w,b
  2784  00109C  0009               	tblrd		*+
  2785  00109E  50F5               	movf	tablat,w,c
  2786  0010A0  0102               	movlb	2	; () banked
  2787  0010A2  5916               	subwfb	(printf@_val+2)& (0+255),w,b
  2788  0010A4  0009               	tblrd		*+
  2789  0010A6  50F5               	movf	tablat,w,c
  2790  0010A8  0102               	movlb	2	; () banked
  2791  0010AA  5917               	subwfb	(printf@_val+3)& (0+255),w,b
  2792  0010AC  A0D8               	btfss	status,0,c
  2793  0010AE  D003               	goto	l5636
  2794                           
  2795                           ; BSR set to: 2
  2796                           
  2797                           ; BSR set to: 2
  2798                           
  2799                           ; BSR set to: 2
  2800                           ;doprnt.c: 1316: break;
  2801  0010B0  0102               	movlb	2	; () banked
  2802  0010B2  2B24               	incf	printf@c& (0+255),f,b
  2803  0010B4  D7DD               	goto	L5
  2804  0010B6                     l5636:
  2805                           
  2806                           ; BSR set to: 2
  2807                           ;doprnt.c: 1348: if(c < prec)
  2808  0010B6  0E80               	movlw	128
  2809  0010B8  0102               	movlb	2	; () banked
  2810  0010BA  BF24               	btfsc	printf@c& (0+255),7,b
  2811  0010BC  0E7F               	movlw	127
  2812  0010BE  0100               	movlb	0	; () banked
  2813  0010C0  6F9E               	movwf	??_printf& (0+255),b
  2814  0010C2  0102               	movlb	2	; () banked
  2815  0010C4  5122               	movf	printf@prec& (0+255),w,b
  2816  0010C6  0102               	movlb	2	; () banked
  2817  0010C8  5D24               	subwf	printf@c& (0+255),w,b
  2818  0010CA  0102               	movlb	2	; () banked
  2819  0010CC  5123               	movf	(printf@prec+1)& (0+255),w,b
  2820  0010CE  0A80               	xorlw	128
  2821  0010D0  0100               	movlb	0	; () banked
  2822  0010D2  599E               	subwfb	??_printf& (0+255),w,b
  2823  0010D4  B0D8               	btfsc	status,0,c
  2824  0010D6  D003               	goto	l5640
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;doprnt.c: 1349: c = prec;
  2828  0010D8  C222  F224         	movff	printf@prec,printf@c
  2829  0010DC  D01A               	goto	l5644
  2830  0010DE                     l5640:
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;doprnt.c: 1350: else if(prec < c)
  2834  0010DE  0102               	movlb	2	; () banked
  2835  0010E0  5123               	movf	(printf@prec+1)& (0+255),w,b
  2836  0010E2  0A80               	xorlw	128
  2837  0010E4  0100               	movlb	0	; () banked
  2838  0010E6  6F9E               	movwf	??_printf& (0+255),b
  2839  0010E8  0102               	movlb	2	; () banked
  2840  0010EA  5124               	movf	printf@c& (0+255),w,b
  2841  0010EC  0102               	movlb	2	; () banked
  2842  0010EE  5D22               	subwf	printf@prec& (0+255),w,b
  2843  0010F0  0E80               	movlw	128
  2844  0010F2  0102               	movlb	2	; () banked
  2845  0010F4  BF24               	btfsc	printf@c& (0+255),7,b
  2846  0010F6  0E7F               	movlw	127
  2847  0010F8  0100               	movlb	0	; () banked
  2848  0010FA  599E               	subwfb	??_printf& (0+255),w,b
  2849  0010FC  B0D8               	btfsc	status,0,c
  2850  0010FE  D009               	goto	l5644
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;doprnt.c: 1351: prec = c;
  2854  001100  0102               	movlb	2	; () banked
  2855  001102  5124               	movf	printf@c& (0+255),w,b
  2856  001104  0102               	movlb	2	; () banked
  2857  001106  6F22               	movwf	printf@prec& (0+255),b
  2858  001108  0102               	movlb	2	; () banked
  2859  00110A  6B23               	clrf	(printf@prec+1)& (0+255),b
  2860  00110C  0102               	movlb	2	; () banked
  2861  00110E  BF22               	btfsc	printf@prec& (0+255),7,b
  2862  001110  0723               	decf	(printf@prec+1)& (0+255),f,b
  2863  001112                     l5644:
  2864                           
  2865                           ;doprnt.c: 1354: if(width && flag & 0x03)
  2866  001112  0102               	movlb	2	; () banked
  2867  001114  511E               	movf	(printf@width+1)& (0+255),w,b
  2868  001116  111D               	iorwf	printf@width& (0+255),w,b
  2869  001118  B4D8               	btfsc	status,2,c
  2870  00111A  D013               	goto	l5650
  2871                           
  2872                           ; BSR set to: 2
  2873  00111C  0E03               	movlw	3
  2874  00111E  0102               	movlb	2	; () banked
  2875  001120  151B               	andwf	printf@flag& (0+255),w,b
  2876  001122  0100               	movlb	0	; () banked
  2877  001124  6F9E               	movwf	??_printf& (0+255),b
  2878  001126  0E00               	movlw	0
  2879  001128  0102               	movlb	2	; () banked
  2880  00112A  151C               	andwf	(printf@flag+1)& (0+255),w,b
  2881  00112C  0100               	movlb	0	; () banked
  2882  00112E  6F9F               	movwf	(??_printf+1)& (0+255),b
  2883  001130  0100               	movlb	0	; () banked
  2884  001132  519F               	movf	(??_printf+1)& (0+255),w,b
  2885  001134  119E               	iorwf	??_printf& (0+255),w,b
  2886  001136  B4D8               	btfsc	status,2,c
  2887  001138  D004               	goto	l5650
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;doprnt.c: 1355: width--;
  2891  00113A  0102               	movlb	2	; () banked
  2892  00113C  071D               	decf	printf@width& (0+255),f,b
  2893  00113E  A0D8               	btfss	status,0,c
  2894  001140  071E               	decf	(printf@width+1)& (0+255),f,b
  2895  001142                     l5650:
  2896                           
  2897                           ;doprnt.c: 1357: if(flag & 0x4000) {
  2898  001142  0102               	movlb	2	; () banked
  2899  001144  AD1C               	btfss	(printf@flag+1)& (0+255),6,b
  2900  001146  D01F               	goto	l5658
  2901                           
  2902                           ; BSR set to: 2
  2903                           ;doprnt.c: 1358: if(width > prec)
  2904  001148  0102               	movlb	2	; () banked
  2905  00114A  5123               	movf	(printf@prec+1)& (0+255),w,b
  2906  00114C  0A80               	xorlw	128
  2907  00114E  0100               	movlb	0	; () banked
  2908  001150  6F9E               	movwf	??_printf& (0+255),b
  2909  001152  0102               	movlb	2	; () banked
  2910  001154  511D               	movf	printf@width& (0+255),w,b
  2911  001156  0102               	movlb	2	; () banked
  2912  001158  5D22               	subwf	printf@prec& (0+255),w,b
  2913  00115A  0102               	movlb	2	; () banked
  2914  00115C  511E               	movf	(printf@width+1)& (0+255),w,b
  2915  00115E  0A80               	xorlw	128
  2916  001160  0100               	movlb	0	; () banked
  2917  001162  599E               	subwfb	??_printf& (0+255),w,b
  2918  001164  B0D8               	btfsc	status,0,c
  2919  001166  D009               	goto	l5656
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;doprnt.c: 1359: width -= prec;
  2923  001168  0102               	movlb	2	; () banked
  2924  00116A  5122               	movf	printf@prec& (0+255),w,b
  2925  00116C  0102               	movlb	2	; () banked
  2926  00116E  5F1D               	subwf	printf@width& (0+255),f,b
  2927  001170  0102               	movlb	2	; () banked
  2928  001172  5123               	movf	(printf@prec+1)& (0+255),w,b
  2929  001174  0102               	movlb	2	; () banked
  2930  001176  5B1E               	subwfb	(printf@width+1)& (0+255),f,b
  2931  001178  D006               	goto	l5658
  2932  00117A                     l5656:
  2933                           
  2934                           ;doprnt.c: 1360: else
  2935                           ;doprnt.c: 1361: width = 0;
  2936  00117A  0E00               	movlw	0
  2937  00117C  0102               	movlb	2	; () banked
  2938  00117E  6F1E               	movwf	(printf@width+1)& (0+255),b
  2939  001180  0E00               	movlw	0
  2940  001182  0102               	movlb	2	; () banked
  2941  001184  6F1D               	movwf	printf@width& (0+255),b
  2942  001186                     l5658:
  2943                           
  2944                           ; BSR set to: 2
  2945                           ;doprnt.c: 1362: }
  2946                           ;doprnt.c: 1390: if(width > c)
  2947  001186  0E80               	movlw	128
  2948  001188  0102               	movlb	2	; () banked
  2949  00118A  BF24               	btfsc	printf@c& (0+255),7,b
  2950  00118C  0E7F               	movlw	127
  2951  00118E  0100               	movlb	0	; () banked
  2952  001190  6F9E               	movwf	??_printf& (0+255),b
  2953  001192  0102               	movlb	2	; () banked
  2954  001194  511D               	movf	printf@width& (0+255),w,b
  2955  001196  0102               	movlb	2	; () banked
  2956  001198  5D24               	subwf	printf@c& (0+255),w,b
  2957  00119A  0102               	movlb	2	; () banked
  2958  00119C  511E               	movf	(printf@width+1)& (0+255),w,b
  2959  00119E  0A80               	xorlw	128
  2960  0011A0  0100               	movlb	0	; () banked
  2961  0011A2  599E               	subwfb	??_printf& (0+255),w,b
  2962  0011A4  B0D8               	btfsc	status,0,c
  2963  0011A6  D00B               	goto	l5662
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;doprnt.c: 1391: width -= c;
  2967  0011A8  0102               	movlb	2	; () banked
  2968  0011AA  5124               	movf	printf@c& (0+255),w,b
  2969  0011AC  0102               	movlb	2	; () banked
  2970  0011AE  5F1D               	subwf	printf@width& (0+255),f,b
  2971  0011B0  0E00               	movlw	0
  2972  0011B2  0102               	movlb	2	; () banked
  2973  0011B4  BF24               	btfsc	printf@c& (0+255),7,b
  2974  0011B6  0EFF               	movlw	255
  2975  0011B8  0102               	movlb	2	; () banked
  2976  0011BA  5B1E               	subwfb	(printf@width+1)& (0+255),f,b
  2977  0011BC  D006               	goto	l5664
  2978  0011BE                     l5662:
  2979                           
  2980                           ;doprnt.c: 1392: else
  2981                           ;doprnt.c: 1393: width = 0;
  2982  0011BE  0E00               	movlw	0
  2983  0011C0  0102               	movlb	2	; () banked
  2984  0011C2  6F1E               	movwf	(printf@width+1)& (0+255),b
  2985  0011C4  0E00               	movlw	0
  2986  0011C6  0102               	movlb	2	; () banked
  2987  0011C8  6F1D               	movwf	printf@width& (0+255),b
  2988  0011CA                     l5664:
  2989                           
  2990                           ; BSR set to: 2
  2991                           ;doprnt.c: 1396: if(flag & 0x04) {
  2992  0011CA  0102               	movlb	2	; () banked
  2993  0011CC  A51B               	btfss	printf@flag& (0+255),2,b
  2994  0011CE  D020               	goto	l5676
  2995                           
  2996                           ; BSR set to: 2
  2997                           ;doprnt.c: 1401: if(flag & 0x03)
  2998  0011D0  0E03               	movlw	3
  2999  0011D2  0102               	movlb	2	; () banked
  3000  0011D4  151B               	andwf	printf@flag& (0+255),w,b
  3001  0011D6  0100               	movlb	0	; () banked
  3002  0011D8  6F9E               	movwf	??_printf& (0+255),b
  3003  0011DA  0E00               	movlw	0
  3004  0011DC  0102               	movlb	2	; () banked
  3005  0011DE  151C               	andwf	(printf@flag+1)& (0+255),w,b
  3006  0011E0  0100               	movlb	0	; () banked
  3007  0011E2  6F9F               	movwf	(??_printf+1)& (0+255),b
  3008  0011E4  0100               	movlb	0	; () banked
  3009  0011E6  519F               	movf	(??_printf+1)& (0+255),w,b
  3010  0011E8  119E               	iorwf	??_printf& (0+255),w,b
  3011  0011EA  B4D8               	btfsc	status,2,c
  3012  0011EC  D003               	goto	l5670
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;doprnt.c: 1402: (putch('-') );
  3016  0011EE  0E2D               	movlw	45
  3017  0011F0  EC8D  F01F         	call	_putch
  3018  0011F4                     l5670:
  3019                           
  3020                           ;doprnt.c: 1424: if(width)
  3021  0011F4  0102               	movlb	2	; () banked
  3022  0011F6  0102               	movlb	2	; () banked
  3023  0011F8  511E               	movf	(printf@width+1)& (0+255),w,b
  3024  0011FA  111D               	iorwf	printf@width& (0+255),w,b
  3025  0011FC  B4D8               	btfsc	status,2,c
  3026  0011FE  D07A               	goto	l5690
  3027                           
  3028                           ; BSR set to: 2
  3029                           ;doprnt.c: 1426: (putch('0') );
  3030                           
  3031                           ; BSR set to: 2
  3032                           
  3033                           ;doprnt.c: 1425: do
  3034  001200  0E30               	movlw	48
  3035  001202  EC8D  F01F         	call	_putch
  3036                           
  3037                           ;doprnt.c: 1427: while(--width);
  3038  001206  0102               	movlb	2	; () banked
  3039  001208  071D               	decf	printf@width& (0+255),f,b
  3040  00120A  A0D8               	btfss	status,0,c
  3041  00120C  071E               	decf	(printf@width+1)& (0+255),f,b
  3042  00120E  D7F3               	goto	L6
  3043  001210                     l5676:
  3044                           
  3045                           ; BSR set to: 2
  3046                           ;doprnt.c: 1431: {
  3047                           ;doprnt.c: 1433: if(width
  3048                           ;doprnt.c: 1437: )
  3049  001210  0102               	movlb	2	; () banked
  3050  001212  511E               	movf	(printf@width+1)& (0+255),w,b
  3051  001214  111D               	iorwf	printf@width& (0+255),w,b
  3052  001216  B4D8               	btfsc	status,2,c
  3053  001218  D00C               	goto	l5682
  3054  00121A                     l5678:
  3055                           
  3056                           ; BSR set to: 2
  3057                           ;doprnt.c: 1439: (putch(' ') );
  3058  00121A  0E20               	movlw	32
  3059  00121C  EC8D  F01F         	call	_putch
  3060                           
  3061                           ;doprnt.c: 1440: while(--width);
  3062  001220  0102               	movlb	2	; () banked
  3063  001222  071D               	decf	printf@width& (0+255),f,b
  3064  001224  A0D8               	btfss	status,0,c
  3065  001226  071E               	decf	(printf@width+1)& (0+255),f,b
  3066  001228  0102               	movlb	2	; () banked
  3067  00122A  511E               	movf	(printf@width+1)& (0+255),w,b
  3068  00122C  111D               	iorwf	printf@width& (0+255),w,b
  3069  00122E  A4D8               	btfss	status,2,c
  3070  001230  D7F4               	goto	l5678
  3071  001232                     l5682:
  3072                           
  3073                           ; BSR set to: 2
  3074                           ;doprnt.c: 1447: if(flag & 0x03)
  3075  001232  0E03               	movlw	3
  3076  001234  0102               	movlb	2	; () banked
  3077  001236  151B               	andwf	printf@flag& (0+255),w,b
  3078  001238  0100               	movlb	0	; () banked
  3079  00123A  6F9E               	movwf	??_printf& (0+255),b
  3080  00123C  0E00               	movlw	0
  3081  00123E  0102               	movlb	2	; () banked
  3082  001240  151C               	andwf	(printf@flag+1)& (0+255),w,b
  3083  001242  0100               	movlb	0	; () banked
  3084  001244  6F9F               	movwf	(??_printf+1)& (0+255),b
  3085  001246  0100               	movlb	0	; () banked
  3086  001248  519F               	movf	(??_printf+1)& (0+255),w,b
  3087  00124A  119E               	iorwf	??_printf& (0+255),w,b
  3088  00124C  B4D8               	btfsc	status,2,c
  3089  00124E  D052               	goto	l5690
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;doprnt.c: 1448: (putch('-') );
  3093  001250  0E2D               	movlw	45
  3094  001252  EC8D  F01F         	call	_putch
  3095  001256  D04E               	goto	l5690
  3096  001258                     l5686:
  3097                           
  3098                           ;doprnt.c: 1487: {
  3099                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  3100  001258  0102               	movlb	2	; () banked
  3101  00125A  C222  F09E         	movff	printf@prec,??_printf
  3102  00125E  0102               	movlb	2	; () banked
  3103  001260  C223  F09F         	movff	printf@prec+1,??_printf+1
  3104  001264  0100               	movlb	0	; () banked
  3105  001266  90D8               	bcf	status,0,c
  3106  001268  379E               	rlcf	??_printf& (0+255),f,b
  3107  00126A  379F               	rlcf	(??_printf+1)& (0+255),f,b
  3108  00126C  0100               	movlb	0	; () banked
  3109  00126E  90D8               	bcf	status,0,c
  3110  001270  379E               	rlcf	??_printf& (0+255),f,b
  3111  001272  379F               	rlcf	(??_printf+1)& (0+255),f,b
  3112  001274  0E01               	movlw	low _dpowers
  3113  001276  0100               	movlb	0	; () banked
  3114  001278  259E               	addwf	??_printf& (0+255),w,b
  3115  00127A  6EF6               	movwf	tblptrl,c
  3116  00127C  0E06               	movlw	high _dpowers
  3117  00127E  219F               	addwfc	(??_printf+1)& (0+255),w,b
  3118  001280  6EF7               	movwf	tblptrh,c
  3119  001282                     	if	0	;There are less than 3 active tblptr bytes
  3120  001282                     	endif
  3121  001282  0009               	tblrd		*+
  3122  001284  CFF5 F01F          	movff	tablat,___lldiv@divisor
  3123  001288  0009               	tblrd		*+
  3124  00128A  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  3125  00128E  0009               	tblrd		*+
  3126  001290  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  3127  001294  000A               	tblrd		*-
  3128  001296  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  3129  00129A  C214  F01B         	movff	printf@_val,___lldiv@dividend
  3130  00129E  C215  F01C         	movff	printf@_val+1,___lldiv@dividend+1
  3131  0012A2  C216  F01D         	movff	printf@_val+2,___lldiv@dividend+2
  3132  0012A6  C217  F01E         	movff	printf@_val+3,___lldiv@dividend+3
  3133  0012AA  ECC2  F01C         	call	___lldiv	;wreg free
  3134  0012AE  C01B  F028         	movff	?___lldiv,___llmod@dividend
  3135  0012B2  C01C  F029         	movff	?___lldiv+1,___llmod@dividend+1
  3136  0012B6  C01D  F02A         	movff	?___lldiv+2,___llmod@dividend+2
  3137  0012BA  C01E  F02B         	movff	?___lldiv+3,___llmod@dividend+3
  3138  0012BE  0E0A               	movlw	10
  3139  0012C0  6E2C               	movwf	___llmod@divisor,c
  3140  0012C2  0E00               	movlw	0
  3141  0012C4  6E2D               	movwf	___llmod@divisor+1,c
  3142  0012C6  0E00               	movlw	0
  3143  0012C8  6E2E               	movwf	___llmod@divisor+2,c
  3144  0012CA  0E00               	movlw	0
  3145  0012CC  6E2F               	movwf	___llmod@divisor+3,c
  3146  0012CE  EC44  F01D         	call	___llmod	;wreg free
  3147  0012D2  C028  F0A0         	movff	?___llmod,??_printf+2
  3148  0012D6  C029  F0A1         	movff	?___llmod+1,??_printf+3
  3149  0012DA  C02A  F0A2         	movff	?___llmod+2,??_printf+4
  3150  0012DE  C02B  F0A3         	movff	?___llmod+3,??_printf+5
  3151  0012E2  0100               	movlb	0	; () banked
  3152  0012E4  51A0               	movf	(??_printf+2)& (0+255),w,b
  3153  0012E6  0F30               	addlw	48
  3154  0012E8  0102               	movlb	2	; () banked
  3155  0012EA  6F24               	movwf	printf@c& (0+255),b
  3156                           
  3157                           ; BSR set to: 2
  3158                           ;doprnt.c: 1532: }
  3159                           ;doprnt.c: 1533: (putch(c) );
  3160  0012EC  0102               	movlb	2	; () banked
  3161  0012EE  5124               	movf	printf@c& (0+255),w,b
  3162  0012F0  EC8D  F01F         	call	_putch
  3163  0012F4                     l5690:
  3164  0012F4  0102               	movlb	2	; () banked
  3165  0012F6  0722               	decf	printf@prec& (0+255),f,b
  3166  0012F8  A0D8               	btfss	status,0,c
  3167  0012FA  0723               	decf	(printf@prec+1)& (0+255),f,b
  3168  0012FC  0102               	movlb	2	; () banked
  3169  0012FE  2922               	incf	printf@prec& (0+255),w,b
  3170  001300  B4D8               	btfsc	status,2,c
  3171  001302  2923               	incf	(printf@prec+1)& (0+255),w,b
  3172  001304  A4D8               	btfss	status,2,c
  3173  001306  D7A8               	goto	l5686
  3174  001308                     l5692:
  3175  001308  0100               	movlb	0	; () banked
  3176  00130A  C097  FFF6         	movff	printf@f,tblptrl
  3177  00130E  0100               	movlb	0	; () banked
  3178  001310  C098  FFF7         	movff	printf@f+1,tblptrh
  3179  001314  0100               	movlb	0	; () banked
  3180  001316  4B97               	infsnz	printf@f& (0+255),f,b
  3181  001318  2B98               	incf	(printf@f+1)& (0+255),f,b
  3182  00131A                     	if	0	;tblptru may be non-zero
  3183  00131A                     	endif
  3184  00131A                     	if	0	;tblptru may be non-zero
  3185  00131A                     	endif
  3186  00131A  0008               	tblrd		*
  3187  00131C  0102               	movlb	2	; () banked
  3188  00131E  CFF5 F224          	movff	tablat,printf@c
  3189  001322  0102               	movlb	2	; () banked
  3190  001324  6724               	tstfsz	printf@c& (0+255),b
  3191  001326  EF63  F003         	goto	l5396
  3192  00132A  0012               	return	
  3193  00132C                     __end_of_printf:
  3194                           	opt stack 0
  3195                           tblptru	equ	0xFF8
  3196                           tblptrh	equ	0xFF7
  3197                           tblptrl	equ	0xFF6
  3198                           tablat	equ	0xFF5
  3199                           prodh	equ	0xFF4
  3200                           prodl	equ	0xFF3
  3201                           intcon	equ	0xFF2
  3202                           postinc0	equ	0xFEE
  3203                           wreg	equ	0xFE8
  3204                           postinc2	equ	0xFDE
  3205                           postdec2	equ	0xFDD
  3206                           fsr2h	equ	0xFDA
  3207                           fsr2l	equ	0xFD9
  3208                           status	equ	0xFD8
  3209                           
  3210 ;; *************** function _scale *****************
  3211 ;; Defined at:
  3212 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;  scl             1    wreg     char 
  3215 ;; Auto vars:     Size  Location     Type
  3216 ;;  scl             1   33[BANK0 ] char 
  3217 ;; Return value:  Size  Location     Type
  3218 ;;                  3   27[BANK0 ] char 
  3219 ;; Registers used:
  3220 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3221 ;; Tracked objects:
  3222 ;;		On entry : 0/0
  3223 ;;		On exit  : 0/0
  3224 ;;		Unchanged: 0/0
  3225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3226 ;;      Params:         0       3       0       0       0       0       0
  3227 ;;      Locals:         0       4       0       0       0       0       0
  3228 ;;      Temps:          0       0       0       0       0       0       0
  3229 ;;      Totals:         0       7       0       0       0       0       0
  3230 ;;Total ram usage:        7 bytes
  3231 ;; Hardware stack levels used:    1
  3232 ;; Hardware stack levels required when called:    6
  3233 ;; This function calls:
  3234 ;;		___awdiv
  3235 ;;		___awmod
  3236 ;;		___ftmul
  3237 ;;		___wmul
  3238 ;; This function is called by:
  3239 ;;		_printf
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           	psect	text2
  3244  00195C                     __ptext2:
  3245                           	opt stack 0
  3246  00195C                     _scale:
  3247                           	opt stack 23
  3248                           
  3249                           ; BSR set to: 2
  3250                           ;incstack = 0
  3251                           ;scale@scl stored from wreg
  3252  00195C  0100               	movlb	0	; () banked
  3253  00195E  6F81               	movwf	scale@scl& (0+255),b
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;doprnt.c: 428: if(scl < 0) {
  3257  001960  0100               	movlb	0	; () banked
  3258  001962  AF81               	btfss	scale@scl& (0+255),7,b
  3259  001964  D11C               	goto	l4992
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;doprnt.c: 429: scl = -scl;
  3263  001966  0100               	movlb	0	; () banked
  3264  001968  6D81               	negf	scale@scl& (0+255),b
  3265                           
  3266                           ;doprnt.c: 430: if(scl>=110)
  3267  00196A  0100               	movlb	0	; () banked
  3268  00196C  5181               	movf	scale@scl& (0+255),w,b
  3269  00196E  0A80               	xorlw	128
  3270  001970  0F12               	addlw	-238
  3271  001972  A0D8               	btfss	status,0,c
  3272  001974  D09D               	goto	l4982
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3276  001976  0E00               	movlw	0
  3277  001978  6E2C               	movwf	___wmul@multiplicand+1,c
  3278  00197A  0E03               	movlw	3
  3279  00197C  6E2B               	movwf	___wmul@multiplicand,c
  3280  00197E  0E00               	movlw	0
  3281  001980  6E24               	movwf	___awdiv@divisor+1,c
  3282  001982  0E0A               	movlw	10
  3283  001984  6E23               	movwf	___awdiv@divisor,c
  3284  001986  0E00               	movlw	0
  3285  001988  6E1E               	movwf	___awmod@divisor+1,c
  3286  00198A  0E64               	movlw	100
  3287  00198C  6E1D               	movwf	___awmod@divisor,c
  3288  00198E  0100               	movlb	0	; () banked
  3289  001990  5181               	movf	scale@scl& (0+255),w,b
  3290  001992  6E1B               	movwf	___awmod@dividend,c
  3291  001994  6A1C               	clrf	___awmod@dividend+1,c
  3292  001996  BE1B               	btfsc	___awmod@dividend,7,c
  3293  001998  061C               	decf	___awmod@dividend+1,f,c
  3294  00199A  EC32  F01C         	call	___awmod	;wreg free
  3295  00199E  C01B  F021         	movff	?___awmod,___awdiv@dividend
  3296  0019A2  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  3297  0019A6  EC97  F01B         	call	___awdiv	;wreg free
  3298  0019AA  0E09               	movlw	9
  3299  0019AC  2421               	addwf	?___awdiv,w,c
  3300  0019AE  6E29               	movwf	___wmul@multiplier,c
  3301  0019B0  0E00               	movlw	0
  3302  0019B2  2022               	addwfc	?___awdiv+1,w,c
  3303  0019B4  6E2A               	movwf	___wmul@multiplier+1,c
  3304  0019B6  EC04  F01F         	call	___wmul	;wreg free
  3305  0019BA  0E29               	movlw	low __npowers_
  3306  0019BC  2429               	addwf	?___wmul,w,c
  3307  0019BE  6EF6               	movwf	tblptrl,c
  3308  0019C0  0E06               	movlw	high __npowers_
  3309  0019C2  202A               	addwfc	?___wmul+1,w,c
  3310  0019C4  6EF7               	movwf	tblptrh,c
  3311  0019C6                     	if	0	;There are less than 3 active tblptr bytes
  3312  0019C6                     	endif
  3313  0019C6  0009               	tblrd		*+
  3314  0019C8  0100               	movlb	0	; () banked
  3315  0019CA  CFF5 F06F          	movff	tablat,___ftmul@f2
  3316  0019CE  0009               	tblrd		*+
  3317  0019D0  0100               	movlb	0	; () banked
  3318  0019D2  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3319  0019D6  000A               	tblrd		*-
  3320  0019D8  0100               	movlb	0	; () banked
  3321  0019DA  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3322  0019DE  0E00               	movlw	0
  3323  0019E0  6E24               	movwf	___awdiv@divisor+1,c
  3324  0019E2  0E64               	movlw	100
  3325  0019E4  6E23               	movwf	___awdiv@divisor,c
  3326  0019E6  0100               	movlb	0	; () banked
  3327  0019E8  5181               	movf	scale@scl& (0+255),w,b
  3328  0019EA  6E21               	movwf	___awdiv@dividend,c
  3329  0019EC  6A22               	clrf	___awdiv@dividend+1,c
  3330  0019EE  BE21               	btfsc	___awdiv@dividend,7,c
  3331  0019F0  0622               	decf	___awdiv@dividend+1,f,c
  3332  0019F2  EC97  F01B         	call	___awdiv	;wreg free
  3333  0019F6  0E12               	movlw	18
  3334  0019F8  2421               	addwf	?___awdiv,w,c
  3335  0019FA  6E29               	movwf	___wmul@multiplier,c
  3336  0019FC  0E00               	movlw	0
  3337  0019FE  2022               	addwfc	?___awdiv+1,w,c
  3338  001A00  6E2A               	movwf	___wmul@multiplier+1,c
  3339  001A02  0E00               	movlw	0
  3340  001A04  6E2C               	movwf	___wmul@multiplicand+1,c
  3341  001A06  0E03               	movlw	3
  3342  001A08  6E2B               	movwf	___wmul@multiplicand,c
  3343  001A0A  EC04  F01F         	call	___wmul	;wreg free
  3344  001A0E  0E29               	movlw	low __npowers_
  3345  001A10  2429               	addwf	?___wmul,w,c
  3346  001A12  6EF6               	movwf	tblptrl,c
  3347  001A14  0E06               	movlw	high __npowers_
  3348  001A16  202A               	addwfc	?___wmul+1,w,c
  3349  001A18  6EF7               	movwf	tblptrh,c
  3350  001A1A                     	if	0	;There are less than 3 active tblptr bytes
  3351  001A1A                     	endif
  3352  001A1A  0009               	tblrd		*+
  3353  001A1C  0100               	movlb	0	; () banked
  3354  001A1E  CFF5 F06C          	movff	tablat,___ftmul@f1
  3355  001A22  0009               	tblrd		*+
  3356  001A24  0100               	movlb	0	; () banked
  3357  001A26  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  3358  001A2A  000A               	tblrd		*-
  3359  001A2C  0100               	movlb	0	; () banked
  3360  001A2E  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  3361  001A32  ECC6  F014         	call	___ftmul	;wreg free
  3362  001A36  C06C  F07E         	movff	?___ftmul,_scale$1705
  3363  001A3A  C06D  F07F         	movff	?___ftmul+1,_scale$1705+1
  3364  001A3E  C06E  F080         	movff	?___ftmul+2,_scale$1705+2
  3365                           
  3366                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3367  001A42  C07E  F06C         	movff	_scale$1705,___ftmul@f1
  3368  001A46  C07F  F06D         	movff	_scale$1705+1,___ftmul@f1+1
  3369  001A4A  C080  F06E         	movff	_scale$1705+2,___ftmul@f1+2
  3370  001A4E  0E00               	movlw	0
  3371  001A50  6E2C               	movwf	___wmul@multiplicand+1,c
  3372  001A52  0E03               	movlw	3
  3373  001A54  6E2B               	movwf	___wmul@multiplicand,c
  3374  001A56  0E00               	movlw	0
  3375  001A58  6E1E               	movwf	___awmod@divisor+1,c
  3376  001A5A  0E0A               	movlw	10
  3377  001A5C  6E1D               	movwf	___awmod@divisor,c
  3378  001A5E  0100               	movlb	0	; () banked
  3379  001A60  5181               	movf	scale@scl& (0+255),w,b
  3380  001A62  6E1B               	movwf	___awmod@dividend,c
  3381  001A64  6A1C               	clrf	___awmod@dividend+1,c
  3382  001A66  BE1B               	btfsc	___awmod@dividend,7,c
  3383  001A68  061C               	decf	___awmod@dividend+1,f,c
  3384  001A6A  EC32  F01C         	call	___awmod	;wreg free
  3385  001A6E  C01B  F029         	movff	?___awmod,___wmul@multiplier
  3386  001A72  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  3387  001A76  EC04  F01F         	call	___wmul	;wreg free
  3388  001A7A  0E29               	movlw	low __npowers_
  3389  001A7C  2429               	addwf	?___wmul,w,c
  3390  001A7E  6EF6               	movwf	tblptrl,c
  3391  001A80  0E06               	movlw	high __npowers_
  3392  001A82  202A               	addwfc	?___wmul+1,w,c
  3393  001A84  6EF7               	movwf	tblptrh,c
  3394  001A86                     	if	0	;There are less than 3 active tblptr bytes
  3395  001A86                     	endif
  3396  001A86  0009               	tblrd		*+
  3397  001A88  0100               	movlb	0	; () banked
  3398  001A8A  CFF5 F06F          	movff	tablat,___ftmul@f2
  3399  001A8E  0009               	tblrd		*+
  3400  001A90  0100               	movlb	0	; () banked
  3401  001A92  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3402  001A96  000A               	tblrd		*-
  3403  001A98  0100               	movlb	0	; () banked
  3404  001A9A  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3405  001A9E  ECC6  F014         	call	___ftmul	;wreg free
  3406  001AA2  C06C  F07B         	movff	?___ftmul,?_scale
  3407  001AA6  C06D  F07C         	movff	?___ftmul+1,?_scale+1
  3408  001AAA  C06E  F07D         	movff	?___ftmul+2,?_scale+2
  3409  001AAE  0012               	return	
  3410  001AB0                     l4982:
  3411                           
  3412                           ;doprnt.c: 432: else if(scl > 10)
  3413  001AB0  0100               	movlb	0	; () banked
  3414  001AB2  5181               	movf	scale@scl& (0+255),w,b
  3415  001AB4  0A80               	xorlw	128
  3416  001AB6  0F75               	addlw	-139
  3417  001AB8  A0D8               	btfss	status,0,c
  3418  001ABA  D05B               	goto	l4988
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3422  001ABC  0E00               	movlw	0
  3423  001ABE  6E24               	movwf	___awdiv@divisor+1,c
  3424  001AC0  0E0A               	movlw	10
  3425  001AC2  6E23               	movwf	___awdiv@divisor,c
  3426  001AC4  0100               	movlb	0	; () banked
  3427  001AC6  5181               	movf	scale@scl& (0+255),w,b
  3428  001AC8  6E21               	movwf	___awdiv@dividend,c
  3429  001ACA  6A22               	clrf	___awdiv@dividend+1,c
  3430  001ACC  BE21               	btfsc	___awdiv@dividend,7,c
  3431  001ACE  0622               	decf	___awdiv@dividend+1,f,c
  3432  001AD0  EC97  F01B         	call	___awdiv	;wreg free
  3433  001AD4  0E09               	movlw	9
  3434  001AD6  2421               	addwf	?___awdiv,w,c
  3435  001AD8  6E29               	movwf	___wmul@multiplier,c
  3436  001ADA  0E00               	movlw	0
  3437  001ADC  2022               	addwfc	?___awdiv+1,w,c
  3438  001ADE  6E2A               	movwf	___wmul@multiplier+1,c
  3439  001AE0  0E00               	movlw	0
  3440  001AE2  6E2C               	movwf	___wmul@multiplicand+1,c
  3441  001AE4  0E03               	movlw	3
  3442  001AE6  6E2B               	movwf	___wmul@multiplicand,c
  3443  001AE8  EC04  F01F         	call	___wmul	;wreg free
  3444  001AEC  0E29               	movlw	low __npowers_
  3445  001AEE  2429               	addwf	?___wmul,w,c
  3446  001AF0  6EF6               	movwf	tblptrl,c
  3447  001AF2  0E06               	movlw	high __npowers_
  3448  001AF4  202A               	addwfc	?___wmul+1,w,c
  3449  001AF6  6EF7               	movwf	tblptrh,c
  3450  001AF8                     	if	0	;There are less than 3 active tblptr bytes
  3451  001AF8                     	endif
  3452  001AF8  0009               	tblrd		*+
  3453  001AFA  0100               	movlb	0	; () banked
  3454  001AFC  CFF5 F06C          	movff	tablat,___ftmul@f1
  3455  001B00  0009               	tblrd		*+
  3456  001B02  0100               	movlb	0	; () banked
  3457  001B04  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  3458  001B08  000A               	tblrd		*-
  3459  001B0A  0100               	movlb	0	; () banked
  3460  001B0C  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  3461  001B10  0E00               	movlw	0
  3462  001B12  6E2C               	movwf	___wmul@multiplicand+1,c
  3463  001B14  0E03               	movlw	3
  3464  001B16  6E2B               	movwf	___wmul@multiplicand,c
  3465  001B18  0E00               	movlw	0
  3466  001B1A  6E1E               	movwf	___awmod@divisor+1,c
  3467  001B1C  0E0A               	movlw	10
  3468  001B1E  6E1D               	movwf	___awmod@divisor,c
  3469  001B20  0100               	movlb	0	; () banked
  3470  001B22  5181               	movf	scale@scl& (0+255),w,b
  3471  001B24  6E1B               	movwf	___awmod@dividend,c
  3472  001B26  6A1C               	clrf	___awmod@dividend+1,c
  3473  001B28  BE1B               	btfsc	___awmod@dividend,7,c
  3474  001B2A  061C               	decf	___awmod@dividend+1,f,c
  3475  001B2C  EC32  F01C         	call	___awmod	;wreg free
  3476  001B30  C01B  F029         	movff	?___awmod,___wmul@multiplier
  3477  001B34  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  3478  001B38  EC04  F01F         	call	___wmul	;wreg free
  3479  001B3C  0E29               	movlw	low __npowers_
  3480  001B3E  2429               	addwf	?___wmul,w,c
  3481  001B40  6EF6               	movwf	tblptrl,c
  3482  001B42  0E06               	movlw	high __npowers_
  3483  001B44  202A               	addwfc	?___wmul+1,w,c
  3484  001B46  6EF7               	movwf	tblptrh,c
  3485  001B48                     	if	0	;There are less than 3 active tblptr bytes
  3486  001B48                     	endif
  3487  001B48  0009               	tblrd		*+
  3488  001B4A  0100               	movlb	0	; () banked
  3489  001B4C  CFF5 F06F          	movff	tablat,___ftmul@f2
  3490  001B50  0009               	tblrd		*+
  3491  001B52  0100               	movlb	0	; () banked
  3492  001B54  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3493  001B58  000A               	tblrd		*-
  3494  001B5A  0100               	movlb	0	; () banked
  3495  001B5C  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3496  001B60  ECC6  F014         	call	___ftmul	;wreg free
  3497  001B64  C06C  F07B         	movff	?___ftmul,?_scale
  3498  001B68  C06D  F07C         	movff	?___ftmul+1,?_scale+1
  3499  001B6C  C06E  F07D         	movff	?___ftmul+2,?_scale+2
  3500  001B70  0012               	return	
  3501  001B72                     l4988:
  3502                           
  3503                           ;doprnt.c: 434: return _npowers_[scl];
  3504  001B72  0100               	movlb	0	; () banked
  3505  001B74  5181               	movf	scale@scl& (0+255),w,b
  3506  001B76  0D03               	mullw	3
  3507  001B78  0E29               	movlw	low __npowers_
  3508  001B7A  24F3               	addwf	prodl,w,c
  3509  001B7C  6EF6               	movwf	tblptrl,c
  3510  001B7E  0E06               	movlw	high __npowers_
  3511  001B80  20F4               	addwfc	prodh,w,c
  3512  001B82  6EF7               	movwf	tblptrh,c
  3513  001B84                     	if	0	;There are less than 3 active tblptr bytes
  3514  001B84                     	endif
  3515  001B84  0009               	tblrd		*+
  3516  001B86  0100               	movlb	0	; () banked
  3517  001B88  CFF5 F07B          	movff	tablat,?_scale
  3518  001B8C  0009               	tblrd		*+
  3519  001B8E  0100               	movlb	0	; () banked
  3520  001B90  CFF5 F07C          	movff	tablat,?_scale+1
  3521  001B94  000A               	tblrd		*-
  3522  001B96  0100               	movlb	0	; () banked
  3523  001B98  CFF5 F07D          	movff	tablat,?_scale+2
  3524  001B9C  0012               	return	
  3525  001B9E                     l4992:
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;doprnt.c: 435: }
  3529                           ;doprnt.c: 436: if(scl>=110)
  3530  001B9E  0100               	movlb	0	; () banked
  3531  001BA0  5181               	movf	scale@scl& (0+255),w,b
  3532  001BA2  0A80               	xorlw	128
  3533  001BA4  0F12               	addlw	-238
  3534  001BA6  A0D8               	btfss	status,0,c
  3535  001BA8  D09D               	goto	l5000
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3539  001BAA  0E00               	movlw	0
  3540  001BAC  6E2C               	movwf	___wmul@multiplicand+1,c
  3541  001BAE  0E03               	movlw	3
  3542  001BB0  6E2B               	movwf	___wmul@multiplicand,c
  3543  001BB2  0E00               	movlw	0
  3544  001BB4  6E24               	movwf	___awdiv@divisor+1,c
  3545  001BB6  0E0A               	movlw	10
  3546  001BB8  6E23               	movwf	___awdiv@divisor,c
  3547  001BBA  0E00               	movlw	0
  3548  001BBC  6E1E               	movwf	___awmod@divisor+1,c
  3549  001BBE  0E64               	movlw	100
  3550  001BC0  6E1D               	movwf	___awmod@divisor,c
  3551  001BC2  0100               	movlb	0	; () banked
  3552  001BC4  5181               	movf	scale@scl& (0+255),w,b
  3553  001BC6  6E1B               	movwf	___awmod@dividend,c
  3554  001BC8  6A1C               	clrf	___awmod@dividend+1,c
  3555  001BCA  BE1B               	btfsc	___awmod@dividend,7,c
  3556  001BCC  061C               	decf	___awmod@dividend+1,f,c
  3557  001BCE  EC32  F01C         	call	___awmod	;wreg free
  3558  001BD2  C01B  F021         	movff	?___awmod,___awdiv@dividend
  3559  001BD6  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  3560  001BDA  EC97  F01B         	call	___awdiv	;wreg free
  3561  001BDE  0E09               	movlw	9
  3562  001BE0  2421               	addwf	?___awdiv,w,c
  3563  001BE2  6E29               	movwf	___wmul@multiplier,c
  3564  001BE4  0E00               	movlw	0
  3565  001BE6  2022               	addwfc	?___awdiv+1,w,c
  3566  001BE8  6E2A               	movwf	___wmul@multiplier+1,c
  3567  001BEA  EC04  F01F         	call	___wmul	;wreg free
  3568  001BEE  0E50               	movlw	low __powers_
  3569  001BF0  2429               	addwf	?___wmul,w,c
  3570  001BF2  6EF6               	movwf	tblptrl,c
  3571  001BF4  0E06               	movlw	high __powers_
  3572  001BF6  202A               	addwfc	?___wmul+1,w,c
  3573  001BF8  6EF7               	movwf	tblptrh,c
  3574  001BFA                     	if	0	;There are less than 3 active tblptr bytes
  3575  001BFA                     	endif
  3576  001BFA  0009               	tblrd		*+
  3577  001BFC  0100               	movlb	0	; () banked
  3578  001BFE  CFF5 F06F          	movff	tablat,___ftmul@f2
  3579  001C02  0009               	tblrd		*+
  3580  001C04  0100               	movlb	0	; () banked
  3581  001C06  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3582  001C0A  000A               	tblrd		*-
  3583  001C0C  0100               	movlb	0	; () banked
  3584  001C0E  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3585  001C12  0E00               	movlw	0
  3586  001C14  6E24               	movwf	___awdiv@divisor+1,c
  3587  001C16  0E64               	movlw	100
  3588  001C18  6E23               	movwf	___awdiv@divisor,c
  3589  001C1A  0100               	movlb	0	; () banked
  3590  001C1C  5181               	movf	scale@scl& (0+255),w,b
  3591  001C1E  6E21               	movwf	___awdiv@dividend,c
  3592  001C20  6A22               	clrf	___awdiv@dividend+1,c
  3593  001C22  BE21               	btfsc	___awdiv@dividend,7,c
  3594  001C24  0622               	decf	___awdiv@dividend+1,f,c
  3595  001C26  EC97  F01B         	call	___awdiv	;wreg free
  3596  001C2A  0E12               	movlw	18
  3597  001C2C  2421               	addwf	?___awdiv,w,c
  3598  001C2E  6E29               	movwf	___wmul@multiplier,c
  3599  001C30  0E00               	movlw	0
  3600  001C32  2022               	addwfc	?___awdiv+1,w,c
  3601  001C34  6E2A               	movwf	___wmul@multiplier+1,c
  3602  001C36  0E00               	movlw	0
  3603  001C38  6E2C               	movwf	___wmul@multiplicand+1,c
  3604  001C3A  0E03               	movlw	3
  3605  001C3C  6E2B               	movwf	___wmul@multiplicand,c
  3606  001C3E  EC04  F01F         	call	___wmul	;wreg free
  3607  001C42  0E50               	movlw	low __powers_
  3608  001C44  2429               	addwf	?___wmul,w,c
  3609  001C46  6EF6               	movwf	tblptrl,c
  3610  001C48  0E06               	movlw	high __powers_
  3611  001C4A  202A               	addwfc	?___wmul+1,w,c
  3612  001C4C  6EF7               	movwf	tblptrh,c
  3613  001C4E                     	if	0	;There are less than 3 active tblptr bytes
  3614  001C4E                     	endif
  3615  001C4E  0009               	tblrd		*+
  3616  001C50  0100               	movlb	0	; () banked
  3617  001C52  CFF5 F06C          	movff	tablat,___ftmul@f1
  3618  001C56  0009               	tblrd		*+
  3619  001C58  0100               	movlb	0	; () banked
  3620  001C5A  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  3621  001C5E  000A               	tblrd		*-
  3622  001C60  0100               	movlb	0	; () banked
  3623  001C62  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  3624  001C66  ECC6  F014         	call	___ftmul	;wreg free
  3625  001C6A  C06C  F07E         	movff	?___ftmul,_scale$1705
  3626  001C6E  C06D  F07F         	movff	?___ftmul+1,_scale$1705+1
  3627  001C72  C06E  F080         	movff	?___ftmul+2,_scale$1705+2
  3628                           
  3629                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3630  001C76  C07E  F06C         	movff	_scale$1705,___ftmul@f1
  3631  001C7A  C07F  F06D         	movff	_scale$1705+1,___ftmul@f1+1
  3632  001C7E  C080  F06E         	movff	_scale$1705+2,___ftmul@f1+2
  3633  001C82  0E00               	movlw	0
  3634  001C84  6E2C               	movwf	___wmul@multiplicand+1,c
  3635  001C86  0E03               	movlw	3
  3636  001C88  6E2B               	movwf	___wmul@multiplicand,c
  3637  001C8A  0E00               	movlw	0
  3638  001C8C  6E1E               	movwf	___awmod@divisor+1,c
  3639  001C8E  0E0A               	movlw	10
  3640  001C90  6E1D               	movwf	___awmod@divisor,c
  3641  001C92  0100               	movlb	0	; () banked
  3642  001C94  5181               	movf	scale@scl& (0+255),w,b
  3643  001C96  6E1B               	movwf	___awmod@dividend,c
  3644  001C98  6A1C               	clrf	___awmod@dividend+1,c
  3645  001C9A  BE1B               	btfsc	___awmod@dividend,7,c
  3646  001C9C  061C               	decf	___awmod@dividend+1,f,c
  3647  001C9E  EC32  F01C         	call	___awmod	;wreg free
  3648  001CA2  C01B  F029         	movff	?___awmod,___wmul@multiplier
  3649  001CA6  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  3650  001CAA  EC04  F01F         	call	___wmul	;wreg free
  3651  001CAE  0E50               	movlw	low __powers_
  3652  001CB0  2429               	addwf	?___wmul,w,c
  3653  001CB2  6EF6               	movwf	tblptrl,c
  3654  001CB4  0E06               	movlw	high __powers_
  3655  001CB6  202A               	addwfc	?___wmul+1,w,c
  3656  001CB8  6EF7               	movwf	tblptrh,c
  3657  001CBA                     	if	0	;There are less than 3 active tblptr bytes
  3658  001CBA                     	endif
  3659  001CBA  0009               	tblrd		*+
  3660  001CBC  0100               	movlb	0	; () banked
  3661  001CBE  CFF5 F06F          	movff	tablat,___ftmul@f2
  3662  001CC2  0009               	tblrd		*+
  3663  001CC4  0100               	movlb	0	; () banked
  3664  001CC6  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3665  001CCA  000A               	tblrd		*-
  3666  001CCC  0100               	movlb	0	; () banked
  3667  001CCE  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3668  001CD2  ECC6  F014         	call	___ftmul	;wreg free
  3669  001CD6  C06C  F07B         	movff	?___ftmul,?_scale
  3670  001CDA  C06D  F07C         	movff	?___ftmul+1,?_scale+1
  3671  001CDE  C06E  F07D         	movff	?___ftmul+2,?_scale+2
  3672  001CE2  0012               	return	
  3673  001CE4                     l5000:
  3674                           
  3675                           ;doprnt.c: 438: else if(scl > 10)
  3676  001CE4  0100               	movlb	0	; () banked
  3677  001CE6  5181               	movf	scale@scl& (0+255),w,b
  3678  001CE8  0A80               	xorlw	128
  3679  001CEA  0F75               	addlw	-139
  3680  001CEC  A0D8               	btfss	status,0,c
  3681  001CEE  D05B               	goto	l5006
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3685  001CF0  0E00               	movlw	0
  3686  001CF2  6E24               	movwf	___awdiv@divisor+1,c
  3687  001CF4  0E0A               	movlw	10
  3688  001CF6  6E23               	movwf	___awdiv@divisor,c
  3689  001CF8  0100               	movlb	0	; () banked
  3690  001CFA  5181               	movf	scale@scl& (0+255),w,b
  3691  001CFC  6E21               	movwf	___awdiv@dividend,c
  3692  001CFE  6A22               	clrf	___awdiv@dividend+1,c
  3693  001D00  BE21               	btfsc	___awdiv@dividend,7,c
  3694  001D02  0622               	decf	___awdiv@dividend+1,f,c
  3695  001D04  EC97  F01B         	call	___awdiv	;wreg free
  3696  001D08  0E09               	movlw	9
  3697  001D0A  2421               	addwf	?___awdiv,w,c
  3698  001D0C  6E29               	movwf	___wmul@multiplier,c
  3699  001D0E  0E00               	movlw	0
  3700  001D10  2022               	addwfc	?___awdiv+1,w,c
  3701  001D12  6E2A               	movwf	___wmul@multiplier+1,c
  3702  001D14  0E00               	movlw	0
  3703  001D16  6E2C               	movwf	___wmul@multiplicand+1,c
  3704  001D18  0E03               	movlw	3
  3705  001D1A  6E2B               	movwf	___wmul@multiplicand,c
  3706  001D1C  EC04  F01F         	call	___wmul	;wreg free
  3707  001D20  0E50               	movlw	low __powers_
  3708  001D22  2429               	addwf	?___wmul,w,c
  3709  001D24  6EF6               	movwf	tblptrl,c
  3710  001D26  0E06               	movlw	high __powers_
  3711  001D28  202A               	addwfc	?___wmul+1,w,c
  3712  001D2A  6EF7               	movwf	tblptrh,c
  3713  001D2C                     	if	0	;There are less than 3 active tblptr bytes
  3714  001D2C                     	endif
  3715  001D2C  0009               	tblrd		*+
  3716  001D2E  0100               	movlb	0	; () banked
  3717  001D30  CFF5 F06C          	movff	tablat,___ftmul@f1
  3718  001D34  0009               	tblrd		*+
  3719  001D36  0100               	movlb	0	; () banked
  3720  001D38  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  3721  001D3C  000A               	tblrd		*-
  3722  001D3E  0100               	movlb	0	; () banked
  3723  001D40  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  3724  001D44  0E00               	movlw	0
  3725  001D46  6E2C               	movwf	___wmul@multiplicand+1,c
  3726  001D48  0E03               	movlw	3
  3727  001D4A  6E2B               	movwf	___wmul@multiplicand,c
  3728  001D4C  0E00               	movlw	0
  3729  001D4E  6E1E               	movwf	___awmod@divisor+1,c
  3730  001D50  0E0A               	movlw	10
  3731  001D52  6E1D               	movwf	___awmod@divisor,c
  3732  001D54  0100               	movlb	0	; () banked
  3733  001D56  5181               	movf	scale@scl& (0+255),w,b
  3734  001D58  6E1B               	movwf	___awmod@dividend,c
  3735  001D5A  6A1C               	clrf	___awmod@dividend+1,c
  3736  001D5C  BE1B               	btfsc	___awmod@dividend,7,c
  3737  001D5E  061C               	decf	___awmod@dividend+1,f,c
  3738  001D60  EC32  F01C         	call	___awmod	;wreg free
  3739  001D64  C01B  F029         	movff	?___awmod,___wmul@multiplier
  3740  001D68  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  3741  001D6C  EC04  F01F         	call	___wmul	;wreg free
  3742  001D70  0E50               	movlw	low __powers_
  3743  001D72  2429               	addwf	?___wmul,w,c
  3744  001D74  6EF6               	movwf	tblptrl,c
  3745  001D76  0E06               	movlw	high __powers_
  3746  001D78  202A               	addwfc	?___wmul+1,w,c
  3747  001D7A  6EF7               	movwf	tblptrh,c
  3748  001D7C                     	if	0	;There are less than 3 active tblptr bytes
  3749  001D7C                     	endif
  3750  001D7C  0009               	tblrd		*+
  3751  001D7E  0100               	movlb	0	; () banked
  3752  001D80  CFF5 F06F          	movff	tablat,___ftmul@f2
  3753  001D84  0009               	tblrd		*+
  3754  001D86  0100               	movlb	0	; () banked
  3755  001D88  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3756  001D8C  000A               	tblrd		*-
  3757  001D8E  0100               	movlb	0	; () banked
  3758  001D90  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3759  001D94  ECC6  F014         	call	___ftmul	;wreg free
  3760  001D98  C06C  F07B         	movff	?___ftmul,?_scale
  3761  001D9C  C06D  F07C         	movff	?___ftmul+1,?_scale+1
  3762  001DA0  C06E  F07D         	movff	?___ftmul+2,?_scale+2
  3763  001DA4  0012               	return	
  3764  001DA6                     l5006:
  3765                           
  3766                           ;doprnt.c: 440: return _powers_[scl];
  3767  001DA6  0100               	movlb	0	; () banked
  3768  001DA8  5181               	movf	scale@scl& (0+255),w,b
  3769  001DAA  0D03               	mullw	3
  3770  001DAC  0E50               	movlw	low __powers_
  3771  001DAE  24F3               	addwf	prodl,w,c
  3772  001DB0  6EF6               	movwf	tblptrl,c
  3773  001DB2  0E06               	movlw	high __powers_
  3774  001DB4  20F4               	addwfc	prodh,w,c
  3775  001DB6  6EF7               	movwf	tblptrh,c
  3776  001DB8                     	if	0	;There are less than 3 active tblptr bytes
  3777  001DB8                     	endif
  3778  001DB8  0009               	tblrd		*+
  3779  001DBA  0100               	movlb	0	; () banked
  3780  001DBC  CFF5 F07B          	movff	tablat,?_scale
  3781  001DC0  0009               	tblrd		*+
  3782  001DC2  0100               	movlb	0	; () banked
  3783  001DC4  CFF5 F07C          	movff	tablat,?_scale+1
  3784  001DC8  000A               	tblrd		*-
  3785  001DCA  0100               	movlb	0	; () banked
  3786  001DCC  CFF5 F07D          	movff	tablat,?_scale+2
  3787  001DD0  0012               	return	
  3788  001DD2                     __end_of_scale:
  3789                           	opt stack 0
  3790                           tblptru	equ	0xFF8
  3791                           tblptrh	equ	0xFF7
  3792                           tblptrl	equ	0xFF6
  3793                           tablat	equ	0xFF5
  3794                           prodh	equ	0xFF4
  3795                           prodl	equ	0xFF3
  3796                           intcon	equ	0xFF2
  3797                           postinc0	equ	0xFEE
  3798                           wreg	equ	0xFE8
  3799                           postinc2	equ	0xFDE
  3800                           postdec2	equ	0xFDD
  3801                           fsr2h	equ	0xFDA
  3802                           fsr2l	equ	0xFD9
  3803                           status	equ	0xFD8
  3804                           
  3805 ;; *************** function _putch *****************
  3806 ;; Defined at:
  3807 ;;		line 168 in file "mcc_generated_files/eusart1.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  txData          1    wreg     unsigned char 
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;  txData          1   27[COMRAM] unsigned char 
  3812 ;; Return value:  Size  Location     Type
  3813 ;;		None               void
  3814 ;; Registers used:
  3815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3821 ;;      Params:         0       0       0       0       0       0       0
  3822 ;;      Locals:         1       0       0       0       0       0       0
  3823 ;;      Temps:          0       0       0       0       0       0       0
  3824 ;;      Totals:         1       0       0       0       0       0       0
  3825 ;;Total ram usage:        1 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    5
  3828 ;; This function calls:
  3829 ;;		_EUSART1_Write
  3830 ;; This function is called by:
  3831 ;;		_printf
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           	psect	text3
  3836  003F1A                     __ptext3:
  3837                           	opt stack 0
  3838  003F1A                     _putch:
  3839                           	opt stack 24
  3840                           
  3841                           ;incstack = 0
  3842                           ;putch@txData stored from wreg
  3843  003F1A  6E1C               	movwf	putch@txData,c
  3844                           
  3845                           ;eusart1.c: 170: EUSART1_Write(txData);
  3846  003F1C  501C               	movf	putch@txData,w,c
  3847  003F1E  EC5A  F01E         	call	_EUSART1_Write
  3848  003F22  0012               	return	
  3849  003F24                     __end_of_putch:
  3850                           	opt stack 0
  3851                           tblptru	equ	0xFF8
  3852                           tblptrh	equ	0xFF7
  3853                           tblptrl	equ	0xFF6
  3854                           tablat	equ	0xFF5
  3855                           prodh	equ	0xFF4
  3856                           prodl	equ	0xFF3
  3857                           intcon	equ	0xFF2
  3858                           postinc0	equ	0xFEE
  3859                           wreg	equ	0xFE8
  3860                           postinc2	equ	0xFDE
  3861                           postdec2	equ	0xFDD
  3862                           fsr2h	equ	0xFDA
  3863                           fsr2l	equ	0xFD9
  3864                           status	equ	0xFD8
  3865                           
  3866 ;; *************** function _EUSART1_Write *****************
  3867 ;; Defined at:
  3868 ;;		line 140 in file "mcc_generated_files/eusart1.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;  txData          1    wreg     unsigned char 
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;  txData          1   26[COMRAM] unsigned char 
  3873 ;; Return value:  Size  Location     Type
  3874 ;;		None               void
  3875 ;; Registers used:
  3876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3882 ;;      Params:         0       0       0       0       0       0       0
  3883 ;;      Locals:         1       0       0       0       0       0       0
  3884 ;;      Temps:          0       0       0       0       0       0       0
  3885 ;;      Totals:         1       0       0       0       0       0       0
  3886 ;;Total ram usage:        1 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    4
  3889 ;; This function calls:
  3890 ;;		Nothing
  3891 ;; This function is called by:
  3892 ;;		_putch
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           	psect	text4
  3897  003CB4                     __ptext4:
  3898                           	opt stack 0
  3899  003CB4                     _EUSART1_Write:
  3900                           	opt stack 24
  3901                           
  3902                           ;incstack = 0
  3903                           ;EUSART1_Write@txData stored from wreg
  3904  003CB4  6E1B               	movwf	EUSART1_Write@txData,c
  3905  003CB6                     l4730:
  3906  003CB6  5045               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  3907  003CB8  B4D8               	btfsc	status,2,c
  3908  003CBA  D7FD               	goto	l4730
  3909                           
  3910                           ;eusart1.c: 144: }
  3911                           ;eusart1.c: 146: if(0 == PIE1bits.TX1IE)
  3912  003CBC  B89D               	btfsc	3997,4,c	;volatile
  3913  003CBE  D003               	goto	l118
  3914                           
  3915                           ;eusart1.c: 147: {
  3916                           ;eusart1.c: 148: TXREG1 = txData;
  3917  003CC0  C01B  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  3918                           
  3919                           ;eusart1.c: 149: }
  3920  003CC4  D012               	goto	l4744
  3921  003CC6                     l118:
  3922                           
  3923                           ;eusart1.c: 150: else
  3924                           ;eusart1.c: 151: {
  3925                           ;eusart1.c: 152: PIE1bits.TX1IE = 0;
  3926  003CC6  989D               	bcf	3997,4,c	;volatile
  3927                           
  3928                           ;eusart1.c: 153: eusart1TxBuffer[eusart1TxHead++] = txData;
  3929  003CC8  5041               	movf	_eusart1TxHead,w,c
  3930  003CCA  0D01               	mullw	1
  3931  003CCC  0E30               	movlw	low _eusart1TxBuffer
  3932  003CCE  24F3               	addwf	prodl,w,c
  3933  003CD0  6ED9               	movwf	fsr2l,c
  3934  003CD2  0E00               	movlw	high _eusart1TxBuffer
  3935  003CD4  20F4               	addwfc	prodh,w,c
  3936  003CD6  6EDA               	movwf	fsr2h,c
  3937  003CD8  C01B  FFDF         	movff	EUSART1_Write@txData,indf2
  3938  003CDC  2A41               	incf	_eusart1TxHead,f,c
  3939                           
  3940                           ;eusart1.c: 154: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  3941  003CDE  0E07               	movlw	7
  3942  003CE0  6441               	cpfsgt	_eusart1TxHead,c
  3943  003CE2  D002               	goto	l4742
  3944                           
  3945                           ;eusart1.c: 155: {
  3946                           ;eusart1.c: 156: eusart1TxHead = 0;
  3947  003CE4  0E00               	movlw	0
  3948  003CE6  6E41               	movwf	_eusart1TxHead,c
  3949  003CE8                     l4742:
  3950                           
  3951                           ;eusart1.c: 157: }
  3952                           ;eusart1.c: 158: eusart1TxBufferRemaining--;
  3953  003CE8  0645               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  3954  003CEA                     l4744:
  3955                           
  3956                           ;eusart1.c: 159: }
  3957                           ;eusart1.c: 160: PIE1bits.TX1IE = 1;
  3958  003CEA  889D               	bsf	3997,4,c	;volatile
  3959  003CEC  0012               	return	
  3960  003CEE                     __end_of_EUSART1_Write:
  3961                           	opt stack 0
  3962                           tblptru	equ	0xFF8
  3963                           tblptrh	equ	0xFF7
  3964                           tblptrl	equ	0xFF6
  3965                           tablat	equ	0xFF5
  3966                           prodh	equ	0xFF4
  3967                           prodl	equ	0xFF3
  3968                           intcon	equ	0xFF2
  3969                           postinc0	equ	0xFEE
  3970                           wreg	equ	0xFE8
  3971                           indf2	equ	0xFDF
  3972                           postinc2	equ	0xFDE
  3973                           postdec2	equ	0xFDD
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           status	equ	0xFD8
  3977                           
  3978 ;; *************** function _isdigit *****************
  3979 ;; Defined at:
  3980 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  c               1    wreg     unsigned char 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  c               1   28[COMRAM] unsigned char 
  3985 ;; Return value:  Size  Location     Type
  3986 ;;		None               void
  3987 ;; Registers used:
  3988 ;;		wreg, status,2, status,0
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3994 ;;      Params:         0       0       0       0       0       0       0
  3995 ;;      Locals:         2       0       0       0       0       0       0
  3996 ;;      Temps:          1       0       0       0       0       0       0
  3997 ;;      Totals:         3       0       0       0       0       0       0
  3998 ;;Total ram usage:        3 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    4
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_printf
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text5
  4009  003E50                     __ptext5:
  4010                           	opt stack 0
  4011  003E50                     _isdigit:
  4012                           	opt stack 25
  4013                           
  4014                           ;incstack = 0
  4015                           ;isdigit@c stored from wreg
  4016  003E50  6E1D               	movwf	isdigit@c,c
  4017  003E52  0E00               	movlw	0
  4018  003E54  6E1C               	movwf	_isdigit$1336,c
  4019  003E56  0E3A               	movlw	58
  4020  003E58  5C1D               	subwf	isdigit@c,w,c
  4021  003E5A  B0D8               	btfsc	status,0,c
  4022  003E5C  D005               	goto	l5018
  4023  003E5E  0E2F               	movlw	47
  4024  003E60  641D               	cpfsgt	isdigit@c,c
  4025  003E62  D002               	goto	l5018
  4026  003E64  0E01               	movlw	1
  4027  003E66  6E1C               	movwf	_isdigit$1336,c
  4028  003E68                     l5018:
  4029  003E68  C01C  F01B         	movff	_isdigit$1336,??_isdigit
  4030  003E6C  301B               	rrcf	??_isdigit,w,c
  4031  003E6E  0012               	return	
  4032  003E70                     __end_of_isdigit:
  4033                           	opt stack 0
  4034                           tblptru	equ	0xFF8
  4035                           tblptrh	equ	0xFF7
  4036                           tblptrl	equ	0xFF6
  4037                           tablat	equ	0xFF5
  4038                           prodh	equ	0xFF4
  4039                           prodl	equ	0xFF3
  4040                           intcon	equ	0xFF2
  4041                           postinc0	equ	0xFEE
  4042                           wreg	equ	0xFE8
  4043                           indf2	equ	0xFDF
  4044                           postinc2	equ	0xFDE
  4045                           postdec2	equ	0xFDD
  4046                           fsr2h	equ	0xFDA
  4047                           fsr2l	equ	0xFD9
  4048                           status	equ	0xFD8
  4049                           
  4050 ;; *************** function _fround *****************
  4051 ;; Defined at:
  4052 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  prec            1    wreg     unsigned char 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  prec            1   36[BANK0 ] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  3   27[BANK0 ] unsigned char 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4066 ;;      Params:         0       3       0       0       0       0       0
  4067 ;;      Locals:         0       7       0       0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0
  4069 ;;      Totals:         0      10       0       0       0       0       0
  4070 ;;Total ram usage:       10 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    6
  4073 ;; This function calls:
  4074 ;;		___awdiv
  4075 ;;		___awmod
  4076 ;;		___ftmul
  4077 ;;		___wmul
  4078 ;; This function is called by:
  4079 ;;		_printf
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           	psect	text6
  4084  001DD2                     __ptext6:
  4085                           	opt stack 0
  4086  001DD2                     _fround:
  4087                           	opt stack 23
  4088                           
  4089                           ;incstack = 0
  4090                           ;fround@prec stored from wreg
  4091  001DD2  0100               	movlb	0	; () banked
  4092  001DD4  6F84               	movwf	fround@prec& (0+255),b
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;doprnt.c: 413: if(prec>=110)
  4096  001DD6  0E6D               	movlw	109
  4097  001DD8  0100               	movlb	0	; () banked
  4098  001DDA  6584               	cpfsgt	fround@prec& (0+255),b
  4099  001DDC  D0AE               	goto	l4960
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4103  001DDE  0E00               	movlw	0
  4104  001DE0  6E2C               	movwf	___wmul@multiplicand+1,c
  4105  001DE2  0E03               	movlw	3
  4106  001DE4  6E2B               	movwf	___wmul@multiplicand,c
  4107  001DE6  0E00               	movlw	0
  4108  001DE8  6E24               	movwf	___awdiv@divisor+1,c
  4109  001DEA  0E0A               	movlw	10
  4110  001DEC  6E23               	movwf	___awdiv@divisor,c
  4111  001DEE  0E00               	movlw	0
  4112  001DF0  6E1E               	movwf	___awmod@divisor+1,c
  4113  001DF2  0E64               	movlw	100
  4114  001DF4  6E1D               	movwf	___awmod@divisor,c
  4115  001DF6  0100               	movlb	0	; () banked
  4116  001DF8  C084  F01B         	movff	fround@prec,___awmod@dividend
  4117  001DFC  6A1C               	clrf	___awmod@dividend+1,c
  4118  001DFE  EC32  F01C         	call	___awmod	;wreg free
  4119  001E02  C01B  F021         	movff	?___awmod,___awdiv@dividend
  4120  001E06  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  4121  001E0A  EC97  F01B         	call	___awdiv	;wreg free
  4122  001E0E  0E09               	movlw	9
  4123  001E10  2421               	addwf	?___awdiv,w,c
  4124  001E12  6E29               	movwf	___wmul@multiplier,c
  4125  001E14  0E00               	movlw	0
  4126  001E16  2022               	addwfc	?___awdiv+1,w,c
  4127  001E18  6E2A               	movwf	___wmul@multiplier+1,c
  4128  001E1A  EC04  F01F         	call	___wmul	;wreg free
  4129  001E1E  0E29               	movlw	low __npowers_
  4130  001E20  2429               	addwf	?___wmul,w,c
  4131  001E22  6EF6               	movwf	tblptrl,c
  4132  001E24  0E06               	movlw	high __npowers_
  4133  001E26  202A               	addwfc	?___wmul+1,w,c
  4134  001E28  6EF7               	movwf	tblptrh,c
  4135  001E2A                     	if	0	;There are less than 3 active tblptr bytes
  4136  001E2A                     	endif
  4137  001E2A  0009               	tblrd		*+
  4138  001E2C  0100               	movlb	0	; () banked
  4139  001E2E  CFF5 F06F          	movff	tablat,___ftmul@f2
  4140  001E32  0009               	tblrd		*+
  4141  001E34  0100               	movlb	0	; () banked
  4142  001E36  CFF5 F070          	movff	tablat,___ftmul@f2+1
  4143  001E3A  000A               	tblrd		*-
  4144  001E3C  0100               	movlb	0	; () banked
  4145  001E3E  CFF5 F071          	movff	tablat,___ftmul@f2+2
  4146  001E42  0E00               	movlw	0
  4147  001E44  6E24               	movwf	___awdiv@divisor+1,c
  4148  001E46  0E64               	movlw	100
  4149  001E48  6E23               	movwf	___awdiv@divisor,c
  4150  001E4A  0100               	movlb	0	; () banked
  4151  001E4C  C084  F021         	movff	fround@prec,___awdiv@dividend
  4152  001E50  6A22               	clrf	___awdiv@dividend+1,c
  4153  001E52  EC97  F01B         	call	___awdiv	;wreg free
  4154  001E56  0E12               	movlw	18
  4155  001E58  2421               	addwf	?___awdiv,w,c
  4156  001E5A  6E29               	movwf	___wmul@multiplier,c
  4157  001E5C  0E00               	movlw	0
  4158  001E5E  2022               	addwfc	?___awdiv+1,w,c
  4159  001E60  6E2A               	movwf	___wmul@multiplier+1,c
  4160  001E62  0E00               	movlw	0
  4161  001E64  6E2C               	movwf	___wmul@multiplicand+1,c
  4162  001E66  0E03               	movlw	3
  4163  001E68  6E2B               	movwf	___wmul@multiplicand,c
  4164  001E6A  EC04  F01F         	call	___wmul	;wreg free
  4165  001E6E  0E29               	movlw	low __npowers_
  4166  001E70  2429               	addwf	?___wmul,w,c
  4167  001E72  6EF6               	movwf	tblptrl,c
  4168  001E74  0E06               	movlw	high __npowers_
  4169  001E76  202A               	addwfc	?___wmul+1,w,c
  4170  001E78  6EF7               	movwf	tblptrh,c
  4171  001E7A                     	if	0	;There are less than 3 active tblptr bytes
  4172  001E7A                     	endif
  4173  001E7A  0009               	tblrd		*+
  4174  001E7C  0100               	movlb	0	; () banked
  4175  001E7E  CFF5 F06C          	movff	tablat,___ftmul@f1
  4176  001E82  0009               	tblrd		*+
  4177  001E84  0100               	movlb	0	; () banked
  4178  001E86  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  4179  001E8A  000A               	tblrd		*-
  4180  001E8C  0100               	movlb	0	; () banked
  4181  001E8E  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  4182  001E92  ECC6  F014         	call	___ftmul	;wreg free
  4183  001E96  C06C  F081         	movff	?___ftmul,_fround$1703
  4184  001E9A  C06D  F082         	movff	?___ftmul+1,_fround$1703+1
  4185  001E9E  C06E  F083         	movff	?___ftmul+2,_fround$1703+2
  4186                           
  4187                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4188  001EA2  0E00               	movlw	0
  4189  001EA4  6E2C               	movwf	___wmul@multiplicand+1,c
  4190  001EA6  0E03               	movlw	3
  4191  001EA8  6E2B               	movwf	___wmul@multiplicand,c
  4192  001EAA  0E00               	movlw	0
  4193  001EAC  6E1E               	movwf	___awmod@divisor+1,c
  4194  001EAE  0E0A               	movlw	10
  4195  001EB0  6E1D               	movwf	___awmod@divisor,c
  4196  001EB2  0100               	movlb	0	; () banked
  4197  001EB4  C084  F01B         	movff	fround@prec,___awmod@dividend
  4198  001EB8  6A1C               	clrf	___awmod@dividend+1,c
  4199  001EBA  EC32  F01C         	call	___awmod	;wreg free
  4200  001EBE  C01B  F029         	movff	?___awmod,___wmul@multiplier
  4201  001EC2  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  4202  001EC6  EC04  F01F         	call	___wmul	;wreg free
  4203  001ECA  0E29               	movlw	low __npowers_
  4204  001ECC  2429               	addwf	?___wmul,w,c
  4205  001ECE  6EF6               	movwf	tblptrl,c
  4206  001ED0  0E06               	movlw	high __npowers_
  4207  001ED2  202A               	addwfc	?___wmul+1,w,c
  4208  001ED4  6EF7               	movwf	tblptrh,c
  4209  001ED6                     	if	0	;There are less than 3 active tblptr bytes
  4210  001ED6                     	endif
  4211  001ED6  0009               	tblrd		*+
  4212  001ED8  0100               	movlb	0	; () banked
  4213  001EDA  CFF5 F06F          	movff	tablat,___ftmul@f2
  4214  001EDE  0009               	tblrd		*+
  4215  001EE0  0100               	movlb	0	; () banked
  4216  001EE2  CFF5 F070          	movff	tablat,___ftmul@f2+1
  4217  001EE6  000A               	tblrd		*-
  4218  001EE8  0100               	movlb	0	; () banked
  4219  001EEA  CFF5 F071          	movff	tablat,___ftmul@f2+2
  4220  001EEE  C081  F06C         	movff	_fround$1703,___ftmul@f1
  4221  001EF2  C082  F06D         	movff	_fround$1703+1,___ftmul@f1+1
  4222  001EF6  C083  F06E         	movff	_fround$1703+2,___ftmul@f1+2
  4223  001EFA  ECC6  F014         	call	___ftmul	;wreg free
  4224  001EFE  C06C  F07E         	movff	?___ftmul,_fround$1704
  4225  001F02  C06D  F07F         	movff	?___ftmul+1,_fround$1704+1
  4226  001F06  C06E  F080         	movff	?___ftmul+2,_fround$1704+2
  4227                           
  4228                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4229  001F0A  C07E  F06C         	movff	_fround$1704,___ftmul@f1
  4230  001F0E  C07F  F06D         	movff	_fround$1704+1,___ftmul@f1+1
  4231  001F12  C080  F06E         	movff	_fround$1704+2,___ftmul@f1+2
  4232  001F16  0E00               	movlw	0
  4233  001F18  0100               	movlb	0	; () banked
  4234  001F1A  6F6F               	movwf	___ftmul@f2& (0+255),b
  4235  001F1C  0E00               	movlw	0
  4236  001F1E  0100               	movlb	0	; () banked
  4237  001F20  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  4238  001F22  0E3F               	movlw	63
  4239  001F24  0100               	movlb	0	; () banked
  4240  001F26  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  4241  001F28  ECC6  F014         	call	___ftmul	;wreg free
  4242  001F2C  C06C  F07B         	movff	?___ftmul,?_fround
  4243  001F30  C06D  F07C         	movff	?___ftmul+1,?_fround+1
  4244  001F34  C06E  F07D         	movff	?___ftmul+2,?_fround+2
  4245  001F38  0012               	return	
  4246  001F3A                     l4960:
  4247                           
  4248                           ;doprnt.c: 415: else if(prec > 10)
  4249  001F3A  0E0A               	movlw	10
  4250  001F3C  0100               	movlb	0	; () banked
  4251  001F3E  6584               	cpfsgt	fround@prec& (0+255),b
  4252  001F40  D06E               	goto	l4968
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4256  001F42  0E00               	movlw	0
  4257  001F44  6E2C               	movwf	___wmul@multiplicand+1,c
  4258  001F46  0E03               	movlw	3
  4259  001F48  6E2B               	movwf	___wmul@multiplicand,c
  4260  001F4A  0E00               	movlw	0
  4261  001F4C  6E1E               	movwf	___awmod@divisor+1,c
  4262  001F4E  0E0A               	movlw	10
  4263  001F50  6E1D               	movwf	___awmod@divisor,c
  4264  001F52  0100               	movlb	0	; () banked
  4265  001F54  C084  F01B         	movff	fround@prec,___awmod@dividend
  4266  001F58  6A1C               	clrf	___awmod@dividend+1,c
  4267  001F5A  EC32  F01C         	call	___awmod	;wreg free
  4268  001F5E  C01B  F029         	movff	?___awmod,___wmul@multiplier
  4269  001F62  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  4270  001F66  EC04  F01F         	call	___wmul	;wreg free
  4271  001F6A  0E29               	movlw	low __npowers_
  4272  001F6C  2429               	addwf	?___wmul,w,c
  4273  001F6E  6EF6               	movwf	tblptrl,c
  4274  001F70  0E06               	movlw	high __npowers_
  4275  001F72  202A               	addwfc	?___wmul+1,w,c
  4276  001F74  6EF7               	movwf	tblptrh,c
  4277  001F76                     	if	0	;There are less than 3 active tblptr bytes
  4278  001F76                     	endif
  4279  001F76  0009               	tblrd		*+
  4280  001F78  0100               	movlb	0	; () banked
  4281  001F7A  CFF5 F06F          	movff	tablat,___ftmul@f2
  4282  001F7E  0009               	tblrd		*+
  4283  001F80  0100               	movlb	0	; () banked
  4284  001F82  CFF5 F070          	movff	tablat,___ftmul@f2+1
  4285  001F86  000A               	tblrd		*-
  4286  001F88  0100               	movlb	0	; () banked
  4287  001F8A  CFF5 F071          	movff	tablat,___ftmul@f2+2
  4288  001F8E  0E00               	movlw	0
  4289  001F90  6E24               	movwf	___awdiv@divisor+1,c
  4290  001F92  0E0A               	movlw	10
  4291  001F94  6E23               	movwf	___awdiv@divisor,c
  4292  001F96  0100               	movlb	0	; () banked
  4293  001F98  C084  F021         	movff	fround@prec,___awdiv@dividend
  4294  001F9C  6A22               	clrf	___awdiv@dividend+1,c
  4295  001F9E  EC97  F01B         	call	___awdiv	;wreg free
  4296  001FA2  0E09               	movlw	9
  4297  001FA4  2421               	addwf	?___awdiv,w,c
  4298  001FA6  6E29               	movwf	___wmul@multiplier,c
  4299  001FA8  0E00               	movlw	0
  4300  001FAA  2022               	addwfc	?___awdiv+1,w,c
  4301  001FAC  6E2A               	movwf	___wmul@multiplier+1,c
  4302  001FAE  0E00               	movlw	0
  4303  001FB0  6E2C               	movwf	___wmul@multiplicand+1,c
  4304  001FB2  0E03               	movlw	3
  4305  001FB4  6E2B               	movwf	___wmul@multiplicand,c
  4306  001FB6  EC04  F01F         	call	___wmul	;wreg free
  4307  001FBA  0E29               	movlw	low __npowers_
  4308  001FBC  2429               	addwf	?___wmul,w,c
  4309  001FBE  6EF6               	movwf	tblptrl,c
  4310  001FC0  0E06               	movlw	high __npowers_
  4311  001FC2  202A               	addwfc	?___wmul+1,w,c
  4312  001FC4  6EF7               	movwf	tblptrh,c
  4313  001FC6                     	if	0	;There are less than 3 active tblptr bytes
  4314  001FC6                     	endif
  4315  001FC6  0009               	tblrd		*+
  4316  001FC8  0100               	movlb	0	; () banked
  4317  001FCA  CFF5 F06C          	movff	tablat,___ftmul@f1
  4318  001FCE  0009               	tblrd		*+
  4319  001FD0  0100               	movlb	0	; () banked
  4320  001FD2  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  4321  001FD6  000A               	tblrd		*-
  4322  001FD8  0100               	movlb	0	; () banked
  4323  001FDA  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  4324  001FDE  ECC6  F014         	call	___ftmul	;wreg free
  4325  001FE2  C06C  F081         	movff	?___ftmul,_fround$1703
  4326  001FE6  C06D  F082         	movff	?___ftmul+1,_fround$1703+1
  4327  001FEA  C06E  F083         	movff	?___ftmul+2,_fround$1703+2
  4328                           
  4329                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4330  001FEE  C081  F06C         	movff	_fround$1703,___ftmul@f1
  4331  001FF2  C082  F06D         	movff	_fround$1703+1,___ftmul@f1+1
  4332  001FF6  C083  F06E         	movff	_fround$1703+2,___ftmul@f1+2
  4333  001FFA  0E00               	movlw	0
  4334  001FFC  0100               	movlb	0	; () banked
  4335  001FFE  6F6F               	movwf	___ftmul@f2& (0+255),b
  4336  002000  0E00               	movlw	0
  4337  002002  0100               	movlb	0	; () banked
  4338  002004  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  4339  002006  0E3F               	movlw	63
  4340  002008  0100               	movlb	0	; () banked
  4341  00200A  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  4342  00200C  ECC6  F014         	call	___ftmul	;wreg free
  4343  002010  C06C  F07B         	movff	?___ftmul,?_fround
  4344  002014  C06D  F07C         	movff	?___ftmul+1,?_fround+1
  4345  002018  C06E  F07D         	movff	?___ftmul+2,?_fround+2
  4346  00201C  0012               	return	
  4347  00201E                     l4968:
  4348                           
  4349                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4350  00201E  0100               	movlb	0	; () banked
  4351  002020  5184               	movf	fround@prec& (0+255),w,b
  4352  002022  0D03               	mullw	3
  4353  002024  0E29               	movlw	low __npowers_
  4354  002026  24F3               	addwf	prodl,w,c
  4355  002028  6EF6               	movwf	tblptrl,c
  4356  00202A  0E06               	movlw	high __npowers_
  4357  00202C  20F4               	addwfc	prodh,w,c
  4358  00202E  6EF7               	movwf	tblptrh,c
  4359  002030                     	if	0	;There are less than 3 active tblptr bytes
  4360  002030                     	endif
  4361  002030  0009               	tblrd		*+
  4362  002032  0100               	movlb	0	; () banked
  4363  002034  CFF5 F06C          	movff	tablat,___ftmul@f1
  4364  002038  0009               	tblrd		*+
  4365  00203A  0100               	movlb	0	; () banked
  4366  00203C  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  4367  002040  000A               	tblrd		*-
  4368  002042  0100               	movlb	0	; () banked
  4369  002044  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  4370  002048  0E00               	movlw	0
  4371  00204A  0100               	movlb	0	; () banked
  4372  00204C  6F6F               	movwf	___ftmul@f2& (0+255),b
  4373  00204E  0E00               	movlw	0
  4374  002050  0100               	movlb	0	; () banked
  4375  002052  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  4376  002054  0E3F               	movlw	63
  4377  002056  0100               	movlb	0	; () banked
  4378  002058  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  4379  00205A  ECC6  F014         	call	___ftmul	;wreg free
  4380  00205E  C06C  F07B         	movff	?___ftmul,?_fround
  4381  002062  C06D  F07C         	movff	?___ftmul+1,?_fround+1
  4382  002066  C06E  F07D         	movff	?___ftmul+2,?_fround+2
  4383  00206A  0012               	return	
  4384  00206C                     __end_of_fround:
  4385                           	opt stack 0
  4386                           tblptru	equ	0xFF8
  4387                           tblptrh	equ	0xFF7
  4388                           tblptrl	equ	0xFF6
  4389                           tablat	equ	0xFF5
  4390                           prodh	equ	0xFF4
  4391                           prodl	equ	0xFF3
  4392                           intcon	equ	0xFF2
  4393                           postinc0	equ	0xFEE
  4394                           wreg	equ	0xFE8
  4395                           indf2	equ	0xFDF
  4396                           postinc2	equ	0xFDE
  4397                           postdec2	equ	0xFDD
  4398                           fsr2h	equ	0xFDA
  4399                           fsr2l	equ	0xFD9
  4400                           status	equ	0xFD8
  4401                           
  4402 ;; *************** function ___awmod *****************
  4403 ;; Defined at:
  4404 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;  dividend        2   26[COMRAM] int 
  4407 ;;  divisor         2   28[COMRAM] int 
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;  sign            1   31[COMRAM] unsigned char 
  4410 ;;  counter         1   30[COMRAM] unsigned char 
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  2   26[COMRAM] int 
  4413 ;; Registers used:
  4414 ;;		wreg, status,2, status,0, prodl
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4420 ;;      Params:         4       0       0       0       0       0       0
  4421 ;;      Locals:         2       0       0       0       0       0       0
  4422 ;;      Temps:          0       0       0       0       0       0       0
  4423 ;;      Totals:         6       0       0       0       0       0       0
  4424 ;;Total ram usage:        6 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    4
  4427 ;; This function calls:
  4428 ;;		Nothing
  4429 ;; This function is called by:
  4430 ;;		_fround
  4431 ;;		_scale
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text7
  4436  003864                     __ptext7:
  4437                           	opt stack 0
  4438  003864                     ___awmod:
  4439                           	opt stack 24
  4440                           
  4441                           ;incstack = 0
  4442  003864  0E00               	movlw	0
  4443  003866  6E20               	movwf	___awmod@sign,c
  4444  003868  501C               	movf	___awmod@dividend+1,w,c
  4445  00386A  0A80               	xorlw	128
  4446  00386C  6EF3               	movwf	prodl,c
  4447  00386E  0E80               	movlw	128
  4448  003870  5CF3               	subwf	prodl,w,c
  4449  003872  0E00               	movlw	0
  4450  003874  B4D8               	btfsc	status,2,c
  4451  003876  5C1B               	subwf	___awmod@dividend,w,c
  4452  003878  B0D8               	btfsc	status,0,c
  4453  00387A  D006               	goto	l4798
  4454  00387C  6C1B               	negf	___awmod@dividend,c
  4455  00387E  1E1C               	comf	___awmod@dividend+1,f,c
  4456  003880  B0D8               	btfsc	status,0,c
  4457  003882  2A1C               	incf	___awmod@dividend+1,f,c
  4458  003884  0E01               	movlw	1
  4459  003886  6E20               	movwf	___awmod@sign,c
  4460  003888                     l4798:
  4461  003888  501E               	movf	___awmod@divisor+1,w,c
  4462  00388A  0A80               	xorlw	128
  4463  00388C  6EF3               	movwf	prodl,c
  4464  00388E  0E80               	movlw	128
  4465  003890  5CF3               	subwf	prodl,w,c
  4466  003892  0E00               	movlw	0
  4467  003894  B4D8               	btfsc	status,2,c
  4468  003896  5C1D               	subwf	___awmod@divisor,w,c
  4469  003898  B0D8               	btfsc	status,0,c
  4470  00389A  D004               	goto	l4802
  4471  00389C  6C1D               	negf	___awmod@divisor,c
  4472  00389E  1E1E               	comf	___awmod@divisor+1,f,c
  4473  0038A0  B0D8               	btfsc	status,0,c
  4474  0038A2  2A1E               	incf	___awmod@divisor+1,f,c
  4475  0038A4                     l4802:
  4476  0038A4  501E               	movf	___awmod@divisor+1,w,c
  4477  0038A6  101D               	iorwf	___awmod@divisor,w,c
  4478  0038A8  B4D8               	btfsc	status,2,c
  4479  0038AA  D018               	goto	l4818
  4480  0038AC  0E01               	movlw	1
  4481  0038AE  6E1F               	movwf	___awmod@counter,c
  4482  0038B0  D004               	goto	l4808
  4483  0038B2                     l4806:
  4484  0038B2  90D8               	bcf	status,0,c
  4485  0038B4  361D               	rlcf	___awmod@divisor,f,c
  4486  0038B6  361E               	rlcf	___awmod@divisor+1,f,c
  4487  0038B8  2A1F               	incf	___awmod@counter,f,c
  4488  0038BA                     l4808:
  4489  0038BA  AE1E               	btfss	___awmod@divisor+1,7,c
  4490  0038BC  D7FA               	goto	l4806
  4491  0038BE                     l4810:
  4492  0038BE  501D               	movf	___awmod@divisor,w,c
  4493  0038C0  5C1B               	subwf	___awmod@dividend,w,c
  4494  0038C2  501E               	movf	___awmod@divisor+1,w,c
  4495  0038C4  581C               	subwfb	___awmod@dividend+1,w,c
  4496  0038C6  A0D8               	btfss	status,0,c
  4497  0038C8  D004               	goto	l4814
  4498  0038CA  501D               	movf	___awmod@divisor,w,c
  4499  0038CC  5E1B               	subwf	___awmod@dividend,f,c
  4500  0038CE  501E               	movf	___awmod@divisor+1,w,c
  4501  0038D0  5A1C               	subwfb	___awmod@dividend+1,f,c
  4502  0038D2                     l4814:
  4503  0038D2  90D8               	bcf	status,0,c
  4504  0038D4  321E               	rrcf	___awmod@divisor+1,f,c
  4505  0038D6  321D               	rrcf	___awmod@divisor,f,c
  4506  0038D8  2E1F               	decfsz	___awmod@counter,f,c
  4507  0038DA  D7F1               	goto	l4810
  4508  0038DC                     l4818:
  4509  0038DC  5020               	movf	___awmod@sign,w,c
  4510  0038DE  B4D8               	btfsc	status,2,c
  4511  0038E0  D004               	goto	l4822
  4512  0038E2  6C1B               	negf	___awmod@dividend,c
  4513  0038E4  1E1C               	comf	___awmod@dividend+1,f,c
  4514  0038E6  B0D8               	btfsc	status,0,c
  4515  0038E8  2A1C               	incf	___awmod@dividend+1,f,c
  4516  0038EA                     l4822:
  4517  0038EA  C01B  F01B         	movff	___awmod@dividend,?___awmod
  4518  0038EE  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
  4519  0038F2  0012               	return	
  4520  0038F4                     __end_of___awmod:
  4521                           	opt stack 0
  4522                           tblptru	equ	0xFF8
  4523                           tblptrh	equ	0xFF7
  4524                           tblptrl	equ	0xFF6
  4525                           tablat	equ	0xFF5
  4526                           prodh	equ	0xFF4
  4527                           prodl	equ	0xFF3
  4528                           intcon	equ	0xFF2
  4529                           postinc0	equ	0xFEE
  4530                           wreg	equ	0xFE8
  4531                           indf2	equ	0xFDF
  4532                           postinc2	equ	0xFDE
  4533                           postdec2	equ	0xFDD
  4534                           fsr2h	equ	0xFDA
  4535                           fsr2l	equ	0xFD9
  4536                           status	equ	0xFD8
  4537                           
  4538 ;; *************** function __tdiv_to_l_ *****************
  4539 ;; Defined at:
  4540 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;  f1              3   26[COMRAM] float 
  4543 ;;  f2              3   29[COMRAM] float 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  quot            4   35[COMRAM] unsigned long 
  4546 ;;  exp1            1   40[COMRAM] unsigned char 
  4547 ;;  cntr            1   39[COMRAM] unsigned char 
  4548 ;; Return value:  Size  Location     Type
  4549 ;;                  4   26[COMRAM] unsigned long 
  4550 ;; Registers used:
  4551 ;;		wreg, status,2, status,0
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4557 ;;      Params:         6       0       0       0       0       0       0
  4558 ;;      Locals:         6       0       0       0       0       0       0
  4559 ;;      Temps:          3       0       0       0       0       0       0
  4560 ;;      Totals:        15       0       0       0       0       0       0
  4561 ;;Total ram usage:       15 bytes
  4562 ;; Hardware stack levels used:    1
  4563 ;; Hardware stack levels required when called:    4
  4564 ;; This function calls:
  4565 ;;		Nothing
  4566 ;; This function is called by:
  4567 ;;		_printf
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           	psect	text8
  4572  002F24                     __ptext8:
  4573                           	opt stack 0
  4574  002F24                     __tdiv_to_l_:
  4575                           	opt stack 25
  4576                           
  4577                           ;incstack = 0
  4578  002F24  C01D  F021         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4579  002F28  6A22               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4580  002F2A  6A23               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4581  002F2C  341C               	rlcf	__tdiv_to_l_@f1+1,w,c
  4582  002F2E  3621               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4583  002F30  E301               	bnc	u5341
  4584  002F32  8022               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4585  002F34                     u5341:
  4586  002F34  5021               	movf	??__tdiv_to_l_,w,c
  4587  002F36  6E29               	movwf	__tdiv_to_l_@exp1,c
  4588  002F38  6629               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  4589  002F3A  D009               	goto	l5028
  4590  002F3C  0E00               	movlw	0
  4591  002F3E  6E1B               	movwf	?__tdiv_to_l_,c
  4592  002F40  0E00               	movlw	0
  4593  002F42  6E1C               	movwf	?__tdiv_to_l_+1,c
  4594  002F44  0E00               	movlw	0
  4595  002F46  6E1D               	movwf	?__tdiv_to_l_+2,c
  4596  002F48  0E00               	movlw	0
  4597  002F4A  6E1E               	movwf	?__tdiv_to_l_+3,c
  4598  002F4C  0012               	return	
  4599  002F4E                     l5028:
  4600  002F4E  C020  F021         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4601  002F52  6A22               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4602  002F54  6A23               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4603  002F56  341F               	rlcf	__tdiv_to_l_@f2+1,w,c
  4604  002F58  3621               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4605  002F5A  E301               	bnc	u5361
  4606  002F5C  8022               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4607  002F5E                     u5361:
  4608  002F5E  5021               	movf	??__tdiv_to_l_,w,c
  4609  002F60  6E28               	movwf	__tdiv_to_l_@cntr,c
  4610  002F62  6628               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  4611  002F64  D009               	goto	l5034
  4612  002F66  0E00               	movlw	0
  4613  002F68  6E1B               	movwf	?__tdiv_to_l_,c
  4614  002F6A  0E00               	movlw	0
  4615  002F6C  6E1C               	movwf	?__tdiv_to_l_+1,c
  4616  002F6E  0E00               	movlw	0
  4617  002F70  6E1D               	movwf	?__tdiv_to_l_+2,c
  4618  002F72  0E00               	movlw	0
  4619  002F74  6E1E               	movwf	?__tdiv_to_l_+3,c
  4620  002F76  0012               	return	
  4621  002F78                     l5034:
  4622  002F78  8E1C               	bsf	__tdiv_to_l_@f1+1,7,c
  4623  002F7A  0EFF               	movlw	255
  4624  002F7C  161B               	andwf	__tdiv_to_l_@f1,f,c
  4625  002F7E  0EFF               	movlw	255
  4626  002F80  161C               	andwf	__tdiv_to_l_@f1+1,f,c
  4627  002F82  0E00               	movlw	0
  4628  002F84  161D               	andwf	__tdiv_to_l_@f1+2,f,c
  4629  002F86  8E1F               	bsf	__tdiv_to_l_@f2+1,7,c
  4630  002F88  0EFF               	movlw	255
  4631  002F8A  161E               	andwf	__tdiv_to_l_@f2,f,c
  4632  002F8C  0EFF               	movlw	255
  4633  002F8E  161F               	andwf	__tdiv_to_l_@f2+1,f,c
  4634  002F90  0E00               	movlw	0
  4635  002F92  1620               	andwf	__tdiv_to_l_@f2+2,f,c
  4636  002F94  0E00               	movlw	0
  4637  002F96  6E24               	movwf	__tdiv_to_l_@quot,c
  4638  002F98  0E00               	movlw	0
  4639  002F9A  6E25               	movwf	__tdiv_to_l_@quot+1,c
  4640  002F9C  0E00               	movlw	0
  4641  002F9E  6E26               	movwf	__tdiv_to_l_@quot+2,c
  4642  002FA0  0E00               	movlw	0
  4643  002FA2  6E27               	movwf	__tdiv_to_l_@quot+3,c
  4644  002FA4  0E7F               	movlw	127
  4645  002FA6  5E29               	subwf	__tdiv_to_l_@exp1,f,c
  4646  002FA8  5028               	movf	__tdiv_to_l_@cntr,w,c
  4647  002FAA  0F98               	addlw	152
  4648  002FAC  5E29               	subwf	__tdiv_to_l_@exp1,f,c
  4649  002FAE  0E18               	movlw	24
  4650  002FB0  6E28               	movwf	__tdiv_to_l_@cntr,c
  4651  002FB2                     l1118:
  4652  002FB2  90D8               	bcf	status,0,c
  4653  002FB4  3624               	rlcf	__tdiv_to_l_@quot,f,c
  4654  002FB6  3625               	rlcf	__tdiv_to_l_@quot+1,f,c
  4655  002FB8  3626               	rlcf	__tdiv_to_l_@quot+2,f,c
  4656  002FBA  3627               	rlcf	__tdiv_to_l_@quot+3,f,c
  4657  002FBC  501E               	movf	__tdiv_to_l_@f2,w,c
  4658  002FBE  5C1B               	subwf	__tdiv_to_l_@f1,w,c
  4659  002FC0  501F               	movf	__tdiv_to_l_@f2+1,w,c
  4660  002FC2  581C               	subwfb	__tdiv_to_l_@f1+1,w,c
  4661  002FC4  5020               	movf	__tdiv_to_l_@f2+2,w,c
  4662  002FC6  581D               	subwfb	__tdiv_to_l_@f1+2,w,c
  4663  002FC8  A0D8               	btfss	status,0,c
  4664  002FCA  D007               	goto	l1119
  4665  002FCC  501E               	movf	__tdiv_to_l_@f2,w,c
  4666  002FCE  5E1B               	subwf	__tdiv_to_l_@f1,f,c
  4667  002FD0  501F               	movf	__tdiv_to_l_@f2+1,w,c
  4668  002FD2  5A1C               	subwfb	__tdiv_to_l_@f1+1,f,c
  4669  002FD4  5020               	movf	__tdiv_to_l_@f2+2,w,c
  4670  002FD6  5A1D               	subwfb	__tdiv_to_l_@f1+2,f,c
  4671  002FD8  8024               	bsf	__tdiv_to_l_@quot,0,c
  4672  002FDA                     l1119:
  4673  002FDA  90D8               	bcf	status,0,c
  4674  002FDC  361B               	rlcf	__tdiv_to_l_@f1,f,c
  4675  002FDE  361C               	rlcf	__tdiv_to_l_@f1+1,f,c
  4676  002FE0  361D               	rlcf	__tdiv_to_l_@f1+2,f,c
  4677  002FE2  2E28               	decfsz	__tdiv_to_l_@cntr,f,c
  4678  002FE4  D7E6               	goto	l1118
  4679  002FE6  AE29               	btfss	__tdiv_to_l_@exp1,7,c
  4680  002FE8  D019               	goto	l5066
  4681  002FEA  5029               	movf	__tdiv_to_l_@exp1,w,c
  4682  002FEC  0A80               	xorlw	128
  4683  002FEE  6E21               	movwf	??__tdiv_to_l_& (0+255),c
  4684  002FF0  0EE9               	movlw	233
  4685  002FF2  0A80               	xorlw	128
  4686  002FF4  5C21               	subwf	??__tdiv_to_l_,w,c
  4687  002FF6  B0D8               	btfsc	status,0,c
  4688  002FF8  D009               	goto	l5062
  4689  002FFA  0E00               	movlw	0
  4690  002FFC  6E1B               	movwf	?__tdiv_to_l_,c
  4691  002FFE  0E00               	movlw	0
  4692  003000  6E1C               	movwf	?__tdiv_to_l_+1,c
  4693  003002  0E00               	movlw	0
  4694  003004  6E1D               	movwf	?__tdiv_to_l_+2,c
  4695  003006  0E00               	movlw	0
  4696  003008  6E1E               	movwf	?__tdiv_to_l_+3,c
  4697  00300A  0012               	return	
  4698  00300C                     l5062:
  4699  00300C  90D8               	bcf	status,0,c
  4700  00300E  3227               	rrcf	__tdiv_to_l_@quot+3,f,c
  4701  003010  3226               	rrcf	__tdiv_to_l_@quot+2,f,c
  4702  003012  3225               	rrcf	__tdiv_to_l_@quot+1,f,c
  4703  003014  3224               	rrcf	__tdiv_to_l_@quot,f,c
  4704  003016  3E29               	incfsz	__tdiv_to_l_@exp1,f,c
  4705  003018  D7F9               	goto	l5062
  4706  00301A  D014               	goto	l1125
  4707  00301C                     l5066:
  4708  00301C  0E17               	movlw	23
  4709  00301E  6429               	cpfsgt	__tdiv_to_l_@exp1,c
  4710  003020  D00F               	goto	l5074
  4711  003022  0E00               	movlw	0
  4712  003024  6E1B               	movwf	?__tdiv_to_l_,c
  4713  003026  0E00               	movlw	0
  4714  003028  6E1C               	movwf	?__tdiv_to_l_+1,c
  4715  00302A  0E00               	movlw	0
  4716  00302C  6E1D               	movwf	?__tdiv_to_l_+2,c
  4717  00302E  0E00               	movlw	0
  4718  003030  6E1E               	movwf	?__tdiv_to_l_+3,c
  4719  003032  0012               	return	
  4720  003034                     l5072:
  4721  003034  90D8               	bcf	status,0,c
  4722  003036  3624               	rlcf	__tdiv_to_l_@quot,f,c
  4723  003038  3625               	rlcf	__tdiv_to_l_@quot+1,f,c
  4724  00303A  3626               	rlcf	__tdiv_to_l_@quot+2,f,c
  4725  00303C  3627               	rlcf	__tdiv_to_l_@quot+3,f,c
  4726  00303E  0629               	decf	__tdiv_to_l_@exp1,f,c
  4727  003040                     l5074:
  4728  003040  6629               	tstfsz	__tdiv_to_l_@exp1,c
  4729  003042  D7F8               	goto	l5072
  4730  003044                     l1125:
  4731  003044  C024  F01B         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4732  003048  C025  F01C         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4733  00304C  C026  F01D         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4734  003050  C027  F01E         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4735  003054  0012               	return	
  4736  003056                     __end_of__tdiv_to_l_:
  4737                           	opt stack 0
  4738                           tblptru	equ	0xFF8
  4739                           tblptrh	equ	0xFF7
  4740                           tblptrl	equ	0xFF6
  4741                           tablat	equ	0xFF5
  4742                           prodh	equ	0xFF4
  4743                           prodl	equ	0xFF3
  4744                           intcon	equ	0xFF2
  4745                           postinc0	equ	0xFEE
  4746                           wreg	equ	0xFE8
  4747                           indf2	equ	0xFDF
  4748                           postinc2	equ	0xFDE
  4749                           postdec2	equ	0xFDD
  4750                           fsr2h	equ	0xFDA
  4751                           fsr2l	equ	0xFD9
  4752                           status	equ	0xFD8
  4753                           
  4754 ;; *************** function __div_to_l_ *****************
  4755 ;; Defined at:
  4756 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;  f1              3   26[COMRAM] unsigned long 
  4759 ;;  f2              3   29[COMRAM] unsigned long 
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;  quot            4   36[COMRAM] unsigned long 
  4762 ;;  exp1            1   41[COMRAM] unsigned char 
  4763 ;;  cntr            1   40[COMRAM] unsigned char 
  4764 ;; Return value:  Size  Location     Type
  4765 ;;                  4   26[COMRAM] unsigned long 
  4766 ;; Registers used:
  4767 ;;		wreg, status,2, status,0
  4768 ;; Tracked objects:
  4769 ;;		On entry : 0/0
  4770 ;;		On exit  : 0/0
  4771 ;;		Unchanged: 0/0
  4772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4773 ;;      Params:         6       0       0       0       0       0       0
  4774 ;;      Locals:         6       0       0       0       0       0       0
  4775 ;;      Temps:          4       0       0       0       0       0       0
  4776 ;;      Totals:        16       0       0       0       0       0       0
  4777 ;;Total ram usage:       16 bytes
  4778 ;; Hardware stack levels used:    1
  4779 ;; Hardware stack levels required when called:    4
  4780 ;; This function calls:
  4781 ;;		Nothing
  4782 ;; This function is called by:
  4783 ;;		_printf
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           	psect	text9
  4788  002C70                     __ptext9:
  4789                           	opt stack 0
  4790  002C70                     __div_to_l_:
  4791                           	opt stack 25
  4792                           
  4793                           ;incstack = 0
  4794  002C70  C01B  F021         	movff	__div_to_l_@f1,??__div_to_l_
  4795  002C74  C01C  F022         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  4796  002C78  C01D  F023         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  4797  002C7C  C01E  F024         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  4798  002C80  0E18               	movlw	24
  4799  002C82  D005               	goto	u5430
  4800  002C84                     u5435:
  4801  002C84  90D8               	bcf	status,0,c
  4802  002C86  3224               	rrcf	??__div_to_l_+3,f,c
  4803  002C88  3223               	rrcf	??__div_to_l_+2,f,c
  4804  002C8A  3222               	rrcf	??__div_to_l_+1,f,c
  4805  002C8C  3221               	rrcf	??__div_to_l_,f,c
  4806  002C8E                     u5430:
  4807  002C8E  2EE8               	decfsz	wreg,f,c
  4808  002C90  D7F9               	goto	u5435
  4809  002C92  5021               	movf	??__div_to_l_,w,c
  4810  002C94  6E2A               	movwf	__div_to_l_@exp1,c
  4811  002C96  662A               	tstfsz	__div_to_l_@exp1& (0+255),c
  4812  002C98  D009               	goto	l5082
  4813  002C9A  0E00               	movlw	0
  4814  002C9C  6E1B               	movwf	?__div_to_l_,c
  4815  002C9E  0E00               	movlw	0
  4816  002CA0  6E1C               	movwf	?__div_to_l_+1,c
  4817  002CA2  0E00               	movlw	0
  4818  002CA4  6E1D               	movwf	?__div_to_l_+2,c
  4819  002CA6  0E00               	movlw	0
  4820  002CA8  6E1E               	movwf	?__div_to_l_+3,c
  4821  002CAA  0012               	return	
  4822  002CAC                     l5082:
  4823  002CAC  C01E  F021         	movff	__div_to_l_@f2,??__div_to_l_
  4824  002CB0  C01F  F022         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  4825  002CB4  C020  F023         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  4826  002CB8  C021  F024         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  4827  002CBC  0E18               	movlw	24
  4828  002CBE  D005               	goto	u5450
  4829  002CC0                     u5455:
  4830  002CC0  90D8               	bcf	status,0,c
  4831  002CC2  3224               	rrcf	??__div_to_l_+3,f,c
  4832  002CC4  3223               	rrcf	??__div_to_l_+2,f,c
  4833  002CC6  3222               	rrcf	??__div_to_l_+1,f,c
  4834  002CC8  3221               	rrcf	??__div_to_l_,f,c
  4835  002CCA                     u5450:
  4836  002CCA  2EE8               	decfsz	wreg,f,c
  4837  002CCC  D7F9               	goto	u5455
  4838  002CCE  5021               	movf	??__div_to_l_,w,c
  4839  002CD0  6E29               	movwf	__div_to_l_@cntr,c
  4840  002CD2  6629               	tstfsz	__div_to_l_@cntr& (0+255),c
  4841  002CD4  D009               	goto	l5088
  4842  002CD6  0E00               	movlw	0
  4843  002CD8  6E1B               	movwf	?__div_to_l_,c
  4844  002CDA  0E00               	movlw	0
  4845  002CDC  6E1C               	movwf	?__div_to_l_+1,c
  4846  002CDE  0E00               	movlw	0
  4847  002CE0  6E1D               	movwf	?__div_to_l_+2,c
  4848  002CE2  0E00               	movlw	0
  4849  002CE4  6E1E               	movwf	?__div_to_l_+3,c
  4850  002CE6  0012               	return	
  4851  002CE8                     l5088:
  4852  002CE8  8E1D               	bsf	__div_to_l_@f1+2,7,c
  4853  002CEA  0EFF               	movlw	255
  4854  002CEC  161B               	andwf	__div_to_l_@f1,f,c
  4855  002CEE  0EFF               	movlw	255
  4856  002CF0  161C               	andwf	__div_to_l_@f1+1,f,c
  4857  002CF2  0EFF               	movlw	255
  4858  002CF4  161D               	andwf	__div_to_l_@f1+2,f,c
  4859  002CF6  0E00               	movlw	0
  4860  002CF8  161E               	andwf	__div_to_l_@f1+3,f,c
  4861  002CFA  8E20               	bsf	__div_to_l_@f2+2,7,c
  4862  002CFC  0EFF               	movlw	255
  4863  002CFE  161E               	andwf	__div_to_l_@f2,f,c
  4864  002D00  0EFF               	movlw	255
  4865  002D02  161F               	andwf	__div_to_l_@f2+1,f,c
  4866  002D04  0EFF               	movlw	255
  4867  002D06  1620               	andwf	__div_to_l_@f2+2,f,c
  4868  002D08  0E00               	movlw	0
  4869  002D0A  1621               	andwf	__div_to_l_@f2+3,f,c
  4870  002D0C  0E00               	movlw	0
  4871  002D0E  6E25               	movwf	__div_to_l_@quot,c
  4872  002D10  0E00               	movlw	0
  4873  002D12  6E26               	movwf	__div_to_l_@quot+1,c
  4874  002D14  0E00               	movlw	0
  4875  002D16  6E27               	movwf	__div_to_l_@quot+2,c
  4876  002D18  0E00               	movlw	0
  4877  002D1A  6E28               	movwf	__div_to_l_@quot+3,c
  4878  002D1C  0E7F               	movlw	127
  4879  002D1E  5E2A               	subwf	__div_to_l_@exp1,f,c
  4880  002D20  5029               	movf	__div_to_l_@cntr,w,c
  4881  002D22  0FA0               	addlw	160
  4882  002D24  5E2A               	subwf	__div_to_l_@exp1,f,c
  4883  002D26  0E20               	movlw	32
  4884  002D28  6E29               	movwf	__div_to_l_@cntr,c
  4885  002D2A                     l5102:
  4886  002D2A  90D8               	bcf	status,0,c
  4887  002D2C  3625               	rlcf	__div_to_l_@quot,f,c
  4888  002D2E  3626               	rlcf	__div_to_l_@quot+1,f,c
  4889  002D30  3627               	rlcf	__div_to_l_@quot+2,f,c
  4890  002D32  3628               	rlcf	__div_to_l_@quot+3,f,c
  4891  002D34  501E               	movf	__div_to_l_@f2,w,c
  4892  002D36  5C1B               	subwf	__div_to_l_@f1,w,c
  4893  002D38  501F               	movf	__div_to_l_@f2+1,w,c
  4894  002D3A  581C               	subwfb	__div_to_l_@f1+1,w,c
  4895  002D3C  5020               	movf	__div_to_l_@f2+2,w,c
  4896  002D3E  581D               	subwfb	__div_to_l_@f1+2,w,c
  4897  002D40  5021               	movf	__div_to_l_@f2+3,w,c
  4898  002D42  581E               	subwfb	__div_to_l_@f1+3,w,c
  4899  002D44  A0D8               	btfss	status,0,c
  4900  002D46  D009               	goto	l5110
  4901  002D48  501E               	movf	__div_to_l_@f2,w,c
  4902  002D4A  5E1B               	subwf	__div_to_l_@f1,f,c
  4903  002D4C  501F               	movf	__div_to_l_@f2+1,w,c
  4904  002D4E  5A1C               	subwfb	__div_to_l_@f1+1,f,c
  4905  002D50  5020               	movf	__div_to_l_@f2+2,w,c
  4906  002D52  5A1D               	subwfb	__div_to_l_@f1+2,f,c
  4907  002D54  5021               	movf	__div_to_l_@f2+3,w,c
  4908  002D56  5A1E               	subwfb	__div_to_l_@f1+3,f,c
  4909  002D58  8025               	bsf	__div_to_l_@quot,0,c
  4910  002D5A                     l5110:
  4911  002D5A  90D8               	bcf	status,0,c
  4912  002D5C  361B               	rlcf	__div_to_l_@f1,f,c
  4913  002D5E  361C               	rlcf	__div_to_l_@f1+1,f,c
  4914  002D60  361D               	rlcf	__div_to_l_@f1+2,f,c
  4915  002D62  361E               	rlcf	__div_to_l_@f1+3,f,c
  4916  002D64  2E29               	decfsz	__div_to_l_@cntr,f,c
  4917  002D66  D7E1               	goto	l5102
  4918  002D68  AE2A               	btfss	__div_to_l_@exp1,7,c
  4919  002D6A  D019               	goto	l5124
  4920  002D6C  502A               	movf	__div_to_l_@exp1,w,c
  4921  002D6E  0A80               	xorlw	128
  4922  002D70  6E21               	movwf	??__div_to_l_& (0+255),c
  4923  002D72  0EE1               	movlw	225
  4924  002D74  0A80               	xorlw	128
  4925  002D76  5C21               	subwf	??__div_to_l_,w,c
  4926  002D78  B0D8               	btfsc	status,0,c
  4927  002D7A  D009               	goto	l5120
  4928  002D7C  0E00               	movlw	0
  4929  002D7E  6E1B               	movwf	?__div_to_l_,c
  4930  002D80  0E00               	movlw	0
  4931  002D82  6E1C               	movwf	?__div_to_l_+1,c
  4932  002D84  0E00               	movlw	0
  4933  002D86  6E1D               	movwf	?__div_to_l_+2,c
  4934  002D88  0E00               	movlw	0
  4935  002D8A  6E1E               	movwf	?__div_to_l_+3,c
  4936  002D8C  0012               	return	
  4937  002D8E                     l5120:
  4938  002D8E  90D8               	bcf	status,0,c
  4939  002D90  3228               	rrcf	__div_to_l_@quot+3,f,c
  4940  002D92  3227               	rrcf	__div_to_l_@quot+2,f,c
  4941  002D94  3226               	rrcf	__div_to_l_@quot+1,f,c
  4942  002D96  3225               	rrcf	__div_to_l_@quot,f,c
  4943  002D98  3E2A               	incfsz	__div_to_l_@exp1,f,c
  4944  002D9A  D7F9               	goto	l5120
  4945  002D9C  D014               	goto	l1007
  4946  002D9E                     l5124:
  4947  002D9E  0E1F               	movlw	31
  4948  002DA0  642A               	cpfsgt	__div_to_l_@exp1,c
  4949  002DA2  D00F               	goto	l5132
  4950  002DA4  0E00               	movlw	0
  4951  002DA6  6E1B               	movwf	?__div_to_l_,c
  4952  002DA8  0E00               	movlw	0
  4953  002DAA  6E1C               	movwf	?__div_to_l_+1,c
  4954  002DAC  0E00               	movlw	0
  4955  002DAE  6E1D               	movwf	?__div_to_l_+2,c
  4956  002DB0  0E00               	movlw	0
  4957  002DB2  6E1E               	movwf	?__div_to_l_+3,c
  4958  002DB4  0012               	return	
  4959  002DB6                     l5130:
  4960  002DB6  90D8               	bcf	status,0,c
  4961  002DB8  3625               	rlcf	__div_to_l_@quot,f,c
  4962  002DBA  3626               	rlcf	__div_to_l_@quot+1,f,c
  4963  002DBC  3627               	rlcf	__div_to_l_@quot+2,f,c
  4964  002DBE  3628               	rlcf	__div_to_l_@quot+3,f,c
  4965  002DC0  062A               	decf	__div_to_l_@exp1,f,c
  4966  002DC2                     l5132:
  4967  002DC2  662A               	tstfsz	__div_to_l_@exp1,c
  4968  002DC4  D7F8               	goto	l5130
  4969  002DC6                     l1007:
  4970  002DC6  C025  F01B         	movff	__div_to_l_@quot,?__div_to_l_
  4971  002DCA  C026  F01C         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4972  002DCE  C027  F01D         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4973  002DD2  C028  F01E         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4974  002DD6  0012               	return	
  4975  002DD8                     __end_of__div_to_l_:
  4976                           	opt stack 0
  4977                           tblptru	equ	0xFF8
  4978                           tblptrh	equ	0xFF7
  4979                           tblptrl	equ	0xFF6
  4980                           tablat	equ	0xFF5
  4981                           prodh	equ	0xFF4
  4982                           prodl	equ	0xFF3
  4983                           intcon	equ	0xFF2
  4984                           postinc0	equ	0xFEE
  4985                           wreg	equ	0xFE8
  4986                           indf2	equ	0xFDF
  4987                           postinc2	equ	0xFDE
  4988                           postdec2	equ	0xFDD
  4989                           fsr2h	equ	0xFDA
  4990                           fsr2l	equ	0xFD9
  4991                           status	equ	0xFD8
  4992                           
  4993 ;; *************** function ___lltoft *****************
  4994 ;; Defined at:
  4995 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;  c               4   34[COMRAM] unsigned long 
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  exp             1   42[COMRAM] unsigned char 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  3   34[COMRAM] float 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2, status,0, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5009 ;;      Params:         4       0       0       0       0       0       0
  5010 ;;      Locals:         1       0       0       0       0       0       0
  5011 ;;      Temps:          4       0       0       0       0       0       0
  5012 ;;      Totals:         9       0       0       0       0       0       0
  5013 ;;Total ram usage:        9 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    5
  5016 ;; This function calls:
  5017 ;;		___ftpack
  5018 ;; This function is called by:
  5019 ;;		_printf
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           	psect	text10
  5024  003AF4                     __ptext10:
  5025                           	opt stack 0
  5026  003AF4                     ___lltoft:
  5027                           	opt stack 24
  5028                           
  5029                           ;incstack = 0
  5030  003AF4  0E8E               	movlw	142
  5031  003AF6  6E2B               	movwf	___lltoft@exp,c
  5032  003AF8  D006               	goto	l5312
  5033  003AFA                     l5310:
  5034  003AFA  90D8               	bcf	status,0,c
  5035  003AFC  3226               	rrcf	___lltoft@c+3,f,c
  5036  003AFE  3225               	rrcf	___lltoft@c+2,f,c
  5037  003B00  3224               	rrcf	___lltoft@c+1,f,c
  5038  003B02  3223               	rrcf	___lltoft@c,f,c
  5039  003B04  2A2B               	incf	___lltoft@exp,f,c
  5040  003B06                     l5312:
  5041  003B06  0E00               	movlw	0
  5042  003B08  1423               	andwf	___lltoft@c,w,c
  5043  003B0A  6E27               	movwf	??___lltoft& (0+255),c
  5044  003B0C  0E00               	movlw	0
  5045  003B0E  1424               	andwf	___lltoft@c+1,w,c
  5046  003B10  6E28               	movwf	(??___lltoft+1)& (0+255),c
  5047  003B12  0E00               	movlw	0
  5048  003B14  1425               	andwf	___lltoft@c+2,w,c
  5049  003B16  6E29               	movwf	(??___lltoft+2)& (0+255),c
  5050  003B18  0EFF               	movlw	255
  5051  003B1A  1426               	andwf	___lltoft@c+3,w,c
  5052  003B1C  6E2A               	movwf	(??___lltoft+3)& (0+255),c
  5053  003B1E  502A               	movf	??___lltoft+3,w,c
  5054  003B20  1027               	iorwf	??___lltoft,w,c
  5055  003B22  1028               	iorwf	??___lltoft+1,w,c
  5056  003B24  1029               	iorwf	??___lltoft+2,w,c
  5057  003B26  A4D8               	btfss	status,2,c
  5058  003B28  D7E8               	goto	l5310
  5059  003B2A  C023  F01B         	movff	___lltoft@c,___ftpack@arg
  5060  003B2E  C024  F01C         	movff	___lltoft@c+1,___ftpack@arg+1
  5061  003B32  C025  F01D         	movff	___lltoft@c+2,___ftpack@arg+2
  5062  003B36  C02B  F01E         	movff	___lltoft@exp,___ftpack@exp
  5063  003B3A  0E00               	movlw	0
  5064  003B3C  6E1F               	movwf	___ftpack@sign,c
  5065  003B3E  EC43  F01B         	call	___ftpack	;wreg free
  5066  003B42  C01B  F023         	movff	?___ftpack,?___lltoft
  5067  003B46  C01C  F024         	movff	?___ftpack+1,?___lltoft+1
  5068  003B4A  C01D  F025         	movff	?___ftpack+2,?___lltoft+2
  5069  003B4E  0012               	return	
  5070  003B50                     __end_of___lltoft:
  5071                           	opt stack 0
  5072                           tblptru	equ	0xFF8
  5073                           tblptrh	equ	0xFF7
  5074                           tblptrl	equ	0xFF6
  5075                           tablat	equ	0xFF5
  5076                           prodh	equ	0xFF4
  5077                           prodl	equ	0xFF3
  5078                           intcon	equ	0xFF2
  5079                           postinc0	equ	0xFEE
  5080                           wreg	equ	0xFE8
  5081                           indf2	equ	0xFDF
  5082                           postinc2	equ	0xFDE
  5083                           postdec2	equ	0xFDD
  5084                           fsr2h	equ	0xFDA
  5085                           fsr2l	equ	0xFD9
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function ___llmod *****************
  5089 ;; Defined at:
  5090 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;  dividend        4   39[COMRAM] unsigned long 
  5093 ;;  divisor         4   43[COMRAM] unsigned long 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  counter         1    0[BANK0 ] unsigned char 
  5096 ;; Return value:  Size  Location     Type
  5097 ;;                  4   39[COMRAM] unsigned long 
  5098 ;; Registers used:
  5099 ;;		wreg, status,2, status,0
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 0/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5105 ;;      Params:         8       0       0       0       0       0       0
  5106 ;;      Locals:         0       1       0       0       0       0       0
  5107 ;;      Temps:          0       0       0       0       0       0       0
  5108 ;;      Totals:         8       1       0       0       0       0       0
  5109 ;;Total ram usage:        9 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:    4
  5112 ;; This function calls:
  5113 ;;		Nothing
  5114 ;; This function is called by:
  5115 ;;		_printf
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           	psect	text11
  5120  003A88                     __ptext11:
  5121                           	opt stack 0
  5122  003A88                     ___llmod:
  5123                           	opt stack 25
  5124                           
  5125                           ;incstack = 0
  5126  003A88  502F               	movf	___llmod@divisor+3,w,c
  5127  003A8A  102C               	iorwf	___llmod@divisor,w,c
  5128  003A8C  102D               	iorwf	___llmod@divisor+1,w,c
  5129  003A8E  102E               	iorwf	___llmod@divisor+2,w,c
  5130  003A90  B4D8               	btfsc	status,2,c
  5131  003A92  D027               	goto	l1214
  5132  003A94  0E01               	movlw	1
  5133  003A96  0100               	movlb	0	; () banked
  5134  003A98  6F60               	movwf	___llmod@counter& (0+255),b
  5135  003A9A  D007               	goto	l5298
  5136  003A9C                     l5296:
  5137                           
  5138                           ; BSR set to: 0
  5139  003A9C  90D8               	bcf	status,0,c
  5140  003A9E  362C               	rlcf	___llmod@divisor,f,c
  5141  003AA0  362D               	rlcf	___llmod@divisor+1,f,c
  5142  003AA2  362E               	rlcf	___llmod@divisor+2,f,c
  5143  003AA4  362F               	rlcf	___llmod@divisor+3,f,c
  5144  003AA6  0100               	movlb	0	; () banked
  5145  003AA8  2B60               	incf	___llmod@counter& (0+255),f,b
  5146  003AAA                     l5298:
  5147                           
  5148                           ; BSR set to: 0
  5149  003AAA  AE2F               	btfss	___llmod@divisor+3,7,c
  5150  003AAC  D7F7               	goto	l5296
  5151  003AAE                     l5300:
  5152                           
  5153                           ; BSR set to: 0
  5154  003AAE  502C               	movf	___llmod@divisor,w,c
  5155  003AB0  5C28               	subwf	___llmod@dividend,w,c
  5156  003AB2  502D               	movf	___llmod@divisor+1,w,c
  5157  003AB4  5829               	subwfb	___llmod@dividend+1,w,c
  5158  003AB6  502E               	movf	___llmod@divisor+2,w,c
  5159  003AB8  582A               	subwfb	___llmod@dividend+2,w,c
  5160  003ABA  502F               	movf	___llmod@divisor+3,w,c
  5161  003ABC  582B               	subwfb	___llmod@dividend+3,w,c
  5162  003ABE  A0D8               	btfss	status,0,c
  5163  003AC0  D008               	goto	l5304
  5164                           
  5165                           ; BSR set to: 0
  5166  003AC2  502C               	movf	___llmod@divisor,w,c
  5167  003AC4  5E28               	subwf	___llmod@dividend,f,c
  5168  003AC6  502D               	movf	___llmod@divisor+1,w,c
  5169  003AC8  5A29               	subwfb	___llmod@dividend+1,f,c
  5170  003ACA  502E               	movf	___llmod@divisor+2,w,c
  5171  003ACC  5A2A               	subwfb	___llmod@dividend+2,f,c
  5172  003ACE  502F               	movf	___llmod@divisor+3,w,c
  5173  003AD0  5A2B               	subwfb	___llmod@dividend+3,f,c
  5174  003AD2                     l5304:
  5175                           
  5176                           ; BSR set to: 0
  5177  003AD2  90D8               	bcf	status,0,c
  5178  003AD4  322F               	rrcf	___llmod@divisor+3,f,c
  5179  003AD6  322E               	rrcf	___llmod@divisor+2,f,c
  5180  003AD8  322D               	rrcf	___llmod@divisor+1,f,c
  5181  003ADA  322C               	rrcf	___llmod@divisor,f,c
  5182                           
  5183                           ; BSR set to: 0
  5184  003ADC  0100               	movlb	0	; () banked
  5185  003ADE  2F60               	decfsz	___llmod@counter& (0+255),f,b
  5186  003AE0  D7E6               	goto	l5300
  5187  003AE2                     l1214:
  5188  003AE2  C028  F028         	movff	___llmod@dividend,?___llmod
  5189  003AE6  C029  F029         	movff	___llmod@dividend+1,?___llmod+1
  5190  003AEA  C02A  F02A         	movff	___llmod@dividend+2,?___llmod+2
  5191  003AEE  C02B  F02B         	movff	___llmod@dividend+3,?___llmod+3
  5192  003AF2  0012               	return	
  5193  003AF4                     __end_of___llmod:
  5194                           	opt stack 0
  5195                           tblptru	equ	0xFF8
  5196                           tblptrh	equ	0xFF7
  5197                           tblptrl	equ	0xFF6
  5198                           tablat	equ	0xFF5
  5199                           prodh	equ	0xFF4
  5200                           prodl	equ	0xFF3
  5201                           intcon	equ	0xFF2
  5202                           postinc0	equ	0xFEE
  5203                           wreg	equ	0xFE8
  5204                           indf2	equ	0xFDF
  5205                           postinc2	equ	0xFDE
  5206                           postdec2	equ	0xFDD
  5207                           fsr2h	equ	0xFDA
  5208                           fsr2l	equ	0xFD9
  5209                           status	equ	0xFD8
  5210                           
  5211 ;; *************** function ___lldiv *****************
  5212 ;; Defined at:
  5213 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;  dividend        4   26[COMRAM] unsigned long 
  5216 ;;  divisor         4   30[COMRAM] unsigned long 
  5217 ;; Auto vars:     Size  Location     Type
  5218 ;;  quotient        4   34[COMRAM] unsigned long 
  5219 ;;  counter         1   38[COMRAM] unsigned char 
  5220 ;; Return value:  Size  Location     Type
  5221 ;;                  4   26[COMRAM] unsigned long 
  5222 ;; Registers used:
  5223 ;;		wreg, status,2, status,0
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5229 ;;      Params:         8       0       0       0       0       0       0
  5230 ;;      Locals:         5       0       0       0       0       0       0
  5231 ;;      Temps:          0       0       0       0       0       0       0
  5232 ;;      Totals:        13       0       0       0       0       0       0
  5233 ;;Total ram usage:       13 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    4
  5236 ;; This function calls:
  5237 ;;		Nothing
  5238 ;; This function is called by:
  5239 ;;		_printf
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           	psect	text12
  5244  003984                     __ptext12:
  5245                           	opt stack 0
  5246  003984                     ___lldiv:
  5247                           	opt stack 25
  5248                           
  5249                           ;incstack = 0
  5250  003984  0E00               	movlw	0
  5251  003986  6E23               	movwf	___lldiv@quotient,c
  5252  003988  0E00               	movlw	0
  5253  00398A  6E24               	movwf	___lldiv@quotient+1,c
  5254  00398C  0E00               	movlw	0
  5255  00398E  6E25               	movwf	___lldiv@quotient+2,c
  5256  003990  0E00               	movlw	0
  5257  003992  6E26               	movwf	___lldiv@quotient+3,c
  5258  003994  5022               	movf	___lldiv@divisor+3,w,c
  5259  003996  101F               	iorwf	___lldiv@divisor,w,c
  5260  003998  1020               	iorwf	___lldiv@divisor+1,w,c
  5261  00399A  1021               	iorwf	___lldiv@divisor+2,w,c
  5262  00399C  B4D8               	btfsc	status,2,c
  5263  00399E  D02A               	goto	l1204
  5264  0039A0  0E01               	movlw	1
  5265  0039A2  6E27               	movwf	___lldiv@counter,c
  5266  0039A4  D006               	goto	l5278
  5267  0039A6                     l5276:
  5268  0039A6  90D8               	bcf	status,0,c
  5269  0039A8  361F               	rlcf	___lldiv@divisor,f,c
  5270  0039AA  3620               	rlcf	___lldiv@divisor+1,f,c
  5271  0039AC  3621               	rlcf	___lldiv@divisor+2,f,c
  5272  0039AE  3622               	rlcf	___lldiv@divisor+3,f,c
  5273  0039B0  2A27               	incf	___lldiv@counter,f,c
  5274  0039B2                     l5278:
  5275  0039B2  AE22               	btfss	___lldiv@divisor+3,7,c
  5276  0039B4  D7F8               	goto	l5276
  5277  0039B6                     l5280:
  5278  0039B6  90D8               	bcf	status,0,c
  5279  0039B8  3623               	rlcf	___lldiv@quotient,f,c
  5280  0039BA  3624               	rlcf	___lldiv@quotient+1,f,c
  5281  0039BC  3625               	rlcf	___lldiv@quotient+2,f,c
  5282  0039BE  3626               	rlcf	___lldiv@quotient+3,f,c
  5283  0039C0  501F               	movf	___lldiv@divisor,w,c
  5284  0039C2  5C1B               	subwf	___lldiv@dividend,w,c
  5285  0039C4  5020               	movf	___lldiv@divisor+1,w,c
  5286  0039C6  581C               	subwfb	___lldiv@dividend+1,w,c
  5287  0039C8  5021               	movf	___lldiv@divisor+2,w,c
  5288  0039CA  581D               	subwfb	___lldiv@dividend+2,w,c
  5289  0039CC  5022               	movf	___lldiv@divisor+3,w,c
  5290  0039CE  581E               	subwfb	___lldiv@dividend+3,w,c
  5291  0039D0  A0D8               	btfss	status,0,c
  5292  0039D2  D009               	goto	l5288
  5293  0039D4  501F               	movf	___lldiv@divisor,w,c
  5294  0039D6  5E1B               	subwf	___lldiv@dividend,f,c
  5295  0039D8  5020               	movf	___lldiv@divisor+1,w,c
  5296  0039DA  5A1C               	subwfb	___lldiv@dividend+1,f,c
  5297  0039DC  5021               	movf	___lldiv@divisor+2,w,c
  5298  0039DE  5A1D               	subwfb	___lldiv@dividend+2,f,c
  5299  0039E0  5022               	movf	___lldiv@divisor+3,w,c
  5300  0039E2  5A1E               	subwfb	___lldiv@dividend+3,f,c
  5301  0039E4  8023               	bsf	___lldiv@quotient,0,c
  5302  0039E6                     l5288:
  5303  0039E6  90D8               	bcf	status,0,c
  5304  0039E8  3222               	rrcf	___lldiv@divisor+3,f,c
  5305  0039EA  3221               	rrcf	___lldiv@divisor+2,f,c
  5306  0039EC  3220               	rrcf	___lldiv@divisor+1,f,c
  5307  0039EE  321F               	rrcf	___lldiv@divisor,f,c
  5308  0039F0  2E27               	decfsz	___lldiv@counter,f,c
  5309  0039F2  D7E1               	goto	l5280
  5310  0039F4                     l1204:
  5311  0039F4  C023  F01B         	movff	___lldiv@quotient,?___lldiv
  5312  0039F8  C024  F01C         	movff	___lldiv@quotient+1,?___lldiv+1
  5313  0039FC  C025  F01D         	movff	___lldiv@quotient+2,?___lldiv+2
  5314  003A00  C026  F01E         	movff	___lldiv@quotient+3,?___lldiv+3
  5315  003A04  0012               	return	
  5316  003A06                     __end_of___lldiv:
  5317                           	opt stack 0
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           postinc0	equ	0xFEE
  5326                           wreg	equ	0xFE8
  5327                           indf2	equ	0xFDF
  5328                           postinc2	equ	0xFDE
  5329                           postdec2	equ	0xFDD
  5330                           fsr2h	equ	0xFDA
  5331                           fsr2l	equ	0xFD9
  5332                           status	equ	0xFD8
  5333                           
  5334 ;; *************** function ___fttol *****************
  5335 ;; Defined at:
  5336 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  f1              3   34[BANK0 ] float 
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;  lval            4   44[BANK0 ] unsigned long 
  5341 ;;  exp1            1   48[BANK0 ] unsigned char 
  5342 ;;  sign1           1   43[BANK0 ] unsigned char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  4   34[BANK0 ] long 
  5345 ;; Registers used:
  5346 ;;		wreg, status,2, status,0
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5352 ;;      Params:         0       4       0       0       0       0       0
  5353 ;;      Locals:         0       6       0       0       0       0       0
  5354 ;;      Temps:          0       5       0       0       0       0       0
  5355 ;;      Totals:         0      15       0       0       0       0       0
  5356 ;;Total ram usage:       15 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    4
  5359 ;; This function calls:
  5360 ;;		Nothing
  5361 ;; This function is called by:
  5362 ;;		_printf
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	text13
  5367  002810                     __ptext13:
  5368                           	opt stack 0
  5369  002810                     ___fttol:
  5370                           	opt stack 25
  5371                           
  5372                           ;incstack = 0
  5373  002810  0100               	movlb	0	; () banked
  5374  002812  C084  F086         	movff	___fttol@f1+2,??___fttol
  5375  002816  0100               	movlb	0	; () banked
  5376  002818  6B87               	clrf	(??___fttol+1)& (0+255),b
  5377  00281A  6B88               	clrf	(??___fttol+2)& (0+255),b
  5378  00281C  0100               	movlb	0	; () banked
  5379  00281E  3583               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5380  002820  0100               	movlb	0	; () banked
  5381  002822  3786               	rlcf	??___fttol& (0+255),f,b
  5382  002824  E301               	bnc	u5631
  5383  002826  8187               	bsf	(??___fttol+1)& (0+255),0,b
  5384  002828                     u5631:
  5385  002828  0100               	movlb	0	; () banked
  5386  00282A  5186               	movf	??___fttol& (0+255),w,b
  5387  00282C  0100               	movlb	0	; () banked
  5388  00282E  6F90               	movwf	___fttol@exp1& (0+255),b
  5389  002830  0100               	movlb	0	; () banked
  5390  002832  6790               	tstfsz	___fttol@exp1& (0+255),b
  5391  002834  D00D               	goto	l5230
  5392                           
  5393                           ; BSR set to: 0
  5394  002836  0E00               	movlw	0
  5395  002838  0100               	movlb	0	; () banked
  5396  00283A  6F82               	movwf	?___fttol& (0+255),b
  5397  00283C  0E00               	movlw	0
  5398  00283E  0100               	movlb	0	; () banked
  5399  002840  6F83               	movwf	(?___fttol+1)& (0+255),b
  5400  002842  0E00               	movlw	0
  5401  002844  0100               	movlb	0	; () banked
  5402  002846  6F84               	movwf	(?___fttol+2)& (0+255),b
  5403  002848  0E00               	movlw	0
  5404  00284A  0100               	movlb	0	; () banked
  5405  00284C  6F85               	movwf	(?___fttol+3)& (0+255),b
  5406  00284E  0012               	return	
  5407  002850                     l5230:
  5408                           
  5409                           ; BSR set to: 0
  5410  002850  0E17               	movlw	23
  5411  002852  0100               	movlb	0	; () banked
  5412  002854  6F86               	movwf	??___fttol& (0+255),b
  5413  002856  0100               	movlb	0	; () banked
  5414  002858  C082  F087         	movff	___fttol@f1,??___fttol+1
  5415  00285C  0100               	movlb	0	; () banked
  5416  00285E  C083  F088         	movff	___fttol@f1+1,??___fttol+2
  5417  002862  0100               	movlb	0	; () banked
  5418  002864  C084  F089         	movff	___fttol@f1+2,??___fttol+3
  5419  002868  0100               	movlb	0	; () banked
  5420  00286A  2986               	incf	??___fttol& (0+255),w,b
  5421  00286C  0100               	movlb	0	; () banked
  5422  00286E  6F8A               	movwf	(??___fttol+4)& (0+255),b
  5423  002870  D005               	goto	u5650
  5424  002872                     u5655:
  5425  002872  0100               	movlb	0	; () banked
  5426  002874  90D8               	bcf	status,0,c
  5427  002876  3389               	rrcf	(??___fttol+3)& (0+255),f,b
  5428  002878  3388               	rrcf	(??___fttol+2)& (0+255),f,b
  5429  00287A  3387               	rrcf	(??___fttol+1)& (0+255),f,b
  5430  00287C                     u5650:
  5431  00287C  0100               	movlb	0	; () banked
  5432  00287E  2F8A               	decfsz	(??___fttol+4)& (0+255),f,b
  5433  002880  D7F8               	goto	u5655
  5434  002882  0100               	movlb	0	; () banked
  5435  002884  5187               	movf	(??___fttol+1)& (0+255),w,b
  5436  002886  0100               	movlb	0	; () banked
  5437  002888  6F8B               	movwf	___fttol@sign1& (0+255),b
  5438                           
  5439                           ; BSR set to: 0
  5440  00288A  0100               	movlb	0	; () banked
  5441  00288C  8F83               	bsf	(___fttol@f1+1)& (0+255),7,b
  5442                           
  5443                           ; BSR set to: 0
  5444  00288E  0EFF               	movlw	255
  5445  002890  0100               	movlb	0	; () banked
  5446  002892  1782               	andwf	___fttol@f1& (0+255),f,b
  5447  002894  0EFF               	movlw	255
  5448  002896  0100               	movlb	0	; () banked
  5449  002898  1783               	andwf	(___fttol@f1+1)& (0+255),f,b
  5450  00289A  0E00               	movlw	0
  5451  00289C  0100               	movlb	0	; () banked
  5452  00289E  1784               	andwf	(___fttol@f1+2)& (0+255),f,b
  5453                           
  5454                           ; BSR set to: 0
  5455  0028A0  0100               	movlb	0	; () banked
  5456  0028A2  5182               	movf	___fttol@f1& (0+255),w,b
  5457  0028A4  0100               	movlb	0	; () banked
  5458  0028A6  6F8C               	movwf	___fttol@lval& (0+255),b
  5459  0028A8  0100               	movlb	0	; () banked
  5460  0028AA  5183               	movf	(___fttol@f1+1)& (0+255),w,b
  5461  0028AC  0100               	movlb	0	; () banked
  5462  0028AE  6F8D               	movwf	(___fttol@lval+1)& (0+255),b
  5463  0028B0  0100               	movlb	0	; () banked
  5464  0028B2  5184               	movf	(___fttol@f1+2)& (0+255),w,b
  5465  0028B4  0100               	movlb	0	; () banked
  5466  0028B6  6F8E               	movwf	(___fttol@lval+2)& (0+255),b
  5467  0028B8  0100               	movlb	0	; () banked
  5468  0028BA  6B8F               	clrf	(___fttol@lval+3)& (0+255),b
  5469                           
  5470                           ; BSR set to: 0
  5471  0028BC  0E8E               	movlw	142
  5472  0028BE  0100               	movlb	0	; () banked
  5473  0028C0  5F90               	subwf	___fttol@exp1& (0+255),f,b
  5474                           
  5475                           ; BSR set to: 0
  5476  0028C2  0100               	movlb	0	; () banked
  5477  0028C4  AF90               	btfss	___fttol@exp1& (0+255),7,b
  5478  0028C6  D026               	goto	l5252
  5479                           
  5480                           ; BSR set to: 0
  5481  0028C8  0100               	movlb	0	; () banked
  5482  0028CA  5190               	movf	___fttol@exp1& (0+255),w,b
  5483  0028CC  0A80               	xorlw	128
  5484  0028CE  0100               	movlb	0	; () banked
  5485  0028D0  6F86               	movwf	??___fttol& (0+255),b
  5486  0028D2  0EF1               	movlw	241
  5487  0028D4  0A80               	xorlw	128
  5488  0028D6  0100               	movlb	0	; () banked
  5489  0028D8  5D86               	subwf	??___fttol& (0+255),w,b
  5490  0028DA  B0D8               	btfsc	status,0,c
  5491  0028DC  D00D               	goto	l5248
  5492                           
  5493                           ; BSR set to: 0
  5494  0028DE  0E00               	movlw	0
  5495  0028E0  0100               	movlb	0	; () banked
  5496  0028E2  6F82               	movwf	?___fttol& (0+255),b
  5497  0028E4  0E00               	movlw	0
  5498  0028E6  0100               	movlb	0	; () banked
  5499  0028E8  6F83               	movwf	(?___fttol+1)& (0+255),b
  5500  0028EA  0E00               	movlw	0
  5501  0028EC  0100               	movlb	0	; () banked
  5502  0028EE  6F84               	movwf	(?___fttol+2)& (0+255),b
  5503  0028F0  0E00               	movlw	0
  5504  0028F2  0100               	movlb	0	; () banked
  5505  0028F4  6F85               	movwf	(?___fttol+3)& (0+255),b
  5506  0028F6  0012               	return	
  5507  0028F8                     l5248:
  5508                           
  5509                           ; BSR set to: 0
  5510  0028F8  0100               	movlb	0	; () banked
  5511  0028FA  90D8               	bcf	status,0,c
  5512  0028FC  0100               	movlb	0	; () banked
  5513  0028FE  338F               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5514  002900  0100               	movlb	0	; () banked
  5515  002902  338E               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5516  002904  0100               	movlb	0	; () banked
  5517  002906  338D               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5518  002908  0100               	movlb	0	; () banked
  5519  00290A  338C               	rrcf	___fttol@lval& (0+255),f,b
  5520                           
  5521                           ; BSR set to: 0
  5522  00290C  0100               	movlb	0	; () banked
  5523  00290E  3F90               	incfsz	___fttol@exp1& (0+255),f,b
  5524  002910  D7F3               	goto	l5248
  5525  002912  D020               	goto	l5262
  5526  002914                     l5252:
  5527                           
  5528                           ; BSR set to: 0
  5529  002914  0E17               	movlw	23
  5530  002916  0100               	movlb	0	; () banked
  5531  002918  6590               	cpfsgt	___fttol@exp1& (0+255),b
  5532  00291A  D019               	goto	l5260
  5533                           
  5534                           ; BSR set to: 0
  5535  00291C  0E00               	movlw	0
  5536  00291E  0100               	movlb	0	; () banked
  5537  002920  6F82               	movwf	?___fttol& (0+255),b
  5538  002922  0E00               	movlw	0
  5539  002924  0100               	movlb	0	; () banked
  5540  002926  6F83               	movwf	(?___fttol+1)& (0+255),b
  5541  002928  0E00               	movlw	0
  5542  00292A  0100               	movlb	0	; () banked
  5543  00292C  6F84               	movwf	(?___fttol+2)& (0+255),b
  5544  00292E  0E00               	movlw	0
  5545  002930  0100               	movlb	0	; () banked
  5546  002932  6F85               	movwf	(?___fttol+3)& (0+255),b
  5547  002934  0012               	return	
  5548  002936                     l5258:
  5549                           
  5550                           ; BSR set to: 0
  5551  002936  0100               	movlb	0	; () banked
  5552  002938  90D8               	bcf	status,0,c
  5553  00293A  0100               	movlb	0	; () banked
  5554  00293C  378C               	rlcf	___fttol@lval& (0+255),f,b
  5555  00293E  0100               	movlb	0	; () banked
  5556  002940  378D               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5557  002942  0100               	movlb	0	; () banked
  5558  002944  378E               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5559  002946  0100               	movlb	0	; () banked
  5560  002948  378F               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5561  00294A  0100               	movlb	0	; () banked
  5562  00294C  0790               	decf	___fttol@exp1& (0+255),f,b
  5563  00294E                     l5260:
  5564                           
  5565                           ; BSR set to: 0
  5566  00294E  0100               	movlb	0	; () banked
  5567  002950  6790               	tstfsz	___fttol@exp1& (0+255),b
  5568  002952  D7F1               	goto	l5258
  5569  002954                     l5262:
  5570                           
  5571                           ; BSR set to: 0
  5572  002954  0100               	movlb	0	; () banked
  5573  002956  518B               	movf	___fttol@sign1& (0+255),w,b
  5574  002958  B4D8               	btfsc	status,2,c
  5575  00295A  D00F               	goto	l5266
  5576                           
  5577                           ; BSR set to: 0
  5578  00295C  0100               	movlb	0	; () banked
  5579  00295E  1F8F               	comf	(___fttol@lval+3)& (0+255),f,b
  5580  002960  0100               	movlb	0	; () banked
  5581  002962  1F8E               	comf	(___fttol@lval+2)& (0+255),f,b
  5582  002964  0100               	movlb	0	; () banked
  5583  002966  1F8D               	comf	(___fttol@lval+1)& (0+255),f,b
  5584  002968  0100               	movlb	0	; () banked
  5585  00296A  6D8C               	negf	___fttol@lval& (0+255),b
  5586  00296C  0E00               	movlw	0
  5587  00296E  0100               	movlb	0	; () banked
  5588  002970  238D               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5589  002972  0100               	movlb	0	; () banked
  5590  002974  238E               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5591  002976  0100               	movlb	0	; () banked
  5592  002978  238F               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5593  00297A                     l5266:
  5594                           
  5595                           ; BSR set to: 0
  5596  00297A  C08C  F082         	movff	___fttol@lval,?___fttol
  5597  00297E  C08D  F083         	movff	___fttol@lval+1,?___fttol+1
  5598  002982  C08E  F084         	movff	___fttol@lval+2,?___fttol+2
  5599  002986  C08F  F085         	movff	___fttol@lval+3,?___fttol+3
  5600  00298A  0012               	return	
  5601  00298C                     __end_of___fttol:
  5602                           	opt stack 0
  5603                           tblptru	equ	0xFF8
  5604                           tblptrh	equ	0xFF7
  5605                           tblptrl	equ	0xFF6
  5606                           tablat	equ	0xFF5
  5607                           prodh	equ	0xFF4
  5608                           prodl	equ	0xFF3
  5609                           intcon	equ	0xFF2
  5610                           postinc0	equ	0xFEE
  5611                           wreg	equ	0xFE8
  5612                           indf2	equ	0xFDF
  5613                           postinc2	equ	0xFDE
  5614                           postdec2	equ	0xFDD
  5615                           fsr2h	equ	0xFDA
  5616                           fsr2l	equ	0xFD9
  5617                           status	equ	0xFD8
  5618                           
  5619 ;; *************** function ___ftneg *****************
  5620 ;; Defined at:
  5621 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  f1              3   26[COMRAM] float 
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;		None
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  3   26[COMRAM] float 
  5628 ;; Registers used:
  5629 ;;		wreg, status,2, status,0
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5635 ;;      Params:         3       0       0       0       0       0       0
  5636 ;;      Locals:         0       0       0       0       0       0       0
  5637 ;;      Temps:          0       0       0       0       0       0       0
  5638 ;;      Totals:         3       0       0       0       0       0       0
  5639 ;;Total ram usage:        3 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    4
  5642 ;; This function calls:
  5643 ;;		Nothing
  5644 ;; This function is called by:
  5645 ;;		_printf
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           	psect	text14
  5650  003DE2                     __ptext14:
  5651                           	opt stack 0
  5652  003DE2                     ___ftneg:
  5653                           	opt stack 25
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;incstack = 0
  5657  003DE2  0E7F               	movlw	127
  5658  003DE4  141D               	andwf	___ftneg@f1+2,w,c
  5659  003DE6  101C               	iorwf	___ftneg@f1+1,w,c
  5660  003DE8  101B               	iorwf	___ftneg@f1,w,c
  5661  003DEA  B4D8               	btfsc	status,2,c
  5662  003DEC  D006               	goto	l1150
  5663  003DEE  0E00               	movlw	0
  5664  003DF0  1A1B               	xorwf	___ftneg@f1,f,c
  5665  003DF2  0E00               	movlw	0
  5666  003DF4  1A1C               	xorwf	___ftneg@f1+1,f,c
  5667  003DF6  0E80               	movlw	128
  5668  003DF8  1A1D               	xorwf	___ftneg@f1+2,f,c
  5669  003DFA                     l1150:
  5670  003DFA  C01B  F01B         	movff	___ftneg@f1,?___ftneg
  5671  003DFE  C01C  F01C         	movff	___ftneg@f1+1,?___ftneg+1
  5672  003E02  C01D  F01D         	movff	___ftneg@f1+2,?___ftneg+2
  5673  003E06  0012               	return	
  5674  003E08                     __end_of___ftneg:
  5675                           	opt stack 0
  5676                           tblptru	equ	0xFF8
  5677                           tblptrh	equ	0xFF7
  5678                           tblptrl	equ	0xFF6
  5679                           tablat	equ	0xFF5
  5680                           prodh	equ	0xFF4
  5681                           prodl	equ	0xFF3
  5682                           intcon	equ	0xFF2
  5683                           postinc0	equ	0xFEE
  5684                           wreg	equ	0xFE8
  5685                           indf2	equ	0xFDF
  5686                           postinc2	equ	0xFDE
  5687                           postdec2	equ	0xFDD
  5688                           fsr2h	equ	0xFDA
  5689                           fsr2l	equ	0xFD9
  5690                           status	equ	0xFD8
  5691                           
  5692 ;; *************** function _Temp_Fault *****************
  5693 ;; Defined at:
  5694 ;;		line 16 in file "Tempeture.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;		None
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;  i               2   10[BANK0 ] int 
  5699 ;;  fault           1    9[BANK0 ] unsigned char 
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  1    wreg      unsigned char 
  5702 ;; Registers used:
  5703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5709 ;;      Params:         0       0       0       0       0       0       0
  5710 ;;      Locals:         0       3       0       0       0       0       0
  5711 ;;      Temps:          0       0       0       0       0       0       0
  5712 ;;      Totals:         0       3       0       0       0       0       0
  5713 ;;Total ram usage:        3 bytes
  5714 ;; Hardware stack levels used:    1
  5715 ;; Hardware stack levels required when called:    5
  5716 ;; This function calls:
  5717 ;;		___ftge
  5718 ;;		___wmul
  5719 ;; This function is called by:
  5720 ;;		_main
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           	psect	text15
  5725  003A06                     __ptext15:
  5726                           	opt stack 0
  5727  003A06                     _Temp_Fault:
  5728                           	opt stack 25
  5729                           
  5730                           ;Tempeture.c: 19: char fault = 0;
  5731                           
  5732                           ;incstack = 0
  5733  003A06  0E00               	movlw	0
  5734  003A08  0100               	movlb	0	; () banked
  5735  003A0A  6F69               	movwf	Temp_Fault@fault& (0+255),b
  5736                           
  5737                           ;Tempeture.c: 20: for(int i = 0;i<9;i++)
  5738  003A0C  0E00               	movlw	0
  5739  003A0E  0100               	movlb	0	; () banked
  5740  003A10  6F6B               	movwf	(Temp_Fault@i+1)& (0+255),b
  5741  003A12  0E00               	movlw	0
  5742  003A14  0100               	movlb	0	; () banked
  5743  003A16  6F6A               	movwf	Temp_Fault@i& (0+255),b
  5744  003A18                     
  5745                           ; BSR set to: 0
  5746  003A18  0100               	movlb	0	; () banked
  5747  003A1A  516B               	movf	(Temp_Fault@i+1)& (0+255),w,b
  5748  003A1C  0A80               	xorlw	128
  5749  003A1E  0F80               	addlw	-128
  5750  003A20  0E09               	movlw	9
  5751  003A22  B4D8               	btfsc	status,2,c
  5752  003A24  5D6A               	subwf	Temp_Fault@i& (0+255),w,b
  5753  003A26  B0D8               	btfsc	status,0,c
  5754  003A28  0012               	return	
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;Tempeture.c: 21: {
  5758                           ;Tempeture.c: 22: if (60.5 > Temp_DegF[i])
  5759                           
  5760                           ; BSR set to: 0
  5761                           
  5762                           ; BSR set to: 0
  5763  003A2A  C06A  F029         	movff	Temp_Fault@i,___wmul@multiplier
  5764  003A2E  C06B  F02A         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  5765  003A32  0E00               	movlw	0
  5766  003A34  6E2C               	movwf	___wmul@multiplicand+1,c
  5767  003A36  0E03               	movlw	3
  5768  003A38  6E2B               	movwf	___wmul@multiplicand,c
  5769  003A3A  EC04  F01F         	call	___wmul	;wreg free
  5770  003A3E  0101               	movlb	1	; () banked
  5771  003A40  0E8C               	movlw	low _Temp_DegF
  5772  003A42  2429               	addwf	?___wmul,w,c
  5773  003A44  6ED9               	movwf	fsr2l,c
  5774  003A46  0101               	movlb	1	; () banked
  5775  003A48  0E01               	movlw	high _Temp_DegF
  5776  003A4A  202A               	addwfc	?___wmul+1,w,c
  5777  003A4C  6EDA               	movwf	fsr2h,c
  5778  003A4E  0100               	movlb	0	; () banked
  5779  003A50  CFDE F060          	movff	postinc2,___ftge@ff1
  5780  003A54  0100               	movlb	0	; () banked
  5781  003A56  CFDE F061          	movff	postinc2,___ftge@ff1+1
  5782  003A5A  0100               	movlb	0	; () banked
  5783  003A5C  CFDD F062          	movff	postdec2,___ftge@ff1+2
  5784  003A60  0E00               	movlw	0
  5785  003A62  0100               	movlb	0	; () banked
  5786  003A64  6F63               	movwf	___ftge@ff2& (0+255),b
  5787  003A66  0E72               	movlw	114
  5788  003A68  0100               	movlb	0	; () banked
  5789  003A6A  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5790  003A6C  0E42               	movlw	66
  5791  003A6E  0100               	movlb	0	; () banked
  5792  003A70  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5793  003A72  EC12  F01A         	call	___ftge	;wreg free
  5794  003A76  B0D8               	btfsc	status,0,c
  5795  003A78  D003               	goto	l5358
  5796                           
  5797                           ;Tempeture.c: 23: {
  5798                           ;Tempeture.c: 24: fault = 1;
  5799  003A7A  0E01               	movlw	1
  5800  003A7C  0100               	movlb	0	; () banked
  5801  003A7E  6F69               	movwf	Temp_Fault@fault& (0+255),b
  5802  003A80                     l5358:
  5803  003A80  0100               	movlb	0	; () banked
  5804  003A82  4B6A               	infsnz	Temp_Fault@i& (0+255),f,b
  5805  003A84  2B6B               	incf	(Temp_Fault@i+1)& (0+255),f,b
  5806  003A86  D7C8               	goto	L7
  5807  003A88                     __end_of_Temp_Fault:
  5808                           	opt stack 0
  5809                           tblptru	equ	0xFF8
  5810                           tblptrh	equ	0xFF7
  5811                           tblptrl	equ	0xFF6
  5812                           tablat	equ	0xFF5
  5813                           prodh	equ	0xFF4
  5814                           prodl	equ	0xFF3
  5815                           intcon	equ	0xFF2
  5816                           postinc0	equ	0xFEE
  5817                           wreg	equ	0xFE8
  5818                           indf2	equ	0xFDF
  5819                           postinc2	equ	0xFDE
  5820                           postdec2	equ	0xFDD
  5821                           fsr2h	equ	0xFDA
  5822                           fsr2l	equ	0xFD9
  5823                           status	equ	0xFD8
  5824                           
  5825 ;; *************** function _Temp_Convert *****************
  5826 ;; Defined at:
  5827 ;;		line 68 in file "Tempeture.c"
  5828 ;; Parameters:    Size  Location     Type
  5829 ;;		None
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;  steinhart       3   74[BANK0 ] float 
  5832 ;;  x               2   72[BANK0 ] int 
  5833 ;; Return value:  Size  Location     Type
  5834 ;;		None               void
  5835 ;; Registers used:
  5836 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5842 ;;      Params:         0       0       0       0       0       0       0
  5843 ;;      Locals:         0       9       0       0       0       0       0
  5844 ;;      Temps:          0       2       0       0       0       0       0
  5845 ;;      Totals:         0      11       0       0       0       0       0
  5846 ;;Total ram usage:       11 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:    8
  5849 ;; This function calls:
  5850 ;;		_Temp_Filter
  5851 ;;		___awdiv
  5852 ;;		___awtoft
  5853 ;;		___ftadd
  5854 ;;		___ftdiv
  5855 ;;		___ftmul
  5856 ;;		___ftsub
  5857 ;;		___wmul
  5858 ;;		_log
  5859 ;; This function is called by:
  5860 ;;		_main
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           	psect	text16
  5865  0022EC                     __ptext16:
  5866                           	opt stack 0
  5867  0022EC                     _Temp_Convert:
  5868                           	opt stack 22
  5869                           
  5870                           ;Tempeture.c: 70: int x;
  5871                           ;Tempeture.c: 71: float steinhart;
  5872                           ;Tempeture.c: 72: for(x = 0; x < 10; x++)
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;incstack = 0
  5876  0022EC  0E00               	movlw	0
  5877  0022EE  0100               	movlb	0	; () banked
  5878  0022F0  6FA9               	movwf	(Temp_Convert@x+1)& (0+255),b
  5879  0022F2  0E00               	movlw	0
  5880  0022F4  0100               	movlb	0	; () banked
  5881  0022F6  6FA8               	movwf	Temp_Convert@x& (0+255),b
  5882  0022F8                     
  5883                           ; BSR set to: 0
  5884  0022F8  0100               	movlb	0	; () banked
  5885  0022FA  51A9               	movf	(Temp_Convert@x+1)& (0+255),w,b
  5886  0022FC  0A80               	xorlw	128
  5887  0022FE  0F80               	addlw	-128
  5888  002300  0E0A               	movlw	10
  5889  002302  B4D8               	btfsc	status,2,c
  5890  002304  5DA8               	subwf	Temp_Convert@x& (0+255),w,b
  5891  002306  B0D8               	btfsc	status,0,c
  5892  002308  D0F8               	goto	l5392
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;Tempeture.c: 73: {
  5896                           ;Tempeture.c: 74: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5897                           
  5898                           ; BSR set to: 0
  5899                           
  5900                           ; BSR set to: 0
  5901  00230A  0EE4               	movlw	low _Temp_Adc
  5902  00230C  0100               	movlb	0	; () banked
  5903  00230E  6FA2               	movwf	??_Temp_Convert& (0+255),b
  5904  002310  0E00               	movlw	high _Temp_Adc
  5905  002312  6FA3               	movwf	(??_Temp_Convert+1)& (0+255),b
  5906  002314  90D8               	bcf	status,0,c
  5907  002316  0100               	movlb	0	; () banked
  5908  002318  35A8               	rlcf	Temp_Convert@x& (0+255),w,b
  5909  00231A  6ED9               	movwf	fsr2l,c
  5910  00231C  0100               	movlb	0	; () banked
  5911  00231E  35A9               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  5912  002320  6EDA               	movwf	fsr2h,c
  5913  002322  0100               	movlb	0	; () banked
  5914  002324  51A2               	movf	??_Temp_Convert& (0+255),w,b
  5915  002326  26D9               	addwf	fsr2l,f,c
  5916  002328  0100               	movlb	0	; () banked
  5917  00232A  51A3               	movf	(??_Temp_Convert+1)& (0+255),w,b
  5918  00232C  22DA               	addwfc	fsr2h,f,c
  5919  00232E  CFDE F023          	movff	postinc2,___awdiv@divisor
  5920  002332  CFDD F024          	movff	postdec2,___awdiv@divisor+1
  5921  002336  0E03               	movlw	3
  5922  002338  6E22               	movwf	___awdiv@dividend+1,c
  5923  00233A  6821               	setf	___awdiv@dividend,c
  5924  00233C  EC97  F01B         	call	___awdiv	;wreg free
  5925  002340  0EFF               	movlw	255
  5926  002342  2421               	addwf	?___awdiv,w,c
  5927  002344  0100               	movlb	0	; () banked
  5928  002346  6FA4               	movwf	_Temp_Convert$1701& (0+255),b
  5929  002348  0EFF               	movlw	255
  5930  00234A  2022               	addwfc	?___awdiv+1,w,c
  5931  00234C  0100               	movlb	0	; () banked
  5932  00234E  6FA5               	movwf	(_Temp_Convert$1701+1)& (0+255),b
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;Tempeture.c: 73: {
  5936                           ;Tempeture.c: 74: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5937  002350  C0A4  F023         	movff	_Temp_Convert$1701,___awdiv@divisor
  5938  002354  C0A5  F024         	movff	_Temp_Convert$1701+1,___awdiv@divisor+1
  5939  002358  0E27               	movlw	39
  5940  00235A  6E22               	movwf	___awdiv@dividend+1,c
  5941  00235C  0E10               	movlw	16
  5942  00235E  6E21               	movwf	___awdiv@dividend,c
  5943  002360  EC97  F01B         	call	___awdiv	;wreg free
  5944  002364  C021  F0A6         	movff	?___awdiv,_Temp_Convert$1702
  5945  002368  C022  F0A7         	movff	?___awdiv+1,_Temp_Convert$1702+1
  5946                           
  5947                           ;Tempeture.c: 73: {
  5948                           ;Tempeture.c: 74: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5949  00236C  0E27               	movlw	39
  5950  00236E  6E24               	movwf	___awdiv@divisor+1,c
  5951  002370  0E10               	movlw	16
  5952  002372  6E23               	movwf	___awdiv@divisor,c
  5953  002374  C0A6  F021         	movff	_Temp_Convert$1702,___awdiv@dividend
  5954  002378  C0A7  F022         	movff	_Temp_Convert$1702+1,___awdiv@dividend+1
  5955  00237C  EC97  F01B         	call	___awdiv	;wreg free
  5956  002380  C021  F029         	movff	?___awdiv,___awtoft@c
  5957  002384  C022  F02A         	movff	?___awdiv+1,___awtoft@c+1
  5958  002388  ECFA  F01D         	call	___awtoft	;wreg free
  5959  00238C  C029  F0AA         	movff	?___awtoft,Temp_Convert@steinhart
  5960  002390  C02A  F0AB         	movff	?___awtoft+1,Temp_Convert@steinhart+1
  5961  002394  C02B  F0AC         	movff	?___awtoft+2,Temp_Convert@steinhart+2
  5962                           
  5963                           ;Tempeture.c: 75: steinhart = log(steinhart);
  5964  002398  C0AA  F09D         	movff	Temp_Convert@steinhart,log@x
  5965  00239C  C0AB  F09E         	movff	Temp_Convert@steinhart+1,log@x+1
  5966  0023A0  C0AC  F09F         	movff	Temp_Convert@steinhart+2,log@x+2
  5967  0023A4  EC81  F015         	call	_log	;wreg free
  5968  0023A8  C09D  F0AA         	movff	?_log,Temp_Convert@steinhart
  5969  0023AC  C09E  F0AB         	movff	?_log+1,Temp_Convert@steinhart+1
  5970  0023B0  C09F  F0AC         	movff	?_log+2,Temp_Convert@steinhart+2
  5971                           
  5972                           ;Tempeture.c: 76: steinhart /= 3950;
  5973  0023B4  C0AA  F060         	movff	Temp_Convert@steinhart,___ftdiv@f1
  5974  0023B8  C0AB  F061         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  5975  0023BC  C0AC  F062         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  5976  0023C0  0EE0               	movlw	224
  5977  0023C2  0100               	movlb	0	; () banked
  5978  0023C4  6F63               	movwf	___ftdiv@f2& (0+255),b
  5979  0023C6  0E76               	movlw	118
  5980  0023C8  0100               	movlb	0	; () banked
  5981  0023CA  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  5982  0023CC  0E45               	movlw	69
  5983  0023CE  0100               	movlb	0	; () banked
  5984  0023D0  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  5985  0023D2  ECEC  F016         	call	___ftdiv	;wreg free
  5986  0023D6  C060  F0AA         	movff	?___ftdiv,Temp_Convert@steinhart
  5987  0023DA  C061  F0AB         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  5988  0023DE  C062  F0AC         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  5989                           
  5990                           ;Tempeture.c: 77: steinhart += 1.0 / (25 + 273.15);
  5991  0023E2  C0AA  F085         	movff	Temp_Convert@steinhart,___ftadd@f1
  5992  0023E6  C0AB  F086         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  5993  0023EA  C0AC  F087         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  5994  0023EE  0ECF               	movlw	207
  5995  0023F0  0100               	movlb	0	; () banked
  5996  0023F2  6F88               	movwf	___ftadd@f2& (0+255),b
  5997  0023F4  0E5B               	movlw	91
  5998  0023F6  0100               	movlb	0	; () banked
  5999  0023F8  6F89               	movwf	(___ftadd@f2+1)& (0+255),b
  6000  0023FA  0E3B               	movlw	59
  6001  0023FC  0100               	movlb	0	; () banked
  6002  0023FE  6F8A               	movwf	(___ftadd@f2+2)& (0+255),b
  6003  002400  EC36  F010         	call	___ftadd	;wreg free
  6004  002404  C085  F0AA         	movff	?___ftadd,Temp_Convert@steinhart
  6005  002408  C086  F0AB         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6006  00240C  C087  F0AC         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6007                           
  6008                           ;Tempeture.c: 78: steinhart = 1.0 / steinhart;
  6009  002410  0E00               	movlw	0
  6010  002412  0100               	movlb	0	; () banked
  6011  002414  6F60               	movwf	___ftdiv@f1& (0+255),b
  6012  002416  0E80               	movlw	128
  6013  002418  0100               	movlb	0	; () banked
  6014  00241A  6F61               	movwf	(___ftdiv@f1+1)& (0+255),b
  6015  00241C  0E3F               	movlw	63
  6016  00241E  0100               	movlb	0	; () banked
  6017  002420  6F62               	movwf	(___ftdiv@f1+2)& (0+255),b
  6018  002422  C0AA  F063         	movff	Temp_Convert@steinhart,___ftdiv@f2
  6019  002426  C0AB  F064         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  6020  00242A  C0AC  F065         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  6021  00242E  ECEC  F016         	call	___ftdiv	;wreg free
  6022  002432  C060  F0AA         	movff	?___ftdiv,Temp_Convert@steinhart
  6023  002436  C061  F0AB         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6024  00243A  C062  F0AC         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6025                           
  6026                           ;Tempeture.c: 79: steinhart -= 273.15;
  6027  00243E  C0AA  F091         	movff	Temp_Convert@steinhart,___ftsub@f1
  6028  002442  C0AB  F092         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  6029  002446  C0AC  F093         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  6030  00244A  0E93               	movlw	147
  6031  00244C  0100               	movlb	0	; () banked
  6032  00244E  6F94               	movwf	___ftsub@f2& (0+255),b
  6033  002450  0E88               	movlw	136
  6034  002452  0100               	movlb	0	; () banked
  6035  002454  6F95               	movwf	(___ftsub@f2+1)& (0+255),b
  6036  002456  0E43               	movlw	67
  6037  002458  0100               	movlb	0	; () banked
  6038  00245A  6F96               	movwf	(___ftsub@f2+2)& (0+255),b
  6039  00245C  EC1E  F01E         	call	___ftsub	;wreg free
  6040  002460  C091  F0AA         	movff	?___ftsub,Temp_Convert@steinhart
  6041  002464  C092  F0AB         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  6042  002468  C093  F0AC         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  6043                           
  6044                           ;Tempeture.c: 80: steinhart = (steinhart*1.800) + 32.00;
  6045  00246C  0E66               	movlw	102
  6046  00246E  0100               	movlb	0	; () banked
  6047  002470  6F6F               	movwf	___ftmul@f2& (0+255),b
  6048  002472  0EE6               	movlw	230
  6049  002474  0100               	movlb	0	; () banked
  6050  002476  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  6051  002478  0E3F               	movlw	63
  6052  00247A  0100               	movlb	0	; () banked
  6053  00247C  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  6054  00247E  C0AA  F06C         	movff	Temp_Convert@steinhart,___ftmul@f1
  6055  002482  C0AB  F06D         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  6056  002486  C0AC  F06E         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  6057  00248A  ECC6  F014         	call	___ftmul	;wreg free
  6058  00248E  C06C  F085         	movff	?___ftmul,___ftadd@f1
  6059  002492  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  6060  002496  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  6061  00249A  0E00               	movlw	0
  6062  00249C  0100               	movlb	0	; () banked
  6063  00249E  6F88               	movwf	___ftadd@f2& (0+255),b
  6064  0024A0  0E00               	movlw	0
  6065  0024A2  0100               	movlb	0	; () banked
  6066  0024A4  6F89               	movwf	(___ftadd@f2+1)& (0+255),b
  6067  0024A6  0E42               	movlw	66
  6068  0024A8  0100               	movlb	0	; () banked
  6069  0024AA  6F8A               	movwf	(___ftadd@f2+2)& (0+255),b
  6070  0024AC  EC36  F010         	call	___ftadd	;wreg free
  6071  0024B0  C085  F0AA         	movff	?___ftadd,Temp_Convert@steinhart
  6072  0024B4  C086  F0AB         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6073  0024B8  C087  F0AC         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6074                           
  6075                           ;Tempeture.c: 81: TmpTemp_DegF[x] = steinhart;
  6076  0024BC  C0A8  F029         	movff	Temp_Convert@x,___wmul@multiplier
  6077  0024C0  C0A9  F02A         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  6078  0024C4  0E00               	movlw	0
  6079  0024C6  6E2C               	movwf	___wmul@multiplicand+1,c
  6080  0024C8  0E03               	movlw	3
  6081  0024CA  6E2B               	movwf	___wmul@multiplicand,c
  6082  0024CC  EC04  F01F         	call	___wmul	;wreg free
  6083  0024D0  0101               	movlb	1	; () banked
  6084  0024D2  0EC8               	movlw	low _TmpTemp_DegF
  6085  0024D4  2429               	addwf	?___wmul,w,c
  6086  0024D6  6ED9               	movwf	fsr2l,c
  6087  0024D8  0101               	movlb	1	; () banked
  6088  0024DA  0E01               	movlw	high _TmpTemp_DegF
  6089  0024DC  202A               	addwfc	?___wmul+1,w,c
  6090  0024DE  6EDA               	movwf	fsr2h,c
  6091  0024E0  0100               	movlb	0	; () banked
  6092  0024E2  C0AA  FFDE         	movff	Temp_Convert@steinhart,postinc2
  6093  0024E6  0100               	movlb	0	; () banked
  6094  0024E8  C0AB  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  6095  0024EC  0100               	movlb	0	; () banked
  6096  0024EE  C0AC  FFDD         	movff	Temp_Convert@steinhart+2,postdec2
  6097                           
  6098                           ; BSR set to: 0
  6099  0024F2  0100               	movlb	0	; () banked
  6100  0024F4  4BA8               	infsnz	Temp_Convert@x& (0+255),f,b
  6101  0024F6  2BA9               	incf	(Temp_Convert@x+1)& (0+255),f,b
  6102  0024F8  D6FF               	goto	L8
  6103  0024FA                     l5392:
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;Tempeture.c: 82: }
  6107                           ;Tempeture.c: 83: Temp_Filter();
  6108  0024FA  EC80  F012         	call	_Temp_Filter	;wreg free
  6109  0024FE  0012               	return	
  6110  002500                     __end_of_Temp_Convert:
  6111                           	opt stack 0
  6112                           tblptru	equ	0xFF8
  6113                           tblptrh	equ	0xFF7
  6114                           tblptrl	equ	0xFF6
  6115                           tablat	equ	0xFF5
  6116                           prodh	equ	0xFF4
  6117                           prodl	equ	0xFF3
  6118                           intcon	equ	0xFF2
  6119                           postinc0	equ	0xFEE
  6120                           wreg	equ	0xFE8
  6121                           indf2	equ	0xFDF
  6122                           postinc2	equ	0xFDE
  6123                           postdec2	equ	0xFDD
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8
  6127                           
  6128 ;; *************** function _log *****************
  6129 ;; Defined at:
  6130 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\log.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  x               3   61[BANK0 ] int 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  exponent        2   64[BANK0 ] int 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;                  3   61[BANK0 ] int 
  6137 ;; Registers used:
  6138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6144 ;;      Params:         0       3       0       0       0       0       0
  6145 ;;      Locals:         0       2       0       0       0       0       0
  6146 ;;      Temps:          0       0       0       0       0       0       0
  6147 ;;      Totals:         0       5       0       0       0       0       0
  6148 ;;Total ram usage:        5 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    7
  6151 ;; This function calls:
  6152 ;;		___awtoft
  6153 ;;		___ftadd
  6154 ;;		___ftmul
  6155 ;;		_eval_poly
  6156 ;;		_frexp
  6157 ;; This function is called by:
  6158 ;;		_Temp_Convert
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           	psect	text17
  6163  002B02                     __ptext17:
  6164                           	opt stack 0
  6165  002B02                     _log:
  6166                           	opt stack 22
  6167                           
  6168                           ;incstack = 0
  6169  002B02  0100               	movlb	0	; () banked
  6170  002B04  519F               	movf	(log@x+2)& (0+255),w,b
  6171  002B06  0A80               	xorlw	128
  6172  002B08  0F80               	addlw	128
  6173  002B0A  E107               	bnz	u5135
  6174  002B0C  0E00               	movlw	0
  6175  002B0E  0100               	movlb	0	; () banked
  6176  002B10  5D9E               	subwf	(log@x+1)& (0+255),w,b
  6177  002B12  E103               	bnz	u5135
  6178  002B14  0E00               	movlw	0
  6179  002B16  0100               	movlb	0	; () banked
  6180  002B18  5D9D               	subwf	log@x& (0+255),w,b
  6181  002B1A                     u5135:
  6182  002B1A  B0D8               	btfsc	status,0,c
  6183  002B1C  D010               	goto	l4904
  6184                           
  6185                           ; BSR set to: 0
  6186  002B1E  0E00               	movlw	0
  6187  002B20  0100               	movlb	0	; () banked
  6188  002B22  6FE3               	movwf	(_errno+1)& (0+255),b
  6189  002B24  0E21               	movlw	33
  6190  002B26  0100               	movlb	0	; () banked
  6191  002B28  6FE2               	movwf	_errno& (0+255),b
  6192  002B2A  0E00               	movlw	0
  6193  002B2C  0100               	movlb	0	; () banked
  6194  002B2E  6F9D               	movwf	?_log& (0+255),b
  6195  002B30  0E00               	movlw	0
  6196  002B32  0100               	movlb	0	; () banked
  6197  002B34  6F9E               	movwf	(?_log+1)& (0+255),b
  6198  002B36  0E00               	movlw	0
  6199  002B38  0100               	movlb	0	; () banked
  6200  002B3A  6F9F               	movwf	(?_log+2)& (0+255),b
  6201  002B3C  0012               	return	
  6202  002B3E                     l4904:
  6203                           
  6204                           ; BSR set to: 0
  6205  002B3E  0E7F               	movlw	127
  6206  002B40  0100               	movlb	0	; () banked
  6207  002B42  159F               	andwf	(log@x+2)& (0+255),w,b
  6208  002B44  0100               	movlb	0	; () banked
  6209  002B46  119E               	iorwf	(log@x+1)& (0+255),w,b
  6210  002B48  0100               	movlb	0	; () banked
  6211  002B4A  119D               	iorwf	log@x& (0+255),w,b
  6212  002B4C  A4D8               	btfss	status,2,c
  6213  002B4E  D010               	goto	l4910
  6214                           
  6215                           ; BSR set to: 0
  6216  002B50  0E00               	movlw	0
  6217  002B52  0100               	movlb	0	; () banked
  6218  002B54  6FE3               	movwf	(_errno+1)& (0+255),b
  6219  002B56  0E22               	movlw	34
  6220  002B58  0100               	movlb	0	; () banked
  6221  002B5A  6FE2               	movwf	_errno& (0+255),b
  6222  002B5C  0E00               	movlw	0
  6223  002B5E  0100               	movlb	0	; () banked
  6224  002B60  6F9D               	movwf	?_log& (0+255),b
  6225  002B62  0E00               	movlw	0
  6226  002B64  0100               	movlb	0	; () banked
  6227  002B66  6F9E               	movwf	(?_log+1)& (0+255),b
  6228  002B68  0E00               	movlw	0
  6229  002B6A  0100               	movlb	0	; () banked
  6230  002B6C  6F9F               	movwf	(?_log+2)& (0+255),b
  6231  002B6E  0012               	return	
  6232  002B70                     l4910:
  6233                           
  6234                           ; BSR set to: 0
  6235  002B70  0E00               	movlw	0
  6236  002B72  0100               	movlb	0	; () banked
  6237  002B74  6F6F               	movwf	___ftmul@f2& (0+255),b
  6238  002B76  0E00               	movlw	0
  6239  002B78  0100               	movlb	0	; () banked
  6240  002B7A  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  6241  002B7C  0E40               	movlw	64
  6242  002B7E  0100               	movlb	0	; () banked
  6243  002B80  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  6244  002B82  0100               	movlb	0	; () banked
  6245  002B84  0E00               	movlw	high log@exponent
  6246  002B86  6E1F               	movwf	frexp@eptr+1,c
  6247  002B88  0100               	movlb	0	; () banked
  6248  002B8A  0EA0               	movlw	low log@exponent
  6249  002B8C  6E1E               	movwf	frexp@eptr,c
  6250  002B8E  C09D  F01B         	movff	log@x,frexp@value
  6251  002B92  C09E  F01C         	movff	log@x+1,frexp@value+1
  6252  002B96  C09F  F01D         	movff	log@x+2,frexp@value+2
  6253  002B9A  ECE9  F01B         	call	_frexp	;wreg free
  6254  002B9E  C01B  F06C         	movff	?_frexp,___ftmul@f1
  6255  002BA2  C01C  F06D         	movff	?_frexp+1,___ftmul@f1+1
  6256  002BA6  C01D  F06E         	movff	?_frexp+2,___ftmul@f1+2
  6257  002BAA  ECC6  F014         	call	___ftmul	;wreg free
  6258  002BAE  C06C  F085         	movff	?___ftmul,___ftadd@f1
  6259  002BB2  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  6260  002BB6  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  6261  002BBA  0E00               	movlw	0
  6262  002BBC  0100               	movlb	0	; () banked
  6263  002BBE  6F88               	movwf	___ftadd@f2& (0+255),b
  6264  002BC0  0E80               	movlw	128
  6265  002BC2  0100               	movlb	0	; () banked
  6266  002BC4  6F89               	movwf	(___ftadd@f2+1)& (0+255),b
  6267  002BC6  0EBF               	movlw	191
  6268  002BC8  0100               	movlb	0	; () banked
  6269  002BCA  6F8A               	movwf	(___ftadd@f2+2)& (0+255),b
  6270  002BCC  EC36  F010         	call	___ftadd	;wreg free
  6271  002BD0  C085  F09D         	movff	?___ftadd,log@x
  6272  002BD4  C086  F09E         	movff	?___ftadd+1,log@x+1
  6273  002BD8  C087  F09F         	movff	?___ftadd+2,log@x+2
  6274  002BDC  0100               	movlb	0	; () banked
  6275  002BDE  07A0               	decf	log@exponent& (0+255),f,b
  6276  002BE0  A0D8               	btfss	status,0,c
  6277  002BE2  07A1               	decf	(log@exponent+1)& (0+255),f,b
  6278                           
  6279                           ; BSR set to: 0
  6280  002BE4  C09D  F091         	movff	log@x,eval_poly@x
  6281  002BE8  C09E  F092         	movff	log@x+1,eval_poly@x+1
  6282  002BEC  C09F  F093         	movff	log@x+2,eval_poly@x+2
  6283  002BF0  0E06               	movlw	high log@coeff
  6284  002BF2  0100               	movlb	0	; () banked
  6285  002BF4  6F95               	movwf	(eval_poly@d+1)& (0+255),b
  6286  002BF6  0E77               	movlw	low log@coeff
  6287  002BF8  0100               	movlb	0	; () banked
  6288  002BFA  6F94               	movwf	eval_poly@d& (0+255),b
  6289  002BFC  0E00               	movlw	0
  6290  002BFE  0100               	movlb	0	; () banked
  6291  002C00  6F97               	movwf	(eval_poly@n+1)& (0+255),b
  6292  002C02  0E08               	movlw	8
  6293  002C04  0100               	movlb	0	; () banked
  6294  002C06  6F96               	movwf	eval_poly@n& (0+255),b
  6295  002C08  ECAC  F018         	call	_eval_poly	;wreg free
  6296  002C0C  C091  F09D         	movff	?_eval_poly,log@x
  6297  002C10  C092  F09E         	movff	?_eval_poly+1,log@x+1
  6298  002C14  C093  F09F         	movff	?_eval_poly+2,log@x+2
  6299  002C18  0E72               	movlw	114
  6300  002C1A  0100               	movlb	0	; () banked
  6301  002C1C  6F6F               	movwf	___ftmul@f2& (0+255),b
  6302  002C1E  0E31               	movlw	49
  6303  002C20  0100               	movlb	0	; () banked
  6304  002C22  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  6305  002C24  0E3F               	movlw	63
  6306  002C26  0100               	movlb	0	; () banked
  6307  002C28  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  6308  002C2A  C0A0  F029         	movff	log@exponent,___awtoft@c
  6309  002C2E  C0A1  F02A         	movff	log@exponent+1,___awtoft@c+1
  6310  002C32  ECFA  F01D         	call	___awtoft	;wreg free
  6311  002C36  C029  F06C         	movff	?___awtoft,___ftmul@f1
  6312  002C3A  C02A  F06D         	movff	?___awtoft+1,___ftmul@f1+1
  6313  002C3E  C02B  F06E         	movff	?___awtoft+2,___ftmul@f1+2
  6314  002C42  ECC6  F014         	call	___ftmul	;wreg free
  6315  002C46  C06C  F085         	movff	?___ftmul,___ftadd@f1
  6316  002C4A  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  6317  002C4E  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  6318  002C52  C09D  F088         	movff	log@x,___ftadd@f2
  6319  002C56  C09E  F089         	movff	log@x+1,___ftadd@f2+1
  6320  002C5A  C09F  F08A         	movff	log@x+2,___ftadd@f2+2
  6321  002C5E  EC36  F010         	call	___ftadd	;wreg free
  6322  002C62  C085  F09D         	movff	?___ftadd,?_log
  6323  002C66  C086  F09E         	movff	?___ftadd+1,?_log+1
  6324  002C6A  C087  F09F         	movff	?___ftadd+2,?_log+2
  6325  002C6E  0012               	return	
  6326  002C70                     __end_of_log:
  6327                           	opt stack 0
  6328                           tblptru	equ	0xFF8
  6329                           tblptrh	equ	0xFF7
  6330                           tblptrl	equ	0xFF6
  6331                           tablat	equ	0xFF5
  6332                           prodh	equ	0xFF4
  6333                           prodl	equ	0xFF3
  6334                           intcon	equ	0xFF2
  6335                           postinc0	equ	0xFEE
  6336                           wreg	equ	0xFE8
  6337                           indf2	equ	0xFDF
  6338                           postinc2	equ	0xFDE
  6339                           postdec2	equ	0xFDD
  6340                           fsr2h	equ	0xFDA
  6341                           fsr2l	equ	0xFD9
  6342                           status	equ	0xFD8
  6343                           
  6344 ;; *************** function _frexp *****************
  6345 ;; Defined at:
  6346 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;  value           3   26[COMRAM] int 
  6349 ;;  eptr            2   29[COMRAM] PTR int 
  6350 ;;		 -> log@exponent(2), 
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;		None
  6353 ;; Return value:  Size  Location     Type
  6354 ;;                  3   26[COMRAM] PTR int 
  6355 ;; Registers used:
  6356 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6357 ;; Tracked objects:
  6358 ;;		On entry : 0/0
  6359 ;;		On exit  : 0/0
  6360 ;;		Unchanged: 0/0
  6361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6362 ;;      Params:         5       0       0       0       0       0       0
  6363 ;;      Locals:         0       0       0       0       0       0       0
  6364 ;;      Temps:          2       0       0       0       0       0       0
  6365 ;;      Totals:         7       0       0       0       0       0       0
  6366 ;;Total ram usage:        7 bytes
  6367 ;; Hardware stack levels used:    1
  6368 ;; Hardware stack levels required when called:    4
  6369 ;; This function calls:
  6370 ;;		Nothing
  6371 ;; This function is called by:
  6372 ;;		_log
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           	psect	text18
  6377  0037D2                     __ptext18:
  6378                           	opt stack 0
  6379  0037D2                     _frexp:
  6380                           	opt stack 24
  6381                           
  6382                           ;incstack = 0
  6383  0037D2  0E7F               	movlw	127
  6384  0037D4  141D               	andwf	frexp@value+2,w,c
  6385  0037D6  101C               	iorwf	frexp@value+1,w,c
  6386  0037D8  101B               	iorwf	frexp@value,w,c
  6387  0037DA  A4D8               	btfss	status,2,c
  6388  0037DC  D00F               	goto	l3302
  6389  0037DE  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6390  0037E2  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6391  0037E6  0E00               	movlw	0
  6392  0037E8  6EDE               	movwf	postinc2,c
  6393  0037EA  0E00               	movlw	0
  6394  0037EC  6EDD               	movwf	postdec2,c
  6395  0037EE  0E00               	movlw	0
  6396  0037F0  6E1B               	movwf	?_frexp,c
  6397  0037F2  0E00               	movlw	0
  6398  0037F4  6E1C               	movwf	?_frexp+1,c
  6399  0037F6  0E00               	movlw	0
  6400  0037F8  6E1D               	movwf	?_frexp+2,c
  6401  0037FA  0012               	return	
  6402  0037FC                     l3302:
  6403  0037FC  501D               	movf	frexp@value+2,w,c
  6404  0037FE  0B7F               	andlw	127
  6405  003800  6E20               	movwf	??_frexp& (0+255),c
  6406  003802  6A21               	clrf	(??_frexp+1)& (0+255),c
  6407  003804  90D8               	bcf	status,0,c
  6408  003806  3620               	rlcf	??_frexp,f,c
  6409  003808  3621               	rlcf	??_frexp+1,f,c
  6410  00380A  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6411  00380E  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6412  003812  C020  FFDE         	movff	??_frexp,postinc2
  6413  003816  C021  FFDD         	movff	??_frexp+1,postdec2
  6414  00381A  AE1C               	btfss	frexp@value+1,7,c
  6415  00381C  D003               	goto	u2810
  6416  00381E  6A20               	clrf	??_frexp& (0+255),c
  6417  003820  2A20               	incf	??_frexp& (0+255),f,c
  6418  003822  D001               	goto	u2818
  6419  003824                     u2810:
  6420  003824  6A20               	clrf	??_frexp& (0+255),c
  6421  003826                     u2818:
  6422  003826  5020               	movf	??_frexp,w,c
  6423  003828  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6424  00382C  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6425  003830  12DE               	iorwf	postinc2,f,c
  6426  003832  0E00               	movlw	0
  6427  003834  12DD               	iorwf	postdec2,f,c
  6428  003836  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6429  00383A  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6430  00383E  0E82               	movlw	130
  6431  003840  26DE               	addwf	postinc2,f,c
  6432  003842  0EFF               	movlw	255
  6433  003844  22DD               	addwfc	postdec2,f,c
  6434  003846  801D               	bsf	frexp@value+2,0,c
  6435  003848  821D               	bsf	frexp@value+2,1,c
  6436  00384A  841D               	bsf	frexp@value+2,2,c
  6437  00384C  861D               	bsf	frexp@value+2,3,c
  6438  00384E  881D               	bsf	frexp@value+2,4,c
  6439  003850  8A1D               	bsf	frexp@value+2,5,c
  6440  003852  9C1D               	bcf	frexp@value+2,6,c
  6441  003854  9E1C               	bcf	frexp@value+1,7,c
  6442  003856  C01B  F01B         	movff	frexp@value,?_frexp
  6443  00385A  C01C  F01C         	movff	frexp@value+1,?_frexp+1
  6444  00385E  C01D  F01D         	movff	frexp@value+2,?_frexp+2
  6445  003862  0012               	return	
  6446  003864                     __end_of_frexp:
  6447                           	opt stack 0
  6448                           tblptru	equ	0xFF8
  6449                           tblptrh	equ	0xFF7
  6450                           tblptrl	equ	0xFF6
  6451                           tablat	equ	0xFF5
  6452                           prodh	equ	0xFF4
  6453                           prodl	equ	0xFF3
  6454                           intcon	equ	0xFF2
  6455                           postinc0	equ	0xFEE
  6456                           wreg	equ	0xFE8
  6457                           indf2	equ	0xFDF
  6458                           postinc2	equ	0xFDE
  6459                           postdec2	equ	0xFDD
  6460                           fsr2h	equ	0xFDA
  6461                           fsr2l	equ	0xFD9
  6462                           status	equ	0xFD8
  6463                           
  6464 ;; *************** function _eval_poly *****************
  6465 ;; Defined at:
  6466 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\evalpoly.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;  x               3   49[BANK0 ] PTR int 
  6469 ;;  d               2   52[BANK0 ] PTR const 
  6470 ;;		 -> log@coeff(27), 
  6471 ;;  n               2   54[BANK0 ] int 
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;  res             3   58[BANK0 ] int 
  6474 ;; Return value:  Size  Location     Type
  6475 ;;                  3   49[BANK0 ] int 
  6476 ;; Registers used:
  6477 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6483 ;;      Params:         0       7       0       0       0       0       0
  6484 ;;      Locals:         0       3       0       0       0       0       0
  6485 ;;      Temps:          0       2       0       0       0       0       0
  6486 ;;      Totals:         0      12       0       0       0       0       0
  6487 ;;Total ram usage:       12 bytes
  6488 ;; Hardware stack levels used:    1
  6489 ;; Hardware stack levels required when called:    6
  6490 ;; This function calls:
  6491 ;;		___ftadd
  6492 ;;		___ftmul
  6493 ;;		___wmul
  6494 ;; This function is called by:
  6495 ;;		_log
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           	psect	text19
  6500  003158                     __ptext19:
  6501                           	opt stack 0
  6502  003158                     _eval_poly:
  6503                           	opt stack 22
  6504                           
  6505                           ;incstack = 0
  6506  003158  C096  F029         	movff	eval_poly@n,___wmul@multiplier
  6507  00315C  C097  F02A         	movff	eval_poly@n+1,___wmul@multiplier+1
  6508  003160  0E00               	movlw	0
  6509  003162  6E2C               	movwf	___wmul@multiplicand+1,c
  6510  003164  0E03               	movlw	3
  6511  003166  6E2B               	movwf	___wmul@multiplicand,c
  6512  003168  EC04  F01F         	call	___wmul	;wreg free
  6513  00316C  0100               	movlb	0	; () banked
  6514  00316E  C094  F098         	movff	eval_poly@d,??_eval_poly
  6515  003172  0100               	movlb	0	; () banked
  6516  003174  C095  F099         	movff	eval_poly@d+1,??_eval_poly+1
  6517  003178  5029               	movf	?___wmul,w,c
  6518  00317A  0100               	movlb	0	; () banked
  6519  00317C  2798               	addwf	??_eval_poly& (0+255),f,b
  6520  00317E  502A               	movf	?___wmul+1,w,c
  6521  003180  0100               	movlb	0	; () banked
  6522  003182  2399               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6523  003184  C098  FFF6         	movff	??_eval_poly,tblptrl
  6524  003188  C099  FFF7         	movff	??_eval_poly+1,tblptrh
  6525  00318C                     	if	0	;tblptru may be non-zero
  6526  00318C                     	endif
  6527  00318C                     	if	0	;tblptru may be non-zero
  6528  00318C                     	endif
  6529  00318C  0009               	tblrd		*+
  6530  00318E  0100               	movlb	0	; () banked
  6531  003190  CFF5 F09A          	movff	tablat,eval_poly@res
  6532  003194  0009               	tblrd		*+
  6533  003196  0100               	movlb	0	; () banked
  6534  003198  CFF5 F09B          	movff	tablat,eval_poly@res+1
  6535  00319C  000A               	tblrd		*-
  6536  00319E  0100               	movlb	0	; () banked
  6537  0031A0  CFF5 F09C          	movff	tablat,eval_poly@res+2
  6538  0031A4  D046               	goto	l4842
  6539  0031A6                     l4840:
  6540                           
  6541                           ; BSR set to: 0
  6542  0031A6  C09A  F06F         	movff	eval_poly@res,___ftmul@f2
  6543  0031AA  C09B  F070         	movff	eval_poly@res+1,___ftmul@f2+1
  6544  0031AE  C09C  F071         	movff	eval_poly@res+2,___ftmul@f2+2
  6545  0031B2  C091  F06C         	movff	eval_poly@x,___ftmul@f1
  6546  0031B6  C092  F06D         	movff	eval_poly@x+1,___ftmul@f1+1
  6547  0031BA  C093  F06E         	movff	eval_poly@x+2,___ftmul@f1+2
  6548  0031BE  ECC6  F014         	call	___ftmul	;wreg free
  6549  0031C2  C06C  F085         	movff	?___ftmul,___ftadd@f1
  6550  0031C6  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  6551  0031CA  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  6552  0031CE  0E00               	movlw	0
  6553  0031D0  6E2C               	movwf	___wmul@multiplicand+1,c
  6554  0031D2  0E03               	movlw	3
  6555  0031D4  6E2B               	movwf	___wmul@multiplicand,c
  6556  0031D6  0100               	movlb	0	; () banked
  6557  0031D8  0796               	decf	eval_poly@n& (0+255),f,b
  6558  0031DA  A0D8               	btfss	status,0,c
  6559  0031DC  0797               	decf	(eval_poly@n+1)& (0+255),f,b
  6560  0031DE  C096  F029         	movff	eval_poly@n,___wmul@multiplier
  6561  0031E2  C097  F02A         	movff	eval_poly@n+1,___wmul@multiplier+1
  6562  0031E6  EC04  F01F         	call	___wmul	;wreg free
  6563  0031EA  0100               	movlb	0	; () banked
  6564  0031EC  C094  F098         	movff	eval_poly@d,??_eval_poly
  6565  0031F0  0100               	movlb	0	; () banked
  6566  0031F2  C095  F099         	movff	eval_poly@d+1,??_eval_poly+1
  6567  0031F6  5029               	movf	?___wmul,w,c
  6568  0031F8  0100               	movlb	0	; () banked
  6569  0031FA  2798               	addwf	??_eval_poly& (0+255),f,b
  6570  0031FC  502A               	movf	?___wmul+1,w,c
  6571  0031FE  0100               	movlb	0	; () banked
  6572  003200  2399               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6573  003202  C098  FFF6         	movff	??_eval_poly,tblptrl
  6574  003206  C099  FFF7         	movff	??_eval_poly+1,tblptrh
  6575  00320A                     	if	0	;tblptru may be non-zero
  6576  00320A                     	endif
  6577  00320A                     	if	0	;tblptru may be non-zero
  6578  00320A                     	endif
  6579  00320A  0009               	tblrd		*+
  6580  00320C  0100               	movlb	0	; () banked
  6581  00320E  CFF5 F088          	movff	tablat,___ftadd@f2
  6582  003212  0009               	tblrd		*+
  6583  003214  0100               	movlb	0	; () banked
  6584  003216  CFF5 F089          	movff	tablat,___ftadd@f2+1
  6585  00321A  000A               	tblrd		*-
  6586  00321C  0100               	movlb	0	; () banked
  6587  00321E  CFF5 F08A          	movff	tablat,___ftadd@f2+2
  6588  003222  EC36  F010         	call	___ftadd	;wreg free
  6589  003226  C085  F09A         	movff	?___ftadd,eval_poly@res
  6590  00322A  C086  F09B         	movff	?___ftadd+1,eval_poly@res+1
  6591  00322E  C087  F09C         	movff	?___ftadd+2,eval_poly@res+2
  6592  003232                     l4842:
  6593  003232  0100               	movlb	0	; () banked
  6594  003234  5197               	movf	(eval_poly@n+1)& (0+255),w,b
  6595  003236  1196               	iorwf	eval_poly@n& (0+255),w,b
  6596  003238  A4D8               	btfss	status,2,c
  6597  00323A  D7B5               	goto	l4840
  6598                           
  6599                           ; BSR set to: 0
  6600  00323C  C09A  F091         	movff	eval_poly@res,?_eval_poly
  6601  003240  C09B  F092         	movff	eval_poly@res+1,?_eval_poly+1
  6602  003244  C09C  F093         	movff	eval_poly@res+2,?_eval_poly+2
  6603                           
  6604                           ; BSR set to: 0
  6605  003248  0012               	return	
  6606  00324A                     __end_of_eval_poly:
  6607                           	opt stack 0
  6608                           tblptru	equ	0xFF8
  6609                           tblptrh	equ	0xFF7
  6610                           tblptrl	equ	0xFF6
  6611                           tablat	equ	0xFF5
  6612                           prodh	equ	0xFF4
  6613                           prodl	equ	0xFF3
  6614                           intcon	equ	0xFF2
  6615                           postinc0	equ	0xFEE
  6616                           wreg	equ	0xFE8
  6617                           indf2	equ	0xFDF
  6618                           postinc2	equ	0xFDE
  6619                           postdec2	equ	0xFDD
  6620                           fsr2h	equ	0xFDA
  6621                           fsr2l	equ	0xFD9
  6622                           status	equ	0xFD8
  6623                           
  6624 ;; *************** function ___awtoft *****************
  6625 ;; Defined at:
  6626 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;  c               2   40[COMRAM] int 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;  sign            1   43[COMRAM] unsigned char 
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  3   40[COMRAM] float 
  6633 ;; Registers used:
  6634 ;;		wreg, status,2, status,0, prodl, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6640 ;;      Params:         3       0       0       0       0       0       0
  6641 ;;      Locals:         1       0       0       0       0       0       0
  6642 ;;      Temps:          0       0       0       0       0       0       0
  6643 ;;      Totals:         4       0       0       0       0       0       0
  6644 ;;Total ram usage:        4 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    5
  6647 ;; This function calls:
  6648 ;;		___ftpack
  6649 ;; This function is called by:
  6650 ;;		_Temp_Convert
  6651 ;;		_log
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           	psect	text20
  6656  003BF4                     __ptext20:
  6657                           	opt stack 0
  6658  003BF4                     ___awtoft:
  6659                           	opt stack 23
  6660                           
  6661                           ; BSR set to: 0
  6662                           ;incstack = 0
  6663  003BF4  0E00               	movlw	0
  6664  003BF6  6E2C               	movwf	___awtoft@sign,c
  6665  003BF8  502A               	movf	___awtoft@c+1,w,c
  6666  003BFA  0A80               	xorlw	128
  6667  003BFC  6EF3               	movwf	prodl,c
  6668  003BFE  0E80               	movlw	128
  6669  003C00  5CF3               	subwf	prodl,w,c
  6670  003C02  0E00               	movlw	0
  6671  003C04  B4D8               	btfsc	status,2,c
  6672  003C06  5C29               	subwf	___awtoft@c,w,c
  6673  003C08  B0D8               	btfsc	status,0,c
  6674  003C0A  D006               	goto	l4834
  6675  003C0C  6C29               	negf	___awtoft@c,c
  6676  003C0E  1E2A               	comf	___awtoft@c+1,f,c
  6677  003C10  B0D8               	btfsc	status,0,c
  6678  003C12  2A2A               	incf	___awtoft@c+1,f,c
  6679  003C14  0E01               	movlw	1
  6680  003C16  6E2C               	movwf	___awtoft@sign,c
  6681  003C18                     l4834:
  6682  003C18  C029  F01B         	movff	___awtoft@c,___ftpack@arg
  6683  003C1C  C02A  F01C         	movff	___awtoft@c+1,___ftpack@arg+1
  6684  003C20  6A1D               	clrf	___ftpack@arg+2,c
  6685  003C22  0E8E               	movlw	142
  6686  003C24  6E1E               	movwf	___ftpack@exp,c
  6687  003C26  C02C  F01F         	movff	___awtoft@sign,___ftpack@sign
  6688  003C2A  EC43  F01B         	call	___ftpack	;wreg free
  6689  003C2E  C01B  F029         	movff	?___ftpack,?___awtoft
  6690  003C32  C01C  F02A         	movff	?___ftpack+1,?___awtoft+1
  6691  003C36  C01D  F02B         	movff	?___ftpack+2,?___awtoft+2
  6692  003C3A  0012               	return	
  6693  003C3C                     __end_of___awtoft:
  6694                           	opt stack 0
  6695                           tblptru	equ	0xFF8
  6696                           tblptrh	equ	0xFF7
  6697                           tblptrl	equ	0xFF6
  6698                           tablat	equ	0xFF5
  6699                           prodh	equ	0xFF4
  6700                           prodl	equ	0xFF3
  6701                           intcon	equ	0xFF2
  6702                           postinc0	equ	0xFEE
  6703                           wreg	equ	0xFE8
  6704                           indf2	equ	0xFDF
  6705                           postinc2	equ	0xFDE
  6706                           postdec2	equ	0xFDD
  6707                           fsr2h	equ	0xFDA
  6708                           fsr2l	equ	0xFD9
  6709                           status	equ	0xFD8
  6710                           
  6711 ;; *************** function ___ftsub *****************
  6712 ;; Defined at:
  6713 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;  f1              3   49[BANK0 ] float 
  6716 ;;  f2              3   52[BANK0 ] float 
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;		None
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  3   49[BANK0 ] float 
  6721 ;; Registers used:
  6722 ;;		wreg, status,2, status,0, cstack
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6728 ;;      Params:         0       6       0       0       0       0       0
  6729 ;;      Locals:         0       0       0       0       0       0       0
  6730 ;;      Temps:          0       0       0       0       0       0       0
  6731 ;;      Totals:         0       6       0       0       0       0       0
  6732 ;;Total ram usage:        6 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:    6
  6735 ;; This function calls:
  6736 ;;		___ftadd
  6737 ;; This function is called by:
  6738 ;;		_Temp_Convert
  6739 ;;		_printf
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           	psect	text21
  6744  003C3C                     __ptext21:
  6745                           	opt stack 0
  6746  003C3C                     ___ftsub:
  6747                           	opt stack 23
  6748                           
  6749                           ;incstack = 0
  6750  003C3C  0E00               	movlw	0
  6751  003C3E  0100               	movlb	0	; () banked
  6752  003C40  1B94               	xorwf	___ftsub@f2& (0+255),f,b
  6753  003C42  0E00               	movlw	0
  6754  003C44  0100               	movlb	0	; () banked
  6755  003C46  1B95               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6756  003C48  0E80               	movlw	128
  6757  003C4A  0100               	movlb	0	; () banked
  6758  003C4C  1B96               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6759                           
  6760                           ; BSR set to: 0
  6761  003C4E  C091  F085         	movff	___ftsub@f1,___ftadd@f1
  6762  003C52  C092  F086         	movff	___ftsub@f1+1,___ftadd@f1+1
  6763  003C56  C093  F087         	movff	___ftsub@f1+2,___ftadd@f1+2
  6764  003C5A  C094  F088         	movff	___ftsub@f2,___ftadd@f2
  6765  003C5E  C095  F089         	movff	___ftsub@f2+1,___ftadd@f2+1
  6766  003C62  C096  F08A         	movff	___ftsub@f2+2,___ftadd@f2+2
  6767  003C66  EC36  F010         	call	___ftadd	;wreg free
  6768  003C6A  C085  F091         	movff	?___ftadd,?___ftsub
  6769  003C6E  C086  F092         	movff	?___ftadd+1,?___ftsub+1
  6770  003C72  C087  F093         	movff	?___ftadd+2,?___ftsub+2
  6771  003C76  0012               	return	
  6772  003C78                     __end_of___ftsub:
  6773                           	opt stack 0
  6774                           tblptru	equ	0xFF8
  6775                           tblptrh	equ	0xFF7
  6776                           tblptrl	equ	0xFF6
  6777                           tablat	equ	0xFF5
  6778                           prodh	equ	0xFF4
  6779                           prodl	equ	0xFF3
  6780                           intcon	equ	0xFF2
  6781                           postinc0	equ	0xFEE
  6782                           wreg	equ	0xFE8
  6783                           indf2	equ	0xFDF
  6784                           postinc2	equ	0xFDE
  6785                           postdec2	equ	0xFDD
  6786                           fsr2h	equ	0xFDA
  6787                           fsr2l	equ	0xFD9
  6788                           status	equ	0xFD8
  6789                           
  6790 ;; *************** function ___awdiv *****************
  6791 ;; Defined at:
  6792 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;  dividend        2   32[COMRAM] int 
  6795 ;;  divisor         2   34[COMRAM] int 
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;  quotient        2   38[COMRAM] int 
  6798 ;;  sign            1   37[COMRAM] unsigned char 
  6799 ;;  counter         1   36[COMRAM] unsigned char 
  6800 ;; Return value:  Size  Location     Type
  6801 ;;                  2   32[COMRAM] int 
  6802 ;; Registers used:
  6803 ;;		wreg, status,2, status,0, prodl
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6809 ;;      Params:         4       0       0       0       0       0       0
  6810 ;;      Locals:         4       0       0       0       0       0       0
  6811 ;;      Temps:          0       0       0       0       0       0       0
  6812 ;;      Totals:         8       0       0       0       0       0       0
  6813 ;;Total ram usage:        8 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:    4
  6816 ;; This function calls:
  6817 ;;		Nothing
  6818 ;; This function is called by:
  6819 ;;		_Temp_Convert
  6820 ;;		_fround
  6821 ;;		_scale
  6822 ;;		_printf
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text22
  6827  00372E                     __ptext22:
  6828                           	opt stack 0
  6829  00372E                     ___awdiv:
  6830                           	opt stack 24
  6831                           
  6832                           ;incstack = 0
  6833  00372E  0E00               	movlw	0
  6834  003730  6E26               	movwf	___awdiv@sign,c
  6835  003732  5024               	movf	___awdiv@divisor+1,w,c
  6836  003734  0A80               	xorlw	128
  6837  003736  6EF3               	movwf	prodl,c
  6838  003738  0E80               	movlw	128
  6839  00373A  5CF3               	subwf	prodl,w,c
  6840  00373C  0E00               	movlw	0
  6841  00373E  B4D8               	btfsc	status,2,c
  6842  003740  5C23               	subwf	___awdiv@divisor,w,c
  6843  003742  B0D8               	btfsc	status,0,c
  6844  003744  D006               	goto	l4754
  6845  003746  6C23               	negf	___awdiv@divisor,c
  6846  003748  1E24               	comf	___awdiv@divisor+1,f,c
  6847  00374A  B0D8               	btfsc	status,0,c
  6848  00374C  2A24               	incf	___awdiv@divisor+1,f,c
  6849  00374E  0E01               	movlw	1
  6850  003750  6E26               	movwf	___awdiv@sign,c
  6851  003752                     l4754:
  6852  003752  5022               	movf	___awdiv@dividend+1,w,c
  6853  003754  0A80               	xorlw	128
  6854  003756  6EF3               	movwf	prodl,c
  6855  003758  0E80               	movlw	128
  6856  00375A  5CF3               	subwf	prodl,w,c
  6857  00375C  0E00               	movlw	0
  6858  00375E  B4D8               	btfsc	status,2,c
  6859  003760  5C21               	subwf	___awdiv@dividend,w,c
  6860  003762  B0D8               	btfsc	status,0,c
  6861  003764  D006               	goto	l4760
  6862  003766  6C21               	negf	___awdiv@dividend,c
  6863  003768  1E22               	comf	___awdiv@dividend+1,f,c
  6864  00376A  B0D8               	btfsc	status,0,c
  6865  00376C  2A22               	incf	___awdiv@dividend+1,f,c
  6866  00376E  0E01               	movlw	1
  6867  003770  1A26               	xorwf	___awdiv@sign,f,c
  6868  003772                     l4760:
  6869  003772  0E00               	movlw	0
  6870  003774  6E28               	movwf	___awdiv@quotient+1,c
  6871  003776  0E00               	movlw	0
  6872  003778  6E27               	movwf	___awdiv@quotient,c
  6873  00377A  5024               	movf	___awdiv@divisor+1,w,c
  6874  00377C  1023               	iorwf	___awdiv@divisor,w,c
  6875  00377E  B4D8               	btfsc	status,2,c
  6876  003780  D01C               	goto	l4782
  6877  003782  0E01               	movlw	1
  6878  003784  6E25               	movwf	___awdiv@counter,c
  6879  003786  D004               	goto	l4768
  6880  003788                     l4766:
  6881  003788  90D8               	bcf	status,0,c
  6882  00378A  3623               	rlcf	___awdiv@divisor,f,c
  6883  00378C  3624               	rlcf	___awdiv@divisor+1,f,c
  6884  00378E  2A25               	incf	___awdiv@counter,f,c
  6885  003790                     l4768:
  6886  003790  AE24               	btfss	___awdiv@divisor+1,7,c
  6887  003792  D7FA               	goto	l4766
  6888  003794                     l4770:
  6889  003794  90D8               	bcf	status,0,c
  6890  003796  3627               	rlcf	___awdiv@quotient,f,c
  6891  003798  3628               	rlcf	___awdiv@quotient+1,f,c
  6892  00379A  5023               	movf	___awdiv@divisor,w,c
  6893  00379C  5C21               	subwf	___awdiv@dividend,w,c
  6894  00379E  5024               	movf	___awdiv@divisor+1,w,c
  6895  0037A0  5822               	subwfb	___awdiv@dividend+1,w,c
  6896  0037A2  A0D8               	btfss	status,0,c
  6897  0037A4  D005               	goto	l4778
  6898  0037A6  5023               	movf	___awdiv@divisor,w,c
  6899  0037A8  5E21               	subwf	___awdiv@dividend,f,c
  6900  0037AA  5024               	movf	___awdiv@divisor+1,w,c
  6901  0037AC  5A22               	subwfb	___awdiv@dividend+1,f,c
  6902  0037AE  8027               	bsf	___awdiv@quotient,0,c
  6903  0037B0                     l4778:
  6904  0037B0  90D8               	bcf	status,0,c
  6905  0037B2  3224               	rrcf	___awdiv@divisor+1,f,c
  6906  0037B4  3223               	rrcf	___awdiv@divisor,f,c
  6907  0037B6  2E25               	decfsz	___awdiv@counter,f,c
  6908  0037B8  D7ED               	goto	l4770
  6909  0037BA                     l4782:
  6910  0037BA  5026               	movf	___awdiv@sign,w,c
  6911  0037BC  B4D8               	btfsc	status,2,c
  6912  0037BE  D004               	goto	l4786
  6913  0037C0  6C27               	negf	___awdiv@quotient,c
  6914  0037C2  1E28               	comf	___awdiv@quotient+1,f,c
  6915  0037C4  B0D8               	btfsc	status,0,c
  6916  0037C6  2A28               	incf	___awdiv@quotient+1,f,c
  6917  0037C8                     l4786:
  6918  0037C8  C027  F021         	movff	___awdiv@quotient,?___awdiv
  6919  0037CC  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
  6920  0037D0  0012               	return	
  6921  0037D2                     __end_of___awdiv:
  6922                           	opt stack 0
  6923                           tblptru	equ	0xFF8
  6924                           tblptrh	equ	0xFF7
  6925                           tblptrl	equ	0xFF6
  6926                           tablat	equ	0xFF5
  6927                           prodh	equ	0xFF4
  6928                           prodl	equ	0xFF3
  6929                           intcon	equ	0xFF2
  6930                           postinc0	equ	0xFEE
  6931                           wreg	equ	0xFE8
  6932                           indf2	equ	0xFDF
  6933                           postinc2	equ	0xFDE
  6934                           postdec2	equ	0xFDD
  6935                           fsr2h	equ	0xFDA
  6936                           fsr2l	equ	0xFD9
  6937                           status	equ	0xFD8
  6938                           
  6939 ;; *************** function _Temp_Filter *****************
  6940 ;; Defined at:
  6941 ;;		line 49 in file "Tempeture.c"
  6942 ;; Parameters:    Size  Location     Type
  6943 ;;		None
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;  x               2   49[BANK0 ] int 
  6946 ;; Return value:  Size  Location     Type
  6947 ;;		None               void
  6948 ;; Registers used:
  6949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6950 ;; Tracked objects:
  6951 ;;		On entry : 0/0
  6952 ;;		On exit  : 0/0
  6953 ;;		Unchanged: 0/0
  6954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6955 ;;      Params:         0       0       0       0       0       0       0
  6956 ;;      Locals:         0       2       0       0       0       0       0
  6957 ;;      Temps:          0       0       0       0       0       0       0
  6958 ;;      Totals:         0       2       0       0       0       0       0
  6959 ;;Total ram usage:        2 bytes
  6960 ;; Hardware stack levels used:    1
  6961 ;; Hardware stack levels required when called:    6
  6962 ;; This function calls:
  6963 ;;		___ftadd
  6964 ;;		___ftmul
  6965 ;;		___wmul
  6966 ;; This function is called by:
  6967 ;;		_Temp_Convert
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text23
  6972  002500                     __ptext23:
  6973                           	opt stack 0
  6974  002500                     _Temp_Filter:
  6975                           	opt stack 23
  6976                           
  6977                           ;Tempeture.c: 52: int x;
  6978                           ;Tempeture.c: 53: for(x = 0; x < 10; x++)
  6979                           
  6980                           ;incstack = 0
  6981  002500  0E00               	movlw	0
  6982  002502  0100               	movlb	0	; () banked
  6983  002504  6F92               	movwf	(Temp_Filter@x+1)& (0+255),b
  6984  002506  0E00               	movlw	0
  6985  002508  0100               	movlb	0	; () banked
  6986  00250A  6F91               	movwf	Temp_Filter@x& (0+255),b
  6987  00250C                     
  6988                           ; BSR set to: 0
  6989  00250C  0100               	movlb	0	; () banked
  6990  00250E  5192               	movf	(Temp_Filter@x+1)& (0+255),w,b
  6991  002510  0A80               	xorlw	128
  6992  002512  0F80               	addlw	-128
  6993  002514  0E0A               	movlw	10
  6994  002516  B4D8               	btfsc	status,2,c
  6995  002518  5D91               	subwf	Temp_Filter@x& (0+255),w,b
  6996  00251A  B0D8               	btfsc	status,0,c
  6997  00251C  D077               	goto	l4886
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;Tempeture.c: 54: {
  7001                           ;Tempeture.c: 55: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  7002                           
  7003                           ; BSR set to: 0
  7004                           
  7005                           ; BSR set to: 0
  7006  00251E  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  7007  002522  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7008  002526  0E00               	movlw	0
  7009  002528  6E2C               	movwf	___wmul@multiplicand+1,c
  7010  00252A  0E03               	movlw	3
  7011  00252C  6E2B               	movwf	___wmul@multiplicand,c
  7012  00252E  EC04  F01F         	call	___wmul	;wreg free
  7013  002532  0101               	movlb	1	; () banked
  7014  002534  0E8C               	movlw	low _Temp_DegF
  7015  002536  2429               	addwf	?___wmul,w,c
  7016  002538  6ED9               	movwf	fsr2l,c
  7017  00253A  0101               	movlb	1	; () banked
  7018  00253C  0E01               	movlw	high _Temp_DegF
  7019  00253E  202A               	addwfc	?___wmul+1,w,c
  7020  002540  6EDA               	movwf	fsr2h,c
  7021  002542  0E48               	movlw	72
  7022  002544  0100               	movlb	0	; () banked
  7023  002546  6F6F               	movwf	___ftmul@f2& (0+255),b
  7024  002548  0E61               	movlw	97
  7025  00254A  0100               	movlb	0	; () banked
  7026  00254C  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  7027  00254E  0E3F               	movlw	63
  7028  002550  0100               	movlb	0	; () banked
  7029  002552  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  7030  002554  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  7031  002558  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7032  00255C  0E00               	movlw	0
  7033  00255E  6E2C               	movwf	___wmul@multiplicand+1,c
  7034  002560  0E03               	movlw	3
  7035  002562  6E2B               	movwf	___wmul@multiplicand,c
  7036  002564  EC04  F01F         	call	___wmul	;wreg free
  7037  002568  0101               	movlb	1	; () banked
  7038  00256A  0EC8               	movlw	low _TmpTemp_DegF
  7039  00256C  2429               	addwf	?___wmul,w,c
  7040  00256E  6EE1               	movwf	fsr1l,c
  7041  002570  0101               	movlb	1	; () banked
  7042  002572  0E01               	movlw	high _TmpTemp_DegF
  7043  002574  202A               	addwfc	?___wmul+1,w,c
  7044  002576  6EE2               	movwf	fsr1h,c
  7045  002578  0100               	movlb	0	; () banked
  7046  00257A  CFE6 F06C          	movff	postinc1,___ftmul@f1
  7047  00257E  0100               	movlb	0	; () banked
  7048  002580  CFE6 F06D          	movff	postinc1,___ftmul@f1+1
  7049  002584  0100               	movlb	0	; () banked
  7050  002586  CFE5 F06E          	movff	postdec1,___ftmul@f1+2
  7051  00258A  ECC6  F014         	call	___ftmul	;wreg free
  7052  00258E  C06C  F085         	movff	?___ftmul,___ftadd@f1
  7053  002592  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  7054  002596  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  7055  00259A  0EC3               	movlw	195
  7056  00259C  0100               	movlb	0	; () banked
  7057  00259E  6F6F               	movwf	___ftmul@f2& (0+255),b
  7058  0025A0  0EF5               	movlw	245
  7059  0025A2  0100               	movlb	0	; () banked
  7060  0025A4  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  7061  0025A6  0E3D               	movlw	61
  7062  0025A8  0100               	movlb	0	; () banked
  7063  0025AA  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  7064  0025AC  0E00               	movlw	0
  7065  0025AE  6E2C               	movwf	___wmul@multiplicand+1,c
  7066  0025B0  0E03               	movlw	3
  7067  0025B2  6E2B               	movwf	___wmul@multiplicand,c
  7068  0025B4  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  7069  0025B8  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7070  0025BC  EC04  F01F         	call	___wmul	;wreg free
  7071  0025C0  0101               	movlb	1	; () banked
  7072  0025C2  0E6E               	movlw	low _PrevTemp_DegF
  7073  0025C4  2429               	addwf	?___wmul,w,c
  7074  0025C6  6EE1               	movwf	fsr1l,c
  7075  0025C8  0101               	movlb	1	; () banked
  7076  0025CA  0E01               	movlw	high _PrevTemp_DegF
  7077  0025CC  202A               	addwfc	?___wmul+1,w,c
  7078  0025CE  6EE2               	movwf	fsr1h,c
  7079  0025D0  0100               	movlb	0	; () banked
  7080  0025D2  CFE6 F06C          	movff	postinc1,___ftmul@f1
  7081  0025D6  0100               	movlb	0	; () banked
  7082  0025D8  CFE6 F06D          	movff	postinc1,___ftmul@f1+1
  7083  0025DC  0100               	movlb	0	; () banked
  7084  0025DE  CFE5 F06E          	movff	postdec1,___ftmul@f1+2
  7085  0025E2  ECC6  F014         	call	___ftmul	;wreg free
  7086  0025E6  C06C  F088         	movff	?___ftmul,___ftadd@f2
  7087  0025EA  C06D  F089         	movff	?___ftmul+1,___ftadd@f2+1
  7088  0025EE  C06E  F08A         	movff	?___ftmul+2,___ftadd@f2+2
  7089  0025F2  EC36  F010         	call	___ftadd	;wreg free
  7090  0025F6  C085  FFDE         	movff	?___ftadd,postinc2
  7091  0025FA  C086  FFDE         	movff	?___ftadd+1,postinc2
  7092  0025FE  C087  FFDD         	movff	?___ftadd+2,postdec2
  7093  002602  52DD               	movf	postdec2,f,c
  7094  002604  0100               	movlb	0	; () banked
  7095  002606  4B91               	infsnz	Temp_Filter@x& (0+255),f,b
  7096  002608  2B92               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7097  00260A  D780               	goto	L9
  7098  00260C                     l4886:
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;Tempeture.c: 56: }
  7102                           ;Tempeture.c: 57: for(x = 0; x < 10; x++)
  7103  00260C  0E00               	movlw	0
  7104  00260E  0100               	movlb	0	; () banked
  7105  002610  6F92               	movwf	(Temp_Filter@x+1)& (0+255),b
  7106  002612  0E00               	movlw	0
  7107  002614  0100               	movlb	0	; () banked
  7108  002616  6F91               	movwf	Temp_Filter@x& (0+255),b
  7109  002618                     
  7110                           ; BSR set to: 0
  7111  002618  0100               	movlb	0	; () banked
  7112  00261A  5192               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7113  00261C  0A80               	xorlw	128
  7114  00261E  0F80               	addlw	-128
  7115  002620  0E0A               	movlw	10
  7116  002622  B4D8               	btfsc	status,2,c
  7117  002624  5D91               	subwf	Temp_Filter@x& (0+255),w,b
  7118  002626  B0D8               	btfsc	status,0,c
  7119  002628  0012               	return	
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;Tempeture.c: 58: {
  7123                           ;Tempeture.c: 59: PrevTemp_DegF[x] = Temp_DegF[x];
  7124                           
  7125                           ; BSR set to: 0
  7126                           
  7127                           ; BSR set to: 0
  7128  00262A  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  7129  00262E  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7130  002632  0E00               	movlw	0
  7131  002634  6E2C               	movwf	___wmul@multiplicand+1,c
  7132  002636  0E03               	movlw	3
  7133  002638  6E2B               	movwf	___wmul@multiplicand,c
  7134  00263A  EC04  F01F         	call	___wmul	;wreg free
  7135  00263E  0101               	movlb	1	; () banked
  7136  002640  0E8C               	movlw	low _Temp_DegF
  7137  002642  2429               	addwf	?___wmul,w,c
  7138  002644  6ED9               	movwf	fsr2l,c
  7139  002646  0101               	movlb	1	; () banked
  7140  002648  0E01               	movlw	high _Temp_DegF
  7141  00264A  202A               	addwfc	?___wmul+1,w,c
  7142  00264C  6EDA               	movwf	fsr2h,c
  7143  00264E  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  7144  002652  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7145  002656  0E00               	movlw	0
  7146  002658  6E2C               	movwf	___wmul@multiplicand+1,c
  7147  00265A  0E03               	movlw	3
  7148  00265C  6E2B               	movwf	___wmul@multiplicand,c
  7149  00265E  EC04  F01F         	call	___wmul	;wreg free
  7150  002662  0101               	movlb	1	; () banked
  7151  002664  0E6E               	movlw	low _PrevTemp_DegF
  7152  002666  2429               	addwf	?___wmul,w,c
  7153  002668  6EE1               	movwf	fsr1l,c
  7154  00266A  0101               	movlb	1	; () banked
  7155  00266C  0E01               	movlw	high _PrevTemp_DegF
  7156  00266E  202A               	addwfc	?___wmul+1,w,c
  7157  002670  6EE2               	movwf	fsr1h,c
  7158  002672  CFDE FFE6          	movff	postinc2,postinc1
  7159  002676  CFDE FFE6          	movff	postinc2,postinc1
  7160  00267A  CFDE FFE5          	movff	postinc2,postdec1
  7161  00267E  52E5               	movf	postdec1,f,c
  7162                           
  7163                           ; BSR set to: 1
  7164  002680  0100               	movlb	0	; () banked
  7165  002682  4B91               	infsnz	Temp_Filter@x& (0+255),f,b
  7166  002684  2B92               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7167  002686  D7C8               	goto	L10
  7168  002688                     __end_of_Temp_Filter:
  7169                           	opt stack 0
  7170                           tblptru	equ	0xFF8
  7171                           tblptrh	equ	0xFF7
  7172                           tblptrl	equ	0xFF6
  7173                           tablat	equ	0xFF5
  7174                           prodh	equ	0xFF4
  7175                           prodl	equ	0xFF3
  7176                           intcon	equ	0xFF2
  7177                           postinc0	equ	0xFEE
  7178                           wreg	equ	0xFE8
  7179                           postinc1	equ	0xFE6
  7180                           postdec1	equ	0xFE5
  7181                           fsr1h	equ	0xFE2
  7182                           fsr1l	equ	0xFE1
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           postdec2	equ	0xFDD
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function _SYSTEM_Initialize *****************
  7191 ;; Defined at:
  7192 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;		None
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;		None
  7197 ;; Return value:  Size  Location     Type
  7198 ;;		None               void
  7199 ;; Registers used:
  7200 ;;		wreg, status,2, cstack
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7206 ;;      Params:         0       0       0       0       0       0       0
  7207 ;;      Locals:         0       0       0       0       0       0       0
  7208 ;;      Temps:          0       0       0       0       0       0       0
  7209 ;;      Totals:         0       0       0       0       0       0       0
  7210 ;;Total ram usage:        0 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    6
  7213 ;; This function calls:
  7214 ;;		_ADC_Initialize
  7215 ;;		_EUSART1_Initialize
  7216 ;;		_INTERRUPT_Initialize
  7217 ;;		_OSCILLATOR_Initialize
  7218 ;;		_PIN_MANAGER_Initialize
  7219 ;;		_TMR1_Initialize
  7220 ;; This function is called by:
  7221 ;;		_main
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           	psect	text24
  7226  003E70                     __ptext24:
  7227                           	opt stack 0
  7228  003E70                     _SYSTEM_Initialize:
  7229                           	opt stack 24
  7230                           
  7231                           ;mcc.c: 114: OSCILLATOR_Initialize();
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;incstack = 0
  7235  003E70  EC80  F01F         	call	_OSCILLATOR_Initialize	;wreg free
  7236                           
  7237                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7238  003E74  ECD3  F01D         	call	_PIN_MANAGER_Initialize	;wreg free
  7239                           
  7240                           ;mcc.c: 116: INTERRUPT_Initialize();
  7241  003E78  EC87  F01F         	call	_INTERRUPT_Initialize	;wreg free
  7242                           
  7243                           ;mcc.c: 117: ADC_Initialize();
  7244  003E7C  EC52  F01F         	call	_ADC_Initialize	;wreg free
  7245                           
  7246                           ;mcc.c: 118: EUSART1_Initialize();
  7247  003E80  EC3C  F01E         	call	_EUSART1_Initialize	;wreg free
  7248                           
  7249                           ;mcc.c: 119: TMR1_Initialize();
  7250  003E84  EC17  F01F         	call	_TMR1_Initialize	;wreg free
  7251  003E88  0012               	return	
  7252  003E8A                     __end_of_SYSTEM_Initialize:
  7253                           	opt stack 0
  7254                           tblptru	equ	0xFF8
  7255                           tblptrh	equ	0xFF7
  7256                           tblptrl	equ	0xFF6
  7257                           tablat	equ	0xFF5
  7258                           prodh	equ	0xFF4
  7259                           prodl	equ	0xFF3
  7260                           intcon	equ	0xFF2
  7261                           postinc0	equ	0xFEE
  7262                           wreg	equ	0xFE8
  7263                           postinc1	equ	0xFE6
  7264                           postdec1	equ	0xFE5
  7265                           fsr1h	equ	0xFE2
  7266                           fsr1l	equ	0xFE1
  7267                           indf2	equ	0xFDF
  7268                           postinc2	equ	0xFDE
  7269                           postdec2	equ	0xFDD
  7270                           fsr2h	equ	0xFDA
  7271                           fsr2l	equ	0xFD9
  7272                           status	equ	0xFD8
  7273                           
  7274 ;; *************** function _TMR1_Initialize *****************
  7275 ;; Defined at:
  7276 ;;		line 18 in file "mcc_generated_files/tmr1.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;		None
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;		None
  7281 ;; Return value:  Size  Location     Type
  7282 ;;		None               void
  7283 ;; Registers used:
  7284 ;;		wreg, status,2, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7290 ;;      Params:         0       0       0       0       0       0       0
  7291 ;;      Locals:         0       0       0       0       0       0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0
  7293 ;;      Totals:         0       0       0       0       0       0       0
  7294 ;;Total ram usage:        0 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    5
  7297 ;; This function calls:
  7298 ;;		_TMR1_StartTimer
  7299 ;; This function is called by:
  7300 ;;		_SYSTEM_Initialize
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           	psect	text25
  7305  003E2E                     __ptext25:
  7306                           	opt stack 0
  7307  003E2E                     _TMR1_Initialize:
  7308                           	opt stack 24
  7309                           
  7310                           ;tmr1.c: 23: T1CON = 0x30;
  7311                           
  7312                           ;incstack = 0
  7313  003E2E  0E30               	movlw	48
  7314  003E30  6ECD               	movwf	4045,c	;volatile
  7315                           
  7316                           ;tmr1.c: 26: T1GCON = 0x00;
  7317  003E32  0E00               	movlw	0
  7318  003E34  6ECC               	movwf	4044,c	;volatile
  7319                           
  7320                           ;tmr1.c: 29: TMR1H = 0x0B;
  7321  003E36  0E0B               	movlw	11
  7322  003E38  6ECF               	movwf	4047,c	;volatile
  7323                           
  7324                           ;tmr1.c: 32: TMR1L = 0xDC;
  7325  003E3A  0EDC               	movlw	220
  7326  003E3C  6ECE               	movwf	4046,c	;volatile
  7327                           
  7328                           ;tmr1.c: 35: timer1ReloadVal=TMR1;
  7329  003E3E  CFCE F043          	movff	4046,_timer1ReloadVal	;volatile
  7330  003E42  CFCF F044          	movff	4047,_timer1ReloadVal+1	;volatile
  7331                           
  7332                           ;tmr1.c: 38: PIR1bits.TMR1IF = 0;
  7333  003E46  909E               	bcf	3998,0,c	;volatile
  7334                           
  7335                           ;tmr1.c: 41: PIE1bits.TMR1IE = 1;
  7336  003E48  809D               	bsf	3997,0,c	;volatile
  7337                           
  7338                           ;tmr1.c: 44: TMR1_StartTimer();
  7339  003E4A  EC92  F01F         	call	_TMR1_StartTimer	;wreg free
  7340  003E4E  0012               	return	
  7341  003E50                     __end_of_TMR1_Initialize:
  7342                           	opt stack 0
  7343                           tblptru	equ	0xFF8
  7344                           tblptrh	equ	0xFF7
  7345                           tblptrl	equ	0xFF6
  7346                           tablat	equ	0xFF5
  7347                           prodh	equ	0xFF4
  7348                           prodl	equ	0xFF3
  7349                           intcon	equ	0xFF2
  7350                           postinc0	equ	0xFEE
  7351                           wreg	equ	0xFE8
  7352                           postinc1	equ	0xFE6
  7353                           postdec1	equ	0xFE5
  7354                           fsr1h	equ	0xFE2
  7355                           fsr1l	equ	0xFE1
  7356                           indf2	equ	0xFDF
  7357                           postinc2	equ	0xFDE
  7358                           postdec2	equ	0xFDD
  7359                           fsr2h	equ	0xFDA
  7360                           fsr2l	equ	0xFD9
  7361                           status	equ	0xFD8
  7362                           
  7363 ;; *************** function _TMR1_StartTimer *****************
  7364 ;; Defined at:
  7365 ;;		line 47 in file "mcc_generated_files/tmr1.c"
  7366 ;; Parameters:    Size  Location     Type
  7367 ;;		None
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;		None
  7370 ;; Return value:  Size  Location     Type
  7371 ;;		None               void
  7372 ;; Registers used:
  7373 ;;		None
  7374 ;; Tracked objects:
  7375 ;;		On entry : 0/0
  7376 ;;		On exit  : 0/0
  7377 ;;		Unchanged: 0/0
  7378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7379 ;;      Params:         0       0       0       0       0       0       0
  7380 ;;      Locals:         0       0       0       0       0       0       0
  7381 ;;      Temps:          0       0       0       0       0       0       0
  7382 ;;      Totals:         0       0       0       0       0       0       0
  7383 ;;Total ram usage:        0 bytes
  7384 ;; Hardware stack levels used:    1
  7385 ;; Hardware stack levels required when called:    4
  7386 ;; This function calls:
  7387 ;;		Nothing
  7388 ;; This function is called by:
  7389 ;;		_TMR1_Initialize
  7390 ;; This function uses a non-reentrant model
  7391 ;;
  7392                           
  7393                           	psect	text26
  7394  003F24                     __ptext26:
  7395                           	opt stack 0
  7396  003F24                     _TMR1_StartTimer:
  7397                           	opt stack 24
  7398                           
  7399                           ;tmr1.c: 50: T1CONbits.TMR1ON = 1;
  7400                           
  7401                           ;incstack = 0
  7402  003F24  80CD               	bsf	4045,0,c	;volatile
  7403  003F26  0012               	return	
  7404  003F28                     __end_of_TMR1_StartTimer:
  7405                           	opt stack 0
  7406                           tblptru	equ	0xFF8
  7407                           tblptrh	equ	0xFF7
  7408                           tblptrl	equ	0xFF6
  7409                           tablat	equ	0xFF5
  7410                           prodh	equ	0xFF4
  7411                           prodl	equ	0xFF3
  7412                           intcon	equ	0xFF2
  7413                           postinc0	equ	0xFEE
  7414                           wreg	equ	0xFE8
  7415                           postinc1	equ	0xFE6
  7416                           postdec1	equ	0xFE5
  7417                           fsr1h	equ	0xFE2
  7418                           fsr1l	equ	0xFE1
  7419                           indf2	equ	0xFDF
  7420                           postinc2	equ	0xFDE
  7421                           postdec2	equ	0xFDD
  7422                           fsr2h	equ	0xFDA
  7423                           fsr2l	equ	0xFD9
  7424                           status	equ	0xFD8
  7425                           
  7426 ;; *************** function _PIN_MANAGER_Initialize *****************
  7427 ;; Defined at:
  7428 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;		None
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;		None
  7433 ;; Return value:  Size  Location     Type
  7434 ;;		None               void
  7435 ;; Registers used:
  7436 ;;		wreg, status,2
  7437 ;; Tracked objects:
  7438 ;;		On entry : 0/0
  7439 ;;		On exit  : 0/0
  7440 ;;		Unchanged: 0/0
  7441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7442 ;;      Params:         0       0       0       0       0       0       0
  7443 ;;      Locals:         0       0       0       0       0       0       0
  7444 ;;      Temps:          0       0       0       0       0       0       0
  7445 ;;      Totals:         0       0       0       0       0       0       0
  7446 ;;Total ram usage:        0 bytes
  7447 ;; Hardware stack levels used:    1
  7448 ;; Hardware stack levels required when called:    4
  7449 ;; This function calls:
  7450 ;;		Nothing
  7451 ;; This function is called by:
  7452 ;;		_SYSTEM_Initialize
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455                           
  7456                           	psect	text27
  7457  003BA6                     __ptext27:
  7458                           	opt stack 0
  7459  003BA6                     _PIN_MANAGER_Initialize:
  7460                           	opt stack 25
  7461                           
  7462                           ;pin_manager.c: 8: LATA = 0x00;
  7463                           
  7464                           ;incstack = 0
  7465  003BA6  0E00               	movlw	0
  7466  003BA8  6E89               	movwf	3977,c	;volatile
  7467                           
  7468                           ;pin_manager.c: 9: TRISA = 0xAE;
  7469  003BAA  0EAE               	movlw	174
  7470  003BAC  6E92               	movwf	3986,c	;volatile
  7471                           
  7472                           ;pin_manager.c: 10: ANSELA = 0x2E;
  7473  003BAE  0E2E               	movlw	46
  7474  003BB0  010F               	movlb	15	; () banked
  7475  003BB2  6F38               	movwf	56,b	;volatile
  7476                           
  7477                           ;pin_manager.c: 12: LATB = 0x00;
  7478  003BB4  0E00               	movlw	0
  7479  003BB6  6E8A               	movwf	3978,c	;volatile
  7480                           
  7481                           ;pin_manager.c: 13: TRISB = 0xF4;
  7482  003BB8  0EF4               	movlw	244
  7483  003BBA  6E93               	movwf	3987,c	;volatile
  7484                           
  7485                           ;pin_manager.c: 14: ANSELB = 0x34;
  7486  003BBC  0E34               	movlw	52
  7487  003BBE  010F               	movlb	15	; () banked
  7488  003BC0  6F39               	movwf	57,b	;volatile
  7489                           
  7490                           ;pin_manager.c: 15: WPUB = 0x00;
  7491  003BC2  0E00               	movlw	0
  7492  003BC4  6E61               	movwf	3937,c	;volatile
  7493                           
  7494                           ;pin_manager.c: 17: LATC = 0x08;
  7495  003BC6  0E08               	movlw	8
  7496  003BC8  6E8B               	movwf	3979,c	;volatile
  7497                           
  7498                           ;pin_manager.c: 18: TRISC = 0xC4;
  7499  003BCA  0EC4               	movlw	196
  7500  003BCC  6E94               	movwf	3988,c	;volatile
  7501                           
  7502                           ;pin_manager.c: 19: ANSELC = 0x04;
  7503  003BCE  0E04               	movlw	4
  7504  003BD0  010F               	movlb	15	; () banked
  7505  003BD2  6F3A               	movwf	58,b	;volatile
  7506                           
  7507                           ;pin_manager.c: 21: LATD = 0x00;
  7508  003BD4  0E00               	movlw	0
  7509  003BD6  6E8C               	movwf	3980,c	;volatile
  7510                           
  7511                           ;pin_manager.c: 22: TRISD = 0xD1;
  7512  003BD8  0ED1               	movlw	209
  7513  003BDA  6E95               	movwf	3989,c	;volatile
  7514                           
  7515                           ;pin_manager.c: 23: ANSELD = 0xD1;
  7516  003BDC  0ED1               	movlw	209
  7517  003BDE  010F               	movlb	15	; () banked
  7518  003BE0  6F3B               	movwf	59,b	;volatile
  7519                           
  7520                           ;pin_manager.c: 25: LATE = 0x00;
  7521  003BE2  0E00               	movlw	0
  7522  003BE4  6E8D               	movwf	3981,c	;volatile
  7523                           
  7524                           ;pin_manager.c: 26: TRISE = 0x05;
  7525  003BE6  0E05               	movlw	5
  7526  003BE8  6E96               	movwf	3990,c	;volatile
  7527                           
  7528                           ;pin_manager.c: 27: ANSELE = 0x05;
  7529  003BEA  0E05               	movlw	5
  7530  003BEC  010F               	movlb	15	; () banked
  7531  003BEE  6F3C               	movwf	60,b	;volatile
  7532                           
  7533                           ; BSR set to: 15
  7534                           ;pin_manager.c: 29: INTCON2bits.nRBPU = 0x01;
  7535  003BF0  8EF1               	bsf	intcon2,7,c	;volatile
  7536                           
  7537                           ; BSR set to: 15
  7538  003BF2  0012               	return	
  7539  003BF4                     __end_of_PIN_MANAGER_Initialize:
  7540                           	opt stack 0
  7541                           tblptru	equ	0xFF8
  7542                           tblptrh	equ	0xFF7
  7543                           tblptrl	equ	0xFF6
  7544                           tablat	equ	0xFF5
  7545                           prodh	equ	0xFF4
  7546                           prodl	equ	0xFF3
  7547                           intcon	equ	0xFF2
  7548                           intcon2	equ	0xFF1
  7549                           postinc0	equ	0xFEE
  7550                           wreg	equ	0xFE8
  7551                           postinc1	equ	0xFE6
  7552                           postdec1	equ	0xFE5
  7553                           fsr1h	equ	0xFE2
  7554                           fsr1l	equ	0xFE1
  7555                           indf2	equ	0xFDF
  7556                           postinc2	equ	0xFDE
  7557                           postdec2	equ	0xFDD
  7558                           fsr2h	equ	0xFDA
  7559                           fsr2l	equ	0xFD9
  7560                           status	equ	0xFD8
  7561                           
  7562 ;; *************** function _OSCILLATOR_Initialize *****************
  7563 ;; Defined at:
  7564 ;;		line 122 in file "mcc_generated_files/mcc.c"
  7565 ;; Parameters:    Size  Location     Type
  7566 ;;		None
  7567 ;; Auto vars:     Size  Location     Type
  7568 ;;		None
  7569 ;; Return value:  Size  Location     Type
  7570 ;;		None               void
  7571 ;; Registers used:
  7572 ;;		wreg, status,2
  7573 ;; Tracked objects:
  7574 ;;		On entry : 0/0
  7575 ;;		On exit  : 0/0
  7576 ;;		Unchanged: 0/0
  7577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7578 ;;      Params:         0       0       0       0       0       0       0
  7579 ;;      Locals:         0       0       0       0       0       0       0
  7580 ;;      Temps:          0       0       0       0       0       0       0
  7581 ;;      Totals:         0       0       0       0       0       0       0
  7582 ;;Total ram usage:        0 bytes
  7583 ;; Hardware stack levels used:    1
  7584 ;; Hardware stack levels required when called:    4
  7585 ;; This function calls:
  7586 ;;		Nothing
  7587 ;; This function is called by:
  7588 ;;		_SYSTEM_Initialize
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           	psect	text28
  7593  003F00                     __ptext28:
  7594                           	opt stack 0
  7595  003F00                     _OSCILLATOR_Initialize:
  7596                           	opt stack 25
  7597                           
  7598                           ;mcc.c: 125: OSCCON = 0x62;
  7599                           
  7600                           ; BSR set to: 15
  7601                           ;incstack = 0
  7602  003F00  0E62               	movlw	98
  7603  003F02  6ED3               	movwf	4051,c	;volatile
  7604                           
  7605                           ;mcc.c: 127: OSCCON2 = 0x04;
  7606  003F04  0E04               	movlw	4
  7607  003F06  6ED2               	movwf	4050,c	;volatile
  7608                           
  7609                           ;mcc.c: 129: OSCTUNE = 0x00;
  7610  003F08  0E00               	movlw	0
  7611  003F0A  6E9B               	movwf	3995,c	;volatile
  7612  003F0C  0012               	return	
  7613  003F0E                     __end_of_OSCILLATOR_Initialize:
  7614                           	opt stack 0
  7615                           tblptru	equ	0xFF8
  7616                           tblptrh	equ	0xFF7
  7617                           tblptrl	equ	0xFF6
  7618                           tablat	equ	0xFF5
  7619                           prodh	equ	0xFF4
  7620                           prodl	equ	0xFF3
  7621                           intcon	equ	0xFF2
  7622                           intcon2	equ	0xFF1
  7623                           postinc0	equ	0xFEE
  7624                           wreg	equ	0xFE8
  7625                           postinc1	equ	0xFE6
  7626                           postdec1	equ	0xFE5
  7627                           fsr1h	equ	0xFE2
  7628                           fsr1l	equ	0xFE1
  7629                           indf2	equ	0xFDF
  7630                           postinc2	equ	0xFDE
  7631                           postdec2	equ	0xFDD
  7632                           fsr2h	equ	0xFDA
  7633                           fsr2l	equ	0xFD9
  7634                           status	equ	0xFD8
  7635                           
  7636 ;; *************** function _INTERRUPT_Initialize *****************
  7637 ;; Defined at:
  7638 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;		None
  7641 ;; Auto vars:     Size  Location     Type
  7642 ;;		None
  7643 ;; Return value:  Size  Location     Type
  7644 ;;		None               void
  7645 ;; Registers used:
  7646 ;;		None
  7647 ;; Tracked objects:
  7648 ;;		On entry : 0/0
  7649 ;;		On exit  : 0/0
  7650 ;;		Unchanged: 0/0
  7651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7652 ;;      Params:         0       0       0       0       0       0       0
  7653 ;;      Locals:         0       0       0       0       0       0       0
  7654 ;;      Temps:          0       0       0       0       0       0       0
  7655 ;;      Totals:         0       0       0       0       0       0       0
  7656 ;;Total ram usage:        0 bytes
  7657 ;; Hardware stack levels used:    1
  7658 ;; Hardware stack levels required when called:    4
  7659 ;; This function calls:
  7660 ;;		Nothing
  7661 ;; This function is called by:
  7662 ;;		_SYSTEM_Initialize
  7663 ;; This function uses a non-reentrant model
  7664 ;;
  7665                           
  7666                           	psect	text29
  7667  003F0E                     __ptext29:
  7668                           	opt stack 0
  7669  003F0E                     _INTERRUPT_Initialize:
  7670                           	opt stack 25
  7671                           
  7672                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  7673                           
  7674                           ;incstack = 0
  7675  003F0E  9ED0               	bcf	4048,7,c	;volatile
  7676                           
  7677                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  7678  003F10  9A9F               	bcf	3999,5,c	;volatile
  7679                           
  7680                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  7681  003F12  9C9F               	bcf	3999,6,c	;volatile
  7682                           
  7683                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  7684  003F14  909F               	bcf	3999,0,c	;volatile
  7685                           
  7686                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  7687  003F16  989F               	bcf	3999,4,c	;volatile
  7688  003F18  0012               	return	
  7689  003F1A                     __end_of_INTERRUPT_Initialize:
  7690                           	opt stack 0
  7691                           tblptru	equ	0xFF8
  7692                           tblptrh	equ	0xFF7
  7693                           tblptrl	equ	0xFF6
  7694                           tablat	equ	0xFF5
  7695                           prodh	equ	0xFF4
  7696                           prodl	equ	0xFF3
  7697                           intcon	equ	0xFF2
  7698                           intcon2	equ	0xFF1
  7699                           postinc0	equ	0xFEE
  7700                           wreg	equ	0xFE8
  7701                           postinc1	equ	0xFE6
  7702                           postdec1	equ	0xFE5
  7703                           fsr1h	equ	0xFE2
  7704                           fsr1l	equ	0xFE1
  7705                           indf2	equ	0xFDF
  7706                           postinc2	equ	0xFDE
  7707                           postdec2	equ	0xFDD
  7708                           fsr2h	equ	0xFDA
  7709                           fsr2l	equ	0xFD9
  7710                           status	equ	0xFD8
  7711                           
  7712 ;; *************** function _EUSART1_Initialize *****************
  7713 ;; Defined at:
  7714 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;		None
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;		None
  7719 ;; Return value:  Size  Location     Type
  7720 ;;		None               void
  7721 ;; Registers used:
  7722 ;;		wreg, status,2
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7728 ;;      Params:         0       0       0       0       0       0       0
  7729 ;;      Locals:         0       0       0       0       0       0       0
  7730 ;;      Temps:          0       0       0       0       0       0       0
  7731 ;;      Totals:         0       0       0       0       0       0       0
  7732 ;;Total ram usage:        0 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; Hardware stack levels required when called:    4
  7735 ;; This function calls:
  7736 ;;		Nothing
  7737 ;; This function is called by:
  7738 ;;		_SYSTEM_Initialize
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           	psect	text30
  7743  003C78                     __ptext30:
  7744                           	opt stack 0
  7745  003C78                     _EUSART1_Initialize:
  7746                           	opt stack 25
  7747                           
  7748                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  7749                           
  7750                           ;incstack = 0
  7751  003C78  9A9D               	bcf	3997,5,c	;volatile
  7752                           
  7753                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  7754  003C7A  989D               	bcf	3997,4,c	;volatile
  7755                           
  7756                           ;eusart1.c: 85: BAUD1CON = 0x48;
  7757  003C7C  0E48               	movlw	72
  7758  003C7E  6EB8               	movwf	4024,c	;volatile
  7759                           
  7760                           ;eusart1.c: 88: RC1STA = 0x98;
  7761  003C80  0E98               	movlw	152
  7762  003C82  6EAB               	movwf	4011,c	;volatile
  7763                           
  7764                           ;eusart1.c: 91: TX1STA = 0x26;
  7765  003C84  0E26               	movlw	38
  7766  003C86  6EAC               	movwf	4012,c	;volatile
  7767                           
  7768                           ;eusart1.c: 94: SPBRG1 = 0x22;
  7769  003C88  0E22               	movlw	34
  7770  003C8A  6EAF               	movwf	4015,c	;volatile
  7771                           
  7772                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  7773  003C8C  0E00               	movlw	0
  7774  003C8E  6EB0               	movwf	4016,c	;volatile
  7775                           
  7776                           ;eusart1.c: 100: TXREG1 = 0x00;
  7777  003C90  0E00               	movlw	0
  7778  003C92  6EAD               	movwf	4013,c	;volatile
  7779                           
  7780                           ;eusart1.c: 103: RCREG1 = 0x00;
  7781  003C94  0E00               	movlw	0
  7782  003C96  6EAE               	movwf	4014,c	;volatile
  7783                           
  7784                           ;eusart1.c: 107: eusart1TxHead = 0;
  7785  003C98  0E00               	movlw	0
  7786  003C9A  6E41               	movwf	_eusart1TxHead,c
  7787                           
  7788                           ;eusart1.c: 108: eusart1TxTail = 0;
  7789  003C9C  0E00               	movlw	0
  7790  003C9E  6E42               	movwf	_eusart1TxTail,c
  7791                           
  7792                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  7793  003CA0  0E08               	movlw	8
  7794  003CA2  6E45               	movwf	_eusart1TxBufferRemaining,c	;volatile
  7795                           
  7796                           ;eusart1.c: 111: eusart1RxHead = 0;
  7797  003CA4  0E00               	movlw	0
  7798  003CA6  6E3F               	movwf	_eusart1RxHead,c
  7799                           
  7800                           ;eusart1.c: 112: eusart1RxTail = 0;
  7801  003CA8  0E00               	movlw	0
  7802  003CAA  6E40               	movwf	_eusart1RxTail,c
  7803                           
  7804                           ;eusart1.c: 113: eusart1RxCount = 0;
  7805  003CAC  0E00               	movlw	0
  7806  003CAE  6E3E               	movwf	_eusart1RxCount,c	;volatile
  7807                           
  7808                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  7809  003CB0  8A9D               	bsf	3997,5,c	;volatile
  7810  003CB2  0012               	return	
  7811  003CB4                     __end_of_EUSART1_Initialize:
  7812                           	opt stack 0
  7813                           tblptru	equ	0xFF8
  7814                           tblptrh	equ	0xFF7
  7815                           tblptrl	equ	0xFF6
  7816                           tablat	equ	0xFF5
  7817                           prodh	equ	0xFF4
  7818                           prodl	equ	0xFF3
  7819                           intcon	equ	0xFF2
  7820                           intcon2	equ	0xFF1
  7821                           postinc0	equ	0xFEE
  7822                           wreg	equ	0xFE8
  7823                           postinc1	equ	0xFE6
  7824                           postdec1	equ	0xFE5
  7825                           fsr1h	equ	0xFE2
  7826                           fsr1l	equ	0xFE1
  7827                           indf2	equ	0xFDF
  7828                           postinc2	equ	0xFDE
  7829                           postdec2	equ	0xFDD
  7830                           fsr2h	equ	0xFDA
  7831                           fsr2l	equ	0xFD9
  7832                           status	equ	0xFD8
  7833                           
  7834 ;; *************** function _ADC_Initialize *****************
  7835 ;; Defined at:
  7836 ;;		line 13 in file "mcc_generated_files/adc.c"
  7837 ;; Parameters:    Size  Location     Type
  7838 ;;		None
  7839 ;; Auto vars:     Size  Location     Type
  7840 ;;		None
  7841 ;; Return value:  Size  Location     Type
  7842 ;;		None               void
  7843 ;; Registers used:
  7844 ;;		wreg, status,2
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7850 ;;      Params:         0       0       0       0       0       0       0
  7851 ;;      Locals:         0       0       0       0       0       0       0
  7852 ;;      Temps:          0       0       0       0       0       0       0
  7853 ;;      Totals:         0       0       0       0       0       0       0
  7854 ;;Total ram usage:        0 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:    4
  7857 ;; This function calls:
  7858 ;;		Nothing
  7859 ;; This function is called by:
  7860 ;;		_SYSTEM_Initialize
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text31
  7865  003EA4                     __ptext31:
  7866                           	opt stack 0
  7867  003EA4                     _ADC_Initialize:
  7868                           	opt stack 25
  7869                           
  7870                           ;adc.c: 18: ADCON0 = 0x01;
  7871                           
  7872                           ;incstack = 0
  7873  003EA4  0E01               	movlw	1
  7874  003EA6  6EC2               	movwf	4034,c	;volatile
  7875                           
  7876                           ;adc.c: 21: ADCON1 = 0x80;
  7877  003EA8  0E80               	movlw	128
  7878  003EAA  6EC1               	movwf	4033,c	;volatile
  7879                           
  7880                           ;adc.c: 24: ADCON2 = 0xA9;
  7881  003EAC  0EA9               	movlw	169
  7882  003EAE  6EC0               	movwf	4032,c	;volatile
  7883                           
  7884                           ;adc.c: 27: ADRESL = 0x00;
  7885  003EB0  0E00               	movlw	0
  7886  003EB2  6EC3               	movwf	4035,c	;volatile
  7887                           
  7888                           ;adc.c: 30: ADRESH = 0x00;
  7889  003EB4  0E00               	movlw	0
  7890  003EB6  6EC4               	movwf	4036,c	;volatile
  7891                           
  7892                           ;adc.c: 33: PIE1bits.ADIE = 1;
  7893  003EB8  8C9D               	bsf	3997,6,c	;volatile
  7894  003EBA  0012               	return	
  7895  003EBC                     __end_of_ADC_Initialize:
  7896                           	opt stack 0
  7897                           tblptru	equ	0xFF8
  7898                           tblptrh	equ	0xFF7
  7899                           tblptrl	equ	0xFF6
  7900                           tablat	equ	0xFF5
  7901                           prodh	equ	0xFF4
  7902                           prodl	equ	0xFF3
  7903                           intcon	equ	0xFF2
  7904                           intcon2	equ	0xFF1
  7905                           postinc0	equ	0xFEE
  7906                           wreg	equ	0xFE8
  7907                           postinc1	equ	0xFE6
  7908                           postdec1	equ	0xFE5
  7909                           fsr1h	equ	0xFE2
  7910                           fsr1l	equ	0xFE1
  7911                           indf2	equ	0xFDF
  7912                           postinc2	equ	0xFDE
  7913                           postdec2	equ	0xFDD
  7914                           fsr2h	equ	0xFDA
  7915                           fsr2l	equ	0xFD9
  7916                           status	equ	0xFD8
  7917                           
  7918 ;; *************** function _RunBypas *****************
  7919 ;; Defined at:
  7920 ;;		line 129 in file "Bypass.c"
  7921 ;; Parameters:    Size  Location     Type
  7922 ;;		None
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  batvolt         3   11[BANK0 ] float 
  7925 ;;  i               2   14[BANK0 ] int 
  7926 ;;  cellbyp         2    9[BANK0 ] int 
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  2  456[COMRAM] int 
  7929 ;; Registers used:
  7930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7936 ;;      Params:         0       0       0       0       0       0       0
  7937 ;;      Locals:         0       7       0       0       0       0       0
  7938 ;;      Temps:          0       0       0       0       0       0       0
  7939 ;;      Totals:         0       7       0       0       0       0       0
  7940 ;;Total ram usage:        7 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    6
  7943 ;; This function calls:
  7944 ;;		_Battery_Get
  7945 ;;		_SetBypass
  7946 ;;		___ftge
  7947 ;; This function is called by:
  7948 ;;		_main
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text32
  7953  00333C                     __ptext32:
  7954                           	opt stack 0
  7955  00333C                     _RunBypas:
  7956                           	opt stack 24
  7957                           
  7958                           ;Bypass.c: 131: int cellbyp = 0;
  7959                           
  7960                           ;incstack = 0
  7961  00333C  0E00               	movlw	0
  7962  00333E  0100               	movlb	0	; () banked
  7963  003340  6F6A               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  7964  003342  0E00               	movlw	0
  7965  003344  0100               	movlb	0	; () banked
  7966  003346  6F69               	movwf	RunBypas@cellbyp& (0+255),b
  7967                           
  7968                           ;Bypass.c: 132: int i = 0;
  7969  003348  0E00               	movlw	0
  7970  00334A  0100               	movlb	0	; () banked
  7971  00334C  6F6F               	movwf	(RunBypas@i+1)& (0+255),b
  7972  00334E  0E00               	movlw	0
  7973  003350  0100               	movlb	0	; () banked
  7974  003352  6F6E               	movwf	RunBypas@i& (0+255),b
  7975                           
  7976                           ;Bypass.c: 133: float batvolt = 0;
  7977  003354  0E00               	movlw	0
  7978  003356  0100               	movlb	0	; () banked
  7979  003358  6F6B               	movwf	RunBypas@batvolt& (0+255),b
  7980  00335A  0E00               	movlw	0
  7981  00335C  0100               	movlb	0	; () banked
  7982  00335E  6F6C               	movwf	(RunBypas@batvolt+1)& (0+255),b
  7983  003360  0E00               	movlw	0
  7984  003362  0100               	movlb	0	; () banked
  7985  003364  6F6D               	movwf	(RunBypas@batvolt+2)& (0+255),b
  7986                           
  7987                           ;Bypass.c: 135: for(i = 0; i<9;i++)
  7988  003366  0E00               	movlw	0
  7989  003368  0100               	movlb	0	; () banked
  7990  00336A  6F6F               	movwf	(RunBypas@i+1)& (0+255),b
  7991  00336C  0E00               	movlw	0
  7992  00336E  0100               	movlb	0	; () banked
  7993  003370  6F6E               	movwf	RunBypas@i& (0+255),b
  7994  003372                     
  7995                           ; BSR set to: 0
  7996  003372  0100               	movlb	0	; () banked
  7997  003374  516F               	movf	(RunBypas@i+1)& (0+255),w,b
  7998  003376  0A80               	xorlw	128
  7999  003378  0F80               	addlw	-128
  8000  00337A  0E09               	movlw	9
  8001  00337C  B4D8               	btfsc	status,2,c
  8002  00337E  5D6E               	subwf	RunBypas@i& (0+255),w,b
  8003  003380  B0D8               	btfsc	status,0,c
  8004  003382  0012               	return	
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;Bypass.c: 136: {
  8008                           ;Bypass.c: 137: batvolt = Battery_Get(i);
  8009                           
  8010                           ; BSR set to: 0
  8011                           
  8012                           ; BSR set to: 0
  8013  003384  C06E  F060         	movff	RunBypas@i,Battery_Get@channelnum
  8014  003388  C06F  F061         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  8015  00338C  EC77  F01E         	call	_Battery_Get	;wreg free
  8016  003390  C060  F06B         	movff	?_Battery_Get,RunBypas@batvolt
  8017  003394  C061  F06C         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  8018  003398  C062  F06D         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  8019                           
  8020                           ;Bypass.c: 139: if(batvolt >= 4.18)
  8021  00339C  C06B  F060         	movff	RunBypas@batvolt,___ftge@ff1
  8022  0033A0  C06C  F061         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  8023  0033A4  C06D  F062         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  8024  0033A8  0EC3               	movlw	195
  8025  0033AA  0100               	movlb	0	; () banked
  8026  0033AC  6F63               	movwf	___ftge@ff2& (0+255),b
  8027  0033AE  0E85               	movlw	133
  8028  0033B0  0100               	movlb	0	; () banked
  8029  0033B2  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  8030  0033B4  0E40               	movlw	64
  8031  0033B6  0100               	movlb	0	; () banked
  8032  0033B8  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  8033  0033BA  EC12  F01A         	call	___ftge	;wreg free
  8034  0033BE  A0D8               	btfss	status,0,c
  8035  0033C0  D010               	goto	l5708
  8036                           
  8037                           ;Bypass.c: 140: {
  8038                           ;Bypass.c: 141: SetBypass(i,1);
  8039  0033C2  C06E  F01B         	movff	RunBypas@i,SetBypass@pin
  8040  0033C6  C06F  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8041  0033CA  0E00               	movlw	0
  8042  0033CC  6E1E               	movwf	SetBypass@state+1,c
  8043  0033CE  0E01               	movlw	1
  8044  0033D0  6E1D               	movwf	SetBypass@state,c
  8045  0033D2  EC25  F019         	call	_SetBypass	;wreg free
  8046                           
  8047                           ;Bypass.c: 142: cellbyp = 1;
  8048  0033D6  0E00               	movlw	0
  8049  0033D8  0100               	movlb	0	; () banked
  8050  0033DA  6F6A               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  8051  0033DC  0E01               	movlw	1
  8052  0033DE  0100               	movlb	0	; () banked
  8053  0033E0  6F69               	movwf	RunBypas@cellbyp& (0+255),b
  8054  0033E2                     l5708:
  8055                           
  8056                           ;Bypass.c: 143: }
  8057                           ;Bypass.c: 144: if(batvolt <= 4.15)
  8058  0033E2  0ECD               	movlw	205
  8059  0033E4  0100               	movlb	0	; () banked
  8060  0033E6  6F60               	movwf	___ftge@ff1& (0+255),b
  8061  0033E8  0E84               	movlw	132
  8062  0033EA  0100               	movlb	0	; () banked
  8063  0033EC  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  8064  0033EE  0E40               	movlw	64
  8065  0033F0  0100               	movlb	0	; () banked
  8066  0033F2  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  8067  0033F4  C06B  F063         	movff	RunBypas@batvolt,___ftge@ff2
  8068  0033F8  C06C  F064         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  8069  0033FC  C06D  F065         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  8070  003400  EC12  F01A         	call	___ftge	;wreg free
  8071  003404  A0D8               	btfss	status,0,c
  8072  003406  D00A               	goto	l5712
  8073                           
  8074                           ;Bypass.c: 145: {
  8075                           ;Bypass.c: 146: SetBypass(i,0);
  8076  003408  C06E  F01B         	movff	RunBypas@i,SetBypass@pin
  8077  00340C  C06F  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8078  003410  0E00               	movlw	0
  8079  003412  6E1E               	movwf	SetBypass@state+1,c
  8080  003414  0E00               	movlw	0
  8081  003416  6E1D               	movwf	SetBypass@state,c
  8082  003418  EC25  F019         	call	_SetBypass	;wreg free
  8083  00341C                     l5712:
  8084  00341C  0100               	movlb	0	; () banked
  8085  00341E  4B6E               	infsnz	RunBypas@i& (0+255),f,b
  8086  003420  2B6F               	incf	(RunBypas@i+1)& (0+255),f,b
  8087  003422  D7A7               	goto	L11
  8088  003424                     __end_of_RunBypas:
  8089                           	opt stack 0
  8090                           tblptru	equ	0xFF8
  8091                           tblptrh	equ	0xFF7
  8092                           tblptrl	equ	0xFF6
  8093                           tablat	equ	0xFF5
  8094                           prodh	equ	0xFF4
  8095                           prodl	equ	0xFF3
  8096                           intcon	equ	0xFF2
  8097                           intcon2	equ	0xFF1
  8098                           postinc0	equ	0xFEE
  8099                           wreg	equ	0xFE8
  8100                           postinc1	equ	0xFE6
  8101                           postdec1	equ	0xFE5
  8102                           fsr1h	equ	0xFE2
  8103                           fsr1l	equ	0xFE1
  8104                           indf2	equ	0xFDF
  8105                           postinc2	equ	0xFDE
  8106                           postdec2	equ	0xFDD
  8107                           fsr2h	equ	0xFDA
  8108                           fsr2l	equ	0xFD9
  8109                           status	equ	0xFD8
  8110                           
  8111 ;; *************** function _SetBypass *****************
  8112 ;; Defined at:
  8113 ;;		line 18 in file "Bypass.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;  pin             2   26[COMRAM] int 
  8116 ;;  state           2   28[COMRAM] int 
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  2   26[COMRAM] int 
  8121 ;; Registers used:
  8122 ;;		wreg, status,2, status,0
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8128 ;;      Params:         4       0       0       0       0       0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0
  8130 ;;      Temps:          2       0       0       0       0       0       0
  8131 ;;      Totals:         6       0       0       0       0       0       0
  8132 ;;Total ram usage:        6 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    4
  8135 ;; This function calls:
  8136 ;;		Nothing
  8137 ;; This function is called by:
  8138 ;;		_RunBypas
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           	psect	text33
  8143  00324A                     __ptext33:
  8144                           	opt stack 0
  8145  00324A                     _SetBypass:
  8146                           	opt stack 25
  8147                           
  8148                           ;Bypass.c: 20: switch (pin) {
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;incstack = 0
  8152  00324A  D050               	goto	l4944
  8153  00324C                     l4922:
  8154                           
  8155                           ;Bypass.c: 22: if (state)
  8156  00324C  501E               	movf	SetBypass@state+1,w,c
  8157  00324E  101D               	iorwf	SetBypass@state,w,c
  8158  003250  B4D8               	btfsc	status,2,c
  8159  003252  D002               	goto	l501
  8160                           
  8161                           ;Bypass.c: 23: {
  8162                           ;Bypass.c: 24: do { LATC5 = 1; } while(0);
  8163  003254  8A8B               	bsf	3979,5,c	;volatile
  8164  003256  0012               	return	
  8165  003258                     l501:
  8166  003258  9A8B               	bcf	3979,5,c	;volatile
  8167  00325A  0012               	return	
  8168  00325C                     l4924:
  8169                           
  8170                           ;Bypass.c: 32: if (state)
  8171  00325C  501E               	movf	SetBypass@state+1,w,c
  8172  00325E  101D               	iorwf	SetBypass@state,w,c
  8173  003260  B4D8               	btfsc	status,2,c
  8174  003262  D002               	goto	l509
  8175                           
  8176                           ;Bypass.c: 33: {
  8177                           ;Bypass.c: 34: do { LATC4 = 1; } while(0);
  8178  003264  888B               	bsf	3979,4,c	;volatile
  8179  003266  0012               	return	
  8180  003268                     l509:
  8181  003268  988B               	bcf	3979,4,c	;volatile
  8182  00326A  0012               	return	
  8183  00326C                     l4926:
  8184                           
  8185                           ;Bypass.c: 42: if (state)
  8186  00326C  501E               	movf	SetBypass@state+1,w,c
  8187  00326E  101D               	iorwf	SetBypass@state,w,c
  8188  003270  B4D8               	btfsc	status,2,c
  8189  003272  D002               	goto	l516
  8190                           
  8191                           ;Bypass.c: 43: {
  8192                           ;Bypass.c: 44: do { LATD3 = 1; } while(0);
  8193  003274  868C               	bsf	3980,3,c	;volatile
  8194  003276  0012               	return	
  8195  003278                     l516:
  8196  003278  968C               	bcf	3980,3,c	;volatile
  8197  00327A  0012               	return	
  8198  00327C                     l4928:
  8199                           
  8200                           ;Bypass.c: 52: if (state)
  8201  00327C  501E               	movf	SetBypass@state+1,w,c
  8202  00327E  101D               	iorwf	SetBypass@state,w,c
  8203  003280  B4D8               	btfsc	status,2,c
  8204  003282  D002               	goto	l523
  8205                           
  8206                           ;Bypass.c: 53: {
  8207                           ;Bypass.c: 54: do { LATD2 = 1; } while(0);
  8208  003284  848C               	bsf	3980,2,c	;volatile
  8209  003286  0012               	return	
  8210  003288                     l523:
  8211  003288  948C               	bcf	3980,2,c	;volatile
  8212  00328A  0012               	return	
  8213  00328C                     l4930:
  8214                           
  8215                           ;Bypass.c: 62: if (state)
  8216  00328C  501E               	movf	SetBypass@state+1,w,c
  8217  00328E  101D               	iorwf	SetBypass@state,w,c
  8218  003290  B4D8               	btfsc	status,2,c
  8219  003292  D002               	goto	l530
  8220                           
  8221                           ;Bypass.c: 63: {
  8222                           ;Bypass.c: 64: do { LATD1 = 1; } while(0);
  8223  003294  828C               	bsf	3980,1,c	;volatile
  8224  003296  0012               	return	
  8225  003298                     l530:
  8226  003298  928C               	bcf	3980,1,c	;volatile
  8227  00329A  0012               	return	
  8228  00329C                     l4932:
  8229                           
  8230                           ;Bypass.c: 72: if (state)
  8231  00329C  501E               	movf	SetBypass@state+1,w,c
  8232  00329E  101D               	iorwf	SetBypass@state,w,c
  8233  0032A0  B4D8               	btfsc	status,2,c
  8234  0032A2  D002               	goto	l537
  8235                           
  8236                           ;Bypass.c: 73: {
  8237                           ;Bypass.c: 74: do { LATD5 = 1; } while(0);
  8238  0032A4  8A8C               	bsf	3980,5,c	;volatile
  8239  0032A6  0012               	return	
  8240  0032A8                     l537:
  8241  0032A8  9A8C               	bcf	3980,5,c	;volatile
  8242  0032AA  0012               	return	
  8243  0032AC                     l4934:
  8244                           
  8245                           ;Bypass.c: 82: if (state)
  8246  0032AC  501E               	movf	SetBypass@state+1,w,c
  8247  0032AE  101D               	iorwf	SetBypass@state,w,c
  8248  0032B0  B4D8               	btfsc	status,2,c
  8249  0032B2  D002               	goto	l544
  8250                           
  8251                           ;Bypass.c: 83: {
  8252                           ;Bypass.c: 84: do { LATB0 = 1; } while(0);
  8253  0032B4  808A               	bsf	3978,0,c	;volatile
  8254  0032B6  0012               	return	
  8255  0032B8                     l544:
  8256  0032B8  908A               	bcf	3978,0,c	;volatile
  8257  0032BA  0012               	return	
  8258  0032BC                     l4936:
  8259                           
  8260                           ;Bypass.c: 92: if (state)
  8261  0032BC  501E               	movf	SetBypass@state+1,w,c
  8262  0032BE  101D               	iorwf	SetBypass@state,w,c
  8263  0032C0  B4D8               	btfsc	status,2,c
  8264  0032C2  D002               	goto	l551
  8265                           
  8266                           ;Bypass.c: 93: {
  8267                           ;Bypass.c: 94: do { LATB1 = 1; } while(0);
  8268  0032C4  828A               	bsf	3978,1,c	;volatile
  8269  0032C6  0012               	return	
  8270  0032C8                     l551:
  8271  0032C8  928A               	bcf	3978,1,c	;volatile
  8272  0032CA  0012               	return	
  8273  0032CC                     l4938:
  8274                           
  8275                           ;Bypass.c: 102: if (state)
  8276  0032CC  501E               	movf	SetBypass@state+1,w,c
  8277  0032CE  101D               	iorwf	SetBypass@state,w,c
  8278  0032D0  B4D8               	btfsc	status,2,c
  8279  0032D2  D002               	goto	l558
  8280                           
  8281                           ;Bypass.c: 103: {
  8282                           ;Bypass.c: 104: do { LATB3 = 1; } while(0);
  8283  0032D4  868A               	bsf	3978,3,c	;volatile
  8284  0032D6  0012               	return	
  8285  0032D8                     l558:
  8286  0032D8  968A               	bcf	3978,3,c	;volatile
  8287  0032DA  0012               	return	
  8288  0032DC                     l4940:
  8289                           
  8290                           ;Bypass.c: 112: if (state)
  8291  0032DC  501E               	movf	SetBypass@state+1,w,c
  8292  0032DE  101D               	iorwf	SetBypass@state,w,c
  8293  0032E0  B4D8               	btfsc	status,2,c
  8294  0032E2  D002               	goto	l565
  8295                           
  8296                           ;Bypass.c: 113: {
  8297                           ;Bypass.c: 114: do { LATA0 = 1; } while(0);
  8298  0032E4  8089               	bsf	3977,0,c	;volatile
  8299  0032E6  0012               	return	
  8300  0032E8                     l565:
  8301  0032E8  9089               	bcf	3977,0,c	;volatile
  8302  0032EA  0012               	return	
  8303  0032EC                     l4944:
  8304  0032EC  C01B  F01F         	movff	SetBypass@pin,??_SetBypass
  8305  0032F0  C01C  F020         	movff	SetBypass@pin+1,??_SetBypass+1
  8306                           
  8307                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8308                           ; Switch size 1, requested type "space"
  8309                           ; Number of cases is 1, Range of values is 0 to 0
  8310                           ; switch strategies available:
  8311                           ; Name         Instructions Cycles
  8312                           ; simple_byte            4     3 (average)
  8313                           ;	Chosen strategy is simple_byte
  8314  0032F4  5020               	movf	??_SetBypass+1,w,c
  8315  0032F6  0A00               	xorlw	0	; case 0
  8316  0032F8  A4D8               	btfss	status,2,c
  8317  0032FA  0012               	return	
  8318                           
  8319                           ; Switch size 1, requested type "space"
  8320                           ; Number of cases is 10, Range of values is 0 to 9
  8321                           ; switch strategies available:
  8322                           ; Name         Instructions Cycles
  8323                           ; simple_byte           31    16 (average)
  8324                           ;	Chosen strategy is simple_byte
  8325  0032FC  501F               	movf	??_SetBypass,w,c
  8326  0032FE  0A00               	xorlw	0	; case 0
  8327  003300  B4D8               	btfsc	status,2,c
  8328  003302  D7A4               	goto	l4922
  8329  003304  0A01               	xorlw	1	; case 1
  8330  003306  B4D8               	btfsc	status,2,c
  8331  003308  D7A9               	goto	l4924
  8332  00330A  0A03               	xorlw	3	; case 2
  8333  00330C  B4D8               	btfsc	status,2,c
  8334  00330E  D7AE               	goto	l4926
  8335  003310  0A01               	xorlw	1	; case 3
  8336  003312  B4D8               	btfsc	status,2,c
  8337  003314  D7B3               	goto	l4928
  8338  003316  0A07               	xorlw	7	; case 4
  8339  003318  B4D8               	btfsc	status,2,c
  8340  00331A  D7B8               	goto	l4930
  8341  00331C  0A01               	xorlw	1	; case 5
  8342  00331E  B4D8               	btfsc	status,2,c
  8343  003320  D7BD               	goto	l4932
  8344  003322  0A03               	xorlw	3	; case 6
  8345  003324  B4D8               	btfsc	status,2,c
  8346  003326  D7C2               	goto	l4934
  8347  003328  0A01               	xorlw	1	; case 7
  8348  00332A  B4D8               	btfsc	status,2,c
  8349  00332C  D7C7               	goto	l4936
  8350  00332E  0A0F               	xorlw	15	; case 8
  8351  003330  B4D8               	btfsc	status,2,c
  8352  003332  D7CC               	goto	l4938
  8353  003334  0A01               	xorlw	1	; case 9
  8354  003336  A4D8               	btfss	status,2,c
  8355  003338  0012               	return	
  8356  00333A  D7D0               	goto	l4940
  8357  00333C                     __end_of_SetBypass:
  8358                           	opt stack 0
  8359                           tblptru	equ	0xFF8
  8360                           tblptrh	equ	0xFF7
  8361                           tblptrl	equ	0xFF6
  8362                           tablat	equ	0xFF5
  8363                           prodh	equ	0xFF4
  8364                           prodl	equ	0xFF3
  8365                           intcon	equ	0xFF2
  8366                           intcon2	equ	0xFF1
  8367                           postinc0	equ	0xFEE
  8368                           wreg	equ	0xFE8
  8369                           postinc1	equ	0xFE6
  8370                           postdec1	equ	0xFE5
  8371                           fsr1h	equ	0xFE2
  8372                           fsr1l	equ	0xFE1
  8373                           indf2	equ	0xFDF
  8374                           postinc2	equ	0xFDE
  8375                           postdec2	equ	0xFDD
  8376                           fsr2h	equ	0xFDA
  8377                           fsr2l	equ	0xFD9
  8378                           status	equ	0xFD8
  8379                           
  8380 ;; *************** function _Battery_Get *****************
  8381 ;; Defined at:
  8382 ;;		line 93 in file "Battery.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;  channelnum      2    0[BANK0 ] int 
  8385 ;; Auto vars:     Size  Location     Type
  8386 ;;		None
  8387 ;; Return value:  Size  Location     Type
  8388 ;;                  3    0[BANK0 ] float 
  8389 ;; Registers used:
  8390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8391 ;; Tracked objects:
  8392 ;;		On entry : 0/0
  8393 ;;		On exit  : 0/0
  8394 ;;		Unchanged: 0/0
  8395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8396 ;;      Params:         0       3       0       0       0       0       0
  8397 ;;      Locals:         0       0       0       0       0       0       0
  8398 ;;      Temps:          0       0       0       0       0       0       0
  8399 ;;      Totals:         0       3       0       0       0       0       0
  8400 ;;Total ram usage:        3 bytes
  8401 ;; Hardware stack levels used:    1
  8402 ;; Hardware stack levels required when called:    5
  8403 ;; This function calls:
  8404 ;;		___wmul
  8405 ;; This function is called by:
  8406 ;;		_main
  8407 ;;		_RunBypas
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           	psect	text34
  8412  003CEE                     __ptext34:
  8413                           	opt stack 0
  8414  003CEE                     _Battery_Get:
  8415                           	opt stack 24
  8416                           
  8417                           ;Battery.c: 96: return Battery_Volt[channelnum];
  8418                           
  8419                           ;incstack = 0
  8420  003CEE  C060  F029         	movff	Battery_Get@channelnum,___wmul@multiplier
  8421  003CF2  C061  F02A         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  8422  003CF6  0E00               	movlw	0
  8423  003CF8  6E2C               	movwf	___wmul@multiplicand+1,c
  8424  003CFA  0E03               	movlw	3
  8425  003CFC  6E2B               	movwf	___wmul@multiplicand,c
  8426  003CFE  EC04  F01F         	call	___wmul	;wreg free
  8427  003D02  0101               	movlb	1	; () banked
  8428  003D04  0E32               	movlw	low _Battery_Volt
  8429  003D06  2429               	addwf	?___wmul,w,c
  8430  003D08  6ED9               	movwf	fsr2l,c
  8431  003D0A  0101               	movlb	1	; () banked
  8432  003D0C  0E01               	movlw	high _Battery_Volt
  8433  003D0E  202A               	addwfc	?___wmul+1,w,c
  8434  003D10  6EDA               	movwf	fsr2h,c
  8435  003D12  0100               	movlb	0	; () banked
  8436  003D14  CFDE F060          	movff	postinc2,?_Battery_Get
  8437  003D18  0100               	movlb	0	; () banked
  8438  003D1A  CFDE F061          	movff	postinc2,?_Battery_Get+1
  8439  003D1E  0100               	movlb	0	; () banked
  8440  003D20  CFDD F062          	movff	postdec2,?_Battery_Get+2
  8441  003D24  0012               	return	
  8442  003D26                     __end_of_Battery_Get:
  8443                           	opt stack 0
  8444                           tblptru	equ	0xFF8
  8445                           tblptrh	equ	0xFF7
  8446                           tblptrl	equ	0xFF6
  8447                           tablat	equ	0xFF5
  8448                           prodh	equ	0xFF4
  8449                           prodl	equ	0xFF3
  8450                           intcon	equ	0xFF2
  8451                           intcon2	equ	0xFF1
  8452                           postinc0	equ	0xFEE
  8453                           wreg	equ	0xFE8
  8454                           postinc1	equ	0xFE6
  8455                           postdec1	equ	0xFE5
  8456                           fsr1h	equ	0xFE2
  8457                           fsr1l	equ	0xFE1
  8458                           indf2	equ	0xFDF
  8459                           postinc2	equ	0xFDE
  8460                           postdec2	equ	0xFDD
  8461                           fsr2h	equ	0xFDA
  8462                           fsr2l	equ	0xFD9
  8463                           status	equ	0xFD8
  8464                           
  8465 ;; *************** function _Battery_Fault *****************
  8466 ;; Defined at:
  8467 ;;		line 72 in file "Battery.c"
  8468 ;; Parameters:    Size  Location     Type
  8469 ;;		None
  8470 ;; Auto vars:     Size  Location     Type
  8471 ;;  i               2   10[BANK0 ] int 
  8472 ;;  fault           1    9[BANK0 ] unsigned char 
  8473 ;; Return value:  Size  Location     Type
  8474 ;;                  1    wreg      unsigned char 
  8475 ;; Registers used:
  8476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8477 ;; Tracked objects:
  8478 ;;		On entry : 0/0
  8479 ;;		On exit  : 0/0
  8480 ;;		Unchanged: 0/0
  8481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8482 ;;      Params:         0       0       0       0       0       0       0
  8483 ;;      Locals:         0       3       0       0       0       0       0
  8484 ;;      Temps:          0       0       0       0       0       0       0
  8485 ;;      Totals:         0       3       0       0       0       0       0
  8486 ;;Total ram usage:        3 bytes
  8487 ;; Hardware stack levels used:    1
  8488 ;; Hardware stack levels required when called:    5
  8489 ;; This function calls:
  8490 ;;		___ftge
  8491 ;;		___wmul
  8492 ;; This function is called by:
  8493 ;;		_main
  8494 ;; This function uses a non-reentrant model
  8495 ;;
  8496                           
  8497                           	psect	text35
  8498  0034F8                     __ptext35:
  8499                           	opt stack 0
  8500  0034F8                     _Battery_Fault:
  8501                           	opt stack 25
  8502                           
  8503                           ;Battery.c: 74: char fault = 0;
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;incstack = 0
  8507  0034F8  0E00               	movlw	0
  8508  0034FA  0100               	movlb	0	; () banked
  8509  0034FC  6F69               	movwf	Battery_Fault@fault& (0+255),b
  8510                           
  8511                           ;Battery.c: 75: for(int i = 0;i<9;i++)
  8512  0034FE  0E00               	movlw	0
  8513  003500  0100               	movlb	0	; () banked
  8514  003502  6F6B               	movwf	(Battery_Fault@i+1)& (0+255),b
  8515  003504  0E00               	movlw	0
  8516  003506  0100               	movlb	0	; () banked
  8517  003508  6F6A               	movwf	Battery_Fault@i& (0+255),b
  8518  00350A                     
  8519                           ; BSR set to: 0
  8520  00350A  0100               	movlb	0	; () banked
  8521  00350C  516B               	movf	(Battery_Fault@i+1)& (0+255),w,b
  8522  00350E  0A80               	xorlw	128
  8523  003510  0F80               	addlw	-128
  8524  003512  0E09               	movlw	9
  8525  003514  B4D8               	btfsc	status,2,c
  8526  003516  5D6A               	subwf	Battery_Fault@i& (0+255),w,b
  8527  003518  B0D8               	btfsc	status,0,c
  8528  00351A  0012               	return	
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;Battery.c: 76: {
  8532                           ;Battery.c: 77: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  8533                           
  8534                           ; BSR set to: 0
  8535                           
  8536                           ; BSR set to: 0
  8537  00351C  0E00               	movlw	0
  8538  00351E  0100               	movlb	0	; () banked
  8539  003520  6F60               	movwf	___ftge@ff1& (0+255),b
  8540  003522  0E40               	movlw	64
  8541  003524  0100               	movlb	0	; () banked
  8542  003526  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  8543  003528  0E40               	movlw	64
  8544  00352A  0100               	movlb	0	; () banked
  8545  00352C  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  8546  00352E  C06A  F029         	movff	Battery_Fault@i,___wmul@multiplier
  8547  003532  C06B  F02A         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  8548  003536  0E00               	movlw	0
  8549  003538  6E2C               	movwf	___wmul@multiplicand+1,c
  8550  00353A  0E03               	movlw	3
  8551  00353C  6E2B               	movwf	___wmul@multiplicand,c
  8552  00353E  EC04  F01F         	call	___wmul	;wreg free
  8553  003542  0101               	movlb	1	; () banked
  8554  003544  0E32               	movlw	low _Battery_Volt
  8555  003546  2429               	addwf	?___wmul,w,c
  8556  003548  6ED9               	movwf	fsr2l,c
  8557  00354A  0101               	movlb	1	; () banked
  8558  00354C  0E01               	movlw	high _Battery_Volt
  8559  00354E  202A               	addwfc	?___wmul+1,w,c
  8560  003550  6EDA               	movwf	fsr2h,c
  8561  003552  0100               	movlb	0	; () banked
  8562  003554  CFDE F063          	movff	postinc2,___ftge@ff2
  8563  003558  0100               	movlb	0	; () banked
  8564  00355A  CFDE F064          	movff	postinc2,___ftge@ff2+1
  8565  00355E  0100               	movlb	0	; () banked
  8566  003560  CFDD F065          	movff	postdec2,___ftge@ff2+2
  8567  003564  EC12  F01A         	call	___ftge	;wreg free
  8568  003568  B0D8               	btfsc	status,0,c
  8569  00356A  D02B               	goto	l5344
  8570  00356C  C06A  F029         	movff	Battery_Fault@i,___wmul@multiplier
  8571  003570  C06B  F02A         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  8572  003574  0E00               	movlw	0
  8573  003576  6E2C               	movwf	___wmul@multiplicand+1,c
  8574  003578  0E03               	movlw	3
  8575  00357A  6E2B               	movwf	___wmul@multiplicand,c
  8576  00357C  EC04  F01F         	call	___wmul	;wreg free
  8577  003580  0101               	movlb	1	; () banked
  8578  003582  0E32               	movlw	low _Battery_Volt
  8579  003584  2429               	addwf	?___wmul,w,c
  8580  003586  6ED9               	movwf	fsr2l,c
  8581  003588  0101               	movlb	1	; () banked
  8582  00358A  0E01               	movlw	high _Battery_Volt
  8583  00358C  202A               	addwfc	?___wmul+1,w,c
  8584  00358E  6EDA               	movwf	fsr2h,c
  8585  003590  0100               	movlb	0	; () banked
  8586  003592  CFDE F060          	movff	postinc2,___ftge@ff1
  8587  003596  0100               	movlb	0	; () banked
  8588  003598  CFDE F061          	movff	postinc2,___ftge@ff1+1
  8589  00359C  0100               	movlb	0	; () banked
  8590  00359E  CFDD F062          	movff	postdec2,___ftge@ff1+2
  8591  0035A2  0EB8               	movlw	184
  8592  0035A4  0100               	movlb	0	; () banked
  8593  0035A6  6F63               	movwf	___ftge@ff2& (0+255),b
  8594  0035A8  0E86               	movlw	134
  8595  0035AA  0100               	movlb	0	; () banked
  8596  0035AC  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  8597  0035AE  0E40               	movlw	64
  8598  0035B0  0100               	movlb	0	; () banked
  8599  0035B2  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  8600  0035B4  EC12  F01A         	call	___ftge	;wreg free
  8601  0035B8  B0D8               	btfsc	status,0,c
  8602  0035BA  D003               	goto	l5344
  8603                           
  8604                           ;Battery.c: 78: {
  8605                           ;Battery.c: 79: fault = 1;
  8606  0035BC  0E01               	movlw	1
  8607  0035BE  0100               	movlb	0	; () banked
  8608  0035C0  6F69               	movwf	Battery_Fault@fault& (0+255),b
  8609  0035C2                     l5344:
  8610  0035C2  0100               	movlb	0	; () banked
  8611  0035C4  4B6A               	infsnz	Battery_Fault@i& (0+255),f,b
  8612  0035C6  2B6B               	incf	(Battery_Fault@i+1)& (0+255),f,b
  8613  0035C8  D7A0               	goto	L12
  8614  0035CA                     __end_of_Battery_Fault:
  8615                           	opt stack 0
  8616                           tblptru	equ	0xFF8
  8617                           tblptrh	equ	0xFF7
  8618                           tblptrl	equ	0xFF6
  8619                           tablat	equ	0xFF5
  8620                           prodh	equ	0xFF4
  8621                           prodl	equ	0xFF3
  8622                           intcon	equ	0xFF2
  8623                           intcon2	equ	0xFF1
  8624                           postinc0	equ	0xFEE
  8625                           wreg	equ	0xFE8
  8626                           postinc1	equ	0xFE6
  8627                           postdec1	equ	0xFE5
  8628                           fsr1h	equ	0xFE2
  8629                           fsr1l	equ	0xFE1
  8630                           indf2	equ	0xFDF
  8631                           postinc2	equ	0xFDE
  8632                           postdec2	equ	0xFDD
  8633                           fsr2h	equ	0xFDA
  8634                           fsr2l	equ	0xFD9
  8635                           status	equ	0xFD8
  8636                           
  8637 ;; *************** function ___ftge *****************
  8638 ;; Defined at:
  8639 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;  ff1             3    0[BANK0 ] float 
  8642 ;;  ff2             3    3[BANK0 ] float 
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;		None
  8645 ;; Return value:  Size  Location     Type
  8646 ;;		None               void
  8647 ;; Registers used:
  8648 ;;		wreg, status,2, status,0
  8649 ;; Tracked objects:
  8650 ;;		On entry : 0/0
  8651 ;;		On exit  : 0/0
  8652 ;;		Unchanged: 0/0
  8653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8654 ;;      Params:         0       6       0       0       0       0       0
  8655 ;;      Locals:         0       0       0       0       0       0       0
  8656 ;;      Temps:          0       3       0       0       0       0       0
  8657 ;;      Totals:         0       9       0       0       0       0       0
  8658 ;;Total ram usage:        9 bytes
  8659 ;; Hardware stack levels used:    1
  8660 ;; Hardware stack levels required when called:    4
  8661 ;; This function calls:
  8662 ;;		Nothing
  8663 ;; This function is called by:
  8664 ;;		_Battery_Fault
  8665 ;;		_Temp_Fault
  8666 ;;		_RunBypas
  8667 ;;		_printf
  8668 ;; This function uses a non-reentrant model
  8669 ;;
  8670                           
  8671                           	psect	text36
  8672  003424                     __ptext36:
  8673                           	opt stack 0
  8674  003424                     ___ftge:
  8675                           	opt stack 25
  8676                           
  8677                           ; BSR set to: 0
  8678                           ;incstack = 0
  8679  003424  0100               	movlb	0	; () banked
  8680  003426  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8681  003428  D020               	goto	l5206
  8682                           
  8683                           ; BSR set to: 0
  8684  00342A  0100               	movlb	0	; () banked
  8685  00342C  C060  F066         	movff	___ftge@ff1,??___ftge
  8686  003430  0100               	movlb	0	; () banked
  8687  003432  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  8688  003436  0100               	movlb	0	; () banked
  8689  003438  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  8690  00343C  0100               	movlb	0	; () banked
  8691  00343E  1F66               	comf	??___ftge& (0+255),f,b
  8692  003440  1F67               	comf	(??___ftge+1)& (0+255),f,b
  8693  003442  1F68               	comf	(??___ftge+2)& (0+255),f,b
  8694  003444  2B66               	incf	??___ftge& (0+255),f,b
  8695  003446  0E00               	movlw	0
  8696  003448  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  8697  00344A  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  8698  00344C  0E00               	movlw	0
  8699  00344E  0100               	movlb	0	; () banked
  8700  003450  2566               	addwf	??___ftge& (0+255),w,b
  8701  003452  0100               	movlb	0	; () banked
  8702  003454  6F60               	movwf	___ftge@ff1& (0+255),b
  8703  003456  0E00               	movlw	0
  8704  003458  0100               	movlb	0	; () banked
  8705  00345A  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  8706  00345C  0100               	movlb	0	; () banked
  8707  00345E  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  8708  003460  0E80               	movlw	128
  8709  003462  0100               	movlb	0	; () banked
  8710  003464  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  8711  003466  0100               	movlb	0	; () banked
  8712  003468  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  8713  00346A                     l5206:
  8714                           
  8715                           ; BSR set to: 0
  8716  00346A  0100               	movlb	0	; () banked
  8717  00346C  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8718  00346E  D020               	goto	l5210
  8719                           
  8720                           ; BSR set to: 0
  8721  003470  0100               	movlb	0	; () banked
  8722  003472  C063  F066         	movff	___ftge@ff2,??___ftge
  8723  003476  0100               	movlb	0	; () banked
  8724  003478  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  8725  00347C  0100               	movlb	0	; () banked
  8726  00347E  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  8727  003482  0100               	movlb	0	; () banked
  8728  003484  1F66               	comf	??___ftge& (0+255),f,b
  8729  003486  1F67               	comf	(??___ftge+1)& (0+255),f,b
  8730  003488  1F68               	comf	(??___ftge+2)& (0+255),f,b
  8731  00348A  2B66               	incf	??___ftge& (0+255),f,b
  8732  00348C  0E00               	movlw	0
  8733  00348E  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  8734  003490  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  8735  003492  0E00               	movlw	0
  8736  003494  0100               	movlb	0	; () banked
  8737  003496  2566               	addwf	??___ftge& (0+255),w,b
  8738  003498  0100               	movlb	0	; () banked
  8739  00349A  6F63               	movwf	___ftge@ff2& (0+255),b
  8740  00349C  0E00               	movlw	0
  8741  00349E  0100               	movlb	0	; () banked
  8742  0034A0  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  8743  0034A2  0100               	movlb	0	; () banked
  8744  0034A4  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  8745  0034A6  0E80               	movlw	128
  8746  0034A8  0100               	movlb	0	; () banked
  8747  0034AA  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  8748  0034AC  0100               	movlb	0	; () banked
  8749  0034AE  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  8750  0034B0                     l5210:
  8751                           
  8752                           ; BSR set to: 0
  8753  0034B0  0E00               	movlw	0
  8754  0034B2  0100               	movlb	0	; () banked
  8755  0034B4  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  8756  0034B6  0E00               	movlw	0
  8757  0034B8  0100               	movlb	0	; () banked
  8758  0034BA  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8759  0034BC  0E80               	movlw	128
  8760  0034BE  0100               	movlb	0	; () banked
  8761  0034C0  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8762                           
  8763                           ; BSR set to: 0
  8764  0034C2  0E00               	movlw	0
  8765  0034C4  0100               	movlb	0	; () banked
  8766  0034C6  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  8767  0034C8  0E00               	movlw	0
  8768  0034CA  0100               	movlb	0	; () banked
  8769  0034CC  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8770  0034CE  0E80               	movlw	128
  8771  0034D0  0100               	movlb	0	; () banked
  8772  0034D2  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8773  0034D4  0100               	movlb	0	; () banked
  8774  0034D6  5163               	movf	___ftge@ff2& (0+255),w,b
  8775  0034D8  0100               	movlb	0	; () banked
  8776  0034DA  5D60               	subwf	___ftge@ff1& (0+255),w,b
  8777  0034DC  0100               	movlb	0	; () banked
  8778  0034DE  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  8779  0034E0  0100               	movlb	0	; () banked
  8780  0034E2  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8781  0034E4  0100               	movlb	0	; () banked
  8782  0034E6  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  8783  0034E8  0100               	movlb	0	; () banked
  8784  0034EA  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8785  0034EC  B0D8               	btfsc	status,0,c
  8786  0034EE  D002               	goto	l5216
  8787                           
  8788                           ; BSR set to: 0
  8789  0034F0  90D8               	bcf	status,0,c
  8790  0034F2  0012               	return	
  8791  0034F4                     l5216:
  8792                           
  8793                           ; BSR set to: 0
  8794  0034F4  80D8               	bsf	status,0,c
  8795  0034F6  0012               	return	
  8796  0034F8                     __end_of___ftge:
  8797                           	opt stack 0
  8798                           tblptru	equ	0xFF8
  8799                           tblptrh	equ	0xFF7
  8800                           tblptrl	equ	0xFF6
  8801                           tablat	equ	0xFF5
  8802                           prodh	equ	0xFF4
  8803                           prodl	equ	0xFF3
  8804                           intcon	equ	0xFF2
  8805                           intcon2	equ	0xFF1
  8806                           postinc0	equ	0xFEE
  8807                           wreg	equ	0xFE8
  8808                           postinc1	equ	0xFE6
  8809                           postdec1	equ	0xFE5
  8810                           fsr1h	equ	0xFE2
  8811                           fsr1l	equ	0xFE1
  8812                           indf2	equ	0xFDF
  8813                           postinc2	equ	0xFDE
  8814                           postdec2	equ	0xFDD
  8815                           fsr2h	equ	0xFDA
  8816                           fsr2l	equ	0xFD9
  8817                           status	equ	0xFD8
  8818                           
  8819 ;; *************** function _Battery_Convert *****************
  8820 ;; Defined at:
  8821 ;;		line 34 in file "Battery.c"
  8822 ;; Parameters:    Size  Location     Type
  8823 ;;		None
  8824 ;; Auto vars:     Size  Location     Type
  8825 ;;  x               2   53[BANK0 ] int 
  8826 ;; Return value:  Size  Location     Type
  8827 ;;		None               void
  8828 ;; Registers used:
  8829 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8830 ;; Tracked objects:
  8831 ;;		On entry : 0/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8835 ;;      Params:         0       0       0       0       0       0       0
  8836 ;;      Locals:         0       2       0       0       0       0       0
  8837 ;;      Temps:          0       2       0       0       0       0       0
  8838 ;;      Totals:         0       4       0       0       0       0       0
  8839 ;;Total ram usage:        4 bytes
  8840 ;; Hardware stack levels used:    1
  8841 ;; Hardware stack levels required when called:    7
  8842 ;; This function calls:
  8843 ;;		_Battery_Filter
  8844 ;;		___altoft
  8845 ;;		___ftadd
  8846 ;;		___ftdiv
  8847 ;;		___ftmul
  8848 ;;		___wmul
  8849 ;; This function is called by:
  8850 ;;		_main
  8851 ;; This function uses a non-reentrant model
  8852 ;;
  8853                           
  8854                           	psect	text37
  8855  003056                     __ptext37:
  8856                           	opt stack 0
  8857  003056                     _Battery_Convert:
  8858                           	opt stack 23
  8859                           
  8860                           ;Battery.c: 36: int x;
  8861                           ;Battery.c: 37: for(x = 0; x < 9; x++)
  8862                           
  8863                           ; BSR set to: 0
  8864                           ;incstack = 0
  8865  003056  0E00               	movlw	0
  8866  003058  0100               	movlb	0	; () banked
  8867  00305A  6F96               	movwf	(Battery_Convert@x+1)& (0+255),b
  8868  00305C  0E00               	movlw	0
  8869  00305E  0100               	movlb	0	; () banked
  8870  003060  6F95               	movwf	Battery_Convert@x& (0+255),b
  8871  003062                     
  8872                           ; BSR set to: 0
  8873  003062  0100               	movlb	0	; () banked
  8874  003064  5196               	movf	(Battery_Convert@x+1)& (0+255),w,b
  8875  003066  0A80               	xorlw	128
  8876  003068  0F80               	addlw	-128
  8877  00306A  0E09               	movlw	9
  8878  00306C  B4D8               	btfsc	status,2,c
  8879  00306E  5D95               	subwf	Battery_Convert@x& (0+255),w,b
  8880  003070  B0D8               	btfsc	status,0,c
  8881  003072  D06F               	goto	l5330
  8882                           
  8883                           ; BSR set to: 0
  8884                           ;Battery.c: 38: {
  8885                           ;Battery.c: 39: TempBattery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0) + 0.05;
  8886                           
  8887                           ; BSR set to: 0
  8888                           
  8889                           ; BSR set to: 0
  8890  003074  C095  F029         	movff	Battery_Convert@x,___wmul@multiplier
  8891  003078  C096  F02A         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  8892  00307C  0E00               	movlw	0
  8893  00307E  6E2C               	movwf	___wmul@multiplicand+1,c
  8894  003080  0E03               	movlw	3
  8895  003082  6E2B               	movwf	___wmul@multiplicand,c
  8896  003084  EC04  F01F         	call	___wmul	;wreg free
  8897  003088  0101               	movlb	1	; () banked
  8898  00308A  0EAA               	movlw	low _TempBattery_Volt
  8899  00308C  2429               	addwf	?___wmul,w,c
  8900  00308E  6ED9               	movwf	fsr2l,c
  8901  003090  0101               	movlb	1	; () banked
  8902  003092  0E01               	movlw	high _TempBattery_Volt
  8903  003094  202A               	addwfc	?___wmul+1,w,c
  8904  003096  6EDA               	movwf	fsr2h,c
  8905  003098  0E00               	movlw	0
  8906  00309A  0100               	movlb	0	; () banked
  8907  00309C  6F6F               	movwf	___ftmul@f2& (0+255),b
  8908  00309E  0EA0               	movlw	160
  8909  0030A0  0100               	movlb	0	; () banked
  8910  0030A2  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  8911  0030A4  0E40               	movlw	64
  8912  0030A6  0100               	movlb	0	; () banked
  8913  0030A8  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  8914  0030AA  0E00               	movlw	0
  8915  0030AC  0100               	movlb	0	; () banked
  8916  0030AE  6F63               	movwf	___ftdiv@f2& (0+255),b
  8917  0030B0  0E80               	movlw	128
  8918  0030B2  0100               	movlb	0	; () banked
  8919  0030B4  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  8920  0030B6  0E44               	movlw	68
  8921  0030B8  0100               	movlb	0	; () banked
  8922  0030BA  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  8923  0030BC  0EB6               	movlw	low _Battery_Adc
  8924  0030BE  0100               	movlb	0	; () banked
  8925  0030C0  6F93               	movwf	??_Battery_Convert& (0+255),b
  8926  0030C2  0E00               	movlw	high _Battery_Adc
  8927  0030C4  6F94               	movwf	(??_Battery_Convert+1)& (0+255),b
  8928  0030C6  90D8               	bcf	status,0,c
  8929  0030C8  0100               	movlb	0	; () banked
  8930  0030CA  3595               	rlcf	Battery_Convert@x& (0+255),w,b
  8931  0030CC  6EE1               	movwf	fsr1l,c
  8932  0030CE  0100               	movlb	0	; () banked
  8933  0030D0  3596               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  8934  0030D2  6EE2               	movwf	fsr1h,c
  8935  0030D4  90D8               	bcf	status,0,c
  8936  0030D6  36E1               	rlcf	fsr1l,f,c
  8937  0030D8  36E2               	rlcf	fsr1h,f,c
  8938  0030DA  0100               	movlb	0	; () banked
  8939  0030DC  5193               	movf	??_Battery_Convert& (0+255),w,b
  8940  0030DE  26E1               	addwf	fsr1l,f,c
  8941  0030E0  0100               	movlb	0	; () banked
  8942  0030E2  5194               	movf	(??_Battery_Convert+1)& (0+255),w,b
  8943  0030E4  22E2               	addwfc	fsr1h,f,c
  8944  0030E6  CFE6 F023          	movff	postinc1,___altoft@c
  8945  0030EA  CFE6 F024          	movff	postinc1,___altoft@c+1
  8946  0030EE  CFE6 F025          	movff	postinc1,___altoft@c+2
  8947  0030F2  CFE6 F026          	movff	postinc1,___altoft@c+3
  8948  0030F6  EC7A  F01C         	call	___altoft	;wreg free
  8949  0030FA  C023  F060         	movff	?___altoft,___ftdiv@f1
  8950  0030FE  C024  F061         	movff	?___altoft+1,___ftdiv@f1+1
  8951  003102  C025  F062         	movff	?___altoft+2,___ftdiv@f1+2
  8952  003106  ECEC  F016         	call	___ftdiv	;wreg free
  8953  00310A  C060  F06C         	movff	?___ftdiv,___ftmul@f1
  8954  00310E  C061  F06D         	movff	?___ftdiv+1,___ftmul@f1+1
  8955  003112  C062  F06E         	movff	?___ftdiv+2,___ftmul@f1+2
  8956  003116  ECC6  F014         	call	___ftmul	;wreg free
  8957  00311A  C06C  F085         	movff	?___ftmul,___ftadd@f1
  8958  00311E  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  8959  003122  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  8960  003126  0ECD               	movlw	205
  8961  003128  0100               	movlb	0	; () banked
  8962  00312A  6F88               	movwf	___ftadd@f2& (0+255),b
  8963  00312C  0E4C               	movlw	76
  8964  00312E  0100               	movlb	0	; () banked
  8965  003130  6F89               	movwf	(___ftadd@f2+1)& (0+255),b
  8966  003132  0E3D               	movlw	61
  8967  003134  0100               	movlb	0	; () banked
  8968  003136  6F8A               	movwf	(___ftadd@f2+2)& (0+255),b
  8969  003138  EC36  F010         	call	___ftadd	;wreg free
  8970  00313C  C085  FFDE         	movff	?___ftadd,postinc2
  8971  003140  C086  FFDE         	movff	?___ftadd+1,postinc2
  8972  003144  C087  FFDD         	movff	?___ftadd+2,postdec2
  8973  003148  52DD               	movf	postdec2,f,c
  8974  00314A  0100               	movlb	0	; () banked
  8975  00314C  4B95               	infsnz	Battery_Convert@x& (0+255),f,b
  8976  00314E  2B96               	incf	(Battery_Convert@x+1)& (0+255),f,b
  8977  003150  D788               	goto	L13
  8978  003152                     l5330:
  8979                           
  8980                           ; BSR set to: 0
  8981                           ;Battery.c: 40: }
  8982                           ;Battery.c: 41: Battery_Filter();
  8983  003152  EC44  F013         	call	_Battery_Filter	;wreg free
  8984  003156  0012               	return	
  8985  003158                     __end_of_Battery_Convert:
  8986                           	opt stack 0
  8987                           tblptru	equ	0xFF8
  8988                           tblptrh	equ	0xFF7
  8989                           tblptrl	equ	0xFF6
  8990                           tablat	equ	0xFF5
  8991                           prodh	equ	0xFF4
  8992                           prodl	equ	0xFF3
  8993                           intcon	equ	0xFF2
  8994                           intcon2	equ	0xFF1
  8995                           postinc0	equ	0xFEE
  8996                           wreg	equ	0xFE8
  8997                           postinc1	equ	0xFE6
  8998                           postdec1	equ	0xFE5
  8999                           fsr1h	equ	0xFE2
  9000                           fsr1l	equ	0xFE1
  9001                           indf2	equ	0xFDF
  9002                           postinc2	equ	0xFDE
  9003                           postdec2	equ	0xFDD
  9004                           fsr2h	equ	0xFDA
  9005                           fsr2l	equ	0xFD9
  9006                           status	equ	0xFD8
  9007                           
  9008 ;; *************** function ___ftdiv *****************
  9009 ;; Defined at:
  9010 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;  f1              3    0[BANK0 ] float 
  9013 ;;  f2              3    3[BANK0 ] float 
  9014 ;; Auto vars:     Size  Location     Type
  9015 ;;  f3              3    7[BANK0 ] float 
  9016 ;;  sign            1   11[BANK0 ] unsigned char 
  9017 ;;  exp             1   10[BANK0 ] unsigned char 
  9018 ;;  cntr            1    6[BANK0 ] unsigned char 
  9019 ;; Return value:  Size  Location     Type
  9020 ;;                  3    0[BANK0 ] float 
  9021 ;; Registers used:
  9022 ;;		wreg, status,2, status,0, cstack
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9028 ;;      Params:         0       6       0       0       0       0       0
  9029 ;;      Locals:         0       6       0       0       0       0       0
  9030 ;;      Temps:          3       0       0       0       0       0       0
  9031 ;;      Totals:         3      12       0       0       0       0       0
  9032 ;;Total ram usage:       15 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; Hardware stack levels required when called:    5
  9035 ;; This function calls:
  9036 ;;		___ftpack
  9037 ;; This function is called by:
  9038 ;;		_Battery_Convert
  9039 ;;		_Temp_Convert
  9040 ;; This function uses a non-reentrant model
  9041 ;;
  9042                           
  9043                           	psect	text38
  9044  002DD8                     __ptext38:
  9045                           	opt stack 0
  9046  002DD8                     ___ftdiv:
  9047                           	opt stack 24
  9048                           
  9049                           ;incstack = 0
  9050  002DD8  0100               	movlb	0	; () banked
  9051  002DDA  C062  F02D         	movff	___ftdiv@f1+2,??___ftdiv
  9052  002DDE  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
  9053  002DE0  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
  9054  002DE2  0100               	movlb	0	; () banked
  9055  002DE4  3561               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  9056  002DE6  362D               	rlcf	??___ftdiv& (0+255),f,c
  9057  002DE8  E301               	bnc	u5541
  9058  002DEA  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
  9059  002DEC                     u5541:
  9060  002DEC  502D               	movf	??___ftdiv,w,c
  9061  002DEE  0100               	movlb	0	; () banked
  9062  002DF0  6F6A               	movwf	___ftdiv@exp& (0+255),b
  9063  002DF2  0100               	movlb	0	; () banked
  9064  002DF4  676A               	tstfsz	___ftdiv@exp& (0+255),b
  9065  002DF6  D00A               	goto	l5156
  9066                           
  9067                           ; BSR set to: 0
  9068  002DF8  0E00               	movlw	0
  9069  002DFA  0100               	movlb	0	; () banked
  9070  002DFC  6F60               	movwf	?___ftdiv& (0+255),b
  9071  002DFE  0E00               	movlw	0
  9072  002E00  0100               	movlb	0	; () banked
  9073  002E02  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  9074  002E04  0E00               	movlw	0
  9075  002E06  0100               	movlb	0	; () banked
  9076  002E08  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  9077  002E0A  0012               	return	
  9078  002E0C                     l5156:
  9079                           
  9080                           ; BSR set to: 0
  9081  002E0C  0100               	movlb	0	; () banked
  9082  002E0E  C065  F02D         	movff	___ftdiv@f2+2,??___ftdiv
  9083  002E12  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
  9084  002E14  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
  9085  002E16  0100               	movlb	0	; () banked
  9086  002E18  3564               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  9087  002E1A  362D               	rlcf	??___ftdiv& (0+255),f,c
  9088  002E1C  E301               	bnc	u5561
  9089  002E1E  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
  9090  002E20                     u5561:
  9091  002E20  502D               	movf	??___ftdiv,w,c
  9092  002E22  0100               	movlb	0	; () banked
  9093  002E24  6F6B               	movwf	___ftdiv@sign& (0+255),b
  9094  002E26  0100               	movlb	0	; () banked
  9095  002E28  676B               	tstfsz	___ftdiv@sign& (0+255),b
  9096  002E2A  D00A               	goto	l5162
  9097                           
  9098                           ; BSR set to: 0
  9099  002E2C  0E00               	movlw	0
  9100  002E2E  0100               	movlb	0	; () banked
  9101  002E30  6F60               	movwf	?___ftdiv& (0+255),b
  9102  002E32  0E00               	movlw	0
  9103  002E34  0100               	movlb	0	; () banked
  9104  002E36  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  9105  002E38  0E00               	movlw	0
  9106  002E3A  0100               	movlb	0	; () banked
  9107  002E3C  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  9108  002E3E  0012               	return	
  9109  002E40                     l5162:
  9110                           
  9111                           ; BSR set to: 0
  9112  002E40  0E00               	movlw	0
  9113  002E42  0100               	movlb	0	; () banked
  9114  002E44  6F67               	movwf	___ftdiv@f3& (0+255),b
  9115  002E46  0E00               	movlw	0
  9116  002E48  0100               	movlb	0	; () banked
  9117  002E4A  6F68               	movwf	(___ftdiv@f3+1)& (0+255),b
  9118  002E4C  0E00               	movlw	0
  9119  002E4E  0100               	movlb	0	; () banked
  9120  002E50  6F69               	movwf	(___ftdiv@f3+2)& (0+255),b
  9121                           
  9122                           ; BSR set to: 0
  9123  002E52  0100               	movlb	0	; () banked
  9124  002E54  516B               	movf	___ftdiv@sign& (0+255),w,b
  9125  002E56  0F89               	addlw	137
  9126  002E58  0100               	movlb	0	; () banked
  9127  002E5A  5F6A               	subwf	___ftdiv@exp& (0+255),f,b
  9128                           
  9129                           ; BSR set to: 0
  9130  002E5C  C062  F06B         	movff	___ftdiv@f1+2,___ftdiv@sign
  9131                           
  9132                           ; BSR set to: 0
  9133  002E60  0100               	movlb	0	; () banked
  9134  002E62  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9135  002E64  0100               	movlb	0	; () banked
  9136  002E66  1B6B               	xorwf	___ftdiv@sign& (0+255),f,b
  9137                           
  9138                           ; BSR set to: 0
  9139  002E68  0E80               	movlw	128
  9140  002E6A  0100               	movlb	0	; () banked
  9141  002E6C  176B               	andwf	___ftdiv@sign& (0+255),f,b
  9142                           
  9143                           ; BSR set to: 0
  9144  002E6E  0100               	movlb	0	; () banked
  9145  002E70  8F61               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  9146                           
  9147                           ; BSR set to: 0
  9148  002E72  0EFF               	movlw	255
  9149  002E74  0100               	movlb	0	; () banked
  9150  002E76  1760               	andwf	___ftdiv@f1& (0+255),f,b
  9151  002E78  0EFF               	movlw	255
  9152  002E7A  0100               	movlb	0	; () banked
  9153  002E7C  1761               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  9154  002E7E  0E00               	movlw	0
  9155  002E80  0100               	movlb	0	; () banked
  9156  002E82  1762               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  9157                           
  9158                           ; BSR set to: 0
  9159  002E84  0100               	movlb	0	; () banked
  9160  002E86  8F64               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  9161                           
  9162                           ; BSR set to: 0
  9163  002E88  0EFF               	movlw	255
  9164  002E8A  0100               	movlb	0	; () banked
  9165  002E8C  1763               	andwf	___ftdiv@f2& (0+255),f,b
  9166  002E8E  0EFF               	movlw	255
  9167  002E90  0100               	movlb	0	; () banked
  9168  002E92  1764               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  9169  002E94  0E00               	movlw	0
  9170  002E96  0100               	movlb	0	; () banked
  9171  002E98  1765               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  9172                           
  9173                           ; BSR set to: 0
  9174  002E9A  0E18               	movlw	24
  9175  002E9C  0100               	movlb	0	; () banked
  9176  002E9E  6F66               	movwf	___ftdiv@cntr& (0+255),b
  9177  002EA0                     l5182:
  9178                           
  9179                           ; BSR set to: 0
  9180  002EA0  0100               	movlb	0	; () banked
  9181  002EA2  90D8               	bcf	status,0,c
  9182  002EA4  0100               	movlb	0	; () banked
  9183  002EA6  3767               	rlcf	___ftdiv@f3& (0+255),f,b
  9184  002EA8  0100               	movlb	0	; () banked
  9185  002EAA  3768               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  9186  002EAC  0100               	movlb	0	; () banked
  9187  002EAE  3769               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  9188                           
  9189                           ; BSR set to: 0
  9190  002EB0  0100               	movlb	0	; () banked
  9191  002EB2  5163               	movf	___ftdiv@f2& (0+255),w,b
  9192  002EB4  0100               	movlb	0	; () banked
  9193  002EB6  5D60               	subwf	___ftdiv@f1& (0+255),w,b
  9194  002EB8  0100               	movlb	0	; () banked
  9195  002EBA  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9196  002EBC  0100               	movlb	0	; () banked
  9197  002EBE  5961               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  9198  002EC0  0100               	movlb	0	; () banked
  9199  002EC2  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9200  002EC4  0100               	movlb	0	; () banked
  9201  002EC6  5962               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  9202  002EC8  A0D8               	btfss	status,0,c
  9203  002ECA  D00E               	goto	l1111
  9204                           
  9205                           ; BSR set to: 0
  9206  002ECC  0100               	movlb	0	; () banked
  9207  002ECE  5163               	movf	___ftdiv@f2& (0+255),w,b
  9208  002ED0  0100               	movlb	0	; () banked
  9209  002ED2  5F60               	subwf	___ftdiv@f1& (0+255),f,b
  9210  002ED4  0100               	movlb	0	; () banked
  9211  002ED6  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9212  002ED8  0100               	movlb	0	; () banked
  9213  002EDA  5B61               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  9214  002EDC  0100               	movlb	0	; () banked
  9215  002EDE  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9216  002EE0  0100               	movlb	0	; () banked
  9217  002EE2  5B62               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  9218                           
  9219                           ; BSR set to: 0
  9220  002EE4  0100               	movlb	0	; () banked
  9221  002EE6  8167               	bsf	___ftdiv@f3& (0+255),0,b
  9222  002EE8                     l1111:
  9223                           
  9224                           ; BSR set to: 0
  9225  002EE8  0100               	movlb	0	; () banked
  9226  002EEA  90D8               	bcf	status,0,c
  9227  002EEC  0100               	movlb	0	; () banked
  9228  002EEE  3760               	rlcf	___ftdiv@f1& (0+255),f,b
  9229  002EF0  0100               	movlb	0	; () banked
  9230  002EF2  3761               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  9231  002EF4  0100               	movlb	0	; () banked
  9232  002EF6  3762               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  9233                           
  9234                           ; BSR set to: 0
  9235  002EF8  0100               	movlb	0	; () banked
  9236  002EFA  2F66               	decfsz	___ftdiv@cntr& (0+255),f,b
  9237  002EFC  D7D1               	goto	l5182
  9238                           
  9239                           ; BSR set to: 0
  9240                           
  9241                           ; BSR set to: 0
  9242  002EFE  C067  F01B         	movff	___ftdiv@f3,___ftpack@arg
  9243  002F02  C068  F01C         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9244  002F06  C069  F01D         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9245  002F0A  C06A  F01E         	movff	___ftdiv@exp,___ftpack@exp
  9246  002F0E  C06B  F01F         	movff	___ftdiv@sign,___ftpack@sign
  9247  002F12  EC43  F01B         	call	___ftpack	;wreg free
  9248  002F16  C01B  F060         	movff	?___ftpack,?___ftdiv
  9249  002F1A  C01C  F061         	movff	?___ftpack+1,?___ftdiv+1
  9250  002F1E  C01D  F062         	movff	?___ftpack+2,?___ftdiv+2
  9251  002F22  0012               	return	
  9252  002F24                     __end_of___ftdiv:
  9253                           	opt stack 0
  9254                           tblptru	equ	0xFF8
  9255                           tblptrh	equ	0xFF7
  9256                           tblptrl	equ	0xFF6
  9257                           tablat	equ	0xFF5
  9258                           prodh	equ	0xFF4
  9259                           prodl	equ	0xFF3
  9260                           intcon	equ	0xFF2
  9261                           intcon2	equ	0xFF1
  9262                           postinc0	equ	0xFEE
  9263                           wreg	equ	0xFE8
  9264                           postinc1	equ	0xFE6
  9265                           postdec1	equ	0xFE5
  9266                           fsr1h	equ	0xFE2
  9267                           fsr1l	equ	0xFE1
  9268                           indf2	equ	0xFDF
  9269                           postinc2	equ	0xFDE
  9270                           postdec2	equ	0xFDD
  9271                           fsr2h	equ	0xFDA
  9272                           fsr2l	equ	0xFD9
  9273                           status	equ	0xFD8
  9274                           
  9275 ;; *************** function ___altoft *****************
  9276 ;; Defined at:
  9277 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\altoft.c"
  9278 ;; Parameters:    Size  Location     Type
  9279 ;;  c               4   34[COMRAM] long 
  9280 ;; Auto vars:     Size  Location     Type
  9281 ;;  sign            1   43[COMRAM] unsigned char 
  9282 ;;  exp             1   42[COMRAM] unsigned char 
  9283 ;; Return value:  Size  Location     Type
  9284 ;;                  3   34[COMRAM] float 
  9285 ;; Registers used:
  9286 ;;		wreg, status,2, status,0, cstack
  9287 ;; Tracked objects:
  9288 ;;		On entry : 0/0
  9289 ;;		On exit  : 0/0
  9290 ;;		Unchanged: 0/0
  9291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9292 ;;      Params:         4       0       0       0       0       0       0
  9293 ;;      Locals:         2       0       0       0       0       0       0
  9294 ;;      Temps:          4       0       0       0       0       0       0
  9295 ;;      Totals:        10       0       0       0       0       0       0
  9296 ;;Total ram usage:       10 bytes
  9297 ;; Hardware stack levels used:    1
  9298 ;; Hardware stack levels required when called:    5
  9299 ;; This function calls:
  9300 ;;		___ftpack
  9301 ;; This function is called by:
  9302 ;;		_Battery_Convert
  9303 ;; This function uses a non-reentrant model
  9304 ;;
  9305                           
  9306                           	psect	text39
  9307  0038F4                     __ptext39:
  9308                           	opt stack 0
  9309  0038F4                     ___altoft:
  9310                           	opt stack 24
  9311                           
  9312                           ;incstack = 0
  9313  0038F4  0E00               	movlw	0
  9314  0038F6  6E2C               	movwf	___altoft@sign,c
  9315  0038F8  0E8E               	movlw	142
  9316  0038FA  6E2B               	movwf	___altoft@exp,c
  9317  0038FC  5026               	movf	___altoft@c+3,w,c
  9318  0038FE  0A80               	xorlw	128
  9319  003900  0F80               	addlw	128
  9320  003902  E108               	bnz	u5525
  9321  003904  0E00               	movlw	0
  9322  003906  5C25               	subwf	___altoft@c+2,w,c
  9323  003908  E105               	bnz	u5525
  9324  00390A  0E00               	movlw	0
  9325  00390C  5C24               	subwf	___altoft@c+1,w,c
  9326  00390E  E102               	bnz	u5525
  9327  003910  0E00               	movlw	0
  9328  003912  5C23               	subwf	___altoft@c,w,c
  9329  003914                     u5525:
  9330  003914  B0D8               	btfsc	status,0,c
  9331  003916  D011               	goto	l5144
  9332  003918  1E26               	comf	___altoft@c+3,f,c
  9333  00391A  1E25               	comf	___altoft@c+2,f,c
  9334  00391C  1E24               	comf	___altoft@c+1,f,c
  9335  00391E  6C23               	negf	___altoft@c,c
  9336  003920  0E00               	movlw	0
  9337  003922  2224               	addwfc	___altoft@c+1,f,c
  9338  003924  2225               	addwfc	___altoft@c+2,f,c
  9339  003926  2226               	addwfc	___altoft@c+3,f,c
  9340  003928  0E01               	movlw	1
  9341  00392A  6E2C               	movwf	___altoft@sign,c
  9342  00392C  D006               	goto	l5144
  9343  00392E                     l5142:
  9344  00392E  90D8               	bcf	status,0,c
  9345  003930  3226               	rrcf	___altoft@c+3,f,c
  9346  003932  3225               	rrcf	___altoft@c+2,f,c
  9347  003934  3224               	rrcf	___altoft@c+1,f,c
  9348  003936  3223               	rrcf	___altoft@c,f,c
  9349  003938  2A2B               	incf	___altoft@exp,f,c
  9350  00393A                     l5144:
  9351  00393A  0E00               	movlw	0
  9352  00393C  1423               	andwf	___altoft@c,w,c
  9353  00393E  6E27               	movwf	??___altoft& (0+255),c
  9354  003940  0E00               	movlw	0
  9355  003942  1424               	andwf	___altoft@c+1,w,c
  9356  003944  6E28               	movwf	(??___altoft+1)& (0+255),c
  9357  003946  0E00               	movlw	0
  9358  003948  1425               	andwf	___altoft@c+2,w,c
  9359  00394A  6E29               	movwf	(??___altoft+2)& (0+255),c
  9360  00394C  0EFF               	movlw	255
  9361  00394E  1426               	andwf	___altoft@c+3,w,c
  9362  003950  6E2A               	movwf	(??___altoft+3)& (0+255),c
  9363  003952  502A               	movf	??___altoft+3,w,c
  9364  003954  1027               	iorwf	??___altoft,w,c
  9365  003956  1028               	iorwf	??___altoft+1,w,c
  9366  003958  1029               	iorwf	??___altoft+2,w,c
  9367  00395A  A4D8               	btfss	status,2,c
  9368  00395C  D7E8               	goto	l5142
  9369  00395E  C023  F01B         	movff	___altoft@c,___ftpack@arg
  9370  003962  C024  F01C         	movff	___altoft@c+1,___ftpack@arg+1
  9371  003966  C025  F01D         	movff	___altoft@c+2,___ftpack@arg+2
  9372  00396A  C02B  F01E         	movff	___altoft@exp,___ftpack@exp
  9373  00396E  C02C  F01F         	movff	___altoft@sign,___ftpack@sign
  9374  003972  EC43  F01B         	call	___ftpack	;wreg free
  9375  003976  C01B  F023         	movff	?___ftpack,?___altoft
  9376  00397A  C01C  F024         	movff	?___ftpack+1,?___altoft+1
  9377  00397E  C01D  F025         	movff	?___ftpack+2,?___altoft+2
  9378  003982  0012               	return	
  9379  003984                     __end_of___altoft:
  9380                           	opt stack 0
  9381                           tblptru	equ	0xFF8
  9382                           tblptrh	equ	0xFF7
  9383                           tblptrl	equ	0xFF6
  9384                           tablat	equ	0xFF5
  9385                           prodh	equ	0xFF4
  9386                           prodl	equ	0xFF3
  9387                           intcon	equ	0xFF2
  9388                           intcon2	equ	0xFF1
  9389                           postinc0	equ	0xFEE
  9390                           wreg	equ	0xFE8
  9391                           postinc1	equ	0xFE6
  9392                           postdec1	equ	0xFE5
  9393                           fsr1h	equ	0xFE2
  9394                           fsr1l	equ	0xFE1
  9395                           indf2	equ	0xFDF
  9396                           postinc2	equ	0xFDE
  9397                           postdec2	equ	0xFDD
  9398                           fsr2h	equ	0xFDA
  9399                           fsr2l	equ	0xFD9
  9400                           status	equ	0xFD8
  9401                           
  9402 ;; *************** function _Battery_Filter *****************
  9403 ;; Defined at:
  9404 ;;		line 51 in file "Battery.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;		None
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;  x               2   49[BANK0 ] int 
  9409 ;; Return value:  Size  Location     Type
  9410 ;;		None               void
  9411 ;; Registers used:
  9412 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9413 ;; Tracked objects:
  9414 ;;		On entry : 0/0
  9415 ;;		On exit  : 0/0
  9416 ;;		Unchanged: 0/0
  9417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9418 ;;      Params:         0       0       0       0       0       0       0
  9419 ;;      Locals:         0       2       0       0       0       0       0
  9420 ;;      Temps:          0       0       0       0       0       0       0
  9421 ;;      Totals:         0       2       0       0       0       0       0
  9422 ;;Total ram usage:        2 bytes
  9423 ;; Hardware stack levels used:    1
  9424 ;; Hardware stack levels required when called:    6
  9425 ;; This function calls:
  9426 ;;		___ftadd
  9427 ;;		___ftmul
  9428 ;;		___wmul
  9429 ;; This function is called by:
  9430 ;;		_Battery_Convert
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           	psect	text40
  9435  002688                     __ptext40:
  9436                           	opt stack 0
  9437  002688                     _Battery_Filter:
  9438                           	opt stack 23
  9439                           
  9440                           ;Battery.c: 54: int x;
  9441                           ;Battery.c: 55: for(x = 0; x < 9; x++)
  9442                           
  9443                           ;incstack = 0
  9444  002688  0E00               	movlw	0
  9445  00268A  0100               	movlb	0	; () banked
  9446  00268C  6F92               	movwf	(Battery_Filter@x+1)& (0+255),b
  9447  00268E  0E00               	movlw	0
  9448  002690  0100               	movlb	0	; () banked
  9449  002692  6F91               	movwf	Battery_Filter@x& (0+255),b
  9450  002694                     
  9451                           ; BSR set to: 0
  9452  002694  0100               	movlb	0	; () banked
  9453  002696  5192               	movf	(Battery_Filter@x+1)& (0+255),w,b
  9454  002698  0A80               	xorlw	128
  9455  00269A  0F80               	addlw	-128
  9456  00269C  0E09               	movlw	9
  9457  00269E  B4D8               	btfsc	status,2,c
  9458  0026A0  5D91               	subwf	Battery_Filter@x& (0+255),w,b
  9459  0026A2  B0D8               	btfsc	status,0,c
  9460  0026A4  D077               	goto	l4858
  9461                           
  9462                           ; BSR set to: 0
  9463                           ;Battery.c: 56: {
  9464                           ;Battery.c: 57: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
  9465                           
  9466                           ; BSR set to: 0
  9467                           
  9468                           ; BSR set to: 0
  9469  0026A6  C091  F029         	movff	Battery_Filter@x,___wmul@multiplier
  9470  0026AA  C092  F02A         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  9471  0026AE  0E00               	movlw	0
  9472  0026B0  6E2C               	movwf	___wmul@multiplicand+1,c
  9473  0026B2  0E03               	movlw	3
  9474  0026B4  6E2B               	movwf	___wmul@multiplicand,c
  9475  0026B6  EC04  F01F         	call	___wmul	;wreg free
  9476  0026BA  0101               	movlb	1	; () banked
  9477  0026BC  0E32               	movlw	low _Battery_Volt
  9478  0026BE  2429               	addwf	?___wmul,w,c
  9479  0026C0  6ED9               	movwf	fsr2l,c
  9480  0026C2  0101               	movlb	1	; () banked
  9481  0026C4  0E01               	movlw	high _Battery_Volt
  9482  0026C6  202A               	addwfc	?___wmul+1,w,c
  9483  0026C8  6EDA               	movwf	fsr2h,c
  9484  0026CA  0E48               	movlw	72
  9485  0026CC  0100               	movlb	0	; () banked
  9486  0026CE  6F6F               	movwf	___ftmul@f2& (0+255),b
  9487  0026D0  0E61               	movlw	97
  9488  0026D2  0100               	movlb	0	; () banked
  9489  0026D4  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  9490  0026D6  0E3F               	movlw	63
  9491  0026D8  0100               	movlb	0	; () banked
  9492  0026DA  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  9493  0026DC  C091  F029         	movff	Battery_Filter@x,___wmul@multiplier
  9494  0026E0  C092  F02A         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  9495  0026E4  0E00               	movlw	0
  9496  0026E6  6E2C               	movwf	___wmul@multiplicand+1,c
  9497  0026E8  0E03               	movlw	3
  9498  0026EA  6E2B               	movwf	___wmul@multiplicand,c
  9499  0026EC  EC04  F01F         	call	___wmul	;wreg free
  9500  0026F0  0101               	movlb	1	; () banked
  9501  0026F2  0EAA               	movlw	low _TempBattery_Volt
  9502  0026F4  2429               	addwf	?___wmul,w,c
  9503  0026F6  6EE1               	movwf	fsr1l,c
  9504  0026F8  0101               	movlb	1	; () banked
  9505  0026FA  0E01               	movlw	high _TempBattery_Volt
  9506  0026FC  202A               	addwfc	?___wmul+1,w,c
  9507  0026FE  6EE2               	movwf	fsr1h,c
  9508  002700  0100               	movlb	0	; () banked
  9509  002702  CFE6 F06C          	movff	postinc1,___ftmul@f1
  9510  002706  0100               	movlb	0	; () banked
  9511  002708  CFE6 F06D          	movff	postinc1,___ftmul@f1+1
  9512  00270C  0100               	movlb	0	; () banked
  9513  00270E  CFE5 F06E          	movff	postdec1,___ftmul@f1+2
  9514  002712  ECC6  F014         	call	___ftmul	;wreg free
  9515  002716  C06C  F085         	movff	?___ftmul,___ftadd@f1
  9516  00271A  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  9517  00271E  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  9518  002722  0EC3               	movlw	195
  9519  002724  0100               	movlb	0	; () banked
  9520  002726  6F6F               	movwf	___ftmul@f2& (0+255),b
  9521  002728  0EF5               	movlw	245
  9522  00272A  0100               	movlb	0	; () banked
  9523  00272C  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  9524  00272E  0E3D               	movlw	61
  9525  002730  0100               	movlb	0	; () banked
  9526  002732  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  9527  002734  0E00               	movlw	0
  9528  002736  6E2C               	movwf	___wmul@multiplicand+1,c
  9529  002738  0E03               	movlw	3
  9530  00273A  6E2B               	movwf	___wmul@multiplicand,c
  9531  00273C  C091  F029         	movff	Battery_Filter@x,___wmul@multiplier
  9532  002740  C092  F02A         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  9533  002744  EC04  F01F         	call	___wmul	;wreg free
  9534  002748  0101               	movlb	1	; () banked
  9535  00274A  0E50               	movlw	low _PrevBattery_Volt
  9536  00274C  2429               	addwf	?___wmul,w,c
  9537  00274E  6EE1               	movwf	fsr1l,c
  9538  002750  0101               	movlb	1	; () banked
  9539  002752  0E01               	movlw	high _PrevBattery_Volt
  9540  002754  202A               	addwfc	?___wmul+1,w,c
  9541  002756  6EE2               	movwf	fsr1h,c
  9542  002758  0100               	movlb	0	; () banked
  9543  00275A  CFE6 F06C          	movff	postinc1,___ftmul@f1
  9544  00275E  0100               	movlb	0	; () banked
  9545  002760  CFE6 F06D          	movff	postinc1,___ftmul@f1+1
  9546  002764  0100               	movlb	0	; () banked
  9547  002766  CFE5 F06E          	movff	postdec1,___ftmul@f1+2
  9548  00276A  ECC6  F014         	call	___ftmul	;wreg free
  9549  00276E  C06C  F088         	movff	?___ftmul,___ftadd@f2
  9550  002772  C06D  F089         	movff	?___ftmul+1,___ftadd@f2+1
  9551  002776  C06E  F08A         	movff	?___ftmul+2,___ftadd@f2+2
  9552  00277A  EC36  F010         	call	___ftadd	;wreg free
  9553  00277E  C085  FFDE         	movff	?___ftadd,postinc2
  9554  002782  C086  FFDE         	movff	?___ftadd+1,postinc2
  9555  002786  C087  FFDD         	movff	?___ftadd+2,postdec2
  9556  00278A  52DD               	movf	postdec2,f,c
  9557  00278C  0100               	movlb	0	; () banked
  9558  00278E  4B91               	infsnz	Battery_Filter@x& (0+255),f,b
  9559  002790  2B92               	incf	(Battery_Filter@x+1)& (0+255),f,b
  9560  002792  D780               	goto	L14
  9561  002794                     l4858:
  9562                           
  9563                           ; BSR set to: 0
  9564                           ;Battery.c: 58: }
  9565                           ;Battery.c: 59: for(x = 0; x < 9; x++)
  9566  002794  0E00               	movlw	0
  9567  002796  0100               	movlb	0	; () banked
  9568  002798  6F92               	movwf	(Battery_Filter@x+1)& (0+255),b
  9569  00279A  0E00               	movlw	0
  9570  00279C  0100               	movlb	0	; () banked
  9571  00279E  6F91               	movwf	Battery_Filter@x& (0+255),b
  9572  0027A0                     
  9573                           ; BSR set to: 0
  9574  0027A0  0100               	movlb	0	; () banked
  9575  0027A2  5192               	movf	(Battery_Filter@x+1)& (0+255),w,b
  9576  0027A4  0A80               	xorlw	128
  9577  0027A6  0F80               	addlw	-128
  9578  0027A8  0E09               	movlw	9
  9579  0027AA  B4D8               	btfsc	status,2,c
  9580  0027AC  5D91               	subwf	Battery_Filter@x& (0+255),w,b
  9581  0027AE  B0D8               	btfsc	status,0,c
  9582  0027B0  0012               	return	
  9583                           
  9584                           ; BSR set to: 0
  9585                           ;Battery.c: 60: {
  9586                           ;Battery.c: 61: PrevBattery_Volt[x] = Battery_Volt[x];
  9587                           
  9588                           ; BSR set to: 0
  9589                           
  9590                           ; BSR set to: 0
  9591  0027B2  C091  F029         	movff	Battery_Filter@x,___wmul@multiplier
  9592  0027B6  C092  F02A         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  9593  0027BA  0E00               	movlw	0
  9594  0027BC  6E2C               	movwf	___wmul@multiplicand+1,c
  9595  0027BE  0E03               	movlw	3
  9596  0027C0  6E2B               	movwf	___wmul@multiplicand,c
  9597  0027C2  EC04  F01F         	call	___wmul	;wreg free
  9598  0027C6  0101               	movlb	1	; () banked
  9599  0027C8  0E32               	movlw	low _Battery_Volt
  9600  0027CA  2429               	addwf	?___wmul,w,c
  9601  0027CC  6ED9               	movwf	fsr2l,c
  9602  0027CE  0101               	movlb	1	; () banked
  9603  0027D0  0E01               	movlw	high _Battery_Volt
  9604  0027D2  202A               	addwfc	?___wmul+1,w,c
  9605  0027D4  6EDA               	movwf	fsr2h,c
  9606  0027D6  C091  F029         	movff	Battery_Filter@x,___wmul@multiplier
  9607  0027DA  C092  F02A         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  9608  0027DE  0E00               	movlw	0
  9609  0027E0  6E2C               	movwf	___wmul@multiplicand+1,c
  9610  0027E2  0E03               	movlw	3
  9611  0027E4  6E2B               	movwf	___wmul@multiplicand,c
  9612  0027E6  EC04  F01F         	call	___wmul	;wreg free
  9613  0027EA  0101               	movlb	1	; () banked
  9614  0027EC  0E50               	movlw	low _PrevBattery_Volt
  9615  0027EE  2429               	addwf	?___wmul,w,c
  9616  0027F0  6EE1               	movwf	fsr1l,c
  9617  0027F2  0101               	movlb	1	; () banked
  9618  0027F4  0E01               	movlw	high _PrevBattery_Volt
  9619  0027F6  202A               	addwfc	?___wmul+1,w,c
  9620  0027F8  6EE2               	movwf	fsr1h,c
  9621  0027FA  CFDE FFE6          	movff	postinc2,postinc1
  9622  0027FE  CFDE FFE6          	movff	postinc2,postinc1
  9623  002802  CFDE FFE5          	movff	postinc2,postdec1
  9624  002806  52E5               	movf	postdec1,f,c
  9625                           
  9626                           ; BSR set to: 1
  9627  002808  0100               	movlb	0	; () banked
  9628  00280A  4B91               	infsnz	Battery_Filter@x& (0+255),f,b
  9629  00280C  2B92               	incf	(Battery_Filter@x+1)& (0+255),f,b
  9630  00280E  D7C8               	goto	L15
  9631  002810                     __end_of_Battery_Filter:
  9632                           	opt stack 0
  9633                           tblptru	equ	0xFF8
  9634                           tblptrh	equ	0xFF7
  9635                           tblptrl	equ	0xFF6
  9636                           tablat	equ	0xFF5
  9637                           prodh	equ	0xFF4
  9638                           prodl	equ	0xFF3
  9639                           intcon	equ	0xFF2
  9640                           intcon2	equ	0xFF1
  9641                           postinc0	equ	0xFEE
  9642                           wreg	equ	0xFE8
  9643                           postinc1	equ	0xFE6
  9644                           postdec1	equ	0xFE5
  9645                           fsr1h	equ	0xFE2
  9646                           fsr1l	equ	0xFE1
  9647                           indf2	equ	0xFDF
  9648                           postinc2	equ	0xFDE
  9649                           postdec2	equ	0xFDD
  9650                           fsr2h	equ	0xFDA
  9651                           fsr2l	equ	0xFD9
  9652                           status	equ	0xFD8
  9653                           
  9654 ;; *************** function ___wmul *****************
  9655 ;; Defined at:
  9656 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;  multiplier      2   40[COMRAM] unsigned int 
  9659 ;;  multiplicand    2   42[COMRAM] unsigned int 
  9660 ;; Auto vars:     Size  Location     Type
  9661 ;;  product         2   44[COMRAM] unsigned int 
  9662 ;; Return value:  Size  Location     Type
  9663 ;;                  2   40[COMRAM] unsigned int 
  9664 ;; Registers used:
  9665 ;;		wreg, status,2, status,0, prodl, prodh
  9666 ;; Tracked objects:
  9667 ;;		On entry : 0/0
  9668 ;;		On exit  : 0/0
  9669 ;;		Unchanged: 0/0
  9670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9671 ;;      Params:         4       0       0       0       0       0       0
  9672 ;;      Locals:         2       0       0       0       0       0       0
  9673 ;;      Temps:          0       0       0       0       0       0       0
  9674 ;;      Totals:         6       0       0       0       0       0       0
  9675 ;;Total ram usage:        6 bytes
  9676 ;; Hardware stack levels used:    1
  9677 ;; Hardware stack levels required when called:    4
  9678 ;; This function calls:
  9679 ;;		Nothing
  9680 ;; This function is called by:
  9681 ;;		_Battery_Convert
  9682 ;;		_Battery_Filter
  9683 ;;		_Battery_Fault
  9684 ;;		_Battery_Get
  9685 ;;		_Temp_Fault
  9686 ;;		_Temp_Filter
  9687 ;;		_Temp_Convert
  9688 ;;		_fround
  9689 ;;		_scale
  9690 ;;		_printf
  9691 ;;		_eval_poly
  9692 ;;		_Tempeture_Get
  9693 ;; This function uses a non-reentrant model
  9694 ;;
  9695                           
  9696                           	psect	text41
  9697  003E08                     __ptext41:
  9698                           	opt stack 0
  9699  003E08                     ___wmul:
  9700                           	opt stack 24
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;incstack = 0
  9704  003E08  5029               	movf	___wmul@multiplier,w,c
  9705  003E0A  022B               	mulwf	___wmul@multiplicand,c
  9706  003E0C  CFF3 F02D          	movff	prodl,___wmul@product
  9707  003E10  CFF4 F02E          	movff	prodh,___wmul@product+1
  9708  003E14  5029               	movf	___wmul@multiplier,w,c
  9709  003E16  022C               	mulwf	___wmul@multiplicand+1,c
  9710  003E18  50F3               	movf	prodl,w,c
  9711  003E1A  262E               	addwf	___wmul@product+1,f,c
  9712  003E1C  502A               	movf	___wmul@multiplier+1,w,c
  9713  003E1E  022B               	mulwf	___wmul@multiplicand,c
  9714  003E20  50F3               	movf	prodl,w,c
  9715  003E22  262E               	addwf	___wmul@product+1,f,c
  9716  003E24  C02D  F029         	movff	___wmul@product,?___wmul
  9717  003E28  C02E  F02A         	movff	___wmul@product+1,?___wmul+1
  9718  003E2C  0012               	return	
  9719  003E2E                     __end_of___wmul:
  9720                           	opt stack 0
  9721                           tblptru	equ	0xFF8
  9722                           tblptrh	equ	0xFF7
  9723                           tblptrl	equ	0xFF6
  9724                           tablat	equ	0xFF5
  9725                           prodh	equ	0xFF4
  9726                           prodl	equ	0xFF3
  9727                           intcon	equ	0xFF2
  9728                           intcon2	equ	0xFF1
  9729                           postinc0	equ	0xFEE
  9730                           wreg	equ	0xFE8
  9731                           postinc1	equ	0xFE6
  9732                           postdec1	equ	0xFE5
  9733                           fsr1h	equ	0xFE2
  9734                           fsr1l	equ	0xFE1
  9735                           indf2	equ	0xFDF
  9736                           postinc2	equ	0xFDE
  9737                           postdec2	equ	0xFDD
  9738                           fsr2h	equ	0xFDA
  9739                           fsr2l	equ	0xFD9
  9740                           status	equ	0xFD8
  9741                           
  9742 ;; *************** function ___ftmul *****************
  9743 ;; Defined at:
  9744 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;  f1              3   12[BANK0 ] float 
  9747 ;;  f2              3   15[BANK0 ] float 
  9748 ;; Auto vars:     Size  Location     Type
  9749 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  9750 ;;  sign            1   26[BANK0 ] unsigned char 
  9751 ;;  cntr            1   25[BANK0 ] unsigned char 
  9752 ;;  exp             1   21[BANK0 ] unsigned char 
  9753 ;; Return value:  Size  Location     Type
  9754 ;;                  3   12[BANK0 ] float 
  9755 ;; Registers used:
  9756 ;;		wreg, status,2, status,0, cstack
  9757 ;; Tracked objects:
  9758 ;;		On entry : 0/0
  9759 ;;		On exit  : 0/0
  9760 ;;		Unchanged: 0/0
  9761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9762 ;;      Params:         0       6       0       0       0       0       0
  9763 ;;      Locals:         0       6       0       0       0       0       0
  9764 ;;      Temps:          0       3       0       0       0       0       0
  9765 ;;      Totals:         0      15       0       0       0       0       0
  9766 ;;Total ram usage:       15 bytes
  9767 ;; Hardware stack levels used:    1
  9768 ;; Hardware stack levels required when called:    5
  9769 ;; This function calls:
  9770 ;;		___ftpack
  9771 ;; This function is called by:
  9772 ;;		_Battery_Convert
  9773 ;;		_Battery_Filter
  9774 ;;		_Temp_Filter
  9775 ;;		_Temp_Convert
  9776 ;;		_fround
  9777 ;;		_scale
  9778 ;;		_printf
  9779 ;;		_log
  9780 ;;		_eval_poly
  9781 ;; This function uses a non-reentrant model
  9782 ;;
  9783                           
  9784                           	psect	text42
  9785  00298C                     __ptext42:
  9786                           	opt stack 0
  9787  00298C                     ___ftmul:
  9788                           	opt stack 23
  9789                           
  9790                           ;incstack = 0
  9791  00298C  0100               	movlb	0	; () banked
  9792  00298E  C06E  F072         	movff	___ftmul@f1+2,??___ftmul
  9793  002992  0100               	movlb	0	; () banked
  9794  002994  6B73               	clrf	(??___ftmul+1)& (0+255),b
  9795  002996  6B74               	clrf	(??___ftmul+2)& (0+255),b
  9796  002998  0100               	movlb	0	; () banked
  9797  00299A  356D               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9798  00299C  0100               	movlb	0	; () banked
  9799  00299E  3772               	rlcf	??___ftmul& (0+255),f,b
  9800  0029A0  E301               	bnc	u4821
  9801  0029A2  8173               	bsf	(??___ftmul+1)& (0+255),0,b
  9802  0029A4                     u4821:
  9803  0029A4  0100               	movlb	0	; () banked
  9804  0029A6  5172               	movf	??___ftmul& (0+255),w,b
  9805  0029A8  0100               	movlb	0	; () banked
  9806  0029AA  6F75               	movwf	___ftmul@exp& (0+255),b
  9807  0029AC  0100               	movlb	0	; () banked
  9808  0029AE  6775               	tstfsz	___ftmul@exp& (0+255),b
  9809  0029B0  D00A               	goto	l4686
  9810                           
  9811                           ; BSR set to: 0
  9812  0029B2  0E00               	movlw	0
  9813  0029B4  0100               	movlb	0	; () banked
  9814  0029B6  6F6C               	movwf	?___ftmul& (0+255),b
  9815  0029B8  0E00               	movlw	0
  9816  0029BA  0100               	movlb	0	; () banked
  9817  0029BC  6F6D               	movwf	(?___ftmul+1)& (0+255),b
  9818  0029BE  0E00               	movlw	0
  9819  0029C0  0100               	movlb	0	; () banked
  9820  0029C2  6F6E               	movwf	(?___ftmul+2)& (0+255),b
  9821  0029C4  0012               	return	
  9822  0029C6                     l4686:
  9823                           
  9824                           ; BSR set to: 0
  9825  0029C6  0100               	movlb	0	; () banked
  9826  0029C8  C071  F072         	movff	___ftmul@f2+2,??___ftmul
  9827  0029CC  0100               	movlb	0	; () banked
  9828  0029CE  6B73               	clrf	(??___ftmul+1)& (0+255),b
  9829  0029D0  6B74               	clrf	(??___ftmul+2)& (0+255),b
  9830  0029D2  0100               	movlb	0	; () banked
  9831  0029D4  3570               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  9832  0029D6  0100               	movlb	0	; () banked
  9833  0029D8  3772               	rlcf	??___ftmul& (0+255),f,b
  9834  0029DA  E301               	bnc	u4841
  9835  0029DC  8173               	bsf	(??___ftmul+1)& (0+255),0,b
  9836  0029DE                     u4841:
  9837  0029DE  0100               	movlb	0	; () banked
  9838  0029E0  5172               	movf	??___ftmul& (0+255),w,b
  9839  0029E2  0100               	movlb	0	; () banked
  9840  0029E4  6F7A               	movwf	___ftmul@sign& (0+255),b
  9841  0029E6  0100               	movlb	0	; () banked
  9842  0029E8  677A               	tstfsz	___ftmul@sign& (0+255),b
  9843  0029EA  D00A               	goto	l4692
  9844                           
  9845                           ; BSR set to: 0
  9846  0029EC  0E00               	movlw	0
  9847  0029EE  0100               	movlb	0	; () banked
  9848  0029F0  6F6C               	movwf	?___ftmul& (0+255),b
  9849  0029F2  0E00               	movlw	0
  9850  0029F4  0100               	movlb	0	; () banked
  9851  0029F6  6F6D               	movwf	(?___ftmul+1)& (0+255),b
  9852  0029F8  0E00               	movlw	0
  9853  0029FA  0100               	movlb	0	; () banked
  9854  0029FC  6F6E               	movwf	(?___ftmul+2)& (0+255),b
  9855  0029FE  0012               	return	
  9856  002A00                     l4692:
  9857                           
  9858                           ; BSR set to: 0
  9859  002A00  0100               	movlb	0	; () banked
  9860  002A02  517A               	movf	___ftmul@sign& (0+255),w,b
  9861  002A04  0F7B               	addlw	123
  9862  002A06  0100               	movlb	0	; () banked
  9863  002A08  2775               	addwf	___ftmul@exp& (0+255),f,b
  9864                           
  9865                           ; BSR set to: 0
  9866  002A0A  C06E  F07A         	movff	___ftmul@f1+2,___ftmul@sign
  9867  002A0E  0100               	movlb	0	; () banked
  9868  002A10  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
  9869  002A12  0100               	movlb	0	; () banked
  9870  002A14  1B7A               	xorwf	___ftmul@sign& (0+255),f,b
  9871  002A16  0E80               	movlw	128
  9872  002A18  0100               	movlb	0	; () banked
  9873  002A1A  177A               	andwf	___ftmul@sign& (0+255),f,b
  9874                           
  9875                           ; BSR set to: 0
  9876  002A1C  0100               	movlb	0	; () banked
  9877  002A1E  8F6D               	bsf	(___ftmul@f1+1)& (0+255),7,b
  9878                           
  9879                           ; BSR set to: 0
  9880  002A20  0100               	movlb	0	; () banked
  9881  002A22  8F70               	bsf	(___ftmul@f2+1)& (0+255),7,b
  9882                           
  9883                           ; BSR set to: 0
  9884  002A24  0EFF               	movlw	255
  9885  002A26  0100               	movlb	0	; () banked
  9886  002A28  176F               	andwf	___ftmul@f2& (0+255),f,b
  9887  002A2A  0EFF               	movlw	255
  9888  002A2C  0100               	movlb	0	; () banked
  9889  002A2E  1770               	andwf	(___ftmul@f2+1)& (0+255),f,b
  9890  002A30  0E00               	movlw	0
  9891  002A32  0100               	movlb	0	; () banked
  9892  002A34  1771               	andwf	(___ftmul@f2+2)& (0+255),f,b
  9893                           
  9894                           ; BSR set to: 0
  9895  002A36  0E00               	movlw	0
  9896  002A38  0100               	movlb	0	; () banked
  9897  002A3A  6F76               	movwf	___ftmul@f3_as_product& (0+255),b
  9898  002A3C  0E00               	movlw	0
  9899  002A3E  0100               	movlb	0	; () banked
  9900  002A40  6F77               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9901  002A42  0E00               	movlw	0
  9902  002A44  0100               	movlb	0	; () banked
  9903  002A46  6F78               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9904                           
  9905                           ; BSR set to: 0
  9906  002A48  0E07               	movlw	7
  9907  002A4A  0100               	movlb	0	; () banked
  9908  002A4C  6F79               	movwf	___ftmul@cntr& (0+255),b
  9909  002A4E                     l4706:
  9910                           
  9911                           ; BSR set to: 0
  9912  002A4E  0100               	movlb	0	; () banked
  9913  002A50  A16C               	btfss	___ftmul@f1& (0+255),0,b
  9914  002A52  D00C               	goto	l4710
  9915                           
  9916                           ; BSR set to: 0
  9917  002A54  0100               	movlb	0	; () banked
  9918  002A56  516F               	movf	___ftmul@f2& (0+255),w,b
  9919  002A58  0100               	movlb	0	; () banked
  9920  002A5A  2776               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9921  002A5C  0100               	movlb	0	; () banked
  9922  002A5E  5170               	movf	(___ftmul@f2+1)& (0+255),w,b
  9923  002A60  0100               	movlb	0	; () banked
  9924  002A62  2377               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9925  002A64  0100               	movlb	0	; () banked
  9926  002A66  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
  9927  002A68  0100               	movlb	0	; () banked
  9928  002A6A  2378               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9929  002A6C                     l4710:
  9930                           
  9931                           ; BSR set to: 0
  9932  002A6C  0100               	movlb	0	; () banked
  9933  002A6E  90D8               	bcf	status,0,c
  9934  002A70  0100               	movlb	0	; () banked
  9935  002A72  336E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9936  002A74  0100               	movlb	0	; () banked
  9937  002A76  336D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9938  002A78  0100               	movlb	0	; () banked
  9939  002A7A  336C               	rrcf	___ftmul@f1& (0+255),f,b
  9940  002A7C  0100               	movlb	0	; () banked
  9941  002A7E  90D8               	bcf	status,0,c
  9942  002A80  0100               	movlb	0	; () banked
  9943  002A82  376F               	rlcf	___ftmul@f2& (0+255),f,b
  9944  002A84  0100               	movlb	0	; () banked
  9945  002A86  3770               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  9946  002A88  0100               	movlb	0	; () banked
  9947  002A8A  3771               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  9948                           
  9949                           ; BSR set to: 0
  9950  002A8C  0100               	movlb	0	; () banked
  9951  002A8E  2F79               	decfsz	___ftmul@cntr& (0+255),f,b
  9952  002A90  D7DE               	goto	l4706
  9953                           
  9954                           ; BSR set to: 0
  9955                           
  9956                           ; BSR set to: 0
  9957  002A92  0E09               	movlw	9
  9958  002A94  0100               	movlb	0	; () banked
  9959  002A96  6F79               	movwf	___ftmul@cntr& (0+255),b
  9960  002A98                     l4716:
  9961                           
  9962                           ; BSR set to: 0
  9963  002A98  0100               	movlb	0	; () banked
  9964  002A9A  A16C               	btfss	___ftmul@f1& (0+255),0,b
  9965  002A9C  D00C               	goto	l4720
  9966                           
  9967                           ; BSR set to: 0
  9968  002A9E  0100               	movlb	0	; () banked
  9969  002AA0  516F               	movf	___ftmul@f2& (0+255),w,b
  9970  002AA2  0100               	movlb	0	; () banked
  9971  002AA4  2776               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9972  002AA6  0100               	movlb	0	; () banked
  9973  002AA8  5170               	movf	(___ftmul@f2+1)& (0+255),w,b
  9974  002AAA  0100               	movlb	0	; () banked
  9975  002AAC  2377               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9976  002AAE  0100               	movlb	0	; () banked
  9977  002AB0  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
  9978  002AB2  0100               	movlb	0	; () banked
  9979  002AB4  2378               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9980  002AB6                     l4720:
  9981                           
  9982                           ; BSR set to: 0
  9983  002AB6  0100               	movlb	0	; () banked
  9984  002AB8  90D8               	bcf	status,0,c
  9985  002ABA  0100               	movlb	0	; () banked
  9986  002ABC  336E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9987  002ABE  0100               	movlb	0	; () banked
  9988  002AC0  336D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9989  002AC2  0100               	movlb	0	; () banked
  9990  002AC4  336C               	rrcf	___ftmul@f1& (0+255),f,b
  9991  002AC6  0100               	movlb	0	; () banked
  9992  002AC8  90D8               	bcf	status,0,c
  9993  002ACA  0100               	movlb	0	; () banked
  9994  002ACC  3378               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9995  002ACE  0100               	movlb	0	; () banked
  9996  002AD0  3377               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9997  002AD2  0100               	movlb	0	; () banked
  9998  002AD4  3376               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9999                           
 10000                           ; BSR set to: 0
 10001  002AD6  0100               	movlb	0	; () banked
 10002  002AD8  2F79               	decfsz	___ftmul@cntr& (0+255),f,b
 10003  002ADA  D7DE               	goto	l4716
 10004                           
 10005                           ; BSR set to: 0
 10006                           
 10007                           ; BSR set to: 0
 10008  002ADC  C076  F01B         	movff	___ftmul@f3_as_product,___ftpack@arg
 10009  002AE0  C077  F01C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10010  002AE4  C078  F01D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10011  002AE8  C075  F01E         	movff	___ftmul@exp,___ftpack@exp
 10012  002AEC  C07A  F01F         	movff	___ftmul@sign,___ftpack@sign
 10013  002AF0  EC43  F01B         	call	___ftpack	;wreg free
 10014  002AF4  C01B  F06C         	movff	?___ftpack,?___ftmul
 10015  002AF8  C01C  F06D         	movff	?___ftpack+1,?___ftmul+1
 10016  002AFC  C01D  F06E         	movff	?___ftpack+2,?___ftmul+2
 10017  002B00  0012               	return	
 10018  002B02                     __end_of___ftmul:
 10019                           	opt stack 0
 10020                           tblptru	equ	0xFF8
 10021                           tblptrh	equ	0xFF7
 10022                           tblptrl	equ	0xFF6
 10023                           tablat	equ	0xFF5
 10024                           prodh	equ	0xFF4
 10025                           prodl	equ	0xFF3
 10026                           intcon	equ	0xFF2
 10027                           intcon2	equ	0xFF1
 10028                           postinc0	equ	0xFEE
 10029                           wreg	equ	0xFE8
 10030                           postinc1	equ	0xFE6
 10031                           postdec1	equ	0xFE5
 10032                           fsr1h	equ	0xFE2
 10033                           fsr1l	equ	0xFE1
 10034                           indf2	equ	0xFDF
 10035                           postinc2	equ	0xFDE
 10036                           postdec2	equ	0xFDD
 10037                           fsr2h	equ	0xFDA
 10038                           fsr2l	equ	0xFD9
 10039                           status	equ	0xFD8
 10040                           
 10041 ;; *************** function ___ftadd *****************
 10042 ;; Defined at:
 10043 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
 10044 ;; Parameters:    Size  Location     Type
 10045 ;;  f1              3   37[BANK0 ] float 
 10046 ;;  f2              3   40[BANK0 ] float 
 10047 ;; Auto vars:     Size  Location     Type
 10048 ;;  exp1            1   48[BANK0 ] unsigned char 
 10049 ;;  exp2            1   47[BANK0 ] unsigned char 
 10050 ;;  sign            1   46[BANK0 ] unsigned char 
 10051 ;; Return value:  Size  Location     Type
 10052 ;;                  3   37[BANK0 ] float 
 10053 ;; Registers used:
 10054 ;;		wreg, status,2, status,0, cstack
 10055 ;; Tracked objects:
 10056 ;;		On entry : 0/0
 10057 ;;		On exit  : 0/0
 10058 ;;		Unchanged: 0/0
 10059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10060 ;;      Params:         0       6       0       0       0       0       0
 10061 ;;      Locals:         0       3       0       0       0       0       0
 10062 ;;      Temps:          0       3       0       0       0       0       0
 10063 ;;      Totals:         0      12       0       0       0       0       0
 10064 ;;Total ram usage:       12 bytes
 10065 ;; Hardware stack levels used:    1
 10066 ;; Hardware stack levels required when called:    5
 10067 ;; This function calls:
 10068 ;;		___ftpack
 10069 ;; This function is called by:
 10070 ;;		_Battery_Convert
 10071 ;;		_Battery_Filter
 10072 ;;		_Temp_Filter
 10073 ;;		_Temp_Convert
 10074 ;;		_printf
 10075 ;;		___ftsub
 10076 ;;		_log
 10077 ;;		_eval_poly
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           	psect	text43
 10082  00206C                     __ptext43:
 10083                           	opt stack 0
 10084  00206C                     ___ftadd:
 10085                           	opt stack 23
 10086                           
 10087                           ;incstack = 0
 10088  00206C  0100               	movlb	0	; () banked
 10089  00206E  C087  F08B         	movff	___ftadd@f1+2,??___ftadd
 10090  002072  0100               	movlb	0	; () banked
 10091  002074  6B8C               	clrf	(??___ftadd+1)& (0+255),b
 10092  002076  6B8D               	clrf	(??___ftadd+2)& (0+255),b
 10093  002078  0100               	movlb	0	; () banked
 10094  00207A  3586               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10095  00207C  0100               	movlb	0	; () banked
 10096  00207E  378B               	rlcf	??___ftadd& (0+255),f,b
 10097  002080  E301               	bnc	u4611
 10098  002082  818C               	bsf	(??___ftadd+1)& (0+255),0,b
 10099  002084                     u4611:
 10100  002084  0100               	movlb	0	; () banked
 10101  002086  518B               	movf	??___ftadd& (0+255),w,b
 10102  002088  0100               	movlb	0	; () banked
 10103  00208A  6F90               	movwf	___ftadd@exp1& (0+255),b
 10104  00208C  0100               	movlb	0	; () banked
 10105  00208E  C08A  F08B         	movff	___ftadd@f2+2,??___ftadd
 10106  002092  0100               	movlb	0	; () banked
 10107  002094  6B8C               	clrf	(??___ftadd+1)& (0+255),b
 10108  002096  6B8D               	clrf	(??___ftadd+2)& (0+255),b
 10109  002098  0100               	movlb	0	; () banked
 10110  00209A  3589               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10111  00209C  0100               	movlb	0	; () banked
 10112  00209E  378B               	rlcf	??___ftadd& (0+255),f,b
 10113  0020A0  E301               	bnc	u4621
 10114  0020A2  818C               	bsf	(??___ftadd+1)& (0+255),0,b
 10115  0020A4                     u4621:
 10116  0020A4  0100               	movlb	0	; () banked
 10117  0020A6  518B               	movf	??___ftadd& (0+255),w,b
 10118  0020A8  0100               	movlb	0	; () banked
 10119  0020AA  6F8F               	movwf	___ftadd@exp2& (0+255),b
 10120                           
 10121                           ; BSR set to: 0
 10122  0020AC  0100               	movlb	0	; () banked
 10123  0020AE  5190               	movf	___ftadd@exp1& (0+255),w,b
 10124  0020B0  B4D8               	btfsc	status,2,c
 10125  0020B2  D012               	goto	l1076
 10126                           
 10127                           ; BSR set to: 0
 10128  0020B4  0100               	movlb	0	; () banked
 10129  0020B6  518F               	movf	___ftadd@exp2& (0+255),w,b
 10130  0020B8  0100               	movlb	0	; () banked
 10131  0020BA  5D90               	subwf	___ftadd@exp1& (0+255),w,b
 10132  0020BC  B0D8               	btfsc	status,0,c
 10133  0020BE  D013               	goto	l4618
 10134                           
 10135                           ; BSR set to: 0
 10136  0020C0  0100               	movlb	0	; () banked
 10137  0020C2  5190               	movf	___ftadd@exp1& (0+255),w,b
 10138  0020C4  0800               	sublw	0
 10139  0020C6  0100               	movlb	0	; () banked
 10140  0020C8  258F               	addwf	___ftadd@exp2& (0+255),w,b
 10141  0020CA  0100               	movlb	0	; () banked
 10142  0020CC  6F8B               	movwf	??___ftadd& (0+255),b
 10143  0020CE  0E19               	movlw	25
 10144  0020D0  0100               	movlb	0	; () banked
 10145  0020D2  5D8B               	subwf	??___ftadd& (0+255),w,b
 10146  0020D4  A0D8               	btfss	status,0,c
 10147  0020D6  D007               	goto	l4618
 10148  0020D8                     l1076:
 10149                           
 10150                           ; BSR set to: 0
 10151  0020D8  C088  F085         	movff	___ftadd@f2,?___ftadd
 10152  0020DC  C089  F086         	movff	___ftadd@f2+1,?___ftadd+1
 10153  0020E0  C08A  F087         	movff	___ftadd@f2+2,?___ftadd+2
 10154  0020E4  0012               	return	
 10155  0020E6                     l4618:
 10156                           
 10157                           ; BSR set to: 0
 10158  0020E6  0100               	movlb	0	; () banked
 10159  0020E8  518F               	movf	___ftadd@exp2& (0+255),w,b
 10160  0020EA  B4D8               	btfsc	status,2,c
 10161  0020EC  D012               	goto	l1080
 10162                           
 10163                           ; BSR set to: 0
 10164  0020EE  0100               	movlb	0	; () banked
 10165  0020F0  5190               	movf	___ftadd@exp1& (0+255),w,b
 10166  0020F2  0100               	movlb	0	; () banked
 10167  0020F4  5D8F               	subwf	___ftadd@exp2& (0+255),w,b
 10168  0020F6  B0D8               	btfsc	status,0,c
 10169  0020F8  D013               	goto	l4624
 10170                           
 10171                           ; BSR set to: 0
 10172  0020FA  0100               	movlb	0	; () banked
 10173  0020FC  518F               	movf	___ftadd@exp2& (0+255),w,b
 10174  0020FE  0800               	sublw	0
 10175  002100  0100               	movlb	0	; () banked
 10176  002102  2590               	addwf	___ftadd@exp1& (0+255),w,b
 10177  002104  0100               	movlb	0	; () banked
 10178  002106  6F8B               	movwf	??___ftadd& (0+255),b
 10179  002108  0E19               	movlw	25
 10180  00210A  0100               	movlb	0	; () banked
 10181  00210C  5D8B               	subwf	??___ftadd& (0+255),w,b
 10182  00210E  A0D8               	btfss	status,0,c
 10183  002110  D007               	goto	l4624
 10184  002112                     l1080:
 10185                           
 10186                           ; BSR set to: 0
 10187  002112  C085  F085         	movff	___ftadd@f1,?___ftadd
 10188  002116  C086  F086         	movff	___ftadd@f1+1,?___ftadd+1
 10189  00211A  C087  F087         	movff	___ftadd@f1+2,?___ftadd+2
 10190  00211E  0012               	return	
 10191  002120                     l4624:
 10192                           
 10193                           ; BSR set to: 0
 10194  002120  0E06               	movlw	6
 10195  002122  0100               	movlb	0	; () banked
 10196  002124  6F8E               	movwf	___ftadd@sign& (0+255),b
 10197                           
 10198                           ; BSR set to: 0
 10199  002126  0100               	movlb	0	; () banked
 10200  002128  AF87               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10201  00212A  D002               	goto	l4630
 10202                           
 10203                           ; BSR set to: 0
 10204  00212C  0100               	movlb	0	; () banked
 10205  00212E  8F8E               	bsf	___ftadd@sign& (0+255),7,b
 10206  002130                     l4630:
 10207                           
 10208                           ; BSR set to: 0
 10209  002130  0100               	movlb	0	; () banked
 10210  002132  AF8A               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10211  002134  D002               	goto	l1082
 10212                           
 10213                           ; BSR set to: 0
 10214  002136  0100               	movlb	0	; () banked
 10215  002138  8D8E               	bsf	___ftadd@sign& (0+255),6,b
 10216  00213A                     l1082:
 10217                           
 10218                           ; BSR set to: 0
 10219  00213A  0100               	movlb	0	; () banked
 10220  00213C  8F86               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10221                           
 10222                           ; BSR set to: 0
 10223  00213E  0EFF               	movlw	255
 10224  002140  0100               	movlb	0	; () banked
 10225  002142  1785               	andwf	___ftadd@f1& (0+255),f,b
 10226  002144  0EFF               	movlw	255
 10227  002146  0100               	movlb	0	; () banked
 10228  002148  1786               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10229  00214A  0E00               	movlw	0
 10230  00214C  0100               	movlb	0	; () banked
 10231  00214E  1787               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10232  002150  0100               	movlb	0	; () banked
 10233  002152  8F89               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10234                           
 10235                           ; BSR set to: 0
 10236  002154  0EFF               	movlw	255
 10237  002156  0100               	movlb	0	; () banked
 10238  002158  1788               	andwf	___ftadd@f2& (0+255),f,b
 10239  00215A  0EFF               	movlw	255
 10240  00215C  0100               	movlb	0	; () banked
 10241  00215E  1789               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10242  002160  0E00               	movlw	0
 10243  002162  0100               	movlb	0	; () banked
 10244  002164  178A               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10245                           
 10246                           ; BSR set to: 0
 10247  002166  0100               	movlb	0	; () banked
 10248  002168  518F               	movf	___ftadd@exp2& (0+255),w,b
 10249  00216A  0100               	movlb	0	; () banked
 10250  00216C  5D90               	subwf	___ftadd@exp1& (0+255),w,b
 10251  00216E  B0D8               	btfsc	status,0,c
 10252  002170  D02A               	goto	l4650
 10253  002172                     l4640:
 10254                           
 10255                           ; BSR set to: 0
 10256  002172  0100               	movlb	0	; () banked
 10257  002174  90D8               	bcf	status,0,c
 10258  002176  0100               	movlb	0	; () banked
 10259  002178  3788               	rlcf	___ftadd@f2& (0+255),f,b
 10260  00217A  0100               	movlb	0	; () banked
 10261  00217C  3789               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10262  00217E  0100               	movlb	0	; () banked
 10263  002180  378A               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10264  002182  0100               	movlb	0	; () banked
 10265  002184  078F               	decf	___ftadd@exp2& (0+255),f,b
 10266                           
 10267                           ; BSR set to: 0
 10268  002186  0100               	movlb	0	; () banked
 10269  002188  518F               	movf	___ftadd@exp2& (0+255),w,b
 10270  00218A  0100               	movlb	0	; () banked
 10271  00218C  1990               	xorwf	___ftadd@exp1& (0+255),w,b
 10272  00218E  B4D8               	btfsc	status,2,c
 10273  002190  D014               	goto	l4648
 10274                           
 10275                           ; BSR set to: 0
 10276  002192  0100               	movlb	0	; () banked
 10277  002194  078E               	decf	___ftadd@sign& (0+255),f,b
 10278  002196  C08E  F08B         	movff	___ftadd@sign,??___ftadd
 10279  00219A  0E07               	movlw	7
 10280  00219C  0100               	movlb	0	; () banked
 10281  00219E  178B               	andwf	??___ftadd& (0+255),f,b
 10282  0021A0  B4D8               	btfsc	status,2,c
 10283  0021A2  D00B               	goto	l4648
 10284  0021A4  D7E6               	goto	l4640
 10285  0021A6                     l4646:
 10286                           
 10287                           ; BSR set to: 0
 10288  0021A6  0100               	movlb	0	; () banked
 10289  0021A8  90D8               	bcf	status,0,c
 10290  0021AA  0100               	movlb	0	; () banked
 10291  0021AC  3387               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10292  0021AE  0100               	movlb	0	; () banked
 10293  0021B0  3386               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10294  0021B2  0100               	movlb	0	; () banked
 10295  0021B4  3385               	rrcf	___ftadd@f1& (0+255),f,b
 10296  0021B6  0100               	movlb	0	; () banked
 10297  0021B8  2B90               	incf	___ftadd@exp1& (0+255),f,b
 10298  0021BA                     l4648:
 10299                           
 10300                           ; BSR set to: 0
 10301  0021BA  0100               	movlb	0	; () banked
 10302  0021BC  518F               	movf	___ftadd@exp2& (0+255),w,b
 10303  0021BE  0100               	movlb	0	; () banked
 10304  0021C0  6390               	cpfseq	___ftadd@exp1& (0+255),b
 10305  0021C2  D7F1               	goto	l4646
 10306  0021C4  D02F               	goto	l1091
 10307  0021C6                     l4650:
 10308                           
 10309                           ; BSR set to: 0
 10310  0021C6  0100               	movlb	0	; () banked
 10311  0021C8  5190               	movf	___ftadd@exp1& (0+255),w,b
 10312  0021CA  0100               	movlb	0	; () banked
 10313  0021CC  5D8F               	subwf	___ftadd@exp2& (0+255),w,b
 10314  0021CE  B0D8               	btfsc	status,0,c
 10315  0021D0  D029               	goto	l1091
 10316  0021D2                     l4652:
 10317                           
 10318                           ; BSR set to: 0
 10319  0021D2  0100               	movlb	0	; () banked
 10320  0021D4  90D8               	bcf	status,0,c
 10321  0021D6  0100               	movlb	0	; () banked
 10322  0021D8  3785               	rlcf	___ftadd@f1& (0+255),f,b
 10323  0021DA  0100               	movlb	0	; () banked
 10324  0021DC  3786               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10325  0021DE  0100               	movlb	0	; () banked
 10326  0021E0  3787               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10327  0021E2  0100               	movlb	0	; () banked
 10328  0021E4  0790               	decf	___ftadd@exp1& (0+255),f,b
 10329                           
 10330                           ; BSR set to: 0
 10331  0021E6  0100               	movlb	0	; () banked
 10332  0021E8  518F               	movf	___ftadd@exp2& (0+255),w,b
 10333  0021EA  0100               	movlb	0	; () banked
 10334  0021EC  1990               	xorwf	___ftadd@exp1& (0+255),w,b
 10335  0021EE  B4D8               	btfsc	status,2,c
 10336  0021F0  D014               	goto	l4660
 10337                           
 10338                           ; BSR set to: 0
 10339  0021F2  0100               	movlb	0	; () banked
 10340  0021F4  078E               	decf	___ftadd@sign& (0+255),f,b
 10341  0021F6  C08E  F08B         	movff	___ftadd@sign,??___ftadd
 10342  0021FA  0E07               	movlw	7
 10343  0021FC  0100               	movlb	0	; () banked
 10344  0021FE  178B               	andwf	??___ftadd& (0+255),f,b
 10345  002200  B4D8               	btfsc	status,2,c
 10346  002202  D00B               	goto	l4660
 10347  002204  D7E6               	goto	l4652
 10348  002206                     l4658:
 10349                           
 10350                           ; BSR set to: 0
 10351  002206  0100               	movlb	0	; () banked
 10352  002208  90D8               	bcf	status,0,c
 10353  00220A  0100               	movlb	0	; () banked
 10354  00220C  338A               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10355  00220E  0100               	movlb	0	; () banked
 10356  002210  3389               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10357  002212  0100               	movlb	0	; () banked
 10358  002214  3388               	rrcf	___ftadd@f2& (0+255),f,b
 10359  002216  0100               	movlb	0	; () banked
 10360  002218  2B8F               	incf	___ftadd@exp2& (0+255),f,b
 10361  00221A                     l4660:
 10362                           
 10363                           ; BSR set to: 0
 10364  00221A  0100               	movlb	0	; () banked
 10365  00221C  518F               	movf	___ftadd@exp2& (0+255),w,b
 10366  00221E  0100               	movlb	0	; () banked
 10367  002220  6390               	cpfseq	___ftadd@exp1& (0+255),b
 10368  002222  D7F1               	goto	l4658
 10369  002224                     l1091:
 10370                           
 10371                           ; BSR set to: 0
 10372  002224  0100               	movlb	0	; () banked
 10373  002226  AF8E               	btfss	___ftadd@sign& (0+255),7,b
 10374  002228  D012               	goto	l1100
 10375                           
 10376                           ; BSR set to: 0
 10377  00222A  0EFF               	movlw	255
 10378  00222C  0100               	movlb	0	; () banked
 10379  00222E  1B85               	xorwf	___ftadd@f1& (0+255),f,b
 10380  002230  0EFF               	movlw	255
 10381  002232  0100               	movlb	0	; () banked
 10382  002234  1B86               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10383  002236  0EFF               	movlw	255
 10384  002238  0100               	movlb	0	; () banked
 10385  00223A  1B87               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10386  00223C  0E01               	movlw	1
 10387  00223E  0100               	movlb	0	; () banked
 10388  002240  2785               	addwf	___ftadd@f1& (0+255),f,b
 10389  002242  0E00               	movlw	0
 10390  002244  0100               	movlb	0	; () banked
 10391  002246  2386               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10392  002248  0E00               	movlw	0
 10393  00224A  0100               	movlb	0	; () banked
 10394  00224C  2387               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10395  00224E                     l1100:
 10396                           
 10397                           ; BSR set to: 0
 10398  00224E  0100               	movlb	0	; () banked
 10399  002250  AD8E               	btfss	___ftadd@sign& (0+255),6,b
 10400  002252  D012               	goto	l4666
 10401                           
 10402                           ; BSR set to: 0
 10403  002254  0EFF               	movlw	255
 10404  002256  0100               	movlb	0	; () banked
 10405  002258  1B88               	xorwf	___ftadd@f2& (0+255),f,b
 10406  00225A  0EFF               	movlw	255
 10407  00225C  0100               	movlb	0	; () banked
 10408  00225E  1B89               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10409  002260  0EFF               	movlw	255
 10410  002262  0100               	movlb	0	; () banked
 10411  002264  1B8A               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10412  002266  0E01               	movlw	1
 10413  002268  0100               	movlb	0	; () banked
 10414  00226A  2788               	addwf	___ftadd@f2& (0+255),f,b
 10415  00226C  0E00               	movlw	0
 10416  00226E  0100               	movlb	0	; () banked
 10417  002270  2389               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10418  002272  0E00               	movlw	0
 10419  002274  0100               	movlb	0	; () banked
 10420  002276  238A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10421  002278                     l4666:
 10422                           
 10423                           ; BSR set to: 0
 10424  002278  0E00               	movlw	0
 10425  00227A  0100               	movlb	0	; () banked
 10426  00227C  6F8E               	movwf	___ftadd@sign& (0+255),b
 10427                           
 10428                           ; BSR set to: 0
 10429  00227E  0100               	movlb	0	; () banked
 10430  002280  5185               	movf	___ftadd@f1& (0+255),w,b
 10431  002282  0100               	movlb	0	; () banked
 10432  002284  2788               	addwf	___ftadd@f2& (0+255),f,b
 10433  002286  0100               	movlb	0	; () banked
 10434  002288  5186               	movf	(___ftadd@f1+1)& (0+255),w,b
 10435  00228A  0100               	movlb	0	; () banked
 10436  00228C  2389               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10437  00228E  0100               	movlb	0	; () banked
 10438  002290  5187               	movf	(___ftadd@f1+2)& (0+255),w,b
 10439  002292  0100               	movlb	0	; () banked
 10440  002294  238A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10441                           
 10442                           ; BSR set to: 0
 10443  002296  0100               	movlb	0	; () banked
 10444  002298  AF8A               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10445  00229A  D015               	goto	l4676
 10446                           
 10447                           ; BSR set to: 0
 10448  00229C  0EFF               	movlw	255
 10449  00229E  0100               	movlb	0	; () banked
 10450  0022A0  1B88               	xorwf	___ftadd@f2& (0+255),f,b
 10451  0022A2  0EFF               	movlw	255
 10452  0022A4  0100               	movlb	0	; () banked
 10453  0022A6  1B89               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10454  0022A8  0EFF               	movlw	255
 10455  0022AA  0100               	movlb	0	; () banked
 10456  0022AC  1B8A               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10457  0022AE  0E01               	movlw	1
 10458  0022B0  0100               	movlb	0	; () banked
 10459  0022B2  2788               	addwf	___ftadd@f2& (0+255),f,b
 10460  0022B4  0E00               	movlw	0
 10461  0022B6  0100               	movlb	0	; () banked
 10462  0022B8  2389               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10463  0022BA  0E00               	movlw	0
 10464  0022BC  0100               	movlb	0	; () banked
 10465  0022BE  238A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10466                           
 10467                           ; BSR set to: 0
 10468  0022C0  0E01               	movlw	1
 10469  0022C2  0100               	movlb	0	; () banked
 10470  0022C4  6F8E               	movwf	___ftadd@sign& (0+255),b
 10471  0022C6                     l4676:
 10472                           
 10473                           ; BSR set to: 0
 10474  0022C6  C088  F01B         	movff	___ftadd@f2,___ftpack@arg
 10475  0022CA  C089  F01C         	movff	___ftadd@f2+1,___ftpack@arg+1
 10476  0022CE  C08A  F01D         	movff	___ftadd@f2+2,___ftpack@arg+2
 10477  0022D2  C090  F01E         	movff	___ftadd@exp1,___ftpack@exp
 10478  0022D6  C08E  F01F         	movff	___ftadd@sign,___ftpack@sign
 10479  0022DA  EC43  F01B         	call	___ftpack	;wreg free
 10480  0022DE  C01B  F085         	movff	?___ftpack,?___ftadd
 10481  0022E2  C01C  F086         	movff	?___ftpack+1,?___ftadd+1
 10482  0022E6  C01D  F087         	movff	?___ftpack+2,?___ftadd+2
 10483  0022EA  0012               	return	
 10484  0022EC                     __end_of___ftadd:
 10485                           	opt stack 0
 10486                           tblptru	equ	0xFF8
 10487                           tblptrh	equ	0xFF7
 10488                           tblptrl	equ	0xFF6
 10489                           tablat	equ	0xFF5
 10490                           prodh	equ	0xFF4
 10491                           prodl	equ	0xFF3
 10492                           intcon	equ	0xFF2
 10493                           intcon2	equ	0xFF1
 10494                           postinc0	equ	0xFEE
 10495                           wreg	equ	0xFE8
 10496                           postinc1	equ	0xFE6
 10497                           postdec1	equ	0xFE5
 10498                           fsr1h	equ	0xFE2
 10499                           fsr1l	equ	0xFE1
 10500                           indf2	equ	0xFDF
 10501                           postinc2	equ	0xFDE
 10502                           postdec2	equ	0xFDD
 10503                           fsr2h	equ	0xFDA
 10504                           fsr2l	equ	0xFD9
 10505                           status	equ	0xFD8
 10506                           
 10507 ;; *************** function ___ftpack *****************
 10508 ;; Defined at:
 10509 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
 10510 ;; Parameters:    Size  Location     Type
 10511 ;;  arg             3   26[COMRAM] unsigned um
 10512 ;;  exp             1   29[COMRAM] unsigned char 
 10513 ;;  sign            1   30[COMRAM] unsigned char 
 10514 ;; Auto vars:     Size  Location     Type
 10515 ;;		None
 10516 ;; Return value:  Size  Location     Type
 10517 ;;                  3   26[COMRAM] float 
 10518 ;; Registers used:
 10519 ;;		wreg, status,2, status,0
 10520 ;; Tracked objects:
 10521 ;;		On entry : 0/0
 10522 ;;		On exit  : 0/0
 10523 ;;		Unchanged: 0/0
 10524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10525 ;;      Params:         5       0       0       0       0       0       0
 10526 ;;      Locals:         0       0       0       0       0       0       0
 10527 ;;      Temps:          3       0       0       0       0       0       0
 10528 ;;      Totals:         8       0       0       0       0       0       0
 10529 ;;Total ram usage:        8 bytes
 10530 ;; Hardware stack levels used:    1
 10531 ;; Hardware stack levels required when called:    4
 10532 ;; This function calls:
 10533 ;;		Nothing
 10534 ;; This function is called by:
 10535 ;;		___altoft
 10536 ;;		___awtoft
 10537 ;;		___ftadd
 10538 ;;		___ftdiv
 10539 ;;		___ftmul
 10540 ;;		___lltoft
 10541 ;; This function uses a non-reentrant model
 10542 ;;
 10543                           
 10544                           	psect	text44
 10545  003686                     __ptext44:
 10546                           	opt stack 0
 10547  003686                     ___ftpack:
 10548                           	opt stack 23
 10549                           
 10550                           ;incstack = 0
 10551  003686  501E               	movf	___ftpack@exp,w,c
 10552  003688  B4D8               	btfsc	status,2,c
 10553  00368A  D005               	goto	l4574
 10554  00368C  501B               	movf	___ftpack@arg,w,c
 10555  00368E  101C               	iorwf	___ftpack@arg+1,w,c
 10556  003690  101D               	iorwf	___ftpack@arg+2,w,c
 10557  003692  A4D8               	btfss	status,2,c
 10558  003694  D00C               	goto	l4580
 10559  003696                     l4574:
 10560  003696  0E00               	movlw	0
 10561  003698  6E1B               	movwf	?___ftpack,c
 10562  00369A  0E00               	movlw	0
 10563  00369C  6E1C               	movwf	?___ftpack+1,c
 10564  00369E  0E00               	movlw	0
 10565  0036A0  6E1D               	movwf	?___ftpack+2,c
 10566  0036A2  0012               	return	
 10567  0036A4                     l4578:
 10568  0036A4  2A1E               	incf	___ftpack@exp,f,c
 10569  0036A6  90D8               	bcf	status,0,c
 10570  0036A8  321D               	rrcf	___ftpack@arg+2,f,c
 10571  0036AA  321C               	rrcf	___ftpack@arg+1,f,c
 10572  0036AC  321B               	rrcf	___ftpack@arg,f,c
 10573  0036AE                     l4580:
 10574  0036AE  0E00               	movlw	0
 10575  0036B0  141B               	andwf	___ftpack@arg,w,c
 10576  0036B2  6E20               	movwf	??___ftpack& (0+255),c
 10577  0036B4  0E00               	movlw	0
 10578  0036B6  141C               	andwf	___ftpack@arg+1,w,c
 10579  0036B8  6E21               	movwf	(??___ftpack+1)& (0+255),c
 10580  0036BA  0EFE               	movlw	254
 10581  0036BC  141D               	andwf	___ftpack@arg+2,w,c
 10582  0036BE  6E22               	movwf	(??___ftpack+2)& (0+255),c
 10583  0036C0  5020               	movf	??___ftpack,w,c
 10584  0036C2  1021               	iorwf	??___ftpack+1,w,c
 10585  0036C4  1022               	iorwf	??___ftpack+2,w,c
 10586  0036C6  B4D8               	btfsc	status,2,c
 10587  0036C8  D00C               	goto	l4586
 10588  0036CA  D7EC               	goto	l4578
 10589  0036CC                     l4582:
 10590  0036CC  2A1E               	incf	___ftpack@exp,f,c
 10591  0036CE  0E01               	movlw	1
 10592  0036D0  261B               	addwf	___ftpack@arg,f,c
 10593  0036D2  0E00               	movlw	0
 10594  0036D4  221C               	addwfc	___ftpack@arg+1,f,c
 10595  0036D6  0E00               	movlw	0
 10596  0036D8  221D               	addwfc	___ftpack@arg+2,f,c
 10597  0036DA  90D8               	bcf	status,0,c
 10598  0036DC  321D               	rrcf	___ftpack@arg+2,f,c
 10599  0036DE  321C               	rrcf	___ftpack@arg+1,f,c
 10600  0036E0  321B               	rrcf	___ftpack@arg,f,c
 10601  0036E2                     l4586:
 10602  0036E2  0E00               	movlw	0
 10603  0036E4  141B               	andwf	___ftpack@arg,w,c
 10604  0036E6  6E20               	movwf	??___ftpack& (0+255),c
 10605  0036E8  0E00               	movlw	0
 10606  0036EA  141C               	andwf	___ftpack@arg+1,w,c
 10607  0036EC  6E21               	movwf	(??___ftpack+1)& (0+255),c
 10608  0036EE  0EFF               	movlw	255
 10609  0036F0  141D               	andwf	___ftpack@arg+2,w,c
 10610  0036F2  6E22               	movwf	(??___ftpack+2)& (0+255),c
 10611  0036F4  5020               	movf	??___ftpack,w,c
 10612  0036F6  1021               	iorwf	??___ftpack+1,w,c
 10613  0036F8  1022               	iorwf	??___ftpack+2,w,c
 10614  0036FA  B4D8               	btfsc	status,2,c
 10615  0036FC  D006               	goto	l4590
 10616  0036FE  D7E6               	goto	l4582
 10617  003700                     l4588:
 10618  003700  061E               	decf	___ftpack@exp,f,c
 10619  003702  90D8               	bcf	status,0,c
 10620  003704  361B               	rlcf	___ftpack@arg,f,c
 10621  003706  361C               	rlcf	___ftpack@arg+1,f,c
 10622  003708  361D               	rlcf	___ftpack@arg+2,f,c
 10623  00370A                     l4590:
 10624  00370A  AE1C               	btfss	___ftpack@arg+1,7,c
 10625  00370C  D7F9               	goto	l4588
 10626  00370E  A01E               	btfss	___ftpack@exp,0,c
 10627  003710  9E1C               	bcf	___ftpack@arg+1,7,c
 10628  003712  90D8               	bcf	status,0,c
 10629  003714  321E               	rrcf	___ftpack@exp,f,c
 10630  003716  501E               	movf	___ftpack@exp,w,c
 10631  003718  121D               	iorwf	___ftpack@arg+2,f,c
 10632  00371A  501F               	movf	___ftpack@sign,w,c
 10633  00371C  A4D8               	btfss	status,2,c
 10634  00371E  8E1D               	bsf	___ftpack@arg+2,7,c
 10635  003720  C01B  F01B         	movff	___ftpack@arg,?___ftpack
 10636  003724  C01C  F01C         	movff	___ftpack@arg+1,?___ftpack+1
 10637  003728  C01D  F01D         	movff	___ftpack@arg+2,?___ftpack+2
 10638  00372C  0012               	return	
 10639  00372E                     __end_of___ftpack:
 10640                           	opt stack 0
 10641                           tblptru	equ	0xFF8
 10642                           tblptrh	equ	0xFF7
 10643                           tblptrl	equ	0xFF6
 10644                           tablat	equ	0xFF5
 10645                           prodh	equ	0xFF4
 10646                           prodl	equ	0xFF3
 10647                           intcon	equ	0xFF2
 10648                           intcon2	equ	0xFF1
 10649                           postinc0	equ	0xFEE
 10650                           wreg	equ	0xFE8
 10651                           postinc1	equ	0xFE6
 10652                           postdec1	equ	0xFE5
 10653                           fsr1h	equ	0xFE2
 10654                           fsr1l	equ	0xFE1
 10655                           indf2	equ	0xFDF
 10656                           postinc2	equ	0xFDE
 10657                           postdec2	equ	0xFDD
 10658                           fsr2h	equ	0xFDA
 10659                           fsr2l	equ	0xFD9
 10660                           status	equ	0xFD8
 10661                           
 10662 ;; *************** function _INTERRUPT_InterruptManager *****************
 10663 ;; Defined at:
 10664 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
 10665 ;; Parameters:    Size  Location     Type
 10666 ;;		None
 10667 ;; Auto vars:     Size  Location     Type
 10668 ;;		None
 10669 ;; Return value:  Size  Location     Type
 10670 ;;		None               void
 10671 ;; Registers used:
 10672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10673 ;; Tracked objects:
 10674 ;;		On entry : 0/0
 10675 ;;		On exit  : 0/0
 10676 ;;		Unchanged: 0/0
 10677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10678 ;;      Params:         0       0       0       0       0       0       0
 10679 ;;      Locals:         0       0       0       0       0       0       0
 10680 ;;      Temps:         14       0       0       0       0       0       0
 10681 ;;      Totals:        14       0       0       0       0       0       0
 10682 ;;Total ram usage:       14 bytes
 10683 ;; Hardware stack levels used:    1
 10684 ;; Hardware stack levels required when called:    3
 10685 ;; This function calls:
 10686 ;;		_ADC_ISR
 10687 ;;		_EUSART1_Receive_ISR
 10688 ;;		_EUSART1_Transmit_ISR
 10689 ;;		_TMR1_ISR
 10690 ;; This function is called by:
 10691 ;;		Interrupt level 2
 10692 ;; This function uses a non-reentrant model
 10693 ;;
 10694                           
 10695                           	psect	intcode
 10696  000008                     __pintcode:
 10697                           	opt stack 0
 10698  000008                     _INTERRUPT_InterruptManager:
 10699                           	opt stack 22
 10700                           
 10701                           ;incstack = 0
 10702  000008  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
 10703  00000C  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 10704  000010  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 10705  000014  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 10706  000018  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 10707  00001C  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 10708  000020  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 10709  000024  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 10710  000028  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
 10711  00002C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
 10712  000030  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 10713  000034  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 10714  000038  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 10715  00003C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
 10716                           
 10717                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 10718  000040  BA9D               	btfsc	3997,5,c	;volatile
 10719  000042  AA9E               	btfss	3998,5,c	;volatile
 10720  000044  D003               	goto	i2l278
 10721                           
 10722                           ;interrupt_manager.c: 73: {
 10723                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
 10724  000046  ECAB  F01E         	call	_EUSART1_Receive_ISR	;wreg free
 10725                           
 10726                           ;interrupt_manager.c: 75: }
 10727  00004A  D011               	goto	i2l286
 10728  00004C                     i2l278:
 10729                           
 10730                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 10731  00004C  BC9D               	btfsc	3997,6,c	;volatile
 10732  00004E  AC9E               	btfss	3998,6,c	;volatile
 10733  000050  D003               	goto	i2l280
 10734                           
 10735                           ;interrupt_manager.c: 77: {
 10736                           ;interrupt_manager.c: 78: ADC_ISR();
 10737  000052  EC96  F009         	call	_ADC_ISR	;wreg free
 10738                           
 10739                           ;interrupt_manager.c: 79: }
 10740  000056  D00B               	goto	i2l286
 10741  000058                     i2l280:
 10742                           
 10743                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 10744  000058  B09D               	btfsc	3997,0,c	;volatile
 10745  00005A  A09E               	btfss	3998,0,c	;volatile
 10746  00005C  D003               	goto	i2l282
 10747                           
 10748                           ;interrupt_manager.c: 81: {
 10749                           ;interrupt_manager.c: 82: TMR1_ISR();
 10750  00005E  ECA8  F01D         	call	_TMR1_ISR	;wreg free
 10751                           
 10752                           ;interrupt_manager.c: 83: }
 10753  000062  D005               	goto	i2l286
 10754  000064                     i2l282:
 10755                           
 10756                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 10757  000064  B89D               	btfsc	3997,4,c	;volatile
 10758  000066  A89E               	btfss	3998,4,c	;volatile
 10759  000068  D002               	goto	i2l286
 10760                           
 10761                           ;interrupt_manager.c: 85: {
 10762                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
 10763  00006A  EC93  F01E         	call	_EUSART1_Transmit_ISR	;wreg free
 10764  00006E                     i2l286:
 10765  00006E  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 10766  000072  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 10767  000076  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 10768  00007A  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 10769  00007E  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 10770  000082  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 10771  000086  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 10772  00008A  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 10773  00008E  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 10774  000092  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 10775  000096  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 10776  00009A  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 10777  00009E  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 10778  0000A2  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 10779  0000A6  0011               	retfie		f
 10780  0000A8                     __end_of_INTERRUPT_InterruptManager:
 10781                           	opt stack 0
 10782                           pclatu	equ	0xFFB
 10783                           pclath	equ	0xFFA
 10784                           tblptru	equ	0xFF8
 10785                           tblptrh	equ	0xFF7
 10786                           tblptrl	equ	0xFF6
 10787                           tablat	equ	0xFF5
 10788                           prodh	equ	0xFF4
 10789                           prodl	equ	0xFF3
 10790                           intcon	equ	0xFF2
 10791                           intcon2	equ	0xFF1
 10792                           postinc0	equ	0xFEE
 10793                           fsr0h	equ	0xFEA
 10794                           fsr0l	equ	0xFE9
 10795                           wreg	equ	0xFE8
 10796                           postinc1	equ	0xFE6
 10797                           postdec1	equ	0xFE5
 10798                           fsr1h	equ	0xFE2
 10799                           fsr1l	equ	0xFE1
 10800                           indf2	equ	0xFDF
 10801                           postinc2	equ	0xFDE
 10802                           postdec2	equ	0xFDD
 10803                           fsr2h	equ	0xFDA
 10804                           fsr2l	equ	0xFD9
 10805                           status	equ	0xFD8
 10806                           
 10807 ;; *************** function _TMR1_ISR *****************
 10808 ;; Defined at:
 10809 ;;		line 112 in file "mcc_generated_files/tmr1.c"
 10810 ;; Parameters:    Size  Location     Type
 10811 ;;		None
 10812 ;; Auto vars:     Size  Location     Type
 10813 ;;		None
 10814 ;; Return value:  Size  Location     Type
 10815 ;;		None               void
 10816 ;; Registers used:
 10817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10818 ;; Tracked objects:
 10819 ;;		On entry : 0/0
 10820 ;;		On exit  : 0/0
 10821 ;;		Unchanged: 0/0
 10822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10823 ;;      Params:         0       0       0       0       0       0       0
 10824 ;;      Locals:         0       0       0       0       0       0       0
 10825 ;;      Temps:          3       0       0       0       0       0       0
 10826 ;;      Totals:         3       0       0       0       0       0       0
 10827 ;;Total ram usage:        3 bytes
 10828 ;; Hardware stack levels used:    1
 10829 ;; Hardware stack levels required when called:    2
 10830 ;; This function calls:
 10831 ;;		_Battery_Read
 10832 ;;		_Temp_Read
 10833 ;; This function is called by:
 10834 ;;		_INTERRUPT_InterruptManager
 10835 ;; This function uses a non-reentrant model
 10836 ;;
 10837                           
 10838                           	psect	text46
 10839  003B50                     __ptext46:
 10840                           	opt stack 0
 10841  003B50                     _TMR1_ISR:
 10842                           	opt stack 22
 10843                           
 10844                           ;tmr1.c: 116: PIR1bits.TMR1IF = 0;
 10845                           
 10846                           ;incstack = 0
 10847  003B50  909E               	bcf	3998,0,c	;volatile
 10848                           
 10849                           ;tmr1.c: 119: TMR1H = (timer1ReloadVal >> 8);
 10850  003B52  C044  F003         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
 10851  003B56  C003  F004         	movff	??_TMR1_ISR,??_TMR1_ISR+1
 10852  003B5A  6A05               	clrf	(??_TMR1_ISR+2)& (0+255),c
 10853  003B5C  5004               	movf	??_TMR1_ISR+1,w,c
 10854  003B5E  6ECF               	movwf	4047,c	;volatile
 10855                           
 10856                           ;tmr1.c: 120: TMR1L = (uint8_t) timer1ReloadVal;
 10857  003B60  C043  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 10858                           
 10859                           ;tmr1.c: 123: if (++CountCallBack >= 4)
 10860  003B64  EE20  F03A         	lfsr	2,_CountCallBack
 10861  003B68  2ADE               	incf	postinc2,f,c
 10862  003B6A  0E00               	movlw	0
 10863  003B6C  22DD               	addwfc	postdec2,f,c
 10864  003B6E  52DE               	movf	postinc2,f,c
 10865  003B70  50DD               	movf	postdec2,w,c
 10866  003B72  0A80               	xorlw	128
 10867  003B74  0F80               	addlw	128
 10868  003B76  0E04               	movlw	4
 10869  003B78  B4D8               	btfsc	status,2,c
 10870  003B7A  5CDF               	subwf	indf2,w,c
 10871  003B7C  A0D8               	btfss	status,0,c
 10872  003B7E  D005               	goto	i2l3852
 10873                           
 10874                           ;tmr1.c: 124: {
 10875                           ;tmr1.c: 126: do { LATA4 = ~LATA4; } while(0);
 10876  003B80  7889               	btg	3977,4,c	;volatile
 10877                           
 10878                           ;tmr1.c: 129: CountCallBack = 0;
 10879  003B82  0E00               	movlw	0
 10880  003B84  6E3B               	movwf	_CountCallBack+1,c
 10881  003B86  0E00               	movlw	0
 10882  003B88  6E3A               	movwf	_CountCallBack,c
 10883  003B8A                     i2l3852:
 10884                           
 10885                           ;tmr1.c: 134: }
 10886                           ;tmr1.c: 135: if(CountCallBack == 2)
 10887  003B8A  503A               	movf	_CountCallBack,w,c
 10888  003B8C  0A02               	xorlw	2
 10889  003B8E  103B               	iorwf	_CountCallBack+1,w,c
 10890  003B90  B4D8               	btfsc	status,2,c
 10891                           
 10892                           ;tmr1.c: 136: {
 10893                           ;tmr1.c: 137: Battery_Read();
 10894  003B92  EC6A  F01F         	call	_Battery_Read	;wreg free
 10895                           
 10896                           ;tmr1.c: 138: }
 10897                           ;tmr1.c: 139: if(CountCallBack == 3)
 10898  003B96  503A               	movf	_CountCallBack,w,c
 10899  003B98  0A03               	xorlw	3
 10900  003B9A  103B               	iorwf	_CountCallBack+1,w,c
 10901  003B9C  A4D8               	btfss	status,2,c
 10902  003B9E  0012               	return	
 10903                           
 10904                           ;tmr1.c: 140: {
 10905                           ;tmr1.c: 141: Temp_Read();
 10906  003BA0  EC5E  F01F         	call	_Temp_Read	;wreg free
 10907  003BA4  0012               	return	
 10908  003BA6                     __end_of_TMR1_ISR:
 10909                           	opt stack 0
 10910                           pclatu	equ	0xFFB
 10911                           pclath	equ	0xFFA
 10912                           tblptru	equ	0xFF8
 10913                           tblptrh	equ	0xFF7
 10914                           tblptrl	equ	0xFF6
 10915                           tablat	equ	0xFF5
 10916                           prodh	equ	0xFF4
 10917                           prodl	equ	0xFF3
 10918                           intcon	equ	0xFF2
 10919                           intcon2	equ	0xFF1
 10920                           postinc0	equ	0xFEE
 10921                           fsr0h	equ	0xFEA
 10922                           fsr0l	equ	0xFE9
 10923                           wreg	equ	0xFE8
 10924                           postinc1	equ	0xFE6
 10925                           postdec1	equ	0xFE5
 10926                           fsr1h	equ	0xFE2
 10927                           fsr1l	equ	0xFE1
 10928                           indf2	equ	0xFDF
 10929                           postinc2	equ	0xFDE
 10930                           postdec2	equ	0xFDD
 10931                           fsr2h	equ	0xFDA
 10932                           fsr2l	equ	0xFD9
 10933                           status	equ	0xFD8
 10934                           
 10935 ;; *************** function _Temp_Read *****************
 10936 ;; Defined at:
 10937 ;;		line 36 in file "Tempeture.c"
 10938 ;; Parameters:    Size  Location     Type
 10939 ;;		None
 10940 ;; Auto vars:     Size  Location     Type
 10941 ;;		None
 10942 ;; Return value:  Size  Location     Type
 10943 ;;		None               void
 10944 ;; Registers used:
 10945 ;;		wreg, status,2, status,0, cstack
 10946 ;; Tracked objects:
 10947 ;;		On entry : 0/0
 10948 ;;		On exit  : 0/0
 10949 ;;		Unchanged: 0/0
 10950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10951 ;;      Params:         0       0       0       0       0       0       0
 10952 ;;      Locals:         0       0       0       0       0       0       0
 10953 ;;      Temps:          0       0       0       0       0       0       0
 10954 ;;      Totals:         0       0       0       0       0       0       0
 10955 ;;Total ram usage:        0 bytes
 10956 ;; Hardware stack levels used:    1
 10957 ;; Hardware stack levels required when called:    1
 10958 ;; This function calls:
 10959 ;;		_ADC_StartConversion
 10960 ;; This function is called by:
 10961 ;;		_TMR1_ISR
 10962 ;; This function uses a non-reentrant model
 10963 ;;
 10964                           
 10965                           	psect	text47
 10966  003EBC                     __ptext47:
 10967                           	opt stack 0
 10968  003EBC                     _Temp_Read:
 10969                           	opt stack 22
 10970                           
 10971                           ;Tempeture.c: 39: ADC_Buffer_Point = 0;
 10972                           
 10973                           ;incstack = 0
 10974  003EBC  0E00               	movlw	0
 10975  003EBE  6E39               	movwf	_ADC_Buffer_Point+1,c
 10976  003EC0  0E00               	movlw	0
 10977  003EC2  6E38               	movwf	_ADC_Buffer_Point,c
 10978                           
 10979                           ;Tempeture.c: 40: Temp_Aquire = 1;
 10980  003EC4  0E01               	movlw	1
 10981  003EC6  6E3C               	movwf	_Temp_Aquire,c
 10982                           
 10983                           ;Tempeture.c: 41: ADCON1 = 0x80;
 10984  003EC8  0E80               	movlw	128
 10985  003ECA  6EC1               	movwf	4033,c	;volatile
 10986                           
 10987                           ;Tempeture.c: 42: ADC_StartConversion(Temp1);
 10988  003ECC  0E0E               	movlw	14
 10989  003ECE  EC45  F01F         	call	_ADC_StartConversion
 10990  003ED2  0012               	return	
 10991  003ED4                     __end_of_Temp_Read:
 10992                           	opt stack 0
 10993                           pclatu	equ	0xFFB
 10994                           pclath	equ	0xFFA
 10995                           tblptru	equ	0xFF8
 10996                           tblptrh	equ	0xFF7
 10997                           tblptrl	equ	0xFF6
 10998                           tablat	equ	0xFF5
 10999                           prodh	equ	0xFF4
 11000                           prodl	equ	0xFF3
 11001                           intcon	equ	0xFF2
 11002                           intcon2	equ	0xFF1
 11003                           postinc0	equ	0xFEE
 11004                           fsr0h	equ	0xFEA
 11005                           fsr0l	equ	0xFE9
 11006                           wreg	equ	0xFE8
 11007                           postinc1	equ	0xFE6
 11008                           postdec1	equ	0xFE5
 11009                           fsr1h	equ	0xFE2
 11010                           fsr1l	equ	0xFE1
 11011                           indf2	equ	0xFDF
 11012                           postinc2	equ	0xFDE
 11013                           postdec2	equ	0xFDD
 11014                           fsr2h	equ	0xFDA
 11015                           fsr2l	equ	0xFD9
 11016                           status	equ	0xFD8
 11017                           
 11018 ;; *************** function _Battery_Read *****************
 11019 ;; Defined at:
 11020 ;;		line 18 in file "Battery.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;		None
 11023 ;; Auto vars:     Size  Location     Type
 11024 ;;		None
 11025 ;; Return value:  Size  Location     Type
 11026 ;;		None               void
 11027 ;; Registers used:
 11028 ;;		wreg, status,2, status,0, cstack
 11029 ;; Tracked objects:
 11030 ;;		On entry : 0/0
 11031 ;;		On exit  : 0/0
 11032 ;;		Unchanged: 0/0
 11033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11034 ;;      Params:         0       0       0       0       0       0       0
 11035 ;;      Locals:         0       0       0       0       0       0       0
 11036 ;;      Temps:          0       0       0       0       0       0       0
 11037 ;;      Totals:         0       0       0       0       0       0       0
 11038 ;;Total ram usage:        0 bytes
 11039 ;; Hardware stack levels used:    1
 11040 ;; Hardware stack levels required when called:    1
 11041 ;; This function calls:
 11042 ;;		_ADC_StartConversion
 11043 ;; This function is called by:
 11044 ;;		_TMR1_ISR
 11045 ;; This function uses a non-reentrant model
 11046 ;;
 11047                           
 11048                           	psect	text48
 11049  003ED4                     __ptext48:
 11050                           	opt stack 0
 11051  003ED4                     _Battery_Read:
 11052                           	opt stack 22
 11053                           
 11054                           ;Battery.c: 21: ADC_Buffer_Point = 0;
 11055                           
 11056                           ;incstack = 0
 11057  003ED4  0E00               	movlw	0
 11058  003ED6  6E39               	movwf	_ADC_Buffer_Point+1,c
 11059  003ED8  0E00               	movlw	0
 11060  003EDA  6E38               	movwf	_ADC_Buffer_Point,c
 11061                           
 11062                           ;Battery.c: 22: Volt_Aquire = 1;
 11063  003EDC  0E01               	movlw	1
 11064  003EDE  6E3D               	movwf	_Volt_Aquire,c
 11065                           
 11066                           ;Battery.c: 23: ADCON1 = 0x80;
 11067  003EE0  0E80               	movlw	128
 11068  003EE2  6EC1               	movwf	4033,c	;volatile
 11069                           
 11070                           ;Battery.c: 24: ADC_StartConversion(Battery1);
 11071  003EE4  0E01               	movlw	1
 11072  003EE6  EC45  F01F         	call	_ADC_StartConversion
 11073  003EEA  0012               	return	
 11074  003EEC                     __end_of_Battery_Read:
 11075                           	opt stack 0
 11076                           pclatu	equ	0xFFB
 11077                           pclath	equ	0xFFA
 11078                           tblptru	equ	0xFF8
 11079                           tblptrh	equ	0xFF7
 11080                           tblptrl	equ	0xFF6
 11081                           tablat	equ	0xFF5
 11082                           prodh	equ	0xFF4
 11083                           prodl	equ	0xFF3
 11084                           intcon	equ	0xFF2
 11085                           intcon2	equ	0xFF1
 11086                           postinc0	equ	0xFEE
 11087                           fsr0h	equ	0xFEA
 11088                           fsr0l	equ	0xFE9
 11089                           wreg	equ	0xFE8
 11090                           postinc1	equ	0xFE6
 11091                           postdec1	equ	0xFE5
 11092                           fsr1h	equ	0xFE2
 11093                           fsr1l	equ	0xFE1
 11094                           indf2	equ	0xFDF
 11095                           postinc2	equ	0xFDE
 11096                           postdec2	equ	0xFDD
 11097                           fsr2h	equ	0xFDA
 11098                           fsr2l	equ	0xFD9
 11099                           status	equ	0xFD8
 11100                           
 11101 ;; *************** function _EUSART1_Transmit_ISR *****************
 11102 ;; Defined at:
 11103 ;;		line 173 in file "mcc_generated_files/eusart1.c"
 11104 ;; Parameters:    Size  Location     Type
 11105 ;;		None
 11106 ;; Auto vars:     Size  Location     Type
 11107 ;;		None
 11108 ;; Return value:  Size  Location     Type
 11109 ;;		None               void
 11110 ;; Registers used:
 11111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11112 ;; Tracked objects:
 11113 ;;		On entry : 0/0
 11114 ;;		On exit  : 0/0
 11115 ;;		Unchanged: 0/0
 11116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11117 ;;      Params:         0       0       0       0       0       0       0
 11118 ;;      Locals:         0       0       0       0       0       0       0
 11119 ;;      Temps:          0       0       0       0       0       0       0
 11120 ;;      Totals:         0       0       0       0       0       0       0
 11121 ;;Total ram usage:        0 bytes
 11122 ;; Hardware stack levels used:    1
 11123 ;; This function calls:
 11124 ;;		Nothing
 11125 ;; This function is called by:
 11126 ;;		_INTERRUPT_InterruptManager
 11127 ;; This function uses a non-reentrant model
 11128 ;;
 11129                           
 11130                           	psect	text49
 11131  003D26                     __ptext49:
 11132                           	opt stack 0
 11133  003D26                     _EUSART1_Transmit_ISR:
 11134                           	opt stack 24
 11135                           
 11136                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 11137                           
 11138                           ;incstack = 0
 11139  003D26  0E08               	movlw	8
 11140  003D28  5C45               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
 11141  003D2A  B0D8               	btfsc	status,0,c
 11142  003D2C  D012               	goto	i2l130
 11143                           
 11144                           ;eusart1.c: 178: {
 11145                           ;eusart1.c: 179: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 11146  003D2E  5042               	movf	_eusart1TxTail,w,c
 11147  003D30  0D01               	mullw	1
 11148  003D32  0E30               	movlw	low _eusart1TxBuffer
 11149  003D34  24F3               	addwf	prodl,w,c
 11150  003D36  6ED9               	movwf	fsr2l,c
 11151  003D38  0E00               	movlw	high _eusart1TxBuffer
 11152  003D3A  20F4               	addwfc	prodh,w,c
 11153  003D3C  6EDA               	movwf	fsr2h,c
 11154  003D3E  50DF               	movf	indf2,w,c
 11155  003D40  6EAD               	movwf	4013,c	;volatile
 11156  003D42  2A42               	incf	_eusart1TxTail,f,c
 11157                           
 11158                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 11159  003D44  0E07               	movlw	7
 11160  003D46  6442               	cpfsgt	_eusart1TxTail,c
 11161  003D48  D002               	goto	i2l2272
 11162                           
 11163                           ;eusart1.c: 181: {
 11164                           ;eusart1.c: 182: eusart1TxTail = 0;
 11165  003D4A  0E00               	movlw	0
 11166  003D4C  6E42               	movwf	_eusart1TxTail,c
 11167  003D4E                     i2l2272:
 11168                           
 11169                           ;eusart1.c: 183: }
 11170                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
 11171  003D4E  2A45               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 11172                           
 11173                           ;eusart1.c: 185: }
 11174  003D50  0012               	return	
 11175  003D52                     i2l130:
 11176                           
 11177                           ;eusart1.c: 186: else
 11178                           ;eusart1.c: 187: {
 11179                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
 11180  003D52  989D               	bcf	3997,4,c	;volatile
 11181  003D54  0012               	return	
 11182  003D56                     __end_of_EUSART1_Transmit_ISR:
 11183                           	opt stack 0
 11184                           pclatu	equ	0xFFB
 11185                           pclath	equ	0xFFA
 11186                           tblptru	equ	0xFF8
 11187                           tblptrh	equ	0xFF7
 11188                           tblptrl	equ	0xFF6
 11189                           tablat	equ	0xFF5
 11190                           prodh	equ	0xFF4
 11191                           prodl	equ	0xFF3
 11192                           intcon	equ	0xFF2
 11193                           intcon2	equ	0xFF1
 11194                           postinc0	equ	0xFEE
 11195                           fsr0h	equ	0xFEA
 11196                           fsr0l	equ	0xFE9
 11197                           wreg	equ	0xFE8
 11198                           postinc1	equ	0xFE6
 11199                           postdec1	equ	0xFE5
 11200                           fsr1h	equ	0xFE2
 11201                           fsr1l	equ	0xFE1
 11202                           indf2	equ	0xFDF
 11203                           postinc2	equ	0xFDE
 11204                           postdec2	equ	0xFDD
 11205                           fsr2h	equ	0xFDA
 11206                           fsr2l	equ	0xFD9
 11207                           status	equ	0xFD8
 11208                           
 11209 ;; *************** function _EUSART1_Receive_ISR *****************
 11210 ;; Defined at:
 11211 ;;		line 192 in file "mcc_generated_files/eusart1.c"
 11212 ;; Parameters:    Size  Location     Type
 11213 ;;		None
 11214 ;; Auto vars:     Size  Location     Type
 11215 ;;		None
 11216 ;; Return value:  Size  Location     Type
 11217 ;;		None               void
 11218 ;; Registers used:
 11219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11220 ;; Tracked objects:
 11221 ;;		On entry : 0/0
 11222 ;;		On exit  : 0/0
 11223 ;;		Unchanged: 0/0
 11224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11225 ;;      Params:         0       0       0       0       0       0       0
 11226 ;;      Locals:         0       0       0       0       0       0       0
 11227 ;;      Temps:          0       0       0       0       0       0       0
 11228 ;;      Totals:         0       0       0       0       0       0       0
 11229 ;;Total ram usage:        0 bytes
 11230 ;; Hardware stack levels used:    1
 11231 ;; This function calls:
 11232 ;;		Nothing
 11233 ;; This function is called by:
 11234 ;;		_INTERRUPT_InterruptManager
 11235 ;; This function uses a non-reentrant model
 11236 ;;
 11237                           
 11238                           	psect	text50
 11239  003D56                     __ptext50:
 11240                           	opt stack 0
 11241  003D56                     _EUSART1_Receive_ISR:
 11242                           	opt stack 24
 11243                           
 11244                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
 11245                           
 11246                           ;incstack = 0
 11247  003D56  A2AB               	btfss	4011,1,c	;volatile
 11248  003D58  D002               	goto	i2l3884
 11249                           
 11250                           ;eusart1.c: 195: {
 11251                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
 11252  003D5A  98AB               	bcf	4011,4,c	;volatile
 11253                           
 11254                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
 11255  003D5C  88AB               	bsf	4011,4,c	;volatile
 11256  003D5E                     i2l3884:
 11257                           
 11258                           ;eusart1.c: 200: }
 11259                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 11260  003D5E  503F               	movf	_eusart1RxHead,w,c
 11261  003D60  0D01               	mullw	1
 11262  003D62  0101               	movlb	1	; () banked
 11263  003D64  0E00               	movlw	low _eusart1RxBuffer
 11264  003D66  24F3               	addwf	prodl,w,c
 11265  003D68  6ED9               	movwf	fsr2l,c
 11266  003D6A  0101               	movlb	1	; () banked
 11267  003D6C  0E01               	movlw	high _eusart1RxBuffer
 11268  003D6E  20F4               	addwfc	prodh,w,c
 11269  003D70  6EDA               	movwf	fsr2h,c
 11270  003D72  CFAE FFDF          	movff	4014,indf2	;volatile
 11271                           
 11272                           ; BSR set to: 1
 11273  003D76  2A3F               	incf	_eusart1RxHead,f,c
 11274                           
 11275                           ; BSR set to: 1
 11276                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 11277  003D78  0E31               	movlw	49
 11278  003D7A  643F               	cpfsgt	_eusart1RxHead,c
 11279  003D7C  D002               	goto	i2l3892
 11280                           
 11281                           ; BSR set to: 1
 11282                           ;eusart1.c: 205: {
 11283                           ;eusart1.c: 206: eusart1RxHead = 0;
 11284  003D7E  0E00               	movlw	0
 11285  003D80  6E3F               	movwf	_eusart1RxHead,c
 11286  003D82                     i2l3892:
 11287                           
 11288                           ; BSR set to: 1
 11289                           ;eusart1.c: 207: }
 11290                           ;eusart1.c: 208: eusart1RxCount++;
 11291  003D82  2A3E               	incf	_eusart1RxCount,f,c	;volatile
 11292                           
 11293                           ; BSR set to: 1
 11294  003D84  0012               	return	
 11295  003D86                     __end_of_EUSART1_Receive_ISR:
 11296                           	opt stack 0
 11297                           pclatu	equ	0xFFB
 11298                           pclath	equ	0xFFA
 11299                           tblptru	equ	0xFF8
 11300                           tblptrh	equ	0xFF7
 11301                           tblptrl	equ	0xFF6
 11302                           tablat	equ	0xFF5
 11303                           prodh	equ	0xFF4
 11304                           prodl	equ	0xFF3
 11305                           intcon	equ	0xFF2
 11306                           intcon2	equ	0xFF1
 11307                           postinc0	equ	0xFEE
 11308                           fsr0h	equ	0xFEA
 11309                           fsr0l	equ	0xFE9
 11310                           wreg	equ	0xFE8
 11311                           postinc1	equ	0xFE6
 11312                           postdec1	equ	0xFE5
 11313                           fsr1h	equ	0xFE2
 11314                           fsr1l	equ	0xFE1
 11315                           indf2	equ	0xFDF
 11316                           postinc2	equ	0xFDE
 11317                           postdec2	equ	0xFDD
 11318                           fsr2h	equ	0xFDA
 11319                           fsr2l	equ	0xFD9
 11320                           status	equ	0xFD8
 11321                           
 11322 ;; *************** function _ADC_ISR *****************
 11323 ;; Defined at:
 11324 ;;		line 82 in file "mcc_generated_files/adc.c"
 11325 ;; Parameters:    Size  Location     Type
 11326 ;;		None
 11327 ;; Auto vars:     Size  Location     Type
 11328 ;;  ADC_Result      2   10[COMRAM] int 
 11329 ;; Return value:  Size  Location     Type
 11330 ;;		None               void
 11331 ;; Registers used:
 11332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11333 ;; Tracked objects:
 11334 ;;		On entry : 0/0
 11335 ;;		On exit  : 0/0
 11336 ;;		Unchanged: 0/0
 11337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11338 ;;      Params:         0       0       0       0       0       0       0
 11339 ;;      Locals:         2       0       0       0       0       0       0
 11340 ;;      Temps:          6       0       0       0       0       0       0
 11341 ;;      Totals:         8       0       0       0       0       0       0
 11342 ;;Total ram usage:        8 bytes
 11343 ;; Hardware stack levels used:    1
 11344 ;; Hardware stack levels required when called:    1
 11345 ;; This function calls:
 11346 ;;		_ADC_GetConversionResult
 11347 ;;		_ADC_StartConversion
 11348 ;;		_Set_4051
 11349 ;; This function is called by:
 11350 ;;		_INTERRUPT_InterruptManager
 11351 ;; This function uses a non-reentrant model
 11352 ;;
 11353                           
 11354                           	psect	text51
 11355  00132C                     __ptext51:
 11356                           	opt stack 0
 11357  00132C                     _ADC_ISR:
 11358                           	opt stack 23
 11359                           
 11360                           ;adc.c: 85: PIR1bits.ADIF = 0;
 11361                           
 11362                           ; BSR set to: 1
 11363                           ;incstack = 0
 11364  00132C  9C9E               	bcf	3998,6,c	;volatile
 11365                           
 11366                           ;adc.c: 86: int ADC_Result = 0;
 11367  00132E  0E00               	movlw	0
 11368  001330  6E0C               	movwf	ADC_ISR@ADC_Result+1,c
 11369  001332  0E00               	movlw	0
 11370  001334  6E0B               	movwf	ADC_ISR@ADC_Result,c
 11371                           
 11372                           ;adc.c: 87: if (Temp_Aquire){
 11373  001336  503C               	movf	_Temp_Aquire,w,c
 11374  001338  B4D8               	btfsc	status,2,c
 11375  00133A  D14A               	goto	i2l3968
 11376                           
 11377                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
 11378  00133C  EC76  F01F         	call	_ADC_GetConversionResult	;wreg free
 11379  001340  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 11380  001344  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 11381                           
 11382                           ;adc.c: 90: switch ( ADC_Buffer_Point )
 11383  001348  D117               	goto	i2l3964
 11384  00134A                     i2l3900:
 11385                           
 11386                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11387  00134A  0EE4               	movlw	low _Temp_Adc
 11388  00134C  6E05               	movwf	??_ADC_ISR& (0+255),c
 11389  00134E  0E00               	movlw	high _Temp_Adc
 11390  001350  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11391  001352  90D8               	bcf	status,0,c
 11392  001354  3438               	rlcf	_ADC_Buffer_Point,w,c
 11393  001356  6ED9               	movwf	fsr2l,c
 11394  001358  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11395  00135A  6EDA               	movwf	fsr2h,c
 11396  00135C  5005               	movf	??_ADC_ISR,w,c
 11397  00135E  26D9               	addwf	fsr2l,f,c
 11398  001360  5006               	movf	??_ADC_ISR+1,w,c
 11399  001362  22DA               	addwfc	fsr2h,f,c
 11400  001364  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11401  001368  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11402                           
 11403                           ;adc.c: 94: Set_4051(0);
 11404  00136C  0E00               	movlw	0
 11405  00136E  6E02               	movwf	Set_4051@Channel+1,c
 11406  001370  0E00               	movlw	0
 11407  001372  6E01               	movwf	Set_4051@Channel,c
 11408  001374  ECDA  F01E         	call	_Set_4051	;wreg free
 11409                           
 11410                           ;adc.c: 95: ADC_StartConversion(Temp1);
 11411  001378  0E0E               	movlw	14
 11412  00137A  EC45  F01F         	call	_ADC_StartConversion
 11413                           
 11414                           ;adc.c: 96: break;
 11415  00137E  D126               	goto	i2l3966
 11416  001380                     i2l3906:
 11417                           
 11418                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11419  001380  0EE4               	movlw	low _Temp_Adc
 11420  001382  6E05               	movwf	??_ADC_ISR& (0+255),c
 11421  001384  0E00               	movlw	high _Temp_Adc
 11422  001386  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11423  001388  90D8               	bcf	status,0,c
 11424  00138A  3438               	rlcf	_ADC_Buffer_Point,w,c
 11425  00138C  6ED9               	movwf	fsr2l,c
 11426  00138E  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11427  001390  6EDA               	movwf	fsr2h,c
 11428  001392  5005               	movf	??_ADC_ISR,w,c
 11429  001394  26D9               	addwf	fsr2l,f,c
 11430  001396  5006               	movf	??_ADC_ISR+1,w,c
 11431  001398  22DA               	addwfc	fsr2h,f,c
 11432  00139A  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11433  00139E  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11434                           
 11435                           ;adc.c: 99: Set_4051(1);
 11436  0013A2  0E00               	movlw	0
 11437  0013A4  6E02               	movwf	Set_4051@Channel+1,c
 11438  0013A6  0E01               	movlw	1
 11439  0013A8  6E01               	movwf	Set_4051@Channel,c
 11440  0013AA  ECDA  F01E         	call	_Set_4051	;wreg free
 11441                           
 11442                           ;adc.c: 100: ADC_StartConversion(Temp1);
 11443  0013AE  0E0E               	movlw	14
 11444  0013B0  EC45  F01F         	call	_ADC_StartConversion
 11445                           
 11446                           ;adc.c: 101: break;
 11447  0013B4  D10B               	goto	i2l3966
 11448  0013B6                     i2l3912:
 11449                           
 11450                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11451  0013B6  0EE4               	movlw	low _Temp_Adc
 11452  0013B8  6E05               	movwf	??_ADC_ISR& (0+255),c
 11453  0013BA  0E00               	movlw	high _Temp_Adc
 11454  0013BC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11455  0013BE  90D8               	bcf	status,0,c
 11456  0013C0  3438               	rlcf	_ADC_Buffer_Point,w,c
 11457  0013C2  6ED9               	movwf	fsr2l,c
 11458  0013C4  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11459  0013C6  6EDA               	movwf	fsr2h,c
 11460  0013C8  5005               	movf	??_ADC_ISR,w,c
 11461  0013CA  26D9               	addwf	fsr2l,f,c
 11462  0013CC  5006               	movf	??_ADC_ISR+1,w,c
 11463  0013CE  22DA               	addwfc	fsr2h,f,c
 11464  0013D0  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11465  0013D4  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11466                           
 11467                           ;adc.c: 104: Set_4051(2);
 11468  0013D8  0E00               	movlw	0
 11469  0013DA  6E02               	movwf	Set_4051@Channel+1,c
 11470  0013DC  0E02               	movlw	2
 11471  0013DE  6E01               	movwf	Set_4051@Channel,c
 11472  0013E0  ECDA  F01E         	call	_Set_4051	;wreg free
 11473                           
 11474                           ;adc.c: 105: ADC_StartConversion(Temp1);
 11475  0013E4  0E0E               	movlw	14
 11476  0013E6  EC45  F01F         	call	_ADC_StartConversion
 11477                           
 11478                           ;adc.c: 106: break;
 11479  0013EA  D0F0               	goto	i2l3966
 11480  0013EC                     i2l3918:
 11481                           
 11482                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11483  0013EC  0EE4               	movlw	low _Temp_Adc
 11484  0013EE  6E05               	movwf	??_ADC_ISR& (0+255),c
 11485  0013F0  0E00               	movlw	high _Temp_Adc
 11486  0013F2  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11487  0013F4  90D8               	bcf	status,0,c
 11488  0013F6  3438               	rlcf	_ADC_Buffer_Point,w,c
 11489  0013F8  6ED9               	movwf	fsr2l,c
 11490  0013FA  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11491  0013FC  6EDA               	movwf	fsr2h,c
 11492  0013FE  5005               	movf	??_ADC_ISR,w,c
 11493  001400  26D9               	addwf	fsr2l,f,c
 11494  001402  5006               	movf	??_ADC_ISR+1,w,c
 11495  001404  22DA               	addwfc	fsr2h,f,c
 11496  001406  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11497  00140A  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11498                           
 11499                           ;adc.c: 109: Set_4051(3);
 11500  00140E  0E00               	movlw	0
 11501  001410  6E02               	movwf	Set_4051@Channel+1,c
 11502  001412  0E03               	movlw	3
 11503  001414  6E01               	movwf	Set_4051@Channel,c
 11504  001416  ECDA  F01E         	call	_Set_4051	;wreg free
 11505                           
 11506                           ;adc.c: 110: ADC_StartConversion(Temp1);
 11507  00141A  0E0E               	movlw	14
 11508  00141C  EC45  F01F         	call	_ADC_StartConversion
 11509                           
 11510                           ;adc.c: 111: break;
 11511  001420  D0D5               	goto	i2l3966
 11512  001422                     i2l3924:
 11513                           
 11514                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11515  001422  0EE4               	movlw	low _Temp_Adc
 11516  001424  6E05               	movwf	??_ADC_ISR& (0+255),c
 11517  001426  0E00               	movlw	high _Temp_Adc
 11518  001428  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11519  00142A  90D8               	bcf	status,0,c
 11520  00142C  3438               	rlcf	_ADC_Buffer_Point,w,c
 11521  00142E  6ED9               	movwf	fsr2l,c
 11522  001430  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11523  001432  6EDA               	movwf	fsr2h,c
 11524  001434  5005               	movf	??_ADC_ISR,w,c
 11525  001436  26D9               	addwf	fsr2l,f,c
 11526  001438  5006               	movf	??_ADC_ISR+1,w,c
 11527  00143A  22DA               	addwfc	fsr2h,f,c
 11528  00143C  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11529  001440  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11530                           
 11531                           ;adc.c: 114: Set_4051(4);
 11532  001444  0E00               	movlw	0
 11533  001446  6E02               	movwf	Set_4051@Channel+1,c
 11534  001448  0E04               	movlw	4
 11535  00144A  6E01               	movwf	Set_4051@Channel,c
 11536  00144C  ECDA  F01E         	call	_Set_4051	;wreg free
 11537                           
 11538                           ;adc.c: 115: ADC_StartConversion(Temp1);
 11539  001450  0E0E               	movlw	14
 11540  001452  EC45  F01F         	call	_ADC_StartConversion
 11541                           
 11542                           ;adc.c: 116: break;
 11543  001456  D0BA               	goto	i2l3966
 11544  001458                     i2l3930:
 11545                           
 11546                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11547  001458  0EE4               	movlw	low _Temp_Adc
 11548  00145A  6E05               	movwf	??_ADC_ISR& (0+255),c
 11549  00145C  0E00               	movlw	high _Temp_Adc
 11550  00145E  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11551  001460  90D8               	bcf	status,0,c
 11552  001462  3438               	rlcf	_ADC_Buffer_Point,w,c
 11553  001464  6ED9               	movwf	fsr2l,c
 11554  001466  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11555  001468  6EDA               	movwf	fsr2h,c
 11556  00146A  5005               	movf	??_ADC_ISR,w,c
 11557  00146C  26D9               	addwf	fsr2l,f,c
 11558  00146E  5006               	movf	??_ADC_ISR+1,w,c
 11559  001470  22DA               	addwfc	fsr2h,f,c
 11560  001472  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11561  001476  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11562                           
 11563                           ;adc.c: 119: Set_4051(5);
 11564  00147A  0E00               	movlw	0
 11565  00147C  6E02               	movwf	Set_4051@Channel+1,c
 11566  00147E  0E05               	movlw	5
 11567  001480  6E01               	movwf	Set_4051@Channel,c
 11568  001482  ECDA  F01E         	call	_Set_4051	;wreg free
 11569                           
 11570                           ;adc.c: 120: ADC_StartConversion(Temp1);
 11571  001486  0E0E               	movlw	14
 11572  001488  EC45  F01F         	call	_ADC_StartConversion
 11573                           
 11574                           ;adc.c: 121: break;
 11575  00148C  D09F               	goto	i2l3966
 11576  00148E                     i2l3936:
 11577                           
 11578                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11579  00148E  0EE4               	movlw	low _Temp_Adc
 11580  001490  6E05               	movwf	??_ADC_ISR& (0+255),c
 11581  001492  0E00               	movlw	high _Temp_Adc
 11582  001494  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11583  001496  90D8               	bcf	status,0,c
 11584  001498  3438               	rlcf	_ADC_Buffer_Point,w,c
 11585  00149A  6ED9               	movwf	fsr2l,c
 11586  00149C  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11587  00149E  6EDA               	movwf	fsr2h,c
 11588  0014A0  5005               	movf	??_ADC_ISR,w,c
 11589  0014A2  26D9               	addwf	fsr2l,f,c
 11590  0014A4  5006               	movf	??_ADC_ISR+1,w,c
 11591  0014A6  22DA               	addwfc	fsr2h,f,c
 11592  0014A8  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11593  0014AC  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11594                           
 11595                           ;adc.c: 124: Set_4051(6);
 11596  0014B0  0E00               	movlw	0
 11597  0014B2  6E02               	movwf	Set_4051@Channel+1,c
 11598  0014B4  0E06               	movlw	6
 11599  0014B6  6E01               	movwf	Set_4051@Channel,c
 11600  0014B8  ECDA  F01E         	call	_Set_4051	;wreg free
 11601                           
 11602                           ;adc.c: 125: ADC_StartConversion(Temp1);
 11603  0014BC  0E0E               	movlw	14
 11604  0014BE  EC45  F01F         	call	_ADC_StartConversion
 11605                           
 11606                           ;adc.c: 126: break;
 11607  0014C2  D084               	goto	i2l3966
 11608  0014C4                     i2l3942:
 11609                           
 11610                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11611  0014C4  0EE4               	movlw	low _Temp_Adc
 11612  0014C6  6E05               	movwf	??_ADC_ISR& (0+255),c
 11613  0014C8  0E00               	movlw	high _Temp_Adc
 11614  0014CA  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11615  0014CC  90D8               	bcf	status,0,c
 11616  0014CE  3438               	rlcf	_ADC_Buffer_Point,w,c
 11617  0014D0  6ED9               	movwf	fsr2l,c
 11618  0014D2  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11619  0014D4  6EDA               	movwf	fsr2h,c
 11620  0014D6  5005               	movf	??_ADC_ISR,w,c
 11621  0014D8  26D9               	addwf	fsr2l,f,c
 11622  0014DA  5006               	movf	??_ADC_ISR+1,w,c
 11623  0014DC  22DA               	addwfc	fsr2h,f,c
 11624  0014DE  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11625  0014E2  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11626                           
 11627                           ;adc.c: 129: Set_4051(7);
 11628  0014E6  0E00               	movlw	0
 11629  0014E8  6E02               	movwf	Set_4051@Channel+1,c
 11630  0014EA  0E07               	movlw	7
 11631  0014EC  6E01               	movwf	Set_4051@Channel,c
 11632  0014EE  ECDA  F01E         	call	_Set_4051	;wreg free
 11633                           
 11634                           ;adc.c: 130: ADC_StartConversion(Temp1);
 11635  0014F2  0E0E               	movlw	14
 11636  0014F4  EC45  F01F         	call	_ADC_StartConversion
 11637                           
 11638                           ;adc.c: 131: break;
 11639  0014F8  D069               	goto	i2l3966
 11640  0014FA                     i2l3948:
 11641                           
 11642                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11643  0014FA  0EE4               	movlw	low _Temp_Adc
 11644  0014FC  6E05               	movwf	??_ADC_ISR& (0+255),c
 11645  0014FE  0E00               	movlw	high _Temp_Adc
 11646  001500  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11647  001502  90D8               	bcf	status,0,c
 11648  001504  3438               	rlcf	_ADC_Buffer_Point,w,c
 11649  001506  6ED9               	movwf	fsr2l,c
 11650  001508  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11651  00150A  6EDA               	movwf	fsr2h,c
 11652  00150C  5005               	movf	??_ADC_ISR,w,c
 11653  00150E  26D9               	addwf	fsr2l,f,c
 11654  001510  5006               	movf	??_ADC_ISR+1,w,c
 11655  001512  22DA               	addwfc	fsr2h,f,c
 11656  001514  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11657  001518  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11658                           
 11659                           ;adc.c: 134: Set_4051(0);
 11660  00151C  0E00               	movlw	0
 11661  00151E  6E02               	movwf	Set_4051@Channel+1,c
 11662  001520  0E00               	movlw	0
 11663  001522  6E01               	movwf	Set_4051@Channel,c
 11664  001524  ECDA  F01E         	call	_Set_4051	;wreg free
 11665                           
 11666                           ;adc.c: 135: ADC_StartConversion(Temp2);
 11667  001528  0E14               	movlw	20
 11668  00152A  EC45  F01F         	call	_ADC_StartConversion
 11669                           
 11670                           ;adc.c: 136: break;
 11671  00152E  D04E               	goto	i2l3966
 11672  001530                     i2l3954:
 11673                           
 11674                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11675  001530  0EE4               	movlw	low _Temp_Adc
 11676  001532  6E05               	movwf	??_ADC_ISR& (0+255),c
 11677  001534  0E00               	movlw	high _Temp_Adc
 11678  001536  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11679  001538  90D8               	bcf	status,0,c
 11680  00153A  3438               	rlcf	_ADC_Buffer_Point,w,c
 11681  00153C  6ED9               	movwf	fsr2l,c
 11682  00153E  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11683  001540  6EDA               	movwf	fsr2h,c
 11684  001542  5005               	movf	??_ADC_ISR,w,c
 11685  001544  26D9               	addwf	fsr2l,f,c
 11686  001546  5006               	movf	??_ADC_ISR+1,w,c
 11687  001548  22DA               	addwfc	fsr2h,f,c
 11688  00154A  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11689  00154E  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11690                           
 11691                           ;adc.c: 139: Set_4051(1);
 11692  001552  0E00               	movlw	0
 11693  001554  6E02               	movwf	Set_4051@Channel+1,c
 11694  001556  0E01               	movlw	1
 11695  001558  6E01               	movwf	Set_4051@Channel,c
 11696  00155A  ECDA  F01E         	call	_Set_4051	;wreg free
 11697                           
 11698                           ;adc.c: 140: ADC_StartConversion(Temp2);
 11699  00155E  0E14               	movlw	20
 11700  001560  EC45  F01F         	call	_ADC_StartConversion
 11701                           
 11702                           ;adc.c: 141: break;
 11703  001564  D033               	goto	i2l3966
 11704  001566                     i2l3960:
 11705                           
 11706                           ;adc.c: 143: Temp_Aquire = 0;
 11707  001566  0E00               	movlw	0
 11708  001568  6E3C               	movwf	_Temp_Aquire,c
 11709                           
 11710                           ;adc.c: 144: Temp_Done = 1;
 11711  00156A  0E00               	movlw	0
 11712  00156C  0100               	movlb	0	; () banked
 11713  00156E  6FDF               	movwf	(_Temp_Done+1)& (0+255),b
 11714  001570  0E01               	movlw	1
 11715  001572  0100               	movlb	0	; () banked
 11716  001574  6FDE               	movwf	_Temp_Done& (0+255),b
 11717                           
 11718                           ;adc.c: 145: break;
 11719  001576  D02A               	goto	i2l3966
 11720  001578                     i2l3964:
 11721  001578  C038  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 11722  00157C  C039  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 11723                           
 11724                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11725                           ; Switch size 1, requested type "space"
 11726                           ; Number of cases is 1, Range of values is 0 to 0
 11727                           ; switch strategies available:
 11728                           ; Name         Instructions Cycles
 11729                           ; simple_byte            4     3 (average)
 11730                           ;	Chosen strategy is simple_byte
 11731  001580  5006               	movf	??_ADC_ISR+1,w,c
 11732  001582  0A00               	xorlw	0	; case 0
 11733  001584  A4D8               	btfss	status,2,c
 11734  001586  D022               	goto	i2l3966
 11735                           
 11736                           ; Switch size 1, requested type "space"
 11737                           ; Number of cases is 11, Range of values is 0 to 10
 11738                           ; switch strategies available:
 11739                           ; Name         Instructions Cycles
 11740                           ; simple_byte           34    18 (average)
 11741                           ;	Chosen strategy is simple_byte
 11742  001588  5005               	movf	??_ADC_ISR,w,c
 11743  00158A  0A00               	xorlw	0	; case 0
 11744  00158C  B4D8               	btfsc	status,2,c
 11745  00158E  D6DD               	goto	i2l3900
 11746  001590  0A01               	xorlw	1	; case 1
 11747  001592  B4D8               	btfsc	status,2,c
 11748  001594  D6F5               	goto	i2l3906
 11749  001596  0A03               	xorlw	3	; case 2
 11750  001598  B4D8               	btfsc	status,2,c
 11751  00159A  D70D               	goto	i2l3912
 11752  00159C  0A01               	xorlw	1	; case 3
 11753  00159E  B4D8               	btfsc	status,2,c
 11754  0015A0  D725               	goto	i2l3918
 11755  0015A2  0A07               	xorlw	7	; case 4
 11756  0015A4  B4D8               	btfsc	status,2,c
 11757  0015A6  D73D               	goto	i2l3924
 11758  0015A8  0A01               	xorlw	1	; case 5
 11759  0015AA  B4D8               	btfsc	status,2,c
 11760  0015AC  D755               	goto	i2l3930
 11761  0015AE  0A03               	xorlw	3	; case 6
 11762  0015B0  B4D8               	btfsc	status,2,c
 11763  0015B2  D76D               	goto	i2l3936
 11764  0015B4  0A01               	xorlw	1	; case 7
 11765  0015B6  B4D8               	btfsc	status,2,c
 11766  0015B8  D785               	goto	i2l3942
 11767  0015BA  0A0F               	xorlw	15	; case 8
 11768  0015BC  B4D8               	btfsc	status,2,c
 11769  0015BE  D79D               	goto	i2l3948
 11770  0015C0  0A01               	xorlw	1	; case 9
 11771  0015C2  B4D8               	btfsc	status,2,c
 11772  0015C4  D7B5               	goto	i2l3954
 11773  0015C6  0A03               	xorlw	3	; case 10
 11774  0015C8  B4D8               	btfsc	status,2,c
 11775  0015CA  D7CD               	goto	i2l3960
 11776  0015CC                     i2l3966:
 11777                           
 11778                           ;adc.c: 147: ADC_Buffer_Point++;
 11779  0015CC  4A38               	infsnz	_ADC_Buffer_Point,f,c
 11780  0015CE  2A39               	incf	_ADC_Buffer_Point+1,f,c
 11781  0015D0                     i2l3968:
 11782                           
 11783                           ;adc.c: 148: }
 11784                           ;adc.c: 149: if (Volt_Aquire){
 11785  0015D0  503D               	movf	_Volt_Aquire,w,c
 11786  0015D2  B4D8               	btfsc	status,2,c
 11787  0015D4  0012               	return	
 11788                           
 11789                           ;adc.c: 151: ADC_Result = ADC_GetConversionResult();
 11790  0015D6  EC76  F01F         	call	_ADC_GetConversionResult	;wreg free
 11791  0015DA  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 11792  0015DE  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 11793                           
 11794                           ;adc.c: 152: switch ( ADC_Buffer_Point )
 11795  0015E2  D18F               	goto	i2l4016
 11796  0015E4                     i2l3972:
 11797                           
 11798                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11799  0015E4  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 11800  0015E8  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 11801  0015EC  0E00               	movlw	0
 11802  0015EE  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 11803  0015F0  0EFF               	movlw	255
 11804  0015F2  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 11805  0015F4  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 11806  0015F6  0EB6               	movlw	low _Battery_Adc
 11807  0015F8  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 11808  0015FA  0E00               	movlw	high _Battery_Adc
 11809  0015FC  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 11810  0015FE  90D8               	bcf	status,0,c
 11811  001600  3438               	rlcf	_ADC_Buffer_Point,w,c
 11812  001602  6ED9               	movwf	fsr2l,c
 11813  001604  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11814  001606  6EDA               	movwf	fsr2h,c
 11815  001608  90D8               	bcf	status,0,c
 11816  00160A  36D9               	rlcf	fsr2l,f,c
 11817  00160C  36DA               	rlcf	fsr2h,f,c
 11818  00160E  5009               	movf	??_ADC_ISR+4,w,c
 11819  001610  26D9               	addwf	fsr2l,f,c
 11820  001612  500A               	movf	??_ADC_ISR+5,w,c
 11821  001614  22DA               	addwfc	fsr2h,f,c
 11822  001616  C005  FFDE         	movff	??_ADC_ISR,postinc2
 11823  00161A  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 11824  00161E  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 11825  001622  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 11826  001626  06D9               	decf	fsr2l,f,c
 11827  001628  06D9               	decf	fsr2l,f,c
 11828                           
 11829                           ;adc.c: 156: ADC_StartConversion(Battery1);
 11830  00162A  0E01               	movlw	1
 11831  00162C  EC45  F01F         	call	_ADC_StartConversion
 11832                           
 11833                           ;adc.c: 157: break;
 11834  001630  D192               	goto	i2l4018
 11835  001632                     i2l3976:
 11836                           
 11837                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11838  001632  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 11839  001636  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 11840  00163A  0E00               	movlw	0
 11841  00163C  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 11842  00163E  0EFF               	movlw	255
 11843  001640  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 11844  001642  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 11845  001644  0EB6               	movlw	low _Battery_Adc
 11846  001646  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 11847  001648  0E00               	movlw	high _Battery_Adc
 11848  00164A  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 11849  00164C  90D8               	bcf	status,0,c
 11850  00164E  3438               	rlcf	_ADC_Buffer_Point,w,c
 11851  001650  6ED9               	movwf	fsr2l,c
 11852  001652  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11853  001654  6EDA               	movwf	fsr2h,c
 11854  001656  90D8               	bcf	status,0,c
 11855  001658  36D9               	rlcf	fsr2l,f,c
 11856  00165A  36DA               	rlcf	fsr2h,f,c
 11857  00165C  5009               	movf	??_ADC_ISR+4,w,c
 11858  00165E  26D9               	addwf	fsr2l,f,c
 11859  001660  500A               	movf	??_ADC_ISR+5,w,c
 11860  001662  22DA               	addwfc	fsr2h,f,c
 11861  001664  C005  FFDE         	movff	??_ADC_ISR,postinc2
 11862  001668  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 11863  00166C  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 11864  001670  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 11865  001674  06D9               	decf	fsr2l,f,c
 11866  001676  06D9               	decf	fsr2l,f,c
 11867                           
 11868                           ;adc.c: 160: ADC_StartConversion(Battery2);
 11869  001678  0E03               	movlw	3
 11870  00167A  EC45  F01F         	call	_ADC_StartConversion
 11871                           
 11872                           ;adc.c: 161: break;
 11873  00167E  D16B               	goto	i2l4018
 11874  001680                     i2l3980:
 11875                           
 11876                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11877  001680  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 11878  001684  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 11879  001688  0E00               	movlw	0
 11880  00168A  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 11881  00168C  0EFF               	movlw	255
 11882  00168E  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 11883  001690  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 11884  001692  0EB6               	movlw	low _Battery_Adc
 11885  001694  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 11886  001696  0E00               	movlw	high _Battery_Adc
 11887  001698  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 11888  00169A  90D8               	bcf	status,0,c
 11889  00169C  3438               	rlcf	_ADC_Buffer_Point,w,c
 11890  00169E  6ED9               	movwf	fsr2l,c
 11891  0016A0  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11892  0016A2  6EDA               	movwf	fsr2h,c
 11893  0016A4  90D8               	bcf	status,0,c
 11894  0016A6  36D9               	rlcf	fsr2l,f,c
 11895  0016A8  36DA               	rlcf	fsr2h,f,c
 11896  0016AA  5009               	movf	??_ADC_ISR+4,w,c
 11897  0016AC  26D9               	addwf	fsr2l,f,c
 11898  0016AE  500A               	movf	??_ADC_ISR+5,w,c
 11899  0016B0  22DA               	addwfc	fsr2h,f,c
 11900  0016B2  C005  FFDE         	movff	??_ADC_ISR,postinc2
 11901  0016B6  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 11902  0016BA  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 11903  0016BE  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 11904  0016C2  06D9               	decf	fsr2l,f,c
 11905  0016C4  06D9               	decf	fsr2l,f,c
 11906                           
 11907                           ;adc.c: 164: ADC_StartConversion(Battery3);
 11908  0016C6  0E04               	movlw	4
 11909  0016C8  EC45  F01F         	call	_ADC_StartConversion
 11910                           
 11911                           ;adc.c: 165: break;
 11912  0016CC  D144               	goto	i2l4018
 11913  0016CE                     i2l3984:
 11914                           
 11915                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11916  0016CE  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 11917  0016D2  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 11918  0016D6  0E00               	movlw	0
 11919  0016D8  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 11920  0016DA  0EFF               	movlw	255
 11921  0016DC  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 11922  0016DE  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 11923  0016E0  0EB6               	movlw	low _Battery_Adc
 11924  0016E2  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 11925  0016E4  0E00               	movlw	high _Battery_Adc
 11926  0016E6  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 11927  0016E8  90D8               	bcf	status,0,c
 11928  0016EA  3438               	rlcf	_ADC_Buffer_Point,w,c
 11929  0016EC  6ED9               	movwf	fsr2l,c
 11930  0016EE  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11931  0016F0  6EDA               	movwf	fsr2h,c
 11932  0016F2  90D8               	bcf	status,0,c
 11933  0016F4  36D9               	rlcf	fsr2l,f,c
 11934  0016F6  36DA               	rlcf	fsr2h,f,c
 11935  0016F8  5009               	movf	??_ADC_ISR+4,w,c
 11936  0016FA  26D9               	addwf	fsr2l,f,c
 11937  0016FC  500A               	movf	??_ADC_ISR+5,w,c
 11938  0016FE  22DA               	addwfc	fsr2h,f,c
 11939  001700  C005  FFDE         	movff	??_ADC_ISR,postinc2
 11940  001704  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 11941  001708  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 11942  00170C  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 11943  001710  06D9               	decf	fsr2l,f,c
 11944  001712  06D9               	decf	fsr2l,f,c
 11945                           
 11946                           ;adc.c: 168: ADC_StartConversion(Battery4);
 11947  001714  0E05               	movlw	5
 11948  001716  EC45  F01F         	call	_ADC_StartConversion
 11949                           
 11950                           ;adc.c: 169: break;
 11951  00171A  D11D               	goto	i2l4018
 11952  00171C                     i2l3988:
 11953                           
 11954                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11955  00171C  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 11956  001720  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 11957  001724  0E00               	movlw	0
 11958  001726  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 11959  001728  0EFF               	movlw	255
 11960  00172A  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 11961  00172C  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 11962  00172E  0EB6               	movlw	low _Battery_Adc
 11963  001730  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 11964  001732  0E00               	movlw	high _Battery_Adc
 11965  001734  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 11966  001736  90D8               	bcf	status,0,c
 11967  001738  3438               	rlcf	_ADC_Buffer_Point,w,c
 11968  00173A  6ED9               	movwf	fsr2l,c
 11969  00173C  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 11970  00173E  6EDA               	movwf	fsr2h,c
 11971  001740  90D8               	bcf	status,0,c
 11972  001742  36D9               	rlcf	fsr2l,f,c
 11973  001744  36DA               	rlcf	fsr2h,f,c
 11974  001746  5009               	movf	??_ADC_ISR+4,w,c
 11975  001748  26D9               	addwf	fsr2l,f,c
 11976  00174A  500A               	movf	??_ADC_ISR+5,w,c
 11977  00174C  22DA               	addwfc	fsr2h,f,c
 11978  00174E  C005  FFDE         	movff	??_ADC_ISR,postinc2
 11979  001752  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 11980  001756  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 11981  00175A  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 11982  00175E  06D9               	decf	fsr2l,f,c
 11983  001760  06D9               	decf	fsr2l,f,c
 11984                           
 11985                           ;adc.c: 172: ADC_StartConversion(Battery5);
 11986  001762  0E18               	movlw	24
 11987  001764  EC45  F01F         	call	_ADC_StartConversion
 11988                           
 11989                           ;adc.c: 173: break;
 11990  001768  D0F6               	goto	i2l4018
 11991  00176A                     i2l3992:
 11992                           
 11993                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11994  00176A  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 11995  00176E  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 11996  001772  0E00               	movlw	0
 11997  001774  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 11998  001776  0EFF               	movlw	255
 11999  001778  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12000  00177A  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12001  00177C  0EB6               	movlw	low _Battery_Adc
 12002  00177E  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12003  001780  0E00               	movlw	high _Battery_Adc
 12004  001782  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12005  001784  90D8               	bcf	status,0,c
 12006  001786  3438               	rlcf	_ADC_Buffer_Point,w,c
 12007  001788  6ED9               	movwf	fsr2l,c
 12008  00178A  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 12009  00178C  6EDA               	movwf	fsr2h,c
 12010  00178E  90D8               	bcf	status,0,c
 12011  001790  36D9               	rlcf	fsr2l,f,c
 12012  001792  36DA               	rlcf	fsr2h,f,c
 12013  001794  5009               	movf	??_ADC_ISR+4,w,c
 12014  001796  26D9               	addwf	fsr2l,f,c
 12015  001798  500A               	movf	??_ADC_ISR+5,w,c
 12016  00179A  22DA               	addwfc	fsr2h,f,c
 12017  00179C  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12018  0017A0  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12019  0017A4  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12020  0017A8  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12021  0017AC  06D9               	decf	fsr2l,f,c
 12022  0017AE  06D9               	decf	fsr2l,f,c
 12023                           
 12024                           ;adc.c: 176: ADC_StartConversion(Battery6);
 12025  0017B0  0E1A               	movlw	26
 12026  0017B2  EC45  F01F         	call	_ADC_StartConversion
 12027                           
 12028                           ;adc.c: 177: break;
 12029  0017B6  D0CF               	goto	i2l4018
 12030  0017B8                     i2l3996:
 12031                           
 12032                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12033  0017B8  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12034  0017BC  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12035  0017C0  0E00               	movlw	0
 12036  0017C2  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12037  0017C4  0EFF               	movlw	255
 12038  0017C6  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12039  0017C8  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12040  0017CA  0EB6               	movlw	low _Battery_Adc
 12041  0017CC  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12042  0017CE  0E00               	movlw	high _Battery_Adc
 12043  0017D0  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12044  0017D2  90D8               	bcf	status,0,c
 12045  0017D4  3438               	rlcf	_ADC_Buffer_Point,w,c
 12046  0017D6  6ED9               	movwf	fsr2l,c
 12047  0017D8  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 12048  0017DA  6EDA               	movwf	fsr2h,c
 12049  0017DC  90D8               	bcf	status,0,c
 12050  0017DE  36D9               	rlcf	fsr2l,f,c
 12051  0017E0  36DA               	rlcf	fsr2h,f,c
 12052  0017E2  5009               	movf	??_ADC_ISR+4,w,c
 12053  0017E4  26D9               	addwf	fsr2l,f,c
 12054  0017E6  500A               	movf	??_ADC_ISR+5,w,c
 12055  0017E8  22DA               	addwfc	fsr2h,f,c
 12056  0017EA  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12057  0017EE  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12058  0017F2  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12059  0017F6  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12060  0017FA  06D9               	decf	fsr2l,f,c
 12061  0017FC  06D9               	decf	fsr2l,f,c
 12062                           
 12063                           ;adc.c: 180: ADC_StartConversion(Battery7);
 12064  0017FE  0E1B               	movlw	27
 12065  001800  EC45  F01F         	call	_ADC_StartConversion
 12066                           
 12067                           ;adc.c: 181: break;
 12068  001804  D0A8               	goto	i2l4018
 12069  001806                     i2l4000:
 12070                           
 12071                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12072  001806  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12073  00180A  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12074  00180E  0E00               	movlw	0
 12075  001810  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12076  001812  0EFF               	movlw	255
 12077  001814  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12078  001816  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12079  001818  0EB6               	movlw	low _Battery_Adc
 12080  00181A  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12081  00181C  0E00               	movlw	high _Battery_Adc
 12082  00181E  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12083  001820  90D8               	bcf	status,0,c
 12084  001822  3438               	rlcf	_ADC_Buffer_Point,w,c
 12085  001824  6ED9               	movwf	fsr2l,c
 12086  001826  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 12087  001828  6EDA               	movwf	fsr2h,c
 12088  00182A  90D8               	bcf	status,0,c
 12089  00182C  36D9               	rlcf	fsr2l,f,c
 12090  00182E  36DA               	rlcf	fsr2h,f,c
 12091  001830  5009               	movf	??_ADC_ISR+4,w,c
 12092  001832  26D9               	addwf	fsr2l,f,c
 12093  001834  500A               	movf	??_ADC_ISR+5,w,c
 12094  001836  22DA               	addwfc	fsr2h,f,c
 12095  001838  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12096  00183C  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12097  001840  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12098  001844  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12099  001848  06D9               	decf	fsr2l,f,c
 12100  00184A  06D9               	decf	fsr2l,f,c
 12101                           
 12102                           ;adc.c: 184: ADC_StartConversion(Battery8);
 12103  00184C  0E08               	movlw	8
 12104  00184E  EC45  F01F         	call	_ADC_StartConversion
 12105                           
 12106                           ;adc.c: 185: break;
 12107  001852  D081               	goto	i2l4018
 12108  001854                     i2l4004:
 12109                           
 12110                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12111  001854  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12112  001858  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12113  00185C  0E00               	movlw	0
 12114  00185E  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12115  001860  0EFF               	movlw	255
 12116  001862  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12117  001864  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12118  001866  0EB6               	movlw	low _Battery_Adc
 12119  001868  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12120  00186A  0E00               	movlw	high _Battery_Adc
 12121  00186C  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12122  00186E  90D8               	bcf	status,0,c
 12123  001870  3438               	rlcf	_ADC_Buffer_Point,w,c
 12124  001872  6ED9               	movwf	fsr2l,c
 12125  001874  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 12126  001876  6EDA               	movwf	fsr2h,c
 12127  001878  90D8               	bcf	status,0,c
 12128  00187A  36D9               	rlcf	fsr2l,f,c
 12129  00187C  36DA               	rlcf	fsr2h,f,c
 12130  00187E  5009               	movf	??_ADC_ISR+4,w,c
 12131  001880  26D9               	addwf	fsr2l,f,c
 12132  001882  500A               	movf	??_ADC_ISR+5,w,c
 12133  001884  22DA               	addwfc	fsr2h,f,c
 12134  001886  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12135  00188A  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12136  00188E  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12137  001892  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12138  001896  06D9               	decf	fsr2l,f,c
 12139  001898  06D9               	decf	fsr2l,f,c
 12140                           
 12141                           ;adc.c: 188: ADC_StartConversion(Battery9);
 12142  00189A  0E0B               	movlw	11
 12143  00189C  EC45  F01F         	call	_ADC_StartConversion
 12144                           
 12145                           ;adc.c: 189: break;
 12146  0018A0  D05A               	goto	i2l4018
 12147  0018A2                     i2l4008:
 12148                           
 12149                           ;adc.c: 191: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12150  0018A2  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12151  0018A6  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12152  0018AA  0E00               	movlw	0
 12153  0018AC  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12154  0018AE  0EFF               	movlw	255
 12155  0018B0  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12156  0018B2  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12157  0018B4  0EB6               	movlw	low _Battery_Adc
 12158  0018B6  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12159  0018B8  0E00               	movlw	high _Battery_Adc
 12160  0018BA  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12161  0018BC  90D8               	bcf	status,0,c
 12162  0018BE  3438               	rlcf	_ADC_Buffer_Point,w,c
 12163  0018C0  6ED9               	movwf	fsr2l,c
 12164  0018C2  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 12165  0018C4  6EDA               	movwf	fsr2h,c
 12166  0018C6  90D8               	bcf	status,0,c
 12167  0018C8  36D9               	rlcf	fsr2l,f,c
 12168  0018CA  36DA               	rlcf	fsr2h,f,c
 12169  0018CC  5009               	movf	??_ADC_ISR+4,w,c
 12170  0018CE  26D9               	addwf	fsr2l,f,c
 12171  0018D0  500A               	movf	??_ADC_ISR+5,w,c
 12172  0018D2  22DA               	addwfc	fsr2h,f,c
 12173  0018D4  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12174  0018D8  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12175  0018DC  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12176  0018E0  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12177  0018E4  06D9               	decf	fsr2l,f,c
 12178  0018E6  06D9               	decf	fsr2l,f,c
 12179                           
 12180                           ;adc.c: 192: ADC_StartConversion(Battery10);
 12181  0018E8  0E0D               	movlw	13
 12182  0018EA  EC45  F01F         	call	_ADC_StartConversion
 12183                           
 12184                           ;adc.c: 193: break;
 12185  0018EE  D033               	goto	i2l4018
 12186  0018F0                     i2l4012:
 12187                           
 12188                           ;adc.c: 195: Volt_Aquire = 0;
 12189  0018F0  0E00               	movlw	0
 12190  0018F2  6E3D               	movwf	_Volt_Aquire,c
 12191                           
 12192                           ;adc.c: 196: Volt_Done = 1;
 12193  0018F4  0E00               	movlw	0
 12194  0018F6  0100               	movlb	0	; () banked
 12195  0018F8  6FE1               	movwf	(_Volt_Done+1)& (0+255),b
 12196  0018FA  0E01               	movlw	1
 12197  0018FC  0100               	movlb	0	; () banked
 12198  0018FE  6FE0               	movwf	_Volt_Done& (0+255),b
 12199                           
 12200                           ;adc.c: 197: break;
 12201  001900  D02A               	goto	i2l4018
 12202  001902                     i2l4016:
 12203  001902  C038  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 12204  001906  C039  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 12205                           
 12206                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12207                           ; Switch size 1, requested type "space"
 12208                           ; Number of cases is 1, Range of values is 0 to 0
 12209                           ; switch strategies available:
 12210                           ; Name         Instructions Cycles
 12211                           ; simple_byte            4     3 (average)
 12212                           ;	Chosen strategy is simple_byte
 12213  00190A  5006               	movf	??_ADC_ISR+1,w,c
 12214  00190C  0A00               	xorlw	0	; case 0
 12215  00190E  A4D8               	btfss	status,2,c
 12216  001910  D022               	goto	i2l4018
 12217                           
 12218                           ; Switch size 1, requested type "space"
 12219                           ; Number of cases is 11, Range of values is 0 to 10
 12220                           ; switch strategies available:
 12221                           ; Name         Instructions Cycles
 12222                           ; simple_byte           34    18 (average)
 12223                           ;	Chosen strategy is simple_byte
 12224  001912  5005               	movf	??_ADC_ISR,w,c
 12225  001914  0A00               	xorlw	0	; case 0
 12226  001916  B4D8               	btfsc	status,2,c
 12227  001918  D665               	goto	i2l3972
 12228  00191A  0A01               	xorlw	1	; case 1
 12229  00191C  B4D8               	btfsc	status,2,c
 12230  00191E  D689               	goto	i2l3976
 12231  001920  0A03               	xorlw	3	; case 2
 12232  001922  B4D8               	btfsc	status,2,c
 12233  001924  D6AD               	goto	i2l3980
 12234  001926  0A01               	xorlw	1	; case 3
 12235  001928  B4D8               	btfsc	status,2,c
 12236  00192A  D6D1               	goto	i2l3984
 12237  00192C  0A07               	xorlw	7	; case 4
 12238  00192E  B4D8               	btfsc	status,2,c
 12239  001930  D6F5               	goto	i2l3988
 12240  001932  0A01               	xorlw	1	; case 5
 12241  001934  B4D8               	btfsc	status,2,c
 12242  001936  D719               	goto	i2l3992
 12243  001938  0A03               	xorlw	3	; case 6
 12244  00193A  B4D8               	btfsc	status,2,c
 12245  00193C  D73D               	goto	i2l3996
 12246  00193E  0A01               	xorlw	1	; case 7
 12247  001940  B4D8               	btfsc	status,2,c
 12248  001942  D761               	goto	i2l4000
 12249  001944  0A0F               	xorlw	15	; case 8
 12250  001946  B4D8               	btfsc	status,2,c
 12251  001948  D785               	goto	i2l4004
 12252  00194A  0A01               	xorlw	1	; case 9
 12253  00194C  B4D8               	btfsc	status,2,c
 12254  00194E  D7A9               	goto	i2l4008
 12255  001950  0A03               	xorlw	3	; case 10
 12256  001952  B4D8               	btfsc	status,2,c
 12257  001954  D7CD               	goto	i2l4012
 12258  001956                     i2l4018:
 12259                           
 12260                           ;adc.c: 199: ADC_Buffer_Point++;
 12261  001956  4A38               	infsnz	_ADC_Buffer_Point,f,c
 12262  001958  2A39               	incf	_ADC_Buffer_Point+1,f,c
 12263  00195A  0012               	return	
 12264  00195C                     __end_of_ADC_ISR:
 12265                           	opt stack 0
 12266                           pclatu	equ	0xFFB
 12267                           pclath	equ	0xFFA
 12268                           tblptru	equ	0xFF8
 12269                           tblptrh	equ	0xFF7
 12270                           tblptrl	equ	0xFF6
 12271                           tablat	equ	0xFF5
 12272                           prodh	equ	0xFF4
 12273                           prodl	equ	0xFF3
 12274                           intcon	equ	0xFF2
 12275                           intcon2	equ	0xFF1
 12276                           postinc0	equ	0xFEE
 12277                           fsr0h	equ	0xFEA
 12278                           fsr0l	equ	0xFE9
 12279                           wreg	equ	0xFE8
 12280                           postinc1	equ	0xFE6
 12281                           postdec1	equ	0xFE5
 12282                           fsr1h	equ	0xFE2
 12283                           fsr1l	equ	0xFE1
 12284                           indf2	equ	0xFDF
 12285                           postinc2	equ	0xFDE
 12286                           postdec2	equ	0xFDD
 12287                           fsr2h	equ	0xFDA
 12288                           fsr2l	equ	0xFD9
 12289                           status	equ	0xFD8
 12290                           
 12291 ;; *************** function _Set_4051 *****************
 12292 ;; Defined at:
 12293 ;;		line 15 in file "Functions.c"
 12294 ;; Parameters:    Size  Location     Type
 12295 ;;  Channel         2    0[COMRAM] int 
 12296 ;; Auto vars:     Size  Location     Type
 12297 ;;		None
 12298 ;; Return value:  Size  Location     Type
 12299 ;;		None               void
 12300 ;; Registers used:
 12301 ;;		wreg, status,2, status,0
 12302 ;; Tracked objects:
 12303 ;;		On entry : 0/0
 12304 ;;		On exit  : 0/0
 12305 ;;		Unchanged: 0/0
 12306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12307 ;;      Params:         2       0       0       0       0       0       0
 12308 ;;      Locals:         0       0       0       0       0       0       0
 12309 ;;      Temps:          2       0       0       0       0       0       0
 12310 ;;      Totals:         4       0       0       0       0       0       0
 12311 ;;Total ram usage:        4 bytes
 12312 ;; Hardware stack levels used:    1
 12313 ;; This function calls:
 12314 ;;		Nothing
 12315 ;; This function is called by:
 12316 ;;		_ADC_ISR
 12317 ;; This function uses a non-reentrant model
 12318 ;;
 12319                           
 12320                           	psect	text52
 12321  003DB4                     __ptext52:
 12322                           	opt stack 0
 12323  003DB4                     _Set_4051:
 12324                           	opt stack 23
 12325                           
 12326                           ;Functions.c: 17: if (Channel & 0x01)
 12327                           
 12328                           ;incstack = 0
 12329  003DB4  B001               	btfsc	Set_4051@Channel,0,c
 12330                           
 12331                           ;Functions.c: 18: {
 12332                           ;Functions.c: 19: do { LATA6 = ~LATA6; } while(0);
 12333  003DB6  7C89               	btg	3977,6,c	;volatile
 12334                           
 12335                           ;Functions.c: 20: }
 12336                           ;Functions.c: 21: if ((Channel>>1) & 0x01)
 12337  003DB8  3402               	rlcf	Set_4051@Channel+1,w,c
 12338  003DBA  3002               	rrcf	Set_4051@Channel+1,w,c
 12339  003DBC  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 12340  003DBE  3001               	rrcf	Set_4051@Channel,w,c
 12341  003DC0  6E03               	movwf	??_Set_4051& (0+255),c
 12342  003DC2  B003               	btfsc	??_Set_4051,0,c
 12343                           
 12344                           ;Functions.c: 22: {
 12345                           ;Functions.c: 23: do { LATC0 = ~LATC0; } while(0);
 12346  003DC4  708B               	btg	3979,0,c	;volatile
 12347                           
 12348                           ;Functions.c: 24: }
 12349                           ;Functions.c: 25: if ((Channel>>2) & 0x01)
 12350  003DC6  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 12351  003DCA  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 12352  003DCE  3404               	rlcf	??_Set_4051+1,w,c
 12353  003DD0  3204               	rrcf	??_Set_4051+1,f,c
 12354  003DD2  3203               	rrcf	??_Set_4051,f,c
 12355  003DD4  3404               	rlcf	??_Set_4051+1,w,c
 12356  003DD6  3204               	rrcf	??_Set_4051+1,f,c
 12357  003DD8  3203               	rrcf	??_Set_4051,f,c
 12358  003DDA  A003               	btfss	??_Set_4051,0,c
 12359  003DDC  0012               	return	
 12360                           
 12361                           ;Functions.c: 26: {
 12362                           ;Functions.c: 27: do { LATC1 = ~LATC1; } while(0);
 12363  003DDE  728B               	btg	3979,1,c	;volatile
 12364  003DE0  0012               	return	
 12365  003DE2                     __end_of_Set_4051:
 12366                           	opt stack 0
 12367                           pclatu	equ	0xFFB
 12368                           pclath	equ	0xFFA
 12369                           tblptru	equ	0xFF8
 12370                           tblptrh	equ	0xFF7
 12371                           tblptrl	equ	0xFF6
 12372                           tablat	equ	0xFF5
 12373                           prodh	equ	0xFF4
 12374                           prodl	equ	0xFF3
 12375                           intcon	equ	0xFF2
 12376                           intcon2	equ	0xFF1
 12377                           postinc0	equ	0xFEE
 12378                           fsr0h	equ	0xFEA
 12379                           fsr0l	equ	0xFE9
 12380                           wreg	equ	0xFE8
 12381                           postinc1	equ	0xFE6
 12382                           postdec1	equ	0xFE5
 12383                           fsr1h	equ	0xFE2
 12384                           fsr1l	equ	0xFE1
 12385                           indf2	equ	0xFDF
 12386                           postinc2	equ	0xFDE
 12387                           postdec2	equ	0xFDD
 12388                           fsr2h	equ	0xFDA
 12389                           fsr2l	equ	0xFD9
 12390                           status	equ	0xFD8
 12391                           
 12392 ;; *************** function _ADC_StartConversion *****************
 12393 ;; Defined at:
 12394 ;;		line 36 in file "mcc_generated_files/adc.c"
 12395 ;; Parameters:    Size  Location     Type
 12396 ;;  channel         1    wreg     enum E8837
 12397 ;; Auto vars:     Size  Location     Type
 12398 ;;  channel         1    1[COMRAM] enum E8837
 12399 ;; Return value:  Size  Location     Type
 12400 ;;		None               void
 12401 ;; Registers used:
 12402 ;;		wreg, status,2, status,0
 12403 ;; Tracked objects:
 12404 ;;		On entry : 0/0
 12405 ;;		On exit  : 0/0
 12406 ;;		Unchanged: 0/0
 12407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12408 ;;      Params:         0       0       0       0       0       0       0
 12409 ;;      Locals:         1       0       0       0       0       0       0
 12410 ;;      Temps:          1       0       0       0       0       0       0
 12411 ;;      Totals:         2       0       0       0       0       0       0
 12412 ;;Total ram usage:        2 bytes
 12413 ;; Hardware stack levels used:    1
 12414 ;; This function calls:
 12415 ;;		Nothing
 12416 ;; This function is called by:
 12417 ;;		_ADC_ISR
 12418 ;;		_Battery_Read
 12419 ;;		_Temp_Read
 12420 ;; This function uses a non-reentrant model
 12421 ;;
 12422                           
 12423                           	psect	text53
 12424  003E8A                     __ptext53:
 12425                           	opt stack 0
 12426  003E8A                     _ADC_StartConversion:
 12427                           	opt stack 22
 12428                           
 12429                           ;incstack = 0
 12430                           ;ADC_StartConversion@channel stored from wreg
 12431  003E8A  6E02               	movwf	ADC_StartConversion@channel,c
 12432                           
 12433                           ;adc.c: 39: ADCON0bits.CHS = channel;
 12434  003E8C  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 12435  003E90  4601               	rlncf	??_ADC_StartConversion,f,c
 12436  003E92  4601               	rlncf	??_ADC_StartConversion,f,c
 12437  003E94  50C2               	movf	4034,w,c	;volatile
 12438  003E96  1801               	xorwf	??_ADC_StartConversion,w,c
 12439  003E98  0B83               	andlw	-125
 12440  003E9A  1801               	xorwf	??_ADC_StartConversion,w,c
 12441  003E9C  6EC2               	movwf	4034,c	;volatile
 12442                           
 12443                           ;adc.c: 42: ADCON0bits.ADON = 1;
 12444  003E9E  80C2               	bsf	4034,0,c	;volatile
 12445                           
 12446                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
 12447  003EA0  82C2               	bsf	4034,1,c	;volatile
 12448  003EA2  0012               	return	
 12449  003EA4                     __end_of_ADC_StartConversion:
 12450                           	opt stack 0
 12451                           pclatu	equ	0xFFB
 12452                           pclath	equ	0xFFA
 12453                           tblptru	equ	0xFF8
 12454                           tblptrh	equ	0xFF7
 12455                           tblptrl	equ	0xFF6
 12456                           tablat	equ	0xFF5
 12457                           prodh	equ	0xFF4
 12458                           prodl	equ	0xFF3
 12459                           intcon	equ	0xFF2
 12460                           intcon2	equ	0xFF1
 12461                           postinc0	equ	0xFEE
 12462                           fsr0h	equ	0xFEA
 12463                           fsr0l	equ	0xFE9
 12464                           wreg	equ	0xFE8
 12465                           postinc1	equ	0xFE6
 12466                           postdec1	equ	0xFE5
 12467                           fsr1h	equ	0xFE2
 12468                           fsr1l	equ	0xFE1
 12469                           indf2	equ	0xFDF
 12470                           postinc2	equ	0xFDE
 12471                           postdec2	equ	0xFDD
 12472                           fsr2h	equ	0xFDA
 12473                           fsr2l	equ	0xFD9
 12474                           status	equ	0xFD8
 12475                           
 12476 ;; *************** function _ADC_GetConversionResult *****************
 12477 ;; Defined at:
 12478 ;;		line 55 in file "mcc_generated_files/adc.c"
 12479 ;; Parameters:    Size  Location     Type
 12480 ;;		None
 12481 ;; Auto vars:     Size  Location     Type
 12482 ;;		None
 12483 ;; Return value:  Size  Location     Type
 12484 ;;                  2    0[COMRAM] unsigned int 
 12485 ;; Registers used:
 12486 ;;		wreg, status,2, status,0
 12487 ;; Tracked objects:
 12488 ;;		On entry : 0/0
 12489 ;;		On exit  : 0/0
 12490 ;;		Unchanged: 0/0
 12491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12492 ;;      Params:         2       0       0       0       0       0       0
 12493 ;;      Locals:         0       0       0       0       0       0       0
 12494 ;;      Temps:          2       0       0       0       0       0       0
 12495 ;;      Totals:         4       0       0       0       0       0       0
 12496 ;;Total ram usage:        4 bytes
 12497 ;; Hardware stack levels used:    1
 12498 ;; This function calls:
 12499 ;;		Nothing
 12500 ;; This function is called by:
 12501 ;;		_ADC_ISR
 12502 ;; This function uses a non-reentrant model
 12503 ;;
 12504                           
 12505                           	psect	text54
 12506  003EEC                     __ptext54:
 12507                           	opt stack 0
 12508  003EEC                     _ADC_GetConversionResult:
 12509                           	opt stack 23
 12510                           
 12511                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
 12512                           
 12513                           ;incstack = 0
 12514  003EEC  50C4               	movf	4036,w,c	;volatile
 12515  003EEE  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 12516  003EF0  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 12517  003EF2  50C3               	movf	4035,w,c	;volatile
 12518  003EF4  2403               	addwf	??_ADC_GetConversionResult,w,c
 12519  003EF6  6E01               	movwf	?_ADC_GetConversionResult,c
 12520  003EF8  0E00               	movlw	0
 12521  003EFA  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 12522  003EFC  6E02               	movwf	?_ADC_GetConversionResult+1,c
 12523  003EFE  0012               	return	
 12524  003F00                     __end_of_ADC_GetConversionResult:
 12525                           	opt stack 0
 12526                           pclatu	equ	0xFFB
 12527                           pclath	equ	0xFFA
 12528                           tblptru	equ	0xFF8
 12529                           tblptrh	equ	0xFF7
 12530                           tblptrl	equ	0xFF6
 12531                           tablat	equ	0xFF5
 12532                           prodh	equ	0xFF4
 12533                           prodl	equ	0xFF3
 12534                           intcon	equ	0xFF2
 12535                           intcon2	equ	0xFF1
 12536                           postinc0	equ	0xFEE
 12537                           fsr0h	equ	0xFEA
 12538                           fsr0l	equ	0xFE9
 12539                           wreg	equ	0xFE8
 12540                           postinc1	equ	0xFE6
 12541                           postdec1	equ	0xFE5
 12542                           fsr1h	equ	0xFE2
 12543                           fsr1l	equ	0xFE1
 12544                           indf2	equ	0xFDF
 12545                           postinc2	equ	0xFDE
 12546                           postdec2	equ	0xFDD
 12547                           fsr2h	equ	0xFDA
 12548                           fsr2l	equ	0xFD9
 12549                           status	equ	0xFD8
 12550                           pclatu	equ	0xFFB
 12551                           pclath	equ	0xFFA
 12552                           tblptru	equ	0xFF8
 12553                           tblptrh	equ	0xFF7
 12554                           tblptrl	equ	0xFF6
 12555                           tablat	equ	0xFF5
 12556                           prodh	equ	0xFF4
 12557                           prodl	equ	0xFF3
 12558                           intcon	equ	0xFF2
 12559                           intcon2	equ	0xFF1
 12560                           postinc0	equ	0xFEE
 12561                           fsr0h	equ	0xFEA
 12562                           fsr0l	equ	0xFE9
 12563                           wreg	equ	0xFE8
 12564                           postinc1	equ	0xFE6
 12565                           postdec1	equ	0xFE5
 12566                           fsr1h	equ	0xFE2
 12567                           fsr1l	equ	0xFE1
 12568                           indf2	equ	0xFDF
 12569                           postinc2	equ	0xFDE
 12570                           postdec2	equ	0xFDD
 12571                           fsr2h	equ	0xFDA
 12572                           fsr2l	equ	0xFD9
 12573                           status	equ	0xFD8
 12574                           
 12575                           	psect	rparam
 12576  0000                     pclatu	equ	0xFFB
 12577                           pclath	equ	0xFFA
 12578                           tblptru	equ	0xFF8
 12579                           tblptrh	equ	0xFF7
 12580                           tblptrl	equ	0xFF6
 12581                           tablat	equ	0xFF5
 12582                           prodh	equ	0xFF4
 12583                           prodl	equ	0xFF3
 12584                           intcon	equ	0xFF2
 12585                           intcon2	equ	0xFF1
 12586                           postinc0	equ	0xFEE
 12587                           fsr0h	equ	0xFEA
 12588                           fsr0l	equ	0xFE9
 12589                           wreg	equ	0xFE8
 12590                           postinc1	equ	0xFE6
 12591                           postdec1	equ	0xFE5
 12592                           fsr1h	equ	0xFE2
 12593                           fsr1l	equ	0xFE1
 12594                           indf2	equ	0xFDF
 12595                           postinc2	equ	0xFDE
 12596                           postdec2	equ	0xFDD
 12597                           fsr2h	equ	0xFDA
 12598                           fsr2l	equ	0xFD9
 12599                           status	equ	0xFD8


Data Sizes:
    Strings     31
    Constant    145
    Data        0
    BSS         315
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      69
    BANK0           160     86     152
    BANK1           256      0     230
    BANK2           256     37      37
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_2(CODE[23]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S1039$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _printf->___llmod
    _putch->_EUSART1_Write
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _Temp_Fault->___wmul
    _Temp_Convert->___ftdiv
    ___awtoft->___awdiv
    ___awdiv->___awmod
    _Battery_Get->___wmul
    _Battery_Fault->___wmul
    ___ftge->___wmul
    _Battery_Convert->___ftdiv
    ___ftdiv->___altoft
    ___altoft->___ftpack
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftadd->___ftdiv

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _Temp_Read->_ADC_StartConversion
    _Battery_Read->_ADC_StartConversion
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Temp_Convert
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    _Temp_Fault->___ftge
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _RunBypas->___ftge
    _Battery_Fault->___ftge
    _Battery_Convert->_Battery_Filter
    _Battery_Filter->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5  232479
                                             77 BANK0      9     4      5
                    _Battery_Convert
                      _Battery_Fault
                        _Battery_Get
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              54    47      7   73619
                                             55 BANK0     13     6      7
                                              0 BANK2     37    37      0
                        _Battery_Get (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   17704
                                             27 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             26 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   17425
                                             27 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1819
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     608
                                             26 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          16    10      6     827
                                             26 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2732
                                             34 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     848
                                             39 COMRAM     8     0      8
                                              0 BANK0      1     1      0
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     703
                                             26 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     602
                                             34 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                             26 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    7472
                                              9 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        11    11      0   86075
                                             66 BANK0     11    11      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   34385
                                             61 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     352
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   18612
                                             49 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2840
                                             40 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5873
                                             49 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2447
                                             32 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   18418
                                             49 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    8439
                                              9 BANK0      7     7      0
                        _Battery_Get
                          _SetBypass
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypass                                            6     2      4     649
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    6115
                                              0 BANK0      3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    7503
                                              9 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1430
                                              0 BANK0      9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   43058
                                             51 BANK0      4     4      0
                     _Battery_Filter
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3549
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2834
                                             34 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   18418
                                             49 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    5930
                                             40 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6811
                                             12 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5386
                                             37 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2553
                                             26 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1215
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             3     3      0      44
                                              2 COMRAM     3     3      0
                       _Battery_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (8) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              8     8      0    1171
                                              4 COMRAM     8     8      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     706
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Get
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _RunBypas
     _Battery_Get
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _SetBypass
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _log
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _printf
     _Battery_Get (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _EUSART1_Write
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     25      25       8       14.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      E6       6       89.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     56      98       4       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E8       9        0.0%
DATA                 0      0     1E8      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun May 31 04:56:05 2015

                       ___altoft@exp 002B             _eusart1TxBufferRemaining 0045  
                      ___altoft@sign 002C                         ___awdiv@sign 0026  
                ___wmul@multiplicand 002B                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                         ___ftadd@exp1 0090  
                       ___ftadd@exp2 008F                         ___ftadd@sign 008E  
                                l118 3CC6                                  l501 3258  
                                l530 3298                                  l523 3288  
                                l516 3278                                  l509 3268  
                                l551 32C8                                  l544 32B8  
                                l537 32A8                                  l565 32E8  
                                l558 32D8                                  l676 0E58  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0043                                  _log 2B02  
                    __end_of_ADC_ISR 195C                                  fsr2 000FD9  
                       ___awmod@sign 0020                                  prod 000FF3  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                    ?_Battery_Filter 0001                         ___ftdiv@cntr 0066  
                       ___ftdiv@sign 006B                                 l1100 224E  
                               l1111 2EE8                                 l1007 2DC6  
                               l1204 39F4                                 l1125 3044  
                               l1150 3DFA                                 l1214 3AE2  
                               l1118 2FB2                                 l1119 2FDA  
                               l1080 2112                                 l1082 213A  
                               l1091 2224                                 l1076 20D8  
                               l3302 37FC                                 l5000 1CE4  
                               l5110 2D5A                                 l5102 2D2A  
                               l5006 1DA6                                 l5120 2D8E  
                               l5210 34B0                                 l5130 2DB6  
                               l5034 2F78                                 l5018 3E68  
                               l5300 3AAE                                 l5132 2DC2  
                               l5124 2D9E                                 l5028 2F4E  
                               l5142 392E                                 l5206 346A  
                               l5230 2850                                 l5310 3AFA  
                               l5062 300C                                 l5144 393A  
                               l5216 34F4                                 l5304 3AD2  
                               l5312 3B06                                 l5072 3034  
                               l5400 06DC                                 l5162 2E40  
                               l5330 3152                                 l5082 2CAC  
                               l5074 3040                                 l5066 301C  
                               l5402 06F6                                 l5156 2E0C  
                               l5260 294E                                 l5252 2914  
                               l5412 073A                                 l5420 07B4  
                               l4630 2130                                 l4710 2A6C  
                               l5182 2EA0                                 l5262 2954  
                               l5502 0B48                                 l5430 0822  
                               l5406 0700                                 l4640 2172  
                               l4624 2120                                 l4720 2AB6  
                               l5344 35C2                                 l5248 28F8  
                               l5280 39B6                                 l5088 2CE8  
                               l5600 0FB8                                 l5440 0854  
                               l5432 083C                                 l4650 21C6  
                               l4618 20E6                                 l4706 2A4E  
                               l5266 297A                                 l5258 2936  
                               l4810 38BE                                 l4802 38A4  
                               l4730 3CB6                                 l5514 0BBA  
                               l5442 088C                                 l5426 07E2  
                               l4580 36AE                                 l4660 221A  
                               l4652 21D2                                 l4716 2A98  
                               l5276 39A6                                 l5604 0FC6  
                               l5540 0CE4                                 l5532 0C6E  
                               l5436 084E                                 l4590 370A  
                               l4582 36CC                                 l4574 3696  
                               l4646 21A6                                 l4910 2B70  
                               l5358 3A80                                 l5278 39B2  
                               l4822 38EA                                 l4814 38D2  
                               l4806 38B2                                 l4742 3CE8  
                               l5622 106A                                 l5550 0D1E  
                               l5518 0C22                                 l5606 0FD2  
                               l4648 21BA                                 l5712 341C  
                               l4760 3772                                 l4840 31A6  
                               l4904 2B3E                                 l5392 24FA  
                               l5288 39E6                                 l5296 3A9C  
                               l4808 38BA                                 l4744 3CEA  
                               l5640 10DE                                 l5616 104C  
                               l5552 0D36                                 l5536 0CBE  
                               l5448 08A8                                 l4586 36E2  
                               l4578 36A4                                 l4666 2278  
                               l4658 2206                                 l4930 328C  
                               l4922 324C                                 l4770 3794  
                               l4754 3752                                 l4834 3C18  
                               l4842 3232                                 l5298 3AAA  
                               l4818 38DC                                 l5650 1142  
                               l5570 0E1A                                 l5562 0D80  
                               l5546 0D10                                 l5490 0AB4  
                               l5482 0A42                                 l5474 09D4  
                               l5458 090C                                 l4588 3700  
                               l4676 22C6                                 l4692 2A00  
                               l4940 32DC                                 l4932 329C  
                               l4924 325C                                 l5708 33E2  
                               l5644 1112                                 l5636 10B6  
                               l5580 0E5C                                 l5556 0D44  
                               l5396 06C6                                 ?_log 009D  
                               l4686 29C6                                 l4934 32AC  
                               l4926 326C                                 l4766 3788  
                               l4782 37BA                                 l5670 11F4  
                               l5662 11BE                                 l5590 0ED0  
                               l5574 0E28                                 l5486 0A6E  
                               l4936 32BC                                 l4928 327C  
                               l4944 32EC                                 l4768 3790  
                               l4960 1F3A                                 l5664 11CA  
                               l5656 117A                                 l5568 0E0C  
                               l5744 361A                                 l5728 35E2  
                               l4858 2794                                 l4938 32CC  
                               l4786 37C8                                 l4778 37B0  
                               l5682 1232                                 l5690 12F4  
                               l5658 1186                                 l5586 0E7E  
                               l5498 0B1C                                 l5676 1210  
                               l5692 1308                                 l4886 260C  
                               l4798 3888                                 l4982 1AB0  
                               l5686 1258                                 l5678 121A  
                               l5598 0FAA                                 l4968 201E  
                               l4992 1B9E                                 l4988 1B72  
                               STR_1 06A9                                 STR_2 0692  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u2810 3824  
                               u5135 2B1A                                 u2818 3826  
                               u4611 2084                                 u4621 20A4  
                               u5341 2F34                                 u5430 2C8E  
                               u5361 2F5E                                 u5450 2CCA  
                               u5435 2C84                                 u4821 29A4  
                               u5525 3914                                 u5541 2DEC  
                               u6245 1024                                 u5631 2828  
                               u5455 2CC0                                 u4841 29DE  
                               u5561 2E20                                 u5650 287C  
                               u5655 2872                                 u5980 095C  
                               u5965 08E6                                 u5985 0950  
                               _TMR1 000FCE                                 _WPUB 000F61  
                      _EUSART1_Write 3CB4                                 _main 35CA  
                       ___ftpack@arg 001B                         ___ftpack@exp 001E  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                        __CFG_BORV$190 000000  
                               log@x 009D                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A8                        __CFG_IESO$OFF 000000  
                       ___ftmul@cntr 0079                         ___ftmul@sign 007A  
                      printf@vd_1055 020B                    ADC_ISR@ADC_Result 000B  
                       ___fttol@exp1 0090                                ??_log 0030  
                       ___fttol@lval 008C                     ?_Battery_Convert 0001  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 3F0E  
                              ?_main 00AD                      __end_of___awdiv 37D2  
                    __end_of___ftadd 22EC                      __end_of___awmod 38F4  
                    __end_of___ftdiv 2F24                      _TMR1_StartTimer 3F24  
                    __end_of___ftneg 3E08                      __end_of___lldiv 3A06  
                    __end_of___ftmul 2B02                      ___awdiv@divisor 0023  
                              _T1CON 000FCD                      __end_of___llmod 3AF4  
                    __end_of___ftsub 3C78                      __end_of___fttol 298C  
                              _LATA0 007C48                                _LATB0 007C50  
                              _LATB1 007C51                                _LATC0 007C58  
                              _LATA4 007C4C                                _LATC1 007C59  
                              _LATB3 007C53                                _LATA6 007C4E  
                              _LATD1 007C61                                _LATD2 007C62  
                              _LATC4 007C5C                                _LATD3 007C63  
                              _LATC5 007C5D                                _LATD5 007C65  
                     __CFG_DEBUG$OFF 000000                                i2l130 3D52  
                              i2l280 0058                                i2l282 0064  
                              i2l286 006E                                i2l278 004C  
                    ___awdiv@counter 0025                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
   __size_of_ADC_GetConversionResult 0014                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                         ___lltoft@exp 002B  
               _EUSART1_Transmit_ISR 3D26                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR1_ISR 3BA6                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 002C  
                    __end_of_dpowers 0629                                _frexp 37D2  
                              _errno 00E2                                _scale 195C  
                    __end_of_isdigit 3E70                   __CFG_MCLRE$EXTMCLR 000000  
                      ___ftpack@sign 001F                                _putch 3F1A  
                              main@x 00B2                       SetBypass@state 001D  
                     ?_EUSART1_Write 0001              __end_of_TMR1_Initialize 3E50  
                        _Battery_Adc 00B6                                tablat 000FF5  
                        _Battery_Get 3CEE                                status 000FD8  
                     __CFG_HFOFST$ON 000000                      RunBypas@cellbyp 0069  
                    RunBypas@batvolt 006B                       __CFG_PBADEN$ON 000000  
                    __initialization 3D86                          log@exponent 00A0  
         __end_of_EUSART1_Initialize 3CB4                         __end_of_main 3686  
                   __end_of_Set_4051 3DE2                            ??_ADC_ISR 0005  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 0030  
                      ___fttol@sign1 008B                        __activetblptr 000002  
         ADC_StartConversion@channel 0002                 __size_of__tdiv_to_l_ 0132  
              ?_EUSART1_Transmit_ISR 0001                     __end_of_RunBypas 3424  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               ?_frexp 001B  
                   __end_of___altoft 3984                     ___llmod@dividend 0028  
                             ?_scale 007B                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     ___awdiv@dividend 0021  
                   __end_of___awtoft 3C3C                               _ANSELA 000F38  
                             ?_putch 0001                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                     __end_of___ftpack 372E  
                             _T1GCON 000FCC                               _RC1STA 000FAB  
                   __end_of___lltoft 3B50                __size_of_Battery_Read 0018  
                             i2l4000 1806                               i2l4012 18F0  
                             i2l4004 1854                               i2l4008 18A2  
                             i2l4016 1902                               i2l2272 3D4E  
                             i2l4018 1956                       __CFG_WDTEN$OFF 000000  
                             i2l3900 134A                               i2l3912 13B6  
                             i2l3930 1458                               i2l3906 1380  
                             i2l3924 1422                               i2l3852 3B8A  
                             i2l3942 14C4                               i2l3918 13EC  
                             i2l3960 1566                               i2l3936 148E  
                             i2l3954 1530                               i2l3980 1680  
                             i2l3972 15E4                               i2l3948 14FA  
                             i2l3964 1578                               i2l3892 3D82  
                             i2l3884 3D5E                               i2l3966 15CC  
                             i2l3992 176A                               i2l3984 16CE  
                             i2l3976 1632                               i2l3968 15D0  
                             i2l3996 17B8                               i2l3988 171C  
                             _RCREG1 000FAE                        ??_Temp_Filter 0030  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                         _Temp_Fault 3A06                       __CFG_XINST$OFF 000000  
                   __end_of__powers_ 0677                               ___ftge 3424  
            __end_of_TMR1_StartTimer 3F28                   __size_of_SetBypass 00F2  
                             ___wmul 3E08                            ??___awdiv 0025  
                          ??___ftadd 008B                       __CFG_STVREN$ON 000000  
                          ??___awmod 001F                            ??___ftdiv 002D  
                          ??___ftneg 001E                            ??___lldiv 0023  
                          ??___ftmul 0072                            ??___llmod 0030  
                          ??___ftsub 0030                            ??___fttol 0086  
                             _fround 1DD2                               clear_0 3D8C  
                             clear_1 3D98                               clear_2 3DA4  
                   ___awdiv@quotient 0027                   __size_of_Temp_Read 0018  
                    ___awmod@divisor 001D                      ___awmod@counter 001F  
                             _printf 06B2                ___ftmul@f3_as_product 0076  
                          ??_isdigit 001B                         _Battery_Read 3ED4  
                       _Battery_Volt 0132                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                      ??_EUSART1_Write 001B  
                    _eusart1RxBuffer 0100        __size_of_INTERRUPT_Initialize 000C  
                    _eusart1TxBuffer 0030                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 3E70                     __end_oflog@coeff 0692  
                         __accesstop 0060              __end_of__initialization 3DAA  
                         ___altoft@c 0023                           ___ftadd@f1 0085  
                         ___ftadd@f2 0088                           ___ftge@ff1 0060  
                         ___ftge@ff2 0063                   ?_SYSTEM_Initialize 0001  
                       eval_poly@res 009A                           ___ftdiv@f1 0060  
                         ___ftdiv@f2 0063                           ___ftdiv@f3 0067  
                         ___ftneg@f1 001B                           ___awtoft@c 0029  
                         ___ftmul@f1 006C                           ___ftmul@f2 006F  
                         ___ftsub@f1 0091                           ___ftsub@f2 0094  
                __end_of_Temp_Filter 2688                           ___fttol@f1 0082  
       __size_of_ADC_StartConversion 001A                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 001B                            ?_TMR1_ISR 0001  
                         ___lltoft@c 0023                        __end_of_frexp 3864  
                      __end_of_scale 1DD2                        __end_of_putch 3F24  
              Battery_Get@channelnum 0060               ??_EUSART1_Transmit_ISR 0001  
            _ADC_GetConversionResult 3EEC                           __div_to_l_ 2C70  
                   ??_Battery_Filter 0030          __end_of_EUSART1_Receive_ISR 3D86  
                      ?_Temp_Convert 0001                      __div_to_l_@exp1 002A  
                    __div_to_l_@cntr 0029                              ??_frexp 0020  
                            ??_scale 0030            __end_of_SYSTEM_Initialize 3E8A  
                  __end_of_SetBypass 333C                      __div_to_l_@quot 0025  
                            ??_putch 001C                        _eusart1RxHead 003F  
                      _eusart1TxHead 0041                        _eusart1RxTail 0040  
                         __pbssBANK0 00B6                           __pbssBANK1 0100  
                      _eusart1TxTail 0042                   __size_of_eval_poly 00F2  
                    __CFG_PLLCFG$OFF 000000                    __end_of_Temp_Read 3ED4  
                          ?_Set_4051 0001                           __pnvCOMRAM 0043  
              Temp_Convert@steinhart 00AA                          ?_Temp_Fault 0001  
                      __div_to_l_@f1 001B                        __div_to_l_@f2 001E  
                 __CFG_CCP2MX$PORTC1 000000                          Temp_Fault@i 006A  
                            ?___ftge 0060                            ?_RunBypas 0001  
                            ?___wmul 0029                     ?_TMR1_StartTimer 0001  
                         ??_TMR1_ISR 0003                   __CFG_CCP3MX$PORTB5 000000  
                          ?___altoft 0023                              _ADC_ISR 132C  
                            ?_fround 007B                            ?___awtoft 0029  
                          ?___ftpack 001B                              ?_printf 0097  
                          ?___lltoft 0023              __size_of_ADC_Initialize 0018  
                      Temp_Convert@x 00A8               __size_of_Battery_Fault 00D2  
                    Temp_Fault@fault 0069                       Battery_Fault@i 006A  
                            _OSCCON2 000FD2                       ??_Temp_Convert 00A2  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                         ?_Battery_Get 0060  
                         ??_Set_4051 0003                          _Temp_Filter 2500  
                        _Temp_Aquire 003C                      __CFG_PWRTEN$OFF 000000  
                  __end_of__npowers_ 0650                              __Hparam 0000  
                         _scale$1705 007E                              __Lparam 0000  
                         ??_RunBypas 002F                      __size_of___ftge 00D4  
                            ___awdiv 372E                              ___ftadd 206C  
                            ___awmod 3864                              ___ftdiv 2DD8  
                            ___ftneg 3DE2                              ___lldiv 3984  
                    __size_of___wmul 0026                              ___ftmul 298C  
                            ___llmod 3A88                              ___ftsub 3C3C  
                            ___fttol 2810                         __psmallconst 0600  
                         ??___altoft 0027            ??_ADC_GetConversionResult 0003  
                            __pcinit 3D86                           ??___awtoft 002C  
                         ??___ftpack 0020                    __end_of_eval_poly 324A  
                    __size_of_fround 029A                              __ramtop 0600  
                         ??___lltoft 0027                              __ptext0 35CA  
                            __ptext1 06B2                              __ptext2 195C  
                            __ptext3 3F1A                              __ptext4 3CB4  
                            __ptext5 3E50                              __ptext6 1DD2  
                            __ptext7 3864                              __ptext8 2F24  
                            __ptext9 2C70                      __size_of_printf 0C7A  
                          _T1CONbits 000FCD                          ?__div_to_l_ 001B  
                            _dpowers 0601                _OSCILLATOR_Initialize 3F00  
                       __size_of_log 016E                              _isdigit 3E50  
                   ___awmod@dividend 001B                  __size_of_Temp_Fault 0082  
                 _EUSART1_Initialize 3C78             ??_PIN_MANAGER_Initialize 001B  
           __size_of_Battery_Convert 0102           __size_of_SYSTEM_Initialize 001A  
               end_of_initialization 3DAA                  ?_EUSART1_Initialize 0001  
                      __Lmediumconst 0000                        _Battery_Fault 34F8  
                    ___lldiv@divisor 001F                      ___lldiv@counter 0027  
                            printf@c 0224                              printf@f 0097  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                     Battery_Convert@x 0095  
                     __tdiv_to_l_@f1 001B                       __tdiv_to_l_@f2 001E  
               ??_EUSART1_Initialize 001B                        ??__tdiv_to_l_ 0021  
                _ADC_StartConversion 3E8A                  EUSART1_Write@txData 001B  
                        _Volt_Aquire 003D                       ?_Battery_Fault 0001  
                        printf@integ 0211                          ___ftdiv@exp 006A  
                        printf@width 021D                         SetBypass@pin 001B  
                __size_of__div_to_l_ 0168                          ___ftmul@exp 0075  
               ?_ADC_StartConversion 0001                 __end_of_Temp_Convert 2500  
       __end_of_INTERRUPT_Initialize 3F1A                       __end_of___ftge 34F8  
                     __end_of___wmul 3E2E                    __size_of_TMR1_ISR 0056  
                     _ADC_Initialize 3EA4               ?_OSCILLATOR_Initialize 0001  
                     __end_of_fround 206C                       __end_of_printf 132C  
                start_initialization 3D86                           eval_poly@d 0094  
                         eval_poly@n 0096                           eval_poly@x 0091  
    __size_of_PIN_MANAGER_Initialize 004E                  __end_of__tdiv_to_l_ 3056  
                        __end_of_log 2C70                          putch@txData 001C  
              __end_of_EUSART1_Write 3CEE                           frexp@value 001B  
                  ??_Battery_Convert 0093                            _SetBypass 324A  
                    ___llmod@divisor 002C                 __size_of_Battery_Get 0038  
                    ___llmod@counter 0060                         ??_Temp_Fault 002F  
                  __size_of_Set_4051 002E                            _Temp_DegF 018C  
                   _PrevBattery_Volt 0150                            _Temp_Done 00DE  
                          _Temp_Read 3EBC                ??_ADC_StartConversion 0001  
           __size_of_TMR1_Initialize 0022                             ??___ftge 0066  
                           ??___wmul 002D               __end_of_ADC_Initialize 3EBC  
                          RunBypas@i 006E                             ?_ADC_ISR 0001  
                           ??_fround 0030                    __size_of_RunBypas 00E8  
                           ??_printf 009E                       _eusart1RxCount 003E  
                  __size_of___altoft 0090                           fround@prec 0084  
                  __size_of___awtoft 0048                    __size_of___ftpack 00A8  
                          _Volt_Done 00E0                    __size_of___lltoft 005C  
                        __pbssCOMRAM 0030        __size_of_EUSART1_Transmit_ISR 0030  
                      __pcstackBANK0 0060                        __pcstackBANK2 0200  
                 __end_of_Temp_Fault 3A88                  __end_of__stringdata 06B1  
                       _isdigit$1336 001C                        _PrevTemp_DegF 016E  
                    ??_Battery_Fault 002F         __size_of_EUSART1_Receive_ISR 0030  
                       ?_Temp_Filter 0001                           ?_SetBypass 001B  
                         ?_Temp_Read 0001               _PIN_MANAGER_Initialize 3BA6  
                          __pintcode 0008                    _Temp_Convert$1701 00A4  
                  _Temp_Convert$1702 00A6                             ?___awdiv 0021  
                           ?___ftadd 0085                             ?___awmod 001B  
                           ?___ftdiv 0060                             ?___ftneg 001B  
                           ?___lldiv 001B                             ?___ftmul 006C  
                           ?___llmod 0028                             ?___ftsub 0091  
                          __npowers_ 0629                             ?___fttol 0082  
                       Temp_Filter@x 0091                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 000D                          __tdiv_to_l_ 2F24  
                       ??__div_to_l_ 0021                             _BAUD1CON 000FB8  
                        __smallconst 0600             __size_of_TMR1_StartTimer 0004  
                           ?_isdigit 0001                            _eval_poly 3158  
                     __size_of_frexp 0092                       __size_of_scale 0476  
                     __size_of_putch 000A                 _INTERRUPT_Initialize 3F0E  
            __size_of_Battery_Filter 0188                       ___wmul@product 002D  
              __size_of_Temp_Convert 0214                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 00A0  
                           _PIR1bits 000F9E                   __end_of__div_to_l_ 2DD8  
                    Battery_Filter@x 0091                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 3B50  
                  ??_TMR1_Initialize 001B                     __size_of_ADC_ISR 0630  
                         _ADCON0bits 000FC2                          __stringdata 0692  
                  ___wmul@multiplier 0029                            main@x_971 00B4  
                         printf@_val 0214                           printf@flag 021B  
                         printf@fval 021F                           printf@prec 0222  
                      ?_Battery_Read 0001                           ?_eval_poly 0091  
                       _Temp_Convert 22EC                          _INTCON2bits 000FF1  
              ?_INTERRUPT_Initialize 0001                             _Set_4051 3DB4  
                        ??_SetBypass 001F                            frexp@eptr 001E  
                           __Hrparam 0000                          ??_Temp_Read 0003  
                           _Temp_Adc 00E4                             __Lrparam 0000  
           ?_ADC_GetConversionResult 0001                   __CFG_BOREN$SBORDIS 000000  
                           _RunBypas 333C                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 001B                     __size_of___awdiv 00A4  
                   __size_of___ftadd 0280                     __size_of___awmod 0090  
                   __size_of___ftdiv 014C                     __size_of___ftneg 0026  
                   __size_of___lldiv 0082                             ___altoft 38F4  
                   __size_of___ftmul 0176                     __size_of___llmod 006C  
                   __size_of___ftsub 003C                     __size_of___fttol 017C  
        __size_of_EUSART1_Initialize 003C                             ___awtoft 3BF4  
                           ___ftpack 3686                          _fround$1703 0081  
                        _fround$1704 007E                             ___lltoft 3AF4  
                     ??_Battery_Read 0003                      _Battery_Convert 3056  
                 Battery_Fault@fault 0069                     __size_of_isdigit 0020  
                           __ptext10 3AF4                             __ptext11 3A88  
                           __ptext20 3BF4                             __ptext12 3984  
                           __ptext21 3C3C                             __ptext13 2810  
                         _T1GCONbits 000FCC                             __ptext30 3C78  
                           __ptext22 372E                             __ptext14 3DE2  
                           __ptext31 3EA4                             __ptext23 2500  
                           __ptext15 3A06                             __ptext40 2688  
                           __ptext32 333C                             __ptext24 3E70  
                           __ptext16 22EC                             __ptext41 3E08  
                           __ptext33 324A                             __ptext25 3E2E  
                           __ptext17 2B02                             __ptext50 3D56  
                           __ptext42 298C                             __ptext34 3CEE  
                           __ptext26 3F24                             __ptext18 37D2  
                           __ptext51 132C                             __ptext43 206C  
                           __ptext35 34F8                             __ptext27 3BA6  
                           __ptext19 3158                             __ptext52 3DB4  
                           __ptext44 3686                             __ptext36 3424  
                           __ptext28 3F00                             __ptext53 3E8A  
                           __ptext37 3056                             __ptext29 3F0E  
                           __ptext54 3EEC                             __ptext46 3B50  
                           __ptext38 2DD8                             __ptext47 3EBC  
                           __ptext39 38F4                             __ptext48 3ED4  
                           __ptext49 3D26                             __powers_ 0650  
                  ??_TMR1_StartTimer 001B                        __size_of_main 00BC  
                       _TmpTemp_DegF 01C8                 __size_of_Temp_Filter 0188  
                         _RC1STAbits 000FAB   __end_of_INTERRUPT_InterruptManager 00A8  
         _INTERRUPT_InterruptManager 0008                             main@argc 00AD  
                          printf@exp 0219                             main@argv 00AF  
                _EUSART1_Receive_ISR 3D56                             log@coeff 0677  
                         _INTCONbits 000FF2                          ??_eval_poly 0098  
                           isdigit@c 001D               ??_INTERRUPT_Initialize 001B  
                           scale@scl 0081                        ??_Battery_Get 002F  
                           intlevel2 0000                     __tdiv_to_l_@exp1 0029  
                   __tdiv_to_l_@cntr 0028                       _Battery_Filter 2688  
                      _CountCallBack 003A                     __tdiv_to_l_@quot 0024  
               ?_EUSART1_Receive_ISR 0001          __end_of_ADC_StartConversion 3EA4  
                   _TempBattery_Volt 01AA                     ___lldiv@dividend 001B  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 3F00  
       __end_of_EUSART1_Transmit_ISR 3D56                     ??_ADC_Initialize 001B  
                           printf@ap 020F                             printf@vd 0207  
            __end_of_Battery_Convert 3158               __size_of_EUSART1_Write 003A  
                       ?__tdiv_to_l_ 001B                          _printf$1053 0203  
                        _printf$1706 0200                     ___lldiv@quotient 0023  
                  __CFG_T3CMX$PORTC0 000000               __end_of_Battery_Filter 2810  
              ??_EUSART1_Receive_ISR 0001       __end_of_PIN_MANAGER_Initialize 3BF4  
              __end_of_Battery_Fault 35CA                    __CFG_FOSC$INTIO67 000000  
               __end_of_Battery_Read 3EEC                      _TMR1_Initialize 3E2E  
                   _ADC_Buffer_Point 0038                  __end_of_Battery_Get 3D26  
                    Set_4051@Channel 0001  
