

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri May 01 01:03:22 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	smallconst
    71  000600                     __psmallconst:
    72                           	opt stack 0
    73  000600  00                 	db	0
    74  000601                     _dpowers:
    75                           	opt stack 0
    76  000601  0001               	dw	1
    77  000603  0000               	dw	0
    78  000605  000A               	dw	10
    79  000607  0000               	dw	0
    80  000609  0064               	dw	100
    81  00060B  0000               	dw	0
    82  00060D  03E8               	dw	1000
    83  00060F  0000               	dw	0
    84  000611  2710               	dw	10000
    85  000613  0000               	dw	0
    86  000615  86A0               	dw	34464
    87  000617  0001               	dw	1
    88  000619  4240               	dw	16960
    89  00061B  000F               	dw	15
    90  00061D  9680               	dw	38528
    91  00061F  0098               	dw	152
    92  000621  E100               	dw	57600
    93  000623  05F5               	dw	1525
    94  000625  CA00               	dw	51712
    95  000627  3B9A               	dw	15258
    96  000629                     __end_of_dpowers:
    97                           	opt stack 0
    98  000629                     __npowers_:
    99                           	opt stack 0
   100  000629  00                 	db	0
   101  00062A  80                 	db	128
   102  00062B  3F                 	db	63
   103  00062C  CD                 	db	205
   104  00062D  CC                 	db	204
   105  00062E  3D                 	db	61
   106  00062F  D7                 	db	215
   107  000630  23                 	db	35
   108  000631  3C                 	db	60
   109  000632  12                 	db	18
   110  000633  83                 	db	131
   111  000634  3A                 	db	58
   112  000635  B7                 	db	183
   113  000636  D1                 	db	209
   114  000637  38                 	db	56
   115  000638  C6                 	db	198
   116  000639  27                 	db	39
   117  00063A  37                 	db	55
   118  00063B  38                 	db	56
   119  00063C  86                 	db	134
   120  00063D  35                 	db	53
   121  00063E  C0                 	db	192
   122  00063F  D6                 	db	214
   123  000640  33                 	db	51
   124  000641  CC                 	db	204
   125  000642  2B                 	db	43
   126  000643  32                 	db	50
   127  000644  70                 	db	112
   128  000645  89                 	db	137
   129  000646  30                 	db	48
   130  000647  E7                 	db	231
   131  000648  DB                 	db	219
   132  000649  2E                 	db	46
   133  00064A  E5                 	db	229
   134  00064B  3C                 	db	60
   135  00064C  1E                 	db	30
   136  00064D  42                 	db	66
   137  00064E  A2                 	db	162
   138  00064F  0D                 	db	13
   139  000650                     __end_of__npowers_:
   140                           	opt stack 0
   141  000650                     __powers_:
   142                           	opt stack 0
   143  000650  00                 	db	0
   144  000651  80                 	db	128
   145  000652  3F                 	db	63
   146  000653  00                 	db	0
   147  000654  20                 	db	32
   148  000655  41                 	db	65
   149  000656  00                 	db	0
   150  000657  C8                 	db	200
   151  000658  42                 	db	66
   152  000659  00                 	db	0
   153  00065A  7A                 	db	122
   154  00065B  44                 	db	68
   155  00065C  40                 	db	64
   156  00065D  1C                 	db	28
   157  00065E  46                 	db	70
   158  00065F  50                 	db	80
   159  000660  C3                 	db	195
   160  000661  47                 	db	71
   161  000662  24                 	db	36
   162  000663  74                 	db	116
   163  000664  49                 	db	73
   164  000665  97                 	db	151
   165  000666  18                 	db	24
   166  000667  4B                 	db	75
   167  000668  BC                 	db	188
   168  000669  BE                 	db	190
   169  00066A  4C                 	db	76
   170  00066B  6B                 	db	107
   171  00066C  6E                 	db	110
   172  00066D  4E                 	db	78
   173  00066E  03                 	db	3
   174  00066F  15                 	db	21
   175  000670  50                 	db	80
   176  000671  79                 	db	121
   177  000672  AD                 	db	173
   178  000673  60                 	db	96
   179  000674  F3                 	db	243
   180  000675  49                 	db	73
   181  000676  71                 	db	113
   182  000677                     __end_of__powers_:
   183                           	opt stack 0
   184  000677                     log@coeff:
   185                           	opt stack 0
   186  000677  00                 	db	0
   187  000678  00                 	db	0
   188  000679  00                 	db	0
   189  00067A  00                 	db	0
   190  00067B  80                 	db	128
   191  00067C  3F                 	db	63
   192  00067D  F0                 	db	240
   193  00067E  FF                 	db	255
   194  00067F  BE                 	db	190
   195  000680  E2                 	db	226
   196  000681  A9                 	db	169
   197  000682  3E                 	db	62
   198  000683  83                 	db	131
   199  000684  76                 	db	118
   200  000685  BE                 	db	190
   201  000686  AE                 	db	174
   202  000687  2B                 	db	43
   203  000688  3E                 	db	62
   204  000689  3C                 	db	60
   205  00068A  C3                 	db	195
   206  00068B  BD                 	db	189
   207  00068C  D2                 	db	210
   208  00068D  13                 	db	19
   209  00068E  3D                 	db	61
   210  00068F  78                 	db	120
   211  000690  D3                 	db	211
   212  000691  BB                 	db	187
   213  000692                     __end_oflog@coeff:
   214                           	opt stack 0
   215  0000                     _TMR1	set	4046
   216  0000                     _ADCON0	set	4034
   217  0000                     _ADCON0bits	set	4034
   218  0000                     _ADCON1	set	4033
   219  0000                     _ADCON2	set	4032
   220  0000                     _ADRESH	set	4036
   221  0000                     _ADRESL	set	4035
   222  0000                     _ANSELA	set	3896
   223  0000                     _ANSELB	set	3897
   224  0000                     _ANSELC	set	3898
   225  0000                     _ANSELD	set	3899
   226  0000                     _ANSELE	set	3900
   227  0000                     _BAUD1CON	set	4024
   228  0000                     _INTCON2bits	set	4081
   229  0000                     _INTCONbits	set	4082
   230  0000                     _IPR1bits	set	3999
   231  0000                     _LATA	set	3977
   232  0000                     _LATB	set	3978
   233  0000                     _LATC	set	3979
   234  0000                     _LATD	set	3980
   235  0000                     _LATE	set	3981
   236  0000                     _OSCCON	set	4051
   237  0000                     _OSCCON2	set	4050
   238  0000                     _OSCTUNE	set	3995
   239  0000                     _PIE1bits	set	3997
   240  0000                     _PIR1bits	set	3998
   241  0000                     _RC1REG	set	4014
   242  0000                     _RC1STA	set	4011
   243  0000                     _RC1STAbits	set	4011
   244  0000                     _RCONbits	set	4048
   245  0000                     _RCREG1	set	4014
   246  0000                     _SPBRG1	set	4015
   247  0000                     _SPBRGH1	set	4016
   248  0000                     _T1CON	set	4045
   249  0000                     _T1CONbits	set	4045
   250  0000                     _T1GCON	set	4044
   251  0000                     _T1GCONbits	set	4044
   252  0000                     _TMR1H	set	4047
   253  0000                     _TMR1L	set	4046
   254  0000                     _TRISA	set	3986
   255  0000                     _TRISB	set	3987
   256  0000                     _TRISC	set	3988
   257  0000                     _TRISD	set	3989
   258  0000                     _TRISE	set	3990
   259  0000                     _TX1REG	set	4013
   260  0000                     _TX1STA	set	4012
   261  0000                     _TXREG1	set	4013
   262  0000                     _WPUB	set	3937
   263  0000                     _LATA0	set	31816
   264  0000                     _LATA4	set	31820
   265  0000                     _LATA6	set	31822
   266  0000                     _LATB0	set	31824
   267  0000                     _LATB1	set	31825
   268  0000                     _LATB3	set	31827
   269  0000                     _LATC0	set	31832
   270  0000                     _LATC1	set	31833
   271  0000                     _LATC4	set	31836
   272  0000                     _LATC5	set	31837
   273  0000                     _LATD1	set	31841
   274  0000                     _LATD2	set	31842
   275  0000                     _LATD3	set	31843
   276  0000                     _LATD5	set	31845
   277  000692                     __stringdata:
   278                           	opt stack 0
   279  000692                     STR_2:
   280  000692  42                 	db	66	;'B'
   281  000693  61                 	db	97	;'a'
   282  000694  74                 	db	116	;'t'
   283  000695  74                 	db	116	;'t'
   284  000696  65                 	db	101	;'e'
   285  000697  72                 	db	114	;'r'
   286  000698  79                 	db	121	;'y'
   287  000699  20                 	db	32
   288  00069A  25                 	db	37
   289  00069B  64                 	db	100	;'d'
   290  00069C  20                 	db	32
   291  00069D  3D                 	db	61	;'='
   292  00069E  20                 	db	32
   293  00069F  25                 	db	37
   294  0006A0  66                 	db	102	;'f'
   295  0006A1  20                 	db	32
   296  0006A2  0D                 	db	13
   297  0006A3  0A                 	db	10
   298  0006A4  00                 	db	0
   299  0006A5                     STR_1:
   300  0006A5  48                 	db	72	;'H'
   301  0006A6  69                 	db	105	;'i'
   302  0006A7  20                 	db	32
   303  0006A8  4D                 	db	77	;'M'
   304  0006A9  6F                 	db	111	;'o'
   305  0006AA  74                 	db	116	;'t'
   306  0006AB  68                 	db	104	;'h'
   307  0006AC  65                 	db	101	;'e'
   308  0006AD  72                 	db	114	;'r'
   309  0006AE  20                 	db	32
   310  0006AF  46                 	db	70	;'F'
   311  0006B0  75                 	db	117	;'u'
   312  0006B1  63                 	db	99	;'c'
   313  0006B2  6B                 	db	107	;'k'
   314  0006B3  65                 	db	101	;'e'
   315  0006B4  72                 	db	114	;'r'
   316  0006B5  00                 	db	0
   317  0006B6                     __end_of__stringdata:
   318                           	opt stack 0
   319                           
   320                           ; #config settings
   321  0006B6  00                 	db	0	; dummy byte at the end
   322  0000                     
   323                           	psect	nvCOMRAM
   324  000047                     __pnvCOMRAM:
   325                           	opt stack 0
   326  000047                     _timer1ReloadVal:
   327                           	opt stack 0
   328  000047                     	ds	2
   329  000049                     _eusart1TxBufferRemaining:
   330                           	opt stack 0
   331  000049                     	ds	1
   332                           
   333                           	psect	cinit
   334  00362C                     __pcinit:
   335                           	opt stack 0
   336  00362C                     start_initialization:
   337                           	opt stack 0
   338  00362C                     __initialization:
   339                           	opt stack 0
   340                           
   341                           ; Clear objects allocated to BANK1 (200 bytes)
   342  00362C  EE01  F000         	lfsr	0,__pbssBANK1
   343  003630  0EC8               	movlw	200
   344  003632                     clear_0:
   345  003632  6AEE               	clrf	postinc0,c
   346  003634  06E8               	decf	wreg,f,c
   347  003636  E1FD               	bnz	clear_0
   348                           
   349                           ; Clear objects allocated to BANK0 (76 bytes)
   350  003638  EE00  F060         	lfsr	0,__pbssBANK0
   351  00363C  0E4C               	movlw	76
   352  00363E                     clear_1:
   353  00363E  6AEE               	clrf	postinc0,c
   354  003640  06E8               	decf	wreg,f,c
   355  003642  E1FD               	bnz	clear_1
   356                           
   357                           ; Clear objects allocated to COMRAM (19 bytes)
   358  003644  EE00  F034         	lfsr	0,__pbssCOMRAM
   359  003648  0E13               	movlw	19
   360  00364A                     clear_2:
   361  00364A  6AEE               	clrf	postinc0,c
   362  00364C  06E8               	decf	wreg,f,c
   363  00364E  E1FD               	bnz	clear_2
   364  003650                     end_of_initialization:
   365                           	opt stack 0
   366  003650                     __end_of__initialization:
   367                           	opt stack 0
   368  003650  0E00               	movlw	low (__Lmediumconst shr (0+16))
   369  003652  6EF8               	movwf	tblptru,c
   370  003654  0100               	movlb	0
   371  003656  EF92  F016         	goto	_main	;jump to C main() function
   372                           tblptru	equ	0xFF8
   373                           postinc0	equ	0xFEE
   374                           wreg	equ	0xFE8
   375                           
   376                           	psect	bssCOMRAM
   377  000034                     __pbssCOMRAM:
   378                           	opt stack 0
   379  000034                     _eusart1TxBuffer:
   380                           	opt stack 0
   381  000034                     	ds	8
   382  00003C                     TMR1_ISR@CountCallBack:
   383                           	opt stack 0
   384  00003C                     	ds	2
   385  00003E                     _ADC_Buffer_Point:
   386                           	opt stack 0
   387  00003E                     	ds	2
   388  000040                     _Temp_Aquire:
   389                           	opt stack 0
   390  000040                     	ds	1
   391  000041                     _Volt_Aquire:
   392                           	opt stack 0
   393  000041                     	ds	1
   394  000042                     _eusart1RxCount:
   395                           	opt stack 0
   396  000042                     	ds	1
   397  000043                     _eusart1RxHead:
   398                           	opt stack 0
   399  000043                     	ds	1
   400  000044                     _eusart1RxTail:
   401                           	opt stack 0
   402  000044                     	ds	1
   403  000045                     _eusart1TxHead:
   404                           	opt stack 0
   405  000045                     	ds	1
   406  000046                     _eusart1TxTail:
   407                           	opt stack 0
   408  000046                     	ds	1
   409                           tblptru	equ	0xFF8
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           
   413                           	psect	bssBANK0
   414  000060                     __pbssBANK0:
   415                           	opt stack 0
   416  000060                     _Battery_Volt:
   417                           	opt stack 0
   418  000060                     	ds	30
   419  00007E                     _Battery_Adc:
   420                           	opt stack 0
   421  00007E                     	ds	20
   422  000092                     _Temp_Done:
   423                           	opt stack 0
   424  000092                     	ds	2
   425  000094                     _Volt_Done:
   426                           	opt stack 0
   427  000094                     	ds	2
   428  000096                     _errno:
   429                           	opt stack 0
   430  000096                     	ds	2
   431  000098                     _Temp_Adc:
   432                           	opt stack 0
   433  000098                     	ds	20
   434                           tblptru	equ	0xFF8
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           
   438                           	psect	bssBANK1
   439  000100                     __pbssBANK1:
   440                           	opt stack 0
   441  000100                     _eusart1RxBuffer:
   442                           	opt stack 0
   443  000100                     	ds	50
   444  000132                     _PrevBattery_Volt:
   445                           	opt stack 0
   446  000132                     	ds	30
   447  000150                     _PrevTemp_DegF:
   448                           	opt stack 0
   449  000150                     	ds	30
   450  00016E                     _Temp_DegF:
   451                           	opt stack 0
   452  00016E                     	ds	30
   453  00018C                     _TempBattery_Volt:
   454                           	opt stack 0
   455  00018C                     	ds	30
   456  0001AA                     _TmpTemp_DegF:
   457                           	opt stack 0
   458  0001AA                     	ds	30
   459                           tblptru	equ	0xFF8
   460                           postinc0	equ	0xFEE
   461                           wreg	equ	0xFE8
   462                           
   463                           	psect	cstackBANK1
   464  0001C8                     __pcstackBANK1:
   465                           	opt stack 0
   466  0001C8                     _printf$1687:
   467                           	opt stack 0
   468                           
   469                           ; 3 bytes @ 0x0
   470  0001C8                     	ds	3
   471  0001CB                     _printf$1040:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0x3
   475  0001CB                     	ds	4
   476  0001CF                     printf@vd:
   477                           	opt stack 0
   478                           
   479                           ; 4 bytes @ 0x7
   480  0001CF                     	ds	4
   481  0001D3                     printf@vd_1042:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0xB
   485  0001D3                     	ds	4
   486  0001D7                     printf@ap:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0xF
   490  0001D7                     	ds	2
   491  0001D9                     printf@flag:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x11
   495  0001D9                     	ds	2
   496  0001DB                     printf@integ:
   497                           	opt stack 0
   498                           
   499                           ; 3 bytes @ 0x13
   500  0001DB                     	ds	3
   501  0001DE                     printf@prec:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x16
   505  0001DE                     	ds	2
   506  0001E0                     printf@_val:
   507                           	opt stack 0
   508                           
   509                           ; 5 bytes @ 0x18
   510  0001E0                     	ds	5
   511  0001E5                     printf@exp:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x1D
   515  0001E5                     	ds	2
   516  0001E7                     printf@fval:
   517                           	opt stack 0
   518                           
   519                           ; 3 bytes @ 0x1F
   520  0001E7                     	ds	3
   521  0001EA                     printf@c:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x22
   525  0001EA                     	ds	1
   526                           tblptru	equ	0xFF8
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           
   530                           	psect	cstackBANK0
   531  0000AC                     __pcstackBANK0:
   532                           	opt stack 0
   533  0000AC                     ?___ftmul:
   534                           	opt stack 0
   535  0000AC                     Battery_Fault@fault:
   536                           	opt stack 0
   537  0000AC                     Temp_Fault@fault:
   538                           	opt stack 0
   539  0000AC                     RunBypas@cellbyp:
   540                           	opt stack 0
   541  0000AC                     ___ftmul@f1:
   542                           	opt stack 0
   543                           
   544                           ; 3 bytes @ 0x0
   545  0000AC                     	ds	1
   546  0000AD                     Battery_Fault@i:
   547                           	opt stack 0
   548  0000AD                     Temp_Fault@i:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x1
   552  0000AD                     	ds	1
   553  0000AE                     RunBypas@batvolt:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x2
   557  0000AE                     	ds	1
   558  0000AF                     ___ftmul@f2:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x3
   562  0000AF                     	ds	2
   563  0000B1                     RunBypas@i:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x5
   567  0000B1                     	ds	1
   568  0000B2                     ___ftmul@exp:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x6
   572  0000B2                     	ds	1
   573  0000B3                     ___ftmul@f3_as_product:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x7
   577  0000B3                     	ds	3
   578  0000B6                     ___ftmul@cntr:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0xA
   582  0000B6                     	ds	1
   583  0000B7                     ___ftmul@sign:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0xB
   587  0000B7                     	ds	1
   588  0000B8                     ?_fround:
   589                           	opt stack 0
   590  0000B8                     ?_scale:
   591                           	opt stack 0
   592                           
   593                           ; 3 bytes @ 0xC
   594  0000B8                     	ds	3
   595  0000BB                     _fround$1685:
   596                           	opt stack 0
   597  0000BB                     _scale$1686:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0xF
   601  0000BB                     	ds	3
   602  0000BE                     scale@scl:
   603                           	opt stack 0
   604  0000BE                     _fround$1684:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x12
   608  0000BE                     	ds	1
   609  0000BF                     ?___fttol:
   610                           	opt stack 0
   611  0000BF                     ___fttol@f1:
   612                           	opt stack 0
   613                           
   614                           ; 3 bytes @ 0x13
   615  0000BF                     	ds	2
   616  0000C1                     fround@prec:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x15
   620  0000C1                     	ds	1
   621  0000C2                     ?___ftadd:
   622                           	opt stack 0
   623  0000C2                     ___ftadd@f1:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x16
   627  0000C2                     	ds	1
   628  0000C3                     ??___fttol:
   629                           
   630                           ; 0 bytes @ 0x17
   631  0000C3                     	ds	2
   632  0000C5                     ___ftadd@f2:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x19
   636  0000C5                     	ds	3
   637  0000C8                     ??___ftadd:
   638  0000C8                     ___fttol@sign1:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x1C
   642  0000C8                     	ds	1
   643  0000C9                     ___fttol@lval:
   644                           	opt stack 0
   645                           
   646                           ; 4 bytes @ 0x1D
   647  0000C9                     	ds	2
   648  0000CB                     ___ftadd@sign:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x1F
   652  0000CB                     	ds	1
   653  0000CC                     ___ftadd@exp2:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x20
   657  0000CC                     	ds	1
   658  0000CD                     ___ftadd@exp1:
   659                           	opt stack 0
   660  0000CD                     ___fttol@exp1:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x21
   664  0000CD                     	ds	1
   665  0000CE                     ??_Battery_Convert:
   666  0000CE                     ?___ftsub:
   667                           	opt stack 0
   668  0000CE                     ?_eval_poly:
   669                           	opt stack 0
   670  0000CE                     ___ftsub@f1:
   671                           	opt stack 0
   672  0000CE                     eval_poly@x:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x22
   676  0000CE                     	ds	2
   677  0000D0                     Battery_Convert@x:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x24
   681  0000D0                     	ds	1
   682  0000D1                     eval_poly@d:
   683                           	opt stack 0
   684  0000D1                     ___ftsub@f2:
   685                           	opt stack 0
   686                           
   687                           ; 3 bytes @ 0x25
   688  0000D1                     	ds	2
   689  0000D3                     eval_poly@n:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x27
   693  0000D3                     	ds	1
   694  0000D4                     ?_printf:
   695                           	opt stack 0
   696  0000D4                     printf@f:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x28
   700  0000D4                     	ds	1
   701  0000D5                     eval_poly@res:
   702                           	opt stack 0
   703                           
   704                           ; 3 bytes @ 0x29
   705  0000D5                     	ds	3
   706  0000D8                     ?_log:
   707                           	opt stack 0
   708  0000D8                     log@x:
   709                           	opt stack 0
   710                           
   711                           ; 3 bytes @ 0x2C
   712  0000D8                     	ds	3
   713  0000DB                     ??_printf:
   714  0000DB                     log@exponent:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x2F
   718  0000DB                     	ds	2
   719  0000DD                     ??_Temp_Convert:
   720                           
   721                           ; 0 bytes @ 0x31
   722  0000DD                     	ds	2
   723  0000DF                     _Temp_Convert$1682:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x33
   727  0000DF                     	ds	2
   728  0000E1                     _Temp_Convert$1683:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x35
   732  0000E1                     	ds	2
   733  0000E3                     Temp_Convert@x:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x37
   737  0000E3                     	ds	2
   738  0000E5                     Temp_Convert@steinhart:
   739                           	opt stack 0
   740                           
   741                           ; 3 bytes @ 0x39
   742  0000E5                     	ds	3
   743  0000E8                     
   744                           ; 2 bytes @ 0x3C
   745  0000E8                     	ds	2
   746  0000EA                     
   747                           ; 3 bytes @ 0x3E
   748  0000EA                     	ds	3
   749  0000ED                     main@x:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x41
   753  0000ED                     	ds	2
   754  0000EF                     main@x_963:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x43
   758  0000EF                     	ds	2
   759                           tblptru	equ	0xFF8
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           
   763                           	psect	cstackCOMRAM
   764  000001                     __pcstackCOMRAM:
   765                           	opt stack 0
   766  000001                     ??_ADC_StartConversion:
   767  000001                     ?_ADC_GetConversionResult:
   768                           	opt stack 0
   769  000001                     Set_4051@Channel:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x0
   773  000001                     	ds	1
   774  000002                     ADC_StartConversion@channel:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x1
   778  000002                     	ds	1
   779  000003                     ??_Set_4051:
   780  000003                     ??_TMR1_ISR:
   781  000003                     ??_ADC_GetConversionResult:
   782                           
   783                           ; 0 bytes @ 0x2
   784  000003                     	ds	2
   785  000005                     ??_ADC_ISR:
   786                           
   787                           ; 0 bytes @ 0x4
   788  000005                     	ds	2
   789  000007                     ADC_ISR@ADC_Result:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x6
   793  000007                     	ds	2
   794  000009                     ??_INTERRUPT_InterruptManager:
   795                           
   796                           ; 0 bytes @ 0x8
   797  000009                     	ds	14
   798  000017                     ?___awmod:
   799                           	opt stack 0
   800  000017                     ?___ftpack:
   801                           	opt stack 0
   802  000017                     ?_frexp:
   803                           	opt stack 0
   804  000017                     ?___ftneg:
   805                           	opt stack 0
   806  000017                     ?__tdiv_to_l_:
   807                           	opt stack 0
   808  000017                     ?__div_to_l_:
   809                           	opt stack 0
   810  000017                     ?___lldiv:
   811                           	opt stack 0
   812  000017                     EUSART1_Write@txData:
   813                           	opt stack 0
   814  000017                     SetBypas@pin:
   815                           	opt stack 0
   816  000017                     ___awmod@dividend:
   817                           	opt stack 0
   818  000017                     __div_to_l_@f1:
   819                           	opt stack 0
   820  000017                     ___ftpack@arg:
   821                           	opt stack 0
   822  000017                     __tdiv_to_l_@f1:
   823                           	opt stack 0
   824  000017                     ___ftneg@f1:
   825                           	opt stack 0
   826  000017                     frexp@value:
   827                           	opt stack 0
   828  000017                     ___lldiv@dividend:
   829                           	opt stack 0
   830                           
   831                           ; 4 bytes @ 0x16
   832  000017                     	ds	1
   833  000018                     putch@txData:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x17
   837  000018                     	ds	1
   838  000019                     SetBypas@state:
   839                           	opt stack 0
   840  000019                     ___awmod@divisor:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x18
   844  000019                     	ds	1
   845  00001A                     ___ftpack@exp:
   846                           	opt stack 0
   847  00001A                     frexp@eptr:
   848                           	opt stack 0
   849  00001A                     __div_to_l_@f2:
   850                           	opt stack 0
   851  00001A                     __tdiv_to_l_@f2:
   852                           	opt stack 0
   853                           
   854                           ; 3 bytes @ 0x19
   855  00001A                     	ds	1
   856  00001B                     ??_SetBypas:
   857  00001B                     ___awmod@counter:
   858                           	opt stack 0
   859  00001B                     ___ftpack@sign:
   860                           	opt stack 0
   861  00001B                     ___lldiv@divisor:
   862                           	opt stack 0
   863                           
   864                           ; 4 bytes @ 0x1A
   865  00001B                     	ds	1
   866  00001C                     ??___ftpack:
   867  00001C                     ??_frexp:
   868  00001C                     ___awmod@sign:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x1B
   872  00001C                     	ds	1
   873  00001D                     ??__tdiv_to_l_:
   874  00001D                     ??__div_to_l_:
   875  00001D                     ?___awdiv:
   876                           	opt stack 0
   877  00001D                     ___awdiv@dividend:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x1C
   881  00001D                     	ds	2
   882  00001F                     ?___ftdiv:
   883                           	opt stack 0
   884  00001F                     ?___lltoft:
   885                           	opt stack 0
   886  00001F                     ___awdiv@divisor:
   887                           	opt stack 0
   888  00001F                     ___ftdiv@f1:
   889                           	opt stack 0
   890  00001F                     ___lldiv@quotient:
   891                           	opt stack 0
   892  00001F                     ___lltoft@c:
   893                           	opt stack 0
   894                           
   895                           ; 4 bytes @ 0x1E
   896  00001F                     	ds	1
   897  000020                     __tdiv_to_l_@quot:
   898                           	opt stack 0
   899                           
   900                           ; 4 bytes @ 0x1F
   901  000020                     	ds	1
   902  000021                     ___awdiv@counter:
   903                           	opt stack 0
   904  000021                     __div_to_l_@quot:
   905                           	opt stack 0
   906                           
   907                           ; 4 bytes @ 0x20
   908  000021                     	ds	1
   909  000022                     ___awdiv@sign:
   910                           	opt stack 0
   911  000022                     ___ftdiv@f2:
   912                           	opt stack 0
   913                           
   914                           ; 3 bytes @ 0x21
   915  000022                     	ds	1
   916  000023                     ??___lltoft:
   917  000023                     ___lldiv@counter:
   918                           	opt stack 0
   919  000023                     ___awdiv@quotient:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x22
   923  000023                     	ds	1
   924  000024                     ?___llmod:
   925                           	opt stack 0
   926  000024                     __tdiv_to_l_@cntr:
   927                           	opt stack 0
   928  000024                     ___llmod@dividend:
   929                           	opt stack 0
   930                           
   931                           ; 4 bytes @ 0x23
   932  000024                     	ds	1
   933  000025                     ??___ftdiv:
   934  000025                     ?___wmul:
   935                           	opt stack 0
   936  000025                     __div_to_l_@cntr:
   937                           	opt stack 0
   938  000025                     __tdiv_to_l_@exp1:
   939                           	opt stack 0
   940  000025                     ___wmul@multiplier:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x24
   944  000025                     	ds	1
   945  000026                     __div_to_l_@exp1:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x25
   949  000026                     	ds	1
   950  000027                     ___lltoft@exp:
   951                           	opt stack 0
   952  000027                     ___wmul@multiplicand:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0x26
   956  000027                     	ds	1
   957  000028                     ___ftdiv@cntr:
   958                           	opt stack 0
   959  000028                     ___llmod@divisor:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x27
   963  000028                     	ds	1
   964  000029                     ___wmul@product:
   965                           	opt stack 0
   966  000029                     ___ftdiv@f3:
   967                           	opt stack 0
   968                           
   969                           ; 3 bytes @ 0x28
   970  000029                     	ds	2
   971  00002B                     ?_Battery_Get:
   972                           	opt stack 0
   973  00002B                     ?___awtoft:
   974                           	opt stack 0
   975  00002B                     Battery_Get@channelnum:
   976                           	opt stack 0
   977  00002B                     ___awtoft@c:
   978                           	opt stack 0
   979  00002B                     ___ftge@ff1:
   980                           	opt stack 0
   981                           
   982                           ; 3 bytes @ 0x2A
   983  00002B                     	ds	1
   984  00002C                     ___ftdiv@exp:
   985                           	opt stack 0
   986  00002C                     ___llmod@counter:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x2B
   990  00002C                     	ds	1
   991  00002D                     ___ftdiv@sign:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x2C
   995  00002D                     	ds	1
   996  00002E                     ___awtoft@sign:
   997                           	opt stack 0
   998  00002E                     ___ftge@ff2:
   999                           	opt stack 0
  1000                           
  1001                           ; 3 bytes @ 0x2D
  1002  00002E                     	ds	1
  1003  00002F                     ??___ftmul:
  1004                           
  1005                           ; 0 bytes @ 0x2E
  1006  00002F                     	ds	2
  1007  000031                     ??___ftge:
  1008                           
  1009                           ; 0 bytes @ 0x30
  1010  000031                     	ds	1
  1011  000032                     ??_eval_poly:
  1012  000032                     Battery_Filter@x:
  1013                           	opt stack 0
  1014  000032                     Temp_Filter@x:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x31
  1018  000032                     	ds	2
  1019  000034                     tblptru	equ	0xFF8
  1020                           postinc0	equ	0xFEE
  1021                           wreg	equ	0xFE8
  1022                           
  1023                           ; 0 bytes @ 0x33
  1024 ;;
  1025 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1026 ;;
  1027 ;; *************** function _main *****************
  1028 ;; Defined at:
  1029 ;;		line 31 in file "Main.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;  argc            2   60[BANK0 ] int 
  1032 ;;  argv            3   62[BANK0 ] PTR PTR unsigned char 
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;  x               2   67[BANK0 ] int 
  1035 ;;  x               2   65[BANK0 ] int 
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  2   60[BANK0 ] int 
  1038 ;; Registers used:
  1039 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1045 ;;      Params:         0       5       0       0       0       0       0
  1046 ;;      Locals:         0       4       0       0       0       0       0
  1047 ;;      Temps:          0       0       0       0       0       0       0
  1048 ;;      Totals:         0       9       0       0       0       0       0
  1049 ;;Total ram usage:        9 bytes
  1050 ;; Hardware stack levels required when called:    9
  1051 ;; This function calls:
  1052 ;;		_Battery_Convert
  1053 ;;		_Battery_Fault
  1054 ;;		_Battery_Get
  1055 ;;		_RunBypas
  1056 ;;		_SYSTEM_Initialize
  1057 ;;		_Temp_Convert
  1058 ;;		_Temp_Fault
  1059 ;;		_printf
  1060 ;; This function is called by:
  1061 ;;		Startup code after reset
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           	psect	text0
  1066  002D24                     __ptext0:
  1067                           	opt stack 0
  1068  002D24                     _main:
  1069                           	opt stack 22
  1070                           
  1071                           ;Main.c: 33: SYSTEM_Initialize();
  1072                           
  1073                           ;incstack = 0
  1074  002D24  EC7B  F01B         	call	_SYSTEM_Initialize	;wreg free
  1075                           
  1076                           ;Main.c: 52: (INTCONbits.GIE = 1);
  1077  002D28  8EF2               	bsf	intcon,7,c	;volatile
  1078                           
  1079                           ;Main.c: 55: (INTCONbits.PEIE = 1);
  1080  002D2A  8CF2               	bsf	intcon,6,c	;volatile
  1081                           
  1082                           ;Main.c: 64: printf("Hi Mother Fucker");
  1083  002D2C  0E06               	movlw	high STR_1
  1084  002D2E  0100               	movlb	0	; () banked
  1085  002D30  6FD5               	movwf	(printf@f+1)& (0+255),b
  1086  002D32  0EA5               	movlw	low STR_1
  1087  002D34  0100               	movlb	0	; () banked
  1088  002D36  6FD4               	movwf	printf@f& (0+255),b
  1089  002D38  EC5C  F003         	call	_printf	;wreg free
  1090  002D3C                     l5248:
  1091                           
  1092                           ;Main.c: 66: {
  1093                           ;Main.c: 67: if (Temp_Done)
  1094  002D3C  0100               	movlb	0	; () banked
  1095  002D3E  5193               	movf	(_Temp_Done+1)& (0+255),w,b
  1096  002D40  1192               	iorwf	_Temp_Done& (0+255),w,b
  1097  002D42  B4D8               	btfsc	status,2,c
  1098  002D44  D017               	goto	l5264
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;Main.c: 68: {
  1102                           ;Main.c: 69: Temp_Convert();
  1103  002D46  ECCC  F00E         	call	_Temp_Convert	;wreg free
  1104                           
  1105                           ;Main.c: 70: Temp_Fault();
  1106  002D4A  EC68  F019         	call	_Temp_Fault	;wreg free
  1107                           
  1108                           ;Main.c: 71: for (int x = 0;x<10;x++)
  1109  002D4E  0E00               	movlw	0
  1110  002D50  0100               	movlb	0	; () banked
  1111  002D52  6FEE               	movwf	(main@x+1)& (0+255),b
  1112  002D54  0E00               	movlw	0
  1113  002D56  0100               	movlb	0	; () banked
  1114  002D58  6FED               	movwf	main@x& (0+255),b
  1115  002D5A                     
  1116                           ; BSR set to: 0
  1117  002D5A  0100               	movlb	0	; () banked
  1118  002D5C  51EE               	movf	(main@x+1)& (0+255),w,b
  1119  002D5E  0A80               	xorlw	128
  1120  002D60  0F80               	addlw	-128
  1121  002D62  0E0A               	movlw	10
  1122  002D64  B4D8               	btfsc	status,2,c
  1123  002D66  5DED               	subwf	main@x& (0+255),w,b
  1124  002D68  B0D8               	btfsc	status,0,c
  1125  002D6A  D004               	goto	l5264
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;Main.c: 72: {
  1129                           
  1130                           ; BSR set to: 0
  1131                           
  1132                           ; BSR set to: 0
  1133  002D6C  0100               	movlb	0	; () banked
  1134  002D6E  4BED               	infsnz	main@x& (0+255),f,b
  1135  002D70  2BEE               	incf	(main@x+1)& (0+255),f,b
  1136  002D72  D7F3               	goto	L1
  1137  002D74                     l5264:
  1138                           
  1139                           ; BSR set to: 0
  1140                           ;Main.c: 74: }
  1141                           ;Main.c: 75: }
  1142                           ;Main.c: 76: if (Volt_Done)
  1143  002D74  0100               	movlb	0	; () banked
  1144  002D76  5195               	movf	(_Volt_Done+1)& (0+255),w,b
  1145  002D78  1194               	iorwf	_Volt_Done& (0+255),w,b
  1146  002D7A  B4D8               	btfsc	status,2,c
  1147  002D7C  D7DF               	goto	l5248
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;Main.c: 77: {
  1151                           ;Main.c: 78: Battery_Convert();
  1152  002D7E  EC4D  F017         	call	_Battery_Convert	;wreg free
  1153                           
  1154                           ;Main.c: 79: Battery_Fault();
  1155  002D82  ECF0  F016         	call	_Battery_Fault	;wreg free
  1156                           
  1157                           ;Main.c: 80: RunBypas();
  1158  002D86  ECAD  F015         	call	_RunBypas	;wreg free
  1159                           
  1160                           ;Main.c: 81: for (int x = 0;x<10;x++)
  1161  002D8A  0E00               	movlw	0
  1162  002D8C  0100               	movlb	0	; () banked
  1163  002D8E  6FF0               	movwf	(main@x_963+1)& (0+255),b
  1164  002D90  0E00               	movlw	0
  1165  002D92  0100               	movlb	0	; () banked
  1166  002D94  6FEF               	movwf	main@x_963& (0+255),b
  1167  002D96                     
  1168                           ; BSR set to: 0
  1169  002D96  0100               	movlb	0	; () banked
  1170  002D98  51F0               	movf	(main@x_963+1)& (0+255),w,b
  1171  002D9A  0A80               	xorlw	128
  1172  002D9C  0F80               	addlw	-128
  1173  002D9E  0E0A               	movlw	10
  1174  002DA0  B4D8               	btfsc	status,2,c
  1175  002DA2  5DEF               	subwf	main@x_963& (0+255),w,b
  1176  002DA4  B0D8               	btfsc	status,0,c
  1177  002DA6  D7CA               	goto	l5248
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;Main.c: 82: {
  1181                           ;Main.c: 83: printf("Battery %d = %f \r\n", x,Battery_Get(x));
  1182                           
  1183                           ; BSR set to: 0
  1184                           
  1185                           ; BSR set to: 0
  1186  002DA8  0E06               	movlw	high STR_2
  1187  002DAA  0100               	movlb	0	; () banked
  1188  002DAC  6FD5               	movwf	(printf@f+1)& (0+255),b
  1189  002DAE  0E92               	movlw	low STR_2
  1190  002DB0  0100               	movlb	0	; () banked
  1191  002DB2  6FD4               	movwf	printf@f& (0+255),b
  1192  002DB4  C0EF  F0D6         	movff	main@x_963,?_printf+2
  1193  002DB8  C0F0  F0D7         	movff	main@x_963+1,?_printf+3
  1194  002DBC  C0EF  F02B         	movff	main@x_963,Battery_Get@channelnum
  1195  002DC0  C0F0  F02C         	movff	main@x_963+1,Battery_Get@channelnum+1
  1196  002DC4  ECCD  F01A         	call	_Battery_Get	;wreg free
  1197  002DC8  C02B  F0D8         	movff	?_Battery_Get,?_printf+4
  1198  002DCC  C02C  F0D9         	movff	?_Battery_Get+1,?_printf+5
  1199  002DD0  C02D  F0DA         	movff	?_Battery_Get+2,?_printf+6
  1200  002DD4  EC5C  F003         	call	_printf	;wreg free
  1201  002DD8  0100               	movlb	0	; () banked
  1202  002DDA  4BEF               	infsnz	main@x_963& (0+255),f,b
  1203  002DDC  2BF0               	incf	(main@x_963+1)& (0+255),f,b
  1204  002DDE  D7DB               	goto	L2
  1205  002DE0                     __end_of_main:
  1206                           	opt stack 0
  1207                           tblptru	equ	0xFF8
  1208                           intcon	equ	0xFF2
  1209                           postinc0	equ	0xFEE
  1210                           wreg	equ	0xFE8
  1211                           status	equ	0xFD8
  1212                           
  1213 ;; *************** function _printf *****************
  1214 ;; Defined at:
  1215 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;  f               2   40[BANK0 ] PTR const unsigned char 
  1218 ;;		 -> STR_2(19), STR_1(17), 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;  vd              4    7[BANK1 ] unsigned long 
  1221 ;;  vd              4   11[BANK1 ] unsigned long 
  1222 ;;  _val            5   24[BANK1 ] struct .
  1223 ;;  fval            3   31[BANK1 ] struct .
  1224 ;;  integ           3   19[BANK1 ] struct .
  1225 ;;  ival            3    0        struct .
  1226 ;;  exp             2   29[BANK1 ] int 
  1227 ;;  prec            2   22[BANK1 ] int 
  1228 ;;  flag            2   17[BANK1 ] unsigned short 
  1229 ;;  ap              2   15[BANK1 ] PTR void [1]
  1230 ;;		 -> ?_printf(2), 
  1231 ;;  width           2    0        int 
  1232 ;;  c               1   34[BANK1 ] char 
  1233 ;;  d               1    0        unsigned char 
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  2   40[BANK0 ] int 
  1236 ;; Registers used:
  1237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1243 ;;      Params:         0       7       0       0       0       0       0
  1244 ;;      Locals:         0       0      35       0       0       0       0
  1245 ;;      Temps:          0       6       0       0       0       0       0
  1246 ;;      Totals:         0      13      35       0       0       0       0
  1247 ;;Total ram usage:       48 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; Hardware stack levels required when called:    7
  1250 ;; This function calls:
  1251 ;;		___awdiv
  1252 ;;		___ftadd
  1253 ;;		___ftge
  1254 ;;		___ftmul
  1255 ;;		___ftneg
  1256 ;;		___ftsub
  1257 ;;		___fttol
  1258 ;;		___lldiv
  1259 ;;		___llmod
  1260 ;;		___lltoft
  1261 ;;		___wmul
  1262 ;;		__div_to_l_
  1263 ;;		__tdiv_to_l_
  1264 ;;		_fround
  1265 ;;		_putch
  1266 ;;		_scale
  1267 ;; This function is called by:
  1268 ;;		_main
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           	psect	text1
  1273  0006B8                     __ptext1:
  1274                           	opt stack 0
  1275  0006B8                     _printf:
  1276                           	opt stack 23
  1277                           
  1278                           ;doprnt.c: 466: va_list ap;
  1279                           ;doprnt.c: 499: signed char c;
  1280                           ;doprnt.c: 501: int width;
  1281                           ;doprnt.c: 504: int prec;
  1282                           ;doprnt.c: 508: unsigned short flag;
  1283                           ;doprnt.c: 515: char d;
  1284                           ;doprnt.c: 516: double fval, integ;
  1285                           ;doprnt.c: 517: int exp;
  1286                           ;doprnt.c: 518: double ival;
  1287                           ;doprnt.c: 519: union {
  1288                           ;doprnt.c: 520: unsigned long _val;
  1289                           ;doprnt.c: 521: struct {
  1290                           ;doprnt.c: 522: const char * _cp;
  1291                           ;doprnt.c: 523: unsigned _len;
  1292                           ;doprnt.c: 524: } _str;
  1293                           ;doprnt.c: 525: } _val;
  1294                           ;doprnt.c: 542: *ap = __va_start();
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;incstack = 0
  1298  0006B8  0100               	movlb	0	; () banked
  1299  0006BA  0E00               	movlw	high (?_printf+2)
  1300  0006BC  0101               	movlb	1	; () banked
  1301  0006BE  6FD8               	movwf	(printf@ap+1)& (0+255),b
  1302  0006C0  0100               	movlb	0	; () banked
  1303  0006C2  0ED6               	movlw	low (?_printf+2)
  1304  0006C4  0101               	movlb	1	; () banked
  1305  0006C6  6FD7               	movwf	printf@ap& (0+255),b
  1306                           
  1307                           ;doprnt.c: 545: while(c = *f++) {
  1308  0006C8  EF8E  F007         	goto	l5210
  1309  0006CC                     l5026:
  1310                           
  1311                           ; BSR set to: 1
  1312                           ;doprnt.c: 547: if(c != '%')
  1313  0006CC  0101               	movlb	1	; () banked
  1314  0006CE  51EA               	movf	printf@c& (0+255),w,b
  1315  0006D0  0A25               	xorlw	37
  1316  0006D2  B4D8               	btfsc	status,2,c
  1317  0006D4  D006               	goto	l5030
  1318                           
  1319                           ; BSR set to: 1
  1320                           ;doprnt.c: 549: {
  1321                           ;doprnt.c: 550: (putch(c) );
  1322  0006D6  0101               	movlb	1	; () banked
  1323  0006D8  51EA               	movf	printf@c& (0+255),w,b
  1324  0006DA  ECD0  F01B         	call	_putch
  1325                           
  1326                           ;doprnt.c: 551: continue;
  1327  0006DE  EF8E  F007         	goto	l5210
  1328  0006E2                     l5030:
  1329                           
  1330                           ;doprnt.c: 552: }
  1331                           ;doprnt.c: 557: flag = 0;
  1332  0006E2  0E00               	movlw	0
  1333  0006E4  0101               	movlb	1	; () banked
  1334  0006E6  6FDA               	movwf	(printf@flag+1)& (0+255),b
  1335  0006E8  0E00               	movlw	0
  1336  0006EA  0101               	movlb	1	; () banked
  1337  0006EC  6FD9               	movwf	printf@flag& (0+255),b
  1338                           
  1339                           ;doprnt.c: 644: switch(c = *f++) {
  1340  0006EE  D003               	goto	l5036
  1341  0006F0                     l5032:
  1342                           
  1343                           ; BSR set to: 1
  1344                           ;doprnt.c: 672: flag |= 0x400;
  1345  0006F0  0101               	movlb	1	; () banked
  1346  0006F2  85DA               	bsf	(printf@flag+1)& (0+255),2,b
  1347                           
  1348                           ;doprnt.c: 673: break;
  1349  0006F4  D01B               	goto	l5038
  1350  0006F6                     l5036:
  1351                           
  1352                           ; BSR set to: 1
  1353  0006F6  0100               	movlb	0	; () banked
  1354  0006F8  C0D4  FFF6         	movff	printf@f,tblptrl
  1355  0006FC  0100               	movlb	0	; () banked
  1356  0006FE  C0D5  FFF7         	movff	printf@f+1,tblptrh
  1357  000702  0100               	movlb	0	; () banked
  1358  000704  4BD4               	infsnz	printf@f& (0+255),f,b
  1359  000706  2BD5               	incf	(printf@f+1)& (0+255),f,b
  1360  000708                     	if	0	;tblptru may be non-zero
  1361  000708                     	endif
  1362  000708                     	if	0	;tblptru may be non-zero
  1363  000708                     	endif
  1364  000708  0008               	tblrd		*
  1365  00070A  0101               	movlb	1	; () banked
  1366  00070C  CFF5 F1EA          	movff	tablat,printf@c
  1367  000710  0101               	movlb	1	; () banked
  1368  000712  51EA               	movf	printf@c& (0+255),w,b
  1369                           
  1370                           ; Switch size 1, requested type "space"
  1371                           ; Number of cases is 4, Range of values is 0 to 105
  1372                           ; switch strategies available:
  1373                           ; Name         Instructions Cycles
  1374                           ; simple_byte           13     7 (average)
  1375                           ;	Chosen strategy is simple_byte
  1376  000714  0A00               	xorlw	0	; case 0
  1377  000716  B4D8               	btfsc	status,2,c
  1378  000718  0012               	return	
  1379  00071A  0A64               	xorlw	100	; case 100
  1380  00071C  B4D8               	btfsc	status,2,c
  1381  00071E  D006               	goto	l5038
  1382  000720  0A02               	xorlw	2	; case 102
  1383  000722  B4D8               	btfsc	status,2,c
  1384  000724  D7E5               	goto	l5032
  1385  000726  0A0F               	xorlw	15	; case 105
  1386  000728  A4D8               	btfss	status,2,c
  1387  00072A  D3F8               	goto	l5210
  1388  00072C                     l5038:
  1389                           
  1390                           ; BSR set to: 1
  1391                           ;doprnt.c: 834: if(flag & (0x700)) {
  1392  00072C  0E07               	movlw	7
  1393  00072E  0101               	movlb	1	; () banked
  1394  000730  15DA               	andwf	(printf@flag+1)& (0+255),w,b
  1395  000732  B4D8               	btfsc	status,2,c
  1396  000734  D31C               	goto	l5174
  1397                           
  1398                           ; BSR set to: 1
  1399                           ;doprnt.c: 838: prec = 6;
  1400  000736  0E00               	movlw	0
  1401  000738  0101               	movlb	1	; () banked
  1402  00073A  6FDF               	movwf	(printf@prec+1)& (0+255),b
  1403  00073C  0E06               	movlw	6
  1404  00073E  0101               	movlb	1	; () banked
  1405  000740  6FDE               	movwf	printf@prec& (0+255),b
  1406                           
  1407                           ; BSR set to: 1
  1408                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1409  000742  C1D7  FFD9         	movff	printf@ap,fsr2l
  1410  000746  C1D8  FFDA         	movff	printf@ap+1,fsr2h
  1411  00074A  0101               	movlb	1	; () banked
  1412  00074C  CFDE F1E7          	movff	postinc2,printf@fval
  1413  000750  0101               	movlb	1	; () banked
  1414  000752  CFDE F1E8          	movff	postinc2,printf@fval+1
  1415  000756  0101               	movlb	1	; () banked
  1416  000758  CFDD F1E9          	movff	postdec2,printf@fval+2
  1417                           
  1418                           ; BSR set to: 1
  1419  00075C  0E03               	movlw	3
  1420  00075E  0101               	movlb	1	; () banked
  1421  000760  27D7               	addwf	printf@ap& (0+255),f,b
  1422  000762  0E00               	movlw	0
  1423  000764  0101               	movlb	1	; () banked
  1424  000766  23D8               	addwfc	(printf@ap+1)& (0+255),f,b
  1425                           
  1426                           ; BSR set to: 1
  1427                           ;doprnt.c: 840: if(fval < 0.0) {
  1428  000768  0101               	movlb	1	; () banked
  1429  00076A  51E9               	movf	(printf@fval+2)& (0+255),w,b
  1430  00076C  0A80               	xorlw	128
  1431  00076E  0F80               	addlw	128
  1432  000770  E107               	bnz	u5265
  1433  000772  0E00               	movlw	0
  1434  000774  0101               	movlb	1	; () banked
  1435  000776  5DE8               	subwf	(printf@fval+1)& (0+255),w,b
  1436  000778  E103               	bnz	u5265
  1437  00077A  0E00               	movlw	0
  1438  00077C  0101               	movlb	1	; () banked
  1439  00077E  5DE7               	subwf	printf@fval& (0+255),w,b
  1440  000780                     u5265:
  1441  000780  B0D8               	btfsc	status,0,c
  1442  000782  D011               	goto	l5052
  1443                           
  1444                           ; BSR set to: 1
  1445                           ;doprnt.c: 841: fval = -fval;
  1446  000784  C1E7  F017         	movff	printf@fval,___ftneg@f1
  1447  000788  C1E8  F018         	movff	printf@fval+1,___ftneg@f1+1
  1448  00078C  C1E9  F019         	movff	printf@fval+2,___ftneg@f1+2
  1449  000790  EC44  F01B         	call	___ftneg	;wreg free
  1450  000794  C017  F1E7         	movff	?___ftneg,printf@fval
  1451  000798  C018  F1E8         	movff	?___ftneg+1,printf@fval+1
  1452  00079C  C019  F1E9         	movff	?___ftneg+2,printf@fval+2
  1453                           
  1454                           ;doprnt.c: 842: flag |= 0x03;
  1455  0007A0  0E03               	movlw	3
  1456  0007A2  0101               	movlb	1	; () banked
  1457  0007A4  13D9               	iorwf	printf@flag& (0+255),f,b
  1458  0007A6                     l5052:
  1459                           
  1460                           ; BSR set to: 1
  1461                           ;doprnt.c: 843: }
  1462                           ;doprnt.c: 844: exp = 0;
  1463  0007A6  0E00               	movlw	0
  1464  0007A8  0101               	movlb	1	; () banked
  1465  0007AA  6FE6               	movwf	(printf@exp+1)& (0+255),b
  1466  0007AC  0E00               	movlw	0
  1467  0007AE  0101               	movlb	1	; () banked
  1468  0007B0  6FE5               	movwf	printf@exp& (0+255),b
  1469                           
  1470                           ; BSR set to: 1
  1471                           ;doprnt.c: 845: if( fval!=0) {
  1472  0007B2  0E7F               	movlw	127
  1473  0007B4  0101               	movlb	1	; () banked
  1474  0007B6  15E9               	andwf	(printf@fval+2)& (0+255),w,b
  1475  0007B8  0101               	movlb	1	; () banked
  1476  0007BA  11E8               	iorwf	(printf@fval+1)& (0+255),w,b
  1477  0007BC  0101               	movlb	1	; () banked
  1478  0007BE  11E7               	iorwf	printf@fval& (0+255),w,b
  1479  0007C0  B4D8               	btfsc	status,2,c
  1480  0007C2  D09C               	goto	l5080
  1481                           
  1482                           ; BSR set to: 1
  1483                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1484  0007C4  0E82               	movlw	130
  1485  0007C6  0100               	movlb	0	; () banked
  1486  0007C8  6FDB               	movwf	??_printf& (0+255),b
  1487  0007CA  0EFF               	movlw	255
  1488  0007CC  6FDC               	movwf	(??_printf+1)& (0+255),b
  1489  0007CE  0101               	movlb	1	; () banked
  1490  0007D0  C1E7  F0DD         	movff	printf@fval,??_printf+2
  1491  0007D4  0101               	movlb	1	; () banked
  1492  0007D6  C1E8  F0DE         	movff	printf@fval+1,??_printf+3
  1493  0007DA  0101               	movlb	1	; () banked
  1494  0007DC  C1E9  F0DF         	movff	printf@fval+2,??_printf+4
  1495  0007E0  0101               	movlb	1	; () banked
  1496  0007E2  C1EA  F0E0         	movff	printf@fval+3,??_printf+5
  1497  0007E6  0E10               	movlw	16
  1498  0007E8  D006               	goto	u5280
  1499  0007EA                     u5285:
  1500  0007EA  0100               	movlb	0	; () banked
  1501  0007EC  90D8               	bcf	status,0,c
  1502  0007EE  33E0               	rrcf	(??_printf+5)& (0+255),f,b
  1503  0007F0  33DF               	rrcf	(??_printf+4)& (0+255),f,b
  1504  0007F2  33DE               	rrcf	(??_printf+3)& (0+255),f,b
  1505  0007F4  33DD               	rrcf	(??_printf+2)& (0+255),f,b
  1506  0007F6                     u5280:
  1507  0007F6  2EE8               	decfsz	wreg,f,c
  1508  0007F8  D7F8               	goto	u5285
  1509  0007FA  0100               	movlb	0	; () banked
  1510  0007FC  51DD               	movf	(??_printf+2)& (0+255),w,b
  1511  0007FE  0100               	movlb	0	; () banked
  1512  000800  25DB               	addwf	??_printf& (0+255),w,b
  1513  000802  0101               	movlb	1	; () banked
  1514  000804  6FE5               	movwf	printf@exp& (0+255),b
  1515  000806  0E00               	movlw	0
  1516  000808  0100               	movlb	0	; () banked
  1517  00080A  21DC               	addwfc	(??_printf+1)& (0+255),w,b
  1518  00080C  0101               	movlb	1	; () banked
  1519  00080E  6FE6               	movwf	(printf@exp+1)& (0+255),b
  1520                           
  1521                           ; BSR set to: 1
  1522                           ;doprnt.c: 847: exp--;
  1523  000810  0101               	movlb	1	; () banked
  1524  000812  07E5               	decf	printf@exp& (0+255),f,b
  1525  000814  A0D8               	btfss	status,0,c
  1526  000816  07E6               	decf	(printf@exp+1)& (0+255),f,b
  1527                           
  1528                           ; BSR set to: 1
  1529                           ;doprnt.c: 848: exp *= 3;
  1530  000818  C1E5  F025         	movff	printf@exp,___wmul@multiplier
  1531  00081C  C1E6  F026         	movff	printf@exp+1,___wmul@multiplier+1
  1532  000820  0E00               	movlw	0
  1533  000822  6E28               	movwf	___wmul@multiplicand+1,c
  1534  000824  0E03               	movlw	3
  1535  000826  6E27               	movwf	___wmul@multiplicand,c
  1536  000828  EC57  F01B         	call	___wmul	;wreg free
  1537  00082C  C025  F1E5         	movff	?___wmul,printf@exp
  1538  000830  C026  F1E6         	movff	?___wmul+1,printf@exp+1
  1539                           
  1540                           ;doprnt.c: 849: exp /= 10;
  1541  000834  C1E5  F01D         	movff	printf@exp,___awdiv@dividend
  1542  000838  C1E6  F01E         	movff	printf@exp+1,___awdiv@dividend+1
  1543  00083C  0E00               	movlw	0
  1544  00083E  6E20               	movwf	___awdiv@divisor+1,c
  1545  000840  0E0A               	movlw	10
  1546  000842  6E1F               	movwf	___awdiv@divisor,c
  1547  000844  ECFC  F017         	call	___awdiv	;wreg free
  1548  000848  C01D  F1E5         	movff	?___awdiv,printf@exp
  1549  00084C  C01E  F1E6         	movff	?___awdiv+1,printf@exp+1
  1550                           
  1551                           ;doprnt.c: 850: if(exp < 0)
  1552  000850  0101               	movlb	1	; () banked
  1553  000852  51E6               	movf	(printf@exp+1)& (0+255),w,b
  1554  000854  0A80               	xorlw	128
  1555  000856  6EF3               	movwf	prodl,c
  1556  000858  0E80               	movlw	128
  1557  00085A  5CF3               	subwf	prodl,w,c
  1558  00085C  0E00               	movlw	0
  1559  00085E  B4D8               	btfsc	status,2,c
  1560  000860  5DE5               	subwf	printf@exp& (0+255),w,b
  1561  000862  B0D8               	btfsc	status,0,c
  1562  000864  D004               	goto	l5068
  1563                           
  1564                           ; BSR set to: 1
  1565                           ;doprnt.c: 851: exp--;
  1566  000866  0101               	movlb	1	; () banked
  1567  000868  07E5               	decf	printf@exp& (0+255),f,b
  1568  00086A  A0D8               	btfss	status,0,c
  1569  00086C  07E6               	decf	(printf@exp+1)& (0+255),f,b
  1570  00086E                     l5068:
  1571                           
  1572                           ; BSR set to: 1
  1573                           ;doprnt.c: 855: integ = scale(-exp);
  1574  00086E  0101               	movlb	1	; () banked
  1575  000870  51E5               	movf	printf@exp& (0+255),w,b
  1576  000872  0800               	sublw	0
  1577  000874  EC04  F00A         	call	_scale
  1578  000878  C0B8  F1DB         	movff	?_scale,printf@integ
  1579  00087C  C0B9  F1DC         	movff	?_scale+1,printf@integ+1
  1580  000880  C0BA  F1DD         	movff	?_scale+2,printf@integ+2
  1581                           
  1582                           ;doprnt.c: 856: integ *= fval;
  1583  000884  C1DB  F0AC         	movff	printf@integ,___ftmul@f1
  1584  000888  C1DC  F0AD         	movff	printf@integ+1,___ftmul@f1+1
  1585  00088C  C1DD  F0AE         	movff	printf@integ+2,___ftmul@f1+2
  1586  000890  C1E7  F0AF         	movff	printf@fval,___ftmul@f2
  1587  000894  C1E8  F0B0         	movff	printf@fval+1,___ftmul@f2+1
  1588  000898  C1E9  F0B1         	movff	printf@fval+2,___ftmul@f2+2
  1589  00089C  ECBD  F012         	call	___ftmul	;wreg free
  1590  0008A0  C0AC  F1DB         	movff	?___ftmul,printf@integ
  1591  0008A4  C0AD  F1DC         	movff	?___ftmul+1,printf@integ+1
  1592  0008A8  C0AE  F1DD         	movff	?___ftmul+2,printf@integ+2
  1593                           
  1594                           ;doprnt.c: 857: if(integ < 1.0)
  1595  0008AC  C1DB  F02B         	movff	printf@integ,___ftge@ff1
  1596  0008B0  C1DC  F02C         	movff	printf@integ+1,___ftge@ff1+1
  1597  0008B4  C1DD  F02D         	movff	printf@integ+2,___ftge@ff1+2
  1598  0008B8  0E00               	movlw	0
  1599  0008BA  6E2E               	movwf	___ftge@ff2,c
  1600  0008BC  0E80               	movlw	128
  1601  0008BE  6E2F               	movwf	___ftge@ff2+1,c
  1602  0008C0  0E3F               	movlw	63
  1603  0008C2  6E30               	movwf	___ftge@ff2+2,c
  1604  0008C4  ECDF  F018         	call	___ftge	;wreg free
  1605  0008C8  B0D8               	btfsc	status,0,c
  1606  0008CA  D005               	goto	l5076
  1607                           
  1608                           ;doprnt.c: 858: exp--;
  1609  0008CC  0101               	movlb	1	; () banked
  1610  0008CE  07E5               	decf	printf@exp& (0+255),f,b
  1611  0008D0  A0D8               	btfss	status,0,c
  1612  0008D2  07E6               	decf	(printf@exp+1)& (0+255),f,b
  1613  0008D4  D013               	goto	l5080
  1614  0008D6                     l5076:
  1615                           
  1616                           ;doprnt.c: 859: else if(integ >= 10.0)
  1617  0008D6  C1DB  F02B         	movff	printf@integ,___ftge@ff1
  1618  0008DA  C1DC  F02C         	movff	printf@integ+1,___ftge@ff1+1
  1619  0008DE  C1DD  F02D         	movff	printf@integ+2,___ftge@ff1+2
  1620  0008E2  0E00               	movlw	0
  1621  0008E4  6E2E               	movwf	___ftge@ff2,c
  1622  0008E6  0E20               	movlw	32
  1623  0008E8  6E2F               	movwf	___ftge@ff2+1,c
  1624  0008EA  0E41               	movlw	65
  1625  0008EC  6E30               	movwf	___ftge@ff2+2,c
  1626  0008EE  ECDF  F018         	call	___ftge	;wreg free
  1627  0008F2  A0D8               	btfss	status,0,c
  1628  0008F4  D003               	goto	l5080
  1629                           
  1630                           ;doprnt.c: 860: exp++;
  1631  0008F6  0101               	movlb	1	; () banked
  1632  0008F8  4BE5               	infsnz	printf@exp& (0+255),f,b
  1633  0008FA  2BE6               	incf	(printf@exp+1)& (0+255),f,b
  1634  0008FC                     l5080:
  1635                           
  1636                           ;doprnt.c: 861: }
  1637                           ;doprnt.c: 1121: if(prec <= 12)
  1638  0008FC  0101               	movlb	1	; () banked
  1639  0008FE  51DF               	movf	(printf@prec+1)& (0+255),w,b
  1640  000900  0A80               	xorlw	128
  1641  000902  6EF3               	movwf	prodl,c
  1642  000904  0E80               	movlw	128
  1643  000906  5CF3               	subwf	prodl,w,c
  1644  000908  0E0D               	movlw	13
  1645  00090A  B4D8               	btfsc	status,2,c
  1646  00090C  5DDE               	subwf	printf@prec& (0+255),w,b
  1647  00090E  B0D8               	btfsc	status,0,c
  1648  000910  D018               	goto	l5084
  1649                           
  1650                           ; BSR set to: 1
  1651                           ;doprnt.c: 1122: fval += fround(prec);
  1652  000912  C1E7  F0C2         	movff	printf@fval,___ftadd@f1
  1653  000916  C1E8  F0C3         	movff	printf@fval+1,___ftadd@f1+1
  1654  00091A  C1E9  F0C4         	movff	printf@fval+2,___ftadd@f1+2
  1655  00091E  0101               	movlb	1	; () banked
  1656  000920  51DE               	movf	printf@prec& (0+255),w,b
  1657  000922  EC3F  F00C         	call	_fround
  1658  000926  C0B8  F0C5         	movff	?_fround,___ftadd@f2
  1659  00092A  C0B9  F0C6         	movff	?_fround+1,___ftadd@f2+1
  1660  00092E  C0BA  F0C7         	movff	?_fround+2,___ftadd@f2+2
  1661  000932  EC8C  F00D         	call	___ftadd	;wreg free
  1662  000936  C0C2  F1E7         	movff	?___ftadd,printf@fval
  1663  00093A  C0C3  F1E8         	movff	?___ftadd+1,printf@fval+1
  1664  00093E  C0C4  F1E9         	movff	?___ftadd+2,printf@fval+2
  1665  000942                     l5084:
  1666                           
  1667                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1668  000942  0101               	movlb	1	; () banked
  1669  000944  51E6               	movf	(printf@exp+1)& (0+255),w,b
  1670  000946  0A80               	xorlw	128
  1671  000948  6EF3               	movwf	prodl,c
  1672  00094A  0E80               	movlw	128
  1673  00094C  5CF3               	subwf	prodl,w,c
  1674  00094E  0E0A               	movlw	10
  1675  000950  B4D8               	btfsc	status,2,c
  1676  000952  5DE5               	subwf	printf@exp& (0+255),w,b
  1677  000954  B0D8               	btfsc	status,0,c
  1678  000956  D029               	goto	l5092
  1679                           
  1680                           ; BSR set to: 1
  1681  000958  0E7F               	movlw	127
  1682  00095A  0101               	movlb	1	; () banked
  1683  00095C  15E9               	andwf	(printf@fval+2)& (0+255),w,b
  1684  00095E  0101               	movlb	1	; () banked
  1685  000960  11E8               	iorwf	(printf@fval+1)& (0+255),w,b
  1686  000962  0101               	movlb	1	; () banked
  1687  000964  11E7               	iorwf	printf@fval& (0+255),w,b
  1688  000966  B4D8               	btfsc	status,2,c
  1689  000968  D06C               	goto	l5108
  1690                           
  1691                           ; BSR set to: 1
  1692  00096A  C1E7  F0BF         	movff	printf@fval,___fttol@f1
  1693  00096E  C1E8  F0C0         	movff	printf@fval+1,___fttol@f1+1
  1694  000972  C1E9  F0C1         	movff	printf@fval+2,___fttol@f1+2
  1695  000976  ECD0  F00F         	call	___fttol	;wreg free
  1696  00097A  C0BF  F0DB         	movff	?___fttol,??_printf
  1697  00097E  C0C0  F0DC         	movff	?___fttol+1,??_printf+1
  1698  000982  C0C1  F0DD         	movff	?___fttol+2,??_printf+2
  1699  000986  C0C2  F0DE         	movff	?___fttol+3,??_printf+3
  1700  00098A  0100               	movlb	0	; () banked
  1701  00098C  51DE               	movf	(??_printf+3)& (0+255),w,b
  1702  00098E  11DB               	iorwf	??_printf& (0+255),w,b
  1703  000990  11DC               	iorwf	(??_printf+1)& (0+255),w,b
  1704  000992  11DD               	iorwf	(??_printf+2)& (0+255),w,b
  1705  000994  A4D8               	btfss	status,2,c
  1706  000996  D055               	goto	l5108
  1707                           
  1708                           ; BSR set to: 0
  1709  000998  0101               	movlb	1	; () banked
  1710  00099A  51E6               	movf	(printf@exp+1)& (0+255),w,b
  1711  00099C  0A80               	xorlw	128
  1712  00099E  0F80               	addlw	-128
  1713  0009A0  0E02               	movlw	2
  1714  0009A2  B4D8               	btfsc	status,2,c
  1715  0009A4  5DE5               	subwf	printf@exp& (0+255),w,b
  1716  0009A6  A0D8               	btfss	status,0,c
  1717  0009A8  D04C               	goto	l5108
  1718  0009AA                     l5092:
  1719                           
  1720                           ; BSR set to: 1
  1721                           ;doprnt.c: 1129: if(integ < 4.294967296){
  1722  0009AA  C1DB  F02B         	movff	printf@integ,___ftge@ff1
  1723  0009AE  C1DC  F02C         	movff	printf@integ+1,___ftge@ff1+1
  1724  0009B2  C1DD  F02D         	movff	printf@integ+2,___ftge@ff1+2
  1725  0009B6  0E70               	movlw	112
  1726  0009B8  6E2E               	movwf	___ftge@ff2,c
  1727  0009BA  0E89               	movlw	137
  1728  0009BC  6E2F               	movwf	___ftge@ff2+1,c
  1729  0009BE  0E40               	movlw	64
  1730  0009C0  6E30               	movwf	___ftge@ff2+2,c
  1731  0009C2  ECDF  F018         	call	___ftge	;wreg free
  1732  0009C6  B0D8               	btfsc	status,0,c
  1733  0009C8  D003               	goto	l5096
  1734                           
  1735                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1736  0009CA  0101               	movlb	1	; () banked
  1737  0009CC  0EF7               	movlw	247
  1738  0009CE  D002               	goto	L3
  1739  0009D0                     l5096:
  1740                           
  1741                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1742  0009D0  0101               	movlb	1	; () banked
  1743  0009D2  0EF8               	movlw	248
  1744  0009D4                     L3:
  1745  0009D4  0101               	movlb	1	; () banked
  1746  0009D6  27E5               	addwf	printf@exp& (0+255),f,b
  1747  0009D8  0EFF               	movlw	255
  1748  0009DA  0101               	movlb	1	; () banked
  1749  0009DC  23E6               	addwfc	(printf@exp+1)& (0+255),f,b
  1750                           
  1751                           ; BSR set to: 1
  1752                           ;doprnt.c: 1133: }
  1753                           ;doprnt.c: 1134: integ = scale(exp);
  1754                           
  1755                           ; BSR set to: 1
  1756  0009DE  0101               	movlb	1	; () banked
  1757  0009E0  51E5               	movf	printf@exp& (0+255),w,b
  1758  0009E2  EC04  F00A         	call	_scale
  1759  0009E6  C0B8  F1DB         	movff	?_scale,printf@integ
  1760  0009EA  C0B9  F1DC         	movff	?_scale+1,printf@integ+1
  1761  0009EE  C0BA  F1DD         	movff	?_scale+2,printf@integ+2
  1762                           
  1763                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  1764  0009F2  C1E7  F017         	movff	printf@fval,__tdiv_to_l_@f1
  1765  0009F6  C1E8  F018         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1766  0009FA  C1E9  F019         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1767  0009FE  C1DB  F01A         	movff	printf@integ,__tdiv_to_l_@f2
  1768  000A02  C1DC  F01B         	movff	printf@integ+1,__tdiv_to_l_@f2+1
  1769  000A06  C1DD  F01C         	movff	printf@integ+2,__tdiv_to_l_@f2+2
  1770  000A0A  EC26  F014         	call	__tdiv_to_l_	;wreg free
  1771  000A0E  C017  F1CB         	movff	?__tdiv_to_l_,_printf$1040
  1772  000A12  C018  F1CC         	movff	?__tdiv_to_l_+1,_printf$1040+1
  1773  000A16  C019  F1CD         	movff	?__tdiv_to_l_+2,_printf$1040+2
  1774  000A1A  C01A  F1CE         	movff	?__tdiv_to_l_+3,_printf$1040+3
  1775  000A1E  C1CB  F1E0         	movff	_printf$1040,printf@_val
  1776  000A22  C1CC  F1E1         	movff	_printf$1040+1,printf@_val+1
  1777  000A26  C1CD  F1E2         	movff	_printf$1040+2,printf@_val+2
  1778  000A2A  C1CE  F1E3         	movff	_printf$1040+3,printf@_val+3
  1779                           
  1780                           ;doprnt.c: 1138: fval = 0.0;
  1781  000A2E  0E00               	movlw	0
  1782  000A30  0101               	movlb	1	; () banked
  1783  000A32  6FE7               	movwf	printf@fval& (0+255),b
  1784  000A34  0E00               	movlw	0
  1785  000A36  0101               	movlb	1	; () banked
  1786  000A38  6FE8               	movwf	(printf@fval+1)& (0+255),b
  1787  000A3A  0E00               	movlw	0
  1788  000A3C  0101               	movlb	1	; () banked
  1789  000A3E  6FE9               	movwf	(printf@fval+2)& (0+255),b
  1790                           
  1791                           ;doprnt.c: 1139: } else {
  1792  000A40  D034               	goto	l5112
  1793  000A42                     l5108:
  1794                           
  1795                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  1796  000A42  C1E7  F0BF         	movff	printf@fval,___fttol@f1
  1797  000A46  C1E8  F0C0         	movff	printf@fval+1,___fttol@f1+1
  1798  000A4A  C1E9  F0C1         	movff	printf@fval+2,___fttol@f1+2
  1799  000A4E  ECD0  F00F         	call	___fttol	;wreg free
  1800  000A52  C0BF  F1E0         	movff	?___fttol,printf@_val
  1801  000A56  C0C0  F1E1         	movff	?___fttol+1,printf@_val+1
  1802  000A5A  C0C1  F1E2         	movff	?___fttol+2,printf@_val+2
  1803  000A5E  C0C2  F1E3         	movff	?___fttol+3,printf@_val+3
  1804                           
  1805                           ;doprnt.c: 1141: fval -= (double)_val._val;
  1806  000A62  C1E7  F0CE         	movff	printf@fval,___ftsub@f1
  1807  000A66  C1E8  F0CF         	movff	printf@fval+1,___ftsub@f1+1
  1808  000A6A  C1E9  F0D0         	movff	printf@fval+2,___ftsub@f1+2
  1809  000A6E  C1E0  F01F         	movff	printf@_val,___lltoft@c
  1810  000A72  C1E1  F020         	movff	printf@_val+1,___lltoft@c+1
  1811  000A76  C1E2  F021         	movff	printf@_val+2,___lltoft@c+2
  1812  000A7A  C1E3  F022         	movff	printf@_val+3,___lltoft@c+3
  1813  000A7E  ECD6  F019         	call	___lltoft	;wreg free
  1814  000A82  C01F  F0D1         	movff	?___lltoft,___ftsub@f2
  1815  000A86  C020  F0D2         	movff	?___lltoft+1,___ftsub@f2+1
  1816  000A8A  C021  F0D3         	movff	?___lltoft+2,___ftsub@f2+2
  1817  000A8E  EC74  F01A         	call	___ftsub	;wreg free
  1818  000A92  C0CE  F1E7         	movff	?___ftsub,printf@fval
  1819  000A96  C0CF  F1E8         	movff	?___ftsub+1,printf@fval+1
  1820  000A9A  C0D0  F1E9         	movff	?___ftsub+2,printf@fval+2
  1821                           
  1822                           ;doprnt.c: 1142: exp = 0;
  1823  000A9E  0E00               	movlw	0
  1824  000AA0  0101               	movlb	1	; () banked
  1825  000AA2  6FE6               	movwf	(printf@exp+1)& (0+255),b
  1826  000AA4  0E00               	movlw	0
  1827  000AA6  0101               	movlb	1	; () banked
  1828  000AA8  6FE5               	movwf	printf@exp& (0+255),b
  1829  000AAA                     l5112:
  1830                           
  1831                           ; BSR set to: 1
  1832                           ;doprnt.c: 1143: }
  1833                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1834  000AAA  0E01               	movlw	1
  1835  000AAC  0101               	movlb	1	; () banked
  1836  000AAE  6FEA               	movwf	printf@c& (0+255),b
  1837  000AB0                     
  1838                           ; BSR set to: 1
  1839  000AB0  0101               	movlb	1	; () banked
  1840  000AB2  51EA               	movf	printf@c& (0+255),w,b
  1841  000AB4  0A0A               	xorlw	10
  1842  000AB6  B4D8               	btfsc	status,2,c
  1843  000AB8  D01E               	goto	l5126
  1844                           
  1845                           ; BSR set to: 1
  1846                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  1847                           
  1848                           ; BSR set to: 1
  1849                           
  1850                           ; BSR set to: 1
  1851  000ABA  0101               	movlb	1	; () banked
  1852  000ABC  51EA               	movf	printf@c& (0+255),w,b
  1853  000ABE  0D04               	mullw	4
  1854  000AC0  0E01               	movlw	low _dpowers
  1855  000AC2  24F3               	addwf	prodl,w,c
  1856  000AC4  6EF6               	movwf	tblptrl,c
  1857  000AC6  0E06               	movlw	high _dpowers
  1858  000AC8  20F4               	addwfc	prodh,w,c
  1859  000ACA  6EF7               	movwf	tblptrh,c
  1860  000ACC                     	if	0	;There are less than 3 active tblptr bytes
  1861  000ACC                     	endif
  1862  000ACC  0009               	tblrd		*+
  1863  000ACE  50F5               	movf	tablat,w,c
  1864  000AD0  0101               	movlb	1	; () banked
  1865  000AD2  5DE0               	subwf	printf@_val& (0+255),w,b
  1866  000AD4  0009               	tblrd		*+
  1867  000AD6  50F5               	movf	tablat,w,c
  1868  000AD8  0101               	movlb	1	; () banked
  1869  000ADA  59E1               	subwfb	(printf@_val+1)& (0+255),w,b
  1870  000ADC  0009               	tblrd		*+
  1871  000ADE  50F5               	movf	tablat,w,c
  1872  000AE0  0101               	movlb	1	; () banked
  1873  000AE2  59E2               	subwfb	(printf@_val+2)& (0+255),w,b
  1874  000AE4  0009               	tblrd		*+
  1875  000AE6  50F5               	movf	tablat,w,c
  1876  000AE8  0101               	movlb	1	; () banked
  1877  000AEA  59E3               	subwfb	(printf@_val+3)& (0+255),w,b
  1878  000AEC  A0D8               	btfss	status,0,c
  1879  000AEE  D003               	goto	l5126
  1880                           
  1881                           ; BSR set to: 1
  1882                           
  1883                           ; BSR set to: 1
  1884                           
  1885                           ; BSR set to: 1
  1886                           ;doprnt.c: 1147: break;
  1887  000AF0  0101               	movlb	1	; () banked
  1888  000AF2  2BEA               	incf	printf@c& (0+255),f,b
  1889  000AF4  D7DD               	goto	L4
  1890  000AF6                     l5126:
  1891                           
  1892                           ; BSR set to: 1
  1893                           ;doprnt.c: 1184: {
  1894                           ;doprnt.c: 1197: if(flag & 0x03)
  1895  000AF6  0E03               	movlw	3
  1896  000AF8  0101               	movlb	1	; () banked
  1897  000AFA  15D9               	andwf	printf@flag& (0+255),w,b
  1898  000AFC  0100               	movlb	0	; () banked
  1899  000AFE  6FDB               	movwf	??_printf& (0+255),b
  1900  000B00  0E00               	movlw	0
  1901  000B02  0101               	movlb	1	; () banked
  1902  000B04  15DA               	andwf	(printf@flag+1)& (0+255),w,b
  1903  000B06  0100               	movlb	0	; () banked
  1904  000B08  6FDC               	movwf	(??_printf+1)& (0+255),b
  1905  000B0A  0100               	movlb	0	; () banked
  1906  000B0C  51DC               	movf	(??_printf+1)& (0+255),w,b
  1907  000B0E  11DB               	iorwf	??_printf& (0+255),w,b
  1908  000B10  B4D8               	btfsc	status,2,c
  1909  000B12  D04A               	goto	l5136
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;doprnt.c: 1199: (putch('-') );
  1913  000B14  0E2D               	movlw	45
  1914  000B16  ECD0  F01B         	call	_putch
  1915  000B1A  D046               	goto	l5136
  1916  000B1C                     l5130:
  1917                           
  1918                           ;doprnt.c: 1209: {
  1919                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  1920  000B1C  C1E0  F017         	movff	printf@_val,___lldiv@dividend
  1921  000B20  C1E1  F018         	movff	printf@_val+1,___lldiv@dividend+1
  1922  000B24  C1E2  F019         	movff	printf@_val+2,___lldiv@dividend+2
  1923  000B28  C1E3  F01A         	movff	printf@_val+3,___lldiv@dividend+3
  1924  000B2C  0101               	movlb	1	; () banked
  1925  000B2E  51EA               	movf	printf@c& (0+255),w,b
  1926  000B30  0D04               	mullw	4
  1927  000B32  0E01               	movlw	low _dpowers
  1928  000B34  24F3               	addwf	prodl,w,c
  1929  000B36  6EF6               	movwf	tblptrl,c
  1930  000B38  0E06               	movlw	high _dpowers
  1931  000B3A  20F4               	addwfc	prodh,w,c
  1932  000B3C  6EF7               	movwf	tblptrh,c
  1933  000B3E                     	if	0	;There are less than 3 active tblptr bytes
  1934  000B3E                     	endif
  1935  000B3E  0009               	tblrd		*+
  1936  000B40  CFF5 F01B          	movff	tablat,___lldiv@divisor
  1937  000B44  0009               	tblrd		*+
  1938  000B46  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  1939  000B4A  0009               	tblrd		*+
  1940  000B4C  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  1941  000B50  000A               	tblrd		*-
  1942  000B52  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  1943  000B56  EC27  F019         	call	___lldiv	;wreg free
  1944  000B5A  C017  F1CF         	movff	?___lldiv,printf@vd
  1945  000B5E  C018  F1D0         	movff	?___lldiv+1,printf@vd+1
  1946  000B62  C019  F1D1         	movff	?___lldiv+2,printf@vd+2
  1947  000B66  C01A  F1D2         	movff	?___lldiv+3,printf@vd+3
  1948                           
  1949                           ;doprnt.c: 1211: vd %= 10;
  1950  000B6A  C1CF  F024         	movff	printf@vd,___llmod@dividend
  1951  000B6E  C1D0  F025         	movff	printf@vd+1,___llmod@dividend+1
  1952  000B72  C1D1  F026         	movff	printf@vd+2,___llmod@dividend+2
  1953  000B76  C1D2  F027         	movff	printf@vd+3,___llmod@dividend+3
  1954  000B7A  0E0A               	movlw	10
  1955  000B7C  6E28               	movwf	___llmod@divisor,c
  1956  000B7E  0E00               	movlw	0
  1957  000B80  6E29               	movwf	___llmod@divisor+1,c
  1958  000B82  0E00               	movlw	0
  1959  000B84  6E2A               	movwf	___llmod@divisor+2,c
  1960  000B86  0E00               	movlw	0
  1961  000B88  6E2B               	movwf	___llmod@divisor+3,c
  1962  000B8A  ECA3  F019         	call	___llmod	;wreg free
  1963  000B8E  C024  F1CF         	movff	?___llmod,printf@vd
  1964  000B92  C025  F1D0         	movff	?___llmod+1,printf@vd+1
  1965  000B96  C026  F1D1         	movff	?___llmod+2,printf@vd+2
  1966  000B9A  C027  F1D2         	movff	?___llmod+3,printf@vd+3
  1967                           
  1968                           ;doprnt.c: 1212: (putch('0' + vd) );
  1969  000B9E  0101               	movlb	1	; () banked
  1970  000BA0  51CF               	movf	printf@vd& (0+255),w,b
  1971  000BA2  0F30               	addlw	48
  1972  000BA4  ECD0  F01B         	call	_putch
  1973  000BA8                     l5136:
  1974  000BA8  0101               	movlb	1	; () banked
  1975  000BAA  07EA               	decf	printf@c& (0+255),f,b
  1976  000BAC  0101               	movlb	1	; () banked
  1977  000BAE  29EA               	incf	printf@c& (0+255),w,b
  1978  000BB0  B4D8               	btfsc	status,2,c
  1979  000BB2  D008               	goto	l5142
  1980  000BB4  D7B3               	goto	l5130
  1981  000BB6                     l5138:
  1982                           
  1983                           ; BSR set to: 1
  1984                           ;doprnt.c: 1217: (putch('0') );
  1985  000BB6  0E30               	movlw	48
  1986  000BB8  ECD0  F01B         	call	_putch
  1987                           
  1988                           ;doprnt.c: 1218: exp--;
  1989  000BBC  0101               	movlb	1	; () banked
  1990  000BBE  07E5               	decf	printf@exp& (0+255),f,b
  1991  000BC0  A0D8               	btfss	status,0,c
  1992  000BC2  07E6               	decf	(printf@exp+1)& (0+255),f,b
  1993  000BC4                     l5142:
  1994                           
  1995                           ; BSR set to: 1
  1996  000BC4  0101               	movlb	1	; () banked
  1997  000BC6  51E6               	movf	(printf@exp+1)& (0+255),w,b
  1998  000BC8  0A80               	xorlw	128
  1999  000BCA  6EF3               	movwf	prodl,c
  2000  000BCC  0E80               	movlw	128
  2001  000BCE  5CF3               	subwf	prodl,w,c
  2002  000BD0  0E01               	movlw	1
  2003  000BD2  B4D8               	btfsc	status,2,c
  2004  000BD4  5DE5               	subwf	printf@exp& (0+255),w,b
  2005  000BD6  B0D8               	btfsc	status,0,c
  2006  000BD8  D7EE               	goto	l5138
  2007                           
  2008                           ; BSR set to: 1
  2009                           ;doprnt.c: 1219: }
  2010                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2011                           
  2012                           ; BSR set to: 1
  2013  000BDA  0101               	movlb	1	; () banked
  2014  000BDC  51DF               	movf	(printf@prec+1)& (0+255),w,b
  2015  000BDE  0A80               	xorlw	128
  2016  000BE0  0F80               	addlw	-128
  2017  000BE2  0E09               	movlw	9
  2018  000BE4  B4D8               	btfsc	status,2,c
  2019  000BE6  5DDE               	subwf	printf@prec& (0+255),w,b
  2020  000BE8  A0D8               	btfss	status,0,c
  2021  000BEA  D004               	goto	l642
  2022                           
  2023                           ; BSR set to: 1
  2024                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2025  000BEC  0E08               	movlw	8
  2026  000BEE  0101               	movlb	1	; () banked
  2027  000BF0  6FEA               	movwf	printf@c& (0+255),b
  2028  000BF2  D002               	goto	l5148
  2029  000BF4                     l642:
  2030                           
  2031                           ; BSR set to: 1
  2032                           ;doprnt.c: 1222: else
  2033                           ;doprnt.c: 1223: c = prec;
  2034  000BF4  C1DE  F1EA         	movff	printf@prec,printf@c
  2035  000BF8                     l5148:
  2036                           
  2037                           ; BSR set to: 1
  2038                           ;doprnt.c: 1224: prec -= c;
  2039  000BF8  0101               	movlb	1	; () banked
  2040  000BFA  51EA               	movf	printf@c& (0+255),w,b
  2041  000BFC  0101               	movlb	1	; () banked
  2042  000BFE  5FDE               	subwf	printf@prec& (0+255),f,b
  2043  000C00  0E00               	movlw	0
  2044  000C02  0101               	movlb	1	; () banked
  2045  000C04  BFEA               	btfsc	printf@c& (0+255),7,b
  2046  000C06  0EFF               	movlw	255
  2047  000C08  0101               	movlb	1	; () banked
  2048  000C0A  5BDF               	subwfb	(printf@prec+1)& (0+255),f,b
  2049                           
  2050                           ; BSR set to: 1
  2051                           ;doprnt.c: 1228: if(c)
  2052  000C0C  0101               	movlb	1	; () banked
  2053  000C0E  51EA               	movf	printf@c& (0+255),w,b
  2054  000C10  B4D8               	btfsc	status,2,c
  2055  000C12  D003               	goto	l5154
  2056                           
  2057                           ; BSR set to: 1
  2058                           ;doprnt.c: 1230: (putch('.') );
  2059  000C14  0E2E               	movlw	46
  2060  000C16  ECD0  F01B         	call	_putch
  2061  000C1A                     l5154:
  2062                           
  2063                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2064  000C1A  0101               	movlb	1	; () banked
  2065  000C1C  51EA               	movf	printf@c& (0+255),w,b
  2066  000C1E  EC04  F00A         	call	_scale
  2067  000C22  C0B8  F1C8         	movff	?_scale,_printf$1687
  2068  000C26  C0B9  F1C9         	movff	?_scale+1,_printf$1687+1
  2069  000C2A  C0BA  F1CA         	movff	?_scale+2,_printf$1687+2
  2070                           
  2071                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2072  000C2E  C1E7  F0AF         	movff	printf@fval,___ftmul@f2
  2073  000C32  C1E8  F0B0         	movff	printf@fval+1,___ftmul@f2+1
  2074  000C36  C1E9  F0B1         	movff	printf@fval+2,___ftmul@f2+2
  2075  000C3A  C1C8  F0AC         	movff	_printf$1687,___ftmul@f1
  2076  000C3E  C1C9  F0AD         	movff	_printf$1687+1,___ftmul@f1+1
  2077  000C42  C1CA  F0AE         	movff	_printf$1687+2,___ftmul@f1+2
  2078  000C46  ECBD  F012         	call	___ftmul	;wreg free
  2079  000C4A  C0AC  F0BF         	movff	?___ftmul,___fttol@f1
  2080  000C4E  C0AD  F0C0         	movff	?___ftmul+1,___fttol@f1+1
  2081  000C52  C0AE  F0C1         	movff	?___ftmul+2,___fttol@f1+2
  2082  000C56  ECD0  F00F         	call	___fttol	;wreg free
  2083  000C5A  C0BF  F1E0         	movff	?___fttol,printf@_val
  2084  000C5E  C0C0  F1E1         	movff	?___fttol+1,printf@_val+1
  2085  000C62  C0C1  F1E2         	movff	?___fttol+2,printf@_val+2
  2086  000C66  C0C2  F1E3         	movff	?___fttol+3,printf@_val+3
  2087                           
  2088                           ;doprnt.c: 1237: while(c--) {
  2089  000C6A  D06D               	goto	l5166
  2090  000C6C                     l5158:
  2091                           
  2092                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  2093  000C6C  C1E0  F017         	movff	printf@_val,___lldiv@dividend
  2094  000C70  C1E1  F018         	movff	printf@_val+1,___lldiv@dividend+1
  2095  000C74  C1E2  F019         	movff	printf@_val+2,___lldiv@dividend+2
  2096  000C78  C1E3  F01A         	movff	printf@_val+3,___lldiv@dividend+3
  2097  000C7C  0101               	movlb	1	; () banked
  2098  000C7E  51EA               	movf	printf@c& (0+255),w,b
  2099  000C80  0D04               	mullw	4
  2100  000C82  0E01               	movlw	low _dpowers
  2101  000C84  24F3               	addwf	prodl,w,c
  2102  000C86  6EF6               	movwf	tblptrl,c
  2103  000C88  0E06               	movlw	high _dpowers
  2104  000C8A  20F4               	addwfc	prodh,w,c
  2105  000C8C  6EF7               	movwf	tblptrh,c
  2106  000C8E                     	if	0	;There are less than 3 active tblptr bytes
  2107  000C8E                     	endif
  2108  000C8E  0009               	tblrd		*+
  2109  000C90  CFF5 F01B          	movff	tablat,___lldiv@divisor
  2110  000C94  0009               	tblrd		*+
  2111  000C96  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  2112  000C9A  0009               	tblrd		*+
  2113  000C9C  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  2114  000CA0  000A               	tblrd		*-
  2115  000CA2  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  2116  000CA6  EC27  F019         	call	___lldiv	;wreg free
  2117  000CAA  C017  F1D3         	movff	?___lldiv,printf@vd_1042
  2118  000CAE  C018  F1D4         	movff	?___lldiv+1,printf@vd_1042+1
  2119  000CB2  C019  F1D5         	movff	?___lldiv+2,printf@vd_1042+2
  2120  000CB6  C01A  F1D6         	movff	?___lldiv+3,printf@vd_1042+3
  2121                           
  2122                           ;doprnt.c: 1239: vd %= 10;
  2123  000CBA  C1D3  F024         	movff	printf@vd_1042,___llmod@dividend
  2124  000CBE  C1D4  F025         	movff	printf@vd_1042+1,___llmod@dividend+1
  2125  000CC2  C1D5  F026         	movff	printf@vd_1042+2,___llmod@dividend+2
  2126  000CC6  C1D6  F027         	movff	printf@vd_1042+3,___llmod@dividend+3
  2127  000CCA  0E0A               	movlw	10
  2128  000CCC  6E28               	movwf	___llmod@divisor,c
  2129  000CCE  0E00               	movlw	0
  2130  000CD0  6E29               	movwf	___llmod@divisor+1,c
  2131  000CD2  0E00               	movlw	0
  2132  000CD4  6E2A               	movwf	___llmod@divisor+2,c
  2133  000CD6  0E00               	movlw	0
  2134  000CD8  6E2B               	movwf	___llmod@divisor+3,c
  2135  000CDA  ECA3  F019         	call	___llmod	;wreg free
  2136  000CDE  C024  F1D3         	movff	?___llmod,printf@vd_1042
  2137  000CE2  C025  F1D4         	movff	?___llmod+1,printf@vd_1042+1
  2138  000CE6  C026  F1D5         	movff	?___llmod+2,printf@vd_1042+2
  2139  000CEA  C027  F1D6         	movff	?___llmod+3,printf@vd_1042+3
  2140                           
  2141                           ;doprnt.c: 1240: (putch('0' + vd) );
  2142  000CEE  0101               	movlb	1	; () banked
  2143  000CF0  51D3               	movf	printf@vd_1042& (0+255),w,b
  2144  000CF2  0F30               	addlw	48
  2145  000CF4  ECD0  F01B         	call	_putch
  2146                           
  2147                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  2148  000CF8  C1E0  F024         	movff	printf@_val,___llmod@dividend
  2149  000CFC  C1E1  F025         	movff	printf@_val+1,___llmod@dividend+1
  2150  000D00  C1E2  F026         	movff	printf@_val+2,___llmod@dividend+2
  2151  000D04  C1E3  F027         	movff	printf@_val+3,___llmod@dividend+3
  2152  000D08  0101               	movlb	1	; () banked
  2153  000D0A  51EA               	movf	printf@c& (0+255),w,b
  2154  000D0C  0D04               	mullw	4
  2155  000D0E  0E01               	movlw	low _dpowers
  2156  000D10  24F3               	addwf	prodl,w,c
  2157  000D12  6EF6               	movwf	tblptrl,c
  2158  000D14  0E06               	movlw	high _dpowers
  2159  000D16  20F4               	addwfc	prodh,w,c
  2160  000D18  6EF7               	movwf	tblptrh,c
  2161  000D1A                     	if	0	;There are less than 3 active tblptr bytes
  2162  000D1A                     	endif
  2163  000D1A  0009               	tblrd		*+
  2164  000D1C  CFF5 F028          	movff	tablat,___llmod@divisor
  2165  000D20  0009               	tblrd		*+
  2166  000D22  CFF5 F029          	movff	tablat,___llmod@divisor+1
  2167  000D26  0009               	tblrd		*+
  2168  000D28  CFF5 F02A          	movff	tablat,___llmod@divisor+2
  2169  000D2C  000A               	tblrd		*-
  2170  000D2E  CFF5 F02B          	movff	tablat,___llmod@divisor+3
  2171  000D32  ECA3  F019         	call	___llmod	;wreg free
  2172  000D36  C024  F1E0         	movff	?___llmod,printf@_val
  2173  000D3A  C025  F1E1         	movff	?___llmod+1,printf@_val+1
  2174  000D3E  C026  F1E2         	movff	?___llmod+2,printf@_val+2
  2175  000D42  C027  F1E3         	movff	?___llmod+3,printf@_val+3
  2176  000D46                     l5166:
  2177  000D46  0101               	movlb	1	; () banked
  2178  000D48  07EA               	decf	printf@c& (0+255),f,b
  2179  000D4A  0101               	movlb	1	; () banked
  2180  000D4C  29EA               	incf	printf@c& (0+255),w,b
  2181  000D4E  B4D8               	btfsc	status,2,c
  2182  000D50  D008               	goto	l5172
  2183  000D52  D78C               	goto	l5158
  2184  000D54                     l5168:
  2185                           
  2186                           ; BSR set to: 1
  2187                           ;doprnt.c: 1245: (putch('0') );
  2188  000D54  0E30               	movlw	48
  2189  000D56  ECD0  F01B         	call	_putch
  2190                           
  2191                           ;doprnt.c: 1246: prec--;
  2192  000D5A  0101               	movlb	1	; () banked
  2193  000D5C  07DE               	decf	printf@prec& (0+255),f,b
  2194  000D5E  A0D8               	btfss	status,0,c
  2195  000D60  07DF               	decf	(printf@prec+1)& (0+255),f,b
  2196  000D62                     l5172:
  2197                           
  2198                           ; BSR set to: 1
  2199  000D62  0101               	movlb	1	; () banked
  2200  000D64  51DF               	movf	(printf@prec+1)& (0+255),w,b
  2201  000D66  11DE               	iorwf	printf@prec& (0+255),w,b
  2202  000D68  B4D8               	btfsc	status,2,c
  2203  000D6A  D0D8               	goto	l5210
  2204  000D6C  D7F3               	goto	l5168
  2205  000D6E                     l5174:
  2206                           
  2207                           ; BSR set to: 1
  2208                           ;doprnt.c: 1255: }
  2209                           ;doprnt.c: 1262: {
  2210                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2211  000D6E  C1D7  FFD9         	movff	printf@ap,fsr2l
  2212  000D72  C1D8  FFDA         	movff	printf@ap+1,fsr2h
  2213  000D76  0101               	movlb	1	; () banked
  2214  000D78  CFDE F1E0          	movff	postinc2,printf@_val
  2215  000D7C  0101               	movlb	1	; () banked
  2216  000D7E  CFDD F1E1          	movff	postdec2,printf@_val+1
  2217  000D82  0101               	movlb	1	; () banked
  2218  000D84  0E00               	movlw	0
  2219  000D86  0101               	movlb	1	; () banked
  2220  000D88  BFE1               	btfsc	(printf@_val+1)& (0+255),7,b
  2221  000D8A  0EFF               	movlw	-1
  2222  000D8C  0101               	movlb	1	; () banked
  2223  000D8E  6FE2               	movwf	(printf@_val+2)& (0+255),b
  2224  000D90  0101               	movlb	1	; () banked
  2225  000D92  6FE3               	movwf	(printf@_val+3)& (0+255),b
  2226                           
  2227                           ; BSR set to: 1
  2228  000D94  0E02               	movlw	2
  2229  000D96  0101               	movlb	1	; () banked
  2230  000D98  27D7               	addwf	printf@ap& (0+255),f,b
  2231  000D9A  0E00               	movlw	0
  2232  000D9C  0101               	movlb	1	; () banked
  2233  000D9E  23D8               	addwfc	(printf@ap+1)& (0+255),f,b
  2234                           
  2235                           ; BSR set to: 1
  2236                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  2237  000DA0  0101               	movlb	1	; () banked
  2238  000DA2  51E3               	movf	(printf@_val+3)& (0+255),w,b
  2239  000DA4  0A80               	xorlw	128
  2240  000DA6  0F80               	addlw	128
  2241  000DA8  E10B               	bnz	u5485
  2242  000DAA  0E00               	movlw	0
  2243  000DAC  0101               	movlb	1	; () banked
  2244  000DAE  5DE2               	subwf	(printf@_val+2)& (0+255),w,b
  2245  000DB0  E107               	bnz	u5485
  2246  000DB2  0E00               	movlw	0
  2247  000DB4  0101               	movlb	1	; () banked
  2248  000DB6  5DE1               	subwf	(printf@_val+1)& (0+255),w,b
  2249  000DB8  E103               	bnz	u5485
  2250  000DBA  0E00               	movlw	0
  2251  000DBC  0101               	movlb	1	; () banked
  2252  000DBE  5DE0               	subwf	printf@_val& (0+255),w,b
  2253  000DC0                     u5485:
  2254  000DC0  B0D8               	btfsc	status,0,c
  2255  000DC2  D012               	goto	l5184
  2256                           
  2257                           ; BSR set to: 1
  2258                           ;doprnt.c: 1271: flag |= 0x03;
  2259  000DC4  0E03               	movlw	3
  2260  000DC6  0101               	movlb	1	; () banked
  2261  000DC8  13D9               	iorwf	printf@flag& (0+255),f,b
  2262                           
  2263                           ; BSR set to: 1
  2264                           ;doprnt.c: 1272: _val._val = -_val._val;
  2265  000DCA  0101               	movlb	1	; () banked
  2266  000DCC  1FE3               	comf	(printf@_val+3)& (0+255),f,b
  2267  000DCE  0101               	movlb	1	; () banked
  2268  000DD0  1FE2               	comf	(printf@_val+2)& (0+255),f,b
  2269  000DD2  0101               	movlb	1	; () banked
  2270  000DD4  1FE1               	comf	(printf@_val+1)& (0+255),f,b
  2271  000DD6  0101               	movlb	1	; () banked
  2272  000DD8  6DE0               	negf	printf@_val& (0+255),b
  2273  000DDA  0E00               	movlw	0
  2274  000DDC  0101               	movlb	1	; () banked
  2275  000DDE  23E1               	addwfc	(printf@_val+1)& (0+255),f,b
  2276  000DE0  0101               	movlb	1	; () banked
  2277  000DE2  23E2               	addwfc	(printf@_val+2)& (0+255),f,b
  2278  000DE4  0101               	movlb	1	; () banked
  2279  000DE6  23E3               	addwfc	(printf@_val+3)& (0+255),f,b
  2280  000DE8                     l5184:
  2281                           
  2282                           ; BSR set to: 1
  2283                           ;doprnt.c: 1273: }
  2284                           ;doprnt.c: 1275: }
  2285                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2286  000DE8  0E01               	movlw	1
  2287  000DEA  0101               	movlb	1	; () banked
  2288  000DEC  6FEA               	movwf	printf@c& (0+255),b
  2289  000DEE                     
  2290                           ; BSR set to: 1
  2291  000DEE  0101               	movlb	1	; () banked
  2292  000DF0  51EA               	movf	printf@c& (0+255),w,b
  2293  000DF2  0A0A               	xorlw	10
  2294  000DF4  B4D8               	btfsc	status,2,c
  2295  000DF6  D01E               	goto	l5198
  2296                           
  2297                           ; BSR set to: 1
  2298                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2299                           
  2300                           ; BSR set to: 1
  2301                           
  2302                           ; BSR set to: 1
  2303  000DF8  0101               	movlb	1	; () banked
  2304  000DFA  51EA               	movf	printf@c& (0+255),w,b
  2305  000DFC  0D04               	mullw	4
  2306  000DFE  0E01               	movlw	low _dpowers
  2307  000E00  24F3               	addwf	prodl,w,c
  2308  000E02  6EF6               	movwf	tblptrl,c
  2309  000E04  0E06               	movlw	high _dpowers
  2310  000E06  20F4               	addwfc	prodh,w,c
  2311  000E08  6EF7               	movwf	tblptrh,c
  2312  000E0A                     	if	0	;There are less than 3 active tblptr bytes
  2313  000E0A                     	endif
  2314  000E0A  0009               	tblrd		*+
  2315  000E0C  50F5               	movf	tablat,w,c
  2316  000E0E  0101               	movlb	1	; () banked
  2317  000E10  5DE0               	subwf	printf@_val& (0+255),w,b
  2318  000E12  0009               	tblrd		*+
  2319  000E14  50F5               	movf	tablat,w,c
  2320  000E16  0101               	movlb	1	; () banked
  2321  000E18  59E1               	subwfb	(printf@_val+1)& (0+255),w,b
  2322  000E1A  0009               	tblrd		*+
  2323  000E1C  50F5               	movf	tablat,w,c
  2324  000E1E  0101               	movlb	1	; () banked
  2325  000E20  59E2               	subwfb	(printf@_val+2)& (0+255),w,b
  2326  000E22  0009               	tblrd		*+
  2327  000E24  50F5               	movf	tablat,w,c
  2328  000E26  0101               	movlb	1	; () banked
  2329  000E28  59E3               	subwfb	(printf@_val+3)& (0+255),w,b
  2330  000E2A  A0D8               	btfss	status,0,c
  2331  000E2C  D003               	goto	l5198
  2332                           
  2333                           ; BSR set to: 1
  2334                           
  2335                           ; BSR set to: 1
  2336                           
  2337                           ; BSR set to: 1
  2338                           ;doprnt.c: 1316: break;
  2339  000E2E  0101               	movlb	1	; () banked
  2340  000E30  2BEA               	incf	printf@c& (0+255),f,b
  2341  000E32  D7DD               	goto	L5
  2342  000E34                     l5198:
  2343                           
  2344                           ; BSR set to: 1
  2345                           ;doprnt.c: 1431: {
  2346                           ;doprnt.c: 1447: if(flag & 0x03)
  2347  000E34  0E03               	movlw	3
  2348  000E36  0101               	movlb	1	; () banked
  2349  000E38  15D9               	andwf	printf@flag& (0+255),w,b
  2350  000E3A  0100               	movlb	0	; () banked
  2351  000E3C  6FDB               	movwf	??_printf& (0+255),b
  2352  000E3E  0E00               	movlw	0
  2353  000E40  0101               	movlb	1	; () banked
  2354  000E42  15DA               	andwf	(printf@flag+1)& (0+255),w,b
  2355  000E44  0100               	movlb	0	; () banked
  2356  000E46  6FDC               	movwf	(??_printf+1)& (0+255),b
  2357  000E48  0100               	movlb	0	; () banked
  2358  000E4A  51DC               	movf	(??_printf+1)& (0+255),w,b
  2359  000E4C  11DB               	iorwf	??_printf& (0+255),w,b
  2360  000E4E  B4D8               	btfsc	status,2,c
  2361  000E50  D003               	goto	l5202
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;doprnt.c: 1448: (putch('-') );
  2365  000E52  0E2D               	movlw	45
  2366  000E54  ECD0  F01B         	call	_putch
  2367  000E58                     l5202:
  2368                           
  2369                           ;doprnt.c: 1478: }
  2370                           ;doprnt.c: 1481: prec = c;
  2371  000E58  0101               	movlb	1	; () banked
  2372  000E5A  51EA               	movf	printf@c& (0+255),w,b
  2373  000E5C  0101               	movlb	1	; () banked
  2374  000E5E  6FDE               	movwf	printf@prec& (0+255),b
  2375  000E60  0101               	movlb	1	; () banked
  2376  000E62  6BDF               	clrf	(printf@prec+1)& (0+255),b
  2377  000E64  0101               	movlb	1	; () banked
  2378  000E66  BFDE               	btfsc	printf@prec& (0+255),7,b
  2379  000E68  07DF               	decf	(printf@prec+1)& (0+255),f,b
  2380                           
  2381                           ;doprnt.c: 1483: while(prec--) {
  2382  000E6A  D04E               	goto	l5208
  2383  000E6C                     l5204:
  2384                           
  2385                           ; BSR set to: 1
  2386                           ;doprnt.c: 1487: {
  2387                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2388  000E6C  0101               	movlb	1	; () banked
  2389  000E6E  C1DE  F0DB         	movff	printf@prec,??_printf
  2390  000E72  0101               	movlb	1	; () banked
  2391  000E74  C1DF  F0DC         	movff	printf@prec+1,??_printf+1
  2392  000E78  0100               	movlb	0	; () banked
  2393  000E7A  90D8               	bcf	status,0,c
  2394  000E7C  37DB               	rlcf	??_printf& (0+255),f,b
  2395  000E7E  37DC               	rlcf	(??_printf+1)& (0+255),f,b
  2396  000E80  0100               	movlb	0	; () banked
  2397  000E82  90D8               	bcf	status,0,c
  2398  000E84  37DB               	rlcf	??_printf& (0+255),f,b
  2399  000E86  37DC               	rlcf	(??_printf+1)& (0+255),f,b
  2400  000E88  0E01               	movlw	low _dpowers
  2401  000E8A  0100               	movlb	0	; () banked
  2402  000E8C  25DB               	addwf	??_printf& (0+255),w,b
  2403  000E8E  6EF6               	movwf	tblptrl,c
  2404  000E90  0E06               	movlw	high _dpowers
  2405  000E92  21DC               	addwfc	(??_printf+1)& (0+255),w,b
  2406  000E94  6EF7               	movwf	tblptrh,c
  2407  000E96                     	if	0	;There are less than 3 active tblptr bytes
  2408  000E96                     	endif
  2409  000E96  0009               	tblrd		*+
  2410  000E98  CFF5 F01B          	movff	tablat,___lldiv@divisor
  2411  000E9C  0009               	tblrd		*+
  2412  000E9E  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  2413  000EA2  0009               	tblrd		*+
  2414  000EA4  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  2415  000EA8  000A               	tblrd		*-
  2416  000EAA  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  2417  000EAE  C1E0  F017         	movff	printf@_val,___lldiv@dividend
  2418  000EB2  C1E1  F018         	movff	printf@_val+1,___lldiv@dividend+1
  2419  000EB6  C1E2  F019         	movff	printf@_val+2,___lldiv@dividend+2
  2420  000EBA  C1E3  F01A         	movff	printf@_val+3,___lldiv@dividend+3
  2421  000EBE  EC27  F019         	call	___lldiv	;wreg free
  2422  000EC2  C017  F024         	movff	?___lldiv,___llmod@dividend
  2423  000EC6  C018  F025         	movff	?___lldiv+1,___llmod@dividend+1
  2424  000ECA  C019  F026         	movff	?___lldiv+2,___llmod@dividend+2
  2425  000ECE  C01A  F027         	movff	?___lldiv+3,___llmod@dividend+3
  2426  000ED2  0E0A               	movlw	10
  2427  000ED4  6E28               	movwf	___llmod@divisor,c
  2428  000ED6  0E00               	movlw	0
  2429  000ED8  6E29               	movwf	___llmod@divisor+1,c
  2430  000EDA  0E00               	movlw	0
  2431  000EDC  6E2A               	movwf	___llmod@divisor+2,c
  2432  000EDE  0E00               	movlw	0
  2433  000EE0  6E2B               	movwf	___llmod@divisor+3,c
  2434  000EE2  ECA3  F019         	call	___llmod	;wreg free
  2435  000EE6  C024  F0DD         	movff	?___llmod,??_printf+2
  2436  000EEA  C025  F0DE         	movff	?___llmod+1,??_printf+3
  2437  000EEE  C026  F0DF         	movff	?___llmod+2,??_printf+4
  2438  000EF2  C027  F0E0         	movff	?___llmod+3,??_printf+5
  2439  000EF6  0100               	movlb	0	; () banked
  2440  000EF8  51DD               	movf	(??_printf+2)& (0+255),w,b
  2441  000EFA  0F30               	addlw	48
  2442  000EFC  0101               	movlb	1	; () banked
  2443  000EFE  6FEA               	movwf	printf@c& (0+255),b
  2444                           
  2445                           ; BSR set to: 1
  2446                           ;doprnt.c: 1532: }
  2447                           ;doprnt.c: 1533: (putch(c) );
  2448  000F00  0101               	movlb	1	; () banked
  2449  000F02  51EA               	movf	printf@c& (0+255),w,b
  2450  000F04  ECD0  F01B         	call	_putch
  2451  000F08                     l5208:
  2452  000F08  0101               	movlb	1	; () banked
  2453  000F0A  07DE               	decf	printf@prec& (0+255),f,b
  2454  000F0C  A0D8               	btfss	status,0,c
  2455  000F0E  07DF               	decf	(printf@prec+1)& (0+255),f,b
  2456  000F10  0101               	movlb	1	; () banked
  2457  000F12  29DE               	incf	printf@prec& (0+255),w,b
  2458  000F14  B4D8               	btfsc	status,2,c
  2459  000F16  29DF               	incf	(printf@prec+1)& (0+255),w,b
  2460  000F18  A4D8               	btfss	status,2,c
  2461  000F1A  D7A8               	goto	l5204
  2462  000F1C                     l5210:
  2463  000F1C  0100               	movlb	0	; () banked
  2464  000F1E  C0D4  FFF6         	movff	printf@f,tblptrl
  2465  000F22  0100               	movlb	0	; () banked
  2466  000F24  C0D5  FFF7         	movff	printf@f+1,tblptrh
  2467  000F28  0100               	movlb	0	; () banked
  2468  000F2A  4BD4               	infsnz	printf@f& (0+255),f,b
  2469  000F2C  2BD5               	incf	(printf@f+1)& (0+255),f,b
  2470  000F2E                     	if	0	;tblptru may be non-zero
  2471  000F2E                     	endif
  2472  000F2E                     	if	0	;tblptru may be non-zero
  2473  000F2E                     	endif
  2474  000F2E  0008               	tblrd		*
  2475  000F30  0101               	movlb	1	; () banked
  2476  000F32  CFF5 F1EA          	movff	tablat,printf@c
  2477  000F36  0101               	movlb	1	; () banked
  2478  000F38  67EA               	tstfsz	printf@c& (0+255),b
  2479  000F3A  EF66  F003         	goto	l5026
  2480  000F3E  0012               	return	
  2481  000F40                     __end_of_printf:
  2482                           	opt stack 0
  2483                           tblptru	equ	0xFF8
  2484                           tblptrh	equ	0xFF7
  2485                           tblptrl	equ	0xFF6
  2486                           tablat	equ	0xFF5
  2487                           prodh	equ	0xFF4
  2488                           prodl	equ	0xFF3
  2489                           intcon	equ	0xFF2
  2490                           postinc0	equ	0xFEE
  2491                           wreg	equ	0xFE8
  2492                           postinc2	equ	0xFDE
  2493                           postdec2	equ	0xFDD
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function _scale *****************
  2499 ;; Defined at:
  2500 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  scl             1    wreg     char 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  scl             1   18[BANK0 ] char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  3   12[BANK0 ] char 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2514 ;;      Params:         0       3       0       0       0       0       0
  2515 ;;      Locals:         0       4       0       0       0       0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0
  2517 ;;      Totals:         0       7       0       0       0       0       0
  2518 ;;Total ram usage:        7 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    6
  2521 ;; This function calls:
  2522 ;;		___awdiv
  2523 ;;		___awmod
  2524 ;;		___ftmul
  2525 ;;		___wmul
  2526 ;; This function is called by:
  2527 ;;		_printf
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text2
  2532  001408                     __ptext2:
  2533                           	opt stack 0
  2534  001408                     _scale:
  2535                           	opt stack 23
  2536                           
  2537                           ; BSR set to: 1
  2538                           ;incstack = 0
  2539                           ;scale@scl stored from wreg
  2540  001408  0100               	movlb	0	; () banked
  2541  00140A  6FBE               	movwf	scale@scl& (0+255),b
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;doprnt.c: 428: if(scl < 0) {
  2545  00140C  0100               	movlb	0	; () banked
  2546  00140E  AFBE               	btfss	scale@scl& (0+255),7,b
  2547  001410  D11C               	goto	l4650
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;doprnt.c: 429: scl = -scl;
  2551  001412  0100               	movlb	0	; () banked
  2552  001414  6DBE               	negf	scale@scl& (0+255),b
  2553                           
  2554                           ;doprnt.c: 430: if(scl>=110)
  2555  001416  0100               	movlb	0	; () banked
  2556  001418  51BE               	movf	scale@scl& (0+255),w,b
  2557  00141A  0A80               	xorlw	128
  2558  00141C  0F12               	addlw	-238
  2559  00141E  A0D8               	btfss	status,0,c
  2560  001420  D09D               	goto	l4640
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2564  001422  0E00               	movlw	0
  2565  001424  6E28               	movwf	___wmul@multiplicand+1,c
  2566  001426  0E03               	movlw	3
  2567  001428  6E27               	movwf	___wmul@multiplicand,c
  2568  00142A  0E00               	movlw	0
  2569  00142C  6E20               	movwf	___awdiv@divisor+1,c
  2570  00142E  0E0A               	movlw	10
  2571  001430  6E1F               	movwf	___awdiv@divisor,c
  2572  001432  0E00               	movlw	0
  2573  001434  6E1A               	movwf	___awmod@divisor+1,c
  2574  001436  0E64               	movlw	100
  2575  001438  6E19               	movwf	___awmod@divisor,c
  2576  00143A  0100               	movlb	0	; () banked
  2577  00143C  51BE               	movf	scale@scl& (0+255),w,b
  2578  00143E  6E17               	movwf	___awmod@dividend,c
  2579  001440  6A18               	clrf	___awmod@dividend+1,c
  2580  001442  BE17               	btfsc	___awmod@dividend,7,c
  2581  001444  0618               	decf	___awmod@dividend+1,f,c
  2582  001446  EC97  F018         	call	___awmod	;wreg free
  2583  00144A  C017  F01D         	movff	?___awmod,___awdiv@dividend
  2584  00144E  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  2585  001452  ECFC  F017         	call	___awdiv	;wreg free
  2586  001456  0E09               	movlw	9
  2587  001458  241D               	addwf	?___awdiv,w,c
  2588  00145A  6E25               	movwf	___wmul@multiplier,c
  2589  00145C  0E00               	movlw	0
  2590  00145E  201E               	addwfc	?___awdiv+1,w,c
  2591  001460  6E26               	movwf	___wmul@multiplier+1,c
  2592  001462  EC57  F01B         	call	___wmul	;wreg free
  2593  001466  0E29               	movlw	low __npowers_
  2594  001468  2425               	addwf	?___wmul,w,c
  2595  00146A  6EF6               	movwf	tblptrl,c
  2596  00146C  0E06               	movlw	high __npowers_
  2597  00146E  2026               	addwfc	?___wmul+1,w,c
  2598  001470  6EF7               	movwf	tblptrh,c
  2599  001472                     	if	0	;There are less than 3 active tblptr bytes
  2600  001472                     	endif
  2601  001472  0009               	tblrd		*+
  2602  001474  0100               	movlb	0	; () banked
  2603  001476  CFF5 F0AF          	movff	tablat,___ftmul@f2
  2604  00147A  0009               	tblrd		*+
  2605  00147C  0100               	movlb	0	; () banked
  2606  00147E  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  2607  001482  000A               	tblrd		*-
  2608  001484  0100               	movlb	0	; () banked
  2609  001486  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  2610  00148A  0E00               	movlw	0
  2611  00148C  6E20               	movwf	___awdiv@divisor+1,c
  2612  00148E  0E64               	movlw	100
  2613  001490  6E1F               	movwf	___awdiv@divisor,c
  2614  001492  0100               	movlb	0	; () banked
  2615  001494  51BE               	movf	scale@scl& (0+255),w,b
  2616  001496  6E1D               	movwf	___awdiv@dividend,c
  2617  001498  6A1E               	clrf	___awdiv@dividend+1,c
  2618  00149A  BE1D               	btfsc	___awdiv@dividend,7,c
  2619  00149C  061E               	decf	___awdiv@dividend+1,f,c
  2620  00149E  ECFC  F017         	call	___awdiv	;wreg free
  2621  0014A2  0E12               	movlw	18
  2622  0014A4  241D               	addwf	?___awdiv,w,c
  2623  0014A6  6E25               	movwf	___wmul@multiplier,c
  2624  0014A8  0E00               	movlw	0
  2625  0014AA  201E               	addwfc	?___awdiv+1,w,c
  2626  0014AC  6E26               	movwf	___wmul@multiplier+1,c
  2627  0014AE  0E00               	movlw	0
  2628  0014B0  6E28               	movwf	___wmul@multiplicand+1,c
  2629  0014B2  0E03               	movlw	3
  2630  0014B4  6E27               	movwf	___wmul@multiplicand,c
  2631  0014B6  EC57  F01B         	call	___wmul	;wreg free
  2632  0014BA  0E29               	movlw	low __npowers_
  2633  0014BC  2425               	addwf	?___wmul,w,c
  2634  0014BE  6EF6               	movwf	tblptrl,c
  2635  0014C0  0E06               	movlw	high __npowers_
  2636  0014C2  2026               	addwfc	?___wmul+1,w,c
  2637  0014C4  6EF7               	movwf	tblptrh,c
  2638  0014C6                     	if	0	;There are less than 3 active tblptr bytes
  2639  0014C6                     	endif
  2640  0014C6  0009               	tblrd		*+
  2641  0014C8  0100               	movlb	0	; () banked
  2642  0014CA  CFF5 F0AC          	movff	tablat,___ftmul@f1
  2643  0014CE  0009               	tblrd		*+
  2644  0014D0  0100               	movlb	0	; () banked
  2645  0014D2  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  2646  0014D6  000A               	tblrd		*-
  2647  0014D8  0100               	movlb	0	; () banked
  2648  0014DA  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  2649  0014DE  ECBD  F012         	call	___ftmul	;wreg free
  2650  0014E2  C0AC  F0BB         	movff	?___ftmul,_scale$1686
  2651  0014E6  C0AD  F0BC         	movff	?___ftmul+1,_scale$1686+1
  2652  0014EA  C0AE  F0BD         	movff	?___ftmul+2,_scale$1686+2
  2653                           
  2654                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2655  0014EE  C0BB  F0AC         	movff	_scale$1686,___ftmul@f1
  2656  0014F2  C0BC  F0AD         	movff	_scale$1686+1,___ftmul@f1+1
  2657  0014F6  C0BD  F0AE         	movff	_scale$1686+2,___ftmul@f1+2
  2658  0014FA  0E00               	movlw	0
  2659  0014FC  6E28               	movwf	___wmul@multiplicand+1,c
  2660  0014FE  0E03               	movlw	3
  2661  001500  6E27               	movwf	___wmul@multiplicand,c
  2662  001502  0E00               	movlw	0
  2663  001504  6E1A               	movwf	___awmod@divisor+1,c
  2664  001506  0E0A               	movlw	10
  2665  001508  6E19               	movwf	___awmod@divisor,c
  2666  00150A  0100               	movlb	0	; () banked
  2667  00150C  51BE               	movf	scale@scl& (0+255),w,b
  2668  00150E  6E17               	movwf	___awmod@dividend,c
  2669  001510  6A18               	clrf	___awmod@dividend+1,c
  2670  001512  BE17               	btfsc	___awmod@dividend,7,c
  2671  001514  0618               	decf	___awmod@dividend+1,f,c
  2672  001516  EC97  F018         	call	___awmod	;wreg free
  2673  00151A  C017  F025         	movff	?___awmod,___wmul@multiplier
  2674  00151E  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  2675  001522  EC57  F01B         	call	___wmul	;wreg free
  2676  001526  0E29               	movlw	low __npowers_
  2677  001528  2425               	addwf	?___wmul,w,c
  2678  00152A  6EF6               	movwf	tblptrl,c
  2679  00152C  0E06               	movlw	high __npowers_
  2680  00152E  2026               	addwfc	?___wmul+1,w,c
  2681  001530  6EF7               	movwf	tblptrh,c
  2682  001532                     	if	0	;There are less than 3 active tblptr bytes
  2683  001532                     	endif
  2684  001532  0009               	tblrd		*+
  2685  001534  0100               	movlb	0	; () banked
  2686  001536  CFF5 F0AF          	movff	tablat,___ftmul@f2
  2687  00153A  0009               	tblrd		*+
  2688  00153C  0100               	movlb	0	; () banked
  2689  00153E  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  2690  001542  000A               	tblrd		*-
  2691  001544  0100               	movlb	0	; () banked
  2692  001546  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  2693  00154A  ECBD  F012         	call	___ftmul	;wreg free
  2694  00154E  C0AC  F0B8         	movff	?___ftmul,?_scale
  2695  001552  C0AD  F0B9         	movff	?___ftmul+1,?_scale+1
  2696  001556  C0AE  F0BA         	movff	?___ftmul+2,?_scale+2
  2697  00155A  0012               	return	
  2698  00155C                     l4640:
  2699                           
  2700                           ;doprnt.c: 432: else if(scl > 10)
  2701  00155C  0100               	movlb	0	; () banked
  2702  00155E  51BE               	movf	scale@scl& (0+255),w,b
  2703  001560  0A80               	xorlw	128
  2704  001562  0F75               	addlw	-139
  2705  001564  A0D8               	btfss	status,0,c
  2706  001566  D05B               	goto	l4646
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2710  001568  0E00               	movlw	0
  2711  00156A  6E20               	movwf	___awdiv@divisor+1,c
  2712  00156C  0E0A               	movlw	10
  2713  00156E  6E1F               	movwf	___awdiv@divisor,c
  2714  001570  0100               	movlb	0	; () banked
  2715  001572  51BE               	movf	scale@scl& (0+255),w,b
  2716  001574  6E1D               	movwf	___awdiv@dividend,c
  2717  001576  6A1E               	clrf	___awdiv@dividend+1,c
  2718  001578  BE1D               	btfsc	___awdiv@dividend,7,c
  2719  00157A  061E               	decf	___awdiv@dividend+1,f,c
  2720  00157C  ECFC  F017         	call	___awdiv	;wreg free
  2721  001580  0E09               	movlw	9
  2722  001582  241D               	addwf	?___awdiv,w,c
  2723  001584  6E25               	movwf	___wmul@multiplier,c
  2724  001586  0E00               	movlw	0
  2725  001588  201E               	addwfc	?___awdiv+1,w,c
  2726  00158A  6E26               	movwf	___wmul@multiplier+1,c
  2727  00158C  0E00               	movlw	0
  2728  00158E  6E28               	movwf	___wmul@multiplicand+1,c
  2729  001590  0E03               	movlw	3
  2730  001592  6E27               	movwf	___wmul@multiplicand,c
  2731  001594  EC57  F01B         	call	___wmul	;wreg free
  2732  001598  0E29               	movlw	low __npowers_
  2733  00159A  2425               	addwf	?___wmul,w,c
  2734  00159C  6EF6               	movwf	tblptrl,c
  2735  00159E  0E06               	movlw	high __npowers_
  2736  0015A0  2026               	addwfc	?___wmul+1,w,c
  2737  0015A2  6EF7               	movwf	tblptrh,c
  2738  0015A4                     	if	0	;There are less than 3 active tblptr bytes
  2739  0015A4                     	endif
  2740  0015A4  0009               	tblrd		*+
  2741  0015A6  0100               	movlb	0	; () banked
  2742  0015A8  CFF5 F0AC          	movff	tablat,___ftmul@f1
  2743  0015AC  0009               	tblrd		*+
  2744  0015AE  0100               	movlb	0	; () banked
  2745  0015B0  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  2746  0015B4  000A               	tblrd		*-
  2747  0015B6  0100               	movlb	0	; () banked
  2748  0015B8  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  2749  0015BC  0E00               	movlw	0
  2750  0015BE  6E28               	movwf	___wmul@multiplicand+1,c
  2751  0015C0  0E03               	movlw	3
  2752  0015C2  6E27               	movwf	___wmul@multiplicand,c
  2753  0015C4  0E00               	movlw	0
  2754  0015C6  6E1A               	movwf	___awmod@divisor+1,c
  2755  0015C8  0E0A               	movlw	10
  2756  0015CA  6E19               	movwf	___awmod@divisor,c
  2757  0015CC  0100               	movlb	0	; () banked
  2758  0015CE  51BE               	movf	scale@scl& (0+255),w,b
  2759  0015D0  6E17               	movwf	___awmod@dividend,c
  2760  0015D2  6A18               	clrf	___awmod@dividend+1,c
  2761  0015D4  BE17               	btfsc	___awmod@dividend,7,c
  2762  0015D6  0618               	decf	___awmod@dividend+1,f,c
  2763  0015D8  EC97  F018         	call	___awmod	;wreg free
  2764  0015DC  C017  F025         	movff	?___awmod,___wmul@multiplier
  2765  0015E0  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  2766  0015E4  EC57  F01B         	call	___wmul	;wreg free
  2767  0015E8  0E29               	movlw	low __npowers_
  2768  0015EA  2425               	addwf	?___wmul,w,c
  2769  0015EC  6EF6               	movwf	tblptrl,c
  2770  0015EE  0E06               	movlw	high __npowers_
  2771  0015F0  2026               	addwfc	?___wmul+1,w,c
  2772  0015F2  6EF7               	movwf	tblptrh,c
  2773  0015F4                     	if	0	;There are less than 3 active tblptr bytes
  2774  0015F4                     	endif
  2775  0015F4  0009               	tblrd		*+
  2776  0015F6  0100               	movlb	0	; () banked
  2777  0015F8  CFF5 F0AF          	movff	tablat,___ftmul@f2
  2778  0015FC  0009               	tblrd		*+
  2779  0015FE  0100               	movlb	0	; () banked
  2780  001600  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  2781  001604  000A               	tblrd		*-
  2782  001606  0100               	movlb	0	; () banked
  2783  001608  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  2784  00160C  ECBD  F012         	call	___ftmul	;wreg free
  2785  001610  C0AC  F0B8         	movff	?___ftmul,?_scale
  2786  001614  C0AD  F0B9         	movff	?___ftmul+1,?_scale+1
  2787  001618  C0AE  F0BA         	movff	?___ftmul+2,?_scale+2
  2788  00161C  0012               	return	
  2789  00161E                     l4646:
  2790                           
  2791                           ;doprnt.c: 434: return _npowers_[scl];
  2792  00161E  0100               	movlb	0	; () banked
  2793  001620  51BE               	movf	scale@scl& (0+255),w,b
  2794  001622  0D03               	mullw	3
  2795  001624  0E29               	movlw	low __npowers_
  2796  001626  24F3               	addwf	prodl,w,c
  2797  001628  6EF6               	movwf	tblptrl,c
  2798  00162A  0E06               	movlw	high __npowers_
  2799  00162C  20F4               	addwfc	prodh,w,c
  2800  00162E  6EF7               	movwf	tblptrh,c
  2801  001630                     	if	0	;There are less than 3 active tblptr bytes
  2802  001630                     	endif
  2803  001630  0009               	tblrd		*+
  2804  001632  0100               	movlb	0	; () banked
  2805  001634  CFF5 F0B8          	movff	tablat,?_scale
  2806  001638  0009               	tblrd		*+
  2807  00163A  0100               	movlb	0	; () banked
  2808  00163C  CFF5 F0B9          	movff	tablat,?_scale+1
  2809  001640  000A               	tblrd		*-
  2810  001642  0100               	movlb	0	; () banked
  2811  001644  CFF5 F0BA          	movff	tablat,?_scale+2
  2812  001648  0012               	return	
  2813  00164A                     l4650:
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;doprnt.c: 435: }
  2817                           ;doprnt.c: 436: if(scl>=110)
  2818  00164A  0100               	movlb	0	; () banked
  2819  00164C  51BE               	movf	scale@scl& (0+255),w,b
  2820  00164E  0A80               	xorlw	128
  2821  001650  0F12               	addlw	-238
  2822  001652  A0D8               	btfss	status,0,c
  2823  001654  D09D               	goto	l4658
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2827  001656  0E00               	movlw	0
  2828  001658  6E28               	movwf	___wmul@multiplicand+1,c
  2829  00165A  0E03               	movlw	3
  2830  00165C  6E27               	movwf	___wmul@multiplicand,c
  2831  00165E  0E00               	movlw	0
  2832  001660  6E20               	movwf	___awdiv@divisor+1,c
  2833  001662  0E0A               	movlw	10
  2834  001664  6E1F               	movwf	___awdiv@divisor,c
  2835  001666  0E00               	movlw	0
  2836  001668  6E1A               	movwf	___awmod@divisor+1,c
  2837  00166A  0E64               	movlw	100
  2838  00166C  6E19               	movwf	___awmod@divisor,c
  2839  00166E  0100               	movlb	0	; () banked
  2840  001670  51BE               	movf	scale@scl& (0+255),w,b
  2841  001672  6E17               	movwf	___awmod@dividend,c
  2842  001674  6A18               	clrf	___awmod@dividend+1,c
  2843  001676  BE17               	btfsc	___awmod@dividend,7,c
  2844  001678  0618               	decf	___awmod@dividend+1,f,c
  2845  00167A  EC97  F018         	call	___awmod	;wreg free
  2846  00167E  C017  F01D         	movff	?___awmod,___awdiv@dividend
  2847  001682  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  2848  001686  ECFC  F017         	call	___awdiv	;wreg free
  2849  00168A  0E09               	movlw	9
  2850  00168C  241D               	addwf	?___awdiv,w,c
  2851  00168E  6E25               	movwf	___wmul@multiplier,c
  2852  001690  0E00               	movlw	0
  2853  001692  201E               	addwfc	?___awdiv+1,w,c
  2854  001694  6E26               	movwf	___wmul@multiplier+1,c
  2855  001696  EC57  F01B         	call	___wmul	;wreg free
  2856  00169A  0E50               	movlw	low __powers_
  2857  00169C  2425               	addwf	?___wmul,w,c
  2858  00169E  6EF6               	movwf	tblptrl,c
  2859  0016A0  0E06               	movlw	high __powers_
  2860  0016A2  2026               	addwfc	?___wmul+1,w,c
  2861  0016A4  6EF7               	movwf	tblptrh,c
  2862  0016A6                     	if	0	;There are less than 3 active tblptr bytes
  2863  0016A6                     	endif
  2864  0016A6  0009               	tblrd		*+
  2865  0016A8  0100               	movlb	0	; () banked
  2866  0016AA  CFF5 F0AF          	movff	tablat,___ftmul@f2
  2867  0016AE  0009               	tblrd		*+
  2868  0016B0  0100               	movlb	0	; () banked
  2869  0016B2  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  2870  0016B6  000A               	tblrd		*-
  2871  0016B8  0100               	movlb	0	; () banked
  2872  0016BA  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  2873  0016BE  0E00               	movlw	0
  2874  0016C0  6E20               	movwf	___awdiv@divisor+1,c
  2875  0016C2  0E64               	movlw	100
  2876  0016C4  6E1F               	movwf	___awdiv@divisor,c
  2877  0016C6  0100               	movlb	0	; () banked
  2878  0016C8  51BE               	movf	scale@scl& (0+255),w,b
  2879  0016CA  6E1D               	movwf	___awdiv@dividend,c
  2880  0016CC  6A1E               	clrf	___awdiv@dividend+1,c
  2881  0016CE  BE1D               	btfsc	___awdiv@dividend,7,c
  2882  0016D0  061E               	decf	___awdiv@dividend+1,f,c
  2883  0016D2  ECFC  F017         	call	___awdiv	;wreg free
  2884  0016D6  0E12               	movlw	18
  2885  0016D8  241D               	addwf	?___awdiv,w,c
  2886  0016DA  6E25               	movwf	___wmul@multiplier,c
  2887  0016DC  0E00               	movlw	0
  2888  0016DE  201E               	addwfc	?___awdiv+1,w,c
  2889  0016E0  6E26               	movwf	___wmul@multiplier+1,c
  2890  0016E2  0E00               	movlw	0
  2891  0016E4  6E28               	movwf	___wmul@multiplicand+1,c
  2892  0016E6  0E03               	movlw	3
  2893  0016E8  6E27               	movwf	___wmul@multiplicand,c
  2894  0016EA  EC57  F01B         	call	___wmul	;wreg free
  2895  0016EE  0E50               	movlw	low __powers_
  2896  0016F0  2425               	addwf	?___wmul,w,c
  2897  0016F2  6EF6               	movwf	tblptrl,c
  2898  0016F4  0E06               	movlw	high __powers_
  2899  0016F6  2026               	addwfc	?___wmul+1,w,c
  2900  0016F8  6EF7               	movwf	tblptrh,c
  2901  0016FA                     	if	0	;There are less than 3 active tblptr bytes
  2902  0016FA                     	endif
  2903  0016FA  0009               	tblrd		*+
  2904  0016FC  0100               	movlb	0	; () banked
  2905  0016FE  CFF5 F0AC          	movff	tablat,___ftmul@f1
  2906  001702  0009               	tblrd		*+
  2907  001704  0100               	movlb	0	; () banked
  2908  001706  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  2909  00170A  000A               	tblrd		*-
  2910  00170C  0100               	movlb	0	; () banked
  2911  00170E  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  2912  001712  ECBD  F012         	call	___ftmul	;wreg free
  2913  001716  C0AC  F0BB         	movff	?___ftmul,_scale$1686
  2914  00171A  C0AD  F0BC         	movff	?___ftmul+1,_scale$1686+1
  2915  00171E  C0AE  F0BD         	movff	?___ftmul+2,_scale$1686+2
  2916                           
  2917                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2918  001722  C0BB  F0AC         	movff	_scale$1686,___ftmul@f1
  2919  001726  C0BC  F0AD         	movff	_scale$1686+1,___ftmul@f1+1
  2920  00172A  C0BD  F0AE         	movff	_scale$1686+2,___ftmul@f1+2
  2921  00172E  0E00               	movlw	0
  2922  001730  6E28               	movwf	___wmul@multiplicand+1,c
  2923  001732  0E03               	movlw	3
  2924  001734  6E27               	movwf	___wmul@multiplicand,c
  2925  001736  0E00               	movlw	0
  2926  001738  6E1A               	movwf	___awmod@divisor+1,c
  2927  00173A  0E0A               	movlw	10
  2928  00173C  6E19               	movwf	___awmod@divisor,c
  2929  00173E  0100               	movlb	0	; () banked
  2930  001740  51BE               	movf	scale@scl& (0+255),w,b
  2931  001742  6E17               	movwf	___awmod@dividend,c
  2932  001744  6A18               	clrf	___awmod@dividend+1,c
  2933  001746  BE17               	btfsc	___awmod@dividend,7,c
  2934  001748  0618               	decf	___awmod@dividend+1,f,c
  2935  00174A  EC97  F018         	call	___awmod	;wreg free
  2936  00174E  C017  F025         	movff	?___awmod,___wmul@multiplier
  2937  001752  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  2938  001756  EC57  F01B         	call	___wmul	;wreg free
  2939  00175A  0E50               	movlw	low __powers_
  2940  00175C  2425               	addwf	?___wmul,w,c
  2941  00175E  6EF6               	movwf	tblptrl,c
  2942  001760  0E06               	movlw	high __powers_
  2943  001762  2026               	addwfc	?___wmul+1,w,c
  2944  001764  6EF7               	movwf	tblptrh,c
  2945  001766                     	if	0	;There are less than 3 active tblptr bytes
  2946  001766                     	endif
  2947  001766  0009               	tblrd		*+
  2948  001768  0100               	movlb	0	; () banked
  2949  00176A  CFF5 F0AF          	movff	tablat,___ftmul@f2
  2950  00176E  0009               	tblrd		*+
  2951  001770  0100               	movlb	0	; () banked
  2952  001772  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  2953  001776  000A               	tblrd		*-
  2954  001778  0100               	movlb	0	; () banked
  2955  00177A  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  2956  00177E  ECBD  F012         	call	___ftmul	;wreg free
  2957  001782  C0AC  F0B8         	movff	?___ftmul,?_scale
  2958  001786  C0AD  F0B9         	movff	?___ftmul+1,?_scale+1
  2959  00178A  C0AE  F0BA         	movff	?___ftmul+2,?_scale+2
  2960  00178E  0012               	return	
  2961  001790                     l4658:
  2962                           
  2963                           ;doprnt.c: 438: else if(scl > 10)
  2964  001790  0100               	movlb	0	; () banked
  2965  001792  51BE               	movf	scale@scl& (0+255),w,b
  2966  001794  0A80               	xorlw	128
  2967  001796  0F75               	addlw	-139
  2968  001798  A0D8               	btfss	status,0,c
  2969  00179A  D05B               	goto	l4664
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2973  00179C  0E00               	movlw	0
  2974  00179E  6E20               	movwf	___awdiv@divisor+1,c
  2975  0017A0  0E0A               	movlw	10
  2976  0017A2  6E1F               	movwf	___awdiv@divisor,c
  2977  0017A4  0100               	movlb	0	; () banked
  2978  0017A6  51BE               	movf	scale@scl& (0+255),w,b
  2979  0017A8  6E1D               	movwf	___awdiv@dividend,c
  2980  0017AA  6A1E               	clrf	___awdiv@dividend+1,c
  2981  0017AC  BE1D               	btfsc	___awdiv@dividend,7,c
  2982  0017AE  061E               	decf	___awdiv@dividend+1,f,c
  2983  0017B0  ECFC  F017         	call	___awdiv	;wreg free
  2984  0017B4  0E09               	movlw	9
  2985  0017B6  241D               	addwf	?___awdiv,w,c
  2986  0017B8  6E25               	movwf	___wmul@multiplier,c
  2987  0017BA  0E00               	movlw	0
  2988  0017BC  201E               	addwfc	?___awdiv+1,w,c
  2989  0017BE  6E26               	movwf	___wmul@multiplier+1,c
  2990  0017C0  0E00               	movlw	0
  2991  0017C2  6E28               	movwf	___wmul@multiplicand+1,c
  2992  0017C4  0E03               	movlw	3
  2993  0017C6  6E27               	movwf	___wmul@multiplicand,c
  2994  0017C8  EC57  F01B         	call	___wmul	;wreg free
  2995  0017CC  0E50               	movlw	low __powers_
  2996  0017CE  2425               	addwf	?___wmul,w,c
  2997  0017D0  6EF6               	movwf	tblptrl,c
  2998  0017D2  0E06               	movlw	high __powers_
  2999  0017D4  2026               	addwfc	?___wmul+1,w,c
  3000  0017D6  6EF7               	movwf	tblptrh,c
  3001  0017D8                     	if	0	;There are less than 3 active tblptr bytes
  3002  0017D8                     	endif
  3003  0017D8  0009               	tblrd		*+
  3004  0017DA  0100               	movlb	0	; () banked
  3005  0017DC  CFF5 F0AC          	movff	tablat,___ftmul@f1
  3006  0017E0  0009               	tblrd		*+
  3007  0017E2  0100               	movlb	0	; () banked
  3008  0017E4  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  3009  0017E8  000A               	tblrd		*-
  3010  0017EA  0100               	movlb	0	; () banked
  3011  0017EC  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  3012  0017F0  0E00               	movlw	0
  3013  0017F2  6E28               	movwf	___wmul@multiplicand+1,c
  3014  0017F4  0E03               	movlw	3
  3015  0017F6  6E27               	movwf	___wmul@multiplicand,c
  3016  0017F8  0E00               	movlw	0
  3017  0017FA  6E1A               	movwf	___awmod@divisor+1,c
  3018  0017FC  0E0A               	movlw	10
  3019  0017FE  6E19               	movwf	___awmod@divisor,c
  3020  001800  0100               	movlb	0	; () banked
  3021  001802  51BE               	movf	scale@scl& (0+255),w,b
  3022  001804  6E17               	movwf	___awmod@dividend,c
  3023  001806  6A18               	clrf	___awmod@dividend+1,c
  3024  001808  BE17               	btfsc	___awmod@dividend,7,c
  3025  00180A  0618               	decf	___awmod@dividend+1,f,c
  3026  00180C  EC97  F018         	call	___awmod	;wreg free
  3027  001810  C017  F025         	movff	?___awmod,___wmul@multiplier
  3028  001814  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3029  001818  EC57  F01B         	call	___wmul	;wreg free
  3030  00181C  0E50               	movlw	low __powers_
  3031  00181E  2425               	addwf	?___wmul,w,c
  3032  001820  6EF6               	movwf	tblptrl,c
  3033  001822  0E06               	movlw	high __powers_
  3034  001824  2026               	addwfc	?___wmul+1,w,c
  3035  001826  6EF7               	movwf	tblptrh,c
  3036  001828                     	if	0	;There are less than 3 active tblptr bytes
  3037  001828                     	endif
  3038  001828  0009               	tblrd		*+
  3039  00182A  0100               	movlb	0	; () banked
  3040  00182C  CFF5 F0AF          	movff	tablat,___ftmul@f2
  3041  001830  0009               	tblrd		*+
  3042  001832  0100               	movlb	0	; () banked
  3043  001834  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  3044  001838  000A               	tblrd		*-
  3045  00183A  0100               	movlb	0	; () banked
  3046  00183C  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  3047  001840  ECBD  F012         	call	___ftmul	;wreg free
  3048  001844  C0AC  F0B8         	movff	?___ftmul,?_scale
  3049  001848  C0AD  F0B9         	movff	?___ftmul+1,?_scale+1
  3050  00184C  C0AE  F0BA         	movff	?___ftmul+2,?_scale+2
  3051  001850  0012               	return	
  3052  001852                     l4664:
  3053                           
  3054                           ;doprnt.c: 440: return _powers_[scl];
  3055  001852  0100               	movlb	0	; () banked
  3056  001854  51BE               	movf	scale@scl& (0+255),w,b
  3057  001856  0D03               	mullw	3
  3058  001858  0E50               	movlw	low __powers_
  3059  00185A  24F3               	addwf	prodl,w,c
  3060  00185C  6EF6               	movwf	tblptrl,c
  3061  00185E  0E06               	movlw	high __powers_
  3062  001860  20F4               	addwfc	prodh,w,c
  3063  001862  6EF7               	movwf	tblptrh,c
  3064  001864                     	if	0	;There are less than 3 active tblptr bytes
  3065  001864                     	endif
  3066  001864  0009               	tblrd		*+
  3067  001866  0100               	movlb	0	; () banked
  3068  001868  CFF5 F0B8          	movff	tablat,?_scale
  3069  00186C  0009               	tblrd		*+
  3070  00186E  0100               	movlb	0	; () banked
  3071  001870  CFF5 F0B9          	movff	tablat,?_scale+1
  3072  001874  000A               	tblrd		*-
  3073  001876  0100               	movlb	0	; () banked
  3074  001878  CFF5 F0BA          	movff	tablat,?_scale+2
  3075  00187C  0012               	return	
  3076  00187E                     __end_of_scale:
  3077                           	opt stack 0
  3078                           tblptru	equ	0xFF8
  3079                           tblptrh	equ	0xFF7
  3080                           tblptrl	equ	0xFF6
  3081                           tablat	equ	0xFF5
  3082                           prodh	equ	0xFF4
  3083                           prodl	equ	0xFF3
  3084                           intcon	equ	0xFF2
  3085                           postinc0	equ	0xFEE
  3086                           wreg	equ	0xFE8
  3087                           postinc2	equ	0xFDE
  3088                           postdec2	equ	0xFDD
  3089                           fsr2h	equ	0xFDA
  3090                           fsr2l	equ	0xFD9
  3091                           status	equ	0xFD8
  3092                           
  3093 ;; *************** function _putch *****************
  3094 ;; Defined at:
  3095 ;;		line 168 in file "mcc_generated_files/eusart1.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  txData          1    wreg     unsigned char 
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;  txData          1   23[COMRAM] unsigned char 
  3100 ;; Return value:  Size  Location     Type
  3101 ;;		None               void
  3102 ;; Registers used:
  3103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3109 ;;      Params:         0       0       0       0       0       0       0
  3110 ;;      Locals:         1       0       0       0       0       0       0
  3111 ;;      Temps:          0       0       0       0       0       0       0
  3112 ;;      Totals:         1       0       0       0       0       0       0
  3113 ;;Total ram usage:        1 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; Hardware stack levels required when called:    5
  3116 ;; This function calls:
  3117 ;;		_EUSART1_Write
  3118 ;; This function is called by:
  3119 ;;		_printf
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           	psect	text3
  3124  0037A0                     __ptext3:
  3125                           	opt stack 0
  3126  0037A0                     _putch:
  3127                           	opt stack 24
  3128                           
  3129                           ;incstack = 0
  3130                           ;putch@txData stored from wreg
  3131  0037A0  6E18               	movwf	putch@txData,c
  3132                           
  3133                           ;eusart1.c: 170: EUSART1_Write(txData);
  3134  0037A2  5018               	movf	putch@txData,w,c
  3135  0037A4  ECB0  F01A         	call	_EUSART1_Write
  3136  0037A8  0012               	return	
  3137  0037AA                     __end_of_putch:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodh	equ	0xFF4
  3144                           prodl	equ	0xFF3
  3145                           intcon	equ	0xFF2
  3146                           postinc0	equ	0xFEE
  3147                           wreg	equ	0xFE8
  3148                           postinc2	equ	0xFDE
  3149                           postdec2	equ	0xFDD
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function _EUSART1_Write *****************
  3155 ;; Defined at:
  3156 ;;		line 140 in file "mcc_generated_files/eusart1.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  txData          1    wreg     unsigned char 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  txData          1   22[COMRAM] unsigned char 
  3161 ;; Return value:  Size  Location     Type
  3162 ;;		None               void
  3163 ;; Registers used:
  3164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3170 ;;      Params:         0       0       0       0       0       0       0
  3171 ;;      Locals:         1       0       0       0       0       0       0
  3172 ;;      Temps:          0       0       0       0       0       0       0
  3173 ;;      Totals:         1       0       0       0       0       0       0
  3174 ;;Total ram usage:        1 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    4
  3177 ;; This function calls:
  3178 ;;		Nothing
  3179 ;; This function is called by:
  3180 ;;		_putch
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           	psect	text4
  3185  003560                     __ptext4:
  3186                           	opt stack 0
  3187  003560                     _EUSART1_Write:
  3188                           	opt stack 24
  3189                           
  3190                           ;incstack = 0
  3191                           ;EUSART1_Write@txData stored from wreg
  3192  003560  6E17               	movwf	EUSART1_Write@txData,c
  3193  003562                     l4388:
  3194  003562  5049               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  3195  003564  B4D8               	btfsc	status,2,c
  3196  003566  D7FD               	goto	l4388
  3197                           
  3198                           ;eusart1.c: 144: }
  3199                           ;eusart1.c: 146: if(0 == PIE1bits.TX1IE)
  3200  003568  B89D               	btfsc	3997,4,c	;volatile
  3201  00356A  D003               	goto	l122
  3202                           
  3203                           ;eusart1.c: 147: {
  3204                           ;eusart1.c: 148: TX1REG = txData;
  3205  00356C  C017  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  3206                           
  3207                           ;eusart1.c: 149: }
  3208  003570  D012               	goto	l4402
  3209  003572                     l122:
  3210                           
  3211                           ;eusart1.c: 150: else
  3212                           ;eusart1.c: 151: {
  3213                           ;eusart1.c: 152: PIE1bits.TX1IE = 0;
  3214  003572  989D               	bcf	3997,4,c	;volatile
  3215                           
  3216                           ;eusart1.c: 153: eusart1TxBuffer[eusart1TxHead++] = txData;
  3217  003574  5045               	movf	_eusart1TxHead,w,c
  3218  003576  0D01               	mullw	1
  3219  003578  0E34               	movlw	low _eusart1TxBuffer
  3220  00357A  24F3               	addwf	prodl,w,c
  3221  00357C  6ED9               	movwf	fsr2l,c
  3222  00357E  0E00               	movlw	high _eusart1TxBuffer
  3223  003580  20F4               	addwfc	prodh,w,c
  3224  003582  6EDA               	movwf	fsr2h,c
  3225  003584  C017  FFDF         	movff	EUSART1_Write@txData,indf2
  3226  003588  2A45               	incf	_eusart1TxHead,f,c
  3227                           
  3228                           ;eusart1.c: 154: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  3229  00358A  0E07               	movlw	7
  3230  00358C  6445               	cpfsgt	_eusart1TxHead,c
  3231  00358E  D002               	goto	l4400
  3232                           
  3233                           ;eusart1.c: 155: {
  3234                           ;eusart1.c: 156: eusart1TxHead = 0;
  3235  003590  0E00               	movlw	0
  3236  003592  6E45               	movwf	_eusart1TxHead,c
  3237  003594                     l4400:
  3238                           
  3239                           ;eusart1.c: 157: }
  3240                           ;eusart1.c: 158: eusart1TxBufferRemaining--;
  3241  003594  0649               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  3242  003596                     l4402:
  3243                           
  3244                           ;eusart1.c: 159: }
  3245                           ;eusart1.c: 160: PIE1bits.TX1IE = 1;
  3246  003596  889D               	bsf	3997,4,c	;volatile
  3247  003598  0012               	return	
  3248  00359A                     __end_of_EUSART1_Write:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           postinc0	equ	0xFEE
  3258                           wreg	equ	0xFE8
  3259                           indf2	equ	0xFDF
  3260                           postinc2	equ	0xFDE
  3261                           postdec2	equ	0xFDD
  3262                           fsr2h	equ	0xFDA
  3263                           fsr2l	equ	0xFD9
  3264                           status	equ	0xFD8
  3265                           
  3266 ;; *************** function _fround *****************
  3267 ;; Defined at:
  3268 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  prec            1    wreg     unsigned char 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  prec            1   21[BANK0 ] unsigned char 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  3   12[BANK0 ] unsigned char 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3282 ;;      Params:         0       3       0       0       0       0       0
  3283 ;;      Locals:         0       7       0       0       0       0       0
  3284 ;;      Temps:          0       0       0       0       0       0       0
  3285 ;;      Totals:         0      10       0       0       0       0       0
  3286 ;;Total ram usage:       10 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    6
  3289 ;; This function calls:
  3290 ;;		___awdiv
  3291 ;;		___awmod
  3292 ;;		___ftmul
  3293 ;;		___wmul
  3294 ;; This function is called by:
  3295 ;;		_printf
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text5
  3300  00187E                     __ptext5:
  3301                           	opt stack 0
  3302  00187E                     _fround:
  3303                           	opt stack 23
  3304                           
  3305                           ;incstack = 0
  3306                           ;fround@prec stored from wreg
  3307  00187E  0100               	movlb	0	; () banked
  3308  001880  6FC1               	movwf	fround@prec& (0+255),b
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;doprnt.c: 413: if(prec>=110)
  3312  001882  0E6D               	movlw	109
  3313  001884  0100               	movlb	0	; () banked
  3314  001886  65C1               	cpfsgt	fround@prec& (0+255),b
  3315  001888  D0AE               	goto	l4618
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3319  00188A  0E00               	movlw	0
  3320  00188C  6E28               	movwf	___wmul@multiplicand+1,c
  3321  00188E  0E03               	movlw	3
  3322  001890  6E27               	movwf	___wmul@multiplicand,c
  3323  001892  0E00               	movlw	0
  3324  001894  6E20               	movwf	___awdiv@divisor+1,c
  3325  001896  0E0A               	movlw	10
  3326  001898  6E1F               	movwf	___awdiv@divisor,c
  3327  00189A  0E00               	movlw	0
  3328  00189C  6E1A               	movwf	___awmod@divisor+1,c
  3329  00189E  0E64               	movlw	100
  3330  0018A0  6E19               	movwf	___awmod@divisor,c
  3331  0018A2  0100               	movlb	0	; () banked
  3332  0018A4  C0C1  F017         	movff	fround@prec,___awmod@dividend
  3333  0018A8  6A18               	clrf	___awmod@dividend+1,c
  3334  0018AA  EC97  F018         	call	___awmod	;wreg free
  3335  0018AE  C017  F01D         	movff	?___awmod,___awdiv@dividend
  3336  0018B2  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  3337  0018B6  ECFC  F017         	call	___awdiv	;wreg free
  3338  0018BA  0E09               	movlw	9
  3339  0018BC  241D               	addwf	?___awdiv,w,c
  3340  0018BE  6E25               	movwf	___wmul@multiplier,c
  3341  0018C0  0E00               	movlw	0
  3342  0018C2  201E               	addwfc	?___awdiv+1,w,c
  3343  0018C4  6E26               	movwf	___wmul@multiplier+1,c
  3344  0018C6  EC57  F01B         	call	___wmul	;wreg free
  3345  0018CA  0E29               	movlw	low __npowers_
  3346  0018CC  2425               	addwf	?___wmul,w,c
  3347  0018CE  6EF6               	movwf	tblptrl,c
  3348  0018D0  0E06               	movlw	high __npowers_
  3349  0018D2  2026               	addwfc	?___wmul+1,w,c
  3350  0018D4  6EF7               	movwf	tblptrh,c
  3351  0018D6                     	if	0	;There are less than 3 active tblptr bytes
  3352  0018D6                     	endif
  3353  0018D6  0009               	tblrd		*+
  3354  0018D8  0100               	movlb	0	; () banked
  3355  0018DA  CFF5 F0AF          	movff	tablat,___ftmul@f2
  3356  0018DE  0009               	tblrd		*+
  3357  0018E0  0100               	movlb	0	; () banked
  3358  0018E2  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  3359  0018E6  000A               	tblrd		*-
  3360  0018E8  0100               	movlb	0	; () banked
  3361  0018EA  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  3362  0018EE  0E00               	movlw	0
  3363  0018F0  6E20               	movwf	___awdiv@divisor+1,c
  3364  0018F2  0E64               	movlw	100
  3365  0018F4  6E1F               	movwf	___awdiv@divisor,c
  3366  0018F6  0100               	movlb	0	; () banked
  3367  0018F8  C0C1  F01D         	movff	fround@prec,___awdiv@dividend
  3368  0018FC  6A1E               	clrf	___awdiv@dividend+1,c
  3369  0018FE  ECFC  F017         	call	___awdiv	;wreg free
  3370  001902  0E12               	movlw	18
  3371  001904  241D               	addwf	?___awdiv,w,c
  3372  001906  6E25               	movwf	___wmul@multiplier,c
  3373  001908  0E00               	movlw	0
  3374  00190A  201E               	addwfc	?___awdiv+1,w,c
  3375  00190C  6E26               	movwf	___wmul@multiplier+1,c
  3376  00190E  0E00               	movlw	0
  3377  001910  6E28               	movwf	___wmul@multiplicand+1,c
  3378  001912  0E03               	movlw	3
  3379  001914  6E27               	movwf	___wmul@multiplicand,c
  3380  001916  EC57  F01B         	call	___wmul	;wreg free
  3381  00191A  0E29               	movlw	low __npowers_
  3382  00191C  2425               	addwf	?___wmul,w,c
  3383  00191E  6EF6               	movwf	tblptrl,c
  3384  001920  0E06               	movlw	high __npowers_
  3385  001922  2026               	addwfc	?___wmul+1,w,c
  3386  001924  6EF7               	movwf	tblptrh,c
  3387  001926                     	if	0	;There are less than 3 active tblptr bytes
  3388  001926                     	endif
  3389  001926  0009               	tblrd		*+
  3390  001928  0100               	movlb	0	; () banked
  3391  00192A  CFF5 F0AC          	movff	tablat,___ftmul@f1
  3392  00192E  0009               	tblrd		*+
  3393  001930  0100               	movlb	0	; () banked
  3394  001932  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  3395  001936  000A               	tblrd		*-
  3396  001938  0100               	movlb	0	; () banked
  3397  00193A  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  3398  00193E  ECBD  F012         	call	___ftmul	;wreg free
  3399  001942  C0AC  F0BE         	movff	?___ftmul,_fround$1684
  3400  001946  C0AD  F0BF         	movff	?___ftmul+1,_fround$1684+1
  3401  00194A  C0AE  F0C0         	movff	?___ftmul+2,_fround$1684+2
  3402                           
  3403                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3404  00194E  0E00               	movlw	0
  3405  001950  6E28               	movwf	___wmul@multiplicand+1,c
  3406  001952  0E03               	movlw	3
  3407  001954  6E27               	movwf	___wmul@multiplicand,c
  3408  001956  0E00               	movlw	0
  3409  001958  6E1A               	movwf	___awmod@divisor+1,c
  3410  00195A  0E0A               	movlw	10
  3411  00195C  6E19               	movwf	___awmod@divisor,c
  3412  00195E  0100               	movlb	0	; () banked
  3413  001960  C0C1  F017         	movff	fround@prec,___awmod@dividend
  3414  001964  6A18               	clrf	___awmod@dividend+1,c
  3415  001966  EC97  F018         	call	___awmod	;wreg free
  3416  00196A  C017  F025         	movff	?___awmod,___wmul@multiplier
  3417  00196E  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3418  001972  EC57  F01B         	call	___wmul	;wreg free
  3419  001976  0E29               	movlw	low __npowers_
  3420  001978  2425               	addwf	?___wmul,w,c
  3421  00197A  6EF6               	movwf	tblptrl,c
  3422  00197C  0E06               	movlw	high __npowers_
  3423  00197E  2026               	addwfc	?___wmul+1,w,c
  3424  001980  6EF7               	movwf	tblptrh,c
  3425  001982                     	if	0	;There are less than 3 active tblptr bytes
  3426  001982                     	endif
  3427  001982  0009               	tblrd		*+
  3428  001984  0100               	movlb	0	; () banked
  3429  001986  CFF5 F0AF          	movff	tablat,___ftmul@f2
  3430  00198A  0009               	tblrd		*+
  3431  00198C  0100               	movlb	0	; () banked
  3432  00198E  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  3433  001992  000A               	tblrd		*-
  3434  001994  0100               	movlb	0	; () banked
  3435  001996  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  3436  00199A  C0BE  F0AC         	movff	_fround$1684,___ftmul@f1
  3437  00199E  C0BF  F0AD         	movff	_fround$1684+1,___ftmul@f1+1
  3438  0019A2  C0C0  F0AE         	movff	_fround$1684+2,___ftmul@f1+2
  3439  0019A6  ECBD  F012         	call	___ftmul	;wreg free
  3440  0019AA  C0AC  F0BB         	movff	?___ftmul,_fround$1685
  3441  0019AE  C0AD  F0BC         	movff	?___ftmul+1,_fround$1685+1
  3442  0019B2  C0AE  F0BD         	movff	?___ftmul+2,_fround$1685+2
  3443                           
  3444                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3445  0019B6  C0BB  F0AC         	movff	_fround$1685,___ftmul@f1
  3446  0019BA  C0BC  F0AD         	movff	_fround$1685+1,___ftmul@f1+1
  3447  0019BE  C0BD  F0AE         	movff	_fround$1685+2,___ftmul@f1+2
  3448  0019C2  0E00               	movlw	0
  3449  0019C4  0100               	movlb	0	; () banked
  3450  0019C6  6FAF               	movwf	___ftmul@f2& (0+255),b
  3451  0019C8  0E00               	movlw	0
  3452  0019CA  0100               	movlb	0	; () banked
  3453  0019CC  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  3454  0019CE  0E3F               	movlw	63
  3455  0019D0  0100               	movlb	0	; () banked
  3456  0019D2  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  3457  0019D4  ECBD  F012         	call	___ftmul	;wreg free
  3458  0019D8  C0AC  F0B8         	movff	?___ftmul,?_fround
  3459  0019DC  C0AD  F0B9         	movff	?___ftmul+1,?_fround+1
  3460  0019E0  C0AE  F0BA         	movff	?___ftmul+2,?_fround+2
  3461  0019E4  0012               	return	
  3462  0019E6                     l4618:
  3463                           
  3464                           ;doprnt.c: 415: else if(prec > 10)
  3465  0019E6  0E0A               	movlw	10
  3466  0019E8  0100               	movlb	0	; () banked
  3467  0019EA  65C1               	cpfsgt	fround@prec& (0+255),b
  3468  0019EC  D06E               	goto	l4626
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3472  0019EE  0E00               	movlw	0
  3473  0019F0  6E28               	movwf	___wmul@multiplicand+1,c
  3474  0019F2  0E03               	movlw	3
  3475  0019F4  6E27               	movwf	___wmul@multiplicand,c
  3476  0019F6  0E00               	movlw	0
  3477  0019F8  6E1A               	movwf	___awmod@divisor+1,c
  3478  0019FA  0E0A               	movlw	10
  3479  0019FC  6E19               	movwf	___awmod@divisor,c
  3480  0019FE  0100               	movlb	0	; () banked
  3481  001A00  C0C1  F017         	movff	fround@prec,___awmod@dividend
  3482  001A04  6A18               	clrf	___awmod@dividend+1,c
  3483  001A06  EC97  F018         	call	___awmod	;wreg free
  3484  001A0A  C017  F025         	movff	?___awmod,___wmul@multiplier
  3485  001A0E  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3486  001A12  EC57  F01B         	call	___wmul	;wreg free
  3487  001A16  0E29               	movlw	low __npowers_
  3488  001A18  2425               	addwf	?___wmul,w,c
  3489  001A1A  6EF6               	movwf	tblptrl,c
  3490  001A1C  0E06               	movlw	high __npowers_
  3491  001A1E  2026               	addwfc	?___wmul+1,w,c
  3492  001A20  6EF7               	movwf	tblptrh,c
  3493  001A22                     	if	0	;There are less than 3 active tblptr bytes
  3494  001A22                     	endif
  3495  001A22  0009               	tblrd		*+
  3496  001A24  0100               	movlb	0	; () banked
  3497  001A26  CFF5 F0AF          	movff	tablat,___ftmul@f2
  3498  001A2A  0009               	tblrd		*+
  3499  001A2C  0100               	movlb	0	; () banked
  3500  001A2E  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  3501  001A32  000A               	tblrd		*-
  3502  001A34  0100               	movlb	0	; () banked
  3503  001A36  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  3504  001A3A  0E00               	movlw	0
  3505  001A3C  6E20               	movwf	___awdiv@divisor+1,c
  3506  001A3E  0E0A               	movlw	10
  3507  001A40  6E1F               	movwf	___awdiv@divisor,c
  3508  001A42  0100               	movlb	0	; () banked
  3509  001A44  C0C1  F01D         	movff	fround@prec,___awdiv@dividend
  3510  001A48  6A1E               	clrf	___awdiv@dividend+1,c
  3511  001A4A  ECFC  F017         	call	___awdiv	;wreg free
  3512  001A4E  0E09               	movlw	9
  3513  001A50  241D               	addwf	?___awdiv,w,c
  3514  001A52  6E25               	movwf	___wmul@multiplier,c
  3515  001A54  0E00               	movlw	0
  3516  001A56  201E               	addwfc	?___awdiv+1,w,c
  3517  001A58  6E26               	movwf	___wmul@multiplier+1,c
  3518  001A5A  0E00               	movlw	0
  3519  001A5C  6E28               	movwf	___wmul@multiplicand+1,c
  3520  001A5E  0E03               	movlw	3
  3521  001A60  6E27               	movwf	___wmul@multiplicand,c
  3522  001A62  EC57  F01B         	call	___wmul	;wreg free
  3523  001A66  0E29               	movlw	low __npowers_
  3524  001A68  2425               	addwf	?___wmul,w,c
  3525  001A6A  6EF6               	movwf	tblptrl,c
  3526  001A6C  0E06               	movlw	high __npowers_
  3527  001A6E  2026               	addwfc	?___wmul+1,w,c
  3528  001A70  6EF7               	movwf	tblptrh,c
  3529  001A72                     	if	0	;There are less than 3 active tblptr bytes
  3530  001A72                     	endif
  3531  001A72  0009               	tblrd		*+
  3532  001A74  0100               	movlb	0	; () banked
  3533  001A76  CFF5 F0AC          	movff	tablat,___ftmul@f1
  3534  001A7A  0009               	tblrd		*+
  3535  001A7C  0100               	movlb	0	; () banked
  3536  001A7E  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  3537  001A82  000A               	tblrd		*-
  3538  001A84  0100               	movlb	0	; () banked
  3539  001A86  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  3540  001A8A  ECBD  F012         	call	___ftmul	;wreg free
  3541  001A8E  C0AC  F0BE         	movff	?___ftmul,_fround$1684
  3542  001A92  C0AD  F0BF         	movff	?___ftmul+1,_fround$1684+1
  3543  001A96  C0AE  F0C0         	movff	?___ftmul+2,_fround$1684+2
  3544                           
  3545                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3546  001A9A  C0BE  F0AC         	movff	_fround$1684,___ftmul@f1
  3547  001A9E  C0BF  F0AD         	movff	_fround$1684+1,___ftmul@f1+1
  3548  001AA2  C0C0  F0AE         	movff	_fround$1684+2,___ftmul@f1+2
  3549  001AA6  0E00               	movlw	0
  3550  001AA8  0100               	movlb	0	; () banked
  3551  001AAA  6FAF               	movwf	___ftmul@f2& (0+255),b
  3552  001AAC  0E00               	movlw	0
  3553  001AAE  0100               	movlb	0	; () banked
  3554  001AB0  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  3555  001AB2  0E3F               	movlw	63
  3556  001AB4  0100               	movlb	0	; () banked
  3557  001AB6  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  3558  001AB8  ECBD  F012         	call	___ftmul	;wreg free
  3559  001ABC  C0AC  F0B8         	movff	?___ftmul,?_fround
  3560  001AC0  C0AD  F0B9         	movff	?___ftmul+1,?_fround+1
  3561  001AC4  C0AE  F0BA         	movff	?___ftmul+2,?_fround+2
  3562  001AC8  0012               	return	
  3563  001ACA                     l4626:
  3564                           
  3565                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3566  001ACA  0100               	movlb	0	; () banked
  3567  001ACC  51C1               	movf	fround@prec& (0+255),w,b
  3568  001ACE  0D03               	mullw	3
  3569  001AD0  0E29               	movlw	low __npowers_
  3570  001AD2  24F3               	addwf	prodl,w,c
  3571  001AD4  6EF6               	movwf	tblptrl,c
  3572  001AD6  0E06               	movlw	high __npowers_
  3573  001AD8  20F4               	addwfc	prodh,w,c
  3574  001ADA  6EF7               	movwf	tblptrh,c
  3575  001ADC                     	if	0	;There are less than 3 active tblptr bytes
  3576  001ADC                     	endif
  3577  001ADC  0009               	tblrd		*+
  3578  001ADE  0100               	movlb	0	; () banked
  3579  001AE0  CFF5 F0AC          	movff	tablat,___ftmul@f1
  3580  001AE4  0009               	tblrd		*+
  3581  001AE6  0100               	movlb	0	; () banked
  3582  001AE8  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  3583  001AEC  000A               	tblrd		*-
  3584  001AEE  0100               	movlb	0	; () banked
  3585  001AF0  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  3586  001AF4  0E00               	movlw	0
  3587  001AF6  0100               	movlb	0	; () banked
  3588  001AF8  6FAF               	movwf	___ftmul@f2& (0+255),b
  3589  001AFA  0E00               	movlw	0
  3590  001AFC  0100               	movlb	0	; () banked
  3591  001AFE  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  3592  001B00  0E3F               	movlw	63
  3593  001B02  0100               	movlb	0	; () banked
  3594  001B04  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  3595  001B06  ECBD  F012         	call	___ftmul	;wreg free
  3596  001B0A  C0AC  F0B8         	movff	?___ftmul,?_fround
  3597  001B0E  C0AD  F0B9         	movff	?___ftmul+1,?_fround+1
  3598  001B12  C0AE  F0BA         	movff	?___ftmul+2,?_fround+2
  3599  001B16  0012               	return	
  3600  001B18                     __end_of_fround:
  3601                           	opt stack 0
  3602                           tblptru	equ	0xFF8
  3603                           tblptrh	equ	0xFF7
  3604                           tblptrl	equ	0xFF6
  3605                           tablat	equ	0xFF5
  3606                           prodh	equ	0xFF4
  3607                           prodl	equ	0xFF3
  3608                           intcon	equ	0xFF2
  3609                           postinc0	equ	0xFEE
  3610                           wreg	equ	0xFE8
  3611                           indf2	equ	0xFDF
  3612                           postinc2	equ	0xFDE
  3613                           postdec2	equ	0xFDD
  3614                           fsr2h	equ	0xFDA
  3615                           fsr2l	equ	0xFD9
  3616                           status	equ	0xFD8
  3617                           
  3618 ;; *************** function ___awmod *****************
  3619 ;; Defined at:
  3620 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  dividend        2   22[COMRAM] int 
  3623 ;;  divisor         2   24[COMRAM] int 
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;  sign            1   27[COMRAM] unsigned char 
  3626 ;;  counter         1   26[COMRAM] unsigned char 
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  2   22[COMRAM] int 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0, prodl
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3636 ;;      Params:         4       0       0       0       0       0       0
  3637 ;;      Locals:         2       0       0       0       0       0       0
  3638 ;;      Temps:          0       0       0       0       0       0       0
  3639 ;;      Totals:         6       0       0       0       0       0       0
  3640 ;;Total ram usage:        6 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; Hardware stack levels required when called:    4
  3643 ;; This function calls:
  3644 ;;		Nothing
  3645 ;; This function is called by:
  3646 ;;		_fround
  3647 ;;		_scale
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text6
  3652  00312E                     __ptext6:
  3653                           	opt stack 0
  3654  00312E                     ___awmod:
  3655                           	opt stack 24
  3656                           
  3657                           ;incstack = 0
  3658  00312E  0E00               	movlw	0
  3659  003130  6E1C               	movwf	___awmod@sign,c
  3660  003132  5018               	movf	___awmod@dividend+1,w,c
  3661  003134  0A80               	xorlw	128
  3662  003136  6EF3               	movwf	prodl,c
  3663  003138  0E80               	movlw	128
  3664  00313A  5CF3               	subwf	prodl,w,c
  3665  00313C  0E00               	movlw	0
  3666  00313E  B4D8               	btfsc	status,2,c
  3667  003140  5C17               	subwf	___awmod@dividend,w,c
  3668  003142  B0D8               	btfsc	status,0,c
  3669  003144  D006               	goto	l4456
  3670  003146  6C17               	negf	___awmod@dividend,c
  3671  003148  1E18               	comf	___awmod@dividend+1,f,c
  3672  00314A  B0D8               	btfsc	status,0,c
  3673  00314C  2A18               	incf	___awmod@dividend+1,f,c
  3674  00314E  0E01               	movlw	1
  3675  003150  6E1C               	movwf	___awmod@sign,c
  3676  003152                     l4456:
  3677  003152  501A               	movf	___awmod@divisor+1,w,c
  3678  003154  0A80               	xorlw	128
  3679  003156  6EF3               	movwf	prodl,c
  3680  003158  0E80               	movlw	128
  3681  00315A  5CF3               	subwf	prodl,w,c
  3682  00315C  0E00               	movlw	0
  3683  00315E  B4D8               	btfsc	status,2,c
  3684  003160  5C19               	subwf	___awmod@divisor,w,c
  3685  003162  B0D8               	btfsc	status,0,c
  3686  003164  D004               	goto	l4460
  3687  003166  6C19               	negf	___awmod@divisor,c
  3688  003168  1E1A               	comf	___awmod@divisor+1,f,c
  3689  00316A  B0D8               	btfsc	status,0,c
  3690  00316C  2A1A               	incf	___awmod@divisor+1,f,c
  3691  00316E                     l4460:
  3692  00316E  501A               	movf	___awmod@divisor+1,w,c
  3693  003170  1019               	iorwf	___awmod@divisor,w,c
  3694  003172  B4D8               	btfsc	status,2,c
  3695  003174  D018               	goto	l4476
  3696  003176  0E01               	movlw	1
  3697  003178  6E1B               	movwf	___awmod@counter,c
  3698  00317A  D004               	goto	l4466
  3699  00317C                     l4464:
  3700  00317C  90D8               	bcf	status,0,c
  3701  00317E  3619               	rlcf	___awmod@divisor,f,c
  3702  003180  361A               	rlcf	___awmod@divisor+1,f,c
  3703  003182  2A1B               	incf	___awmod@counter,f,c
  3704  003184                     l4466:
  3705  003184  AE1A               	btfss	___awmod@divisor+1,7,c
  3706  003186  D7FA               	goto	l4464
  3707  003188                     l4468:
  3708  003188  5019               	movf	___awmod@divisor,w,c
  3709  00318A  5C17               	subwf	___awmod@dividend,w,c
  3710  00318C  501A               	movf	___awmod@divisor+1,w,c
  3711  00318E  5818               	subwfb	___awmod@dividend+1,w,c
  3712  003190  A0D8               	btfss	status,0,c
  3713  003192  D004               	goto	l4472
  3714  003194  5019               	movf	___awmod@divisor,w,c
  3715  003196  5E17               	subwf	___awmod@dividend,f,c
  3716  003198  501A               	movf	___awmod@divisor+1,w,c
  3717  00319A  5A18               	subwfb	___awmod@dividend+1,f,c
  3718  00319C                     l4472:
  3719  00319C  90D8               	bcf	status,0,c
  3720  00319E  321A               	rrcf	___awmod@divisor+1,f,c
  3721  0031A0  3219               	rrcf	___awmod@divisor,f,c
  3722  0031A2  2E1B               	decfsz	___awmod@counter,f,c
  3723  0031A4  D7F1               	goto	l4468
  3724  0031A6                     l4476:
  3725  0031A6  501C               	movf	___awmod@sign,w,c
  3726  0031A8  B4D8               	btfsc	status,2,c
  3727  0031AA  D004               	goto	l4480
  3728  0031AC  6C17               	negf	___awmod@dividend,c
  3729  0031AE  1E18               	comf	___awmod@dividend+1,f,c
  3730  0031B0  B0D8               	btfsc	status,0,c
  3731  0031B2  2A18               	incf	___awmod@dividend+1,f,c
  3732  0031B4                     l4480:
  3733  0031B4  C017  F017         	movff	___awmod@dividend,?___awmod
  3734  0031B8  C018  F018         	movff	___awmod@dividend+1,?___awmod+1
  3735  0031BC  0012               	return	
  3736  0031BE                     __end_of___awmod:
  3737                           	opt stack 0
  3738                           tblptru	equ	0xFF8
  3739                           tblptrh	equ	0xFF7
  3740                           tblptrl	equ	0xFF6
  3741                           tablat	equ	0xFF5
  3742                           prodh	equ	0xFF4
  3743                           prodl	equ	0xFF3
  3744                           intcon	equ	0xFF2
  3745                           postinc0	equ	0xFEE
  3746                           wreg	equ	0xFE8
  3747                           indf2	equ	0xFDF
  3748                           postinc2	equ	0xFDE
  3749                           postdec2	equ	0xFDD
  3750                           fsr2h	equ	0xFDA
  3751                           fsr2l	equ	0xFD9
  3752                           status	equ	0xFD8
  3753                           
  3754 ;; *************** function __tdiv_to_l_ *****************
  3755 ;; Defined at:
  3756 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  f1              3   22[COMRAM] float 
  3759 ;;  f2              3   25[COMRAM] float 
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  quot            4   31[COMRAM] unsigned long 
  3762 ;;  exp1            1   36[COMRAM] unsigned char 
  3763 ;;  cntr            1   35[COMRAM] unsigned char 
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  4   22[COMRAM] unsigned long 
  3766 ;; Registers used:
  3767 ;;		wreg, status,2, status,0
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3773 ;;      Params:         6       0       0       0       0       0       0
  3774 ;;      Locals:         6       0       0       0       0       0       0
  3775 ;;      Temps:          3       0       0       0       0       0       0
  3776 ;;      Totals:        15       0       0       0       0       0       0
  3777 ;;Total ram usage:       15 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:    4
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_printf
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text7
  3788  00284C                     __ptext7:
  3789                           	opt stack 0
  3790  00284C                     __tdiv_to_l_:
  3791                           	opt stack 25
  3792                           
  3793                           ;incstack = 0
  3794  00284C  C019  F01D         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3795  002850  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3796  002852  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3797  002854  3418               	rlcf	__tdiv_to_l_@f1+1,w,c
  3798  002856  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3799  002858  E301               	bnc	u4711
  3800  00285A  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3801  00285C                     u4711:
  3802  00285C  501D               	movf	??__tdiv_to_l_,w,c
  3803  00285E  6E25               	movwf	__tdiv_to_l_@exp1,c
  3804  002860  6625               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  3805  002862  D009               	goto	l4674
  3806  002864  0E00               	movlw	0
  3807  002866  6E17               	movwf	?__tdiv_to_l_,c
  3808  002868  0E00               	movlw	0
  3809  00286A  6E18               	movwf	?__tdiv_to_l_+1,c
  3810  00286C  0E00               	movlw	0
  3811  00286E  6E19               	movwf	?__tdiv_to_l_+2,c
  3812  002870  0E00               	movlw	0
  3813  002872  6E1A               	movwf	?__tdiv_to_l_+3,c
  3814  002874  0012               	return	
  3815  002876                     l4674:
  3816  002876  C01C  F01D         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3817  00287A  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3818  00287C  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3819  00287E  341B               	rlcf	__tdiv_to_l_@f2+1,w,c
  3820  002880  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3821  002882  E301               	bnc	u4731
  3822  002884  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3823  002886                     u4731:
  3824  002886  501D               	movf	??__tdiv_to_l_,w,c
  3825  002888  6E24               	movwf	__tdiv_to_l_@cntr,c
  3826  00288A  6624               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  3827  00288C  D009               	goto	l4680
  3828  00288E  0E00               	movlw	0
  3829  002890  6E17               	movwf	?__tdiv_to_l_,c
  3830  002892  0E00               	movlw	0
  3831  002894  6E18               	movwf	?__tdiv_to_l_+1,c
  3832  002896  0E00               	movlw	0
  3833  002898  6E19               	movwf	?__tdiv_to_l_+2,c
  3834  00289A  0E00               	movlw	0
  3835  00289C  6E1A               	movwf	?__tdiv_to_l_+3,c
  3836  00289E  0012               	return	
  3837  0028A0                     l4680:
  3838  0028A0  8E18               	bsf	__tdiv_to_l_@f1+1,7,c
  3839  0028A2  0EFF               	movlw	255
  3840  0028A4  1617               	andwf	__tdiv_to_l_@f1,f,c
  3841  0028A6  0EFF               	movlw	255
  3842  0028A8  1618               	andwf	__tdiv_to_l_@f1+1,f,c
  3843  0028AA  0E00               	movlw	0
  3844  0028AC  1619               	andwf	__tdiv_to_l_@f1+2,f,c
  3845  0028AE  8E1B               	bsf	__tdiv_to_l_@f2+1,7,c
  3846  0028B0  0EFF               	movlw	255
  3847  0028B2  161A               	andwf	__tdiv_to_l_@f2,f,c
  3848  0028B4  0EFF               	movlw	255
  3849  0028B6  161B               	andwf	__tdiv_to_l_@f2+1,f,c
  3850  0028B8  0E00               	movlw	0
  3851  0028BA  161C               	andwf	__tdiv_to_l_@f2+2,f,c
  3852  0028BC  0E00               	movlw	0
  3853  0028BE  6E20               	movwf	__tdiv_to_l_@quot,c
  3854  0028C0  0E00               	movlw	0
  3855  0028C2  6E21               	movwf	__tdiv_to_l_@quot+1,c
  3856  0028C4  0E00               	movlw	0
  3857  0028C6  6E22               	movwf	__tdiv_to_l_@quot+2,c
  3858  0028C8  0E00               	movlw	0
  3859  0028CA  6E23               	movwf	__tdiv_to_l_@quot+3,c
  3860  0028CC  0E7F               	movlw	127
  3861  0028CE  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  3862  0028D0  5024               	movf	__tdiv_to_l_@cntr,w,c
  3863  0028D2  0F98               	addlw	152
  3864  0028D4  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  3865  0028D6  0E18               	movlw	24
  3866  0028D8  6E24               	movwf	__tdiv_to_l_@cntr,c
  3867  0028DA                     l1065:
  3868  0028DA  90D8               	bcf	status,0,c
  3869  0028DC  3620               	rlcf	__tdiv_to_l_@quot,f,c
  3870  0028DE  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  3871  0028E0  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  3872  0028E2  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  3873  0028E4  501A               	movf	__tdiv_to_l_@f2,w,c
  3874  0028E6  5C17               	subwf	__tdiv_to_l_@f1,w,c
  3875  0028E8  501B               	movf	__tdiv_to_l_@f2+1,w,c
  3876  0028EA  5818               	subwfb	__tdiv_to_l_@f1+1,w,c
  3877  0028EC  501C               	movf	__tdiv_to_l_@f2+2,w,c
  3878  0028EE  5819               	subwfb	__tdiv_to_l_@f1+2,w,c
  3879  0028F0  A0D8               	btfss	status,0,c
  3880  0028F2  D007               	goto	l1066
  3881  0028F4  501A               	movf	__tdiv_to_l_@f2,w,c
  3882  0028F6  5E17               	subwf	__tdiv_to_l_@f1,f,c
  3883  0028F8  501B               	movf	__tdiv_to_l_@f2+1,w,c
  3884  0028FA  5A18               	subwfb	__tdiv_to_l_@f1+1,f,c
  3885  0028FC  501C               	movf	__tdiv_to_l_@f2+2,w,c
  3886  0028FE  5A19               	subwfb	__tdiv_to_l_@f1+2,f,c
  3887  002900  8020               	bsf	__tdiv_to_l_@quot,0,c
  3888  002902                     l1066:
  3889  002902  90D8               	bcf	status,0,c
  3890  002904  3617               	rlcf	__tdiv_to_l_@f1,f,c
  3891  002906  3618               	rlcf	__tdiv_to_l_@f1+1,f,c
  3892  002908  3619               	rlcf	__tdiv_to_l_@f1+2,f,c
  3893  00290A  2E24               	decfsz	__tdiv_to_l_@cntr,f,c
  3894  00290C  D7E6               	goto	l1065
  3895  00290E  AE25               	btfss	__tdiv_to_l_@exp1,7,c
  3896  002910  D019               	goto	l4712
  3897  002912  5025               	movf	__tdiv_to_l_@exp1,w,c
  3898  002914  0A80               	xorlw	128
  3899  002916  6E1D               	movwf	??__tdiv_to_l_& (0+255),c
  3900  002918  0EE9               	movlw	233
  3901  00291A  0A80               	xorlw	128
  3902  00291C  5C1D               	subwf	??__tdiv_to_l_,w,c
  3903  00291E  B0D8               	btfsc	status,0,c
  3904  002920  D009               	goto	l4708
  3905  002922  0E00               	movlw	0
  3906  002924  6E17               	movwf	?__tdiv_to_l_,c
  3907  002926  0E00               	movlw	0
  3908  002928  6E18               	movwf	?__tdiv_to_l_+1,c
  3909  00292A  0E00               	movlw	0
  3910  00292C  6E19               	movwf	?__tdiv_to_l_+2,c
  3911  00292E  0E00               	movlw	0
  3912  002930  6E1A               	movwf	?__tdiv_to_l_+3,c
  3913  002932  0012               	return	
  3914  002934                     l4708:
  3915  002934  90D8               	bcf	status,0,c
  3916  002936  3223               	rrcf	__tdiv_to_l_@quot+3,f,c
  3917  002938  3222               	rrcf	__tdiv_to_l_@quot+2,f,c
  3918  00293A  3221               	rrcf	__tdiv_to_l_@quot+1,f,c
  3919  00293C  3220               	rrcf	__tdiv_to_l_@quot,f,c
  3920  00293E  3E25               	incfsz	__tdiv_to_l_@exp1,f,c
  3921  002940  D7F9               	goto	l4708
  3922  002942  D014               	goto	l1072
  3923  002944                     l4712:
  3924  002944  0E17               	movlw	23
  3925  002946  6425               	cpfsgt	__tdiv_to_l_@exp1,c
  3926  002948  D00F               	goto	l4720
  3927  00294A  0E00               	movlw	0
  3928  00294C  6E17               	movwf	?__tdiv_to_l_,c
  3929  00294E  0E00               	movlw	0
  3930  002950  6E18               	movwf	?__tdiv_to_l_+1,c
  3931  002952  0E00               	movlw	0
  3932  002954  6E19               	movwf	?__tdiv_to_l_+2,c
  3933  002956  0E00               	movlw	0
  3934  002958  6E1A               	movwf	?__tdiv_to_l_+3,c
  3935  00295A  0012               	return	
  3936  00295C                     l4718:
  3937  00295C  90D8               	bcf	status,0,c
  3938  00295E  3620               	rlcf	__tdiv_to_l_@quot,f,c
  3939  002960  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  3940  002962  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  3941  002964  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  3942  002966  0625               	decf	__tdiv_to_l_@exp1,f,c
  3943  002968                     l4720:
  3944  002968  6625               	tstfsz	__tdiv_to_l_@exp1,c
  3945  00296A  D7F8               	goto	l4718
  3946  00296C                     l1072:
  3947  00296C  C020  F017         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3948  002970  C021  F018         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3949  002974  C022  F019         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3950  002978  C023  F01A         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3951  00297C  0012               	return	
  3952  00297E                     __end_of__tdiv_to_l_:
  3953                           	opt stack 0
  3954                           tblptru	equ	0xFF8
  3955                           tblptrh	equ	0xFF7
  3956                           tblptrl	equ	0xFF6
  3957                           tablat	equ	0xFF5
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon	equ	0xFF2
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           indf2	equ	0xFDF
  3964                           postinc2	equ	0xFDE
  3965                           postdec2	equ	0xFDD
  3966                           fsr2h	equ	0xFDA
  3967                           fsr2l	equ	0xFD9
  3968                           status	equ	0xFD8
  3969                           
  3970 ;; *************** function __div_to_l_ *****************
  3971 ;; Defined at:
  3972 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;  f1              3   22[COMRAM] unsigned long 
  3975 ;;  f2              3   25[COMRAM] unsigned long 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;  quot            4   32[COMRAM] unsigned long 
  3978 ;;  exp1            1   37[COMRAM] unsigned char 
  3979 ;;  cntr            1   36[COMRAM] unsigned char 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  4   22[COMRAM] unsigned long 
  3982 ;; Registers used:
  3983 ;;		wreg, status,2, status,0
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3989 ;;      Params:         6       0       0       0       0       0       0
  3990 ;;      Locals:         6       0       0       0       0       0       0
  3991 ;;      Temps:          4       0       0       0       0       0       0
  3992 ;;      Totals:        16       0       0       0       0       0       0
  3993 ;;Total ram usage:       16 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    4
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_printf
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text8
  4004  0026E4                     __ptext8:
  4005                           	opt stack 0
  4006  0026E4                     __div_to_l_:
  4007                           	opt stack 25
  4008                           
  4009                           ;incstack = 0
  4010  0026E4  C017  F01D         	movff	__div_to_l_@f1,??__div_to_l_
  4011  0026E8  C018  F01E         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  4012  0026EC  C019  F01F         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  4013  0026F0  C01A  F020         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  4014  0026F4  0E18               	movlw	24
  4015  0026F6  D005               	goto	u4800
  4016  0026F8                     u4805:
  4017  0026F8  90D8               	bcf	status,0,c
  4018  0026FA  3220               	rrcf	??__div_to_l_+3,f,c
  4019  0026FC  321F               	rrcf	??__div_to_l_+2,f,c
  4020  0026FE  321E               	rrcf	??__div_to_l_+1,f,c
  4021  002700  321D               	rrcf	??__div_to_l_,f,c
  4022  002702                     u4800:
  4023  002702  2EE8               	decfsz	wreg,f,c
  4024  002704  D7F9               	goto	u4805
  4025  002706  501D               	movf	??__div_to_l_,w,c
  4026  002708  6E26               	movwf	__div_to_l_@exp1,c
  4027  00270A  6626               	tstfsz	__div_to_l_@exp1& (0+255),c
  4028  00270C  D009               	goto	l4728
  4029  00270E  0E00               	movlw	0
  4030  002710  6E17               	movwf	?__div_to_l_,c
  4031  002712  0E00               	movlw	0
  4032  002714  6E18               	movwf	?__div_to_l_+1,c
  4033  002716  0E00               	movlw	0
  4034  002718  6E19               	movwf	?__div_to_l_+2,c
  4035  00271A  0E00               	movlw	0
  4036  00271C  6E1A               	movwf	?__div_to_l_+3,c
  4037  00271E  0012               	return	
  4038  002720                     l4728:
  4039  002720  C01A  F01D         	movff	__div_to_l_@f2,??__div_to_l_
  4040  002724  C01B  F01E         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  4041  002728  C01C  F01F         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  4042  00272C  C01D  F020         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  4043  002730  0E18               	movlw	24
  4044  002732  D005               	goto	u4820
  4045  002734                     u4825:
  4046  002734  90D8               	bcf	status,0,c
  4047  002736  3220               	rrcf	??__div_to_l_+3,f,c
  4048  002738  321F               	rrcf	??__div_to_l_+2,f,c
  4049  00273A  321E               	rrcf	??__div_to_l_+1,f,c
  4050  00273C  321D               	rrcf	??__div_to_l_,f,c
  4051  00273E                     u4820:
  4052  00273E  2EE8               	decfsz	wreg,f,c
  4053  002740  D7F9               	goto	u4825
  4054  002742  501D               	movf	??__div_to_l_,w,c
  4055  002744  6E25               	movwf	__div_to_l_@cntr,c
  4056  002746  6625               	tstfsz	__div_to_l_@cntr& (0+255),c
  4057  002748  D009               	goto	l4734
  4058  00274A  0E00               	movlw	0
  4059  00274C  6E17               	movwf	?__div_to_l_,c
  4060  00274E  0E00               	movlw	0
  4061  002750  6E18               	movwf	?__div_to_l_+1,c
  4062  002752  0E00               	movlw	0
  4063  002754  6E19               	movwf	?__div_to_l_+2,c
  4064  002756  0E00               	movlw	0
  4065  002758  6E1A               	movwf	?__div_to_l_+3,c
  4066  00275A  0012               	return	
  4067  00275C                     l4734:
  4068  00275C  8E19               	bsf	__div_to_l_@f1+2,7,c
  4069  00275E  0EFF               	movlw	255
  4070  002760  1617               	andwf	__div_to_l_@f1,f,c
  4071  002762  0EFF               	movlw	255
  4072  002764  1618               	andwf	__div_to_l_@f1+1,f,c
  4073  002766  0EFF               	movlw	255
  4074  002768  1619               	andwf	__div_to_l_@f1+2,f,c
  4075  00276A  0E00               	movlw	0
  4076  00276C  161A               	andwf	__div_to_l_@f1+3,f,c
  4077  00276E  8E1C               	bsf	__div_to_l_@f2+2,7,c
  4078  002770  0EFF               	movlw	255
  4079  002772  161A               	andwf	__div_to_l_@f2,f,c
  4080  002774  0EFF               	movlw	255
  4081  002776  161B               	andwf	__div_to_l_@f2+1,f,c
  4082  002778  0EFF               	movlw	255
  4083  00277A  161C               	andwf	__div_to_l_@f2+2,f,c
  4084  00277C  0E00               	movlw	0
  4085  00277E  161D               	andwf	__div_to_l_@f2+3,f,c
  4086  002780  0E00               	movlw	0
  4087  002782  6E21               	movwf	__div_to_l_@quot,c
  4088  002784  0E00               	movlw	0
  4089  002786  6E22               	movwf	__div_to_l_@quot+1,c
  4090  002788  0E00               	movlw	0
  4091  00278A  6E23               	movwf	__div_to_l_@quot+2,c
  4092  00278C  0E00               	movlw	0
  4093  00278E  6E24               	movwf	__div_to_l_@quot+3,c
  4094  002790  0E7F               	movlw	127
  4095  002792  5E26               	subwf	__div_to_l_@exp1,f,c
  4096  002794  5025               	movf	__div_to_l_@cntr,w,c
  4097  002796  0FA0               	addlw	160
  4098  002798  5E26               	subwf	__div_to_l_@exp1,f,c
  4099  00279A  0E20               	movlw	32
  4100  00279C  6E25               	movwf	__div_to_l_@cntr,c
  4101  00279E                     l4748:
  4102  00279E  90D8               	bcf	status,0,c
  4103  0027A0  3621               	rlcf	__div_to_l_@quot,f,c
  4104  0027A2  3622               	rlcf	__div_to_l_@quot+1,f,c
  4105  0027A4  3623               	rlcf	__div_to_l_@quot+2,f,c
  4106  0027A6  3624               	rlcf	__div_to_l_@quot+3,f,c
  4107  0027A8  501A               	movf	__div_to_l_@f2,w,c
  4108  0027AA  5C17               	subwf	__div_to_l_@f1,w,c
  4109  0027AC  501B               	movf	__div_to_l_@f2+1,w,c
  4110  0027AE  5818               	subwfb	__div_to_l_@f1+1,w,c
  4111  0027B0  501C               	movf	__div_to_l_@f2+2,w,c
  4112  0027B2  5819               	subwfb	__div_to_l_@f1+2,w,c
  4113  0027B4  501D               	movf	__div_to_l_@f2+3,w,c
  4114  0027B6  581A               	subwfb	__div_to_l_@f1+3,w,c
  4115  0027B8  A0D8               	btfss	status,0,c
  4116  0027BA  D009               	goto	l4756
  4117  0027BC  501A               	movf	__div_to_l_@f2,w,c
  4118  0027BE  5E17               	subwf	__div_to_l_@f1,f,c
  4119  0027C0  501B               	movf	__div_to_l_@f2+1,w,c
  4120  0027C2  5A18               	subwfb	__div_to_l_@f1+1,f,c
  4121  0027C4  501C               	movf	__div_to_l_@f2+2,w,c
  4122  0027C6  5A19               	subwfb	__div_to_l_@f1+2,f,c
  4123  0027C8  501D               	movf	__div_to_l_@f2+3,w,c
  4124  0027CA  5A1A               	subwfb	__div_to_l_@f1+3,f,c
  4125  0027CC  8021               	bsf	__div_to_l_@quot,0,c
  4126  0027CE                     l4756:
  4127  0027CE  90D8               	bcf	status,0,c
  4128  0027D0  3617               	rlcf	__div_to_l_@f1,f,c
  4129  0027D2  3618               	rlcf	__div_to_l_@f1+1,f,c
  4130  0027D4  3619               	rlcf	__div_to_l_@f1+2,f,c
  4131  0027D6  361A               	rlcf	__div_to_l_@f1+3,f,c
  4132  0027D8  2E25               	decfsz	__div_to_l_@cntr,f,c
  4133  0027DA  D7E1               	goto	l4748
  4134  0027DC  AE26               	btfss	__div_to_l_@exp1,7,c
  4135  0027DE  D019               	goto	l4770
  4136  0027E0  5026               	movf	__div_to_l_@exp1,w,c
  4137  0027E2  0A80               	xorlw	128
  4138  0027E4  6E1D               	movwf	??__div_to_l_& (0+255),c
  4139  0027E6  0EE1               	movlw	225
  4140  0027E8  0A80               	xorlw	128
  4141  0027EA  5C1D               	subwf	??__div_to_l_,w,c
  4142  0027EC  B0D8               	btfsc	status,0,c
  4143  0027EE  D009               	goto	l4766
  4144  0027F0  0E00               	movlw	0
  4145  0027F2  6E17               	movwf	?__div_to_l_,c
  4146  0027F4  0E00               	movlw	0
  4147  0027F6  6E18               	movwf	?__div_to_l_+1,c
  4148  0027F8  0E00               	movlw	0
  4149  0027FA  6E19               	movwf	?__div_to_l_+2,c
  4150  0027FC  0E00               	movlw	0
  4151  0027FE  6E1A               	movwf	?__div_to_l_+3,c
  4152  002800  0012               	return	
  4153  002802                     l4766:
  4154  002802  90D8               	bcf	status,0,c
  4155  002804  3224               	rrcf	__div_to_l_@quot+3,f,c
  4156  002806  3223               	rrcf	__div_to_l_@quot+2,f,c
  4157  002808  3222               	rrcf	__div_to_l_@quot+1,f,c
  4158  00280A  3221               	rrcf	__div_to_l_@quot,f,c
  4159  00280C  3E26               	incfsz	__div_to_l_@exp1,f,c
  4160  00280E  D7F9               	goto	l4766
  4161  002810  D014               	goto	l954
  4162  002812                     l4770:
  4163  002812  0E1F               	movlw	31
  4164  002814  6426               	cpfsgt	__div_to_l_@exp1,c
  4165  002816  D00F               	goto	l4778
  4166  002818  0E00               	movlw	0
  4167  00281A  6E17               	movwf	?__div_to_l_,c
  4168  00281C  0E00               	movlw	0
  4169  00281E  6E18               	movwf	?__div_to_l_+1,c
  4170  002820  0E00               	movlw	0
  4171  002822  6E19               	movwf	?__div_to_l_+2,c
  4172  002824  0E00               	movlw	0
  4173  002826  6E1A               	movwf	?__div_to_l_+3,c
  4174  002828  0012               	return	
  4175  00282A                     l4776:
  4176  00282A  90D8               	bcf	status,0,c
  4177  00282C  3621               	rlcf	__div_to_l_@quot,f,c
  4178  00282E  3622               	rlcf	__div_to_l_@quot+1,f,c
  4179  002830  3623               	rlcf	__div_to_l_@quot+2,f,c
  4180  002832  3624               	rlcf	__div_to_l_@quot+3,f,c
  4181  002834  0626               	decf	__div_to_l_@exp1,f,c
  4182  002836                     l4778:
  4183  002836  6626               	tstfsz	__div_to_l_@exp1,c
  4184  002838  D7F8               	goto	l4776
  4185  00283A                     l954:
  4186  00283A  C021  F017         	movff	__div_to_l_@quot,?__div_to_l_
  4187  00283E  C022  F018         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4188  002842  C023  F019         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4189  002846  C024  F01A         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4190  00284A  0012               	return	
  4191  00284C                     __end_of__div_to_l_:
  4192                           	opt stack 0
  4193                           tblptru	equ	0xFF8
  4194                           tblptrh	equ	0xFF7
  4195                           tblptrl	equ	0xFF6
  4196                           tablat	equ	0xFF5
  4197                           prodh	equ	0xFF4
  4198                           prodl	equ	0xFF3
  4199                           intcon	equ	0xFF2
  4200                           postinc0	equ	0xFEE
  4201                           wreg	equ	0xFE8
  4202                           indf2	equ	0xFDF
  4203                           postinc2	equ	0xFDE
  4204                           postdec2	equ	0xFDD
  4205                           fsr2h	equ	0xFDA
  4206                           fsr2l	equ	0xFD9
  4207                           status	equ	0xFD8
  4208                           
  4209 ;; *************** function ___lltoft *****************
  4210 ;; Defined at:
  4211 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  c               4   30[COMRAM] unsigned long 
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;  exp             1   38[COMRAM] unsigned char 
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  3   30[COMRAM] float 
  4218 ;; Registers used:
  4219 ;;		wreg, status,2, status,0, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4225 ;;      Params:         4       0       0       0       0       0       0
  4226 ;;      Locals:         1       0       0       0       0       0       0
  4227 ;;      Temps:          4       0       0       0       0       0       0
  4228 ;;      Totals:         9       0       0       0       0       0       0
  4229 ;;Total ram usage:        9 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    5
  4232 ;; This function calls:
  4233 ;;		___ftpack
  4234 ;; This function is called by:
  4235 ;;		_printf
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text9
  4240  0033AC                     __ptext9:
  4241                           	opt stack 0
  4242  0033AC                     ___lltoft:
  4243                           	opt stack 24
  4244                           
  4245                           ;incstack = 0
  4246  0033AC  0E8E               	movlw	142
  4247  0033AE  6E27               	movwf	___lltoft@exp,c
  4248  0033B0  D006               	goto	l4942
  4249  0033B2                     l4940:
  4250  0033B2  90D8               	bcf	status,0,c
  4251  0033B4  3222               	rrcf	___lltoft@c+3,f,c
  4252  0033B6  3221               	rrcf	___lltoft@c+2,f,c
  4253  0033B8  3220               	rrcf	___lltoft@c+1,f,c
  4254  0033BA  321F               	rrcf	___lltoft@c,f,c
  4255  0033BC  2A27               	incf	___lltoft@exp,f,c
  4256  0033BE                     l4942:
  4257  0033BE  0E00               	movlw	0
  4258  0033C0  141F               	andwf	___lltoft@c,w,c
  4259  0033C2  6E23               	movwf	??___lltoft& (0+255),c
  4260  0033C4  0E00               	movlw	0
  4261  0033C6  1420               	andwf	___lltoft@c+1,w,c
  4262  0033C8  6E24               	movwf	(??___lltoft+1)& (0+255),c
  4263  0033CA  0E00               	movlw	0
  4264  0033CC  1421               	andwf	___lltoft@c+2,w,c
  4265  0033CE  6E25               	movwf	(??___lltoft+2)& (0+255),c
  4266  0033D0  0EFF               	movlw	255
  4267  0033D2  1422               	andwf	___lltoft@c+3,w,c
  4268  0033D4  6E26               	movwf	(??___lltoft+3)& (0+255),c
  4269  0033D6  5026               	movf	??___lltoft+3,w,c
  4270  0033D8  1023               	iorwf	??___lltoft,w,c
  4271  0033DA  1024               	iorwf	??___lltoft+1,w,c
  4272  0033DC  1025               	iorwf	??___lltoft+2,w,c
  4273  0033DE  A4D8               	btfss	status,2,c
  4274  0033E0  D7E8               	goto	l4940
  4275  0033E2  C01F  F017         	movff	___lltoft@c,___ftpack@arg
  4276  0033E6  C020  F018         	movff	___lltoft@c+1,___ftpack@arg+1
  4277  0033EA  C021  F019         	movff	___lltoft@c+2,___ftpack@arg+2
  4278  0033EE  C027  F01A         	movff	___lltoft@exp,___ftpack@exp
  4279  0033F2  0E00               	movlw	0
  4280  0033F4  6E1B               	movwf	___ftpack@sign,c
  4281  0033F6  ECA8  F017         	call	___ftpack	;wreg free
  4282  0033FA  C017  F01F         	movff	?___ftpack,?___lltoft
  4283  0033FE  C018  F020         	movff	?___ftpack+1,?___lltoft+1
  4284  003402  C019  F021         	movff	?___ftpack+2,?___lltoft+2
  4285  003406  0012               	return	
  4286  003408                     __end_of___lltoft:
  4287                           	opt stack 0
  4288                           tblptru	equ	0xFF8
  4289                           tblptrh	equ	0xFF7
  4290                           tblptrl	equ	0xFF6
  4291                           tablat	equ	0xFF5
  4292                           prodh	equ	0xFF4
  4293                           prodl	equ	0xFF3
  4294                           intcon	equ	0xFF2
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           indf2	equ	0xFDF
  4298                           postinc2	equ	0xFDE
  4299                           postdec2	equ	0xFDD
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function ___llmod *****************
  4305 ;; Defined at:
  4306 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  dividend        4   35[COMRAM] unsigned long 
  4309 ;;  divisor         4   39[COMRAM] unsigned long 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  counter         1   43[COMRAM] unsigned char 
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  4   35[COMRAM] unsigned long 
  4314 ;; Registers used:
  4315 ;;		wreg, status,2, status,0
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4321 ;;      Params:         8       0       0       0       0       0       0
  4322 ;;      Locals:         1       0       0       0       0       0       0
  4323 ;;      Temps:          0       0       0       0       0       0       0
  4324 ;;      Totals:         9       0       0       0       0       0       0
  4325 ;;Total ram usage:        9 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    4
  4328 ;; This function calls:
  4329 ;;		Nothing
  4330 ;; This function is called by:
  4331 ;;		_printf
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text10
  4336  003346                     __ptext10:
  4337                           	opt stack 0
  4338  003346                     ___llmod:
  4339                           	opt stack 25
  4340                           
  4341                           ;incstack = 0
  4342  003346  502B               	movf	___llmod@divisor+3,w,c
  4343  003348  1028               	iorwf	___llmod@divisor,w,c
  4344  00334A  1029               	iorwf	___llmod@divisor+1,w,c
  4345  00334C  102A               	iorwf	___llmod@divisor+2,w,c
  4346  00334E  B4D8               	btfsc	status,2,c
  4347  003350  D024               	goto	l1156
  4348  003352  0E01               	movlw	1
  4349  003354  6E2C               	movwf	___llmod@counter,c
  4350  003356  D006               	goto	l4928
  4351  003358                     l4926:
  4352  003358  90D8               	bcf	status,0,c
  4353  00335A  3628               	rlcf	___llmod@divisor,f,c
  4354  00335C  3629               	rlcf	___llmod@divisor+1,f,c
  4355  00335E  362A               	rlcf	___llmod@divisor+2,f,c
  4356  003360  362B               	rlcf	___llmod@divisor+3,f,c
  4357  003362  2A2C               	incf	___llmod@counter,f,c
  4358  003364                     l4928:
  4359  003364  AE2B               	btfss	___llmod@divisor+3,7,c
  4360  003366  D7F8               	goto	l4926
  4361  003368                     l4930:
  4362  003368  5028               	movf	___llmod@divisor,w,c
  4363  00336A  5C24               	subwf	___llmod@dividend,w,c
  4364  00336C  5029               	movf	___llmod@divisor+1,w,c
  4365  00336E  5825               	subwfb	___llmod@dividend+1,w,c
  4366  003370  502A               	movf	___llmod@divisor+2,w,c
  4367  003372  5826               	subwfb	___llmod@dividend+2,w,c
  4368  003374  502B               	movf	___llmod@divisor+3,w,c
  4369  003376  5827               	subwfb	___llmod@dividend+3,w,c
  4370  003378  A0D8               	btfss	status,0,c
  4371  00337A  D008               	goto	l4934
  4372  00337C  5028               	movf	___llmod@divisor,w,c
  4373  00337E  5E24               	subwf	___llmod@dividend,f,c
  4374  003380  5029               	movf	___llmod@divisor+1,w,c
  4375  003382  5A25               	subwfb	___llmod@dividend+1,f,c
  4376  003384  502A               	movf	___llmod@divisor+2,w,c
  4377  003386  5A26               	subwfb	___llmod@dividend+2,f,c
  4378  003388  502B               	movf	___llmod@divisor+3,w,c
  4379  00338A  5A27               	subwfb	___llmod@dividend+3,f,c
  4380  00338C                     l4934:
  4381  00338C  90D8               	bcf	status,0,c
  4382  00338E  322B               	rrcf	___llmod@divisor+3,f,c
  4383  003390  322A               	rrcf	___llmod@divisor+2,f,c
  4384  003392  3229               	rrcf	___llmod@divisor+1,f,c
  4385  003394  3228               	rrcf	___llmod@divisor,f,c
  4386  003396  2E2C               	decfsz	___llmod@counter,f,c
  4387  003398  D7E7               	goto	l4930
  4388  00339A                     l1156:
  4389  00339A  C024  F024         	movff	___llmod@dividend,?___llmod
  4390  00339E  C025  F025         	movff	___llmod@dividend+1,?___llmod+1
  4391  0033A2  C026  F026         	movff	___llmod@dividend+2,?___llmod+2
  4392  0033A6  C027  F027         	movff	___llmod@dividend+3,?___llmod+3
  4393  0033AA  0012               	return	
  4394  0033AC                     __end_of___llmod:
  4395                           	opt stack 0
  4396                           tblptru	equ	0xFF8
  4397                           tblptrh	equ	0xFF7
  4398                           tblptrl	equ	0xFF6
  4399                           tablat	equ	0xFF5
  4400                           prodh	equ	0xFF4
  4401                           prodl	equ	0xFF3
  4402                           intcon	equ	0xFF2
  4403                           postinc0	equ	0xFEE
  4404                           wreg	equ	0xFE8
  4405                           indf2	equ	0xFDF
  4406                           postinc2	equ	0xFDE
  4407                           postdec2	equ	0xFDD
  4408                           fsr2h	equ	0xFDA
  4409                           fsr2l	equ	0xFD9
  4410                           status	equ	0xFD8
  4411                           
  4412 ;; *************** function ___lldiv *****************
  4413 ;; Defined at:
  4414 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  dividend        4   22[COMRAM] unsigned long 
  4417 ;;  divisor         4   26[COMRAM] unsigned long 
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;  quotient        4   30[COMRAM] unsigned long 
  4420 ;;  counter         1   34[COMRAM] unsigned char 
  4421 ;; Return value:  Size  Location     Type
  4422 ;;                  4   22[COMRAM] unsigned long 
  4423 ;; Registers used:
  4424 ;;		wreg, status,2, status,0
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4430 ;;      Params:         8       0       0       0       0       0       0
  4431 ;;      Locals:         5       0       0       0       0       0       0
  4432 ;;      Temps:          0       0       0       0       0       0       0
  4433 ;;      Totals:        13       0       0       0       0       0       0
  4434 ;;Total ram usage:       13 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    4
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_printf
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           	psect	text11
  4445  00324E                     __ptext11:
  4446                           	opt stack 0
  4447  00324E                     ___lldiv:
  4448                           	opt stack 25
  4449                           
  4450                           ;incstack = 0
  4451  00324E  0E00               	movlw	0
  4452  003250  6E1F               	movwf	___lldiv@quotient,c
  4453  003252  0E00               	movlw	0
  4454  003254  6E20               	movwf	___lldiv@quotient+1,c
  4455  003256  0E00               	movlw	0
  4456  003258  6E21               	movwf	___lldiv@quotient+2,c
  4457  00325A  0E00               	movlw	0
  4458  00325C  6E22               	movwf	___lldiv@quotient+3,c
  4459  00325E  501E               	movf	___lldiv@divisor+3,w,c
  4460  003260  101B               	iorwf	___lldiv@divisor,w,c
  4461  003262  101C               	iorwf	___lldiv@divisor+1,w,c
  4462  003264  101D               	iorwf	___lldiv@divisor+2,w,c
  4463  003266  B4D8               	btfsc	status,2,c
  4464  003268  D02A               	goto	l1146
  4465  00326A  0E01               	movlw	1
  4466  00326C  6E23               	movwf	___lldiv@counter,c
  4467  00326E  D006               	goto	l4908
  4468  003270                     l4906:
  4469  003270  90D8               	bcf	status,0,c
  4470  003272  361B               	rlcf	___lldiv@divisor,f,c
  4471  003274  361C               	rlcf	___lldiv@divisor+1,f,c
  4472  003276  361D               	rlcf	___lldiv@divisor+2,f,c
  4473  003278  361E               	rlcf	___lldiv@divisor+3,f,c
  4474  00327A  2A23               	incf	___lldiv@counter,f,c
  4475  00327C                     l4908:
  4476  00327C  AE1E               	btfss	___lldiv@divisor+3,7,c
  4477  00327E  D7F8               	goto	l4906
  4478  003280                     l4910:
  4479  003280  90D8               	bcf	status,0,c
  4480  003282  361F               	rlcf	___lldiv@quotient,f,c
  4481  003284  3620               	rlcf	___lldiv@quotient+1,f,c
  4482  003286  3621               	rlcf	___lldiv@quotient+2,f,c
  4483  003288  3622               	rlcf	___lldiv@quotient+3,f,c
  4484  00328A  501B               	movf	___lldiv@divisor,w,c
  4485  00328C  5C17               	subwf	___lldiv@dividend,w,c
  4486  00328E  501C               	movf	___lldiv@divisor+1,w,c
  4487  003290  5818               	subwfb	___lldiv@dividend+1,w,c
  4488  003292  501D               	movf	___lldiv@divisor+2,w,c
  4489  003294  5819               	subwfb	___lldiv@dividend+2,w,c
  4490  003296  501E               	movf	___lldiv@divisor+3,w,c
  4491  003298  581A               	subwfb	___lldiv@dividend+3,w,c
  4492  00329A  A0D8               	btfss	status,0,c
  4493  00329C  D009               	goto	l4918
  4494  00329E  501B               	movf	___lldiv@divisor,w,c
  4495  0032A0  5E17               	subwf	___lldiv@dividend,f,c
  4496  0032A2  501C               	movf	___lldiv@divisor+1,w,c
  4497  0032A4  5A18               	subwfb	___lldiv@dividend+1,f,c
  4498  0032A6  501D               	movf	___lldiv@divisor+2,w,c
  4499  0032A8  5A19               	subwfb	___lldiv@dividend+2,f,c
  4500  0032AA  501E               	movf	___lldiv@divisor+3,w,c
  4501  0032AC  5A1A               	subwfb	___lldiv@dividend+3,f,c
  4502  0032AE  801F               	bsf	___lldiv@quotient,0,c
  4503  0032B0                     l4918:
  4504  0032B0  90D8               	bcf	status,0,c
  4505  0032B2  321E               	rrcf	___lldiv@divisor+3,f,c
  4506  0032B4  321D               	rrcf	___lldiv@divisor+2,f,c
  4507  0032B6  321C               	rrcf	___lldiv@divisor+1,f,c
  4508  0032B8  321B               	rrcf	___lldiv@divisor,f,c
  4509  0032BA  2E23               	decfsz	___lldiv@counter,f,c
  4510  0032BC  D7E1               	goto	l4910
  4511  0032BE                     l1146:
  4512  0032BE  C01F  F017         	movff	___lldiv@quotient,?___lldiv
  4513  0032C2  C020  F018         	movff	___lldiv@quotient+1,?___lldiv+1
  4514  0032C6  C021  F019         	movff	___lldiv@quotient+2,?___lldiv+2
  4515  0032CA  C022  F01A         	movff	___lldiv@quotient+3,?___lldiv+3
  4516  0032CE  0012               	return	
  4517  0032D0                     __end_of___lldiv:
  4518                           	opt stack 0
  4519                           tblptru	equ	0xFF8
  4520                           tblptrh	equ	0xFF7
  4521                           tblptrl	equ	0xFF6
  4522                           tablat	equ	0xFF5
  4523                           prodh	equ	0xFF4
  4524                           prodl	equ	0xFF3
  4525                           intcon	equ	0xFF2
  4526                           postinc0	equ	0xFEE
  4527                           wreg	equ	0xFE8
  4528                           indf2	equ	0xFDF
  4529                           postinc2	equ	0xFDE
  4530                           postdec2	equ	0xFDD
  4531                           fsr2h	equ	0xFDA
  4532                           fsr2l	equ	0xFD9
  4533                           status	equ	0xFD8
  4534                           
  4535 ;; *************** function ___fttol *****************
  4536 ;; Defined at:
  4537 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;  f1              3   19[BANK0 ] float 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  lval            4   29[BANK0 ] unsigned long 
  4542 ;;  exp1            1   33[BANK0 ] unsigned char 
  4543 ;;  sign1           1   28[BANK0 ] unsigned char 
  4544 ;; Return value:  Size  Location     Type
  4545 ;;                  4   19[BANK0 ] long 
  4546 ;; Registers used:
  4547 ;;		wreg, status,2, status,0
  4548 ;; Tracked objects:
  4549 ;;		On entry : 0/0
  4550 ;;		On exit  : 0/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4553 ;;      Params:         0       4       0       0       0       0       0
  4554 ;;      Locals:         0       6       0       0       0       0       0
  4555 ;;      Temps:          0       5       0       0       0       0       0
  4556 ;;      Totals:         0      15       0       0       0       0       0
  4557 ;;Total ram usage:       15 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; Hardware stack levels required when called:    4
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_printf
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text12
  4568  001FA0                     __ptext12:
  4569                           	opt stack 0
  4570  001FA0                     ___fttol:
  4571                           	opt stack 25
  4572                           
  4573                           ;incstack = 0
  4574  001FA0  0100               	movlb	0	; () banked
  4575  001FA2  C0C1  F0C3         	movff	___fttol@f1+2,??___fttol
  4576  001FA6  0100               	movlb	0	; () banked
  4577  001FA8  6BC4               	clrf	(??___fttol+1)& (0+255),b
  4578  001FAA  6BC5               	clrf	(??___fttol+2)& (0+255),b
  4579  001FAC  0100               	movlb	0	; () banked
  4580  001FAE  35C0               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4581  001FB0  0100               	movlb	0	; () banked
  4582  001FB2  37C3               	rlcf	??___fttol& (0+255),f,b
  4583  001FB4  E301               	bnc	u4981
  4584  001FB6  81C4               	bsf	(??___fttol+1)& (0+255),0,b
  4585  001FB8                     u4981:
  4586  001FB8  0100               	movlb	0	; () banked
  4587  001FBA  51C3               	movf	??___fttol& (0+255),w,b
  4588  001FBC  0100               	movlb	0	; () banked
  4589  001FBE  6FCD               	movwf	___fttol@exp1& (0+255),b
  4590  001FC0  0100               	movlb	0	; () banked
  4591  001FC2  67CD               	tstfsz	___fttol@exp1& (0+255),b
  4592  001FC4  D00D               	goto	l4860
  4593                           
  4594                           ; BSR set to: 0
  4595  001FC6  0E00               	movlw	0
  4596  001FC8  0100               	movlb	0	; () banked
  4597  001FCA  6FBF               	movwf	?___fttol& (0+255),b
  4598  001FCC  0E00               	movlw	0
  4599  001FCE  0100               	movlb	0	; () banked
  4600  001FD0  6FC0               	movwf	(?___fttol+1)& (0+255),b
  4601  001FD2  0E00               	movlw	0
  4602  001FD4  0100               	movlb	0	; () banked
  4603  001FD6  6FC1               	movwf	(?___fttol+2)& (0+255),b
  4604  001FD8  0E00               	movlw	0
  4605  001FDA  0100               	movlb	0	; () banked
  4606  001FDC  6FC2               	movwf	(?___fttol+3)& (0+255),b
  4607  001FDE  0012               	return	
  4608  001FE0                     l4860:
  4609                           
  4610                           ; BSR set to: 0
  4611  001FE0  0E17               	movlw	23
  4612  001FE2  0100               	movlb	0	; () banked
  4613  001FE4  6FC3               	movwf	??___fttol& (0+255),b
  4614  001FE6  0100               	movlb	0	; () banked
  4615  001FE8  C0BF  F0C4         	movff	___fttol@f1,??___fttol+1
  4616  001FEC  0100               	movlb	0	; () banked
  4617  001FEE  C0C0  F0C5         	movff	___fttol@f1+1,??___fttol+2
  4618  001FF2  0100               	movlb	0	; () banked
  4619  001FF4  C0C1  F0C6         	movff	___fttol@f1+2,??___fttol+3
  4620  001FF8  0100               	movlb	0	; () banked
  4621  001FFA  29C3               	incf	??___fttol& (0+255),w,b
  4622  001FFC  0100               	movlb	0	; () banked
  4623  001FFE  6FC7               	movwf	(??___fttol+4)& (0+255),b
  4624  002000  D005               	goto	u5000
  4625  002002                     u5005:
  4626  002002  0100               	movlb	0	; () banked
  4627  002004  90D8               	bcf	status,0,c
  4628  002006  33C6               	rrcf	(??___fttol+3)& (0+255),f,b
  4629  002008  33C5               	rrcf	(??___fttol+2)& (0+255),f,b
  4630  00200A  33C4               	rrcf	(??___fttol+1)& (0+255),f,b
  4631  00200C                     u5000:
  4632  00200C  0100               	movlb	0	; () banked
  4633  00200E  2FC7               	decfsz	(??___fttol+4)& (0+255),f,b
  4634  002010  D7F8               	goto	u5005
  4635  002012  0100               	movlb	0	; () banked
  4636  002014  51C4               	movf	(??___fttol+1)& (0+255),w,b
  4637  002016  0100               	movlb	0	; () banked
  4638  002018  6FC8               	movwf	___fttol@sign1& (0+255),b
  4639                           
  4640                           ; BSR set to: 0
  4641  00201A  0100               	movlb	0	; () banked
  4642  00201C  8FC0               	bsf	(___fttol@f1+1)& (0+255),7,b
  4643                           
  4644                           ; BSR set to: 0
  4645  00201E  0EFF               	movlw	255
  4646  002020  0100               	movlb	0	; () banked
  4647  002022  17BF               	andwf	___fttol@f1& (0+255),f,b
  4648  002024  0EFF               	movlw	255
  4649  002026  0100               	movlb	0	; () banked
  4650  002028  17C0               	andwf	(___fttol@f1+1)& (0+255),f,b
  4651  00202A  0E00               	movlw	0
  4652  00202C  0100               	movlb	0	; () banked
  4653  00202E  17C1               	andwf	(___fttol@f1+2)& (0+255),f,b
  4654                           
  4655                           ; BSR set to: 0
  4656  002030  0100               	movlb	0	; () banked
  4657  002032  51BF               	movf	___fttol@f1& (0+255),w,b
  4658  002034  0100               	movlb	0	; () banked
  4659  002036  6FC9               	movwf	___fttol@lval& (0+255),b
  4660  002038  0100               	movlb	0	; () banked
  4661  00203A  51C0               	movf	(___fttol@f1+1)& (0+255),w,b
  4662  00203C  0100               	movlb	0	; () banked
  4663  00203E  6FCA               	movwf	(___fttol@lval+1)& (0+255),b
  4664  002040  0100               	movlb	0	; () banked
  4665  002042  51C1               	movf	(___fttol@f1+2)& (0+255),w,b
  4666  002044  0100               	movlb	0	; () banked
  4667  002046  6FCB               	movwf	(___fttol@lval+2)& (0+255),b
  4668  002048  0100               	movlb	0	; () banked
  4669  00204A  6BCC               	clrf	(___fttol@lval+3)& (0+255),b
  4670                           
  4671                           ; BSR set to: 0
  4672  00204C  0E8E               	movlw	142
  4673  00204E  0100               	movlb	0	; () banked
  4674  002050  5FCD               	subwf	___fttol@exp1& (0+255),f,b
  4675                           
  4676                           ; BSR set to: 0
  4677  002052  0100               	movlb	0	; () banked
  4678  002054  AFCD               	btfss	___fttol@exp1& (0+255),7,b
  4679  002056  D026               	goto	l4882
  4680                           
  4681                           ; BSR set to: 0
  4682  002058  0100               	movlb	0	; () banked
  4683  00205A  51CD               	movf	___fttol@exp1& (0+255),w,b
  4684  00205C  0A80               	xorlw	128
  4685  00205E  0100               	movlb	0	; () banked
  4686  002060  6FC3               	movwf	??___fttol& (0+255),b
  4687  002062  0EF1               	movlw	241
  4688  002064  0A80               	xorlw	128
  4689  002066  0100               	movlb	0	; () banked
  4690  002068  5DC3               	subwf	??___fttol& (0+255),w,b
  4691  00206A  B0D8               	btfsc	status,0,c
  4692  00206C  D00D               	goto	l4878
  4693                           
  4694                           ; BSR set to: 0
  4695  00206E  0E00               	movlw	0
  4696  002070  0100               	movlb	0	; () banked
  4697  002072  6FBF               	movwf	?___fttol& (0+255),b
  4698  002074  0E00               	movlw	0
  4699  002076  0100               	movlb	0	; () banked
  4700  002078  6FC0               	movwf	(?___fttol+1)& (0+255),b
  4701  00207A  0E00               	movlw	0
  4702  00207C  0100               	movlb	0	; () banked
  4703  00207E  6FC1               	movwf	(?___fttol+2)& (0+255),b
  4704  002080  0E00               	movlw	0
  4705  002082  0100               	movlb	0	; () banked
  4706  002084  6FC2               	movwf	(?___fttol+3)& (0+255),b
  4707  002086  0012               	return	
  4708  002088                     l4878:
  4709                           
  4710                           ; BSR set to: 0
  4711  002088  0100               	movlb	0	; () banked
  4712  00208A  90D8               	bcf	status,0,c
  4713  00208C  0100               	movlb	0	; () banked
  4714  00208E  33CC               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4715  002090  0100               	movlb	0	; () banked
  4716  002092  33CB               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4717  002094  0100               	movlb	0	; () banked
  4718  002096  33CA               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4719  002098  0100               	movlb	0	; () banked
  4720  00209A  33C9               	rrcf	___fttol@lval& (0+255),f,b
  4721                           
  4722                           ; BSR set to: 0
  4723  00209C  0100               	movlb	0	; () banked
  4724  00209E  3FCD               	incfsz	___fttol@exp1& (0+255),f,b
  4725  0020A0  D7F3               	goto	l4878
  4726  0020A2  D020               	goto	l4892
  4727  0020A4                     l4882:
  4728                           
  4729                           ; BSR set to: 0
  4730  0020A4  0E17               	movlw	23
  4731  0020A6  0100               	movlb	0	; () banked
  4732  0020A8  65CD               	cpfsgt	___fttol@exp1& (0+255),b
  4733  0020AA  D019               	goto	l4890
  4734                           
  4735                           ; BSR set to: 0
  4736  0020AC  0E00               	movlw	0
  4737  0020AE  0100               	movlb	0	; () banked
  4738  0020B0  6FBF               	movwf	?___fttol& (0+255),b
  4739  0020B2  0E00               	movlw	0
  4740  0020B4  0100               	movlb	0	; () banked
  4741  0020B6  6FC0               	movwf	(?___fttol+1)& (0+255),b
  4742  0020B8  0E00               	movlw	0
  4743  0020BA  0100               	movlb	0	; () banked
  4744  0020BC  6FC1               	movwf	(?___fttol+2)& (0+255),b
  4745  0020BE  0E00               	movlw	0
  4746  0020C0  0100               	movlb	0	; () banked
  4747  0020C2  6FC2               	movwf	(?___fttol+3)& (0+255),b
  4748  0020C4  0012               	return	
  4749  0020C6                     l4888:
  4750                           
  4751                           ; BSR set to: 0
  4752  0020C6  0100               	movlb	0	; () banked
  4753  0020C8  90D8               	bcf	status,0,c
  4754  0020CA  0100               	movlb	0	; () banked
  4755  0020CC  37C9               	rlcf	___fttol@lval& (0+255),f,b
  4756  0020CE  0100               	movlb	0	; () banked
  4757  0020D0  37CA               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4758  0020D2  0100               	movlb	0	; () banked
  4759  0020D4  37CB               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4760  0020D6  0100               	movlb	0	; () banked
  4761  0020D8  37CC               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4762  0020DA  0100               	movlb	0	; () banked
  4763  0020DC  07CD               	decf	___fttol@exp1& (0+255),f,b
  4764  0020DE                     l4890:
  4765                           
  4766                           ; BSR set to: 0
  4767  0020DE  0100               	movlb	0	; () banked
  4768  0020E0  67CD               	tstfsz	___fttol@exp1& (0+255),b
  4769  0020E2  D7F1               	goto	l4888
  4770  0020E4                     l4892:
  4771                           
  4772                           ; BSR set to: 0
  4773  0020E4  0100               	movlb	0	; () banked
  4774  0020E6  51C8               	movf	___fttol@sign1& (0+255),w,b
  4775  0020E8  B4D8               	btfsc	status,2,c
  4776  0020EA  D00F               	goto	l4896
  4777                           
  4778                           ; BSR set to: 0
  4779  0020EC  0100               	movlb	0	; () banked
  4780  0020EE  1FCC               	comf	(___fttol@lval+3)& (0+255),f,b
  4781  0020F0  0100               	movlb	0	; () banked
  4782  0020F2  1FCB               	comf	(___fttol@lval+2)& (0+255),f,b
  4783  0020F4  0100               	movlb	0	; () banked
  4784  0020F6  1FCA               	comf	(___fttol@lval+1)& (0+255),f,b
  4785  0020F8  0100               	movlb	0	; () banked
  4786  0020FA  6DC9               	negf	___fttol@lval& (0+255),b
  4787  0020FC  0E00               	movlw	0
  4788  0020FE  0100               	movlb	0	; () banked
  4789  002100  23CA               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4790  002102  0100               	movlb	0	; () banked
  4791  002104  23CB               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4792  002106  0100               	movlb	0	; () banked
  4793  002108  23CC               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4794  00210A                     l4896:
  4795                           
  4796                           ; BSR set to: 0
  4797  00210A  C0C9  F0BF         	movff	___fttol@lval,?___fttol
  4798  00210E  C0CA  F0C0         	movff	___fttol@lval+1,?___fttol+1
  4799  002112  C0CB  F0C1         	movff	___fttol@lval+2,?___fttol+2
  4800  002116  C0CC  F0C2         	movff	___fttol@lval+3,?___fttol+3
  4801  00211A  0012               	return	
  4802  00211C                     __end_of___fttol:
  4803                           	opt stack 0
  4804                           tblptru	equ	0xFF8
  4805                           tblptrh	equ	0xFF7
  4806                           tblptrl	equ	0xFF6
  4807                           tablat	equ	0xFF5
  4808                           prodh	equ	0xFF4
  4809                           prodl	equ	0xFF3
  4810                           intcon	equ	0xFF2
  4811                           postinc0	equ	0xFEE
  4812                           wreg	equ	0xFE8
  4813                           indf2	equ	0xFDF
  4814                           postinc2	equ	0xFDE
  4815                           postdec2	equ	0xFDD
  4816                           fsr2h	equ	0xFDA
  4817                           fsr2l	equ	0xFD9
  4818                           status	equ	0xFD8
  4819                           
  4820 ;; *************** function ___ftneg *****************
  4821 ;; Defined at:
  4822 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  f1              3   22[COMRAM] float 
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;		None
  4827 ;; Return value:  Size  Location     Type
  4828 ;;                  3   22[COMRAM] float 
  4829 ;; Registers used:
  4830 ;;		wreg, status,2, status,0
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4836 ;;      Params:         3       0       0       0       0       0       0
  4837 ;;      Locals:         0       0       0       0       0       0       0
  4838 ;;      Temps:          0       0       0       0       0       0       0
  4839 ;;      Totals:         3       0       0       0       0       0       0
  4840 ;;Total ram usage:        3 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    4
  4843 ;; This function calls:
  4844 ;;		Nothing
  4845 ;; This function is called by:
  4846 ;;		_printf
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           	psect	text13
  4851  003688                     __ptext13:
  4852                           	opt stack 0
  4853  003688                     ___ftneg:
  4854                           	opt stack 25
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;incstack = 0
  4858  003688  0E7F               	movlw	127
  4859  00368A  1419               	andwf	___ftneg@f1+2,w,c
  4860  00368C  1018               	iorwf	___ftneg@f1+1,w,c
  4861  00368E  1017               	iorwf	___ftneg@f1,w,c
  4862  003690  B4D8               	btfsc	status,2,c
  4863  003692  D006               	goto	l1097
  4864  003694  0E00               	movlw	0
  4865  003696  1A17               	xorwf	___ftneg@f1,f,c
  4866  003698  0E00               	movlw	0
  4867  00369A  1A18               	xorwf	___ftneg@f1+1,f,c
  4868  00369C  0E80               	movlw	128
  4869  00369E  1A19               	xorwf	___ftneg@f1+2,f,c
  4870  0036A0                     l1097:
  4871  0036A0  C017  F017         	movff	___ftneg@f1,?___ftneg
  4872  0036A4  C018  F018         	movff	___ftneg@f1+1,?___ftneg+1
  4873  0036A8  C019  F019         	movff	___ftneg@f1+2,?___ftneg+2
  4874  0036AC  0012               	return	
  4875  0036AE                     __end_of___ftneg:
  4876                           	opt stack 0
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           intcon	equ	0xFF2
  4884                           postinc0	equ	0xFEE
  4885                           wreg	equ	0xFE8
  4886                           indf2	equ	0xFDF
  4887                           postinc2	equ	0xFDE
  4888                           postdec2	equ	0xFDD
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function _Temp_Fault *****************
  4894 ;; Defined at:
  4895 ;;		line 12 in file "Tempeture.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;		None
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  i               2    1[BANK0 ] int 
  4900 ;;  fault           1    0[BANK0 ] unsigned char 
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  1    wreg      unsigned char 
  4903 ;; Registers used:
  4904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4910 ;;      Params:         0       0       0       0       0       0       0
  4911 ;;      Locals:         0       3       0       0       0       0       0
  4912 ;;      Temps:          0       0       0       0       0       0       0
  4913 ;;      Totals:         0       3       0       0       0       0       0
  4914 ;;Total ram usage:        3 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; Hardware stack levels required when called:    5
  4917 ;; This function calls:
  4918 ;;		___ftge
  4919 ;;		___wmul
  4920 ;; This function is called by:
  4921 ;;		_main
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text14
  4926  0032D0                     __ptext14:
  4927                           	opt stack 0
  4928  0032D0                     _Temp_Fault:
  4929                           	opt stack 25
  4930                           
  4931                           ;Tempeture.c: 15: char fault = 0;
  4932                           
  4933                           ;incstack = 0
  4934  0032D0  0E00               	movlw	0
  4935  0032D2  0100               	movlb	0	; () banked
  4936  0032D4  6FAC               	movwf	Temp_Fault@fault& (0+255),b
  4937                           
  4938                           ;Tempeture.c: 16: for(int i = 0;i<9;i++)
  4939  0032D6  0E00               	movlw	0
  4940  0032D8  0100               	movlb	0	; () banked
  4941  0032DA  6FAE               	movwf	(Temp_Fault@i+1)& (0+255),b
  4942  0032DC  0E00               	movlw	0
  4943  0032DE  0100               	movlb	0	; () banked
  4944  0032E0  6FAD               	movwf	Temp_Fault@i& (0+255),b
  4945  0032E2                     
  4946                           ; BSR set to: 0
  4947  0032E2  0100               	movlb	0	; () banked
  4948  0032E4  51AE               	movf	(Temp_Fault@i+1)& (0+255),w,b
  4949  0032E6  0A80               	xorlw	128
  4950  0032E8  0F80               	addlw	-128
  4951  0032EA  0E09               	movlw	9
  4952  0032EC  B4D8               	btfsc	status,2,c
  4953  0032EE  5DAD               	subwf	Temp_Fault@i& (0+255),w,b
  4954  0032F0  B0D8               	btfsc	status,0,c
  4955  0032F2  0012               	return	
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;Tempeture.c: 17: {
  4959                           ;Tempeture.c: 18: if (60.5 > Temp_DegF[i])
  4960                           
  4961                           ; BSR set to: 0
  4962                           
  4963                           ; BSR set to: 0
  4964  0032F4  C0AD  F025         	movff	Temp_Fault@i,___wmul@multiplier
  4965  0032F8  C0AE  F026         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  4966  0032FC  0E00               	movlw	0
  4967  0032FE  6E28               	movwf	___wmul@multiplicand+1,c
  4968  003300  0E03               	movlw	3
  4969  003302  6E27               	movwf	___wmul@multiplicand,c
  4970  003304  EC57  F01B         	call	___wmul	;wreg free
  4971  003308  0101               	movlb	1	; () banked
  4972  00330A  0E6E               	movlw	low _Temp_DegF
  4973  00330C  2425               	addwf	?___wmul,w,c
  4974  00330E  6ED9               	movwf	fsr2l,c
  4975  003310  0101               	movlb	1	; () banked
  4976  003312  0E01               	movlw	high _Temp_DegF
  4977  003314  2026               	addwfc	?___wmul+1,w,c
  4978  003316  6EDA               	movwf	fsr2h,c
  4979  003318  CFDE F02B          	movff	postinc2,___ftge@ff1
  4980  00331C  CFDE F02C          	movff	postinc2,___ftge@ff1+1
  4981  003320  CFDD F02D          	movff	postdec2,___ftge@ff1+2
  4982  003324  0E00               	movlw	0
  4983  003326  6E2E               	movwf	___ftge@ff2,c
  4984  003328  0E72               	movlw	114
  4985  00332A  6E2F               	movwf	___ftge@ff2+1,c
  4986  00332C  0E42               	movlw	66
  4987  00332E  6E30               	movwf	___ftge@ff2+2,c
  4988  003330  ECDF  F018         	call	___ftge	;wreg free
  4989  003334  B0D8               	btfsc	status,0,c
  4990  003336  D003               	goto	l4988
  4991                           
  4992                           ;Tempeture.c: 19: {
  4993                           ;Tempeture.c: 20: fault = 1;
  4994  003338  0E01               	movlw	1
  4995  00333A  0100               	movlb	0	; () banked
  4996  00333C  6FAC               	movwf	Temp_Fault@fault& (0+255),b
  4997  00333E                     l4988:
  4998  00333E  0100               	movlb	0	; () banked
  4999  003340  4BAD               	infsnz	Temp_Fault@i& (0+255),f,b
  5000  003342  2BAE               	incf	(Temp_Fault@i+1)& (0+255),f,b
  5001  003344  D7CE               	goto	L6
  5002  003346                     __end_of_Temp_Fault:
  5003                           	opt stack 0
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           postinc0	equ	0xFEE
  5012                           wreg	equ	0xFE8
  5013                           indf2	equ	0xFDF
  5014                           postinc2	equ	0xFDE
  5015                           postdec2	equ	0xFDD
  5016                           fsr2h	equ	0xFDA
  5017                           fsr2l	equ	0xFD9
  5018                           status	equ	0xFD8
  5019                           
  5020 ;; *************** function _Temp_Convert *****************
  5021 ;; Defined at:
  5022 ;;		line 50 in file "Tempeture.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;		None
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  steinhart       3   57[BANK0 ] float 
  5027 ;;  x               2   55[BANK0 ] int 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;		None               void
  5030 ;; Registers used:
  5031 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5037 ;;      Params:         0       0       0       0       0       0       0
  5038 ;;      Locals:         0       9       0       0       0       0       0
  5039 ;;      Temps:          0       2       0       0       0       0       0
  5040 ;;      Totals:         0      11       0       0       0       0       0
  5041 ;;Total ram usage:       11 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    8
  5044 ;; This function calls:
  5045 ;;		_Temp_Filter
  5046 ;;		___awdiv
  5047 ;;		___awtoft
  5048 ;;		___ftadd
  5049 ;;		___ftdiv
  5050 ;;		___ftmul
  5051 ;;		___ftsub
  5052 ;;		___wmul
  5053 ;;		_log
  5054 ;; This function is called by:
  5055 ;;		_main
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text15
  5060  001D98                     __ptext15:
  5061                           	opt stack 0
  5062  001D98                     _Temp_Convert:
  5063                           	opt stack 22
  5064                           
  5065                           ;Tempeture.c: 52: int x;
  5066                           ;Tempeture.c: 53: float steinhart;
  5067                           ;Tempeture.c: 54: for(x = 0; x < 10; x++)
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;incstack = 0
  5071  001D98  0E00               	movlw	0
  5072  001D9A  0100               	movlb	0	; () banked
  5073  001D9C  6FE4               	movwf	(Temp_Convert@x+1)& (0+255),b
  5074  001D9E  0E00               	movlw	0
  5075  001DA0  0100               	movlb	0	; () banked
  5076  001DA2  6FE3               	movwf	Temp_Convert@x& (0+255),b
  5077  001DA4                     
  5078                           ; BSR set to: 0
  5079  001DA4  0100               	movlb	0	; () banked
  5080  001DA6  51E4               	movf	(Temp_Convert@x+1)& (0+255),w,b
  5081  001DA8  0A80               	xorlw	128
  5082  001DAA  0F80               	addlw	-128
  5083  001DAC  0E0A               	movlw	10
  5084  001DAE  B4D8               	btfsc	status,2,c
  5085  001DB0  5DE3               	subwf	Temp_Convert@x& (0+255),w,b
  5086  001DB2  B0D8               	btfsc	status,0,c
  5087  001DB4  D0F2               	goto	l5022
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;Tempeture.c: 55: {
  5091                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5092                           
  5093                           ; BSR set to: 0
  5094                           
  5095                           ; BSR set to: 0
  5096  001DB6  0E98               	movlw	low _Temp_Adc
  5097  001DB8  0100               	movlb	0	; () banked
  5098  001DBA  6FDD               	movwf	??_Temp_Convert& (0+255),b
  5099  001DBC  0E00               	movlw	high _Temp_Adc
  5100  001DBE  6FDE               	movwf	(??_Temp_Convert+1)& (0+255),b
  5101  001DC0  90D8               	bcf	status,0,c
  5102  001DC2  0100               	movlb	0	; () banked
  5103  001DC4  35E3               	rlcf	Temp_Convert@x& (0+255),w,b
  5104  001DC6  6ED9               	movwf	fsr2l,c
  5105  001DC8  0100               	movlb	0	; () banked
  5106  001DCA  35E4               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  5107  001DCC  6EDA               	movwf	fsr2h,c
  5108  001DCE  0100               	movlb	0	; () banked
  5109  001DD0  51DD               	movf	??_Temp_Convert& (0+255),w,b
  5110  001DD2  26D9               	addwf	fsr2l,f,c
  5111  001DD4  0100               	movlb	0	; () banked
  5112  001DD6  51DE               	movf	(??_Temp_Convert+1)& (0+255),w,b
  5113  001DD8  22DA               	addwfc	fsr2h,f,c
  5114  001DDA  CFDE F01F          	movff	postinc2,___awdiv@divisor
  5115  001DDE  CFDD F020          	movff	postdec2,___awdiv@divisor+1
  5116  001DE2  0E03               	movlw	3
  5117  001DE4  6E1E               	movwf	___awdiv@dividend+1,c
  5118  001DE6  681D               	setf	___awdiv@dividend,c
  5119  001DE8  ECFC  F017         	call	___awdiv	;wreg free
  5120  001DEC  0EFF               	movlw	255
  5121  001DEE  241D               	addwf	?___awdiv,w,c
  5122  001DF0  0100               	movlb	0	; () banked
  5123  001DF2  6FDF               	movwf	_Temp_Convert$1682& (0+255),b
  5124  001DF4  0EFF               	movlw	255
  5125  001DF6  201E               	addwfc	?___awdiv+1,w,c
  5126  001DF8  0100               	movlb	0	; () banked
  5127  001DFA  6FE0               	movwf	(_Temp_Convert$1682+1)& (0+255),b
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;Tempeture.c: 55: {
  5131                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5132  001DFC  C0DF  F01F         	movff	_Temp_Convert$1682,___awdiv@divisor
  5133  001E00  C0E0  F020         	movff	_Temp_Convert$1682+1,___awdiv@divisor+1
  5134  001E04  0E27               	movlw	39
  5135  001E06  6E1E               	movwf	___awdiv@dividend+1,c
  5136  001E08  0E10               	movlw	16
  5137  001E0A  6E1D               	movwf	___awdiv@dividend,c
  5138  001E0C  ECFC  F017         	call	___awdiv	;wreg free
  5139  001E10  C01D  F0E1         	movff	?___awdiv,_Temp_Convert$1683
  5140  001E14  C01E  F0E2         	movff	?___awdiv+1,_Temp_Convert$1683+1
  5141                           
  5142                           ;Tempeture.c: 55: {
  5143                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5144  001E18  0E27               	movlw	39
  5145  001E1A  6E20               	movwf	___awdiv@divisor+1,c
  5146  001E1C  0E10               	movlw	16
  5147  001E1E  6E1F               	movwf	___awdiv@divisor,c
  5148  001E20  C0E1  F01D         	movff	_Temp_Convert$1683,___awdiv@dividend
  5149  001E24  C0E2  F01E         	movff	_Temp_Convert$1683+1,___awdiv@dividend+1
  5150  001E28  ECFC  F017         	call	___awdiv	;wreg free
  5151  001E2C  C01D  F02B         	movff	?___awdiv,___awtoft@c
  5152  001E30  C01E  F02C         	movff	?___awdiv+1,___awtoft@c+1
  5153  001E34  EC50  F01A         	call	___awtoft	;wreg free
  5154  001E38  C02B  F0E5         	movff	?___awtoft,Temp_Convert@steinhart
  5155  001E3C  C02C  F0E6         	movff	?___awtoft+1,Temp_Convert@steinhart+1
  5156  001E40  C02D  F0E7         	movff	?___awtoft+2,Temp_Convert@steinhart+2
  5157                           
  5158                           ;Tempeture.c: 57: steinhart = log(steinhart);
  5159  001E44  C0E5  F0D8         	movff	Temp_Convert@steinhart,log@x
  5160  001E48  C0E6  F0D9         	movff	Temp_Convert@steinhart+1,log@x+1
  5161  001E4C  C0E7  F0DA         	movff	Temp_Convert@steinhart+2,log@x+2
  5162  001E50  EC06  F012         	call	_log	;wreg free
  5163  001E54  C0D8  F0E5         	movff	?_log,Temp_Convert@steinhart
  5164  001E58  C0D9  F0E6         	movff	?_log+1,Temp_Convert@steinhart+1
  5165  001E5C  C0DA  F0E7         	movff	?_log+2,Temp_Convert@steinhart+2
  5166                           
  5167                           ;Tempeture.c: 58: steinhart /= 3950;
  5168  001E60  C0E5  F01F         	movff	Temp_Convert@steinhart,___ftdiv@f1
  5169  001E64  C0E6  F020         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  5170  001E68  C0E7  F021         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  5171  001E6C  0EE0               	movlw	224
  5172  001E6E  6E22               	movwf	___ftdiv@f2,c
  5173  001E70  0E76               	movlw	118
  5174  001E72  6E23               	movwf	___ftdiv@f2+1,c
  5175  001E74  0E45               	movlw	69
  5176  001E76  6E24               	movwf	___ftdiv@f2+2,c
  5177  001E78  EC21  F016         	call	___ftdiv	;wreg free
  5178  001E7C  C01F  F0E5         	movff	?___ftdiv,Temp_Convert@steinhart
  5179  001E80  C020  F0E6         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  5180  001E84  C021  F0E7         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  5181                           
  5182                           ;Tempeture.c: 59: steinhart += 1.0 / (25 + 273.15);
  5183  001E88  C0E5  F0C2         	movff	Temp_Convert@steinhart,___ftadd@f1
  5184  001E8C  C0E6  F0C3         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  5185  001E90  C0E7  F0C4         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  5186  001E94  0ECF               	movlw	207
  5187  001E96  0100               	movlb	0	; () banked
  5188  001E98  6FC5               	movwf	___ftadd@f2& (0+255),b
  5189  001E9A  0E5B               	movlw	91
  5190  001E9C  0100               	movlb	0	; () banked
  5191  001E9E  6FC6               	movwf	(___ftadd@f2+1)& (0+255),b
  5192  001EA0  0E3B               	movlw	59
  5193  001EA2  0100               	movlb	0	; () banked
  5194  001EA4  6FC7               	movwf	(___ftadd@f2+2)& (0+255),b
  5195  001EA6  EC8C  F00D         	call	___ftadd	;wreg free
  5196  001EAA  C0C2  F0E5         	movff	?___ftadd,Temp_Convert@steinhart
  5197  001EAE  C0C3  F0E6         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  5198  001EB2  C0C4  F0E7         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  5199                           
  5200                           ;Tempeture.c: 60: steinhart = 1.0 / steinhart;
  5201  001EB6  0E00               	movlw	0
  5202  001EB8  6E1F               	movwf	___ftdiv@f1,c
  5203  001EBA  0E80               	movlw	128
  5204  001EBC  6E20               	movwf	___ftdiv@f1+1,c
  5205  001EBE  0E3F               	movlw	63
  5206  001EC0  6E21               	movwf	___ftdiv@f1+2,c
  5207  001EC2  C0E5  F022         	movff	Temp_Convert@steinhart,___ftdiv@f2
  5208  001EC6  C0E6  F023         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  5209  001ECA  C0E7  F024         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  5210  001ECE  EC21  F016         	call	___ftdiv	;wreg free
  5211  001ED2  C01F  F0E5         	movff	?___ftdiv,Temp_Convert@steinhart
  5212  001ED6  C020  F0E6         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  5213  001EDA  C021  F0E7         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  5214                           
  5215                           ;Tempeture.c: 61: steinhart -= 273.15;
  5216  001EDE  C0E5  F0CE         	movff	Temp_Convert@steinhart,___ftsub@f1
  5217  001EE2  C0E6  F0CF         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  5218  001EE6  C0E7  F0D0         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  5219  001EEA  0E93               	movlw	147
  5220  001EEC  0100               	movlb	0	; () banked
  5221  001EEE  6FD1               	movwf	___ftsub@f2& (0+255),b
  5222  001EF0  0E88               	movlw	136
  5223  001EF2  0100               	movlb	0	; () banked
  5224  001EF4  6FD2               	movwf	(___ftsub@f2+1)& (0+255),b
  5225  001EF6  0E43               	movlw	67
  5226  001EF8  0100               	movlb	0	; () banked
  5227  001EFA  6FD3               	movwf	(___ftsub@f2+2)& (0+255),b
  5228  001EFC  EC74  F01A         	call	___ftsub	;wreg free
  5229  001F00  C0CE  F0E5         	movff	?___ftsub,Temp_Convert@steinhart
  5230  001F04  C0CF  F0E6         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  5231  001F08  C0D0  F0E7         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  5232                           
  5233                           ;Tempeture.c: 62: steinhart = (steinhart*1.800) + 32.00;
  5234  001F0C  0E66               	movlw	102
  5235  001F0E  0100               	movlb	0	; () banked
  5236  001F10  6FAF               	movwf	___ftmul@f2& (0+255),b
  5237  001F12  0EE6               	movlw	230
  5238  001F14  0100               	movlb	0	; () banked
  5239  001F16  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  5240  001F18  0E3F               	movlw	63
  5241  001F1A  0100               	movlb	0	; () banked
  5242  001F1C  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  5243  001F1E  C0E5  F0AC         	movff	Temp_Convert@steinhart,___ftmul@f1
  5244  001F22  C0E6  F0AD         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  5245  001F26  C0E7  F0AE         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  5246  001F2A  ECBD  F012         	call	___ftmul	;wreg free
  5247  001F2E  C0AC  F0C2         	movff	?___ftmul,___ftadd@f1
  5248  001F32  C0AD  F0C3         	movff	?___ftmul+1,___ftadd@f1+1
  5249  001F36  C0AE  F0C4         	movff	?___ftmul+2,___ftadd@f1+2
  5250  001F3A  0E00               	movlw	0
  5251  001F3C  0100               	movlb	0	; () banked
  5252  001F3E  6FC5               	movwf	___ftadd@f2& (0+255),b
  5253  001F40  0E00               	movlw	0
  5254  001F42  0100               	movlb	0	; () banked
  5255  001F44  6FC6               	movwf	(___ftadd@f2+1)& (0+255),b
  5256  001F46  0E42               	movlw	66
  5257  001F48  0100               	movlb	0	; () banked
  5258  001F4A  6FC7               	movwf	(___ftadd@f2+2)& (0+255),b
  5259  001F4C  EC8C  F00D         	call	___ftadd	;wreg free
  5260  001F50  C0C2  F0E5         	movff	?___ftadd,Temp_Convert@steinhart
  5261  001F54  C0C3  F0E6         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  5262  001F58  C0C4  F0E7         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  5263                           
  5264                           ;Tempeture.c: 63: TmpTemp_DegF[x] = steinhart;
  5265  001F5C  C0E3  F025         	movff	Temp_Convert@x,___wmul@multiplier
  5266  001F60  C0E4  F026         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  5267  001F64  0E00               	movlw	0
  5268  001F66  6E28               	movwf	___wmul@multiplicand+1,c
  5269  001F68  0E03               	movlw	3
  5270  001F6A  6E27               	movwf	___wmul@multiplicand,c
  5271  001F6C  EC57  F01B         	call	___wmul	;wreg free
  5272  001F70  0101               	movlb	1	; () banked
  5273  001F72  0EAA               	movlw	low _TmpTemp_DegF
  5274  001F74  2425               	addwf	?___wmul,w,c
  5275  001F76  6ED9               	movwf	fsr2l,c
  5276  001F78  0101               	movlb	1	; () banked
  5277  001F7A  0E01               	movlw	high _TmpTemp_DegF
  5278  001F7C  2026               	addwfc	?___wmul+1,w,c
  5279  001F7E  6EDA               	movwf	fsr2h,c
  5280  001F80  0100               	movlb	0	; () banked
  5281  001F82  C0E5  FFDE         	movff	Temp_Convert@steinhart,postinc2
  5282  001F86  0100               	movlb	0	; () banked
  5283  001F88  C0E6  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  5284  001F8C  0100               	movlb	0	; () banked
  5285  001F8E  C0E7  FFDD         	movff	Temp_Convert@steinhart+2,postdec2
  5286                           
  5287                           ; BSR set to: 0
  5288  001F92  0100               	movlb	0	; () banked
  5289  001F94  4BE3               	infsnz	Temp_Convert@x& (0+255),f,b
  5290  001F96  2BE4               	incf	(Temp_Convert@x+1)& (0+255),f,b
  5291  001F98  D705               	goto	L7
  5292  001F9A                     l5022:
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;Tempeture.c: 64: }
  5296                           ;Tempeture.c: 65: Temp_Filter();
  5297  001F9A  EC8E  F010         	call	_Temp_Filter	;wreg free
  5298  001F9E  0012               	return	
  5299  001FA0                     __end_of_Temp_Convert:
  5300                           	opt stack 0
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           intcon	equ	0xFF2
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           indf2	equ	0xFDF
  5311                           postinc2	equ	0xFDE
  5312                           postdec2	equ	0xFDD
  5313                           fsr2h	equ	0xFDA
  5314                           fsr2l	equ	0xFD9
  5315                           status	equ	0xFD8
  5316                           
  5317 ;; *************** function _log *****************
  5318 ;; Defined at:
  5319 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\log.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  x               3   44[BANK0 ] int 
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;  exponent        2   47[BANK0 ] int 
  5324 ;; Return value:  Size  Location     Type
  5325 ;;                  3   44[BANK0 ] int 
  5326 ;; Registers used:
  5327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5333 ;;      Params:         0       3       0       0       0       0       0
  5334 ;;      Locals:         0       2       0       0       0       0       0
  5335 ;;      Temps:          0       0       0       0       0       0       0
  5336 ;;      Totals:         0       5       0       0       0       0       0
  5337 ;;Total ram usage:        5 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; Hardware stack levels required when called:    7
  5340 ;; This function calls:
  5341 ;;		___awtoft
  5342 ;;		___ftadd
  5343 ;;		___ftmul
  5344 ;;		_eval_poly
  5345 ;;		_frexp
  5346 ;; This function is called by:
  5347 ;;		_Temp_Convert
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text16
  5352  00240C                     __ptext16:
  5353                           	opt stack 0
  5354  00240C                     _log:
  5355                           	opt stack 22
  5356                           
  5357                           ;incstack = 0
  5358  00240C  0100               	movlb	0	; () banked
  5359  00240E  51DA               	movf	(log@x+2)& (0+255),w,b
  5360  002410  0A80               	xorlw	128
  5361  002412  0F80               	addlw	128
  5362  002414  E107               	bnz	u4525
  5363  002416  0E00               	movlw	0
  5364  002418  0100               	movlb	0	; () banked
  5365  00241A  5DD9               	subwf	(log@x+1)& (0+255),w,b
  5366  00241C  E103               	bnz	u4525
  5367  00241E  0E00               	movlw	0
  5368  002420  0100               	movlb	0	; () banked
  5369  002422  5DD8               	subwf	log@x& (0+255),w,b
  5370  002424                     u4525:
  5371  002424  B0D8               	btfsc	status,0,c
  5372  002426  D010               	goto	l4562
  5373                           
  5374                           ; BSR set to: 0
  5375  002428  0E00               	movlw	0
  5376  00242A  0100               	movlb	0	; () banked
  5377  00242C  6F97               	movwf	(_errno+1)& (0+255),b
  5378  00242E  0E21               	movlw	33
  5379  002430  0100               	movlb	0	; () banked
  5380  002432  6F96               	movwf	_errno& (0+255),b
  5381  002434  0E00               	movlw	0
  5382  002436  0100               	movlb	0	; () banked
  5383  002438  6FD8               	movwf	?_log& (0+255),b
  5384  00243A  0E00               	movlw	0
  5385  00243C  0100               	movlb	0	; () banked
  5386  00243E  6FD9               	movwf	(?_log+1)& (0+255),b
  5387  002440  0E00               	movlw	0
  5388  002442  0100               	movlb	0	; () banked
  5389  002444  6FDA               	movwf	(?_log+2)& (0+255),b
  5390  002446  0012               	return	
  5391  002448                     l4562:
  5392                           
  5393                           ; BSR set to: 0
  5394  002448  0E7F               	movlw	127
  5395  00244A  0100               	movlb	0	; () banked
  5396  00244C  15DA               	andwf	(log@x+2)& (0+255),w,b
  5397  00244E  0100               	movlb	0	; () banked
  5398  002450  11D9               	iorwf	(log@x+1)& (0+255),w,b
  5399  002452  0100               	movlb	0	; () banked
  5400  002454  11D8               	iorwf	log@x& (0+255),w,b
  5401  002456  A4D8               	btfss	status,2,c
  5402  002458  D010               	goto	l4568
  5403                           
  5404                           ; BSR set to: 0
  5405  00245A  0E00               	movlw	0
  5406  00245C  0100               	movlb	0	; () banked
  5407  00245E  6F97               	movwf	(_errno+1)& (0+255),b
  5408  002460  0E22               	movlw	34
  5409  002462  0100               	movlb	0	; () banked
  5410  002464  6F96               	movwf	_errno& (0+255),b
  5411  002466  0E00               	movlw	0
  5412  002468  0100               	movlb	0	; () banked
  5413  00246A  6FD8               	movwf	?_log& (0+255),b
  5414  00246C  0E00               	movlw	0
  5415  00246E  0100               	movlb	0	; () banked
  5416  002470  6FD9               	movwf	(?_log+1)& (0+255),b
  5417  002472  0E00               	movlw	0
  5418  002474  0100               	movlb	0	; () banked
  5419  002476  6FDA               	movwf	(?_log+2)& (0+255),b
  5420  002478  0012               	return	
  5421  00247A                     l4568:
  5422                           
  5423                           ; BSR set to: 0
  5424  00247A  0E00               	movlw	0
  5425  00247C  0100               	movlb	0	; () banked
  5426  00247E  6FAF               	movwf	___ftmul@f2& (0+255),b
  5427  002480  0E00               	movlw	0
  5428  002482  0100               	movlb	0	; () banked
  5429  002484  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  5430  002486  0E40               	movlw	64
  5431  002488  0100               	movlb	0	; () banked
  5432  00248A  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  5433  00248C  0100               	movlb	0	; () banked
  5434  00248E  0E00               	movlw	high log@exponent
  5435  002490  6E1B               	movwf	frexp@eptr+1,c
  5436  002492  0100               	movlb	0	; () banked
  5437  002494  0EDB               	movlw	low log@exponent
  5438  002496  6E1A               	movwf	frexp@eptr,c
  5439  002498  C0D8  F017         	movff	log@x,frexp@value
  5440  00249C  C0D9  F018         	movff	log@x+1,frexp@value+1
  5441  0024A0  C0DA  F019         	movff	log@x+2,frexp@value+2
  5442  0024A4  EC4E  F018         	call	_frexp	;wreg free
  5443  0024A8  C017  F0AC         	movff	?_frexp,___ftmul@f1
  5444  0024AC  C018  F0AD         	movff	?_frexp+1,___ftmul@f1+1
  5445  0024B0  C019  F0AE         	movff	?_frexp+2,___ftmul@f1+2
  5446  0024B4  ECBD  F012         	call	___ftmul	;wreg free
  5447  0024B8  C0AC  F0C2         	movff	?___ftmul,___ftadd@f1
  5448  0024BC  C0AD  F0C3         	movff	?___ftmul+1,___ftadd@f1+1
  5449  0024C0  C0AE  F0C4         	movff	?___ftmul+2,___ftadd@f1+2
  5450  0024C4  0E00               	movlw	0
  5451  0024C6  0100               	movlb	0	; () banked
  5452  0024C8  6FC5               	movwf	___ftadd@f2& (0+255),b
  5453  0024CA  0E80               	movlw	128
  5454  0024CC  0100               	movlb	0	; () banked
  5455  0024CE  6FC6               	movwf	(___ftadd@f2+1)& (0+255),b
  5456  0024D0  0EBF               	movlw	191
  5457  0024D2  0100               	movlb	0	; () banked
  5458  0024D4  6FC7               	movwf	(___ftadd@f2+2)& (0+255),b
  5459  0024D6  EC8C  F00D         	call	___ftadd	;wreg free
  5460  0024DA  C0C2  F0D8         	movff	?___ftadd,log@x
  5461  0024DE  C0C3  F0D9         	movff	?___ftadd+1,log@x+1
  5462  0024E2  C0C4  F0DA         	movff	?___ftadd+2,log@x+2
  5463  0024E6  0100               	movlb	0	; () banked
  5464  0024E8  07DB               	decf	log@exponent& (0+255),f,b
  5465  0024EA  A0D8               	btfss	status,0,c
  5466  0024EC  07DC               	decf	(log@exponent+1)& (0+255),f,b
  5467                           
  5468                           ; BSR set to: 0
  5469  0024EE  C0D8  F0CE         	movff	log@x,eval_poly@x
  5470  0024F2  C0D9  F0CF         	movff	log@x+1,eval_poly@x+1
  5471  0024F6  C0DA  F0D0         	movff	log@x+2,eval_poly@x+2
  5472  0024FA  0E06               	movlw	high log@coeff
  5473  0024FC  0100               	movlb	0	; () banked
  5474  0024FE  6FD2               	movwf	(eval_poly@d+1)& (0+255),b
  5475  002500  0E77               	movlw	low log@coeff
  5476  002502  0100               	movlb	0	; () banked
  5477  002504  6FD1               	movwf	eval_poly@d& (0+255),b
  5478  002506  0E00               	movlw	0
  5479  002508  0100               	movlb	0	; () banked
  5480  00250A  6FD4               	movwf	(eval_poly@n+1)& (0+255),b
  5481  00250C  0E08               	movlw	8
  5482  00250E  0100               	movlb	0	; () banked
  5483  002510  6FD3               	movwf	eval_poly@n& (0+255),b
  5484  002512  EC38  F015         	call	_eval_poly	;wreg free
  5485  002516  C0CE  F0D8         	movff	?_eval_poly,log@x
  5486  00251A  C0CF  F0D9         	movff	?_eval_poly+1,log@x+1
  5487  00251E  C0D0  F0DA         	movff	?_eval_poly+2,log@x+2
  5488  002522  0E72               	movlw	114
  5489  002524  0100               	movlb	0	; () banked
  5490  002526  6FAF               	movwf	___ftmul@f2& (0+255),b
  5491  002528  0E31               	movlw	49
  5492  00252A  0100               	movlb	0	; () banked
  5493  00252C  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  5494  00252E  0E3F               	movlw	63
  5495  002530  0100               	movlb	0	; () banked
  5496  002532  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  5497  002534  C0DB  F02B         	movff	log@exponent,___awtoft@c
  5498  002538  C0DC  F02C         	movff	log@exponent+1,___awtoft@c+1
  5499  00253C  EC50  F01A         	call	___awtoft	;wreg free
  5500  002540  C02B  F0AC         	movff	?___awtoft,___ftmul@f1
  5501  002544  C02C  F0AD         	movff	?___awtoft+1,___ftmul@f1+1
  5502  002548  C02D  F0AE         	movff	?___awtoft+2,___ftmul@f1+2
  5503  00254C  ECBD  F012         	call	___ftmul	;wreg free
  5504  002550  C0AC  F0C2         	movff	?___ftmul,___ftadd@f1
  5505  002554  C0AD  F0C3         	movff	?___ftmul+1,___ftadd@f1+1
  5506  002558  C0AE  F0C4         	movff	?___ftmul+2,___ftadd@f1+2
  5507  00255C  C0D8  F0C5         	movff	log@x,___ftadd@f2
  5508  002560  C0D9  F0C6         	movff	log@x+1,___ftadd@f2+1
  5509  002564  C0DA  F0C7         	movff	log@x+2,___ftadd@f2+2
  5510  002568  EC8C  F00D         	call	___ftadd	;wreg free
  5511  00256C  C0C2  F0D8         	movff	?___ftadd,?_log
  5512  002570  C0C3  F0D9         	movff	?___ftadd+1,?_log+1
  5513  002574  C0C4  F0DA         	movff	?___ftadd+2,?_log+2
  5514  002578  0012               	return	
  5515  00257A                     __end_of_log:
  5516                           	opt stack 0
  5517                           tblptru	equ	0xFF8
  5518                           tblptrh	equ	0xFF7
  5519                           tblptrl	equ	0xFF6
  5520                           tablat	equ	0xFF5
  5521                           prodh	equ	0xFF4
  5522                           prodl	equ	0xFF3
  5523                           intcon	equ	0xFF2
  5524                           postinc0	equ	0xFEE
  5525                           wreg	equ	0xFE8
  5526                           indf2	equ	0xFDF
  5527                           postinc2	equ	0xFDE
  5528                           postdec2	equ	0xFDD
  5529                           fsr2h	equ	0xFDA
  5530                           fsr2l	equ	0xFD9
  5531                           status	equ	0xFD8
  5532                           
  5533 ;; *************** function _frexp *****************
  5534 ;; Defined at:
  5535 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;  value           3   22[COMRAM] int 
  5538 ;;  eptr            2   25[COMRAM] PTR int 
  5539 ;;		 -> log@exponent(2), 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;		None
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  3   22[COMRAM] PTR int 
  5544 ;; Registers used:
  5545 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5551 ;;      Params:         5       0       0       0       0       0       0
  5552 ;;      Locals:         0       0       0       0       0       0       0
  5553 ;;      Temps:          2       0       0       0       0       0       0
  5554 ;;      Totals:         7       0       0       0       0       0       0
  5555 ;;Total ram usage:        7 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:    4
  5558 ;; This function calls:
  5559 ;;		Nothing
  5560 ;; This function is called by:
  5561 ;;		_log
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           	psect	text17
  5566  00309C                     __ptext17:
  5567                           	opt stack 0
  5568  00309C                     _frexp:
  5569                           	opt stack 24
  5570                           
  5571                           ;incstack = 0
  5572  00309C  0E7F               	movlw	127
  5573  00309E  1419               	andwf	frexp@value+2,w,c
  5574  0030A0  1018               	iorwf	frexp@value+1,w,c
  5575  0030A2  1017               	iorwf	frexp@value,w,c
  5576  0030A4  A4D8               	btfss	status,2,c
  5577  0030A6  D00F               	goto	l3098
  5578  0030A8  C01A  FFD9         	movff	frexp@eptr,fsr2l
  5579  0030AC  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  5580  0030B0  0E00               	movlw	0
  5581  0030B2  6EDE               	movwf	postinc2,c
  5582  0030B4  0E00               	movlw	0
  5583  0030B6  6EDD               	movwf	postdec2,c
  5584  0030B8  0E00               	movlw	0
  5585  0030BA  6E17               	movwf	?_frexp,c
  5586  0030BC  0E00               	movlw	0
  5587  0030BE  6E18               	movwf	?_frexp+1,c
  5588  0030C0  0E00               	movlw	0
  5589  0030C2  6E19               	movwf	?_frexp+2,c
  5590  0030C4  0012               	return	
  5591  0030C6                     l3098:
  5592  0030C6  5019               	movf	frexp@value+2,w,c
  5593  0030C8  0B7F               	andlw	127
  5594  0030CA  6E1C               	movwf	??_frexp& (0+255),c
  5595  0030CC  6A1D               	clrf	(??_frexp+1)& (0+255),c
  5596  0030CE  90D8               	bcf	status,0,c
  5597  0030D0  361C               	rlcf	??_frexp,f,c
  5598  0030D2  361D               	rlcf	??_frexp+1,f,c
  5599  0030D4  C01A  FFD9         	movff	frexp@eptr,fsr2l
  5600  0030D8  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  5601  0030DC  C01C  FFDE         	movff	??_frexp,postinc2
  5602  0030E0  C01D  FFDD         	movff	??_frexp+1,postdec2
  5603  0030E4  AE18               	btfss	frexp@value+1,7,c
  5604  0030E6  D003               	goto	u2500
  5605  0030E8  6A1C               	clrf	??_frexp& (0+255),c
  5606  0030EA  2A1C               	incf	??_frexp& (0+255),f,c
  5607  0030EC  D001               	goto	u2508
  5608  0030EE                     u2500:
  5609  0030EE  6A1C               	clrf	??_frexp& (0+255),c
  5610  0030F0                     u2508:
  5611  0030F0  501C               	movf	??_frexp,w,c
  5612  0030F2  C01A  FFD9         	movff	frexp@eptr,fsr2l
  5613  0030F6  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  5614  0030FA  12DE               	iorwf	postinc2,f,c
  5615  0030FC  0E00               	movlw	0
  5616  0030FE  12DD               	iorwf	postdec2,f,c
  5617  003100  C01A  FFD9         	movff	frexp@eptr,fsr2l
  5618  003104  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  5619  003108  0E82               	movlw	130
  5620  00310A  26DE               	addwf	postinc2,f,c
  5621  00310C  0EFF               	movlw	255
  5622  00310E  22DD               	addwfc	postdec2,f,c
  5623  003110  8019               	bsf	frexp@value+2,0,c
  5624  003112  8219               	bsf	frexp@value+2,1,c
  5625  003114  8419               	bsf	frexp@value+2,2,c
  5626  003116  8619               	bsf	frexp@value+2,3,c
  5627  003118  8819               	bsf	frexp@value+2,4,c
  5628  00311A  8A19               	bsf	frexp@value+2,5,c
  5629  00311C  9C19               	bcf	frexp@value+2,6,c
  5630  00311E  9E18               	bcf	frexp@value+1,7,c
  5631  003120  C017  F017         	movff	frexp@value,?_frexp
  5632  003124  C018  F018         	movff	frexp@value+1,?_frexp+1
  5633  003128  C019  F019         	movff	frexp@value+2,?_frexp+2
  5634  00312C  0012               	return	
  5635  00312E                     __end_of_frexp:
  5636                           	opt stack 0
  5637                           tblptru	equ	0xFF8
  5638                           tblptrh	equ	0xFF7
  5639                           tblptrl	equ	0xFF6
  5640                           tablat	equ	0xFF5
  5641                           prodh	equ	0xFF4
  5642                           prodl	equ	0xFF3
  5643                           intcon	equ	0xFF2
  5644                           postinc0	equ	0xFEE
  5645                           wreg	equ	0xFE8
  5646                           indf2	equ	0xFDF
  5647                           postinc2	equ	0xFDE
  5648                           postdec2	equ	0xFDD
  5649                           fsr2h	equ	0xFDA
  5650                           fsr2l	equ	0xFD9
  5651                           status	equ	0xFD8
  5652                           
  5653 ;; *************** function _eval_poly *****************
  5654 ;; Defined at:
  5655 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\evalpoly.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  x               3   34[BANK0 ] PTR int 
  5658 ;;  d               2   37[BANK0 ] PTR const 
  5659 ;;		 -> log@coeff(27), 
  5660 ;;  n               2   39[BANK0 ] int 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  res             3   41[BANK0 ] int 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  3   34[BANK0 ] int 
  5665 ;; Registers used:
  5666 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5672 ;;      Params:         0       7       0       0       0       0       0
  5673 ;;      Locals:         0       3       0       0       0       0       0
  5674 ;;      Temps:          2       0       0       0       0       0       0
  5675 ;;      Totals:         2      10       0       0       0       0       0
  5676 ;;Total ram usage:       12 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    6
  5679 ;; This function calls:
  5680 ;;		___ftadd
  5681 ;;		___ftmul
  5682 ;;		___wmul
  5683 ;; This function is called by:
  5684 ;;		_log
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           	psect	text18
  5689  002A70                     __ptext18:
  5690                           	opt stack 0
  5691  002A70                     _eval_poly:
  5692                           	opt stack 22
  5693                           
  5694                           ;incstack = 0
  5695  002A70  C0D3  F025         	movff	eval_poly@n,___wmul@multiplier
  5696  002A74  C0D4  F026         	movff	eval_poly@n+1,___wmul@multiplier+1
  5697  002A78  0E00               	movlw	0
  5698  002A7A  6E28               	movwf	___wmul@multiplicand+1,c
  5699  002A7C  0E03               	movlw	3
  5700  002A7E  6E27               	movwf	___wmul@multiplicand,c
  5701  002A80  EC57  F01B         	call	___wmul	;wreg free
  5702  002A84  0100               	movlb	0	; () banked
  5703  002A86  C0D1  F032         	movff	eval_poly@d,??_eval_poly
  5704  002A8A  0100               	movlb	0	; () banked
  5705  002A8C  C0D2  F033         	movff	eval_poly@d+1,??_eval_poly+1
  5706  002A90  5025               	movf	?___wmul,w,c
  5707  002A92  2632               	addwf	??_eval_poly,f,c
  5708  002A94  5026               	movf	?___wmul+1,w,c
  5709  002A96  2233               	addwfc	??_eval_poly+1,f,c
  5710  002A98  C032  FFF6         	movff	??_eval_poly,tblptrl
  5711  002A9C  C033  FFF7         	movff	??_eval_poly+1,tblptrh
  5712  002AA0                     	if	0	;tblptru may be non-zero
  5713  002AA0                     	endif
  5714  002AA0                     	if	0	;tblptru may be non-zero
  5715  002AA0                     	endif
  5716  002AA0  0009               	tblrd		*+
  5717  002AA2  0100               	movlb	0	; () banked
  5718  002AA4  CFF5 F0D5          	movff	tablat,eval_poly@res
  5719  002AA8  0009               	tblrd		*+
  5720  002AAA  0100               	movlb	0	; () banked
  5721  002AAC  CFF5 F0D6          	movff	tablat,eval_poly@res+1
  5722  002AB0  000A               	tblrd		*-
  5723  002AB2  0100               	movlb	0	; () banked
  5724  002AB4  CFF5 F0D7          	movff	tablat,eval_poly@res+2
  5725  002AB8  D044               	goto	l4500
  5726  002ABA                     l4498:
  5727                           
  5728                           ; BSR set to: 0
  5729  002ABA  C0D5  F0AF         	movff	eval_poly@res,___ftmul@f2
  5730  002ABE  C0D6  F0B0         	movff	eval_poly@res+1,___ftmul@f2+1
  5731  002AC2  C0D7  F0B1         	movff	eval_poly@res+2,___ftmul@f2+2
  5732  002AC6  C0CE  F0AC         	movff	eval_poly@x,___ftmul@f1
  5733  002ACA  C0CF  F0AD         	movff	eval_poly@x+1,___ftmul@f1+1
  5734  002ACE  C0D0  F0AE         	movff	eval_poly@x+2,___ftmul@f1+2
  5735  002AD2  ECBD  F012         	call	___ftmul	;wreg free
  5736  002AD6  C0AC  F0C2         	movff	?___ftmul,___ftadd@f1
  5737  002ADA  C0AD  F0C3         	movff	?___ftmul+1,___ftadd@f1+1
  5738  002ADE  C0AE  F0C4         	movff	?___ftmul+2,___ftadd@f1+2
  5739  002AE2  0E00               	movlw	0
  5740  002AE4  6E28               	movwf	___wmul@multiplicand+1,c
  5741  002AE6  0E03               	movlw	3
  5742  002AE8  6E27               	movwf	___wmul@multiplicand,c
  5743  002AEA  0100               	movlb	0	; () banked
  5744  002AEC  07D3               	decf	eval_poly@n& (0+255),f,b
  5745  002AEE  A0D8               	btfss	status,0,c
  5746  002AF0  07D4               	decf	(eval_poly@n+1)& (0+255),f,b
  5747  002AF2  C0D3  F025         	movff	eval_poly@n,___wmul@multiplier
  5748  002AF6  C0D4  F026         	movff	eval_poly@n+1,___wmul@multiplier+1
  5749  002AFA  EC57  F01B         	call	___wmul	;wreg free
  5750  002AFE  0100               	movlb	0	; () banked
  5751  002B00  C0D1  F032         	movff	eval_poly@d,??_eval_poly
  5752  002B04  0100               	movlb	0	; () banked
  5753  002B06  C0D2  F033         	movff	eval_poly@d+1,??_eval_poly+1
  5754  002B0A  5025               	movf	?___wmul,w,c
  5755  002B0C  2632               	addwf	??_eval_poly,f,c
  5756  002B0E  5026               	movf	?___wmul+1,w,c
  5757  002B10  2233               	addwfc	??_eval_poly+1,f,c
  5758  002B12  C032  FFF6         	movff	??_eval_poly,tblptrl
  5759  002B16  C033  FFF7         	movff	??_eval_poly+1,tblptrh
  5760  002B1A                     	if	0	;tblptru may be non-zero
  5761  002B1A                     	endif
  5762  002B1A                     	if	0	;tblptru may be non-zero
  5763  002B1A                     	endif
  5764  002B1A  0009               	tblrd		*+
  5765  002B1C  0100               	movlb	0	; () banked
  5766  002B1E  CFF5 F0C5          	movff	tablat,___ftadd@f2
  5767  002B22  0009               	tblrd		*+
  5768  002B24  0100               	movlb	0	; () banked
  5769  002B26  CFF5 F0C6          	movff	tablat,___ftadd@f2+1
  5770  002B2A  000A               	tblrd		*-
  5771  002B2C  0100               	movlb	0	; () banked
  5772  002B2E  CFF5 F0C7          	movff	tablat,___ftadd@f2+2
  5773  002B32  EC8C  F00D         	call	___ftadd	;wreg free
  5774  002B36  C0C2  F0D5         	movff	?___ftadd,eval_poly@res
  5775  002B3A  C0C3  F0D6         	movff	?___ftadd+1,eval_poly@res+1
  5776  002B3E  C0C4  F0D7         	movff	?___ftadd+2,eval_poly@res+2
  5777  002B42                     l4500:
  5778  002B42  0100               	movlb	0	; () banked
  5779  002B44  51D4               	movf	(eval_poly@n+1)& (0+255),w,b
  5780  002B46  11D3               	iorwf	eval_poly@n& (0+255),w,b
  5781  002B48  A4D8               	btfss	status,2,c
  5782  002B4A  D7B7               	goto	l4498
  5783                           
  5784                           ; BSR set to: 0
  5785  002B4C  C0D5  F0CE         	movff	eval_poly@res,?_eval_poly
  5786  002B50  C0D6  F0CF         	movff	eval_poly@res+1,?_eval_poly+1
  5787  002B54  C0D7  F0D0         	movff	eval_poly@res+2,?_eval_poly+2
  5788                           
  5789                           ; BSR set to: 0
  5790  002B58  0012               	return	
  5791  002B5A                     __end_of_eval_poly:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodh	equ	0xFF4
  5798                           prodl	equ	0xFF3
  5799                           intcon	equ	0xFF2
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           indf2	equ	0xFDF
  5803                           postinc2	equ	0xFDE
  5804                           postdec2	equ	0xFDD
  5805                           fsr2h	equ	0xFDA
  5806                           fsr2l	equ	0xFD9
  5807                           status	equ	0xFD8
  5808                           
  5809 ;; *************** function ___ftsub *****************
  5810 ;; Defined at:
  5811 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;  f1              3   34[BANK0 ] float 
  5814 ;;  f2              3   37[BANK0 ] float 
  5815 ;; Auto vars:     Size  Location     Type
  5816 ;;		None
  5817 ;; Return value:  Size  Location     Type
  5818 ;;                  3   34[BANK0 ] float 
  5819 ;; Registers used:
  5820 ;;		wreg, status,2, status,0, cstack
  5821 ;; Tracked objects:
  5822 ;;		On entry : 0/0
  5823 ;;		On exit  : 0/0
  5824 ;;		Unchanged: 0/0
  5825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5826 ;;      Params:         0       6       0       0       0       0       0
  5827 ;;      Locals:         0       0       0       0       0       0       0
  5828 ;;      Temps:          0       0       0       0       0       0       0
  5829 ;;      Totals:         0       6       0       0       0       0       0
  5830 ;;Total ram usage:        6 bytes
  5831 ;; Hardware stack levels used:    1
  5832 ;; Hardware stack levels required when called:    6
  5833 ;; This function calls:
  5834 ;;		___ftadd
  5835 ;; This function is called by:
  5836 ;;		_Temp_Convert
  5837 ;;		_printf
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           	psect	text19
  5842  0034E8                     __ptext19:
  5843                           	opt stack 0
  5844  0034E8                     ___ftsub:
  5845                           	opt stack 23
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;incstack = 0
  5849  0034E8  0E00               	movlw	0
  5850  0034EA  0100               	movlb	0	; () banked
  5851  0034EC  1BD1               	xorwf	___ftsub@f2& (0+255),f,b
  5852  0034EE  0E00               	movlw	0
  5853  0034F0  0100               	movlb	0	; () banked
  5854  0034F2  1BD2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5855  0034F4  0E80               	movlw	128
  5856  0034F6  0100               	movlb	0	; () banked
  5857  0034F8  1BD3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5858                           
  5859                           ; BSR set to: 0
  5860  0034FA  C0CE  F0C2         	movff	___ftsub@f1,___ftadd@f1
  5861  0034FE  C0CF  F0C3         	movff	___ftsub@f1+1,___ftadd@f1+1
  5862  003502  C0D0  F0C4         	movff	___ftsub@f1+2,___ftadd@f1+2
  5863  003506  C0D1  F0C5         	movff	___ftsub@f2,___ftadd@f2
  5864  00350A  C0D2  F0C6         	movff	___ftsub@f2+1,___ftadd@f2+1
  5865  00350E  C0D3  F0C7         	movff	___ftsub@f2+2,___ftadd@f2+2
  5866  003512  EC8C  F00D         	call	___ftadd	;wreg free
  5867  003516  C0C2  F0CE         	movff	?___ftadd,?___ftsub
  5868  00351A  C0C3  F0CF         	movff	?___ftadd+1,?___ftsub+1
  5869  00351E  C0C4  F0D0         	movff	?___ftadd+2,?___ftsub+2
  5870  003522  0012               	return	
  5871  003524                     __end_of___ftsub:
  5872                           	opt stack 0
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           prodh	equ	0xFF4
  5878                           prodl	equ	0xFF3
  5879                           intcon	equ	0xFF2
  5880                           postinc0	equ	0xFEE
  5881                           wreg	equ	0xFE8
  5882                           indf2	equ	0xFDF
  5883                           postinc2	equ	0xFDE
  5884                           postdec2	equ	0xFDD
  5885                           fsr2h	equ	0xFDA
  5886                           fsr2l	equ	0xFD9
  5887                           status	equ	0xFD8
  5888                           
  5889 ;; *************** function ___ftdiv *****************
  5890 ;; Defined at:
  5891 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;  f1              3   30[COMRAM] float 
  5894 ;;  f2              3   33[COMRAM] float 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  f3              3   40[COMRAM] float 
  5897 ;;  sign            1   44[COMRAM] unsigned char 
  5898 ;;  exp             1   43[COMRAM] unsigned char 
  5899 ;;  cntr            1   39[COMRAM] unsigned char 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  3   30[COMRAM] float 
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5909 ;;      Params:         6       0       0       0       0       0       0
  5910 ;;      Locals:         6       0       0       0       0       0       0
  5911 ;;      Temps:          3       0       0       0       0       0       0
  5912 ;;      Totals:        15       0       0       0       0       0       0
  5913 ;;Total ram usage:       15 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    5
  5916 ;; This function calls:
  5917 ;;		___ftpack
  5918 ;; This function is called by:
  5919 ;;		_Temp_Convert
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text20
  5924  002C42                     __ptext20:
  5925                           	opt stack 0
  5926  002C42                     ___ftdiv:
  5927                           	opt stack 24
  5928                           
  5929                           ;incstack = 0
  5930  002C42  C021  F025         	movff	___ftdiv@f1+2,??___ftdiv
  5931  002C46  6A26               	clrf	(??___ftdiv+1)& (0+255),c
  5932  002C48  6A27               	clrf	(??___ftdiv+2)& (0+255),c
  5933  002C4A  3420               	rlcf	___ftdiv@f1+1,w,c
  5934  002C4C  3625               	rlcf	??___ftdiv& (0+255),f,c
  5935  002C4E  E301               	bnc	u4891
  5936  002C50  8026               	bsf	(??___ftdiv+1)& (0+255),0,c
  5937  002C52                     u4891:
  5938  002C52  5025               	movf	??___ftdiv,w,c
  5939  002C54  6E2C               	movwf	___ftdiv@exp,c
  5940  002C56  662C               	tstfsz	___ftdiv@exp& (0+255),c
  5941  002C58  D007               	goto	l4786
  5942  002C5A  0E00               	movlw	0
  5943  002C5C  6E1F               	movwf	?___ftdiv,c
  5944  002C5E  0E00               	movlw	0
  5945  002C60  6E20               	movwf	?___ftdiv+1,c
  5946  002C62  0E00               	movlw	0
  5947  002C64  6E21               	movwf	?___ftdiv+2,c
  5948  002C66  0012               	return	
  5949  002C68                     l4786:
  5950  002C68  C024  F025         	movff	___ftdiv@f2+2,??___ftdiv
  5951  002C6C  6A26               	clrf	(??___ftdiv+1)& (0+255),c
  5952  002C6E  6A27               	clrf	(??___ftdiv+2)& (0+255),c
  5953  002C70  3423               	rlcf	___ftdiv@f2+1,w,c
  5954  002C72  3625               	rlcf	??___ftdiv& (0+255),f,c
  5955  002C74  E301               	bnc	u4911
  5956  002C76  8026               	bsf	(??___ftdiv+1)& (0+255),0,c
  5957  002C78                     u4911:
  5958  002C78  5025               	movf	??___ftdiv,w,c
  5959  002C7A  6E2D               	movwf	___ftdiv@sign,c
  5960  002C7C  662D               	tstfsz	___ftdiv@sign& (0+255),c
  5961  002C7E  D007               	goto	l4792
  5962  002C80  0E00               	movlw	0
  5963  002C82  6E1F               	movwf	?___ftdiv,c
  5964  002C84  0E00               	movlw	0
  5965  002C86  6E20               	movwf	?___ftdiv+1,c
  5966  002C88  0E00               	movlw	0
  5967  002C8A  6E21               	movwf	?___ftdiv+2,c
  5968  002C8C  0012               	return	
  5969  002C8E                     l4792:
  5970  002C8E  0E00               	movlw	0
  5971  002C90  6E29               	movwf	___ftdiv@f3,c
  5972  002C92  0E00               	movlw	0
  5973  002C94  6E2A               	movwf	___ftdiv@f3+1,c
  5974  002C96  0E00               	movlw	0
  5975  002C98  6E2B               	movwf	___ftdiv@f3+2,c
  5976  002C9A  502D               	movf	___ftdiv@sign,w,c
  5977  002C9C  0F89               	addlw	137
  5978  002C9E  5E2C               	subwf	___ftdiv@exp,f,c
  5979  002CA0  C021  F02D         	movff	___ftdiv@f1+2,___ftdiv@sign
  5980  002CA4  5024               	movf	___ftdiv@f2+2,w,c
  5981  002CA6  1A2D               	xorwf	___ftdiv@sign,f,c
  5982  002CA8  0E80               	movlw	128
  5983  002CAA  162D               	andwf	___ftdiv@sign,f,c
  5984  002CAC  8E20               	bsf	___ftdiv@f1+1,7,c
  5985  002CAE  0EFF               	movlw	255
  5986  002CB0  161F               	andwf	___ftdiv@f1,f,c
  5987  002CB2  0EFF               	movlw	255
  5988  002CB4  1620               	andwf	___ftdiv@f1+1,f,c
  5989  002CB6  0E00               	movlw	0
  5990  002CB8  1621               	andwf	___ftdiv@f1+2,f,c
  5991  002CBA  8E23               	bsf	___ftdiv@f2+1,7,c
  5992  002CBC  0EFF               	movlw	255
  5993  002CBE  1622               	andwf	___ftdiv@f2,f,c
  5994  002CC0  0EFF               	movlw	255
  5995  002CC2  1623               	andwf	___ftdiv@f2+1,f,c
  5996  002CC4  0E00               	movlw	0
  5997  002CC6  1624               	andwf	___ftdiv@f2+2,f,c
  5998  002CC8  0E18               	movlw	24
  5999  002CCA  6E28               	movwf	___ftdiv@cntr,c
  6000  002CCC                     l4812:
  6001  002CCC  90D8               	bcf	status,0,c
  6002  002CCE  3629               	rlcf	___ftdiv@f3,f,c
  6003  002CD0  362A               	rlcf	___ftdiv@f3+1,f,c
  6004  002CD2  362B               	rlcf	___ftdiv@f3+2,f,c
  6005  002CD4  5022               	movf	___ftdiv@f2,w,c
  6006  002CD6  5C1F               	subwf	___ftdiv@f1,w,c
  6007  002CD8  5023               	movf	___ftdiv@f2+1,w,c
  6008  002CDA  5820               	subwfb	___ftdiv@f1+1,w,c
  6009  002CDC  5024               	movf	___ftdiv@f2+2,w,c
  6010  002CDE  5821               	subwfb	___ftdiv@f1+2,w,c
  6011  002CE0  A0D8               	btfss	status,0,c
  6012  002CE2  D007               	goto	l1058
  6013  002CE4  5022               	movf	___ftdiv@f2,w,c
  6014  002CE6  5E1F               	subwf	___ftdiv@f1,f,c
  6015  002CE8  5023               	movf	___ftdiv@f2+1,w,c
  6016  002CEA  5A20               	subwfb	___ftdiv@f1+1,f,c
  6017  002CEC  5024               	movf	___ftdiv@f2+2,w,c
  6018  002CEE  5A21               	subwfb	___ftdiv@f1+2,f,c
  6019  002CF0  8029               	bsf	___ftdiv@f3,0,c
  6020  002CF2                     l1058:
  6021  002CF2  90D8               	bcf	status,0,c
  6022  002CF4  361F               	rlcf	___ftdiv@f1,f,c
  6023  002CF6  3620               	rlcf	___ftdiv@f1+1,f,c
  6024  002CF8  3621               	rlcf	___ftdiv@f1+2,f,c
  6025  002CFA  2E28               	decfsz	___ftdiv@cntr,f,c
  6026  002CFC  D7E7               	goto	l4812
  6027  002CFE  C029  F017         	movff	___ftdiv@f3,___ftpack@arg
  6028  002D02  C02A  F018         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6029  002D06  C02B  F019         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6030  002D0A  C02C  F01A         	movff	___ftdiv@exp,___ftpack@exp
  6031  002D0E  C02D  F01B         	movff	___ftdiv@sign,___ftpack@sign
  6032  002D12  ECA8  F017         	call	___ftpack	;wreg free
  6033  002D16  C017  F01F         	movff	?___ftpack,?___ftdiv
  6034  002D1A  C018  F020         	movff	?___ftpack+1,?___ftdiv+1
  6035  002D1E  C019  F021         	movff	?___ftpack+2,?___ftdiv+2
  6036  002D22  0012               	return	
  6037  002D24                     __end_of___ftdiv:
  6038                           	opt stack 0
  6039                           tblptru	equ	0xFF8
  6040                           tblptrh	equ	0xFF7
  6041                           tblptrl	equ	0xFF6
  6042                           tablat	equ	0xFF5
  6043                           prodh	equ	0xFF4
  6044                           prodl	equ	0xFF3
  6045                           intcon	equ	0xFF2
  6046                           postinc0	equ	0xFEE
  6047                           wreg	equ	0xFE8
  6048                           indf2	equ	0xFDF
  6049                           postinc2	equ	0xFDE
  6050                           postdec2	equ	0xFDD
  6051                           fsr2h	equ	0xFDA
  6052                           fsr2l	equ	0xFD9
  6053                           status	equ	0xFD8
  6054                           
  6055 ;; *************** function _Temp_Filter *****************
  6056 ;; Defined at:
  6057 ;;		line 36 in file "Tempeture.c"
  6058 ;; Parameters:    Size  Location     Type
  6059 ;;		None
  6060 ;; Auto vars:     Size  Location     Type
  6061 ;;  x               2   49[COMRAM] int 
  6062 ;; Return value:  Size  Location     Type
  6063 ;;		None               void
  6064 ;; Registers used:
  6065 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6071 ;;      Params:         0       0       0       0       0       0       0
  6072 ;;      Locals:         2       0       0       0       0       0       0
  6073 ;;      Temps:          0       0       0       0       0       0       0
  6074 ;;      Totals:         2       0       0       0       0       0       0
  6075 ;;Total ram usage:        2 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:    6
  6078 ;; This function calls:
  6079 ;;		___ftadd
  6080 ;;		___ftmul
  6081 ;;		___wmul
  6082 ;; This function is called by:
  6083 ;;		_Temp_Convert
  6084 ;; This function uses a non-reentrant model
  6085 ;;
  6086                           
  6087                           	psect	text21
  6088  00211C                     __ptext21:
  6089                           	opt stack 0
  6090  00211C                     _Temp_Filter:
  6091                           	opt stack 23
  6092                           
  6093                           ;Tempeture.c: 39: int x;
  6094                           ;Tempeture.c: 40: for(x = 0; x < 10; x++)
  6095                           
  6096                           ;incstack = 0
  6097  00211C  0E00               	movlw	0
  6098  00211E  6E33               	movwf	Temp_Filter@x+1,c
  6099  002120  0E00               	movlw	0
  6100  002122  6E32               	movwf	Temp_Filter@x,c
  6101  002124  5033               	movf	Temp_Filter@x+1,w,c
  6102  002126  0A80               	xorlw	128
  6103  002128  0F80               	addlw	-128
  6104  00212A  0E0A               	movlw	10
  6105  00212C  B4D8               	btfsc	status,2,c
  6106  00212E  5C32               	subwf	Temp_Filter@x,w,c
  6107  002130  B0D8               	btfsc	status,0,c
  6108  002132  D076               	goto	l4544
  6109                           
  6110                           ;Tempeture.c: 41: {
  6111                           ;Tempeture.c: 42: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  6112  002134  C032  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6113  002138  C033  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6114  00213C  0E00               	movlw	0
  6115  00213E  6E28               	movwf	___wmul@multiplicand+1,c
  6116  002140  0E03               	movlw	3
  6117  002142  6E27               	movwf	___wmul@multiplicand,c
  6118  002144  EC57  F01B         	call	___wmul	;wreg free
  6119  002148  0101               	movlb	1	; () banked
  6120  00214A  0E6E               	movlw	low _Temp_DegF
  6121  00214C  2425               	addwf	?___wmul,w,c
  6122  00214E  6ED9               	movwf	fsr2l,c
  6123  002150  0101               	movlb	1	; () banked
  6124  002152  0E01               	movlw	high _Temp_DegF
  6125  002154  2026               	addwfc	?___wmul+1,w,c
  6126  002156  6EDA               	movwf	fsr2h,c
  6127  002158  0E48               	movlw	72
  6128  00215A  0100               	movlb	0	; () banked
  6129  00215C  6FAF               	movwf	___ftmul@f2& (0+255),b
  6130  00215E  0E61               	movlw	97
  6131  002160  0100               	movlb	0	; () banked
  6132  002162  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  6133  002164  0E3F               	movlw	63
  6134  002166  0100               	movlb	0	; () banked
  6135  002168  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  6136  00216A  C032  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6137  00216E  C033  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6138  002172  0E00               	movlw	0
  6139  002174  6E28               	movwf	___wmul@multiplicand+1,c
  6140  002176  0E03               	movlw	3
  6141  002178  6E27               	movwf	___wmul@multiplicand,c
  6142  00217A  EC57  F01B         	call	___wmul	;wreg free
  6143  00217E  0101               	movlb	1	; () banked
  6144  002180  0EAA               	movlw	low _TmpTemp_DegF
  6145  002182  2425               	addwf	?___wmul,w,c
  6146  002184  6EE1               	movwf	fsr1l,c
  6147  002186  0101               	movlb	1	; () banked
  6148  002188  0E01               	movlw	high _TmpTemp_DegF
  6149  00218A  2026               	addwfc	?___wmul+1,w,c
  6150  00218C  6EE2               	movwf	fsr1h,c
  6151  00218E  0100               	movlb	0	; () banked
  6152  002190  CFE6 F0AC          	movff	postinc1,___ftmul@f1
  6153  002194  0100               	movlb	0	; () banked
  6154  002196  CFE6 F0AD          	movff	postinc1,___ftmul@f1+1
  6155  00219A  0100               	movlb	0	; () banked
  6156  00219C  CFE5 F0AE          	movff	postdec1,___ftmul@f1+2
  6157  0021A0  ECBD  F012         	call	___ftmul	;wreg free
  6158  0021A4  C0AC  F0C2         	movff	?___ftmul,___ftadd@f1
  6159  0021A8  C0AD  F0C3         	movff	?___ftmul+1,___ftadd@f1+1
  6160  0021AC  C0AE  F0C4         	movff	?___ftmul+2,___ftadd@f1+2
  6161  0021B0  0EC3               	movlw	195
  6162  0021B2  0100               	movlb	0	; () banked
  6163  0021B4  6FAF               	movwf	___ftmul@f2& (0+255),b
  6164  0021B6  0EF5               	movlw	245
  6165  0021B8  0100               	movlb	0	; () banked
  6166  0021BA  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  6167  0021BC  0E3D               	movlw	61
  6168  0021BE  0100               	movlb	0	; () banked
  6169  0021C0  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  6170  0021C2  0E00               	movlw	0
  6171  0021C4  6E28               	movwf	___wmul@multiplicand+1,c
  6172  0021C6  0E03               	movlw	3
  6173  0021C8  6E27               	movwf	___wmul@multiplicand,c
  6174  0021CA  C032  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6175  0021CE  C033  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6176  0021D2  EC57  F01B         	call	___wmul	;wreg free
  6177  0021D6  0101               	movlb	1	; () banked
  6178  0021D8  0E50               	movlw	low _PrevTemp_DegF
  6179  0021DA  2425               	addwf	?___wmul,w,c
  6180  0021DC  6EE1               	movwf	fsr1l,c
  6181  0021DE  0101               	movlb	1	; () banked
  6182  0021E0  0E01               	movlw	high _PrevTemp_DegF
  6183  0021E2  2026               	addwfc	?___wmul+1,w,c
  6184  0021E4  6EE2               	movwf	fsr1h,c
  6185  0021E6  0100               	movlb	0	; () banked
  6186  0021E8  CFE6 F0AC          	movff	postinc1,___ftmul@f1
  6187  0021EC  0100               	movlb	0	; () banked
  6188  0021EE  CFE6 F0AD          	movff	postinc1,___ftmul@f1+1
  6189  0021F2  0100               	movlb	0	; () banked
  6190  0021F4  CFE5 F0AE          	movff	postdec1,___ftmul@f1+2
  6191  0021F8  ECBD  F012         	call	___ftmul	;wreg free
  6192  0021FC  C0AC  F0C5         	movff	?___ftmul,___ftadd@f2
  6193  002200  C0AD  F0C6         	movff	?___ftmul+1,___ftadd@f2+1
  6194  002204  C0AE  F0C7         	movff	?___ftmul+2,___ftadd@f2+2
  6195  002208  EC8C  F00D         	call	___ftadd	;wreg free
  6196  00220C  C0C2  FFDE         	movff	?___ftadd,postinc2
  6197  002210  C0C3  FFDE         	movff	?___ftadd+1,postinc2
  6198  002214  C0C4  FFDD         	movff	?___ftadd+2,postdec2
  6199  002218  52DD               	movf	postdec2,f,c
  6200  00221A  4A32               	infsnz	Temp_Filter@x,f,c
  6201  00221C  2A33               	incf	Temp_Filter@x+1,f,c
  6202  00221E  D782               	goto	L8
  6203  002220                     l4544:
  6204                           
  6205                           ;Tempeture.c: 43: }
  6206                           ;Tempeture.c: 44: for(x = 0; x < 10; x++)
  6207  002220  0E00               	movlw	0
  6208  002222  6E33               	movwf	Temp_Filter@x+1,c
  6209  002224  0E00               	movlw	0
  6210  002226  6E32               	movwf	Temp_Filter@x,c
  6211  002228  5033               	movf	Temp_Filter@x+1,w,c
  6212  00222A  0A80               	xorlw	128
  6213  00222C  0F80               	addlw	-128
  6214  00222E  0E0A               	movlw	10
  6215  002230  B4D8               	btfsc	status,2,c
  6216  002232  5C32               	subwf	Temp_Filter@x,w,c
  6217  002234  B0D8               	btfsc	status,0,c
  6218  002236  0012               	return	
  6219                           
  6220                           ;Tempeture.c: 45: {
  6221                           ;Tempeture.c: 46: PrevTemp_DegF[x] = Temp_DegF[x];
  6222  002238  C032  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6223  00223C  C033  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6224  002240  0E00               	movlw	0
  6225  002242  6E28               	movwf	___wmul@multiplicand+1,c
  6226  002244  0E03               	movlw	3
  6227  002246  6E27               	movwf	___wmul@multiplicand,c
  6228  002248  EC57  F01B         	call	___wmul	;wreg free
  6229  00224C  0101               	movlb	1	; () banked
  6230  00224E  0E6E               	movlw	low _Temp_DegF
  6231  002250  2425               	addwf	?___wmul,w,c
  6232  002252  6ED9               	movwf	fsr2l,c
  6233  002254  0101               	movlb	1	; () banked
  6234  002256  0E01               	movlw	high _Temp_DegF
  6235  002258  2026               	addwfc	?___wmul+1,w,c
  6236  00225A  6EDA               	movwf	fsr2h,c
  6237  00225C  C032  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6238  002260  C033  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6239  002264  0E00               	movlw	0
  6240  002266  6E28               	movwf	___wmul@multiplicand+1,c
  6241  002268  0E03               	movlw	3
  6242  00226A  6E27               	movwf	___wmul@multiplicand,c
  6243  00226C  EC57  F01B         	call	___wmul	;wreg free
  6244  002270  0101               	movlb	1	; () banked
  6245  002272  0E50               	movlw	low _PrevTemp_DegF
  6246  002274  2425               	addwf	?___wmul,w,c
  6247  002276  6EE1               	movwf	fsr1l,c
  6248  002278  0101               	movlb	1	; () banked
  6249  00227A  0E01               	movlw	high _PrevTemp_DegF
  6250  00227C  2026               	addwfc	?___wmul+1,w,c
  6251  00227E  6EE2               	movwf	fsr1h,c
  6252  002280  CFDE FFE6          	movff	postinc2,postinc1
  6253  002284  CFDE FFE6          	movff	postinc2,postinc1
  6254  002288  CFDE FFE5          	movff	postinc2,postdec1
  6255  00228C  52E5               	movf	postdec1,f,c
  6256                           
  6257                           ; BSR set to: 1
  6258  00228E  4A32               	infsnz	Temp_Filter@x,f,c
  6259  002290  2A33               	incf	Temp_Filter@x+1,f,c
  6260  002292  D7CA               	goto	L9
  6261  002294                     __end_of_Temp_Filter:
  6262                           	opt stack 0
  6263                           tblptru	equ	0xFF8
  6264                           tblptrh	equ	0xFF7
  6265                           tblptrl	equ	0xFF6
  6266                           tablat	equ	0xFF5
  6267                           prodh	equ	0xFF4
  6268                           prodl	equ	0xFF3
  6269                           intcon	equ	0xFF2
  6270                           postinc0	equ	0xFEE
  6271                           wreg	equ	0xFE8
  6272                           postinc1	equ	0xFE6
  6273                           postdec1	equ	0xFE5
  6274                           fsr1h	equ	0xFE2
  6275                           fsr1l	equ	0xFE1
  6276                           indf2	equ	0xFDF
  6277                           postinc2	equ	0xFDE
  6278                           postdec2	equ	0xFDD
  6279                           fsr2h	equ	0xFDA
  6280                           fsr2l	equ	0xFD9
  6281                           status	equ	0xFD8
  6282                           
  6283 ;; *************** function _SYSTEM_Initialize *****************
  6284 ;; Defined at:
  6285 ;;		line 112 in file "mcc_generated_files/mcc.c"
  6286 ;; Parameters:    Size  Location     Type
  6287 ;;		None
  6288 ;; Auto vars:     Size  Location     Type
  6289 ;;		None
  6290 ;; Return value:  Size  Location     Type
  6291 ;;		None               void
  6292 ;; Registers used:
  6293 ;;		wreg, status,2, cstack
  6294 ;; Tracked objects:
  6295 ;;		On entry : 0/0
  6296 ;;		On exit  : 0/0
  6297 ;;		Unchanged: 0/0
  6298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6299 ;;      Params:         0       0       0       0       0       0       0
  6300 ;;      Locals:         0       0       0       0       0       0       0
  6301 ;;      Temps:          0       0       0       0       0       0       0
  6302 ;;      Totals:         0       0       0       0       0       0       0
  6303 ;;Total ram usage:        0 bytes
  6304 ;; Hardware stack levels used:    1
  6305 ;; Hardware stack levels required when called:    6
  6306 ;; This function calls:
  6307 ;;		_ADC_Initialize
  6308 ;;		_EUSART1_Initialize
  6309 ;;		_INTERRUPT_Initialize
  6310 ;;		_OSCILLATOR_Initialize
  6311 ;;		_PIN_MANAGER_Initialize
  6312 ;;		_TMR1_Initialize
  6313 ;; This function is called by:
  6314 ;;		_main
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           	psect	text22
  6319  0036F6                     __ptext22:
  6320                           	opt stack 0
  6321  0036F6                     _SYSTEM_Initialize:
  6322                           	opt stack 24
  6323                           
  6324                           ;mcc.c: 114: OSCILLATOR_Initialize();
  6325                           
  6326                           ;incstack = 0
  6327  0036F6  ECC3  F01B         	call	_OSCILLATOR_Initialize	;wreg free
  6328                           
  6329                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  6330  0036FA  EC04  F01A         	call	_PIN_MANAGER_Initialize	;wreg free
  6331                           
  6332                           ;mcc.c: 116: INTERRUPT_Initialize();
  6333  0036FE  ECCA  F01B         	call	_INTERRUPT_Initialize	;wreg free
  6334                           
  6335                           ;mcc.c: 117: ADC_Initialize();
  6336  003702  EC95  F01B         	call	_ADC_Initialize	;wreg free
  6337                           
  6338                           ;mcc.c: 118: EUSART1_Initialize();
  6339  003706  EC92  F01A         	call	_EUSART1_Initialize	;wreg free
  6340                           
  6341                           ;mcc.c: 119: TMR1_Initialize();
  6342  00370A  EC6A  F01B         	call	_TMR1_Initialize	;wreg free
  6343  00370E  0012               	return	
  6344  003710                     __end_of_SYSTEM_Initialize:
  6345                           	opt stack 0
  6346                           tblptru	equ	0xFF8
  6347                           tblptrh	equ	0xFF7
  6348                           tblptrl	equ	0xFF6
  6349                           tablat	equ	0xFF5
  6350                           prodh	equ	0xFF4
  6351                           prodl	equ	0xFF3
  6352                           intcon	equ	0xFF2
  6353                           postinc0	equ	0xFEE
  6354                           wreg	equ	0xFE8
  6355                           postinc1	equ	0xFE6
  6356                           postdec1	equ	0xFE5
  6357                           fsr1h	equ	0xFE2
  6358                           fsr1l	equ	0xFE1
  6359                           indf2	equ	0xFDF
  6360                           postinc2	equ	0xFDE
  6361                           postdec2	equ	0xFDD
  6362                           fsr2h	equ	0xFDA
  6363                           fsr2l	equ	0xFD9
  6364                           status	equ	0xFD8
  6365                           
  6366 ;; *************** function _TMR1_Initialize *****************
  6367 ;; Defined at:
  6368 ;;		line 15 in file "mcc_generated_files/tmr1.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;		None
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;		None
  6373 ;; Return value:  Size  Location     Type
  6374 ;;		None               void
  6375 ;; Registers used:
  6376 ;;		wreg, status,2, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6382 ;;      Params:         0       0       0       0       0       0       0
  6383 ;;      Locals:         0       0       0       0       0       0       0
  6384 ;;      Temps:          0       0       0       0       0       0       0
  6385 ;;      Totals:         0       0       0       0       0       0       0
  6386 ;;Total ram usage:        0 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    5
  6389 ;; This function calls:
  6390 ;;		_TMR1_StartTimer
  6391 ;; This function is called by:
  6392 ;;		_SYSTEM_Initialize
  6393 ;; This function uses a non-reentrant model
  6394 ;;
  6395                           
  6396                           	psect	text23
  6397  0036D4                     __ptext23:
  6398                           	opt stack 0
  6399  0036D4                     _TMR1_Initialize:
  6400                           	opt stack 24
  6401                           
  6402                           ;tmr1.c: 20: T1CON = 0x34;
  6403                           
  6404                           ;incstack = 0
  6405  0036D4  0E34               	movlw	52
  6406  0036D6  6ECD               	movwf	4045,c	;volatile
  6407                           
  6408                           ;tmr1.c: 23: T1GCON = 0x00;
  6409  0036D8  0E00               	movlw	0
  6410  0036DA  6ECC               	movwf	4044,c	;volatile
  6411                           
  6412                           ;tmr1.c: 26: TMR1H = 0x0B;
  6413  0036DC  0E0B               	movlw	11
  6414  0036DE  6ECF               	movwf	4047,c	;volatile
  6415                           
  6416                           ;tmr1.c: 29: TMR1L = 0xDC;
  6417  0036E0  0EDC               	movlw	220
  6418  0036E2  6ECE               	movwf	4046,c	;volatile
  6419                           
  6420                           ;tmr1.c: 32: timer1ReloadVal=TMR1;
  6421  0036E4  CFCE F047          	movff	4046,_timer1ReloadVal	;volatile
  6422  0036E8  CFCF F048          	movff	4047,_timer1ReloadVal+1	;volatile
  6423                           
  6424                           ;tmr1.c: 35: PIR1bits.TMR1IF = 0;
  6425  0036EC  909E               	bcf	3998,0,c	;volatile
  6426                           
  6427                           ;tmr1.c: 38: PIE1bits.TMR1IE = 1;
  6428  0036EE  809D               	bsf	3997,0,c	;volatile
  6429                           
  6430                           ;tmr1.c: 41: TMR1_StartTimer();
  6431  0036F0  ECD5  F01B         	call	_TMR1_StartTimer	;wreg free
  6432  0036F4  0012               	return	
  6433  0036F6                     __end_of_TMR1_Initialize:
  6434                           	opt stack 0
  6435                           tblptru	equ	0xFF8
  6436                           tblptrh	equ	0xFF7
  6437                           tblptrl	equ	0xFF6
  6438                           tablat	equ	0xFF5
  6439                           prodh	equ	0xFF4
  6440                           prodl	equ	0xFF3
  6441                           intcon	equ	0xFF2
  6442                           postinc0	equ	0xFEE
  6443                           wreg	equ	0xFE8
  6444                           postinc1	equ	0xFE6
  6445                           postdec1	equ	0xFE5
  6446                           fsr1h	equ	0xFE2
  6447                           fsr1l	equ	0xFE1
  6448                           indf2	equ	0xFDF
  6449                           postinc2	equ	0xFDE
  6450                           postdec2	equ	0xFDD
  6451                           fsr2h	equ	0xFDA
  6452                           fsr2l	equ	0xFD9
  6453                           status	equ	0xFD8
  6454                           
  6455 ;; *************** function _TMR1_StartTimer *****************
  6456 ;; Defined at:
  6457 ;;		line 44 in file "mcc_generated_files/tmr1.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;		None               void
  6464 ;; Registers used:
  6465 ;;		None
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6471 ;;      Params:         0       0       0       0       0       0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0
  6474 ;;      Totals:         0       0       0       0       0       0       0
  6475 ;;Total ram usage:        0 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; Hardware stack levels required when called:    4
  6478 ;; This function calls:
  6479 ;;		Nothing
  6480 ;; This function is called by:
  6481 ;;		_TMR1_Initialize
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485                           	psect	text24
  6486  0037AA                     __ptext24:
  6487                           	opt stack 0
  6488  0037AA                     _TMR1_StartTimer:
  6489                           	opt stack 24
  6490                           
  6491                           ;tmr1.c: 47: T1CONbits.TMR1ON = 1;
  6492                           
  6493                           ;incstack = 0
  6494  0037AA  80CD               	bsf	4045,0,c	;volatile
  6495  0037AC  0012               	return	
  6496  0037AE                     __end_of_TMR1_StartTimer:
  6497                           	opt stack 0
  6498                           tblptru	equ	0xFF8
  6499                           tblptrh	equ	0xFF7
  6500                           tblptrl	equ	0xFF6
  6501                           tablat	equ	0xFF5
  6502                           prodh	equ	0xFF4
  6503                           prodl	equ	0xFF3
  6504                           intcon	equ	0xFF2
  6505                           postinc0	equ	0xFEE
  6506                           wreg	equ	0xFE8
  6507                           postinc1	equ	0xFE6
  6508                           postdec1	equ	0xFE5
  6509                           fsr1h	equ	0xFE2
  6510                           fsr1l	equ	0xFE1
  6511                           indf2	equ	0xFDF
  6512                           postinc2	equ	0xFDE
  6513                           postdec2	equ	0xFDD
  6514                           fsr2h	equ	0xFDA
  6515                           fsr2l	equ	0xFD9
  6516                           status	equ	0xFD8
  6517                           
  6518 ;; *************** function _PIN_MANAGER_Initialize *****************
  6519 ;; Defined at:
  6520 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;		None
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;		None
  6525 ;; Return value:  Size  Location     Type
  6526 ;;		None               void
  6527 ;; Registers used:
  6528 ;;		wreg, status,2
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6534 ;;      Params:         0       0       0       0       0       0       0
  6535 ;;      Locals:         0       0       0       0       0       0       0
  6536 ;;      Temps:          0       0       0       0       0       0       0
  6537 ;;      Totals:         0       0       0       0       0       0       0
  6538 ;;Total ram usage:        0 bytes
  6539 ;; Hardware stack levels used:    1
  6540 ;; Hardware stack levels required when called:    4
  6541 ;; This function calls:
  6542 ;;		Nothing
  6543 ;; This function is called by:
  6544 ;;		_SYSTEM_Initialize
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           	psect	text25
  6549  003408                     __ptext25:
  6550                           	opt stack 0
  6551  003408                     _PIN_MANAGER_Initialize:
  6552                           	opt stack 25
  6553                           
  6554                           ;pin_manager.c: 8: LATA = 0x00;
  6555                           
  6556                           ;incstack = 0
  6557  003408  0E00               	movlw	0
  6558  00340A  6E89               	movwf	3977,c	;volatile
  6559                           
  6560                           ;pin_manager.c: 9: TRISA = 0xAE;
  6561  00340C  0EAE               	movlw	174
  6562  00340E  6E92               	movwf	3986,c	;volatile
  6563                           
  6564                           ;pin_manager.c: 10: ANSELA = 0x2E;
  6565  003410  0E2E               	movlw	46
  6566  003412  010F               	movlb	15	; () banked
  6567  003414  6F38               	movwf	56,b	;volatile
  6568                           
  6569                           ;pin_manager.c: 12: LATB = 0x00;
  6570  003416  0E00               	movlw	0
  6571  003418  6E8A               	movwf	3978,c	;volatile
  6572                           
  6573                           ;pin_manager.c: 13: TRISB = 0xF4;
  6574  00341A  0EF4               	movlw	244
  6575  00341C  6E93               	movwf	3987,c	;volatile
  6576                           
  6577                           ;pin_manager.c: 14: ANSELB = 0x34;
  6578  00341E  0E34               	movlw	52
  6579  003420  010F               	movlb	15	; () banked
  6580  003422  6F39               	movwf	57,b	;volatile
  6581                           
  6582                           ;pin_manager.c: 15: WPUB = 0x00;
  6583  003424  0E00               	movlw	0
  6584  003426  6E61               	movwf	3937,c	;volatile
  6585                           
  6586                           ;pin_manager.c: 17: LATC = 0x08;
  6587  003428  0E08               	movlw	8
  6588  00342A  6E8B               	movwf	3979,c	;volatile
  6589                           
  6590                           ;pin_manager.c: 18: TRISC = 0xC4;
  6591  00342C  0EC4               	movlw	196
  6592  00342E  6E94               	movwf	3988,c	;volatile
  6593                           
  6594                           ;pin_manager.c: 19: ANSELC = 0x04;
  6595  003430  0E04               	movlw	4
  6596  003432  010F               	movlb	15	; () banked
  6597  003434  6F3A               	movwf	58,b	;volatile
  6598                           
  6599                           ;pin_manager.c: 21: LATD = 0x00;
  6600  003436  0E00               	movlw	0
  6601  003438  6E8C               	movwf	3980,c	;volatile
  6602                           
  6603                           ;pin_manager.c: 22: TRISD = 0xD1;
  6604  00343A  0ED1               	movlw	209
  6605  00343C  6E95               	movwf	3989,c	;volatile
  6606                           
  6607                           ;pin_manager.c: 23: ANSELD = 0xD1;
  6608  00343E  0ED1               	movlw	209
  6609  003440  010F               	movlb	15	; () banked
  6610  003442  6F3B               	movwf	59,b	;volatile
  6611                           
  6612                           ;pin_manager.c: 25: LATE = 0x00;
  6613  003444  0E00               	movlw	0
  6614  003446  6E8D               	movwf	3981,c	;volatile
  6615                           
  6616                           ;pin_manager.c: 26: TRISE = 0x05;
  6617  003448  0E05               	movlw	5
  6618  00344A  6E96               	movwf	3990,c	;volatile
  6619                           
  6620                           ;pin_manager.c: 27: ANSELE = 0x05;
  6621  00344C  0E05               	movlw	5
  6622  00344E  010F               	movlb	15	; () banked
  6623  003450  6F3C               	movwf	60,b	;volatile
  6624                           
  6625                           ; BSR set to: 15
  6626                           ;pin_manager.c: 29: INTCON2bits.nRBPU = 0x01;
  6627  003452  8EF1               	bsf	intcon2,7,c	;volatile
  6628                           
  6629                           ; BSR set to: 15
  6630  003454  0012               	return	
  6631  003456                     __end_of_PIN_MANAGER_Initialize:
  6632                           	opt stack 0
  6633                           tblptru	equ	0xFF8
  6634                           tblptrh	equ	0xFF7
  6635                           tblptrl	equ	0xFF6
  6636                           tablat	equ	0xFF5
  6637                           prodh	equ	0xFF4
  6638                           prodl	equ	0xFF3
  6639                           intcon	equ	0xFF2
  6640                           intcon2	equ	0xFF1
  6641                           postinc0	equ	0xFEE
  6642                           wreg	equ	0xFE8
  6643                           postinc1	equ	0xFE6
  6644                           postdec1	equ	0xFE5
  6645                           fsr1h	equ	0xFE2
  6646                           fsr1l	equ	0xFE1
  6647                           indf2	equ	0xFDF
  6648                           postinc2	equ	0xFDE
  6649                           postdec2	equ	0xFDD
  6650                           fsr2h	equ	0xFDA
  6651                           fsr2l	equ	0xFD9
  6652                           status	equ	0xFD8
  6653                           
  6654 ;; *************** function _OSCILLATOR_Initialize *****************
  6655 ;; Defined at:
  6656 ;;		line 122 in file "mcc_generated_files/mcc.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;		None
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;		None
  6661 ;; Return value:  Size  Location     Type
  6662 ;;		None               void
  6663 ;; Registers used:
  6664 ;;		wreg, status,2
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6670 ;;      Params:         0       0       0       0       0       0       0
  6671 ;;      Locals:         0       0       0       0       0       0       0
  6672 ;;      Temps:          0       0       0       0       0       0       0
  6673 ;;      Totals:         0       0       0       0       0       0       0
  6674 ;;Total ram usage:        0 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    4
  6677 ;; This function calls:
  6678 ;;		Nothing
  6679 ;; This function is called by:
  6680 ;;		_SYSTEM_Initialize
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           	psect	text26
  6685  003786                     __ptext26:
  6686                           	opt stack 0
  6687  003786                     _OSCILLATOR_Initialize:
  6688                           	opt stack 25
  6689                           
  6690                           ;mcc.c: 125: OSCCON = 0x62;
  6691                           
  6692                           ; BSR set to: 15
  6693                           ;incstack = 0
  6694  003786  0E62               	movlw	98
  6695  003788  6ED3               	movwf	4051,c	;volatile
  6696                           
  6697                           ;mcc.c: 127: OSCCON2 = 0x04;
  6698  00378A  0E04               	movlw	4
  6699  00378C  6ED2               	movwf	4050,c	;volatile
  6700                           
  6701                           ;mcc.c: 129: OSCTUNE = 0x00;
  6702  00378E  0E00               	movlw	0
  6703  003790  6E9B               	movwf	3995,c	;volatile
  6704  003792  0012               	return	
  6705  003794                     __end_of_OSCILLATOR_Initialize:
  6706                           	opt stack 0
  6707                           tblptru	equ	0xFF8
  6708                           tblptrh	equ	0xFF7
  6709                           tblptrl	equ	0xFF6
  6710                           tablat	equ	0xFF5
  6711                           prodh	equ	0xFF4
  6712                           prodl	equ	0xFF3
  6713                           intcon	equ	0xFF2
  6714                           intcon2	equ	0xFF1
  6715                           postinc0	equ	0xFEE
  6716                           wreg	equ	0xFE8
  6717                           postinc1	equ	0xFE6
  6718                           postdec1	equ	0xFE5
  6719                           fsr1h	equ	0xFE2
  6720                           fsr1l	equ	0xFE1
  6721                           indf2	equ	0xFDF
  6722                           postinc2	equ	0xFDE
  6723                           postdec2	equ	0xFDD
  6724                           fsr2h	equ	0xFDA
  6725                           fsr2l	equ	0xFD9
  6726                           status	equ	0xFD8
  6727                           
  6728 ;; *************** function _INTERRUPT_Initialize *****************
  6729 ;; Defined at:
  6730 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6731 ;; Parameters:    Size  Location     Type
  6732 ;;		None
  6733 ;; Auto vars:     Size  Location     Type
  6734 ;;		None
  6735 ;; Return value:  Size  Location     Type
  6736 ;;		None               void
  6737 ;; Registers used:
  6738 ;;		None
  6739 ;; Tracked objects:
  6740 ;;		On entry : 0/0
  6741 ;;		On exit  : 0/0
  6742 ;;		Unchanged: 0/0
  6743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6744 ;;      Params:         0       0       0       0       0       0       0
  6745 ;;      Locals:         0       0       0       0       0       0       0
  6746 ;;      Temps:          0       0       0       0       0       0       0
  6747 ;;      Totals:         0       0       0       0       0       0       0
  6748 ;;Total ram usage:        0 bytes
  6749 ;; Hardware stack levels used:    1
  6750 ;; Hardware stack levels required when called:    4
  6751 ;; This function calls:
  6752 ;;		Nothing
  6753 ;; This function is called by:
  6754 ;;		_SYSTEM_Initialize
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           	psect	text27
  6759  003794                     __ptext27:
  6760                           	opt stack 0
  6761  003794                     _INTERRUPT_Initialize:
  6762                           	opt stack 25
  6763                           
  6764                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  6765                           
  6766                           ;incstack = 0
  6767  003794  9ED0               	bcf	4048,7,c	;volatile
  6768                           
  6769                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  6770  003796  9A9F               	bcf	3999,5,c	;volatile
  6771                           
  6772                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  6773  003798  9C9F               	bcf	3999,6,c	;volatile
  6774                           
  6775                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  6776  00379A  909F               	bcf	3999,0,c	;volatile
  6777                           
  6778                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  6779  00379C  989F               	bcf	3999,4,c	;volatile
  6780  00379E  0012               	return	
  6781  0037A0                     __end_of_INTERRUPT_Initialize:
  6782                           	opt stack 0
  6783                           tblptru	equ	0xFF8
  6784                           tblptrh	equ	0xFF7
  6785                           tblptrl	equ	0xFF6
  6786                           tablat	equ	0xFF5
  6787                           prodh	equ	0xFF4
  6788                           prodl	equ	0xFF3
  6789                           intcon	equ	0xFF2
  6790                           intcon2	equ	0xFF1
  6791                           postinc0	equ	0xFEE
  6792                           wreg	equ	0xFE8
  6793                           postinc1	equ	0xFE6
  6794                           postdec1	equ	0xFE5
  6795                           fsr1h	equ	0xFE2
  6796                           fsr1l	equ	0xFE1
  6797                           indf2	equ	0xFDF
  6798                           postinc2	equ	0xFDE
  6799                           postdec2	equ	0xFDD
  6800                           fsr2h	equ	0xFDA
  6801                           fsr2l	equ	0xFD9
  6802                           status	equ	0xFD8
  6803                           
  6804 ;; *************** function _EUSART1_Initialize *****************
  6805 ;; Defined at:
  6806 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;		None
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;		None
  6811 ;; Return value:  Size  Location     Type
  6812 ;;		None               void
  6813 ;; Registers used:
  6814 ;;		wreg, status,2
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6820 ;;      Params:         0       0       0       0       0       0       0
  6821 ;;      Locals:         0       0       0       0       0       0       0
  6822 ;;      Temps:          0       0       0       0       0       0       0
  6823 ;;      Totals:         0       0       0       0       0       0       0
  6824 ;;Total ram usage:        0 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:    4
  6827 ;; This function calls:
  6828 ;;		Nothing
  6829 ;; This function is called by:
  6830 ;;		_SYSTEM_Initialize
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text28
  6835  003524                     __ptext28:
  6836                           	opt stack 0
  6837  003524                     _EUSART1_Initialize:
  6838                           	opt stack 25
  6839                           
  6840                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  6841                           
  6842                           ;incstack = 0
  6843  003524  9A9D               	bcf	3997,5,c	;volatile
  6844                           
  6845                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  6846  003526  989D               	bcf	3997,4,c	;volatile
  6847                           
  6848                           ;eusart1.c: 85: BAUD1CON = 0x48;
  6849  003528  0E48               	movlw	72
  6850  00352A  6EB8               	movwf	4024,c	;volatile
  6851                           
  6852                           ;eusart1.c: 88: RC1STA = 0x98;
  6853  00352C  0E98               	movlw	152
  6854  00352E  6EAB               	movwf	4011,c	;volatile
  6855                           
  6856                           ;eusart1.c: 91: TX1STA = 0x26;
  6857  003530  0E26               	movlw	38
  6858  003532  6EAC               	movwf	4012,c	;volatile
  6859                           
  6860                           ;eusart1.c: 94: SPBRG1 = 0x22;
  6861  003534  0E22               	movlw	34
  6862  003536  6EAF               	movwf	4015,c	;volatile
  6863                           
  6864                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  6865  003538  0E00               	movlw	0
  6866  00353A  6EB0               	movwf	4016,c	;volatile
  6867                           
  6868                           ;eusart1.c: 100: TXREG1 = 0x00;
  6869  00353C  0E00               	movlw	0
  6870  00353E  6EAD               	movwf	4013,c	;volatile
  6871                           
  6872                           ;eusart1.c: 103: RCREG1 = 0x00;
  6873  003540  0E00               	movlw	0
  6874  003542  6EAE               	movwf	4014,c	;volatile
  6875                           
  6876                           ;eusart1.c: 107: eusart1TxHead = 0;
  6877  003544  0E00               	movlw	0
  6878  003546  6E45               	movwf	_eusart1TxHead,c
  6879                           
  6880                           ;eusart1.c: 108: eusart1TxTail = 0;
  6881  003548  0E00               	movlw	0
  6882  00354A  6E46               	movwf	_eusart1TxTail,c
  6883                           
  6884                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  6885  00354C  0E08               	movlw	8
  6886  00354E  6E49               	movwf	_eusart1TxBufferRemaining,c	;volatile
  6887                           
  6888                           ;eusart1.c: 111: eusart1RxHead = 0;
  6889  003550  0E00               	movlw	0
  6890  003552  6E43               	movwf	_eusart1RxHead,c
  6891                           
  6892                           ;eusart1.c: 112: eusart1RxTail = 0;
  6893  003554  0E00               	movlw	0
  6894  003556  6E44               	movwf	_eusart1RxTail,c
  6895                           
  6896                           ;eusart1.c: 113: eusart1RxCount = 0;
  6897  003558  0E00               	movlw	0
  6898  00355A  6E42               	movwf	_eusart1RxCount,c	;volatile
  6899                           
  6900                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  6901  00355C  8A9D               	bsf	3997,5,c	;volatile
  6902  00355E  0012               	return	
  6903  003560                     __end_of_EUSART1_Initialize:
  6904                           	opt stack 0
  6905                           tblptru	equ	0xFF8
  6906                           tblptrh	equ	0xFF7
  6907                           tblptrl	equ	0xFF6
  6908                           tablat	equ	0xFF5
  6909                           prodh	equ	0xFF4
  6910                           prodl	equ	0xFF3
  6911                           intcon	equ	0xFF2
  6912                           intcon2	equ	0xFF1
  6913                           postinc0	equ	0xFEE
  6914                           wreg	equ	0xFE8
  6915                           postinc1	equ	0xFE6
  6916                           postdec1	equ	0xFE5
  6917                           fsr1h	equ	0xFE2
  6918                           fsr1l	equ	0xFE1
  6919                           indf2	equ	0xFDF
  6920                           postinc2	equ	0xFDE
  6921                           postdec2	equ	0xFDD
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _ADC_Initialize *****************
  6927 ;; Defined at:
  6928 ;;		line 13 in file "mcc_generated_files/adc.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;		None
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;		None
  6933 ;; Return value:  Size  Location     Type
  6934 ;;		None               void
  6935 ;; Registers used:
  6936 ;;		wreg, status,2
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6942 ;;      Params:         0       0       0       0       0       0       0
  6943 ;;      Locals:         0       0       0       0       0       0       0
  6944 ;;      Temps:          0       0       0       0       0       0       0
  6945 ;;      Totals:         0       0       0       0       0       0       0
  6946 ;;Total ram usage:        0 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    4
  6949 ;; This function calls:
  6950 ;;		Nothing
  6951 ;; This function is called by:
  6952 ;;		_SYSTEM_Initialize
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           	psect	text29
  6957  00372A                     __ptext29:
  6958                           	opt stack 0
  6959  00372A                     _ADC_Initialize:
  6960                           	opt stack 25
  6961                           
  6962                           ;adc.c: 18: ADCON0 = 0x01;
  6963                           
  6964                           ;incstack = 0
  6965  00372A  0E01               	movlw	1
  6966  00372C  6EC2               	movwf	4034,c	;volatile
  6967                           
  6968                           ;adc.c: 21: ADCON1 = 0x80;
  6969  00372E  0E80               	movlw	128
  6970  003730  6EC1               	movwf	4033,c	;volatile
  6971                           
  6972                           ;adc.c: 24: ADCON2 = 0x0A;
  6973  003732  0E0A               	movlw	10
  6974  003734  6EC0               	movwf	4032,c	;volatile
  6975                           
  6976                           ;adc.c: 27: ADRESL = 0x00;
  6977  003736  0E00               	movlw	0
  6978  003738  6EC3               	movwf	4035,c	;volatile
  6979                           
  6980                           ;adc.c: 30: ADRESH = 0x00;
  6981  00373A  0E00               	movlw	0
  6982  00373C  6EC4               	movwf	4036,c	;volatile
  6983                           
  6984                           ;adc.c: 33: PIE1bits.ADIE = 1;
  6985  00373E  8C9D               	bsf	3997,6,c	;volatile
  6986  003740  0012               	return	
  6987  003742                     __end_of_ADC_Initialize:
  6988                           	opt stack 0
  6989                           tblptru	equ	0xFF8
  6990                           tblptrh	equ	0xFF7
  6991                           tblptrl	equ	0xFF6
  6992                           tablat	equ	0xFF5
  6993                           prodh	equ	0xFF4
  6994                           prodl	equ	0xFF3
  6995                           intcon	equ	0xFF2
  6996                           intcon2	equ	0xFF1
  6997                           postinc0	equ	0xFEE
  6998                           wreg	equ	0xFE8
  6999                           postinc1	equ	0xFE6
  7000                           postdec1	equ	0xFE5
  7001                           fsr1h	equ	0xFE2
  7002                           fsr1l	equ	0xFE1
  7003                           indf2	equ	0xFDF
  7004                           postinc2	equ	0xFDE
  7005                           postdec2	equ	0xFDD
  7006                           fsr2h	equ	0xFDA
  7007                           fsr2l	equ	0xFD9
  7008                           status	equ	0xFD8
  7009                           
  7010 ;; *************** function _RunBypas *****************
  7011 ;; Defined at:
  7012 ;;		line 114 in file "Bypass.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;		None
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;  batvolt         3    2[BANK0 ] float 
  7017 ;;  i               2    5[BANK0 ] int 
  7018 ;;  cellbyp         2    0[BANK0 ] int 
  7019 ;; Return value:  Size  Location     Type
  7020 ;;                  2  450[COMRAM] int 
  7021 ;; Registers used:
  7022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7023 ;; Tracked objects:
  7024 ;;		On entry : 0/0
  7025 ;;		On exit  : 0/0
  7026 ;;		Unchanged: 0/0
  7027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7028 ;;      Params:         0       0       0       0       0       0       0
  7029 ;;      Locals:         0       7       0       0       0       0       0
  7030 ;;      Temps:          0       0       0       0       0       0       0
  7031 ;;      Totals:         0       7       0       0       0       0       0
  7032 ;;Total ram usage:        7 bytes
  7033 ;; Hardware stack levels used:    1
  7034 ;; Hardware stack levels required when called:    6
  7035 ;; This function calls:
  7036 ;;		_Battery_Get
  7037 ;;		_SetBypas
  7038 ;;		___ftge
  7039 ;; This function is called by:
  7040 ;;		_main
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           	psect	text30
  7045  002B5A                     __ptext30:
  7046                           	opt stack 0
  7047  002B5A                     _RunBypas:
  7048                           	opt stack 24
  7049                           
  7050                           ;Bypass.c: 116: int cellbyp = 0;
  7051                           
  7052                           ;incstack = 0
  7053  002B5A  0E00               	movlw	0
  7054  002B5C  0100               	movlb	0	; () banked
  7055  002B5E  6FAD               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  7056  002B60  0E00               	movlw	0
  7057  002B62  0100               	movlb	0	; () banked
  7058  002B64  6FAC               	movwf	RunBypas@cellbyp& (0+255),b
  7059                           
  7060                           ;Bypass.c: 117: int i = 0;
  7061  002B66  0E00               	movlw	0
  7062  002B68  0100               	movlb	0	; () banked
  7063  002B6A  6FB2               	movwf	(RunBypas@i+1)& (0+255),b
  7064  002B6C  0E00               	movlw	0
  7065  002B6E  0100               	movlb	0	; () banked
  7066  002B70  6FB1               	movwf	RunBypas@i& (0+255),b
  7067                           
  7068                           ;Bypass.c: 118: float batvolt = 0;
  7069  002B72  0E00               	movlw	0
  7070  002B74  0100               	movlb	0	; () banked
  7071  002B76  6FAE               	movwf	RunBypas@batvolt& (0+255),b
  7072  002B78  0E00               	movlw	0
  7073  002B7A  0100               	movlb	0	; () banked
  7074  002B7C  6FAF               	movwf	(RunBypas@batvolt+1)& (0+255),b
  7075  002B7E  0E00               	movlw	0
  7076  002B80  0100               	movlb	0	; () banked
  7077  002B82  6FB0               	movwf	(RunBypas@batvolt+2)& (0+255),b
  7078                           
  7079                           ;Bypass.c: 120: for(i = 0; i<9;i++)
  7080  002B84  0E00               	movlw	0
  7081  002B86  0100               	movlb	0	; () banked
  7082  002B88  6FB2               	movwf	(RunBypas@i+1)& (0+255),b
  7083  002B8A  0E00               	movlw	0
  7084  002B8C  0100               	movlb	0	; () banked
  7085  002B8E  6FB1               	movwf	RunBypas@i& (0+255),b
  7086  002B90                     
  7087                           ; BSR set to: 0
  7088  002B90  0100               	movlb	0	; () banked
  7089  002B92  51B2               	movf	(RunBypas@i+1)& (0+255),w,b
  7090  002B94  0A80               	xorlw	128
  7091  002B96  0F80               	addlw	-128
  7092  002B98  0E09               	movlw	9
  7093  002B9A  B4D8               	btfsc	status,2,c
  7094  002B9C  5DB1               	subwf	RunBypas@i& (0+255),w,b
  7095  002B9E  B0D8               	btfsc	status,0,c
  7096  002BA0  0012               	return	
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;Bypass.c: 121: {
  7100                           ;Bypass.c: 122: batvolt = Battery_Get(i);
  7101                           
  7102                           ; BSR set to: 0
  7103                           
  7104                           ; BSR set to: 0
  7105  002BA2  C0B1  F02B         	movff	RunBypas@i,Battery_Get@channelnum
  7106  002BA6  C0B2  F02C         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  7107  002BAA  ECCD  F01A         	call	_Battery_Get	;wreg free
  7108  002BAE  C02B  F0AE         	movff	?_Battery_Get,RunBypas@batvolt
  7109  002BB2  C02C  F0AF         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  7110  002BB6  C02D  F0B0         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  7111                           
  7112                           ;Bypass.c: 124: if(batvolt >= 4.18)
  7113  002BBA  C0AE  F02B         	movff	RunBypas@batvolt,___ftge@ff1
  7114  002BBE  C0AF  F02C         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  7115  002BC2  C0B0  F02D         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  7116  002BC6  0EC3               	movlw	195
  7117  002BC8  6E2E               	movwf	___ftge@ff2,c
  7118  002BCA  0E85               	movlw	133
  7119  002BCC  6E2F               	movwf	___ftge@ff2+1,c
  7120  002BCE  0E40               	movlw	64
  7121  002BD0  6E30               	movwf	___ftge@ff2+2,c
  7122  002BD2  ECDF  F018         	call	___ftge	;wreg free
  7123  002BD6  A0D8               	btfss	status,0,c
  7124  002BD8  D010               	goto	l5226
  7125                           
  7126                           ;Bypass.c: 125: {
  7127                           ;Bypass.c: 126: SetBypas(i,1);
  7128  002BDA  C0B1  F017         	movff	RunBypas@i,SetBypas@pin
  7129  002BDE  C0B2  F018         	movff	RunBypas@i+1,SetBypas@pin+1
  7130  002BE2  0E00               	movlw	0
  7131  002BE4  6E1A               	movwf	SetBypas@state+1,c
  7132  002BE6  0E01               	movlw	1
  7133  002BE8  6E19               	movwf	SetBypas@state,c
  7134  002BEA  ECBF  F014         	call	_SetBypas	;wreg free
  7135                           
  7136                           ;Bypass.c: 127: cellbyp = 1;
  7137  002BEE  0E00               	movlw	0
  7138  002BF0  0100               	movlb	0	; () banked
  7139  002BF2  6FAD               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  7140  002BF4  0E01               	movlw	1
  7141  002BF6  0100               	movlb	0	; () banked
  7142  002BF8  6FAC               	movwf	RunBypas@cellbyp& (0+255),b
  7143  002BFA                     l5226:
  7144                           
  7145                           ;Bypass.c: 128: }
  7146                           ;Bypass.c: 129: if(batvolt <= 4.15)
  7147  002BFA  0ECD               	movlw	205
  7148  002BFC  6E2B               	movwf	___ftge@ff1,c
  7149  002BFE  0E84               	movlw	132
  7150  002C00  6E2C               	movwf	___ftge@ff1+1,c
  7151  002C02  0E40               	movlw	64
  7152  002C04  6E2D               	movwf	___ftge@ff1+2,c
  7153  002C06  C0AE  F02E         	movff	RunBypas@batvolt,___ftge@ff2
  7154  002C0A  C0AF  F02F         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  7155  002C0E  C0B0  F030         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  7156  002C12  ECDF  F018         	call	___ftge	;wreg free
  7157  002C16  A0D8               	btfss	status,0,c
  7158  002C18  D010               	goto	l5232
  7159                           
  7160                           ;Bypass.c: 130: {
  7161                           ;Bypass.c: 131: SetBypas(i,0);
  7162  002C1A  C0B1  F017         	movff	RunBypas@i,SetBypas@pin
  7163  002C1E  C0B2  F018         	movff	RunBypas@i+1,SetBypas@pin+1
  7164  002C22  0E00               	movlw	0
  7165  002C24  6E1A               	movwf	SetBypas@state+1,c
  7166  002C26  0E00               	movlw	0
  7167  002C28  6E19               	movwf	SetBypas@state,c
  7168  002C2A  ECBF  F014         	call	_SetBypas	;wreg free
  7169                           
  7170                           ;Bypass.c: 132: cellbyp = 1;
  7171  002C2E  0E00               	movlw	0
  7172  002C30  0100               	movlb	0	; () banked
  7173  002C32  6FAD               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  7174  002C34  0E01               	movlw	1
  7175  002C36  0100               	movlb	0	; () banked
  7176  002C38  6FAC               	movwf	RunBypas@cellbyp& (0+255),b
  7177  002C3A                     l5232:
  7178  002C3A  0100               	movlb	0	; () banked
  7179  002C3C  4BB1               	infsnz	RunBypas@i& (0+255),f,b
  7180  002C3E  2BB2               	incf	(RunBypas@i+1)& (0+255),f,b
  7181  002C40  D7A7               	goto	L10
  7182  002C42                     __end_of_RunBypas:
  7183                           	opt stack 0
  7184                           tblptru	equ	0xFF8
  7185                           tblptrh	equ	0xFF7
  7186                           tblptrl	equ	0xFF6
  7187                           tablat	equ	0xFF5
  7188                           prodh	equ	0xFF4
  7189                           prodl	equ	0xFF3
  7190                           intcon	equ	0xFF2
  7191                           intcon2	equ	0xFF1
  7192                           postinc0	equ	0xFEE
  7193                           wreg	equ	0xFE8
  7194                           postinc1	equ	0xFE6
  7195                           postdec1	equ	0xFE5
  7196                           fsr1h	equ	0xFE2
  7197                           fsr1l	equ	0xFE1
  7198                           indf2	equ	0xFDF
  7199                           postinc2	equ	0xFDE
  7200                           postdec2	equ	0xFDD
  7201                           fsr2h	equ	0xFDA
  7202                           fsr2l	equ	0xFD9
  7203                           status	equ	0xFD8
  7204                           
  7205 ;; *************** function _SetBypas *****************
  7206 ;; Defined at:
  7207 ;;		line 8 in file "Bypass.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;  pin             2   22[COMRAM] int 
  7210 ;;  state           2   24[COMRAM] int 
  7211 ;; Auto vars:     Size  Location     Type
  7212 ;;		None
  7213 ;; Return value:  Size  Location     Type
  7214 ;;                  2   22[COMRAM] int 
  7215 ;; Registers used:
  7216 ;;		wreg, status,2, status,0
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7222 ;;      Params:         4       0       0       0       0       0       0
  7223 ;;      Locals:         0       0       0       0       0       0       0
  7224 ;;      Temps:          2       0       0       0       0       0       0
  7225 ;;      Totals:         6       0       0       0       0       0       0
  7226 ;;Total ram usage:        6 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    4
  7229 ;; This function calls:
  7230 ;;		Nothing
  7231 ;; This function is called by:
  7232 ;;		_RunBypas
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           	psect	text31
  7237  00297E                     __ptext31:
  7238                           	opt stack 0
  7239  00297E                     _SetBypas:
  7240                           	opt stack 25
  7241                           
  7242                           ;Bypass.c: 10: switch (pin) {
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;incstack = 0
  7246  00297E  D050               	goto	l4602
  7247  002980                     l4580:
  7248                           
  7249                           ;Bypass.c: 12: if (state)
  7250  002980  501A               	movf	SetBypas@state+1,w,c
  7251  002982  1019               	iorwf	SetBypas@state,w,c
  7252  002984  B4D8               	btfsc	status,2,c
  7253  002986  D002               	goto	l495
  7254                           
  7255                           ;Bypass.c: 13: {
  7256                           ;Bypass.c: 14: do { LATC5 = 1; } while(0);
  7257  002988  8A8B               	bsf	3979,5,c	;volatile
  7258  00298A  0012               	return	
  7259  00298C                     l495:
  7260  00298C  9A8B               	bcf	3979,5,c	;volatile
  7261  00298E  0012               	return	
  7262  002990                     l4582:
  7263                           
  7264                           ;Bypass.c: 22: if (state)
  7265  002990  501A               	movf	SetBypas@state+1,w,c
  7266  002992  1019               	iorwf	SetBypas@state,w,c
  7267  002994  B4D8               	btfsc	status,2,c
  7268  002996  D002               	goto	l503
  7269                           
  7270                           ;Bypass.c: 23: {
  7271                           ;Bypass.c: 24: do { LATC4 = 1; } while(0);
  7272  002998  888B               	bsf	3979,4,c	;volatile
  7273  00299A  0012               	return	
  7274  00299C                     l503:
  7275  00299C  988B               	bcf	3979,4,c	;volatile
  7276  00299E  0012               	return	
  7277  0029A0                     l4584:
  7278                           
  7279                           ;Bypass.c: 32: if (state)
  7280  0029A0  501A               	movf	SetBypas@state+1,w,c
  7281  0029A2  1019               	iorwf	SetBypas@state,w,c
  7282  0029A4  B4D8               	btfsc	status,2,c
  7283  0029A6  D002               	goto	l510
  7284                           
  7285                           ;Bypass.c: 33: {
  7286                           ;Bypass.c: 34: do { LATD3 = 1; } while(0);
  7287  0029A8  868C               	bsf	3980,3,c	;volatile
  7288  0029AA  0012               	return	
  7289  0029AC                     l510:
  7290  0029AC  968C               	bcf	3980,3,c	;volatile
  7291  0029AE  0012               	return	
  7292  0029B0                     l4586:
  7293                           
  7294                           ;Bypass.c: 42: if (state)
  7295  0029B0  501A               	movf	SetBypas@state+1,w,c
  7296  0029B2  1019               	iorwf	SetBypas@state,w,c
  7297  0029B4  B4D8               	btfsc	status,2,c
  7298  0029B6  D002               	goto	l517
  7299                           
  7300                           ;Bypass.c: 43: {
  7301                           ;Bypass.c: 44: do { LATD2 = 1; } while(0);
  7302  0029B8  848C               	bsf	3980,2,c	;volatile
  7303  0029BA  0012               	return	
  7304  0029BC                     l517:
  7305  0029BC  948C               	bcf	3980,2,c	;volatile
  7306  0029BE  0012               	return	
  7307  0029C0                     l4588:
  7308                           
  7309                           ;Bypass.c: 52: if (state)
  7310  0029C0  501A               	movf	SetBypas@state+1,w,c
  7311  0029C2  1019               	iorwf	SetBypas@state,w,c
  7312  0029C4  B4D8               	btfsc	status,2,c
  7313  0029C6  D002               	goto	l524
  7314                           
  7315                           ;Bypass.c: 53: {
  7316                           ;Bypass.c: 54: do { LATD1 = 1; } while(0);
  7317  0029C8  828C               	bsf	3980,1,c	;volatile
  7318  0029CA  0012               	return	
  7319  0029CC                     l524:
  7320  0029CC  928C               	bcf	3980,1,c	;volatile
  7321  0029CE  0012               	return	
  7322  0029D0                     l4590:
  7323                           
  7324                           ;Bypass.c: 62: if (state)
  7325  0029D0  501A               	movf	SetBypas@state+1,w,c
  7326  0029D2  1019               	iorwf	SetBypas@state,w,c
  7327  0029D4  B4D8               	btfsc	status,2,c
  7328  0029D6  D002               	goto	l531
  7329                           
  7330                           ;Bypass.c: 63: {
  7331                           ;Bypass.c: 64: do { LATD5 = 1; } while(0);
  7332  0029D8  8A8C               	bsf	3980,5,c	;volatile
  7333  0029DA  0012               	return	
  7334  0029DC                     l531:
  7335  0029DC  9A8C               	bcf	3980,5,c	;volatile
  7336  0029DE  0012               	return	
  7337  0029E0                     l4592:
  7338                           
  7339                           ;Bypass.c: 72: if (state)
  7340  0029E0  501A               	movf	SetBypas@state+1,w,c
  7341  0029E2  1019               	iorwf	SetBypas@state,w,c
  7342  0029E4  B4D8               	btfsc	status,2,c
  7343  0029E6  D002               	goto	l538
  7344                           
  7345                           ;Bypass.c: 73: {
  7346                           ;Bypass.c: 74: do { LATB0 = 1; } while(0);
  7347  0029E8  808A               	bsf	3978,0,c	;volatile
  7348  0029EA  0012               	return	
  7349  0029EC                     l538:
  7350  0029EC  908A               	bcf	3978,0,c	;volatile
  7351  0029EE  0012               	return	
  7352  0029F0                     l4594:
  7353                           
  7354                           ;Bypass.c: 82: if (state)
  7355  0029F0  501A               	movf	SetBypas@state+1,w,c
  7356  0029F2  1019               	iorwf	SetBypas@state,w,c
  7357  0029F4  B4D8               	btfsc	status,2,c
  7358  0029F6  D002               	goto	l545
  7359                           
  7360                           ;Bypass.c: 83: {
  7361                           ;Bypass.c: 84: do { LATB1 = 1; } while(0);
  7362  0029F8  828A               	bsf	3978,1,c	;volatile
  7363  0029FA  0012               	return	
  7364  0029FC                     l545:
  7365  0029FC  928A               	bcf	3978,1,c	;volatile
  7366  0029FE  0012               	return	
  7367  002A00                     l4596:
  7368                           
  7369                           ;Bypass.c: 92: if (state)
  7370  002A00  501A               	movf	SetBypas@state+1,w,c
  7371  002A02  1019               	iorwf	SetBypas@state,w,c
  7372  002A04  B4D8               	btfsc	status,2,c
  7373  002A06  D002               	goto	l552
  7374                           
  7375                           ;Bypass.c: 93: {
  7376                           ;Bypass.c: 94: do { LATB3 = 1; } while(0);
  7377  002A08  868A               	bsf	3978,3,c	;volatile
  7378  002A0A  0012               	return	
  7379  002A0C                     l552:
  7380  002A0C  968A               	bcf	3978,3,c	;volatile
  7381  002A0E  0012               	return	
  7382  002A10                     l4598:
  7383                           
  7384                           ;Bypass.c: 102: if (state)
  7385  002A10  501A               	movf	SetBypas@state+1,w,c
  7386  002A12  1019               	iorwf	SetBypas@state,w,c
  7387  002A14  B4D8               	btfsc	status,2,c
  7388  002A16  D002               	goto	l559
  7389                           
  7390                           ;Bypass.c: 103: {
  7391                           ;Bypass.c: 104: do { LATA0 = 1; } while(0);
  7392  002A18  8089               	bsf	3977,0,c	;volatile
  7393  002A1A  0012               	return	
  7394  002A1C                     l559:
  7395  002A1C  9089               	bcf	3977,0,c	;volatile
  7396  002A1E  0012               	return	
  7397  002A20                     l4602:
  7398  002A20  C017  F01B         	movff	SetBypas@pin,??_SetBypas
  7399  002A24  C018  F01C         	movff	SetBypas@pin+1,??_SetBypas+1
  7400                           
  7401                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7402                           ; Switch size 1, requested type "space"
  7403                           ; Number of cases is 1, Range of values is 0 to 0
  7404                           ; switch strategies available:
  7405                           ; Name         Instructions Cycles
  7406                           ; simple_byte            4     3 (average)
  7407                           ;	Chosen strategy is simple_byte
  7408  002A28  501C               	movf	??_SetBypas+1,w,c
  7409  002A2A  0A00               	xorlw	0	; case 0
  7410  002A2C  A4D8               	btfss	status,2,c
  7411  002A2E  0012               	return	
  7412                           
  7413                           ; Switch size 1, requested type "space"
  7414                           ; Number of cases is 10, Range of values is 0 to 9
  7415                           ; switch strategies available:
  7416                           ; Name         Instructions Cycles
  7417                           ; simple_byte           31    16 (average)
  7418                           ;	Chosen strategy is simple_byte
  7419  002A30  501B               	movf	??_SetBypas,w,c
  7420  002A32  0A00               	xorlw	0	; case 0
  7421  002A34  B4D8               	btfsc	status,2,c
  7422  002A36  D7A4               	goto	l4580
  7423  002A38  0A01               	xorlw	1	; case 1
  7424  002A3A  B4D8               	btfsc	status,2,c
  7425  002A3C  D7A9               	goto	l4582
  7426  002A3E  0A03               	xorlw	3	; case 2
  7427  002A40  B4D8               	btfsc	status,2,c
  7428  002A42  D7AE               	goto	l4584
  7429  002A44  0A01               	xorlw	1	; case 3
  7430  002A46  B4D8               	btfsc	status,2,c
  7431  002A48  D7B3               	goto	l4586
  7432  002A4A  0A07               	xorlw	7	; case 4
  7433  002A4C  B4D8               	btfsc	status,2,c
  7434  002A4E  D7B8               	goto	l4588
  7435  002A50  0A01               	xorlw	1	; case 5
  7436  002A52  B4D8               	btfsc	status,2,c
  7437  002A54  D7BD               	goto	l4590
  7438  002A56  0A03               	xorlw	3	; case 6
  7439  002A58  B4D8               	btfsc	status,2,c
  7440  002A5A  D7C2               	goto	l4592
  7441  002A5C  0A01               	xorlw	1	; case 7
  7442  002A5E  B4D8               	btfsc	status,2,c
  7443  002A60  D7C7               	goto	l4594
  7444  002A62  0A0F               	xorlw	15	; case 8
  7445  002A64  B4D8               	btfsc	status,2,c
  7446  002A66  D7CC               	goto	l4596
  7447  002A68  0A01               	xorlw	1	; case 9
  7448  002A6A  A4D8               	btfss	status,2,c
  7449  002A6C  0012               	return	
  7450  002A6E  D7D0               	goto	l4598
  7451  002A70                     __end_of_SetBypas:
  7452                           	opt stack 0
  7453                           tblptru	equ	0xFF8
  7454                           tblptrh	equ	0xFF7
  7455                           tblptrl	equ	0xFF6
  7456                           tablat	equ	0xFF5
  7457                           prodh	equ	0xFF4
  7458                           prodl	equ	0xFF3
  7459                           intcon	equ	0xFF2
  7460                           intcon2	equ	0xFF1
  7461                           postinc0	equ	0xFEE
  7462                           wreg	equ	0xFE8
  7463                           postinc1	equ	0xFE6
  7464                           postdec1	equ	0xFE5
  7465                           fsr1h	equ	0xFE2
  7466                           fsr1l	equ	0xFE1
  7467                           indf2	equ	0xFDF
  7468                           postinc2	equ	0xFDE
  7469                           postdec2	equ	0xFDD
  7470                           fsr2h	equ	0xFDA
  7471                           fsr2l	equ	0xFD9
  7472                           status	equ	0xFD8
  7473                           
  7474 ;; *************** function _Battery_Get *****************
  7475 ;; Defined at:
  7476 ;;		line 59 in file "Battery.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;  channelnum      2   42[COMRAM] int 
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;		None
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  3   42[COMRAM] float 
  7483 ;; Registers used:
  7484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7490 ;;      Params:         3       0       0       0       0       0       0
  7491 ;;      Locals:         0       0       0       0       0       0       0
  7492 ;;      Temps:          0       0       0       0       0       0       0
  7493 ;;      Totals:         3       0       0       0       0       0       0
  7494 ;;Total ram usage:        3 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:    5
  7497 ;; This function calls:
  7498 ;;		___wmul
  7499 ;; This function is called by:
  7500 ;;		_main
  7501 ;;		_RunBypas
  7502 ;; This function uses a non-reentrant model
  7503 ;;
  7504                           
  7505                           	psect	text32
  7506  00359A                     __ptext32:
  7507                           	opt stack 0
  7508  00359A                     _Battery_Get:
  7509                           	opt stack 24
  7510                           
  7511                           ;Battery.c: 61: return Battery_Volt[channelnum];
  7512                           
  7513                           ;incstack = 0
  7514  00359A  C02B  F025         	movff	Battery_Get@channelnum,___wmul@multiplier
  7515  00359E  C02C  F026         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  7516  0035A2  0E00               	movlw	0
  7517  0035A4  6E28               	movwf	___wmul@multiplicand+1,c
  7518  0035A6  0E03               	movlw	3
  7519  0035A8  6E27               	movwf	___wmul@multiplicand,c
  7520  0035AA  EC57  F01B         	call	___wmul	;wreg free
  7521  0035AE  0100               	movlb	0	; () banked
  7522  0035B0  0E60               	movlw	low _Battery_Volt
  7523  0035B2  2425               	addwf	?___wmul,w,c
  7524  0035B4  6ED9               	movwf	fsr2l,c
  7525  0035B6  0100               	movlb	0	; () banked
  7526  0035B8  0E00               	movlw	high _Battery_Volt
  7527  0035BA  2026               	addwfc	?___wmul+1,w,c
  7528  0035BC  6EDA               	movwf	fsr2h,c
  7529  0035BE  CFDE F02B          	movff	postinc2,?_Battery_Get
  7530  0035C2  CFDE F02C          	movff	postinc2,?_Battery_Get+1
  7531  0035C6  CFDD F02D          	movff	postdec2,?_Battery_Get+2
  7532  0035CA  0012               	return	
  7533  0035CC                     __end_of_Battery_Get:
  7534                           	opt stack 0
  7535                           tblptru	equ	0xFF8
  7536                           tblptrh	equ	0xFF7
  7537                           tblptrl	equ	0xFF6
  7538                           tablat	equ	0xFF5
  7539                           prodh	equ	0xFF4
  7540                           prodl	equ	0xFF3
  7541                           intcon	equ	0xFF2
  7542                           intcon2	equ	0xFF1
  7543                           postinc0	equ	0xFEE
  7544                           wreg	equ	0xFE8
  7545                           postinc1	equ	0xFE6
  7546                           postdec1	equ	0xFE5
  7547                           fsr1h	equ	0xFE2
  7548                           fsr1l	equ	0xFE1
  7549                           indf2	equ	0xFDF
  7550                           postinc2	equ	0xFDE
  7551                           postdec2	equ	0xFDD
  7552                           fsr2h	equ	0xFDA
  7553                           fsr2l	equ	0xFD9
  7554                           status	equ	0xFD8
  7555                           
  7556 ;; *************** function _Battery_Fault *****************
  7557 ;; Defined at:
  7558 ;;		line 46 in file "Battery.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;		None
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;  i               2    1[BANK0 ] int 
  7563 ;;  fault           1    0[BANK0 ] unsigned char 
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  1    wreg      unsigned char 
  7566 ;; Registers used:
  7567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7573 ;;      Params:         0       0       0       0       0       0       0
  7574 ;;      Locals:         0       3       0       0       0       0       0
  7575 ;;      Temps:          0       0       0       0       0       0       0
  7576 ;;      Totals:         0       3       0       0       0       0       0
  7577 ;;Total ram usage:        3 bytes
  7578 ;; Hardware stack levels used:    1
  7579 ;; Hardware stack levels required when called:    5
  7580 ;; This function calls:
  7581 ;;		___ftge
  7582 ;;		___wmul
  7583 ;; This function is called by:
  7584 ;;		_main
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588                           	psect	text33
  7589  002DE0                     __ptext33:
  7590                           	opt stack 0
  7591  002DE0                     _Battery_Fault:
  7592                           	opt stack 25
  7593                           
  7594                           ;Battery.c: 48: char fault = 0;
  7595                           
  7596                           ; BSR set to: 0
  7597                           ;incstack = 0
  7598  002DE0  0E00               	movlw	0
  7599  002DE2  0100               	movlb	0	; () banked
  7600  002DE4  6FAC               	movwf	Battery_Fault@fault& (0+255),b
  7601                           
  7602                           ;Battery.c: 49: for(int i = 0;i<9;i++)
  7603  002DE6  0E00               	movlw	0
  7604  002DE8  0100               	movlb	0	; () banked
  7605  002DEA  6FAE               	movwf	(Battery_Fault@i+1)& (0+255),b
  7606  002DEC  0E00               	movlw	0
  7607  002DEE  0100               	movlb	0	; () banked
  7608  002DF0  6FAD               	movwf	Battery_Fault@i& (0+255),b
  7609  002DF2                     
  7610                           ; BSR set to: 0
  7611  002DF2  0100               	movlb	0	; () banked
  7612  002DF4  51AE               	movf	(Battery_Fault@i+1)& (0+255),w,b
  7613  002DF6  0A80               	xorlw	128
  7614  002DF8  0F80               	addlw	-128
  7615  002DFA  0E09               	movlw	9
  7616  002DFC  B4D8               	btfsc	status,2,c
  7617  002DFE  5DAD               	subwf	Battery_Fault@i& (0+255),w,b
  7618  002E00  B0D8               	btfsc	status,0,c
  7619  002E02  0012               	return	
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;Battery.c: 50: {
  7623                           ;Battery.c: 51: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  7624                           
  7625                           ; BSR set to: 0
  7626                           
  7627                           ; BSR set to: 0
  7628  002E04  0E00               	movlw	0
  7629  002E06  6E2B               	movwf	___ftge@ff1,c
  7630  002E08  0E40               	movlw	64
  7631  002E0A  6E2C               	movwf	___ftge@ff1+1,c
  7632  002E0C  0E40               	movlw	64
  7633  002E0E  6E2D               	movwf	___ftge@ff1+2,c
  7634  002E10  C0AD  F025         	movff	Battery_Fault@i,___wmul@multiplier
  7635  002E14  C0AE  F026         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  7636  002E18  0E00               	movlw	0
  7637  002E1A  6E28               	movwf	___wmul@multiplicand+1,c
  7638  002E1C  0E03               	movlw	3
  7639  002E1E  6E27               	movwf	___wmul@multiplicand,c
  7640  002E20  EC57  F01B         	call	___wmul	;wreg free
  7641  002E24  0100               	movlb	0	; () banked
  7642  002E26  0E60               	movlw	low _Battery_Volt
  7643  002E28  2425               	addwf	?___wmul,w,c
  7644  002E2A  6ED9               	movwf	fsr2l,c
  7645  002E2C  0100               	movlb	0	; () banked
  7646  002E2E  0E00               	movlw	high _Battery_Volt
  7647  002E30  2026               	addwfc	?___wmul+1,w,c
  7648  002E32  6EDA               	movwf	fsr2h,c
  7649  002E34  CFDE F02E          	movff	postinc2,___ftge@ff2
  7650  002E38  CFDE F02F          	movff	postinc2,___ftge@ff2+1
  7651  002E3C  CFDD F030          	movff	postdec2,___ftge@ff2+2
  7652  002E40  ECDF  F018         	call	___ftge	;wreg free
  7653  002E44  B0D8               	btfsc	status,0,c
  7654  002E46  D025               	goto	l4974
  7655  002E48  C0AD  F025         	movff	Battery_Fault@i,___wmul@multiplier
  7656  002E4C  C0AE  F026         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  7657  002E50  0E00               	movlw	0
  7658  002E52  6E28               	movwf	___wmul@multiplicand+1,c
  7659  002E54  0E03               	movlw	3
  7660  002E56  6E27               	movwf	___wmul@multiplicand,c
  7661  002E58  EC57  F01B         	call	___wmul	;wreg free
  7662  002E5C  0100               	movlb	0	; () banked
  7663  002E5E  0E60               	movlw	low _Battery_Volt
  7664  002E60  2425               	addwf	?___wmul,w,c
  7665  002E62  6ED9               	movwf	fsr2l,c
  7666  002E64  0100               	movlb	0	; () banked
  7667  002E66  0E00               	movlw	high _Battery_Volt
  7668  002E68  2026               	addwfc	?___wmul+1,w,c
  7669  002E6A  6EDA               	movwf	fsr2h,c
  7670  002E6C  CFDE F02B          	movff	postinc2,___ftge@ff1
  7671  002E70  CFDE F02C          	movff	postinc2,___ftge@ff1+1
  7672  002E74  CFDD F02D          	movff	postdec2,___ftge@ff1+2
  7673  002E78  0EB8               	movlw	184
  7674  002E7A  6E2E               	movwf	___ftge@ff2,c
  7675  002E7C  0E86               	movlw	134
  7676  002E7E  6E2F               	movwf	___ftge@ff2+1,c
  7677  002E80  0E40               	movlw	64
  7678  002E82  6E30               	movwf	___ftge@ff2+2,c
  7679  002E84  ECDF  F018         	call	___ftge	;wreg free
  7680  002E88  B0D8               	btfsc	status,0,c
  7681  002E8A  D003               	goto	l4974
  7682                           
  7683                           ;Battery.c: 52: {
  7684                           ;Battery.c: 53: fault = 1;
  7685  002E8C  0E01               	movlw	1
  7686  002E8E  0100               	movlb	0	; () banked
  7687  002E90  6FAC               	movwf	Battery_Fault@fault& (0+255),b
  7688  002E92                     l4974:
  7689  002E92  0100               	movlb	0	; () banked
  7690  002E94  4BAD               	infsnz	Battery_Fault@i& (0+255),f,b
  7691  002E96  2BAE               	incf	(Battery_Fault@i+1)& (0+255),f,b
  7692  002E98  D7AC               	goto	L11
  7693  002E9A                     __end_of_Battery_Fault:
  7694                           	opt stack 0
  7695                           tblptru	equ	0xFF8
  7696                           tblptrh	equ	0xFF7
  7697                           tblptrl	equ	0xFF6
  7698                           tablat	equ	0xFF5
  7699                           prodh	equ	0xFF4
  7700                           prodl	equ	0xFF3
  7701                           intcon	equ	0xFF2
  7702                           intcon2	equ	0xFF1
  7703                           postinc0	equ	0xFEE
  7704                           wreg	equ	0xFE8
  7705                           postinc1	equ	0xFE6
  7706                           postdec1	equ	0xFE5
  7707                           fsr1h	equ	0xFE2
  7708                           fsr1l	equ	0xFE1
  7709                           indf2	equ	0xFDF
  7710                           postinc2	equ	0xFDE
  7711                           postdec2	equ	0xFDD
  7712                           fsr2h	equ	0xFDA
  7713                           fsr2l	equ	0xFD9
  7714                           status	equ	0xFD8
  7715                           
  7716 ;; *************** function ___ftge *****************
  7717 ;; Defined at:
  7718 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  7719 ;; Parameters:    Size  Location     Type
  7720 ;;  ff1             3   42[COMRAM] float 
  7721 ;;  ff2             3   45[COMRAM] float 
  7722 ;; Auto vars:     Size  Location     Type
  7723 ;;		None
  7724 ;; Return value:  Size  Location     Type
  7725 ;;		None               void
  7726 ;; Registers used:
  7727 ;;		wreg, status,2, status,0
  7728 ;; Tracked objects:
  7729 ;;		On entry : 0/0
  7730 ;;		On exit  : 0/0
  7731 ;;		Unchanged: 0/0
  7732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7733 ;;      Params:         6       0       0       0       0       0       0
  7734 ;;      Locals:         0       0       0       0       0       0       0
  7735 ;;      Temps:          3       0       0       0       0       0       0
  7736 ;;      Totals:         9       0       0       0       0       0       0
  7737 ;;Total ram usage:        9 bytes
  7738 ;; Hardware stack levels used:    1
  7739 ;; Hardware stack levels required when called:    4
  7740 ;; This function calls:
  7741 ;;		Nothing
  7742 ;; This function is called by:
  7743 ;;		_Battery_Fault
  7744 ;;		_Temp_Fault
  7745 ;;		_RunBypas
  7746 ;;		_printf
  7747 ;; This function uses a non-reentrant model
  7748 ;;
  7749                           
  7750                           	psect	text34
  7751  0031BE                     __ptext34:
  7752                           	opt stack 0
  7753  0031BE                     ___ftge:
  7754                           	opt stack 25
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;incstack = 0
  7758  0031BE  AE2D               	btfss	___ftge@ff1+2,7,c
  7759  0031C0  D016               	goto	l4836
  7760  0031C2  C02B  F031         	movff	___ftge@ff1,??___ftge
  7761  0031C6  C02C  F032         	movff	___ftge@ff1+1,??___ftge+1
  7762  0031CA  C02D  F033         	movff	___ftge@ff1+2,??___ftge+2
  7763  0031CE  1E31               	comf	??___ftge,f,c
  7764  0031D0  1E32               	comf	??___ftge+1,f,c
  7765  0031D2  1E33               	comf	??___ftge+2,f,c
  7766  0031D4  2A31               	incf	??___ftge,f,c
  7767  0031D6  0E00               	movlw	0
  7768  0031D8  2232               	addwfc	??___ftge+1,f,c
  7769  0031DA  2233               	addwfc	??___ftge+2,f,c
  7770  0031DC  0E00               	movlw	0
  7771  0031DE  2431               	addwf	??___ftge,w,c
  7772  0031E0  6E2B               	movwf	___ftge@ff1,c
  7773  0031E2  0E00               	movlw	0
  7774  0031E4  2032               	addwfc	??___ftge+1,w,c
  7775  0031E6  6E2C               	movwf	___ftge@ff1+1,c
  7776  0031E8  0E80               	movlw	128
  7777  0031EA  2033               	addwfc	??___ftge+2,w,c
  7778  0031EC  6E2D               	movwf	___ftge@ff1+2,c
  7779  0031EE                     l4836:
  7780  0031EE  AE30               	btfss	___ftge@ff2+2,7,c
  7781  0031F0  D016               	goto	l4840
  7782  0031F2  C02E  F031         	movff	___ftge@ff2,??___ftge
  7783  0031F6  C02F  F032         	movff	___ftge@ff2+1,??___ftge+1
  7784  0031FA  C030  F033         	movff	___ftge@ff2+2,??___ftge+2
  7785  0031FE  1E31               	comf	??___ftge,f,c
  7786  003200  1E32               	comf	??___ftge+1,f,c
  7787  003202  1E33               	comf	??___ftge+2,f,c
  7788  003204  2A31               	incf	??___ftge,f,c
  7789  003206  0E00               	movlw	0
  7790  003208  2232               	addwfc	??___ftge+1,f,c
  7791  00320A  2233               	addwfc	??___ftge+2,f,c
  7792  00320C  0E00               	movlw	0
  7793  00320E  2431               	addwf	??___ftge,w,c
  7794  003210  6E2E               	movwf	___ftge@ff2,c
  7795  003212  0E00               	movlw	0
  7796  003214  2032               	addwfc	??___ftge+1,w,c
  7797  003216  6E2F               	movwf	___ftge@ff2+1,c
  7798  003218  0E80               	movlw	128
  7799  00321A  2033               	addwfc	??___ftge+2,w,c
  7800  00321C  6E30               	movwf	___ftge@ff2+2,c
  7801  00321E                     l4840:
  7802  00321E  0E00               	movlw	0
  7803  003220  1A2B               	xorwf	___ftge@ff1,f,c
  7804  003222  0E00               	movlw	0
  7805  003224  1A2C               	xorwf	___ftge@ff1+1,f,c
  7806  003226  0E80               	movlw	128
  7807  003228  1A2D               	xorwf	___ftge@ff1+2,f,c
  7808  00322A  0E00               	movlw	0
  7809  00322C  1A2E               	xorwf	___ftge@ff2,f,c
  7810  00322E  0E00               	movlw	0
  7811  003230  1A2F               	xorwf	___ftge@ff2+1,f,c
  7812  003232  0E80               	movlw	128
  7813  003234  1A30               	xorwf	___ftge@ff2+2,f,c
  7814  003236  502E               	movf	___ftge@ff2,w,c
  7815  003238  5C2B               	subwf	___ftge@ff1,w,c
  7816  00323A  502F               	movf	___ftge@ff2+1,w,c
  7817  00323C  582C               	subwfb	___ftge@ff1+1,w,c
  7818  00323E  5030               	movf	___ftge@ff2+2,w,c
  7819  003240  582D               	subwfb	___ftge@ff1+2,w,c
  7820  003242  B0D8               	btfsc	status,0,c
  7821  003244  D002               	goto	l4846
  7822  003246  90D8               	bcf	status,0,c
  7823  003248  0012               	return	
  7824  00324A                     l4846:
  7825  00324A  80D8               	bsf	status,0,c
  7826  00324C  0012               	return	
  7827  00324E                     __end_of___ftge:
  7828                           	opt stack 0
  7829                           tblptru	equ	0xFF8
  7830                           tblptrh	equ	0xFF7
  7831                           tblptrl	equ	0xFF6
  7832                           tablat	equ	0xFF5
  7833                           prodh	equ	0xFF4
  7834                           prodl	equ	0xFF3
  7835                           intcon	equ	0xFF2
  7836                           intcon2	equ	0xFF1
  7837                           postinc0	equ	0xFEE
  7838                           wreg	equ	0xFE8
  7839                           postinc1	equ	0xFE6
  7840                           postdec1	equ	0xFE5
  7841                           fsr1h	equ	0xFE2
  7842                           fsr1l	equ	0xFE1
  7843                           indf2	equ	0xFDF
  7844                           postinc2	equ	0xFDE
  7845                           postdec2	equ	0xFDD
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function _Battery_Convert *****************
  7851 ;; Defined at:
  7852 ;;		line 22 in file "Battery.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;		None
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;  x               2   36[BANK0 ] int 
  7857 ;; Return value:  Size  Location     Type
  7858 ;;		None               void
  7859 ;; Registers used:
  7860 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7861 ;; Tracked objects:
  7862 ;;		On entry : 0/0
  7863 ;;		On exit  : 0/0
  7864 ;;		Unchanged: 0/0
  7865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7866 ;;      Params:         0       0       0       0       0       0       0
  7867 ;;      Locals:         0       2       0       0       0       0       0
  7868 ;;      Temps:          0       2       0       0       0       0       0
  7869 ;;      Totals:         0       4       0       0       0       0       0
  7870 ;;Total ram usage:        4 bytes
  7871 ;; Hardware stack levels used:    1
  7872 ;; Hardware stack levels required when called:    7
  7873 ;; This function calls:
  7874 ;;		_Battery_Filter
  7875 ;;		___awdiv
  7876 ;;		___awtoft
  7877 ;;		___wmul
  7878 ;; This function is called by:
  7879 ;;		_main
  7880 ;; This function uses a non-reentrant model
  7881 ;;
  7882                           
  7883                           	psect	text35
  7884  002E9A                     __ptext35:
  7885                           	opt stack 0
  7886  002E9A                     _Battery_Convert:
  7887                           	opt stack 23
  7888                           
  7889                           ;Battery.c: 24: int x;
  7890                           ;Battery.c: 25: for(x = 0; x < 10; x++)
  7891                           
  7892                           ;incstack = 0
  7893  002E9A  0E00               	movlw	0
  7894  002E9C  0100               	movlb	0	; () banked
  7895  002E9E  6FD1               	movwf	(Battery_Convert@x+1)& (0+255),b
  7896  002EA0  0E00               	movlw	0
  7897  002EA2  0100               	movlb	0	; () banked
  7898  002EA4  6FD0               	movwf	Battery_Convert@x& (0+255),b
  7899  002EA6                     
  7900                           ; BSR set to: 0
  7901  002EA6  0100               	movlb	0	; () banked
  7902  002EA8  51D1               	movf	(Battery_Convert@x+1)& (0+255),w,b
  7903  002EAA  0A80               	xorlw	128
  7904  002EAC  0F80               	addlw	-128
  7905  002EAE  0E0A               	movlw	10
  7906  002EB0  B4D8               	btfsc	status,2,c
  7907  002EB2  5DD0               	subwf	Battery_Convert@x& (0+255),w,b
  7908  002EB4  B0D8               	btfsc	status,0,c
  7909  002EB6  D049               	goto	l4960
  7910                           
  7911                           ; BSR set to: 0
  7912                           ;Battery.c: 26: {
  7913                           ;Battery.c: 27: TempBattery_Volt[x] = ((Battery_Adc[x]/1024)*5);
  7914                           
  7915                           ; BSR set to: 0
  7916                           
  7917                           ; BSR set to: 0
  7918  002EB8  C0D0  F025         	movff	Battery_Convert@x,___wmul@multiplier
  7919  002EBC  C0D1  F026         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  7920  002EC0  0E00               	movlw	0
  7921  002EC2  6E28               	movwf	___wmul@multiplicand+1,c
  7922  002EC4  0E03               	movlw	3
  7923  002EC6  6E27               	movwf	___wmul@multiplicand,c
  7924  002EC8  EC57  F01B         	call	___wmul	;wreg free
  7925  002ECC  0101               	movlb	1	; () banked
  7926  002ECE  0E8C               	movlw	low _TempBattery_Volt
  7927  002ED0  2425               	addwf	?___wmul,w,c
  7928  002ED2  6ED9               	movwf	fsr2l,c
  7929  002ED4  0101               	movlb	1	; () banked
  7930  002ED6  0E01               	movlw	high _TempBattery_Volt
  7931  002ED8  2026               	addwfc	?___wmul+1,w,c
  7932  002EDA  6EDA               	movwf	fsr2h,c
  7933  002EDC  0E04               	movlw	4
  7934  002EDE  6E20               	movwf	___awdiv@divisor+1,c
  7935  002EE0  0E00               	movlw	0
  7936  002EE2  6E1F               	movwf	___awdiv@divisor,c
  7937  002EE4  0E7E               	movlw	low _Battery_Adc
  7938  002EE6  0100               	movlb	0	; () banked
  7939  002EE8  6FCE               	movwf	??_Battery_Convert& (0+255),b
  7940  002EEA  0E00               	movlw	high _Battery_Adc
  7941  002EEC  6FCF               	movwf	(??_Battery_Convert+1)& (0+255),b
  7942  002EEE  90D8               	bcf	status,0,c
  7943  002EF0  0100               	movlb	0	; () banked
  7944  002EF2  35D0               	rlcf	Battery_Convert@x& (0+255),w,b
  7945  002EF4  6EE1               	movwf	fsr1l,c
  7946  002EF6  0100               	movlb	0	; () banked
  7947  002EF8  35D1               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  7948  002EFA  6EE2               	movwf	fsr1h,c
  7949  002EFC  0100               	movlb	0	; () banked
  7950  002EFE  51CE               	movf	??_Battery_Convert& (0+255),w,b
  7951  002F00  26E1               	addwf	fsr1l,f,c
  7952  002F02  0100               	movlb	0	; () banked
  7953  002F04  51CF               	movf	(??_Battery_Convert+1)& (0+255),w,b
  7954  002F06  22E2               	addwfc	fsr1h,f,c
  7955  002F08  CFE6 F01D          	movff	postinc1,___awdiv@dividend
  7956  002F0C  CFE5 F01E          	movff	postdec1,___awdiv@dividend+1
  7957  002F10  ECFC  F017         	call	___awdiv	;wreg free
  7958  002F14  C01D  F025         	movff	?___awdiv,___wmul@multiplier
  7959  002F18  C01E  F026         	movff	?___awdiv+1,___wmul@multiplier+1
  7960  002F1C  0E00               	movlw	0
  7961  002F1E  6E28               	movwf	___wmul@multiplicand+1,c
  7962  002F20  0E05               	movlw	5
  7963  002F22  6E27               	movwf	___wmul@multiplicand,c
  7964  002F24  EC57  F01B         	call	___wmul	;wreg free
  7965  002F28  C025  F02B         	movff	?___wmul,___awtoft@c
  7966  002F2C  C026  F02C         	movff	?___wmul+1,___awtoft@c+1
  7967  002F30  EC50  F01A         	call	___awtoft	;wreg free
  7968  002F34  C02B  FFDE         	movff	?___awtoft,postinc2
  7969  002F38  C02C  FFDE         	movff	?___awtoft+1,postinc2
  7970  002F3C  C02D  FFDD         	movff	?___awtoft+2,postdec2
  7971  002F40  52DD               	movf	postdec2,f,c
  7972  002F42  0100               	movlb	0	; () banked
  7973  002F44  4BD0               	infsnz	Battery_Convert@x& (0+255),f,b
  7974  002F46  2BD1               	incf	(Battery_Convert@x+1)& (0+255),f,b
  7975  002F48  D7AE               	goto	L12
  7976  002F4A                     l4960:
  7977                           
  7978                           ; BSR set to: 0
  7979                           ;Battery.c: 28: }
  7980                           ;Battery.c: 29: Battery_Filter();
  7981  002F4A  EC4A  F011         	call	_Battery_Filter	;wreg free
  7982  002F4E  0012               	return	
  7983  002F50                     __end_of_Battery_Convert:
  7984                           	opt stack 0
  7985                           tblptru	equ	0xFF8
  7986                           tblptrh	equ	0xFF7
  7987                           tblptrl	equ	0xFF6
  7988                           tablat	equ	0xFF5
  7989                           prodh	equ	0xFF4
  7990                           prodl	equ	0xFF3
  7991                           intcon	equ	0xFF2
  7992                           intcon2	equ	0xFF1
  7993                           postinc0	equ	0xFEE
  7994                           wreg	equ	0xFE8
  7995                           postinc1	equ	0xFE6
  7996                           postdec1	equ	0xFE5
  7997                           fsr1h	equ	0xFE2
  7998                           fsr1l	equ	0xFE1
  7999                           indf2	equ	0xFDF
  8000                           postinc2	equ	0xFDE
  8001                           postdec2	equ	0xFDD
  8002                           fsr2h	equ	0xFDA
  8003                           fsr2l	equ	0xFD9
  8004                           status	equ	0xFD8
  8005                           
  8006 ;; *************** function ___awtoft *****************
  8007 ;; Defined at:
  8008 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;  c               2   42[COMRAM] int 
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;  sign            1   45[COMRAM] unsigned char 
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  3   42[COMRAM] float 
  8015 ;; Registers used:
  8016 ;;		wreg, status,2, status,0, prodl, cstack
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8022 ;;      Params:         3       0       0       0       0       0       0
  8023 ;;      Locals:         1       0       0       0       0       0       0
  8024 ;;      Temps:          0       0       0       0       0       0       0
  8025 ;;      Totals:         4       0       0       0       0       0       0
  8026 ;;Total ram usage:        4 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    5
  8029 ;; This function calls:
  8030 ;;		___ftpack
  8031 ;; This function is called by:
  8032 ;;		_Battery_Convert
  8033 ;;		_Temp_Convert
  8034 ;;		_log
  8035 ;; This function uses a non-reentrant model
  8036 ;;
  8037                           
  8038                           	psect	text36
  8039  0034A0                     __ptext36:
  8040                           	opt stack 0
  8041  0034A0                     ___awtoft:
  8042                           	opt stack 23
  8043                           
  8044                           ;incstack = 0
  8045  0034A0  0E00               	movlw	0
  8046  0034A2  6E2E               	movwf	___awtoft@sign,c
  8047  0034A4  502C               	movf	___awtoft@c+1,w,c
  8048  0034A6  0A80               	xorlw	128
  8049  0034A8  6EF3               	movwf	prodl,c
  8050  0034AA  0E80               	movlw	128
  8051  0034AC  5CF3               	subwf	prodl,w,c
  8052  0034AE  0E00               	movlw	0
  8053  0034B0  B4D8               	btfsc	status,2,c
  8054  0034B2  5C2B               	subwf	___awtoft@c,w,c
  8055  0034B4  B0D8               	btfsc	status,0,c
  8056  0034B6  D006               	goto	l4492
  8057  0034B8  6C2B               	negf	___awtoft@c,c
  8058  0034BA  1E2C               	comf	___awtoft@c+1,f,c
  8059  0034BC  B0D8               	btfsc	status,0,c
  8060  0034BE  2A2C               	incf	___awtoft@c+1,f,c
  8061  0034C0  0E01               	movlw	1
  8062  0034C2  6E2E               	movwf	___awtoft@sign,c
  8063  0034C4                     l4492:
  8064  0034C4  C02B  F017         	movff	___awtoft@c,___ftpack@arg
  8065  0034C8  C02C  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  8066  0034CC  6A19               	clrf	___ftpack@arg+2,c
  8067  0034CE  0E8E               	movlw	142
  8068  0034D0  6E1A               	movwf	___ftpack@exp,c
  8069  0034D2  C02E  F01B         	movff	___awtoft@sign,___ftpack@sign
  8070  0034D6  ECA8  F017         	call	___ftpack	;wreg free
  8071  0034DA  C017  F02B         	movff	?___ftpack,?___awtoft
  8072  0034DE  C018  F02C         	movff	?___ftpack+1,?___awtoft+1
  8073  0034E2  C019  F02D         	movff	?___ftpack+2,?___awtoft+2
  8074  0034E6  0012               	return	
  8075  0034E8                     __end_of___awtoft:
  8076                           	opt stack 0
  8077                           tblptru	equ	0xFF8
  8078                           tblptrh	equ	0xFF7
  8079                           tblptrl	equ	0xFF6
  8080                           tablat	equ	0xFF5
  8081                           prodh	equ	0xFF4
  8082                           prodl	equ	0xFF3
  8083                           intcon	equ	0xFF2
  8084                           intcon2	equ	0xFF1
  8085                           postinc0	equ	0xFEE
  8086                           wreg	equ	0xFE8
  8087                           postinc1	equ	0xFE6
  8088                           postdec1	equ	0xFE5
  8089                           fsr1h	equ	0xFE2
  8090                           fsr1l	equ	0xFE1
  8091                           indf2	equ	0xFDF
  8092                           postinc2	equ	0xFDE
  8093                           postdec2	equ	0xFDD
  8094                           fsr2h	equ	0xFDA
  8095                           fsr2l	equ	0xFD9
  8096                           status	equ	0xFD8
  8097                           
  8098 ;; *************** function ___awdiv *****************
  8099 ;; Defined at:
  8100 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;  dividend        2   28[COMRAM] int 
  8103 ;;  divisor         2   30[COMRAM] int 
  8104 ;; Auto vars:     Size  Location     Type
  8105 ;;  quotient        2   34[COMRAM] int 
  8106 ;;  sign            1   33[COMRAM] unsigned char 
  8107 ;;  counter         1   32[COMRAM] unsigned char 
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  2   28[COMRAM] int 
  8110 ;; Registers used:
  8111 ;;		wreg, status,2, status,0, prodl
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8117 ;;      Params:         4       0       0       0       0       0       0
  8118 ;;      Locals:         4       0       0       0       0       0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0
  8120 ;;      Totals:         8       0       0       0       0       0       0
  8121 ;;Total ram usage:        8 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    4
  8124 ;; This function calls:
  8125 ;;		Nothing
  8126 ;; This function is called by:
  8127 ;;		_Battery_Convert
  8128 ;;		_Temp_Convert
  8129 ;;		_fround
  8130 ;;		_scale
  8131 ;;		_printf
  8132 ;; This function uses a non-reentrant model
  8133 ;;
  8134                           
  8135                           	psect	text37
  8136  002FF8                     __ptext37:
  8137                           	opt stack 0
  8138  002FF8                     ___awdiv:
  8139                           	opt stack 24
  8140                           
  8141                           ;incstack = 0
  8142  002FF8  0E00               	movlw	0
  8143  002FFA  6E22               	movwf	___awdiv@sign,c
  8144  002FFC  5020               	movf	___awdiv@divisor+1,w,c
  8145  002FFE  0A80               	xorlw	128
  8146  003000  6EF3               	movwf	prodl,c
  8147  003002  0E80               	movlw	128
  8148  003004  5CF3               	subwf	prodl,w,c
  8149  003006  0E00               	movlw	0
  8150  003008  B4D8               	btfsc	status,2,c
  8151  00300A  5C1F               	subwf	___awdiv@divisor,w,c
  8152  00300C  B0D8               	btfsc	status,0,c
  8153  00300E  D006               	goto	l4412
  8154  003010  6C1F               	negf	___awdiv@divisor,c
  8155  003012  1E20               	comf	___awdiv@divisor+1,f,c
  8156  003014  B0D8               	btfsc	status,0,c
  8157  003016  2A20               	incf	___awdiv@divisor+1,f,c
  8158  003018  0E01               	movlw	1
  8159  00301A  6E22               	movwf	___awdiv@sign,c
  8160  00301C                     l4412:
  8161  00301C  501E               	movf	___awdiv@dividend+1,w,c
  8162  00301E  0A80               	xorlw	128
  8163  003020  6EF3               	movwf	prodl,c
  8164  003022  0E80               	movlw	128
  8165  003024  5CF3               	subwf	prodl,w,c
  8166  003026  0E00               	movlw	0
  8167  003028  B4D8               	btfsc	status,2,c
  8168  00302A  5C1D               	subwf	___awdiv@dividend,w,c
  8169  00302C  B0D8               	btfsc	status,0,c
  8170  00302E  D006               	goto	l4418
  8171  003030  6C1D               	negf	___awdiv@dividend,c
  8172  003032  1E1E               	comf	___awdiv@dividend+1,f,c
  8173  003034  B0D8               	btfsc	status,0,c
  8174  003036  2A1E               	incf	___awdiv@dividend+1,f,c
  8175  003038  0E01               	movlw	1
  8176  00303A  1A22               	xorwf	___awdiv@sign,f,c
  8177  00303C                     l4418:
  8178  00303C  0E00               	movlw	0
  8179  00303E  6E24               	movwf	___awdiv@quotient+1,c
  8180  003040  0E00               	movlw	0
  8181  003042  6E23               	movwf	___awdiv@quotient,c
  8182  003044  5020               	movf	___awdiv@divisor+1,w,c
  8183  003046  101F               	iorwf	___awdiv@divisor,w,c
  8184  003048  B4D8               	btfsc	status,2,c
  8185  00304A  D01C               	goto	l4440
  8186  00304C  0E01               	movlw	1
  8187  00304E  6E21               	movwf	___awdiv@counter,c
  8188  003050  D004               	goto	l4426
  8189  003052                     l4424:
  8190  003052  90D8               	bcf	status,0,c
  8191  003054  361F               	rlcf	___awdiv@divisor,f,c
  8192  003056  3620               	rlcf	___awdiv@divisor+1,f,c
  8193  003058  2A21               	incf	___awdiv@counter,f,c
  8194  00305A                     l4426:
  8195  00305A  AE20               	btfss	___awdiv@divisor+1,7,c
  8196  00305C  D7FA               	goto	l4424
  8197  00305E                     l4428:
  8198  00305E  90D8               	bcf	status,0,c
  8199  003060  3623               	rlcf	___awdiv@quotient,f,c
  8200  003062  3624               	rlcf	___awdiv@quotient+1,f,c
  8201  003064  501F               	movf	___awdiv@divisor,w,c
  8202  003066  5C1D               	subwf	___awdiv@dividend,w,c
  8203  003068  5020               	movf	___awdiv@divisor+1,w,c
  8204  00306A  581E               	subwfb	___awdiv@dividend+1,w,c
  8205  00306C  A0D8               	btfss	status,0,c
  8206  00306E  D005               	goto	l4436
  8207  003070  501F               	movf	___awdiv@divisor,w,c
  8208  003072  5E1D               	subwf	___awdiv@dividend,f,c
  8209  003074  5020               	movf	___awdiv@divisor+1,w,c
  8210  003076  5A1E               	subwfb	___awdiv@dividend+1,f,c
  8211  003078  8023               	bsf	___awdiv@quotient,0,c
  8212  00307A                     l4436:
  8213  00307A  90D8               	bcf	status,0,c
  8214  00307C  3220               	rrcf	___awdiv@divisor+1,f,c
  8215  00307E  321F               	rrcf	___awdiv@divisor,f,c
  8216  003080  2E21               	decfsz	___awdiv@counter,f,c
  8217  003082  D7ED               	goto	l4428
  8218  003084                     l4440:
  8219  003084  5022               	movf	___awdiv@sign,w,c
  8220  003086  B4D8               	btfsc	status,2,c
  8221  003088  D004               	goto	l4444
  8222  00308A  6C23               	negf	___awdiv@quotient,c
  8223  00308C  1E24               	comf	___awdiv@quotient+1,f,c
  8224  00308E  B0D8               	btfsc	status,0,c
  8225  003090  2A24               	incf	___awdiv@quotient+1,f,c
  8226  003092                     l4444:
  8227  003092  C023  F01D         	movff	___awdiv@quotient,?___awdiv
  8228  003096  C024  F01E         	movff	___awdiv@quotient+1,?___awdiv+1
  8229  00309A  0012               	return	
  8230  00309C                     __end_of___awdiv:
  8231                           	opt stack 0
  8232                           tblptru	equ	0xFF8
  8233                           tblptrh	equ	0xFF7
  8234                           tblptrl	equ	0xFF6
  8235                           tablat	equ	0xFF5
  8236                           prodh	equ	0xFF4
  8237                           prodl	equ	0xFF3
  8238                           intcon	equ	0xFF2
  8239                           intcon2	equ	0xFF1
  8240                           postinc0	equ	0xFEE
  8241                           wreg	equ	0xFE8
  8242                           postinc1	equ	0xFE6
  8243                           postdec1	equ	0xFE5
  8244                           fsr1h	equ	0xFE2
  8245                           fsr1l	equ	0xFE1
  8246                           indf2	equ	0xFDF
  8247                           postinc2	equ	0xFDE
  8248                           postdec2	equ	0xFDD
  8249                           fsr2h	equ	0xFDA
  8250                           fsr2l	equ	0xFD9
  8251                           status	equ	0xFD8
  8252                           
  8253 ;; *************** function _Battery_Filter *****************
  8254 ;; Defined at:
  8255 ;;		line 32 in file "Battery.c"
  8256 ;; Parameters:    Size  Location     Type
  8257 ;;		None
  8258 ;; Auto vars:     Size  Location     Type
  8259 ;;  x               2   49[COMRAM] int 
  8260 ;; Return value:  Size  Location     Type
  8261 ;;		None               void
  8262 ;; Registers used:
  8263 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8269 ;;      Params:         0       0       0       0       0       0       0
  8270 ;;      Locals:         2       0       0       0       0       0       0
  8271 ;;      Temps:          0       0       0       0       0       0       0
  8272 ;;      Totals:         2       0       0       0       0       0       0
  8273 ;;Total ram usage:        2 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; Hardware stack levels required when called:    6
  8276 ;; This function calls:
  8277 ;;		___ftadd
  8278 ;;		___ftmul
  8279 ;;		___wmul
  8280 ;; This function is called by:
  8281 ;;		_Battery_Convert
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           	psect	text38
  8286  002294                     __ptext38:
  8287                           	opt stack 0
  8288  002294                     _Battery_Filter:
  8289                           	opt stack 23
  8290                           
  8291                           ;Battery.c: 35: int x;
  8292                           ;Battery.c: 36: for(x = 0; x < 10; x++)
  8293                           
  8294                           ;incstack = 0
  8295  002294  0E00               	movlw	0
  8296  002296  6E33               	movwf	Battery_Filter@x+1,c
  8297  002298  0E00               	movlw	0
  8298  00229A  6E32               	movwf	Battery_Filter@x,c
  8299  00229C  5033               	movf	Battery_Filter@x+1,w,c
  8300  00229E  0A80               	xorlw	128
  8301  0022A0  0F80               	addlw	-128
  8302  0022A2  0E0A               	movlw	10
  8303  0022A4  B4D8               	btfsc	status,2,c
  8304  0022A6  5C32               	subwf	Battery_Filter@x,w,c
  8305  0022A8  B0D8               	btfsc	status,0,c
  8306  0022AA  D076               	goto	l4516
  8307                           
  8308                           ;Battery.c: 37: {
  8309                           ;Battery.c: 38: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
  8310  0022AC  C032  F025         	movff	Battery_Filter@x,___wmul@multiplier
  8311  0022B0  C033  F026         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  8312  0022B4  0E00               	movlw	0
  8313  0022B6  6E28               	movwf	___wmul@multiplicand+1,c
  8314  0022B8  0E03               	movlw	3
  8315  0022BA  6E27               	movwf	___wmul@multiplicand,c
  8316  0022BC  EC57  F01B         	call	___wmul	;wreg free
  8317  0022C0  0100               	movlb	0	; () banked
  8318  0022C2  0E60               	movlw	low _Battery_Volt
  8319  0022C4  2425               	addwf	?___wmul,w,c
  8320  0022C6  6ED9               	movwf	fsr2l,c
  8321  0022C8  0100               	movlb	0	; () banked
  8322  0022CA  0E00               	movlw	high _Battery_Volt
  8323  0022CC  2026               	addwfc	?___wmul+1,w,c
  8324  0022CE  6EDA               	movwf	fsr2h,c
  8325  0022D0  0E48               	movlw	72
  8326  0022D2  0100               	movlb	0	; () banked
  8327  0022D4  6FAF               	movwf	___ftmul@f2& (0+255),b
  8328  0022D6  0E61               	movlw	97
  8329  0022D8  0100               	movlb	0	; () banked
  8330  0022DA  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  8331  0022DC  0E3F               	movlw	63
  8332  0022DE  0100               	movlb	0	; () banked
  8333  0022E0  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  8334  0022E2  C032  F025         	movff	Battery_Filter@x,___wmul@multiplier
  8335  0022E6  C033  F026         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  8336  0022EA  0E00               	movlw	0
  8337  0022EC  6E28               	movwf	___wmul@multiplicand+1,c
  8338  0022EE  0E03               	movlw	3
  8339  0022F0  6E27               	movwf	___wmul@multiplicand,c
  8340  0022F2  EC57  F01B         	call	___wmul	;wreg free
  8341  0022F6  0101               	movlb	1	; () banked
  8342  0022F8  0E8C               	movlw	low _TempBattery_Volt
  8343  0022FA  2425               	addwf	?___wmul,w,c
  8344  0022FC  6EE1               	movwf	fsr1l,c
  8345  0022FE  0101               	movlb	1	; () banked
  8346  002300  0E01               	movlw	high _TempBattery_Volt
  8347  002302  2026               	addwfc	?___wmul+1,w,c
  8348  002304  6EE2               	movwf	fsr1h,c
  8349  002306  0100               	movlb	0	; () banked
  8350  002308  CFE6 F0AC          	movff	postinc1,___ftmul@f1
  8351  00230C  0100               	movlb	0	; () banked
  8352  00230E  CFE6 F0AD          	movff	postinc1,___ftmul@f1+1
  8353  002312  0100               	movlb	0	; () banked
  8354  002314  CFE5 F0AE          	movff	postdec1,___ftmul@f1+2
  8355  002318  ECBD  F012         	call	___ftmul	;wreg free
  8356  00231C  C0AC  F0C2         	movff	?___ftmul,___ftadd@f1
  8357  002320  C0AD  F0C3         	movff	?___ftmul+1,___ftadd@f1+1
  8358  002324  C0AE  F0C4         	movff	?___ftmul+2,___ftadd@f1+2
  8359  002328  0EC3               	movlw	195
  8360  00232A  0100               	movlb	0	; () banked
  8361  00232C  6FAF               	movwf	___ftmul@f2& (0+255),b
  8362  00232E  0EF5               	movlw	245
  8363  002330  0100               	movlb	0	; () banked
  8364  002332  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  8365  002334  0E3D               	movlw	61
  8366  002336  0100               	movlb	0	; () banked
  8367  002338  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  8368  00233A  0E00               	movlw	0
  8369  00233C  6E28               	movwf	___wmul@multiplicand+1,c
  8370  00233E  0E03               	movlw	3
  8371  002340  6E27               	movwf	___wmul@multiplicand,c
  8372  002342  C032  F025         	movff	Battery_Filter@x,___wmul@multiplier
  8373  002346  C033  F026         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  8374  00234A  EC57  F01B         	call	___wmul	;wreg free
  8375  00234E  0101               	movlb	1	; () banked
  8376  002350  0E32               	movlw	low _PrevBattery_Volt
  8377  002352  2425               	addwf	?___wmul,w,c
  8378  002354  6EE1               	movwf	fsr1l,c
  8379  002356  0101               	movlb	1	; () banked
  8380  002358  0E01               	movlw	high _PrevBattery_Volt
  8381  00235A  2026               	addwfc	?___wmul+1,w,c
  8382  00235C  6EE2               	movwf	fsr1h,c
  8383  00235E  0100               	movlb	0	; () banked
  8384  002360  CFE6 F0AC          	movff	postinc1,___ftmul@f1
  8385  002364  0100               	movlb	0	; () banked
  8386  002366  CFE6 F0AD          	movff	postinc1,___ftmul@f1+1
  8387  00236A  0100               	movlb	0	; () banked
  8388  00236C  CFE5 F0AE          	movff	postdec1,___ftmul@f1+2
  8389  002370  ECBD  F012         	call	___ftmul	;wreg free
  8390  002374  C0AC  F0C5         	movff	?___ftmul,___ftadd@f2
  8391  002378  C0AD  F0C6         	movff	?___ftmul+1,___ftadd@f2+1
  8392  00237C  C0AE  F0C7         	movff	?___ftmul+2,___ftadd@f2+2
  8393  002380  EC8C  F00D         	call	___ftadd	;wreg free
  8394  002384  C0C2  FFDE         	movff	?___ftadd,postinc2
  8395  002388  C0C3  FFDE         	movff	?___ftadd+1,postinc2
  8396  00238C  C0C4  FFDD         	movff	?___ftadd+2,postdec2
  8397  002390  52DD               	movf	postdec2,f,c
  8398  002392  4A32               	infsnz	Battery_Filter@x,f,c
  8399  002394  2A33               	incf	Battery_Filter@x+1,f,c
  8400  002396  D782               	goto	L13
  8401  002398                     l4516:
  8402                           
  8403                           ;Battery.c: 39: }
  8404                           ;Battery.c: 40: for(x = 0; x < 10; x++)
  8405  002398  0E00               	movlw	0
  8406  00239A  6E33               	movwf	Battery_Filter@x+1,c
  8407  00239C  0E00               	movlw	0
  8408  00239E  6E32               	movwf	Battery_Filter@x,c
  8409  0023A0  5033               	movf	Battery_Filter@x+1,w,c
  8410  0023A2  0A80               	xorlw	128
  8411  0023A4  0F80               	addlw	-128
  8412  0023A6  0E0A               	movlw	10
  8413  0023A8  B4D8               	btfsc	status,2,c
  8414  0023AA  5C32               	subwf	Battery_Filter@x,w,c
  8415  0023AC  B0D8               	btfsc	status,0,c
  8416  0023AE  0012               	return	
  8417                           
  8418                           ;Battery.c: 41: {
  8419                           ;Battery.c: 42: PrevBattery_Volt[x] = Battery_Volt[x];
  8420  0023B0  C032  F025         	movff	Battery_Filter@x,___wmul@multiplier
  8421  0023B4  C033  F026         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  8422  0023B8  0E00               	movlw	0
  8423  0023BA  6E28               	movwf	___wmul@multiplicand+1,c
  8424  0023BC  0E03               	movlw	3
  8425  0023BE  6E27               	movwf	___wmul@multiplicand,c
  8426  0023C0  EC57  F01B         	call	___wmul	;wreg free
  8427  0023C4  0100               	movlb	0	; () banked
  8428  0023C6  0E60               	movlw	low _Battery_Volt
  8429  0023C8  2425               	addwf	?___wmul,w,c
  8430  0023CA  6ED9               	movwf	fsr2l,c
  8431  0023CC  0100               	movlb	0	; () banked
  8432  0023CE  0E00               	movlw	high _Battery_Volt
  8433  0023D0  2026               	addwfc	?___wmul+1,w,c
  8434  0023D2  6EDA               	movwf	fsr2h,c
  8435  0023D4  C032  F025         	movff	Battery_Filter@x,___wmul@multiplier
  8436  0023D8  C033  F026         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  8437  0023DC  0E00               	movlw	0
  8438  0023DE  6E28               	movwf	___wmul@multiplicand+1,c
  8439  0023E0  0E03               	movlw	3
  8440  0023E2  6E27               	movwf	___wmul@multiplicand,c
  8441  0023E4  EC57  F01B         	call	___wmul	;wreg free
  8442  0023E8  0101               	movlb	1	; () banked
  8443  0023EA  0E32               	movlw	low _PrevBattery_Volt
  8444  0023EC  2425               	addwf	?___wmul,w,c
  8445  0023EE  6EE1               	movwf	fsr1l,c
  8446  0023F0  0101               	movlb	1	; () banked
  8447  0023F2  0E01               	movlw	high _PrevBattery_Volt
  8448  0023F4  2026               	addwfc	?___wmul+1,w,c
  8449  0023F6  6EE2               	movwf	fsr1h,c
  8450  0023F8  CFDE FFE6          	movff	postinc2,postinc1
  8451  0023FC  CFDE FFE6          	movff	postinc2,postinc1
  8452  002400  CFDE FFE5          	movff	postinc2,postdec1
  8453  002404  52E5               	movf	postdec1,f,c
  8454                           
  8455                           ; BSR set to: 1
  8456  002406  4A32               	infsnz	Battery_Filter@x,f,c
  8457  002408  2A33               	incf	Battery_Filter@x+1,f,c
  8458  00240A  D7CA               	goto	L14
  8459  00240C                     __end_of_Battery_Filter:
  8460                           	opt stack 0
  8461                           tblptru	equ	0xFF8
  8462                           tblptrh	equ	0xFF7
  8463                           tblptrl	equ	0xFF6
  8464                           tablat	equ	0xFF5
  8465                           prodh	equ	0xFF4
  8466                           prodl	equ	0xFF3
  8467                           intcon	equ	0xFF2
  8468                           intcon2	equ	0xFF1
  8469                           postinc0	equ	0xFEE
  8470                           wreg	equ	0xFE8
  8471                           postinc1	equ	0xFE6
  8472                           postdec1	equ	0xFE5
  8473                           fsr1h	equ	0xFE2
  8474                           fsr1l	equ	0xFE1
  8475                           indf2	equ	0xFDF
  8476                           postinc2	equ	0xFDE
  8477                           postdec2	equ	0xFDD
  8478                           fsr2h	equ	0xFDA
  8479                           fsr2l	equ	0xFD9
  8480                           status	equ	0xFD8
  8481                           
  8482 ;; *************** function ___wmul *****************
  8483 ;; Defined at:
  8484 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;  multiplier      2   36[COMRAM] unsigned int 
  8487 ;;  multiplicand    2   38[COMRAM] unsigned int 
  8488 ;; Auto vars:     Size  Location     Type
  8489 ;;  product         2   40[COMRAM] unsigned int 
  8490 ;; Return value:  Size  Location     Type
  8491 ;;                  2   36[COMRAM] unsigned int 
  8492 ;; Registers used:
  8493 ;;		wreg, status,2, status,0, prodl, prodh
  8494 ;; Tracked objects:
  8495 ;;		On entry : 0/0
  8496 ;;		On exit  : 0/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8499 ;;      Params:         4       0       0       0       0       0       0
  8500 ;;      Locals:         2       0       0       0       0       0       0
  8501 ;;      Temps:          0       0       0       0       0       0       0
  8502 ;;      Totals:         6       0       0       0       0       0       0
  8503 ;;Total ram usage:        6 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:    4
  8506 ;; This function calls:
  8507 ;;		Nothing
  8508 ;; This function is called by:
  8509 ;;		_Battery_Convert
  8510 ;;		_Battery_Filter
  8511 ;;		_Battery_Fault
  8512 ;;		_Battery_Get
  8513 ;;		_Temp_Fault
  8514 ;;		_Temp_Filter
  8515 ;;		_Temp_Convert
  8516 ;;		_fround
  8517 ;;		_scale
  8518 ;;		_printf
  8519 ;;		_eval_poly
  8520 ;;		_Tempeture_Get
  8521 ;; This function uses a non-reentrant model
  8522 ;;
  8523                           
  8524                           	psect	text39
  8525  0036AE                     __ptext39:
  8526                           	opt stack 0
  8527  0036AE                     ___wmul:
  8528                           	opt stack 24
  8529                           
  8530                           ;incstack = 0
  8531  0036AE  5025               	movf	___wmul@multiplier,w,c
  8532  0036B0  0227               	mulwf	___wmul@multiplicand,c
  8533  0036B2  CFF3 F029          	movff	prodl,___wmul@product
  8534  0036B6  CFF4 F02A          	movff	prodh,___wmul@product+1
  8535  0036BA  5025               	movf	___wmul@multiplier,w,c
  8536  0036BC  0228               	mulwf	___wmul@multiplicand+1,c
  8537  0036BE  50F3               	movf	prodl,w,c
  8538  0036C0  262A               	addwf	___wmul@product+1,f,c
  8539  0036C2  5026               	movf	___wmul@multiplier+1,w,c
  8540  0036C4  0227               	mulwf	___wmul@multiplicand,c
  8541  0036C6  50F3               	movf	prodl,w,c
  8542  0036C8  262A               	addwf	___wmul@product+1,f,c
  8543  0036CA  C029  F025         	movff	___wmul@product,?___wmul
  8544  0036CE  C02A  F026         	movff	___wmul@product+1,?___wmul+1
  8545  0036D2  0012               	return	
  8546  0036D4                     __end_of___wmul:
  8547                           	opt stack 0
  8548                           tblptru	equ	0xFF8
  8549                           tblptrh	equ	0xFF7
  8550                           tblptrl	equ	0xFF6
  8551                           tablat	equ	0xFF5
  8552                           prodh	equ	0xFF4
  8553                           prodl	equ	0xFF3
  8554                           intcon	equ	0xFF2
  8555                           intcon2	equ	0xFF1
  8556                           postinc0	equ	0xFEE
  8557                           wreg	equ	0xFE8
  8558                           postinc1	equ	0xFE6
  8559                           postdec1	equ	0xFE5
  8560                           fsr1h	equ	0xFE2
  8561                           fsr1l	equ	0xFE1
  8562                           indf2	equ	0xFDF
  8563                           postinc2	equ	0xFDE
  8564                           postdec2	equ	0xFDD
  8565                           fsr2h	equ	0xFDA
  8566                           fsr2l	equ	0xFD9
  8567                           status	equ	0xFD8
  8568                           
  8569 ;; *************** function ___ftmul *****************
  8570 ;; Defined at:
  8571 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;  f1              3    0[BANK0 ] float 
  8574 ;;  f2              3    3[BANK0 ] float 
  8575 ;; Auto vars:     Size  Location     Type
  8576 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  8577 ;;  sign            1   11[BANK0 ] unsigned char 
  8578 ;;  cntr            1   10[BANK0 ] unsigned char 
  8579 ;;  exp             1    6[BANK0 ] unsigned char 
  8580 ;; Return value:  Size  Location     Type
  8581 ;;                  3    0[BANK0 ] float 
  8582 ;; Registers used:
  8583 ;;		wreg, status,2, status,0, cstack
  8584 ;; Tracked objects:
  8585 ;;		On entry : 0/0
  8586 ;;		On exit  : 0/0
  8587 ;;		Unchanged: 0/0
  8588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8589 ;;      Params:         0       6       0       0       0       0       0
  8590 ;;      Locals:         0       6       0       0       0       0       0
  8591 ;;      Temps:          3       0       0       0       0       0       0
  8592 ;;      Totals:         3      12       0       0       0       0       0
  8593 ;;Total ram usage:       15 bytes
  8594 ;; Hardware stack levels used:    1
  8595 ;; Hardware stack levels required when called:    5
  8596 ;; This function calls:
  8597 ;;		___ftpack
  8598 ;; This function is called by:
  8599 ;;		_Battery_Filter
  8600 ;;		_Temp_Filter
  8601 ;;		_Temp_Convert
  8602 ;;		_fround
  8603 ;;		_scale
  8604 ;;		_printf
  8605 ;;		_log
  8606 ;;		_eval_poly
  8607 ;; This function uses a non-reentrant model
  8608 ;;
  8609                           
  8610                           	psect	text40
  8611  00257A                     __ptext40:
  8612                           	opt stack 0
  8613  00257A                     ___ftmul:
  8614                           	opt stack 23
  8615                           
  8616                           ;incstack = 0
  8617  00257A  0100               	movlb	0	; () banked
  8618  00257C  C0AE  F02F         	movff	___ftmul@f1+2,??___ftmul
  8619  002580  6A30               	clrf	(??___ftmul+1)& (0+255),c
  8620  002582  6A31               	clrf	(??___ftmul+2)& (0+255),c
  8621  002584  0100               	movlb	0	; () banked
  8622  002586  35AD               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  8623  002588  362F               	rlcf	??___ftmul& (0+255),f,c
  8624  00258A  E301               	bnc	u4211
  8625  00258C  8030               	bsf	(??___ftmul+1)& (0+255),0,c
  8626  00258E                     u4211:
  8627  00258E  502F               	movf	??___ftmul,w,c
  8628  002590  0100               	movlb	0	; () banked
  8629  002592  6FB2               	movwf	___ftmul@exp& (0+255),b
  8630  002594  0100               	movlb	0	; () banked
  8631  002596  67B2               	tstfsz	___ftmul@exp& (0+255),b
  8632  002598  D00A               	goto	l4344
  8633                           
  8634                           ; BSR set to: 0
  8635  00259A  0E00               	movlw	0
  8636  00259C  0100               	movlb	0	; () banked
  8637  00259E  6FAC               	movwf	?___ftmul& (0+255),b
  8638  0025A0  0E00               	movlw	0
  8639  0025A2  0100               	movlb	0	; () banked
  8640  0025A4  6FAD               	movwf	(?___ftmul+1)& (0+255),b
  8641  0025A6  0E00               	movlw	0
  8642  0025A8  0100               	movlb	0	; () banked
  8643  0025AA  6FAE               	movwf	(?___ftmul+2)& (0+255),b
  8644  0025AC  0012               	return	
  8645  0025AE                     l4344:
  8646                           
  8647                           ; BSR set to: 0
  8648  0025AE  0100               	movlb	0	; () banked
  8649  0025B0  C0B1  F02F         	movff	___ftmul@f2+2,??___ftmul
  8650  0025B4  6A30               	clrf	(??___ftmul+1)& (0+255),c
  8651  0025B6  6A31               	clrf	(??___ftmul+2)& (0+255),c
  8652  0025B8  0100               	movlb	0	; () banked
  8653  0025BA  35B0               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  8654  0025BC  362F               	rlcf	??___ftmul& (0+255),f,c
  8655  0025BE  E301               	bnc	u4231
  8656  0025C0  8030               	bsf	(??___ftmul+1)& (0+255),0,c
  8657  0025C2                     u4231:
  8658  0025C2  502F               	movf	??___ftmul,w,c
  8659  0025C4  0100               	movlb	0	; () banked
  8660  0025C6  6FB7               	movwf	___ftmul@sign& (0+255),b
  8661  0025C8  0100               	movlb	0	; () banked
  8662  0025CA  67B7               	tstfsz	___ftmul@sign& (0+255),b
  8663  0025CC  D00A               	goto	l4350
  8664                           
  8665                           ; BSR set to: 0
  8666  0025CE  0E00               	movlw	0
  8667  0025D0  0100               	movlb	0	; () banked
  8668  0025D2  6FAC               	movwf	?___ftmul& (0+255),b
  8669  0025D4  0E00               	movlw	0
  8670  0025D6  0100               	movlb	0	; () banked
  8671  0025D8  6FAD               	movwf	(?___ftmul+1)& (0+255),b
  8672  0025DA  0E00               	movlw	0
  8673  0025DC  0100               	movlb	0	; () banked
  8674  0025DE  6FAE               	movwf	(?___ftmul+2)& (0+255),b
  8675  0025E0  0012               	return	
  8676  0025E2                     l4350:
  8677                           
  8678                           ; BSR set to: 0
  8679  0025E2  0100               	movlb	0	; () banked
  8680  0025E4  51B7               	movf	___ftmul@sign& (0+255),w,b
  8681  0025E6  0F7B               	addlw	123
  8682  0025E8  0100               	movlb	0	; () banked
  8683  0025EA  27B2               	addwf	___ftmul@exp& (0+255),f,b
  8684                           
  8685                           ; BSR set to: 0
  8686  0025EC  C0AE  F0B7         	movff	___ftmul@f1+2,___ftmul@sign
  8687  0025F0  0100               	movlb	0	; () banked
  8688  0025F2  51B1               	movf	(___ftmul@f2+2)& (0+255),w,b
  8689  0025F4  0100               	movlb	0	; () banked
  8690  0025F6  1BB7               	xorwf	___ftmul@sign& (0+255),f,b
  8691  0025F8  0E80               	movlw	128
  8692  0025FA  0100               	movlb	0	; () banked
  8693  0025FC  17B7               	andwf	___ftmul@sign& (0+255),f,b
  8694                           
  8695                           ; BSR set to: 0
  8696  0025FE  0100               	movlb	0	; () banked
  8697  002600  8FAD               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8698                           
  8699                           ; BSR set to: 0
  8700  002602  0100               	movlb	0	; () banked
  8701  002604  8FB0               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8702                           
  8703                           ; BSR set to: 0
  8704  002606  0EFF               	movlw	255
  8705  002608  0100               	movlb	0	; () banked
  8706  00260A  17AF               	andwf	___ftmul@f2& (0+255),f,b
  8707  00260C  0EFF               	movlw	255
  8708  00260E  0100               	movlb	0	; () banked
  8709  002610  17B0               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8710  002612  0E00               	movlw	0
  8711  002614  0100               	movlb	0	; () banked
  8712  002616  17B1               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8713                           
  8714                           ; BSR set to: 0
  8715  002618  0E00               	movlw	0
  8716  00261A  0100               	movlb	0	; () banked
  8717  00261C  6FB3               	movwf	___ftmul@f3_as_product& (0+255),b
  8718  00261E  0E00               	movlw	0
  8719  002620  0100               	movlb	0	; () banked
  8720  002622  6FB4               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8721  002624  0E00               	movlw	0
  8722  002626  0100               	movlb	0	; () banked
  8723  002628  6FB5               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8724                           
  8725                           ; BSR set to: 0
  8726  00262A  0E07               	movlw	7
  8727  00262C  0100               	movlb	0	; () banked
  8728  00262E  6FB6               	movwf	___ftmul@cntr& (0+255),b
  8729  002630                     l4364:
  8730                           
  8731                           ; BSR set to: 0
  8732  002630  0100               	movlb	0	; () banked
  8733  002632  A1AC               	btfss	___ftmul@f1& (0+255),0,b
  8734  002634  D00C               	goto	l4368
  8735                           
  8736                           ; BSR set to: 0
  8737  002636  0100               	movlb	0	; () banked
  8738  002638  51AF               	movf	___ftmul@f2& (0+255),w,b
  8739  00263A  0100               	movlb	0	; () banked
  8740  00263C  27B3               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8741  00263E  0100               	movlb	0	; () banked
  8742  002640  51B0               	movf	(___ftmul@f2+1)& (0+255),w,b
  8743  002642  0100               	movlb	0	; () banked
  8744  002644  23B4               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8745  002646  0100               	movlb	0	; () banked
  8746  002648  51B1               	movf	(___ftmul@f2+2)& (0+255),w,b
  8747  00264A  0100               	movlb	0	; () banked
  8748  00264C  23B5               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8749  00264E                     l4368:
  8750                           
  8751                           ; BSR set to: 0
  8752  00264E  0100               	movlb	0	; () banked
  8753  002650  90D8               	bcf	status,0,c
  8754  002652  0100               	movlb	0	; () banked
  8755  002654  33AE               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8756  002656  0100               	movlb	0	; () banked
  8757  002658  33AD               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8758  00265A  0100               	movlb	0	; () banked
  8759  00265C  33AC               	rrcf	___ftmul@f1& (0+255),f,b
  8760  00265E  0100               	movlb	0	; () banked
  8761  002660  90D8               	bcf	status,0,c
  8762  002662  0100               	movlb	0	; () banked
  8763  002664  37AF               	rlcf	___ftmul@f2& (0+255),f,b
  8764  002666  0100               	movlb	0	; () banked
  8765  002668  37B0               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8766  00266A  0100               	movlb	0	; () banked
  8767  00266C  37B1               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8768                           
  8769                           ; BSR set to: 0
  8770  00266E  0100               	movlb	0	; () banked
  8771  002670  2FB6               	decfsz	___ftmul@cntr& (0+255),f,b
  8772  002672  D7DE               	goto	l4364
  8773                           
  8774                           ; BSR set to: 0
  8775                           
  8776                           ; BSR set to: 0
  8777  002674  0E09               	movlw	9
  8778  002676  0100               	movlb	0	; () banked
  8779  002678  6FB6               	movwf	___ftmul@cntr& (0+255),b
  8780  00267A                     l4374:
  8781                           
  8782                           ; BSR set to: 0
  8783  00267A  0100               	movlb	0	; () banked
  8784  00267C  A1AC               	btfss	___ftmul@f1& (0+255),0,b
  8785  00267E  D00C               	goto	l4378
  8786                           
  8787                           ; BSR set to: 0
  8788  002680  0100               	movlb	0	; () banked
  8789  002682  51AF               	movf	___ftmul@f2& (0+255),w,b
  8790  002684  0100               	movlb	0	; () banked
  8791  002686  27B3               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8792  002688  0100               	movlb	0	; () banked
  8793  00268A  51B0               	movf	(___ftmul@f2+1)& (0+255),w,b
  8794  00268C  0100               	movlb	0	; () banked
  8795  00268E  23B4               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8796  002690  0100               	movlb	0	; () banked
  8797  002692  51B1               	movf	(___ftmul@f2+2)& (0+255),w,b
  8798  002694  0100               	movlb	0	; () banked
  8799  002696  23B5               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8800  002698                     l4378:
  8801                           
  8802                           ; BSR set to: 0
  8803  002698  0100               	movlb	0	; () banked
  8804  00269A  90D8               	bcf	status,0,c
  8805  00269C  0100               	movlb	0	; () banked
  8806  00269E  33AE               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8807  0026A0  0100               	movlb	0	; () banked
  8808  0026A2  33AD               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8809  0026A4  0100               	movlb	0	; () banked
  8810  0026A6  33AC               	rrcf	___ftmul@f1& (0+255),f,b
  8811  0026A8  0100               	movlb	0	; () banked
  8812  0026AA  90D8               	bcf	status,0,c
  8813  0026AC  0100               	movlb	0	; () banked
  8814  0026AE  33B5               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8815  0026B0  0100               	movlb	0	; () banked
  8816  0026B2  33B4               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8817  0026B4  0100               	movlb	0	; () banked
  8818  0026B6  33B3               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8819                           
  8820                           ; BSR set to: 0
  8821  0026B8  0100               	movlb	0	; () banked
  8822  0026BA  2FB6               	decfsz	___ftmul@cntr& (0+255),f,b
  8823  0026BC  D7DE               	goto	l4374
  8824                           
  8825                           ; BSR set to: 0
  8826                           
  8827                           ; BSR set to: 0
  8828  0026BE  C0B3  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  8829  0026C2  C0B4  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8830  0026C6  C0B5  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8831  0026CA  C0B2  F01A         	movff	___ftmul@exp,___ftpack@exp
  8832  0026CE  C0B7  F01B         	movff	___ftmul@sign,___ftpack@sign
  8833  0026D2  ECA8  F017         	call	___ftpack	;wreg free
  8834  0026D6  C017  F0AC         	movff	?___ftpack,?___ftmul
  8835  0026DA  C018  F0AD         	movff	?___ftpack+1,?___ftmul+1
  8836  0026DE  C019  F0AE         	movff	?___ftpack+2,?___ftmul+2
  8837  0026E2  0012               	return	
  8838  0026E4                     __end_of___ftmul:
  8839                           	opt stack 0
  8840                           tblptru	equ	0xFF8
  8841                           tblptrh	equ	0xFF7
  8842                           tblptrl	equ	0xFF6
  8843                           tablat	equ	0xFF5
  8844                           prodh	equ	0xFF4
  8845                           prodl	equ	0xFF3
  8846                           intcon	equ	0xFF2
  8847                           intcon2	equ	0xFF1
  8848                           postinc0	equ	0xFEE
  8849                           wreg	equ	0xFE8
  8850                           postinc1	equ	0xFE6
  8851                           postdec1	equ	0xFE5
  8852                           fsr1h	equ	0xFE2
  8853                           fsr1l	equ	0xFE1
  8854                           indf2	equ	0xFDF
  8855                           postinc2	equ	0xFDE
  8856                           postdec2	equ	0xFDD
  8857                           fsr2h	equ	0xFDA
  8858                           fsr2l	equ	0xFD9
  8859                           status	equ	0xFD8
  8860                           
  8861 ;; *************** function ___ftadd *****************
  8862 ;; Defined at:
  8863 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;  f1              3   22[BANK0 ] float 
  8866 ;;  f2              3   25[BANK0 ] float 
  8867 ;; Auto vars:     Size  Location     Type
  8868 ;;  exp1            1   33[BANK0 ] unsigned char 
  8869 ;;  exp2            1   32[BANK0 ] unsigned char 
  8870 ;;  sign            1   31[BANK0 ] unsigned char 
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  3   22[BANK0 ] float 
  8873 ;; Registers used:
  8874 ;;		wreg, status,2, status,0, cstack
  8875 ;; Tracked objects:
  8876 ;;		On entry : 0/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8880 ;;      Params:         0       6       0       0       0       0       0
  8881 ;;      Locals:         0       3       0       0       0       0       0
  8882 ;;      Temps:          0       3       0       0       0       0       0
  8883 ;;      Totals:         0      12       0       0       0       0       0
  8884 ;;Total ram usage:       12 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; Hardware stack levels required when called:    5
  8887 ;; This function calls:
  8888 ;;		___ftpack
  8889 ;; This function is called by:
  8890 ;;		_Battery_Filter
  8891 ;;		_Temp_Filter
  8892 ;;		_Temp_Convert
  8893 ;;		_printf
  8894 ;;		___ftsub
  8895 ;;		_log
  8896 ;;		_eval_poly
  8897 ;; This function uses a non-reentrant model
  8898 ;;
  8899                           
  8900                           	psect	text41
  8901  001B18                     __ptext41:
  8902                           	opt stack 0
  8903  001B18                     ___ftadd:
  8904                           	opt stack 23
  8905                           
  8906                           ;incstack = 0
  8907  001B18  0100               	movlb	0	; () banked
  8908  001B1A  C0C4  F0C8         	movff	___ftadd@f1+2,??___ftadd
  8909  001B1E  0100               	movlb	0	; () banked
  8910  001B20  6BC9               	clrf	(??___ftadd+1)& (0+255),b
  8911  001B22  6BCA               	clrf	(??___ftadd+2)& (0+255),b
  8912  001B24  0100               	movlb	0	; () banked
  8913  001B26  35C3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8914  001B28  0100               	movlb	0	; () banked
  8915  001B2A  37C8               	rlcf	??___ftadd& (0+255),f,b
  8916  001B2C  E301               	bnc	u4001
  8917  001B2E  81C9               	bsf	(??___ftadd+1)& (0+255),0,b
  8918  001B30                     u4001:
  8919  001B30  0100               	movlb	0	; () banked
  8920  001B32  51C8               	movf	??___ftadd& (0+255),w,b
  8921  001B34  0100               	movlb	0	; () banked
  8922  001B36  6FCD               	movwf	___ftadd@exp1& (0+255),b
  8923  001B38  0100               	movlb	0	; () banked
  8924  001B3A  C0C7  F0C8         	movff	___ftadd@f2+2,??___ftadd
  8925  001B3E  0100               	movlb	0	; () banked
  8926  001B40  6BC9               	clrf	(??___ftadd+1)& (0+255),b
  8927  001B42  6BCA               	clrf	(??___ftadd+2)& (0+255),b
  8928  001B44  0100               	movlb	0	; () banked
  8929  001B46  35C6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8930  001B48  0100               	movlb	0	; () banked
  8931  001B4A  37C8               	rlcf	??___ftadd& (0+255),f,b
  8932  001B4C  E301               	bnc	u4011
  8933  001B4E  81C9               	bsf	(??___ftadd+1)& (0+255),0,b
  8934  001B50                     u4011:
  8935  001B50  0100               	movlb	0	; () banked
  8936  001B52  51C8               	movf	??___ftadd& (0+255),w,b
  8937  001B54  0100               	movlb	0	; () banked
  8938  001B56  6FCC               	movwf	___ftadd@exp2& (0+255),b
  8939                           
  8940                           ; BSR set to: 0
  8941  001B58  0100               	movlb	0	; () banked
  8942  001B5A  51CD               	movf	___ftadd@exp1& (0+255),w,b
  8943  001B5C  B4D8               	btfsc	status,2,c
  8944  001B5E  D012               	goto	l1023
  8945                           
  8946                           ; BSR set to: 0
  8947  001B60  0100               	movlb	0	; () banked
  8948  001B62  51CC               	movf	___ftadd@exp2& (0+255),w,b
  8949  001B64  0100               	movlb	0	; () banked
  8950  001B66  5DCD               	subwf	___ftadd@exp1& (0+255),w,b
  8951  001B68  B0D8               	btfsc	status,0,c
  8952  001B6A  D013               	goto	l4276
  8953                           
  8954                           ; BSR set to: 0
  8955  001B6C  0100               	movlb	0	; () banked
  8956  001B6E  51CD               	movf	___ftadd@exp1& (0+255),w,b
  8957  001B70  0800               	sublw	0
  8958  001B72  0100               	movlb	0	; () banked
  8959  001B74  25CC               	addwf	___ftadd@exp2& (0+255),w,b
  8960  001B76  0100               	movlb	0	; () banked
  8961  001B78  6FC8               	movwf	??___ftadd& (0+255),b
  8962  001B7A  0E19               	movlw	25
  8963  001B7C  0100               	movlb	0	; () banked
  8964  001B7E  5DC8               	subwf	??___ftadd& (0+255),w,b
  8965  001B80  A0D8               	btfss	status,0,c
  8966  001B82  D007               	goto	l4276
  8967  001B84                     l1023:
  8968                           
  8969                           ; BSR set to: 0
  8970  001B84  C0C5  F0C2         	movff	___ftadd@f2,?___ftadd
  8971  001B88  C0C6  F0C3         	movff	___ftadd@f2+1,?___ftadd+1
  8972  001B8C  C0C7  F0C4         	movff	___ftadd@f2+2,?___ftadd+2
  8973  001B90  0012               	return	
  8974  001B92                     l4276:
  8975                           
  8976                           ; BSR set to: 0
  8977  001B92  0100               	movlb	0	; () banked
  8978  001B94  51CC               	movf	___ftadd@exp2& (0+255),w,b
  8979  001B96  B4D8               	btfsc	status,2,c
  8980  001B98  D012               	goto	l1027
  8981                           
  8982                           ; BSR set to: 0
  8983  001B9A  0100               	movlb	0	; () banked
  8984  001B9C  51CD               	movf	___ftadd@exp1& (0+255),w,b
  8985  001B9E  0100               	movlb	0	; () banked
  8986  001BA0  5DCC               	subwf	___ftadd@exp2& (0+255),w,b
  8987  001BA2  B0D8               	btfsc	status,0,c
  8988  001BA4  D013               	goto	l4282
  8989                           
  8990                           ; BSR set to: 0
  8991  001BA6  0100               	movlb	0	; () banked
  8992  001BA8  51CC               	movf	___ftadd@exp2& (0+255),w,b
  8993  001BAA  0800               	sublw	0
  8994  001BAC  0100               	movlb	0	; () banked
  8995  001BAE  25CD               	addwf	___ftadd@exp1& (0+255),w,b
  8996  001BB0  0100               	movlb	0	; () banked
  8997  001BB2  6FC8               	movwf	??___ftadd& (0+255),b
  8998  001BB4  0E19               	movlw	25
  8999  001BB6  0100               	movlb	0	; () banked
  9000  001BB8  5DC8               	subwf	??___ftadd& (0+255),w,b
  9001  001BBA  A0D8               	btfss	status,0,c
  9002  001BBC  D007               	goto	l4282
  9003  001BBE                     l1027:
  9004                           
  9005                           ; BSR set to: 0
  9006  001BBE  C0C2  F0C2         	movff	___ftadd@f1,?___ftadd
  9007  001BC2  C0C3  F0C3         	movff	___ftadd@f1+1,?___ftadd+1
  9008  001BC6  C0C4  F0C4         	movff	___ftadd@f1+2,?___ftadd+2
  9009  001BCA  0012               	return	
  9010  001BCC                     l4282:
  9011                           
  9012                           ; BSR set to: 0
  9013  001BCC  0E06               	movlw	6
  9014  001BCE  0100               	movlb	0	; () banked
  9015  001BD0  6FCB               	movwf	___ftadd@sign& (0+255),b
  9016                           
  9017                           ; BSR set to: 0
  9018  001BD2  0100               	movlb	0	; () banked
  9019  001BD4  AFC4               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9020  001BD6  D002               	goto	l4288
  9021                           
  9022                           ; BSR set to: 0
  9023  001BD8  0100               	movlb	0	; () banked
  9024  001BDA  8FCB               	bsf	___ftadd@sign& (0+255),7,b
  9025  001BDC                     l4288:
  9026                           
  9027                           ; BSR set to: 0
  9028  001BDC  0100               	movlb	0	; () banked
  9029  001BDE  AFC7               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9030  001BE0  D002               	goto	l1029
  9031                           
  9032                           ; BSR set to: 0
  9033  001BE2  0100               	movlb	0	; () banked
  9034  001BE4  8DCB               	bsf	___ftadd@sign& (0+255),6,b
  9035  001BE6                     l1029:
  9036                           
  9037                           ; BSR set to: 0
  9038  001BE6  0100               	movlb	0	; () banked
  9039  001BE8  8FC3               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9040                           
  9041                           ; BSR set to: 0
  9042  001BEA  0EFF               	movlw	255
  9043  001BEC  0100               	movlb	0	; () banked
  9044  001BEE  17C2               	andwf	___ftadd@f1& (0+255),f,b
  9045  001BF0  0EFF               	movlw	255
  9046  001BF2  0100               	movlb	0	; () banked
  9047  001BF4  17C3               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9048  001BF6  0E00               	movlw	0
  9049  001BF8  0100               	movlb	0	; () banked
  9050  001BFA  17C4               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9051  001BFC  0100               	movlb	0	; () banked
  9052  001BFE  8FC6               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9053                           
  9054                           ; BSR set to: 0
  9055  001C00  0EFF               	movlw	255
  9056  001C02  0100               	movlb	0	; () banked
  9057  001C04  17C5               	andwf	___ftadd@f2& (0+255),f,b
  9058  001C06  0EFF               	movlw	255
  9059  001C08  0100               	movlb	0	; () banked
  9060  001C0A  17C6               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9061  001C0C  0E00               	movlw	0
  9062  001C0E  0100               	movlb	0	; () banked
  9063  001C10  17C7               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9064                           
  9065                           ; BSR set to: 0
  9066  001C12  0100               	movlb	0	; () banked
  9067  001C14  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9068  001C16  0100               	movlb	0	; () banked
  9069  001C18  5DCD               	subwf	___ftadd@exp1& (0+255),w,b
  9070  001C1A  B0D8               	btfsc	status,0,c
  9071  001C1C  D02A               	goto	l4308
  9072  001C1E                     l4298:
  9073                           
  9074                           ; BSR set to: 0
  9075  001C1E  0100               	movlb	0	; () banked
  9076  001C20  90D8               	bcf	status,0,c
  9077  001C22  0100               	movlb	0	; () banked
  9078  001C24  37C5               	rlcf	___ftadd@f2& (0+255),f,b
  9079  001C26  0100               	movlb	0	; () banked
  9080  001C28  37C6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9081  001C2A  0100               	movlb	0	; () banked
  9082  001C2C  37C7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9083  001C2E  0100               	movlb	0	; () banked
  9084  001C30  07CC               	decf	___ftadd@exp2& (0+255),f,b
  9085                           
  9086                           ; BSR set to: 0
  9087  001C32  0100               	movlb	0	; () banked
  9088  001C34  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9089  001C36  0100               	movlb	0	; () banked
  9090  001C38  19CD               	xorwf	___ftadd@exp1& (0+255),w,b
  9091  001C3A  B4D8               	btfsc	status,2,c
  9092  001C3C  D014               	goto	l4306
  9093                           
  9094                           ; BSR set to: 0
  9095  001C3E  0100               	movlb	0	; () banked
  9096  001C40  07CB               	decf	___ftadd@sign& (0+255),f,b
  9097  001C42  C0CB  F0C8         	movff	___ftadd@sign,??___ftadd
  9098  001C46  0E07               	movlw	7
  9099  001C48  0100               	movlb	0	; () banked
  9100  001C4A  17C8               	andwf	??___ftadd& (0+255),f,b
  9101  001C4C  B4D8               	btfsc	status,2,c
  9102  001C4E  D00B               	goto	l4306
  9103  001C50  D7E6               	goto	l4298
  9104  001C52                     l4304:
  9105                           
  9106                           ; BSR set to: 0
  9107  001C52  0100               	movlb	0	; () banked
  9108  001C54  90D8               	bcf	status,0,c
  9109  001C56  0100               	movlb	0	; () banked
  9110  001C58  33C4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9111  001C5A  0100               	movlb	0	; () banked
  9112  001C5C  33C3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9113  001C5E  0100               	movlb	0	; () banked
  9114  001C60  33C2               	rrcf	___ftadd@f1& (0+255),f,b
  9115  001C62  0100               	movlb	0	; () banked
  9116  001C64  2BCD               	incf	___ftadd@exp1& (0+255),f,b
  9117  001C66                     l4306:
  9118                           
  9119                           ; BSR set to: 0
  9120  001C66  0100               	movlb	0	; () banked
  9121  001C68  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9122  001C6A  0100               	movlb	0	; () banked
  9123  001C6C  63CD               	cpfseq	___ftadd@exp1& (0+255),b
  9124  001C6E  D7F1               	goto	l4304
  9125  001C70  D02F               	goto	l1038
  9126  001C72                     l4308:
  9127                           
  9128                           ; BSR set to: 0
  9129  001C72  0100               	movlb	0	; () banked
  9130  001C74  51CD               	movf	___ftadd@exp1& (0+255),w,b
  9131  001C76  0100               	movlb	0	; () banked
  9132  001C78  5DCC               	subwf	___ftadd@exp2& (0+255),w,b
  9133  001C7A  B0D8               	btfsc	status,0,c
  9134  001C7C  D029               	goto	l1038
  9135  001C7E                     l4310:
  9136                           
  9137                           ; BSR set to: 0
  9138  001C7E  0100               	movlb	0	; () banked
  9139  001C80  90D8               	bcf	status,0,c
  9140  001C82  0100               	movlb	0	; () banked
  9141  001C84  37C2               	rlcf	___ftadd@f1& (0+255),f,b
  9142  001C86  0100               	movlb	0	; () banked
  9143  001C88  37C3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9144  001C8A  0100               	movlb	0	; () banked
  9145  001C8C  37C4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9146  001C8E  0100               	movlb	0	; () banked
  9147  001C90  07CD               	decf	___ftadd@exp1& (0+255),f,b
  9148                           
  9149                           ; BSR set to: 0
  9150  001C92  0100               	movlb	0	; () banked
  9151  001C94  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9152  001C96  0100               	movlb	0	; () banked
  9153  001C98  19CD               	xorwf	___ftadd@exp1& (0+255),w,b
  9154  001C9A  B4D8               	btfsc	status,2,c
  9155  001C9C  D014               	goto	l4318
  9156                           
  9157                           ; BSR set to: 0
  9158  001C9E  0100               	movlb	0	; () banked
  9159  001CA0  07CB               	decf	___ftadd@sign& (0+255),f,b
  9160  001CA2  C0CB  F0C8         	movff	___ftadd@sign,??___ftadd
  9161  001CA6  0E07               	movlw	7
  9162  001CA8  0100               	movlb	0	; () banked
  9163  001CAA  17C8               	andwf	??___ftadd& (0+255),f,b
  9164  001CAC  B4D8               	btfsc	status,2,c
  9165  001CAE  D00B               	goto	l4318
  9166  001CB0  D7E6               	goto	l4310
  9167  001CB2                     l4316:
  9168                           
  9169                           ; BSR set to: 0
  9170  001CB2  0100               	movlb	0	; () banked
  9171  001CB4  90D8               	bcf	status,0,c
  9172  001CB6  0100               	movlb	0	; () banked
  9173  001CB8  33C7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  9174  001CBA  0100               	movlb	0	; () banked
  9175  001CBC  33C6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  9176  001CBE  0100               	movlb	0	; () banked
  9177  001CC0  33C5               	rrcf	___ftadd@f2& (0+255),f,b
  9178  001CC2  0100               	movlb	0	; () banked
  9179  001CC4  2BCC               	incf	___ftadd@exp2& (0+255),f,b
  9180  001CC6                     l4318:
  9181                           
  9182                           ; BSR set to: 0
  9183  001CC6  0100               	movlb	0	; () banked
  9184  001CC8  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9185  001CCA  0100               	movlb	0	; () banked
  9186  001CCC  63CD               	cpfseq	___ftadd@exp1& (0+255),b
  9187  001CCE  D7F1               	goto	l4316
  9188  001CD0                     l1038:
  9189                           
  9190                           ; BSR set to: 0
  9191  001CD0  0100               	movlb	0	; () banked
  9192  001CD2  AFCB               	btfss	___ftadd@sign& (0+255),7,b
  9193  001CD4  D012               	goto	l1047
  9194                           
  9195                           ; BSR set to: 0
  9196  001CD6  0EFF               	movlw	255
  9197  001CD8  0100               	movlb	0	; () banked
  9198  001CDA  1BC2               	xorwf	___ftadd@f1& (0+255),f,b
  9199  001CDC  0EFF               	movlw	255
  9200  001CDE  0100               	movlb	0	; () banked
  9201  001CE0  1BC3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  9202  001CE2  0EFF               	movlw	255
  9203  001CE4  0100               	movlb	0	; () banked
  9204  001CE6  1BC4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  9205  001CE8  0E01               	movlw	1
  9206  001CEA  0100               	movlb	0	; () banked
  9207  001CEC  27C2               	addwf	___ftadd@f1& (0+255),f,b
  9208  001CEE  0E00               	movlw	0
  9209  001CF0  0100               	movlb	0	; () banked
  9210  001CF2  23C3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  9211  001CF4  0E00               	movlw	0
  9212  001CF6  0100               	movlb	0	; () banked
  9213  001CF8  23C4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  9214  001CFA                     l1047:
  9215                           
  9216                           ; BSR set to: 0
  9217  001CFA  0100               	movlb	0	; () banked
  9218  001CFC  ADCB               	btfss	___ftadd@sign& (0+255),6,b
  9219  001CFE  D012               	goto	l4324
  9220                           
  9221                           ; BSR set to: 0
  9222  001D00  0EFF               	movlw	255
  9223  001D02  0100               	movlb	0	; () banked
  9224  001D04  1BC5               	xorwf	___ftadd@f2& (0+255),f,b
  9225  001D06  0EFF               	movlw	255
  9226  001D08  0100               	movlb	0	; () banked
  9227  001D0A  1BC6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9228  001D0C  0EFF               	movlw	255
  9229  001D0E  0100               	movlb	0	; () banked
  9230  001D10  1BC7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9231  001D12  0E01               	movlw	1
  9232  001D14  0100               	movlb	0	; () banked
  9233  001D16  27C5               	addwf	___ftadd@f2& (0+255),f,b
  9234  001D18  0E00               	movlw	0
  9235  001D1A  0100               	movlb	0	; () banked
  9236  001D1C  23C6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9237  001D1E  0E00               	movlw	0
  9238  001D20  0100               	movlb	0	; () banked
  9239  001D22  23C7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9240  001D24                     l4324:
  9241                           
  9242                           ; BSR set to: 0
  9243  001D24  0E00               	movlw	0
  9244  001D26  0100               	movlb	0	; () banked
  9245  001D28  6FCB               	movwf	___ftadd@sign& (0+255),b
  9246                           
  9247                           ; BSR set to: 0
  9248  001D2A  0100               	movlb	0	; () banked
  9249  001D2C  51C2               	movf	___ftadd@f1& (0+255),w,b
  9250  001D2E  0100               	movlb	0	; () banked
  9251  001D30  27C5               	addwf	___ftadd@f2& (0+255),f,b
  9252  001D32  0100               	movlb	0	; () banked
  9253  001D34  51C3               	movf	(___ftadd@f1+1)& (0+255),w,b
  9254  001D36  0100               	movlb	0	; () banked
  9255  001D38  23C6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9256  001D3A  0100               	movlb	0	; () banked
  9257  001D3C  51C4               	movf	(___ftadd@f1+2)& (0+255),w,b
  9258  001D3E  0100               	movlb	0	; () banked
  9259  001D40  23C7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9260                           
  9261                           ; BSR set to: 0
  9262  001D42  0100               	movlb	0	; () banked
  9263  001D44  AFC7               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9264  001D46  D015               	goto	l4334
  9265                           
  9266                           ; BSR set to: 0
  9267  001D48  0EFF               	movlw	255
  9268  001D4A  0100               	movlb	0	; () banked
  9269  001D4C  1BC5               	xorwf	___ftadd@f2& (0+255),f,b
  9270  001D4E  0EFF               	movlw	255
  9271  001D50  0100               	movlb	0	; () banked
  9272  001D52  1BC6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9273  001D54  0EFF               	movlw	255
  9274  001D56  0100               	movlb	0	; () banked
  9275  001D58  1BC7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9276  001D5A  0E01               	movlw	1
  9277  001D5C  0100               	movlb	0	; () banked
  9278  001D5E  27C5               	addwf	___ftadd@f2& (0+255),f,b
  9279  001D60  0E00               	movlw	0
  9280  001D62  0100               	movlb	0	; () banked
  9281  001D64  23C6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9282  001D66  0E00               	movlw	0
  9283  001D68  0100               	movlb	0	; () banked
  9284  001D6A  23C7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9285                           
  9286                           ; BSR set to: 0
  9287  001D6C  0E01               	movlw	1
  9288  001D6E  0100               	movlb	0	; () banked
  9289  001D70  6FCB               	movwf	___ftadd@sign& (0+255),b
  9290  001D72                     l4334:
  9291                           
  9292                           ; BSR set to: 0
  9293  001D72  C0C5  F017         	movff	___ftadd@f2,___ftpack@arg
  9294  001D76  C0C6  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  9295  001D7A  C0C7  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  9296  001D7E  C0CD  F01A         	movff	___ftadd@exp1,___ftpack@exp
  9297  001D82  C0CB  F01B         	movff	___ftadd@sign,___ftpack@sign
  9298  001D86  ECA8  F017         	call	___ftpack	;wreg free
  9299  001D8A  C017  F0C2         	movff	?___ftpack,?___ftadd
  9300  001D8E  C018  F0C3         	movff	?___ftpack+1,?___ftadd+1
  9301  001D92  C019  F0C4         	movff	?___ftpack+2,?___ftadd+2
  9302  001D96  0012               	return	
  9303  001D98                     __end_of___ftadd:
  9304                           	opt stack 0
  9305                           tblptru	equ	0xFF8
  9306                           tblptrh	equ	0xFF7
  9307                           tblptrl	equ	0xFF6
  9308                           tablat	equ	0xFF5
  9309                           prodh	equ	0xFF4
  9310                           prodl	equ	0xFF3
  9311                           intcon	equ	0xFF2
  9312                           intcon2	equ	0xFF1
  9313                           postinc0	equ	0xFEE
  9314                           wreg	equ	0xFE8
  9315                           postinc1	equ	0xFE6
  9316                           postdec1	equ	0xFE5
  9317                           fsr1h	equ	0xFE2
  9318                           fsr1l	equ	0xFE1
  9319                           indf2	equ	0xFDF
  9320                           postinc2	equ	0xFDE
  9321                           postdec2	equ	0xFDD
  9322                           fsr2h	equ	0xFDA
  9323                           fsr2l	equ	0xFD9
  9324                           status	equ	0xFD8
  9325                           
  9326 ;; *************** function ___ftpack *****************
  9327 ;; Defined at:
  9328 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;  arg             3   22[COMRAM] unsigned um
  9331 ;;  exp             1   25[COMRAM] unsigned char 
  9332 ;;  sign            1   26[COMRAM] unsigned char 
  9333 ;; Auto vars:     Size  Location     Type
  9334 ;;		None
  9335 ;; Return value:  Size  Location     Type
  9336 ;;                  3   22[COMRAM] float 
  9337 ;; Registers used:
  9338 ;;		wreg, status,2, status,0
  9339 ;; Tracked objects:
  9340 ;;		On entry : 0/0
  9341 ;;		On exit  : 0/0
  9342 ;;		Unchanged: 0/0
  9343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9344 ;;      Params:         5       0       0       0       0       0       0
  9345 ;;      Locals:         0       0       0       0       0       0       0
  9346 ;;      Temps:          3       0       0       0       0       0       0
  9347 ;;      Totals:         8       0       0       0       0       0       0
  9348 ;;Total ram usage:        8 bytes
  9349 ;; Hardware stack levels used:    1
  9350 ;; Hardware stack levels required when called:    4
  9351 ;; This function calls:
  9352 ;;		Nothing
  9353 ;; This function is called by:
  9354 ;;		___awtoft
  9355 ;;		___ftadd
  9356 ;;		___ftdiv
  9357 ;;		___ftmul
  9358 ;;		___lltoft
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           	psect	text42
  9363  002F50                     __ptext42:
  9364                           	opt stack 0
  9365  002F50                     ___ftpack:
  9366                           	opt stack 23
  9367                           
  9368                           ;incstack = 0
  9369  002F50  501A               	movf	___ftpack@exp,w,c
  9370  002F52  B4D8               	btfsc	status,2,c
  9371  002F54  D005               	goto	l4232
  9372  002F56  5017               	movf	___ftpack@arg,w,c
  9373  002F58  1018               	iorwf	___ftpack@arg+1,w,c
  9374  002F5A  1019               	iorwf	___ftpack@arg+2,w,c
  9375  002F5C  A4D8               	btfss	status,2,c
  9376  002F5E  D00C               	goto	l4238
  9377  002F60                     l4232:
  9378  002F60  0E00               	movlw	0
  9379  002F62  6E17               	movwf	?___ftpack,c
  9380  002F64  0E00               	movlw	0
  9381  002F66  6E18               	movwf	?___ftpack+1,c
  9382  002F68  0E00               	movlw	0
  9383  002F6A  6E19               	movwf	?___ftpack+2,c
  9384  002F6C  0012               	return	
  9385  002F6E                     l4236:
  9386  002F6E  2A1A               	incf	___ftpack@exp,f,c
  9387  002F70  90D8               	bcf	status,0,c
  9388  002F72  3219               	rrcf	___ftpack@arg+2,f,c
  9389  002F74  3218               	rrcf	___ftpack@arg+1,f,c
  9390  002F76  3217               	rrcf	___ftpack@arg,f,c
  9391  002F78                     l4238:
  9392  002F78  0E00               	movlw	0
  9393  002F7A  1417               	andwf	___ftpack@arg,w,c
  9394  002F7C  6E1C               	movwf	??___ftpack& (0+255),c
  9395  002F7E  0E00               	movlw	0
  9396  002F80  1418               	andwf	___ftpack@arg+1,w,c
  9397  002F82  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  9398  002F84  0EFE               	movlw	254
  9399  002F86  1419               	andwf	___ftpack@arg+2,w,c
  9400  002F88  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  9401  002F8A  501C               	movf	??___ftpack,w,c
  9402  002F8C  101D               	iorwf	??___ftpack+1,w,c
  9403  002F8E  101E               	iorwf	??___ftpack+2,w,c
  9404  002F90  B4D8               	btfsc	status,2,c
  9405  002F92  D00C               	goto	l4244
  9406  002F94  D7EC               	goto	l4236
  9407  002F96                     l4240:
  9408  002F96  2A1A               	incf	___ftpack@exp,f,c
  9409  002F98  0E01               	movlw	1
  9410  002F9A  2617               	addwf	___ftpack@arg,f,c
  9411  002F9C  0E00               	movlw	0
  9412  002F9E  2218               	addwfc	___ftpack@arg+1,f,c
  9413  002FA0  0E00               	movlw	0
  9414  002FA2  2219               	addwfc	___ftpack@arg+2,f,c
  9415  002FA4  90D8               	bcf	status,0,c
  9416  002FA6  3219               	rrcf	___ftpack@arg+2,f,c
  9417  002FA8  3218               	rrcf	___ftpack@arg+1,f,c
  9418  002FAA  3217               	rrcf	___ftpack@arg,f,c
  9419  002FAC                     l4244:
  9420  002FAC  0E00               	movlw	0
  9421  002FAE  1417               	andwf	___ftpack@arg,w,c
  9422  002FB0  6E1C               	movwf	??___ftpack& (0+255),c
  9423  002FB2  0E00               	movlw	0
  9424  002FB4  1418               	andwf	___ftpack@arg+1,w,c
  9425  002FB6  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  9426  002FB8  0EFF               	movlw	255
  9427  002FBA  1419               	andwf	___ftpack@arg+2,w,c
  9428  002FBC  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  9429  002FBE  501C               	movf	??___ftpack,w,c
  9430  002FC0  101D               	iorwf	??___ftpack+1,w,c
  9431  002FC2  101E               	iorwf	??___ftpack+2,w,c
  9432  002FC4  B4D8               	btfsc	status,2,c
  9433  002FC6  D006               	goto	l4248
  9434  002FC8  D7E6               	goto	l4240
  9435  002FCA                     l4246:
  9436  002FCA  061A               	decf	___ftpack@exp,f,c
  9437  002FCC  90D8               	bcf	status,0,c
  9438  002FCE  3617               	rlcf	___ftpack@arg,f,c
  9439  002FD0  3618               	rlcf	___ftpack@arg+1,f,c
  9440  002FD2  3619               	rlcf	___ftpack@arg+2,f,c
  9441  002FD4                     l4248:
  9442  002FD4  AE18               	btfss	___ftpack@arg+1,7,c
  9443  002FD6  D7F9               	goto	l4246
  9444  002FD8  A01A               	btfss	___ftpack@exp,0,c
  9445  002FDA  9E18               	bcf	___ftpack@arg+1,7,c
  9446  002FDC  90D8               	bcf	status,0,c
  9447  002FDE  321A               	rrcf	___ftpack@exp,f,c
  9448  002FE0  501A               	movf	___ftpack@exp,w,c
  9449  002FE2  1219               	iorwf	___ftpack@arg+2,f,c
  9450  002FE4  501B               	movf	___ftpack@sign,w,c
  9451  002FE6  A4D8               	btfss	status,2,c
  9452  002FE8  8E19               	bsf	___ftpack@arg+2,7,c
  9453  002FEA  C017  F017         	movff	___ftpack@arg,?___ftpack
  9454  002FEE  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  9455  002FF2  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  9456  002FF6  0012               	return	
  9457  002FF8                     __end_of___ftpack:
  9458                           	opt stack 0
  9459                           tblptru	equ	0xFF8
  9460                           tblptrh	equ	0xFF7
  9461                           tblptrl	equ	0xFF6
  9462                           tablat	equ	0xFF5
  9463                           prodh	equ	0xFF4
  9464                           prodl	equ	0xFF3
  9465                           intcon	equ	0xFF2
  9466                           intcon2	equ	0xFF1
  9467                           postinc0	equ	0xFEE
  9468                           wreg	equ	0xFE8
  9469                           postinc1	equ	0xFE6
  9470                           postdec1	equ	0xFE5
  9471                           fsr1h	equ	0xFE2
  9472                           fsr1l	equ	0xFE1
  9473                           indf2	equ	0xFDF
  9474                           postinc2	equ	0xFDE
  9475                           postdec2	equ	0xFDD
  9476                           fsr2h	equ	0xFDA
  9477                           fsr2l	equ	0xFD9
  9478                           status	equ	0xFD8
  9479                           
  9480 ;; *************** function _INTERRUPT_InterruptManager *****************
  9481 ;; Defined at:
  9482 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;		None
  9487 ;; Return value:  Size  Location     Type
  9488 ;;		None               void
  9489 ;; Registers used:
  9490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9496 ;;      Params:         0       0       0       0       0       0       0
  9497 ;;      Locals:         0       0       0       0       0       0       0
  9498 ;;      Temps:         14       0       0       0       0       0       0
  9499 ;;      Totals:        14       0       0       0       0       0       0
  9500 ;;Total ram usage:       14 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    3
  9503 ;; This function calls:
  9504 ;;		_ADC_ISR
  9505 ;;		_EUSART1_Receive_ISR
  9506 ;;		_EUSART1_Transmit_ISR
  9507 ;;		_TMR1_ISR
  9508 ;; This function is called by:
  9509 ;;		Interrupt level 2
  9510 ;; This function uses a non-reentrant model
  9511 ;;
  9512                           
  9513                           	psect	intcode
  9514  000008                     __pintcode:
  9515                           	opt stack 0
  9516  000008                     _INTERRUPT_InterruptManager:
  9517                           	opt stack 22
  9518                           
  9519                           ;incstack = 0
  9520  000008  CFFA F009          	movff	pclath,??_INTERRUPT_InterruptManager
  9521  00000C  CFFB F00A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  9522  000010  CFE9 F00B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  9523  000014  CFEA F00C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  9524  000018  CFE1 F00D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  9525  00001C  CFE2 F00E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  9526  000020  CFD9 F00F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  9527  000024  CFDA F010          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  9528  000028  CFF3 F011          	movff	prodl,??_INTERRUPT_InterruptManager+8
  9529  00002C  CFF4 F012          	movff	prodh,??_INTERRUPT_InterruptManager+9
  9530  000030  CFF6 F013          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  9531  000034  CFF7 F014          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  9532  000038  CFF8 F015          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  9533  00003C  CFF5 F016          	movff	tablat,??_INTERRUPT_InterruptManager+13
  9534                           
  9535                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  9536  000040  BA9D               	btfsc	3997,5,c	;volatile
  9537  000042  AA9E               	btfss	3998,5,c	;volatile
  9538  000044  D003               	goto	i2l282
  9539                           
  9540                           ;interrupt_manager.c: 73: {
  9541                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
  9542  000046  ECFE  F01A         	call	_EUSART1_Receive_ISR	;wreg free
  9543                           
  9544                           ;interrupt_manager.c: 75: }
  9545  00004A  D011               	goto	i2l290
  9546  00004C                     i2l282:
  9547                           
  9548                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  9549  00004C  BC9D               	btfsc	3997,6,c	;volatile
  9550  00004E  AC9E               	btfss	3998,6,c	;volatile
  9551  000050  D003               	goto	i2l284
  9552                           
  9553                           ;interrupt_manager.c: 77: {
  9554                           ;interrupt_manager.c: 78: ADC_ISR();
  9555  000052  ECA0  F007         	call	_ADC_ISR	;wreg free
  9556                           
  9557                           ;interrupt_manager.c: 79: }
  9558  000056  D00B               	goto	i2l290
  9559  000058                     i2l284:
  9560                           
  9561                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  9562  000058  B09D               	btfsc	3997,0,c	;volatile
  9563  00005A  A09E               	btfss	3998,0,c	;volatile
  9564  00005C  D003               	goto	i2l286
  9565                           
  9566                           ;interrupt_manager.c: 81: {
  9567                           ;interrupt_manager.c: 82: TMR1_ISR();
  9568  00005E  EC2B  F01A         	call	_TMR1_ISR	;wreg free
  9569                           
  9570                           ;interrupt_manager.c: 83: }
  9571  000062  D005               	goto	i2l290
  9572  000064                     i2l286:
  9573                           
  9574                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  9575  000064  B89D               	btfsc	3997,4,c	;volatile
  9576  000066  A89E               	btfss	3998,4,c	;volatile
  9577  000068  D002               	goto	i2l290
  9578                           
  9579                           ;interrupt_manager.c: 85: {
  9580                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
  9581  00006A  ECE6  F01A         	call	_EUSART1_Transmit_ISR	;wreg free
  9582  00006E                     i2l290:
  9583  00006E  C016  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  9584  000072  C015  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  9585  000076  C014  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  9586  00007A  C013  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  9587  00007E  C012  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  9588  000082  C011  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  9589  000086  C010  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  9590  00008A  C00F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  9591  00008E  C00E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  9592  000092  C00D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  9593  000096  C00C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  9594  00009A  C00B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  9595  00009E  C00A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  9596  0000A2  C009  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  9597  0000A6  0011               	retfie		f
  9598  0000A8                     __end_of_INTERRUPT_InterruptManager:
  9599                           	opt stack 0
  9600                           pclatu	equ	0xFFB
  9601                           pclath	equ	0xFFA
  9602                           tblptru	equ	0xFF8
  9603                           tblptrh	equ	0xFF7
  9604                           tblptrl	equ	0xFF6
  9605                           tablat	equ	0xFF5
  9606                           prodh	equ	0xFF4
  9607                           prodl	equ	0xFF3
  9608                           intcon	equ	0xFF2
  9609                           intcon2	equ	0xFF1
  9610                           postinc0	equ	0xFEE
  9611                           fsr0h	equ	0xFEA
  9612                           fsr0l	equ	0xFE9
  9613                           wreg	equ	0xFE8
  9614                           postinc1	equ	0xFE6
  9615                           postdec1	equ	0xFE5
  9616                           fsr1h	equ	0xFE2
  9617                           fsr1l	equ	0xFE1
  9618                           indf2	equ	0xFDF
  9619                           postinc2	equ	0xFDE
  9620                           postdec2	equ	0xFDD
  9621                           fsr2h	equ	0xFDA
  9622                           fsr2l	equ	0xFD9
  9623                           status	equ	0xFD8
  9624                           
  9625 ;; *************** function _TMR1_ISR *****************
  9626 ;; Defined at:
  9627 ;;		line 109 in file "mcc_generated_files/tmr1.c"
  9628 ;; Parameters:    Size  Location     Type
  9629 ;;		None
  9630 ;; Auto vars:     Size  Location     Type
  9631 ;;		None
  9632 ;; Return value:  Size  Location     Type
  9633 ;;		None               void
  9634 ;; Registers used:
  9635 ;;		wreg, status,2, status,0, cstack
  9636 ;; Tracked objects:
  9637 ;;		On entry : 0/0
  9638 ;;		On exit  : 0/0
  9639 ;;		Unchanged: 0/0
  9640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9641 ;;      Params:         0       0       0       0       0       0       0
  9642 ;;      Locals:         0       0       0       0       0       0       0
  9643 ;;      Temps:          3       0       0       0       0       0       0
  9644 ;;      Totals:         3       0       0       0       0       0       0
  9645 ;;Total ram usage:        3 bytes
  9646 ;; Hardware stack levels used:    1
  9647 ;; Hardware stack levels required when called:    2
  9648 ;; This function calls:
  9649 ;;		_Battery_Read
  9650 ;;		_Temp_Read
  9651 ;; This function is called by:
  9652 ;;		_INTERRUPT_InterruptManager
  9653 ;; This function uses a non-reentrant model
  9654 ;;
  9655                           
  9656                           	psect	text44
  9657  003456                     __ptext44:
  9658                           	opt stack 0
  9659  003456                     _TMR1_ISR:
  9660                           	opt stack 22
  9661                           
  9662                           ;tmr1.c: 111: static volatile unsigned int CountCallBack = 0;
  9663                           ;tmr1.c: 114: PIR1bits.TMR1IF = 0;
  9664                           
  9665                           ;incstack = 0
  9666  003456  909E               	bcf	3998,0,c	;volatile
  9667                           
  9668                           ;tmr1.c: 117: TMR1H = (timer1ReloadVal >> 8);
  9669  003458  C048  F003         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
  9670  00345C  C003  F004         	movff	??_TMR1_ISR,??_TMR1_ISR+1
  9671  003460  6A05               	clrf	(??_TMR1_ISR+2)& (0+255),c
  9672  003462  5004               	movf	??_TMR1_ISR+1,w,c
  9673  003464  6ECF               	movwf	4047,c	;volatile
  9674                           
  9675                           ;tmr1.c: 118: TMR1L = (uint8_t) timer1ReloadVal;
  9676  003466  C047  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  9677                           
  9678                           ;tmr1.c: 121: if (++CountCallBack >= 4)
  9679  00346A  4A3C               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
  9680  00346C  2A3D               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
  9681  00346E  0E04               	movlw	4
  9682  003470  5C3C               	subwf	TMR1_ISR@CountCallBack& (0+255),w,c	;volatile
  9683  003472  0E00               	movlw	0
  9684  003474  583D               	subwfb	(TMR1_ISR@CountCallBack+1)& (0+255),w,c	;volatile
  9685  003476  A0D8               	btfss	status,0,c
  9686  003478  D005               	goto	i2l3620
  9687                           
  9688                           ;tmr1.c: 122: {
  9689                           ;tmr1.c: 124: do { LATA4 = ~LATA4; } while(0);
  9690  00347A  7889               	btg	3977,4,c	;volatile
  9691                           
  9692                           ;tmr1.c: 127: CountCallBack = 0;
  9693  00347C  0E00               	movlw	0
  9694  00347E  6E3D               	movwf	TMR1_ISR@CountCallBack+1,c	;volatile
  9695  003480  0E00               	movlw	0
  9696  003482  6E3C               	movwf	TMR1_ISR@CountCallBack,c	;volatile
  9697  003484                     i2l3620:
  9698                           
  9699                           ;tmr1.c: 132: }
  9700                           ;tmr1.c: 133: if(CountCallBack == 2)
  9701  003484  503C               	movf	TMR1_ISR@CountCallBack,w,c	;volatile
  9702  003486  0A02               	xorlw	2
  9703  003488  103D               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  9704  00348A  B4D8               	btfsc	status,2,c
  9705                           
  9706                           ;tmr1.c: 134: {
  9707                           ;tmr1.c: 135: Battery_Read();
  9708  00348C  ECAD  F01B         	call	_Battery_Read	;wreg free
  9709                           
  9710                           ;tmr1.c: 136: }
  9711                           ;tmr1.c: 137: if(CountCallBack == 3)
  9712  003490  503C               	movf	TMR1_ISR@CountCallBack,w,c	;volatile
  9713  003492  0A03               	xorlw	3
  9714  003494  103D               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  9715  003496  A4D8               	btfss	status,2,c
  9716  003498  0012               	return	
  9717                           
  9718                           ;tmr1.c: 138: {
  9719                           ;tmr1.c: 139: Temp_Read();
  9720  00349A  ECA1  F01B         	call	_Temp_Read	;wreg free
  9721  00349E  0012               	return	
  9722  0034A0                     __end_of_TMR1_ISR:
  9723                           	opt stack 0
  9724                           pclatu	equ	0xFFB
  9725                           pclath	equ	0xFFA
  9726                           tblptru	equ	0xFF8
  9727                           tblptrh	equ	0xFF7
  9728                           tblptrl	equ	0xFF6
  9729                           tablat	equ	0xFF5
  9730                           prodh	equ	0xFF4
  9731                           prodl	equ	0xFF3
  9732                           intcon	equ	0xFF2
  9733                           intcon2	equ	0xFF1
  9734                           postinc0	equ	0xFEE
  9735                           fsr0h	equ	0xFEA
  9736                           fsr0l	equ	0xFE9
  9737                           wreg	equ	0xFE8
  9738                           postinc1	equ	0xFE6
  9739                           postdec1	equ	0xFE5
  9740                           fsr1h	equ	0xFE2
  9741                           fsr1l	equ	0xFE1
  9742                           indf2	equ	0xFDF
  9743                           postinc2	equ	0xFDE
  9744                           postdec2	equ	0xFDD
  9745                           fsr2h	equ	0xFDA
  9746                           fsr2l	equ	0xFD9
  9747                           status	equ	0xFD8
  9748                           
  9749 ;; *************** function _Temp_Read *****************
  9750 ;; Defined at:
  9751 ;;		line 27 in file "Tempeture.c"
  9752 ;; Parameters:    Size  Location     Type
  9753 ;;		None
  9754 ;; Auto vars:     Size  Location     Type
  9755 ;;		None
  9756 ;; Return value:  Size  Location     Type
  9757 ;;                  2   26[COMRAM] int 
  9758 ;; Registers used:
  9759 ;;		wreg, status,2, status,0, cstack
  9760 ;; Tracked objects:
  9761 ;;		On entry : 0/0
  9762 ;;		On exit  : 0/0
  9763 ;;		Unchanged: 0/0
  9764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9765 ;;      Params:         0       0       0       0       0       0       0
  9766 ;;      Locals:         0       0       0       0       0       0       0
  9767 ;;      Temps:          0       0       0       0       0       0       0
  9768 ;;      Totals:         0       0       0       0       0       0       0
  9769 ;;Total ram usage:        0 bytes
  9770 ;; Hardware stack levels used:    1
  9771 ;; Hardware stack levels required when called:    1
  9772 ;; This function calls:
  9773 ;;		_ADC_StartConversion
  9774 ;; This function is called by:
  9775 ;;		_TMR1_ISR
  9776 ;; This function uses a non-reentrant model
  9777 ;;
  9778                           
  9779                           	psect	text45
  9780  003742                     __ptext45:
  9781                           	opt stack 0
  9782  003742                     _Temp_Read:
  9783                           	opt stack 22
  9784                           
  9785                           ;Tempeture.c: 30: ADC_Buffer_Point = 0;
  9786                           
  9787                           ;incstack = 0
  9788  003742  0E00               	movlw	0
  9789  003744  6E3F               	movwf	_ADC_Buffer_Point+1,c
  9790  003746  0E00               	movlw	0
  9791  003748  6E3E               	movwf	_ADC_Buffer_Point,c
  9792                           
  9793                           ;Tempeture.c: 31: Temp_Aquire = 1;
  9794  00374A  0E01               	movlw	1
  9795  00374C  6E40               	movwf	_Temp_Aquire,c
  9796                           
  9797                           ;Tempeture.c: 32: ADCON1 = 0x80;
  9798  00374E  0E80               	movlw	128
  9799  003750  6EC1               	movwf	4033,c	;volatile
  9800                           
  9801                           ;Tempeture.c: 33: ADC_StartConversion(Temp1);
  9802  003752  0E0E               	movlw	14
  9803  003754  EC88  F01B         	call	_ADC_StartConversion
  9804  003758  0012               	return	
  9805  00375A                     __end_of_Temp_Read:
  9806                           	opt stack 0
  9807                           pclatu	equ	0xFFB
  9808                           pclath	equ	0xFFA
  9809                           tblptru	equ	0xFF8
  9810                           tblptrh	equ	0xFF7
  9811                           tblptrl	equ	0xFF6
  9812                           tablat	equ	0xFF5
  9813                           prodh	equ	0xFF4
  9814                           prodl	equ	0xFF3
  9815                           intcon	equ	0xFF2
  9816                           intcon2	equ	0xFF1
  9817                           postinc0	equ	0xFEE
  9818                           fsr0h	equ	0xFEA
  9819                           fsr0l	equ	0xFE9
  9820                           wreg	equ	0xFE8
  9821                           postinc1	equ	0xFE6
  9822                           postdec1	equ	0xFE5
  9823                           fsr1h	equ	0xFE2
  9824                           fsr1l	equ	0xFE1
  9825                           indf2	equ	0xFDF
  9826                           postinc2	equ	0xFDE
  9827                           postdec2	equ	0xFDD
  9828                           fsr2h	equ	0xFDA
  9829                           fsr2l	equ	0xFD9
  9830                           status	equ	0xFD8
  9831                           
  9832 ;; *************** function _Battery_Read *****************
  9833 ;; Defined at:
  9834 ;;		line 12 in file "Battery.c"
  9835 ;; Parameters:    Size  Location     Type
  9836 ;;		None
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;		None
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  2   24[COMRAM] int 
  9841 ;; Registers used:
  9842 ;;		wreg, status,2, status,0, cstack
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9848 ;;      Params:         0       0       0       0       0       0       0
  9849 ;;      Locals:         0       0       0       0       0       0       0
  9850 ;;      Temps:          0       0       0       0       0       0       0
  9851 ;;      Totals:         0       0       0       0       0       0       0
  9852 ;;Total ram usage:        0 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:    1
  9855 ;; This function calls:
  9856 ;;		_ADC_StartConversion
  9857 ;; This function is called by:
  9858 ;;		_TMR1_ISR
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862                           	psect	text46
  9863  00375A                     __ptext46:
  9864                           	opt stack 0
  9865  00375A                     _Battery_Read:
  9866                           	opt stack 22
  9867                           
  9868                           ;Battery.c: 16: ADC_Buffer_Point = 0;
  9869                           
  9870                           ;incstack = 0
  9871  00375A  0E00               	movlw	0
  9872  00375C  6E3F               	movwf	_ADC_Buffer_Point+1,c
  9873  00375E  0E00               	movlw	0
  9874  003760  6E3E               	movwf	_ADC_Buffer_Point,c
  9875                           
  9876                           ;Battery.c: 17: Volt_Aquire = 1;
  9877  003762  0E01               	movlw	1
  9878  003764  6E41               	movwf	_Volt_Aquire,c
  9879                           
  9880                           ;Battery.c: 18: ADCON1 = 0x80;
  9881  003766  0E80               	movlw	128
  9882  003768  6EC1               	movwf	4033,c	;volatile
  9883                           
  9884                           ;Battery.c: 19: ADC_StartConversion(Battery1);
  9885  00376A  0E01               	movlw	1
  9886  00376C  EC88  F01B         	call	_ADC_StartConversion
  9887  003770  0012               	return	
  9888  003772                     __end_of_Battery_Read:
  9889                           	opt stack 0
  9890                           pclatu	equ	0xFFB
  9891                           pclath	equ	0xFFA
  9892                           tblptru	equ	0xFF8
  9893                           tblptrh	equ	0xFF7
  9894                           tblptrl	equ	0xFF6
  9895                           tablat	equ	0xFF5
  9896                           prodh	equ	0xFF4
  9897                           prodl	equ	0xFF3
  9898                           intcon	equ	0xFF2
  9899                           intcon2	equ	0xFF1
  9900                           postinc0	equ	0xFEE
  9901                           fsr0h	equ	0xFEA
  9902                           fsr0l	equ	0xFE9
  9903                           wreg	equ	0xFE8
  9904                           postinc1	equ	0xFE6
  9905                           postdec1	equ	0xFE5
  9906                           fsr1h	equ	0xFE2
  9907                           fsr1l	equ	0xFE1
  9908                           indf2	equ	0xFDF
  9909                           postinc2	equ	0xFDE
  9910                           postdec2	equ	0xFDD
  9911                           fsr2h	equ	0xFDA
  9912                           fsr2l	equ	0xFD9
  9913                           status	equ	0xFD8
  9914                           
  9915 ;; *************** function _EUSART1_Transmit_ISR *****************
  9916 ;; Defined at:
  9917 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  9918 ;; Parameters:    Size  Location     Type
  9919 ;;		None
  9920 ;; Auto vars:     Size  Location     Type
  9921 ;;		None
  9922 ;; Return value:  Size  Location     Type
  9923 ;;		None               void
  9924 ;; Registers used:
  9925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9926 ;; Tracked objects:
  9927 ;;		On entry : 0/0
  9928 ;;		On exit  : 0/0
  9929 ;;		Unchanged: 0/0
  9930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9931 ;;      Params:         0       0       0       0       0       0       0
  9932 ;;      Locals:         0       0       0       0       0       0       0
  9933 ;;      Temps:          0       0       0       0       0       0       0
  9934 ;;      Totals:         0       0       0       0       0       0       0
  9935 ;;Total ram usage:        0 bytes
  9936 ;; Hardware stack levels used:    1
  9937 ;; This function calls:
  9938 ;;		Nothing
  9939 ;; This function is called by:
  9940 ;;		_INTERRUPT_InterruptManager
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           	psect	text47
  9945  0035CC                     __ptext47:
  9946                           	opt stack 0
  9947  0035CC                     _EUSART1_Transmit_ISR:
  9948                           	opt stack 24
  9949                           
  9950                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  9951                           
  9952                           ;incstack = 0
  9953  0035CC  0E08               	movlw	8
  9954  0035CE  5C49               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
  9955  0035D0  B0D8               	btfsc	status,0,c
  9956  0035D2  D012               	goto	i2l134
  9957                           
  9958                           ;eusart1.c: 178: {
  9959                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
  9960  0035D4  5046               	movf	_eusart1TxTail,w,c
  9961  0035D6  0D01               	mullw	1
  9962  0035D8  0E34               	movlw	low _eusart1TxBuffer
  9963  0035DA  24F3               	addwf	prodl,w,c
  9964  0035DC  6ED9               	movwf	fsr2l,c
  9965  0035DE  0E00               	movlw	high _eusart1TxBuffer
  9966  0035E0  20F4               	addwfc	prodh,w,c
  9967  0035E2  6EDA               	movwf	fsr2h,c
  9968  0035E4  50DF               	movf	indf2,w,c
  9969  0035E6  6EAD               	movwf	4013,c	;volatile
  9970  0035E8  2A46               	incf	_eusart1TxTail,f,c
  9971                           
  9972                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  9973  0035EA  0E07               	movlw	7
  9974  0035EC  6446               	cpfsgt	_eusart1TxTail,c
  9975  0035EE  D002               	goto	i2l2186
  9976                           
  9977                           ;eusart1.c: 181: {
  9978                           ;eusart1.c: 182: eusart1TxTail = 0;
  9979  0035F0  0E00               	movlw	0
  9980  0035F2  6E46               	movwf	_eusart1TxTail,c
  9981  0035F4                     i2l2186:
  9982                           
  9983                           ;eusart1.c: 183: }
  9984                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
  9985  0035F4  2A49               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  9986                           
  9987                           ;eusart1.c: 185: }
  9988  0035F6  0012               	return	
  9989  0035F8                     i2l134:
  9990                           
  9991                           ;eusart1.c: 186: else
  9992                           ;eusart1.c: 187: {
  9993                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
  9994  0035F8  989D               	bcf	3997,4,c	;volatile
  9995  0035FA  0012               	return	
  9996  0035FC                     __end_of_EUSART1_Transmit_ISR:
  9997                           	opt stack 0
  9998                           pclatu	equ	0xFFB
  9999                           pclath	equ	0xFFA
 10000                           tblptru	equ	0xFF8
 10001                           tblptrh	equ	0xFF7
 10002                           tblptrl	equ	0xFF6
 10003                           tablat	equ	0xFF5
 10004                           prodh	equ	0xFF4
 10005                           prodl	equ	0xFF3
 10006                           intcon	equ	0xFF2
 10007                           intcon2	equ	0xFF1
 10008                           postinc0	equ	0xFEE
 10009                           fsr0h	equ	0xFEA
 10010                           fsr0l	equ	0xFE9
 10011                           wreg	equ	0xFE8
 10012                           postinc1	equ	0xFE6
 10013                           postdec1	equ	0xFE5
 10014                           fsr1h	equ	0xFE2
 10015                           fsr1l	equ	0xFE1
 10016                           indf2	equ	0xFDF
 10017                           postinc2	equ	0xFDE
 10018                           postdec2	equ	0xFDD
 10019                           fsr2h	equ	0xFDA
 10020                           fsr2l	equ	0xFD9
 10021                           status	equ	0xFD8
 10022                           
 10023 ;; *************** function _EUSART1_Receive_ISR *****************
 10024 ;; Defined at:
 10025 ;;		line 192 in file "mcc_generated_files/eusart1.c"
 10026 ;; Parameters:    Size  Location     Type
 10027 ;;		None
 10028 ;; Auto vars:     Size  Location     Type
 10029 ;;		None
 10030 ;; Return value:  Size  Location     Type
 10031 ;;		None               void
 10032 ;; Registers used:
 10033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10034 ;; Tracked objects:
 10035 ;;		On entry : 0/0
 10036 ;;		On exit  : 0/0
 10037 ;;		Unchanged: 0/0
 10038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10039 ;;      Params:         0       0       0       0       0       0       0
 10040 ;;      Locals:         0       0       0       0       0       0       0
 10041 ;;      Temps:          0       0       0       0       0       0       0
 10042 ;;      Totals:         0       0       0       0       0       0       0
 10043 ;;Total ram usage:        0 bytes
 10044 ;; Hardware stack levels used:    1
 10045 ;; This function calls:
 10046 ;;		Nothing
 10047 ;; This function is called by:
 10048 ;;		_INTERRUPT_InterruptManager
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           	psect	text48
 10053  0035FC                     __ptext48:
 10054                           	opt stack 0
 10055  0035FC                     _EUSART1_Receive_ISR:
 10056                           	opt stack 24
 10057                           
 10058                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
 10059                           
 10060                           ;incstack = 0
 10061  0035FC  A2AB               	btfss	4011,1,c	;volatile
 10062  0035FE  D002               	goto	i2l3652
 10063                           
 10064                           ;eusart1.c: 195: {
 10065                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
 10066  003600  98AB               	bcf	4011,4,c	;volatile
 10067                           
 10068                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
 10069  003602  88AB               	bsf	4011,4,c	;volatile
 10070  003604                     i2l3652:
 10071                           
 10072                           ;eusart1.c: 200: }
 10073                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
 10074  003604  5043               	movf	_eusart1RxHead,w,c
 10075  003606  0D01               	mullw	1
 10076  003608  0101               	movlb	1	; () banked
 10077  00360A  0E00               	movlw	low _eusart1RxBuffer
 10078  00360C  24F3               	addwf	prodl,w,c
 10079  00360E  6ED9               	movwf	fsr2l,c
 10080  003610  0101               	movlb	1	; () banked
 10081  003612  0E01               	movlw	high _eusart1RxBuffer
 10082  003614  20F4               	addwfc	prodh,w,c
 10083  003616  6EDA               	movwf	fsr2h,c
 10084  003618  CFAE FFDF          	movff	4014,indf2	;volatile
 10085                           
 10086                           ; BSR set to: 1
 10087  00361C  2A43               	incf	_eusart1RxHead,f,c
 10088                           
 10089                           ; BSR set to: 1
 10090                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 10091  00361E  0E31               	movlw	49
 10092  003620  6443               	cpfsgt	_eusart1RxHead,c
 10093  003622  D002               	goto	i2l3660
 10094                           
 10095                           ; BSR set to: 1
 10096                           ;eusart1.c: 205: {
 10097                           ;eusart1.c: 206: eusart1RxHead = 0;
 10098  003624  0E00               	movlw	0
 10099  003626  6E43               	movwf	_eusart1RxHead,c
 10100  003628                     i2l3660:
 10101                           
 10102                           ; BSR set to: 1
 10103                           ;eusart1.c: 207: }
 10104                           ;eusart1.c: 208: eusart1RxCount++;
 10105  003628  2A42               	incf	_eusart1RxCount,f,c	;volatile
 10106                           
 10107                           ; BSR set to: 1
 10108  00362A  0012               	return	
 10109  00362C                     __end_of_EUSART1_Receive_ISR:
 10110                           	opt stack 0
 10111                           pclatu	equ	0xFFB
 10112                           pclath	equ	0xFFA
 10113                           tblptru	equ	0xFF8
 10114                           tblptrh	equ	0xFF7
 10115                           tblptrl	equ	0xFF6
 10116                           tablat	equ	0xFF5
 10117                           prodh	equ	0xFF4
 10118                           prodl	equ	0xFF3
 10119                           intcon	equ	0xFF2
 10120                           intcon2	equ	0xFF1
 10121                           postinc0	equ	0xFEE
 10122                           fsr0h	equ	0xFEA
 10123                           fsr0l	equ	0xFE9
 10124                           wreg	equ	0xFE8
 10125                           postinc1	equ	0xFE6
 10126                           postdec1	equ	0xFE5
 10127                           fsr1h	equ	0xFE2
 10128                           fsr1l	equ	0xFE1
 10129                           indf2	equ	0xFDF
 10130                           postinc2	equ	0xFDE
 10131                           postdec2	equ	0xFDD
 10132                           fsr2h	equ	0xFDA
 10133                           fsr2l	equ	0xFD9
 10134                           status	equ	0xFD8
 10135                           
 10136 ;; *************** function _ADC_ISR *****************
 10137 ;; Defined at:
 10138 ;;		line 82 in file "mcc_generated_files/adc.c"
 10139 ;; Parameters:    Size  Location     Type
 10140 ;;		None
 10141 ;; Auto vars:     Size  Location     Type
 10142 ;;  ADC_Result      2    6[COMRAM] int 
 10143 ;; Return value:  Size  Location     Type
 10144 ;;		None               void
 10145 ;; Registers used:
 10146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10147 ;; Tracked objects:
 10148 ;;		On entry : 0/0
 10149 ;;		On exit  : 0/0
 10150 ;;		Unchanged: 0/0
 10151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10152 ;;      Params:         0       0       0       0       0       0       0
 10153 ;;      Locals:         2       0       0       0       0       0       0
 10154 ;;      Temps:          2       0       0       0       0       0       0
 10155 ;;      Totals:         4       0       0       0       0       0       0
 10156 ;;Total ram usage:        4 bytes
 10157 ;; Hardware stack levels used:    1
 10158 ;; Hardware stack levels required when called:    1
 10159 ;; This function calls:
 10160 ;;		_ADC_GetConversionResult
 10161 ;;		_ADC_StartConversion
 10162 ;;		_Set_4051
 10163 ;; This function is called by:
 10164 ;;		_INTERRUPT_InterruptManager
 10165 ;; This function uses a non-reentrant model
 10166 ;;
 10167                           
 10168                           	psect	text49
 10169  000F40                     __ptext49:
 10170                           	opt stack 0
 10171  000F40                     _ADC_ISR:
 10172                           	opt stack 23
 10173                           
 10174                           ;adc.c: 85: PIR1bits.ADIF = 0;
 10175                           
 10176                           ; BSR set to: 1
 10177                           ;incstack = 0
 10178  000F40  9C9E               	bcf	3998,6,c	;volatile
 10179                           
 10180                           ;adc.c: 86: int ADC_Result = 0;
 10181  000F42  0E00               	movlw	0
 10182  000F44  6E08               	movwf	ADC_ISR@ADC_Result+1,c
 10183  000F46  0E00               	movlw	0
 10184  000F48  6E07               	movwf	ADC_ISR@ADC_Result,c
 10185                           
 10186                           ;adc.c: 87: if (Temp_Aquire){
 10187  000F4A  5040               	movf	_Temp_Aquire,w,c
 10188  000F4C  B4D8               	btfsc	status,2,c
 10189  000F4E  D14A               	goto	i2l3736
 10190                           
 10191                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
 10192  000F50  ECB9  F01B         	call	_ADC_GetConversionResult	;wreg free
 10193  000F54  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 10194  000F58  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 10195                           
 10196                           ;adc.c: 90: switch ( ADC_Buffer_Point )
 10197  000F5C  D117               	goto	i2l3732
 10198  000F5E                     i2l3668:
 10199                           
 10200                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10201  000F5E  0E98               	movlw	low _Temp_Adc
 10202  000F60  6E05               	movwf	??_ADC_ISR& (0+255),c
 10203  000F62  0E00               	movlw	high _Temp_Adc
 10204  000F64  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10205  000F66  90D8               	bcf	status,0,c
 10206  000F68  343E               	rlcf	_ADC_Buffer_Point,w,c
 10207  000F6A  6ED9               	movwf	fsr2l,c
 10208  000F6C  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10209  000F6E  6EDA               	movwf	fsr2h,c
 10210  000F70  5005               	movf	??_ADC_ISR,w,c
 10211  000F72  26D9               	addwf	fsr2l,f,c
 10212  000F74  5006               	movf	??_ADC_ISR+1,w,c
 10213  000F76  22DA               	addwfc	fsr2h,f,c
 10214  000F78  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10215  000F7C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10216                           
 10217                           ;adc.c: 94: Set_4051(0);
 10218  000F80  0E00               	movlw	0
 10219  000F82  6E02               	movwf	Set_4051@Channel+1,c
 10220  000F84  0E00               	movlw	0
 10221  000F86  6E01               	movwf	Set_4051@Channel,c
 10222  000F88  EC2D  F01B         	call	_Set_4051	;wreg free
 10223                           
 10224                           ;adc.c: 95: ADC_StartConversion(Temp1);
 10225  000F8C  0E0E               	movlw	14
 10226  000F8E  EC88  F01B         	call	_ADC_StartConversion
 10227                           
 10228                           ;adc.c: 96: break;
 10229  000F92  D126               	goto	i2l3734
 10230  000F94                     i2l3674:
 10231                           
 10232                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10233  000F94  0E98               	movlw	low _Temp_Adc
 10234  000F96  6E05               	movwf	??_ADC_ISR& (0+255),c
 10235  000F98  0E00               	movlw	high _Temp_Adc
 10236  000F9A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10237  000F9C  90D8               	bcf	status,0,c
 10238  000F9E  343E               	rlcf	_ADC_Buffer_Point,w,c
 10239  000FA0  6ED9               	movwf	fsr2l,c
 10240  000FA2  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10241  000FA4  6EDA               	movwf	fsr2h,c
 10242  000FA6  5005               	movf	??_ADC_ISR,w,c
 10243  000FA8  26D9               	addwf	fsr2l,f,c
 10244  000FAA  5006               	movf	??_ADC_ISR+1,w,c
 10245  000FAC  22DA               	addwfc	fsr2h,f,c
 10246  000FAE  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10247  000FB2  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10248                           
 10249                           ;adc.c: 99: Set_4051(1);
 10250  000FB6  0E00               	movlw	0
 10251  000FB8  6E02               	movwf	Set_4051@Channel+1,c
 10252  000FBA  0E01               	movlw	1
 10253  000FBC  6E01               	movwf	Set_4051@Channel,c
 10254  000FBE  EC2D  F01B         	call	_Set_4051	;wreg free
 10255                           
 10256                           ;adc.c: 100: ADC_StartConversion(Temp1);
 10257  000FC2  0E0E               	movlw	14
 10258  000FC4  EC88  F01B         	call	_ADC_StartConversion
 10259                           
 10260                           ;adc.c: 101: break;
 10261  000FC8  D10B               	goto	i2l3734
 10262  000FCA                     i2l3680:
 10263                           
 10264                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10265  000FCA  0E98               	movlw	low _Temp_Adc
 10266  000FCC  6E05               	movwf	??_ADC_ISR& (0+255),c
 10267  000FCE  0E00               	movlw	high _Temp_Adc
 10268  000FD0  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10269  000FD2  90D8               	bcf	status,0,c
 10270  000FD4  343E               	rlcf	_ADC_Buffer_Point,w,c
 10271  000FD6  6ED9               	movwf	fsr2l,c
 10272  000FD8  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10273  000FDA  6EDA               	movwf	fsr2h,c
 10274  000FDC  5005               	movf	??_ADC_ISR,w,c
 10275  000FDE  26D9               	addwf	fsr2l,f,c
 10276  000FE0  5006               	movf	??_ADC_ISR+1,w,c
 10277  000FE2  22DA               	addwfc	fsr2h,f,c
 10278  000FE4  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10279  000FE8  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10280                           
 10281                           ;adc.c: 104: Set_4051(2);
 10282  000FEC  0E00               	movlw	0
 10283  000FEE  6E02               	movwf	Set_4051@Channel+1,c
 10284  000FF0  0E02               	movlw	2
 10285  000FF2  6E01               	movwf	Set_4051@Channel,c
 10286  000FF4  EC2D  F01B         	call	_Set_4051	;wreg free
 10287                           
 10288                           ;adc.c: 105: ADC_StartConversion(Temp1);
 10289  000FF8  0E0E               	movlw	14
 10290  000FFA  EC88  F01B         	call	_ADC_StartConversion
 10291                           
 10292                           ;adc.c: 106: break;
 10293  000FFE  D0F0               	goto	i2l3734
 10294  001000                     i2l3686:
 10295                           
 10296                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10297  001000  0E98               	movlw	low _Temp_Adc
 10298  001002  6E05               	movwf	??_ADC_ISR& (0+255),c
 10299  001004  0E00               	movlw	high _Temp_Adc
 10300  001006  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10301  001008  90D8               	bcf	status,0,c
 10302  00100A  343E               	rlcf	_ADC_Buffer_Point,w,c
 10303  00100C  6ED9               	movwf	fsr2l,c
 10304  00100E  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10305  001010  6EDA               	movwf	fsr2h,c
 10306  001012  5005               	movf	??_ADC_ISR,w,c
 10307  001014  26D9               	addwf	fsr2l,f,c
 10308  001016  5006               	movf	??_ADC_ISR+1,w,c
 10309  001018  22DA               	addwfc	fsr2h,f,c
 10310  00101A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10311  00101E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10312                           
 10313                           ;adc.c: 109: Set_4051(3);
 10314  001022  0E00               	movlw	0
 10315  001024  6E02               	movwf	Set_4051@Channel+1,c
 10316  001026  0E03               	movlw	3
 10317  001028  6E01               	movwf	Set_4051@Channel,c
 10318  00102A  EC2D  F01B         	call	_Set_4051	;wreg free
 10319                           
 10320                           ;adc.c: 110: ADC_StartConversion(Temp1);
 10321  00102E  0E0E               	movlw	14
 10322  001030  EC88  F01B         	call	_ADC_StartConversion
 10323                           
 10324                           ;adc.c: 111: break;
 10325  001034  D0D5               	goto	i2l3734
 10326  001036                     i2l3692:
 10327                           
 10328                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10329  001036  0E98               	movlw	low _Temp_Adc
 10330  001038  6E05               	movwf	??_ADC_ISR& (0+255),c
 10331  00103A  0E00               	movlw	high _Temp_Adc
 10332  00103C  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10333  00103E  90D8               	bcf	status,0,c
 10334  001040  343E               	rlcf	_ADC_Buffer_Point,w,c
 10335  001042  6ED9               	movwf	fsr2l,c
 10336  001044  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10337  001046  6EDA               	movwf	fsr2h,c
 10338  001048  5005               	movf	??_ADC_ISR,w,c
 10339  00104A  26D9               	addwf	fsr2l,f,c
 10340  00104C  5006               	movf	??_ADC_ISR+1,w,c
 10341  00104E  22DA               	addwfc	fsr2h,f,c
 10342  001050  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10343  001054  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10344                           
 10345                           ;adc.c: 114: Set_4051(4);
 10346  001058  0E00               	movlw	0
 10347  00105A  6E02               	movwf	Set_4051@Channel+1,c
 10348  00105C  0E04               	movlw	4
 10349  00105E  6E01               	movwf	Set_4051@Channel,c
 10350  001060  EC2D  F01B         	call	_Set_4051	;wreg free
 10351                           
 10352                           ;adc.c: 115: ADC_StartConversion(Temp1);
 10353  001064  0E0E               	movlw	14
 10354  001066  EC88  F01B         	call	_ADC_StartConversion
 10355                           
 10356                           ;adc.c: 116: break;
 10357  00106A  D0BA               	goto	i2l3734
 10358  00106C                     i2l3698:
 10359                           
 10360                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10361  00106C  0E98               	movlw	low _Temp_Adc
 10362  00106E  6E05               	movwf	??_ADC_ISR& (0+255),c
 10363  001070  0E00               	movlw	high _Temp_Adc
 10364  001072  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10365  001074  90D8               	bcf	status,0,c
 10366  001076  343E               	rlcf	_ADC_Buffer_Point,w,c
 10367  001078  6ED9               	movwf	fsr2l,c
 10368  00107A  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10369  00107C  6EDA               	movwf	fsr2h,c
 10370  00107E  5005               	movf	??_ADC_ISR,w,c
 10371  001080  26D9               	addwf	fsr2l,f,c
 10372  001082  5006               	movf	??_ADC_ISR+1,w,c
 10373  001084  22DA               	addwfc	fsr2h,f,c
 10374  001086  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10375  00108A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10376                           
 10377                           ;adc.c: 119: Set_4051(5);
 10378  00108E  0E00               	movlw	0
 10379  001090  6E02               	movwf	Set_4051@Channel+1,c
 10380  001092  0E05               	movlw	5
 10381  001094  6E01               	movwf	Set_4051@Channel,c
 10382  001096  EC2D  F01B         	call	_Set_4051	;wreg free
 10383                           
 10384                           ;adc.c: 120: ADC_StartConversion(Temp1);
 10385  00109A  0E0E               	movlw	14
 10386  00109C  EC88  F01B         	call	_ADC_StartConversion
 10387                           
 10388                           ;adc.c: 121: break;
 10389  0010A0  D09F               	goto	i2l3734
 10390  0010A2                     i2l3704:
 10391                           
 10392                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10393  0010A2  0E98               	movlw	low _Temp_Adc
 10394  0010A4  6E05               	movwf	??_ADC_ISR& (0+255),c
 10395  0010A6  0E00               	movlw	high _Temp_Adc
 10396  0010A8  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10397  0010AA  90D8               	bcf	status,0,c
 10398  0010AC  343E               	rlcf	_ADC_Buffer_Point,w,c
 10399  0010AE  6ED9               	movwf	fsr2l,c
 10400  0010B0  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10401  0010B2  6EDA               	movwf	fsr2h,c
 10402  0010B4  5005               	movf	??_ADC_ISR,w,c
 10403  0010B6  26D9               	addwf	fsr2l,f,c
 10404  0010B8  5006               	movf	??_ADC_ISR+1,w,c
 10405  0010BA  22DA               	addwfc	fsr2h,f,c
 10406  0010BC  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10407  0010C0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10408                           
 10409                           ;adc.c: 124: Set_4051(6);
 10410  0010C4  0E00               	movlw	0
 10411  0010C6  6E02               	movwf	Set_4051@Channel+1,c
 10412  0010C8  0E06               	movlw	6
 10413  0010CA  6E01               	movwf	Set_4051@Channel,c
 10414  0010CC  EC2D  F01B         	call	_Set_4051	;wreg free
 10415                           
 10416                           ;adc.c: 125: ADC_StartConversion(Temp1);
 10417  0010D0  0E0E               	movlw	14
 10418  0010D2  EC88  F01B         	call	_ADC_StartConversion
 10419                           
 10420                           ;adc.c: 126: break;
 10421  0010D6  D084               	goto	i2l3734
 10422  0010D8                     i2l3710:
 10423                           
 10424                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10425  0010D8  0E98               	movlw	low _Temp_Adc
 10426  0010DA  6E05               	movwf	??_ADC_ISR& (0+255),c
 10427  0010DC  0E00               	movlw	high _Temp_Adc
 10428  0010DE  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10429  0010E0  90D8               	bcf	status,0,c
 10430  0010E2  343E               	rlcf	_ADC_Buffer_Point,w,c
 10431  0010E4  6ED9               	movwf	fsr2l,c
 10432  0010E6  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10433  0010E8  6EDA               	movwf	fsr2h,c
 10434  0010EA  5005               	movf	??_ADC_ISR,w,c
 10435  0010EC  26D9               	addwf	fsr2l,f,c
 10436  0010EE  5006               	movf	??_ADC_ISR+1,w,c
 10437  0010F0  22DA               	addwfc	fsr2h,f,c
 10438  0010F2  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10439  0010F6  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10440                           
 10441                           ;adc.c: 129: Set_4051(7);
 10442  0010FA  0E00               	movlw	0
 10443  0010FC  6E02               	movwf	Set_4051@Channel+1,c
 10444  0010FE  0E07               	movlw	7
 10445  001100  6E01               	movwf	Set_4051@Channel,c
 10446  001102  EC2D  F01B         	call	_Set_4051	;wreg free
 10447                           
 10448                           ;adc.c: 130: ADC_StartConversion(Temp1);
 10449  001106  0E0E               	movlw	14
 10450  001108  EC88  F01B         	call	_ADC_StartConversion
 10451                           
 10452                           ;adc.c: 131: break;
 10453  00110C  D069               	goto	i2l3734
 10454  00110E                     i2l3716:
 10455                           
 10456                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10457  00110E  0E98               	movlw	low _Temp_Adc
 10458  001110  6E05               	movwf	??_ADC_ISR& (0+255),c
 10459  001112  0E00               	movlw	high _Temp_Adc
 10460  001114  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10461  001116  90D8               	bcf	status,0,c
 10462  001118  343E               	rlcf	_ADC_Buffer_Point,w,c
 10463  00111A  6ED9               	movwf	fsr2l,c
 10464  00111C  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10465  00111E  6EDA               	movwf	fsr2h,c
 10466  001120  5005               	movf	??_ADC_ISR,w,c
 10467  001122  26D9               	addwf	fsr2l,f,c
 10468  001124  5006               	movf	??_ADC_ISR+1,w,c
 10469  001126  22DA               	addwfc	fsr2h,f,c
 10470  001128  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10471  00112C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10472                           
 10473                           ;adc.c: 134: Set_4051(0);
 10474  001130  0E00               	movlw	0
 10475  001132  6E02               	movwf	Set_4051@Channel+1,c
 10476  001134  0E00               	movlw	0
 10477  001136  6E01               	movwf	Set_4051@Channel,c
 10478  001138  EC2D  F01B         	call	_Set_4051	;wreg free
 10479                           
 10480                           ;adc.c: 135: ADC_StartConversion(Temp2);
 10481  00113C  0E14               	movlw	20
 10482  00113E  EC88  F01B         	call	_ADC_StartConversion
 10483                           
 10484                           ;adc.c: 136: break;
 10485  001142  D04E               	goto	i2l3734
 10486  001144                     i2l3722:
 10487                           
 10488                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10489  001144  0E98               	movlw	low _Temp_Adc
 10490  001146  6E05               	movwf	??_ADC_ISR& (0+255),c
 10491  001148  0E00               	movlw	high _Temp_Adc
 10492  00114A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10493  00114C  90D8               	bcf	status,0,c
 10494  00114E  343E               	rlcf	_ADC_Buffer_Point,w,c
 10495  001150  6ED9               	movwf	fsr2l,c
 10496  001152  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10497  001154  6EDA               	movwf	fsr2h,c
 10498  001156  5005               	movf	??_ADC_ISR,w,c
 10499  001158  26D9               	addwf	fsr2l,f,c
 10500  00115A  5006               	movf	??_ADC_ISR+1,w,c
 10501  00115C  22DA               	addwfc	fsr2h,f,c
 10502  00115E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10503  001162  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10504                           
 10505                           ;adc.c: 139: Set_4051(1);
 10506  001166  0E00               	movlw	0
 10507  001168  6E02               	movwf	Set_4051@Channel+1,c
 10508  00116A  0E01               	movlw	1
 10509  00116C  6E01               	movwf	Set_4051@Channel,c
 10510  00116E  EC2D  F01B         	call	_Set_4051	;wreg free
 10511                           
 10512                           ;adc.c: 140: ADC_StartConversion(Temp2);
 10513  001172  0E14               	movlw	20
 10514  001174  EC88  F01B         	call	_ADC_StartConversion
 10515                           
 10516                           ;adc.c: 141: break;
 10517  001178  D033               	goto	i2l3734
 10518  00117A                     i2l3728:
 10519                           
 10520                           ;adc.c: 143: Temp_Aquire = 0;
 10521  00117A  0E00               	movlw	0
 10522  00117C  6E40               	movwf	_Temp_Aquire,c
 10523                           
 10524                           ;adc.c: 144: Temp_Done = 1;
 10525  00117E  0E00               	movlw	0
 10526  001180  0100               	movlb	0	; () banked
 10527  001182  6F93               	movwf	(_Temp_Done+1)& (0+255),b
 10528  001184  0E01               	movlw	1
 10529  001186  0100               	movlb	0	; () banked
 10530  001188  6F92               	movwf	_Temp_Done& (0+255),b
 10531                           
 10532                           ;adc.c: 145: break;
 10533  00118A  D02A               	goto	i2l3734
 10534  00118C                     i2l3732:
 10535  00118C  C03E  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 10536  001190  C03F  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 10537                           
 10538                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10539                           ; Switch size 1, requested type "space"
 10540                           ; Number of cases is 1, Range of values is 0 to 0
 10541                           ; switch strategies available:
 10542                           ; Name         Instructions Cycles
 10543                           ; simple_byte            4     3 (average)
 10544                           ;	Chosen strategy is simple_byte
 10545  001194  5006               	movf	??_ADC_ISR+1,w,c
 10546  001196  0A00               	xorlw	0	; case 0
 10547  001198  A4D8               	btfss	status,2,c
 10548  00119A  D022               	goto	i2l3734
 10549                           
 10550                           ; Switch size 1, requested type "space"
 10551                           ; Number of cases is 11, Range of values is 0 to 10
 10552                           ; switch strategies available:
 10553                           ; Name         Instructions Cycles
 10554                           ; simple_byte           34    18 (average)
 10555                           ;	Chosen strategy is simple_byte
 10556  00119C  5005               	movf	??_ADC_ISR,w,c
 10557  00119E  0A00               	xorlw	0	; case 0
 10558  0011A0  B4D8               	btfsc	status,2,c
 10559  0011A2  D6DD               	goto	i2l3668
 10560  0011A4  0A01               	xorlw	1	; case 1
 10561  0011A6  B4D8               	btfsc	status,2,c
 10562  0011A8  D6F5               	goto	i2l3674
 10563  0011AA  0A03               	xorlw	3	; case 2
 10564  0011AC  B4D8               	btfsc	status,2,c
 10565  0011AE  D70D               	goto	i2l3680
 10566  0011B0  0A01               	xorlw	1	; case 3
 10567  0011B2  B4D8               	btfsc	status,2,c
 10568  0011B4  D725               	goto	i2l3686
 10569  0011B6  0A07               	xorlw	7	; case 4
 10570  0011B8  B4D8               	btfsc	status,2,c
 10571  0011BA  D73D               	goto	i2l3692
 10572  0011BC  0A01               	xorlw	1	; case 5
 10573  0011BE  B4D8               	btfsc	status,2,c
 10574  0011C0  D755               	goto	i2l3698
 10575  0011C2  0A03               	xorlw	3	; case 6
 10576  0011C4  B4D8               	btfsc	status,2,c
 10577  0011C6  D76D               	goto	i2l3704
 10578  0011C8  0A01               	xorlw	1	; case 7
 10579  0011CA  B4D8               	btfsc	status,2,c
 10580  0011CC  D785               	goto	i2l3710
 10581  0011CE  0A0F               	xorlw	15	; case 8
 10582  0011D0  B4D8               	btfsc	status,2,c
 10583  0011D2  D79D               	goto	i2l3716
 10584  0011D4  0A01               	xorlw	1	; case 9
 10585  0011D6  B4D8               	btfsc	status,2,c
 10586  0011D8  D7B5               	goto	i2l3722
 10587  0011DA  0A03               	xorlw	3	; case 10
 10588  0011DC  B4D8               	btfsc	status,2,c
 10589  0011DE  D7CD               	goto	i2l3728
 10590  0011E0                     i2l3734:
 10591                           
 10592                           ;adc.c: 147: ADC_Buffer_Point++;
 10593  0011E0  4A3E               	infsnz	_ADC_Buffer_Point,f,c
 10594  0011E2  2A3F               	incf	_ADC_Buffer_Point+1,f,c
 10595  0011E4                     i2l3736:
 10596                           
 10597                           ;adc.c: 148: }
 10598                           ;adc.c: 149: if (Volt_Aquire){
 10599  0011E4  5041               	movf	_Volt_Aquire,w,c
 10600  0011E6  B4D8               	btfsc	status,2,c
 10601  0011E8  0012               	return	
 10602                           
 10603                           ;adc.c: 151: ADC_Result = ADC_GetConversionResult();
 10604  0011EA  ECB9  F01B         	call	_ADC_GetConversionResult	;wreg free
 10605  0011EE  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 10606  0011F2  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 10607                           
 10608                           ;adc.c: 152: switch ( ADC_Buffer_Point )
 10609  0011F6  D0DB               	goto	i2l3784
 10610  0011F8                     i2l3740:
 10611                           
 10612                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10613  0011F8  0E7E               	movlw	low _Battery_Adc
 10614  0011FA  6E05               	movwf	??_ADC_ISR& (0+255),c
 10615  0011FC  0E00               	movlw	high _Battery_Adc
 10616  0011FE  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10617  001200  90D8               	bcf	status,0,c
 10618  001202  343E               	rlcf	_ADC_Buffer_Point,w,c
 10619  001204  6ED9               	movwf	fsr2l,c
 10620  001206  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10621  001208  6EDA               	movwf	fsr2h,c
 10622  00120A  5005               	movf	??_ADC_ISR,w,c
 10623  00120C  26D9               	addwf	fsr2l,f,c
 10624  00120E  5006               	movf	??_ADC_ISR+1,w,c
 10625  001210  22DA               	addwfc	fsr2h,f,c
 10626  001212  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10627  001216  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10628                           
 10629                           ;adc.c: 156: ADC_StartConversion(Battery1);
 10630  00121A  0E01               	movlw	1
 10631  00121C  EC88  F01B         	call	_ADC_StartConversion
 10632                           
 10633                           ;adc.c: 157: break;
 10634  001220  D0F0               	goto	i2l3786
 10635  001222                     i2l3744:
 10636                           
 10637                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10638  001222  0E7E               	movlw	low _Battery_Adc
 10639  001224  6E05               	movwf	??_ADC_ISR& (0+255),c
 10640  001226  0E00               	movlw	high _Battery_Adc
 10641  001228  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10642  00122A  90D8               	bcf	status,0,c
 10643  00122C  343E               	rlcf	_ADC_Buffer_Point,w,c
 10644  00122E  6ED9               	movwf	fsr2l,c
 10645  001230  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10646  001232  6EDA               	movwf	fsr2h,c
 10647  001234  5005               	movf	??_ADC_ISR,w,c
 10648  001236  26D9               	addwf	fsr2l,f,c
 10649  001238  5006               	movf	??_ADC_ISR+1,w,c
 10650  00123A  22DA               	addwfc	fsr2h,f,c
 10651  00123C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10652  001240  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10653                           
 10654                           ;adc.c: 160: ADC_StartConversion(Battery2);
 10655  001244  0E03               	movlw	3
 10656  001246  EC88  F01B         	call	_ADC_StartConversion
 10657                           
 10658                           ;adc.c: 161: break;
 10659  00124A  D0DB               	goto	i2l3786
 10660  00124C                     i2l3748:
 10661                           
 10662                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10663  00124C  0E7E               	movlw	low _Battery_Adc
 10664  00124E  6E05               	movwf	??_ADC_ISR& (0+255),c
 10665  001250  0E00               	movlw	high _Battery_Adc
 10666  001252  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10667  001254  90D8               	bcf	status,0,c
 10668  001256  343E               	rlcf	_ADC_Buffer_Point,w,c
 10669  001258  6ED9               	movwf	fsr2l,c
 10670  00125A  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10671  00125C  6EDA               	movwf	fsr2h,c
 10672  00125E  5005               	movf	??_ADC_ISR,w,c
 10673  001260  26D9               	addwf	fsr2l,f,c
 10674  001262  5006               	movf	??_ADC_ISR+1,w,c
 10675  001264  22DA               	addwfc	fsr2h,f,c
 10676  001266  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10677  00126A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10678                           
 10679                           ;adc.c: 164: ADC_StartConversion(Battery3);
 10680  00126E  0E04               	movlw	4
 10681  001270  EC88  F01B         	call	_ADC_StartConversion
 10682                           
 10683                           ;adc.c: 165: break;
 10684  001274  D0C6               	goto	i2l3786
 10685  001276                     i2l3752:
 10686                           
 10687                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10688  001276  0E7E               	movlw	low _Battery_Adc
 10689  001278  6E05               	movwf	??_ADC_ISR& (0+255),c
 10690  00127A  0E00               	movlw	high _Battery_Adc
 10691  00127C  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10692  00127E  90D8               	bcf	status,0,c
 10693  001280  343E               	rlcf	_ADC_Buffer_Point,w,c
 10694  001282  6ED9               	movwf	fsr2l,c
 10695  001284  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10696  001286  6EDA               	movwf	fsr2h,c
 10697  001288  5005               	movf	??_ADC_ISR,w,c
 10698  00128A  26D9               	addwf	fsr2l,f,c
 10699  00128C  5006               	movf	??_ADC_ISR+1,w,c
 10700  00128E  22DA               	addwfc	fsr2h,f,c
 10701  001290  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10702  001294  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10703                           
 10704                           ;adc.c: 168: ADC_StartConversion(Battery4);
 10705  001298  0E05               	movlw	5
 10706  00129A  EC88  F01B         	call	_ADC_StartConversion
 10707                           
 10708                           ;adc.c: 169: break;
 10709  00129E  D0B1               	goto	i2l3786
 10710  0012A0                     i2l3756:
 10711                           
 10712                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10713  0012A0  0E7E               	movlw	low _Battery_Adc
 10714  0012A2  6E05               	movwf	??_ADC_ISR& (0+255),c
 10715  0012A4  0E00               	movlw	high _Battery_Adc
 10716  0012A6  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10717  0012A8  90D8               	bcf	status,0,c
 10718  0012AA  343E               	rlcf	_ADC_Buffer_Point,w,c
 10719  0012AC  6ED9               	movwf	fsr2l,c
 10720  0012AE  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10721  0012B0  6EDA               	movwf	fsr2h,c
 10722  0012B2  5005               	movf	??_ADC_ISR,w,c
 10723  0012B4  26D9               	addwf	fsr2l,f,c
 10724  0012B6  5006               	movf	??_ADC_ISR+1,w,c
 10725  0012B8  22DA               	addwfc	fsr2h,f,c
 10726  0012BA  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10727  0012BE  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10728                           
 10729                           ;adc.c: 172: ADC_StartConversion(Battery5);
 10730  0012C2  0E18               	movlw	24
 10731  0012C4  EC88  F01B         	call	_ADC_StartConversion
 10732                           
 10733                           ;adc.c: 173: break;
 10734  0012C8  D09C               	goto	i2l3786
 10735  0012CA                     i2l3760:
 10736                           
 10737                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10738  0012CA  0E7E               	movlw	low _Battery_Adc
 10739  0012CC  6E05               	movwf	??_ADC_ISR& (0+255),c
 10740  0012CE  0E00               	movlw	high _Battery_Adc
 10741  0012D0  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10742  0012D2  90D8               	bcf	status,0,c
 10743  0012D4  343E               	rlcf	_ADC_Buffer_Point,w,c
 10744  0012D6  6ED9               	movwf	fsr2l,c
 10745  0012D8  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10746  0012DA  6EDA               	movwf	fsr2h,c
 10747  0012DC  5005               	movf	??_ADC_ISR,w,c
 10748  0012DE  26D9               	addwf	fsr2l,f,c
 10749  0012E0  5006               	movf	??_ADC_ISR+1,w,c
 10750  0012E2  22DA               	addwfc	fsr2h,f,c
 10751  0012E4  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10752  0012E8  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10753                           
 10754                           ;adc.c: 176: ADC_StartConversion(Battery6);
 10755  0012EC  0E1A               	movlw	26
 10756  0012EE  EC88  F01B         	call	_ADC_StartConversion
 10757                           
 10758                           ;adc.c: 177: break;
 10759  0012F2  D087               	goto	i2l3786
 10760  0012F4                     i2l3764:
 10761                           
 10762                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10763  0012F4  0E7E               	movlw	low _Battery_Adc
 10764  0012F6  6E05               	movwf	??_ADC_ISR& (0+255),c
 10765  0012F8  0E00               	movlw	high _Battery_Adc
 10766  0012FA  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10767  0012FC  90D8               	bcf	status,0,c
 10768  0012FE  343E               	rlcf	_ADC_Buffer_Point,w,c
 10769  001300  6ED9               	movwf	fsr2l,c
 10770  001302  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10771  001304  6EDA               	movwf	fsr2h,c
 10772  001306  5005               	movf	??_ADC_ISR,w,c
 10773  001308  26D9               	addwf	fsr2l,f,c
 10774  00130A  5006               	movf	??_ADC_ISR+1,w,c
 10775  00130C  22DA               	addwfc	fsr2h,f,c
 10776  00130E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10777  001312  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10778                           
 10779                           ;adc.c: 180: ADC_StartConversion(Battery7);
 10780  001316  0E1B               	movlw	27
 10781  001318  EC88  F01B         	call	_ADC_StartConversion
 10782                           
 10783                           ;adc.c: 181: break;
 10784  00131C  D072               	goto	i2l3786
 10785  00131E                     i2l3768:
 10786                           
 10787                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10788  00131E  0E7E               	movlw	low _Battery_Adc
 10789  001320  6E05               	movwf	??_ADC_ISR& (0+255),c
 10790  001322  0E00               	movlw	high _Battery_Adc
 10791  001324  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10792  001326  90D8               	bcf	status,0,c
 10793  001328  343E               	rlcf	_ADC_Buffer_Point,w,c
 10794  00132A  6ED9               	movwf	fsr2l,c
 10795  00132C  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10796  00132E  6EDA               	movwf	fsr2h,c
 10797  001330  5005               	movf	??_ADC_ISR,w,c
 10798  001332  26D9               	addwf	fsr2l,f,c
 10799  001334  5006               	movf	??_ADC_ISR+1,w,c
 10800  001336  22DA               	addwfc	fsr2h,f,c
 10801  001338  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10802  00133C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10803                           
 10804                           ;adc.c: 184: ADC_StartConversion(Battery8);
 10805  001340  0E08               	movlw	8
 10806  001342  EC88  F01B         	call	_ADC_StartConversion
 10807                           
 10808                           ;adc.c: 185: break;
 10809  001346  D05D               	goto	i2l3786
 10810  001348                     i2l3772:
 10811                           
 10812                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10813  001348  0E7E               	movlw	low _Battery_Adc
 10814  00134A  6E05               	movwf	??_ADC_ISR& (0+255),c
 10815  00134C  0E00               	movlw	high _Battery_Adc
 10816  00134E  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10817  001350  90D8               	bcf	status,0,c
 10818  001352  343E               	rlcf	_ADC_Buffer_Point,w,c
 10819  001354  6ED9               	movwf	fsr2l,c
 10820  001356  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10821  001358  6EDA               	movwf	fsr2h,c
 10822  00135A  5005               	movf	??_ADC_ISR,w,c
 10823  00135C  26D9               	addwf	fsr2l,f,c
 10824  00135E  5006               	movf	??_ADC_ISR+1,w,c
 10825  001360  22DA               	addwfc	fsr2h,f,c
 10826  001362  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10827  001366  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10828                           
 10829                           ;adc.c: 188: ADC_StartConversion(Battery9);
 10830  00136A  0E0B               	movlw	11
 10831  00136C  EC88  F01B         	call	_ADC_StartConversion
 10832                           
 10833                           ;adc.c: 189: break;
 10834  001370  D048               	goto	i2l3786
 10835  001372                     i2l3776:
 10836                           
 10837                           ;adc.c: 191: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10838  001372  0E7E               	movlw	low _Battery_Adc
 10839  001374  6E05               	movwf	??_ADC_ISR& (0+255),c
 10840  001376  0E00               	movlw	high _Battery_Adc
 10841  001378  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10842  00137A  90D8               	bcf	status,0,c
 10843  00137C  343E               	rlcf	_ADC_Buffer_Point,w,c
 10844  00137E  6ED9               	movwf	fsr2l,c
 10845  001380  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10846  001382  6EDA               	movwf	fsr2h,c
 10847  001384  5005               	movf	??_ADC_ISR,w,c
 10848  001386  26D9               	addwf	fsr2l,f,c
 10849  001388  5006               	movf	??_ADC_ISR+1,w,c
 10850  00138A  22DA               	addwfc	fsr2h,f,c
 10851  00138C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10852  001390  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10853                           
 10854                           ;adc.c: 192: ADC_StartConversion(Battery10);
 10855  001394  0E0D               	movlw	13
 10856  001396  EC88  F01B         	call	_ADC_StartConversion
 10857                           
 10858                           ;adc.c: 193: break;
 10859  00139A  D033               	goto	i2l3786
 10860  00139C                     i2l3780:
 10861                           
 10862                           ;adc.c: 195: Volt_Aquire = 0;
 10863  00139C  0E00               	movlw	0
 10864  00139E  6E41               	movwf	_Volt_Aquire,c
 10865                           
 10866                           ;adc.c: 196: Volt_Done = 1;
 10867  0013A0  0E00               	movlw	0
 10868  0013A2  0100               	movlb	0	; () banked
 10869  0013A4  6F95               	movwf	(_Volt_Done+1)& (0+255),b
 10870  0013A6  0E01               	movlw	1
 10871  0013A8  0100               	movlb	0	; () banked
 10872  0013AA  6F94               	movwf	_Volt_Done& (0+255),b
 10873                           
 10874                           ;adc.c: 197: break;
 10875  0013AC  D02A               	goto	i2l3786
 10876  0013AE                     i2l3784:
 10877  0013AE  C03E  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 10878  0013B2  C03F  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 10879                           
 10880                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10881                           ; Switch size 1, requested type "space"
 10882                           ; Number of cases is 1, Range of values is 0 to 0
 10883                           ; switch strategies available:
 10884                           ; Name         Instructions Cycles
 10885                           ; simple_byte            4     3 (average)
 10886                           ;	Chosen strategy is simple_byte
 10887  0013B6  5006               	movf	??_ADC_ISR+1,w,c
 10888  0013B8  0A00               	xorlw	0	; case 0
 10889  0013BA  A4D8               	btfss	status,2,c
 10890  0013BC  D022               	goto	i2l3786
 10891                           
 10892                           ; Switch size 1, requested type "space"
 10893                           ; Number of cases is 11, Range of values is 0 to 10
 10894                           ; switch strategies available:
 10895                           ; Name         Instructions Cycles
 10896                           ; simple_byte           34    18 (average)
 10897                           ;	Chosen strategy is simple_byte
 10898  0013BE  5005               	movf	??_ADC_ISR,w,c
 10899  0013C0  0A00               	xorlw	0	; case 0
 10900  0013C2  B4D8               	btfsc	status,2,c
 10901  0013C4  D719               	goto	i2l3740
 10902  0013C6  0A01               	xorlw	1	; case 1
 10903  0013C8  B4D8               	btfsc	status,2,c
 10904  0013CA  D72B               	goto	i2l3744
 10905  0013CC  0A03               	xorlw	3	; case 2
 10906  0013CE  B4D8               	btfsc	status,2,c
 10907  0013D0  D73D               	goto	i2l3748
 10908  0013D2  0A01               	xorlw	1	; case 3
 10909  0013D4  B4D8               	btfsc	status,2,c
 10910  0013D6  D74F               	goto	i2l3752
 10911  0013D8  0A07               	xorlw	7	; case 4
 10912  0013DA  B4D8               	btfsc	status,2,c
 10913  0013DC  D761               	goto	i2l3756
 10914  0013DE  0A01               	xorlw	1	; case 5
 10915  0013E0  B4D8               	btfsc	status,2,c
 10916  0013E2  D773               	goto	i2l3760
 10917  0013E4  0A03               	xorlw	3	; case 6
 10918  0013E6  B4D8               	btfsc	status,2,c
 10919  0013E8  D785               	goto	i2l3764
 10920  0013EA  0A01               	xorlw	1	; case 7
 10921  0013EC  B4D8               	btfsc	status,2,c
 10922  0013EE  D797               	goto	i2l3768
 10923  0013F0  0A0F               	xorlw	15	; case 8
 10924  0013F2  B4D8               	btfsc	status,2,c
 10925  0013F4  D7A9               	goto	i2l3772
 10926  0013F6  0A01               	xorlw	1	; case 9
 10927  0013F8  B4D8               	btfsc	status,2,c
 10928  0013FA  D7BB               	goto	i2l3776
 10929  0013FC  0A03               	xorlw	3	; case 10
 10930  0013FE  B4D8               	btfsc	status,2,c
 10931  001400  D7CD               	goto	i2l3780
 10932  001402                     i2l3786:
 10933                           
 10934                           ;adc.c: 199: ADC_Buffer_Point++;
 10935  001402  4A3E               	infsnz	_ADC_Buffer_Point,f,c
 10936  001404  2A3F               	incf	_ADC_Buffer_Point+1,f,c
 10937  001406  0012               	return	
 10938  001408                     __end_of_ADC_ISR:
 10939                           	opt stack 0
 10940                           pclatu	equ	0xFFB
 10941                           pclath	equ	0xFFA
 10942                           tblptru	equ	0xFF8
 10943                           tblptrh	equ	0xFF7
 10944                           tblptrl	equ	0xFF6
 10945                           tablat	equ	0xFF5
 10946                           prodh	equ	0xFF4
 10947                           prodl	equ	0xFF3
 10948                           intcon	equ	0xFF2
 10949                           intcon2	equ	0xFF1
 10950                           postinc0	equ	0xFEE
 10951                           fsr0h	equ	0xFEA
 10952                           fsr0l	equ	0xFE9
 10953                           wreg	equ	0xFE8
 10954                           postinc1	equ	0xFE6
 10955                           postdec1	equ	0xFE5
 10956                           fsr1h	equ	0xFE2
 10957                           fsr1l	equ	0xFE1
 10958                           indf2	equ	0xFDF
 10959                           postinc2	equ	0xFDE
 10960                           postdec2	equ	0xFDD
 10961                           fsr2h	equ	0xFDA
 10962                           fsr2l	equ	0xFD9
 10963                           status	equ	0xFD8
 10964                           
 10965 ;; *************** function _Set_4051 *****************
 10966 ;; Defined at:
 10967 ;;		line 7 in file "Functions.c"
 10968 ;; Parameters:    Size  Location     Type
 10969 ;;  Channel         2    0[COMRAM] int 
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;		None
 10972 ;; Return value:  Size  Location     Type
 10973 ;;		None               void
 10974 ;; Registers used:
 10975 ;;		wreg, status,2, status,0
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10981 ;;      Params:         2       0       0       0       0       0       0
 10982 ;;      Locals:         0       0       0       0       0       0       0
 10983 ;;      Temps:          2       0       0       0       0       0       0
 10984 ;;      Totals:         4       0       0       0       0       0       0
 10985 ;;Total ram usage:        4 bytes
 10986 ;; Hardware stack levels used:    1
 10987 ;; This function calls:
 10988 ;;		Nothing
 10989 ;; This function is called by:
 10990 ;;		_ADC_ISR
 10991 ;; This function uses a non-reentrant model
 10992 ;;
 10993                           
 10994                           	psect	text50
 10995  00365A                     __ptext50:
 10996                           	opt stack 0
 10997  00365A                     _Set_4051:
 10998                           	opt stack 23
 10999                           
 11000                           ;Functions.c: 9: if (Channel & 0x01)
 11001                           
 11002                           ;incstack = 0
 11003  00365A  B001               	btfsc	Set_4051@Channel,0,c
 11004                           
 11005                           ;Functions.c: 10: {
 11006                           ;Functions.c: 11: do { LATA6 = ~LATA6; } while(0);
 11007  00365C  7C89               	btg	3977,6,c	;volatile
 11008                           
 11009                           ;Functions.c: 12: }
 11010                           ;Functions.c: 13: if ((Channel>>1) & 0x01)
 11011  00365E  3402               	rlcf	Set_4051@Channel+1,w,c
 11012  003660  3002               	rrcf	Set_4051@Channel+1,w,c
 11013  003662  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 11014  003664  3001               	rrcf	Set_4051@Channel,w,c
 11015  003666  6E03               	movwf	??_Set_4051& (0+255),c
 11016  003668  B003               	btfsc	??_Set_4051,0,c
 11017                           
 11018                           ;Functions.c: 14: {
 11019                           ;Functions.c: 15: do { LATC0 = ~LATC0; } while(0);
 11020  00366A  708B               	btg	3979,0,c	;volatile
 11021                           
 11022                           ;Functions.c: 16: }
 11023                           ;Functions.c: 17: if ((Channel>>2) & 0x01)
 11024  00366C  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 11025  003670  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 11026  003674  3404               	rlcf	??_Set_4051+1,w,c
 11027  003676  3204               	rrcf	??_Set_4051+1,f,c
 11028  003678  3203               	rrcf	??_Set_4051,f,c
 11029  00367A  3404               	rlcf	??_Set_4051+1,w,c
 11030  00367C  3204               	rrcf	??_Set_4051+1,f,c
 11031  00367E  3203               	rrcf	??_Set_4051,f,c
 11032  003680  A003               	btfss	??_Set_4051,0,c
 11033  003682  0012               	return	
 11034                           
 11035                           ;Functions.c: 18: {
 11036                           ;Functions.c: 19: do { LATC1 = ~LATC1; } while(0);
 11037  003684  728B               	btg	3979,1,c	;volatile
 11038  003686  0012               	return	
 11039  003688                     __end_of_Set_4051:
 11040                           	opt stack 0
 11041                           pclatu	equ	0xFFB
 11042                           pclath	equ	0xFFA
 11043                           tblptru	equ	0xFF8
 11044                           tblptrh	equ	0xFF7
 11045                           tblptrl	equ	0xFF6
 11046                           tablat	equ	0xFF5
 11047                           prodh	equ	0xFF4
 11048                           prodl	equ	0xFF3
 11049                           intcon	equ	0xFF2
 11050                           intcon2	equ	0xFF1
 11051                           postinc0	equ	0xFEE
 11052                           fsr0h	equ	0xFEA
 11053                           fsr0l	equ	0xFE9
 11054                           wreg	equ	0xFE8
 11055                           postinc1	equ	0xFE6
 11056                           postdec1	equ	0xFE5
 11057                           fsr1h	equ	0xFE2
 11058                           fsr1l	equ	0xFE1
 11059                           indf2	equ	0xFDF
 11060                           postinc2	equ	0xFDE
 11061                           postdec2	equ	0xFDD
 11062                           fsr2h	equ	0xFDA
 11063                           fsr2l	equ	0xFD9
 11064                           status	equ	0xFD8
 11065                           
 11066 ;; *************** function _ADC_StartConversion *****************
 11067 ;; Defined at:
 11068 ;;		line 36 in file "mcc_generated_files/adc.c"
 11069 ;; Parameters:    Size  Location     Type
 11070 ;;  channel         1    wreg     enum E8837
 11071 ;; Auto vars:     Size  Location     Type
 11072 ;;  channel         1    1[COMRAM] enum E8837
 11073 ;; Return value:  Size  Location     Type
 11074 ;;		None               void
 11075 ;; Registers used:
 11076 ;;		wreg, status,2, status,0
 11077 ;; Tracked objects:
 11078 ;;		On entry : 0/0
 11079 ;;		On exit  : 0/0
 11080 ;;		Unchanged: 0/0
 11081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11082 ;;      Params:         0       0       0       0       0       0       0
 11083 ;;      Locals:         1       0       0       0       0       0       0
 11084 ;;      Temps:          1       0       0       0       0       0       0
 11085 ;;      Totals:         2       0       0       0       0       0       0
 11086 ;;Total ram usage:        2 bytes
 11087 ;; Hardware stack levels used:    1
 11088 ;; This function calls:
 11089 ;;		Nothing
 11090 ;; This function is called by:
 11091 ;;		_ADC_ISR
 11092 ;;		_Battery_Read
 11093 ;;		_Temp_Read
 11094 ;; This function uses a non-reentrant model
 11095 ;;
 11096                           
 11097                           	psect	text51
 11098  003710                     __ptext51:
 11099                           	opt stack 0
 11100  003710                     _ADC_StartConversion:
 11101                           	opt stack 22
 11102                           
 11103                           ;incstack = 0
 11104                           ;ADC_StartConversion@channel stored from wreg
 11105  003710  6E02               	movwf	ADC_StartConversion@channel,c
 11106                           
 11107                           ;adc.c: 39: ADCON0bits.CHS = channel;
 11108  003712  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 11109  003716  4601               	rlncf	??_ADC_StartConversion,f,c
 11110  003718  4601               	rlncf	??_ADC_StartConversion,f,c
 11111  00371A  50C2               	movf	4034,w,c	;volatile
 11112  00371C  1801               	xorwf	??_ADC_StartConversion,w,c
 11113  00371E  0B83               	andlw	-125
 11114  003720  1801               	xorwf	??_ADC_StartConversion,w,c
 11115  003722  6EC2               	movwf	4034,c	;volatile
 11116                           
 11117                           ;adc.c: 42: ADCON0bits.ADON = 1;
 11118  003724  80C2               	bsf	4034,0,c	;volatile
 11119                           
 11120                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
 11121  003726  82C2               	bsf	4034,1,c	;volatile
 11122  003728  0012               	return	
 11123  00372A                     __end_of_ADC_StartConversion:
 11124                           	opt stack 0
 11125                           pclatu	equ	0xFFB
 11126                           pclath	equ	0xFFA
 11127                           tblptru	equ	0xFF8
 11128                           tblptrh	equ	0xFF7
 11129                           tblptrl	equ	0xFF6
 11130                           tablat	equ	0xFF5
 11131                           prodh	equ	0xFF4
 11132                           prodl	equ	0xFF3
 11133                           intcon	equ	0xFF2
 11134                           intcon2	equ	0xFF1
 11135                           postinc0	equ	0xFEE
 11136                           fsr0h	equ	0xFEA
 11137                           fsr0l	equ	0xFE9
 11138                           wreg	equ	0xFE8
 11139                           postinc1	equ	0xFE6
 11140                           postdec1	equ	0xFE5
 11141                           fsr1h	equ	0xFE2
 11142                           fsr1l	equ	0xFE1
 11143                           indf2	equ	0xFDF
 11144                           postinc2	equ	0xFDE
 11145                           postdec2	equ	0xFDD
 11146                           fsr2h	equ	0xFDA
 11147                           fsr2l	equ	0xFD9
 11148                           status	equ	0xFD8
 11149                           
 11150 ;; *************** function _ADC_GetConversionResult *****************
 11151 ;; Defined at:
 11152 ;;		line 55 in file "mcc_generated_files/adc.c"
 11153 ;; Parameters:    Size  Location     Type
 11154 ;;		None
 11155 ;; Auto vars:     Size  Location     Type
 11156 ;;		None
 11157 ;; Return value:  Size  Location     Type
 11158 ;;                  2    0[COMRAM] unsigned int 
 11159 ;; Registers used:
 11160 ;;		wreg, status,2, status,0
 11161 ;; Tracked objects:
 11162 ;;		On entry : 0/0
 11163 ;;		On exit  : 0/0
 11164 ;;		Unchanged: 0/0
 11165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11166 ;;      Params:         2       0       0       0       0       0       0
 11167 ;;      Locals:         0       0       0       0       0       0       0
 11168 ;;      Temps:          2       0       0       0       0       0       0
 11169 ;;      Totals:         4       0       0       0       0       0       0
 11170 ;;Total ram usage:        4 bytes
 11171 ;; Hardware stack levels used:    1
 11172 ;; This function calls:
 11173 ;;		Nothing
 11174 ;; This function is called by:
 11175 ;;		_ADC_ISR
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           	psect	text52
 11180  003772                     __ptext52:
 11181                           	opt stack 0
 11182  003772                     _ADC_GetConversionResult:
 11183                           	opt stack 23
 11184                           
 11185                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
 11186                           
 11187                           ;incstack = 0
 11188  003772  50C4               	movf	4036,w,c	;volatile
 11189  003774  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 11190  003776  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 11191  003778  50C3               	movf	4035,w,c	;volatile
 11192  00377A  2403               	addwf	??_ADC_GetConversionResult,w,c
 11193  00377C  6E01               	movwf	?_ADC_GetConversionResult,c
 11194  00377E  0E00               	movlw	0
 11195  003780  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 11196  003782  6E02               	movwf	?_ADC_GetConversionResult+1,c
 11197  003784  0012               	return	
 11198  003786                     __end_of_ADC_GetConversionResult:
 11199                           	opt stack 0
 11200                           pclatu	equ	0xFFB
 11201                           pclath	equ	0xFFA
 11202                           tblptru	equ	0xFF8
 11203                           tblptrh	equ	0xFF7
 11204                           tblptrl	equ	0xFF6
 11205                           tablat	equ	0xFF5
 11206                           prodh	equ	0xFF4
 11207                           prodl	equ	0xFF3
 11208                           intcon	equ	0xFF2
 11209                           intcon2	equ	0xFF1
 11210                           postinc0	equ	0xFEE
 11211                           fsr0h	equ	0xFEA
 11212                           fsr0l	equ	0xFE9
 11213                           wreg	equ	0xFE8
 11214                           postinc1	equ	0xFE6
 11215                           postdec1	equ	0xFE5
 11216                           fsr1h	equ	0xFE2
 11217                           fsr1l	equ	0xFE1
 11218                           indf2	equ	0xFDF
 11219                           postinc2	equ	0xFDE
 11220                           postdec2	equ	0xFDD
 11221                           fsr2h	equ	0xFDA
 11222                           fsr2l	equ	0xFD9
 11223                           status	equ	0xFD8
 11224                           pclatu	equ	0xFFB
 11225                           pclath	equ	0xFFA
 11226                           tblptru	equ	0xFF8
 11227                           tblptrh	equ	0xFF7
 11228                           tblptrl	equ	0xFF6
 11229                           tablat	equ	0xFF5
 11230                           prodh	equ	0xFF4
 11231                           prodl	equ	0xFF3
 11232                           intcon	equ	0xFF2
 11233                           intcon2	equ	0xFF1
 11234                           postinc0	equ	0xFEE
 11235                           fsr0h	equ	0xFEA
 11236                           fsr0l	equ	0xFE9
 11237                           wreg	equ	0xFE8
 11238                           postinc1	equ	0xFE6
 11239                           postdec1	equ	0xFE5
 11240                           fsr1h	equ	0xFE2
 11241                           fsr1l	equ	0xFE1
 11242                           indf2	equ	0xFDF
 11243                           postinc2	equ	0xFDE
 11244                           postdec2	equ	0xFDD
 11245                           fsr2h	equ	0xFDA
 11246                           fsr2l	equ	0xFD9
 11247                           status	equ	0xFD8
 11248                           
 11249                           	psect	rparam
 11250  0000                     pclatu	equ	0xFFB
 11251                           pclath	equ	0xFFA
 11252                           tblptru	equ	0xFF8
 11253                           tblptrh	equ	0xFF7
 11254                           tblptrl	equ	0xFF6
 11255                           tablat	equ	0xFF5
 11256                           prodh	equ	0xFF4
 11257                           prodl	equ	0xFF3
 11258                           intcon	equ	0xFF2
 11259                           intcon2	equ	0xFF1
 11260                           postinc0	equ	0xFEE
 11261                           fsr0h	equ	0xFEA
 11262                           fsr0l	equ	0xFE9
 11263                           wreg	equ	0xFE8
 11264                           postinc1	equ	0xFE6
 11265                           postdec1	equ	0xFE5
 11266                           fsr1h	equ	0xFE2
 11267                           fsr1l	equ	0xFE1
 11268                           indf2	equ	0xFDF
 11269                           postinc2	equ	0xFDE
 11270                           postdec2	equ	0xFDD
 11271                           fsr2h	equ	0xFDA
 11272                           fsr2l	equ	0xFD9
 11273                           status	equ	0xFD8


Data Sizes:
    Strings     36
    Constant    145
    Data        0
    BSS         295
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     51      73
    BANK0           160     69     145
    BANK1           256     35     235
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[19]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S1026$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _printf->___ftge
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _Temp_Fault->___ftge
    _Temp_Convert->_Temp_Filter
    _log->_eval_poly
    _eval_poly->___ftmul
    ___ftdiv->___ftpack
    _Temp_Filter->___ftmul
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->_Battery_Filter
    ___awtoft->___wmul
    ___awdiv->___awmod
    _Battery_Filter->___ftmul
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _Temp_Read->_ADC_StartConversion
    _Battery_Read->_ADC_StartConversion
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Temp_Convert
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _Battery_Filter->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5  213016
                                             60 BANK0      9     4      5
                    _Battery_Convert
                      _Battery_Fault
                        _Battery_Get
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              54    47      7   71041
                                             40 BANK0     13     6      7
                                              0 BANK1     35    35      0
                        _Battery_Get (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   17490
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             23 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   17211
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1819
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     608
                                             22 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          16    10      6     827
                                             22 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2672
                                             30 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     848
                                             35 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     703
                                             22 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     602
                                             19 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                             22 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    7318
                                              0 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        11    11      0   83661
                                             49 BANK0     11    11      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   33392
                                             44 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     352
                                             22 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   18030
                                             49 COMRAM     2     2      0
                                             34 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5659
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3335
                                             30 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   17836
                                             49 COMRAM     2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    8288
                                              0 BANK0      7     7      0
                        _Battery_Get
                           _SetBypas
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypas                                             6     2      4     649
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    5961
                                             42 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    7349
                                              0 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1430
                                             42 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   29200
                                             34 BANK0      4     4      0
                     _Battery_Filter
                            ___awdiv
                           ___awtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2857
                                             42 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2601
                                             28 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   17836
                                             49 COMRAM     2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    5776
                                             36 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6597
                                             46 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5172
                                             22 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2493
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1215
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             3     3      0      44
                                              2 COMRAM     3     3      0
                       _Battery_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (8) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              4     4      0    1171
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     706
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Get
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _RunBypas
     _Battery_Get
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _SetBypas
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _log
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _printf
     _Battery_Get (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch (ARG)
       _EUSART1_Write
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     23      EB       6       91.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     45      91       4       90.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     33      49       1       76.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C5       9        0.0%
DATA                 0      0     1C5      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri May 01 01:03:22 2015

           _eusart1TxBufferRemaining 0049                         ___awdiv@sign 0022  
                ___wmul@multiplicand 0027                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                         ___ftadd@exp1 00CD  
                       ___ftadd@exp2 00CC                         ___ftadd@sign 00CB  
                                l122 3572                                  l510 29AC  
                                l503 299C                                  l531 29DC  
                                l524 29CC                                  l517 29BC  
                                l552 2A0C                                  l545 29FC  
                                l538 29EC                                  l642 0BF4  
                                l559 2A1C                                  l495 298C  
                                l954 283A                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                      _timer1ReloadVal 0047  
                                _log 240C                      __end_of_ADC_ISR 1408  
                       ___awmod@sign 001C                                  prod 000FF3  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                    ?_Battery_Filter 0001                         ___ftdiv@cntr 0028  
                      SetBypas@state 0019                         ___ftdiv@sign 002D  
                               l1023 1B84                                 l1027 1BBE  
                               l1029 1BE6                                 l1038 1CD0  
                               l1047 1CFA                                 l1072 296C  
                               l1065 28DA                                 l1058 2CF2  
                               l1146 32BE                                 l1066 2902  
                               l1156 339A                                 l1097 36A0  
                               l4310 1C7E                                 l5022 1F9A  
                               l5030 06E2                                 l4240 2F96  
                               l4232 2F60                                 l4304 1C52  
                               l4400 3594                                 l5112 0AAA  
                               l5032 06F0                                 l4306 1C66  
                               l3098 30C6                                 l4402 3596  
                               l5202 0E58                                 l5130 0B1C  
                               l5026 06CC                                 l5210 0F1C  
                               l4244 2FAC                                 l4236 2F6E  
                               l4324 1D24                                 l4316 1CB2  
                               l4308 1C72                                 l4412 301C  
                               l4500 2B42                                 l5204 0E6C  
                               l5108 0A42                                 l5052 07A6  
                               l5036 06F6                                 l4246 2FCA  
                               l4238 2F78                                 l4334 1D72  
                               l4318 1CC6                                 l4350 25E2  
                               l5142 0BC4                                 l5126 0AF6  
                               l5038 072C                                 l4248 2FD4  
                               l4344 25AE                                 l4424 3052  
                               l4440 3084                                 l5232 2C3A  
                               l5208 0F08                                 l5136 0BA8  
                               l5080 08FC                                 l4282 1BCC  
                               l4426 305A                                 l4418 303C  
                               l4602 2A20                                 l5226 2BFA  
                               l5154 0C1A                                 l5138 0BB6  
                               l4276 1B92                                 l4364 2630  
                               l4516 2398                                 l4444 3092  
                               l4436 307A                                 l4428 305E  
                               l4460 316E                                 l5172 0D62  
                               l5148 0BF8                                 l5092 09AA  
                               l5084 0942                                 l5076 08D6  
                               l5068 086E                                 l4374 267A  
                               l5158 0C6C                                 l5166 0D46  
                               l5174 0D6E                                 l4288 1BDC  
                               l4368 264E                                 l4544 2220  
                               l4720 2968                                 l4712 2944  
                               l4480 31B4                                 l4472 319C  
                               l4464 317C                                 l4456 3152  
                               l4640 155C                                 l5184 0DE8  
                               l5168 0D54                                 l5096 09D0  
                               l5264 2D74                                 l5248 2D3C  
                               l4298 1C1E                                 l4378 2698  
                               l4562 2448                                 l4466 3184  
                               l4626 1ACA                                 l4618 19E6  
                               l4650 164A                                 l4492 34C4  
                               l4580 2980                                 l4812 2CCC  
                               l4708 2934                                 l4468 3188  
                               l4476 31A6                                 l4388 3562  
                               l4590 29D0                                 l4582 2990  
                               l4910 3280                                 l4734 275C  
                               l4718 295C                                 l4646 161E  
                               l5198 0E34                                 l4840 321E  
                               l4592 29E0                                 l4584 29A0  
                               l4568 247A                                 l4728 2720  
                               l4680 28A0                                 l4664 1852  
                               l4594 29F0                                 l4586 29B0  
                               l4498 2ABA                                 l4906 3270  
                               l4930 3368                                 l4770 2812  
                               l4674 2876                                 l4658 1790  
                               l4836 31EE                                 l4596 2A00  
                               l4588 29C0                                 l4860 1FE0  
                               l4908 327C                                 l4940 33B2  
                               l4756 27CE                                 l4748 279E  
                               ?_log 00D8                                 l4846 324A  
                               l4598 2A10                                 l4918 32B0  
                               l4934 338C                                 l4926 3358  
                               l4942 33BE                                 l4766 2802  
                               l4960 2F4A                                 l4792 2C8E  
                               l4928 3364                                 l4776 282A  
                               l4786 2C68                                 l4890 20DE  
                               l4882 20A4                                 l4778 2836  
                               l4892 20E4                                 l4974 2E92  
                               l4878 2088                                 l4896 210A  
                               l4888 20C6                                 l4988 333E  
                               STR_1 06A5                                 STR_2 0692  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               u4001 1B30                                 _LATE 000F8D  
                               u4011 1B50                                 u2500 30EE  
                               u5000 200C                                 u4211 258E  
                               u2508 30F0                                 u5005 2002  
                               u4231 25C2                                 u4525 2424  
                               u4711 285C                                 u4800 2702  
                               u5280 07F6                                 u5265 0780  
                               u4731 2886                                 u4820 273E  
                               u4805 26F8                                 u5285 07EA  
                               u4911 2C78                                 u4825 2734  
                               u5485 0DC0                                 u4891 2C52  
                               u4981 1FB8                                 _TMR1 000FCE  
                               _WPUB 000F61                        _EUSART1_Write 3560  
                               _main 2D24                         ___ftpack@arg 0017  
                       ___ftpack@exp 001A                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                      __CFG_BORV$190 000000                                 log@x 00D8  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 00A8  
                      __CFG_IESO$OFF 000000                         ___ftmul@cntr 00B6  
                      printf@vd_1042 01D3                         ___ftmul@sign 00B7  
                  ADC_ISR@ADC_Result 0007                         ___fttol@exp1 00CD  
                              ??_log 0034                         ___fttol@lval 00C9  
                   ?_Battery_Convert 0001       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 3794                                ?_main 00E8  
                    __end_of___awdiv 309C                      __end_of___ftadd 1D98  
                    __end_of___awmod 31BE                      __end_of___ftdiv 2D24  
                    _TMR1_StartTimer 37AA                      __end_of___ftneg 36AE  
                    __end_of___lldiv 32D0                      __end_of___ftmul 26E4  
                    ___awdiv@divisor 001F                                _T1CON 000FCD  
                    __end_of___llmod 33AC                      __end_of___ftsub 3524  
                    __end_of___fttol 211C                                _LATA0 007C48  
                              _LATB0 007C50                                _LATB1 007C51  
                              _LATC0 007C58                                _LATA4 007C4C  
                              _LATC1 007C59                                _LATB3 007C53  
                              _LATA6 007C4E                                _LATD1 007C61  
                              _LATD2 007C62                                _LATC4 007C5C  
                              _LATD3 007C63                                _LATC5 007C5D  
                              _LATD5 007C65                       __CFG_DEBUG$OFF 000000  
                              i2l134 35F8                                i2l290 006E  
                              i2l282 004C                                i2l284 0058  
                              i2l286 0064                      ___awdiv@counter 0021  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96     __size_of_ADC_GetConversionResult 0014  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                       ___lltoft@exp 0027                 _EUSART1_Transmit_ISR 35CC  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     __end_of_TMR1_ISR 34A0  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 002E                      __end_of_dpowers 0629  
                              _frexp 309C                                _errno 0096  
                              _scale 1408                   __CFG_MCLRE$EXTMCLR 000000  
                      ___ftpack@sign 001B                                _putch 37A0  
                              main@x 00ED                       ?_EUSART1_Write 0001  
            __end_of_TMR1_Initialize 36F6                          _Battery_Adc 007E  
                              tablat 000FF5                          _Battery_Get 359A  
                              status 000FD8                       __CFG_HFOFST$ON 000000  
                    RunBypas@cellbyp 00AC                      RunBypas@batvolt 00AE  
                     __CFG_PBADEN$ON 000000                      __initialization 362C  
                        log@exponent 00DB           __end_of_EUSART1_Initialize 3560  
                       __end_of_main 2DE0                     __end_of_Set_4051 3688  
                          ??_ADC_ISR 0005          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 0034                        ___fttol@sign1 00C8  
                   __end_of_SetBypas 2A70                        __activetblptr 000002  
         ADC_StartConversion@channel 0002                 __size_of__tdiv_to_l_ 0132  
              ?_EUSART1_Transmit_ISR 0001                     __end_of_RunBypas 2C42  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               ?_frexp 0017  
                   ___llmod@dividend 0024                               ?_scale 00B8  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                   ___awdiv@dividend 001D                     __end_of___awtoft 34E8  
                             _ANSELA 000F38                               ?_putch 0001  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                   __end_of___ftpack 2FF8                               _T1GCON 000FCC  
                             _RC1REG 000FAE                               _RC1STA 000FAB  
                   __end_of___lltoft 3408                __size_of_Battery_Read 0018  
                             i2l2186 35F4                       __CFG_WDTEN$OFF 000000  
                             i2l3620 3484                               i2l3710 10D8  
                             i2l3704 10A2                               i2l3722 1144  
                             i2l3740 11F8                               i2l3716 110E  
                             i2l3732 118C                               i2l3660 3628  
                             i2l3652 3604                               i2l3734 11E0  
                             i2l3760 12CA                               i2l3752 1276  
                             i2l3744 1222                               i2l3728 117A  
                             i2l3680 0FCA                               i2l3736 11E4  
                             i2l3674 0F94                               i2l3780 139C  
                             i2l3772 1348                               i2l3764 12F4  
                             i2l3756 12A0                               i2l3748 124C  
                             i2l3692 1036                               i2l3668 0F5E  
                             i2l3686 1000                               i2l3776 1372  
                             i2l3768 131E                               i2l3784 13AE  
                             i2l3786 1402                               i2l3698 106C  
                             _RCREG1 000FAE                        ??_Temp_Filter 0032  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1REG 000FAD                               _TX1STA 000FAC  
                             _TXREG1 000FAD                           _Temp_Fault 32D0  
                     __CFG_XINST$OFF 000000                     __end_of__powers_ 0677  
                             ___ftge 31BE              __end_of_TMR1_StartTimer 37AE  
                             ___wmul 36AE                            ??___awdiv 0021  
                          ??___ftadd 00C8                       __CFG_STVREN$ON 000000  
                          ??___awmod 001B                            ??___ftdiv 0025  
                          ??___ftneg 001A                            ??___lldiv 001F  
                          ??___ftmul 002F                            ??___llmod 002C  
                          ??___ftsub 0032                            ??___fttol 00C3  
                             _fround 187E                               clear_0 3632  
                             clear_1 363E                               clear_2 364A  
                   ___awdiv@quotient 0023                   __size_of_Temp_Read 0018  
                    ___awmod@divisor 0019                      ___awmod@counter 001B  
                             _printf 06B8                ___ftmul@f3_as_product 00B3  
                       _Battery_Read 375A                         _Battery_Volt 0060  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                    ??_EUSART1_Write 0017                      _eusart1RxBuffer 0100  
      __size_of_INTERRUPT_Initialize 000C                      _eusart1TxBuffer 0034  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 36F6  
                   __end_oflog@coeff 0692                           __accesstop 0060  
            __end_of__initialization 3650                           ___ftadd@f1 00C2  
                         ___ftadd@f2 00C5                           ___ftge@ff1 002B  
                         ___ftge@ff2 002E                   ?_SYSTEM_Initialize 0001  
                       eval_poly@res 00D5                           ___ftdiv@f1 001F  
                         ___ftdiv@f2 0022                           ___ftdiv@f3 0029  
                        SetBypas@pin 0017                           ___ftneg@f1 0017  
                         ___awtoft@c 002B                           ___ftmul@f1 00AC  
                         ___ftmul@f2 00AF                           ___ftsub@f1 00CE  
                         ___ftsub@f2 00D1                  __end_of_Temp_Filter 2294  
                         ___fttol@f1 00BF         __size_of_ADC_StartConversion 001A  
                     __pcstackCOMRAM 0001                  ??_SYSTEM_Initialize 0017  
                          ?_TMR1_ISR 0001                           ___lltoft@c 001F  
                      __end_of_frexp 312E                        __end_of_scale 187E  
                      __end_of_putch 37AA                Battery_Get@channelnum 002B  
             ??_EUSART1_Transmit_ISR 0001              _ADC_GetConversionResult 3772  
                         __div_to_l_ 26E4                     ??_Battery_Filter 0032  
        __end_of_EUSART1_Receive_ISR 362C                        ?_Temp_Convert 0001  
                    __div_to_l_@exp1 0026                      __div_to_l_@cntr 0025  
                            ??_frexp 001C                              ??_scale 0032  
          __end_of_SYSTEM_Initialize 3710                      __div_to_l_@quot 0021  
                            ??_putch 0018                        _eusart1RxHead 0043  
                      _eusart1TxHead 0045                        _eusart1RxTail 0044  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                      _eusart1TxTail 0046                   __size_of_eval_poly 00EA  
                    __CFG_PLLCFG$OFF 000000                    __end_of_Temp_Read 375A  
                          ?_Set_4051 0001                           __pnvCOMRAM 0047  
              Temp_Convert@steinhart 00E5                          ?_Temp_Fault 0001  
                      __div_to_l_@f1 0017                        __div_to_l_@f2 001A  
                          ?_SetBypas 0017                   __CFG_CCP2MX$PORTC1 000000  
                        Temp_Fault@i 00AD                              ?___ftge 002B  
                          ?_RunBypas 0001                              ?___wmul 0025  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 0003  
                 __CFG_CCP3MX$PORTB5 000000                              _ADC_ISR 0F40  
                            ?_fround 00B8                            ?___awtoft 002B  
                          ?___ftpack 0017                              ?_printf 00D4  
                          ?___lltoft 001F              __size_of_ADC_Initialize 0018  
                      Temp_Convert@x 00E3               __size_of_Battery_Fault 00BA  
                    Temp_Fault@fault 00AC                       Battery_Fault@i 00AD  
                            _OSCCON2 000FD2                       ??_Temp_Convert 00DD  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                         ?_Battery_Get 002B  
                         ??_Set_4051 0003                          _Temp_Filter 211C  
                        _Temp_Aquire 0040                           ??_SetBypas 001B  
                    __CFG_PWRTEN$OFF 000000                    __end_of__npowers_ 0650  
                            __Hparam 0000                           _scale$1686 00BB  
                            __Lparam 0000                           ??_RunBypas 0034  
                    __size_of___ftge 0090                              ___awdiv 2FF8  
                            ___ftadd 1B18                              ___awmod 312E  
                            ___ftdiv 2C42                              ___ftneg 3688  
                            ___lldiv 324E                      __size_of___wmul 0026  
                            ___ftmul 257A                              ___llmod 3346  
                            ___ftsub 34E8                              ___fttol 1FA0  
                       __psmallconst 0600            ??_ADC_GetConversionResult 0003  
                            __pcinit 362C                           ??___awtoft 002E  
                         ??___ftpack 001C                    __end_of_eval_poly 2B5A  
                    __size_of_fround 029A                              __ramtop 0600  
                         ??___lltoft 0023                              __ptext0 2D24  
                            __ptext1 06B8                              __ptext2 1408  
                            __ptext3 37A0                              __ptext4 3560  
                            __ptext5 187E                              __ptext6 312E  
                            __ptext7 284C                              __ptext8 26E4  
                            __ptext9 33AC                      __size_of_printf 0888  
                          _T1CONbits 000FCD                          ?__div_to_l_ 0017  
                            _dpowers 0601                _OSCILLATOR_Initialize 3786  
                       __size_of_log 016E                     ___awmod@dividend 0017  
                __size_of_Temp_Fault 0076                   _EUSART1_Initialize 3524  
           ??_PIN_MANAGER_Initialize 0017             __size_of_Battery_Convert 00B6  
         __size_of_SYSTEM_Initialize 001A                 end_of_initialization 3650  
                ?_EUSART1_Initialize 0001                        __Lmediumconst 0000  
                      _Battery_Fault 2DE0                      ___lldiv@divisor 001B  
                    ___lldiv@counter 0023                              printf@c 01EA  
                            printf@f 00D4                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                   Battery_Convert@x 00D0                       __tdiv_to_l_@f1 0017  
                     __tdiv_to_l_@f2 001A                 ??_EUSART1_Initialize 0017  
                      ??__tdiv_to_l_ 001D                  _ADC_StartConversion 3710  
                EUSART1_Write@txData 0017                          _Volt_Aquire 0041  
                     ?_Battery_Fault 0001                          printf@integ 01DB  
                        ___ftdiv@exp 002C                  __size_of__div_to_l_ 0168  
                        ___ftmul@exp 00B2                 ?_ADC_StartConversion 0001  
               __end_of_Temp_Convert 1FA0         __end_of_INTERRUPT_Initialize 37A0  
                     __end_of___ftge 324E                       __end_of___wmul 36D4  
                  __size_of_TMR1_ISR 004A                       _ADC_Initialize 372A  
             ?_OSCILLATOR_Initialize 0001                       __end_of_fround 1B18  
                     __end_of_printf 0F40                  start_initialization 362C  
                         eval_poly@d 00D1                           eval_poly@n 00D3  
                         eval_poly@x 00CE      __size_of_PIN_MANAGER_Initialize 004E  
                __end_of__tdiv_to_l_ 297E                          __end_of_log 257A  
                        putch@txData 0018                __end_of_EUSART1_Write 359A  
                         frexp@value 0017                    ??_Battery_Convert 00CE  
                    ___llmod@divisor 0028                 __size_of_Battery_Get 0032  
                    ___llmod@counter 002C                         ??_Temp_Fault 0034  
                  __size_of_Set_4051 002E                            _Temp_DegF 016E  
                   _PrevBattery_Volt 0132                            _Temp_Done 0092  
                          _Temp_Read 3742                ??_ADC_StartConversion 0001  
           __size_of_TMR1_Initialize 0022                    __size_of_SetBypas 00F2  
                           ??___ftge 0031                             ??___wmul 0029  
             __end_of_ADC_Initialize 3742                            RunBypas@i 00B1  
                           ?_ADC_ISR 0001                             ??_fround 0032  
                  __size_of_RunBypas 00E8                             ??_printf 00DB  
                     _eusart1RxCount 0042                           fround@prec 00C1  
                  __size_of___awtoft 0048                    __size_of___ftpack 00A8  
                          _Volt_Done 0094                TMR1_ISR@CountCallBack 003C  
                  __size_of___lltoft 005C                          __pbssCOMRAM 0034  
      __size_of_EUSART1_Transmit_ISR 0030                        __pcstackBANK0 00AC  
                      __pcstackBANK1 01C8                   __end_of_Temp_Fault 3346  
                __end_of__stringdata 06B6                        _PrevTemp_DegF 0150  
                    ??_Battery_Fault 0034         __size_of_EUSART1_Receive_ISR 0030  
                       ?_Temp_Filter 0001                           ?_Temp_Read 0001  
             _PIN_MANAGER_Initialize 3408                            __pintcode 0008  
                  _Temp_Convert$1682 00DF                    _Temp_Convert$1683 00E1  
                           ?___awdiv 001D                             ?___ftadd 00C2  
                           ?___awmod 0017                             ?___ftdiv 001F  
                           ?___ftneg 0017                             ?___lldiv 0017  
                           ?___ftmul 00AC                             ?___llmod 0024  
                           ?___ftsub 00CE                            __npowers_ 0629  
                           ?___fttol 00BF                         Temp_Filter@x 0032  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 0009  
                        __tdiv_to_l_ 284C                         ??__div_to_l_ 001D  
                           _BAUD1CON 000FB8                          __smallconst 0600  
           __size_of_TMR1_StartTimer 0004                            _eval_poly 2A70  
                     __size_of_frexp 0092                       __size_of_scale 0476  
                     __size_of_putch 000A                 _INTERRUPT_Initialize 3794  
            __size_of_Battery_Filter 0178                       ___wmul@product 0029  
              __size_of_Temp_Convert 0208                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 00A0  
                           _PIR1bits 000F9E                   __end_of__div_to_l_ 284C  
                    Battery_Filter@x 0032                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 3456  
                  ??_TMR1_Initialize 0017                     __size_of_ADC_ISR 04C8  
                         _ADCON0bits 000FC2                          __stringdata 0692  
                  ___wmul@multiplier 0025                            main@x_963 00EF  
                         printf@_val 01E0                           printf@flag 01D9  
                         printf@fval 01E7                           printf@prec 01DE  
                      ?_Battery_Read 0001                           ?_eval_poly 00CE  
                       _Temp_Convert 1D98                          _INTCON2bits 000FF1  
              ?_INTERRUPT_Initialize 0001                             _Set_4051 365A  
                          frexp@eptr 001A                             _SetBypas 297E  
                           __Hrparam 0000                          ??_Temp_Read 0003  
                           _Temp_Adc 0098                             __Lrparam 0000  
           ?_ADC_GetConversionResult 0001                   __CFG_BOREN$SBORDIS 000000  
                           _RunBypas 2B5A                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 0017                     __size_of___awdiv 00A4  
                   __size_of___ftadd 0280                     __size_of___awmod 0090  
                   __size_of___ftdiv 00E2                     __size_of___ftneg 0026  
                   __size_of___lldiv 0082                     __size_of___ftmul 016A  
                   __size_of___llmod 0066                     __size_of___ftsub 003C  
                   __size_of___fttol 017C          __size_of_EUSART1_Initialize 003C  
                           ___awtoft 34A0                             ___ftpack 2F50  
                        _fround$1684 00BE                          _fround$1685 00BB  
                           ___lltoft 33AC                       ??_Battery_Read 0003  
                    _Battery_Convert 2E9A                   Battery_Fault@fault 00AC  
                           __ptext10 3346                             __ptext11 324E  
                           __ptext20 2C42                             __ptext12 1FA0  
                           __ptext21 211C                             __ptext13 3688  
                         _T1GCONbits 000FCC                             __ptext30 2B5A  
                           __ptext22 36F6                             __ptext14 32D0  
                           __ptext31 297E                             __ptext23 36D4  
                           __ptext15 1D98                             __ptext40 257A  
                           __ptext32 359A                             __ptext24 37AA  
                           __ptext16 240C                             __ptext41 1B18  
                           __ptext33 2DE0                             __ptext25 3408  
                           __ptext17 309C                             __ptext50 365A  
                           __ptext42 2F50                             __ptext34 31BE  
                           __ptext26 3786                             __ptext18 2A70  
                           __ptext51 3710                             __ptext35 2E9A  
                           __ptext27 3794                             __ptext19 34E8  
                           __ptext52 3772                             __ptext44 3456  
                           __ptext36 34A0                             __ptext28 3524  
                           __ptext45 3742                             __ptext37 2FF8  
                           __ptext29 372A                             __ptext46 375A  
                           __ptext38 2294                             __ptext47 35CC  
                           __ptext39 36AE                             __ptext48 35FC  
                           __ptext49 0F40                             __powers_ 0650  
                  ??_TMR1_StartTimer 0017                        __size_of_main 00BC  
                       _TmpTemp_DegF 01AA                 __size_of_Temp_Filter 0178  
                         _RC1STAbits 000FAB   __end_of_INTERRUPT_InterruptManager 00A8  
         _INTERRUPT_InterruptManager 0008                             main@argc 00E8  
                          printf@exp 01E5                             main@argv 00EA  
                _EUSART1_Receive_ISR 35FC                             log@coeff 0677  
                         _INTCONbits 000FF2                          ??_eval_poly 0032  
             ??_INTERRUPT_Initialize 0017                             scale@scl 00BE  
                      ??_Battery_Get 002E                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0025                     __tdiv_to_l_@cntr 0024  
                     _Battery_Filter 2294                     __tdiv_to_l_@quot 0020  
               ?_EUSART1_Receive_ISR 0001          __end_of_ADC_StartConversion 372A  
                   _TempBattery_Volt 018C                     ___lldiv@dividend 0017  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 3786  
       __end_of_EUSART1_Transmit_ISR 35FC                     ??_ADC_Initialize 0017  
                           printf@ap 01D7                             printf@vd 01CF  
            __end_of_Battery_Convert 2F50               __size_of_EUSART1_Write 003A  
                       ?__tdiv_to_l_ 0017                          _printf$1040 01CB  
                        _printf$1687 01C8                     ___lldiv@quotient 001F  
                  __CFG_T3CMX$PORTC0 000000               __end_of_Battery_Filter 240C  
              ??_EUSART1_Receive_ISR 0001       __end_of_PIN_MANAGER_Initialize 3456  
              __end_of_Battery_Fault 2E9A                    __CFG_FOSC$INTIO67 000000  
               __end_of_Battery_Read 3772                      _TMR1_Initialize 36D4  
                   _ADC_Buffer_Point 003E                  __end_of_Battery_Get 35CC  
                    Set_4051@Channel 0001  
