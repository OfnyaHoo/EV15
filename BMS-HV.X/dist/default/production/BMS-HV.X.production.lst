

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun May 31 21:54:24 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    99  0000                     
   100                           	psect	idataCOMRAM
   101  004ED4                     __pidataCOMRAM:
   102                           	opt stack 0
   103                           
   104                           ;initializer for _Transmit_stall
   105  004ED4  01                 	db	1
   106                           
   107                           	psect	smallconst
   108  000600                     __psmallconst:
   109                           	opt stack 0
   110  000600  00                 	db	0
   111  000601                     _dpowers:
   112                           	opt stack 0
   113  000601  0001               	dw	1
   114  000603  0000               	dw	0
   115  000605  000A               	dw	10
   116  000607  0000               	dw	0
   117  000609  0064               	dw	100
   118  00060B  0000               	dw	0
   119  00060D  03E8               	dw	1000
   120  00060F  0000               	dw	0
   121  000611  2710               	dw	10000
   122  000613  0000               	dw	0
   123  000615  86A0               	dw	34464
   124  000617  0001               	dw	1
   125  000619  4240               	dw	16960
   126  00061B  000F               	dw	15
   127  00061D  9680               	dw	38528
   128  00061F  0098               	dw	152
   129  000621  E100               	dw	57600
   130  000623  05F5               	dw	1525
   131  000625  CA00               	dw	51712
   132  000627  3B9A               	dw	15258
   133  000629                     __end_of_dpowers:
   134                           	opt stack 0
   135  000629                     __npowers_:
   136                           	opt stack 0
   137  000629  00                 	db	0
   138  00062A  80                 	db	128
   139  00062B  3F                 	db	63
   140  00062C  CD                 	db	205
   141  00062D  CC                 	db	204
   142  00062E  3D                 	db	61
   143  00062F  D7                 	db	215
   144  000630  23                 	db	35
   145  000631  3C                 	db	60
   146  000632  12                 	db	18
   147  000633  83                 	db	131
   148  000634  3A                 	db	58
   149  000635  B7                 	db	183
   150  000636  D1                 	db	209
   151  000637  38                 	db	56
   152  000638  C6                 	db	198
   153  000639  27                 	db	39
   154  00063A  37                 	db	55
   155  00063B  38                 	db	56
   156  00063C  86                 	db	134
   157  00063D  35                 	db	53
   158  00063E  C0                 	db	192
   159  00063F  D6                 	db	214
   160  000640  33                 	db	51
   161  000641  CC                 	db	204
   162  000642  2B                 	db	43
   163  000643  32                 	db	50
   164  000644  70                 	db	112
   165  000645  89                 	db	137
   166  000646  30                 	db	48
   167  000647  E7                 	db	231
   168  000648  DB                 	db	219
   169  000649  2E                 	db	46
   170  00064A  E5                 	db	229
   171  00064B  3C                 	db	60
   172  00064C  1E                 	db	30
   173  00064D  42                 	db	66
   174  00064E  A2                 	db	162
   175  00064F  0D                 	db	13
   176  000650                     __end_of__npowers_:
   177                           	opt stack 0
   178  000650                     __powers_:
   179                           	opt stack 0
   180  000650  00                 	db	0
   181  000651  80                 	db	128
   182  000652  3F                 	db	63
   183  000653  00                 	db	0
   184  000654  20                 	db	32
   185  000655  41                 	db	65
   186  000656  00                 	db	0
   187  000657  C8                 	db	200
   188  000658  42                 	db	66
   189  000659  00                 	db	0
   190  00065A  7A                 	db	122
   191  00065B  44                 	db	68
   192  00065C  40                 	db	64
   193  00065D  1C                 	db	28
   194  00065E  46                 	db	70
   195  00065F  50                 	db	80
   196  000660  C3                 	db	195
   197  000661  47                 	db	71
   198  000662  24                 	db	36
   199  000663  74                 	db	116
   200  000664  49                 	db	73
   201  000665  97                 	db	151
   202  000666  18                 	db	24
   203  000667  4B                 	db	75
   204  000668  BC                 	db	188
   205  000669  BE                 	db	190
   206  00066A  4C                 	db	76
   207  00066B  6B                 	db	107
   208  00066C  6E                 	db	110
   209  00066D  4E                 	db	78
   210  00066E  03                 	db	3
   211  00066F  15                 	db	21
   212  000670  50                 	db	80
   213  000671  79                 	db	121
   214  000672  AD                 	db	173
   215  000673  60                 	db	96
   216  000674  F3                 	db	243
   217  000675  49                 	db	73
   218  000676  71                 	db	113
   219  000677                     __end_of__powers_:
   220                           	opt stack 0
   221  000677                     log@coeff:
   222                           	opt stack 0
   223  000677  00                 	db	0
   224  000678  00                 	db	0
   225  000679  00                 	db	0
   226  00067A  00                 	db	0
   227  00067B  80                 	db	128
   228  00067C  3F                 	db	63
   229  00067D  F0                 	db	240
   230  00067E  FF                 	db	255
   231  00067F  BE                 	db	190
   232  000680  E2                 	db	226
   233  000681  A9                 	db	169
   234  000682  3E                 	db	62
   235  000683  83                 	db	131
   236  000684  76                 	db	118
   237  000685  BE                 	db	190
   238  000686  AE                 	db	174
   239  000687  2B                 	db	43
   240  000688  3E                 	db	62
   241  000689  3C                 	db	60
   242  00068A  C3                 	db	195
   243  00068B  BD                 	db	189
   244  00068C  D2                 	db	210
   245  00068D  13                 	db	19
   246  00068E  3D                 	db	61
   247  00068F  78                 	db	120
   248  000690  D3                 	db	211
   249  000691  BB                 	db	187
   250  000692                     __end_oflog@coeff:
   251                           	opt stack 0
   252  0000                     _ANSELA	set	3896
   253  0000                     _ANSELB	set	3897
   254  0000                     _ANSELC	set	3898
   255  0000                     _ANSELD	set	3899
   256  0000                     _ANSELE	set	3900
   257  0000                     _TMR1	set	4046
   258  0000                     _ADCON0	set	4034
   259  0000                     _ADCON0bits	set	4034
   260  0000                     _ADCON1	set	4033
   261  0000                     _ADCON2	set	4032
   262  0000                     _ADRESH	set	4036
   263  0000                     _ADRESL	set	4035
   264  0000                     _BAUD1CON	set	4024
   265  0000                     _INTCON2bits	set	4081
   266  0000                     _INTCONbits	set	4082
   267  0000                     _IPR1bits	set	3999
   268  0000                     _LATA	set	3977
   269  0000                     _LATB	set	3978
   270  0000                     _LATC	set	3979
   271  0000                     _LATD	set	3980
   272  0000                     _LATE	set	3981
   273  0000                     _OSCCON	set	4051
   274  0000                     _OSCCON2	set	4050
   275  0000                     _OSCTUNE	set	3995
   276  0000                     _PIE1bits	set	3997
   277  0000                     _PIR1bits	set	3998
   278  0000                     _RC1STA	set	4011
   279  0000                     _RC1STAbits	set	4011
   280  0000                     _RCONbits	set	4048
   281  0000                     _RCREG1	set	4014
   282  0000                     _SPBRG1	set	4015
   283  0000                     _SPBRGH1	set	4016
   284  0000                     _T1CON	set	4045
   285  0000                     _T1CONbits	set	4045
   286  0000                     _T1GCON	set	4044
   287  0000                     _T1GCONbits	set	4044
   288  0000                     _TMR1H	set	4047
   289  0000                     _TMR1L	set	4046
   290  0000                     _TRISA	set	3986
   291  0000                     _TRISB	set	3987
   292  0000                     _TRISC	set	3988
   293  0000                     _TRISD	set	3989
   294  0000                     _TRISE	set	3990
   295  0000                     _TX1STA	set	4012
   296  0000                     _TXREG1	set	4013
   297  0000                     _WPUB	set	3937
   298  0000                     _LATA0	set	31816
   299  0000                     _LATA4	set	31820
   300  0000                     _LATA6	set	31822
   301  0000                     _LATB0	set	31824
   302  0000                     _LATB1	set	31825
   303  0000                     _LATB3	set	31827
   304  0000                     _LATC0	set	31832
   305  0000                     _LATC1	set	31833
   306  0000                     _LATC4	set	31836
   307  0000                     _LATC5	set	31837
   308  0000                     _LATD1	set	31841
   309  0000                     _LATD2	set	31842
   310  0000                     _LATD3	set	31843
   311  0000                     _LATD5	set	31845
   312  000692                     STR_2:
   313  000692  42                 	db	66	;'B'
   314  000693  61                 	db	97	;'a'
   315  000694  74                 	db	116	;'t'
   316  000695  74                 	db	116	;'t'
   317  000696  65                 	db	101	;'e'
   318  000697  72                 	db	114	;'r'
   319  000698  79                 	db	121	;'y'
   320  000699  20                 	db	32
   321  00069A  25                 	db	37
   322  00069B  64                 	db	100	;'d'
   323  00069C  20                 	db	32
   324  00069D  3D                 	db	61	;'='
   325  00069E  20                 	db	32
   326  00069F  25                 	db	37
   327  0006A0  30                 	db	48	;'0'
   328  0006A1  2E                 	db	46
   329  0006A2  30                 	db	48	;'0'
   330  0006A3  32                 	db	50	;'2'
   331  0006A4  66                 	db	102	;'f'
   332  0006A5  20                 	db	32
   333  0006A6  0D                 	db	13
   334  0006A7  0A                 	db	10
   335  0006A8  00                 	db	0
   336  0006A9                     STR_1:
   337  0006A9  48                 	db	72	;'H'
   338  0006AA  69                 	db	105	;'i'
   339  0006AB  20                 	db	32
   340  0006AC  52                 	db	82	;'R'
   341  0006AD  69                 	db	105	;'i'
   342  0006AE  63                 	db	99	;'c'
   343  0006AF  6B                 	db	107	;'k'
   344  0006B0  00                 	db	0
   345                           
   346                           ; #config settings
   347  0006B1  00                 	db	0	; dummy byte at the end
   348  0000                     
   349                           	psect	cinit
   350  00481A                     __pcinit:
   351                           	opt stack 0
   352  00481A                     start_initialization:
   353                           	opt stack 0
   354  00481A                     __initialization:
   355                           	opt stack 0
   356                           
   357                           ; Clear objects allocated to BANK5 (206 bytes)
   358  00481A  EE05  F000         	lfsr	0,__pbssBANK5
   359  00481E  0ECE               	movlw	206
   360  004820                     clear_0:
   361  004820  6AEE               	clrf	postinc0,c
   362  004822  06E8               	decf	wreg,f,c
   363  004824  E1FD               	bnz	clear_0
   364                           
   365                           ; Clear objects allocated to BANK4 (206 bytes)
   366  004826  EE04  F000         	lfsr	0,__pbssBANK4
   367  00482A  0ECE               	movlw	206
   368  00482C                     clear_1:
   369  00482C  6AEE               	clrf	postinc0,c
   370  00482E  06E8               	decf	wreg,f,c
   371  004830  E1FD               	bnz	clear_1
   372                           
   373                           ; Clear objects allocated to BANK3 (200 bytes)
   374  004832  EE03  F000         	lfsr	0,__pbssBANK3
   375  004836  0EC8               	movlw	200
   376  004838                     clear_2:
   377  004838  6AEE               	clrf	postinc0,c
   378  00483A  06E8               	decf	wreg,f,c
   379  00483C  E1FD               	bnz	clear_2
   380                           
   381                           ; Clear objects allocated to BANK2 (206 bytes)
   382  00483E  EE02  F000         	lfsr	0,__pbssBANK2
   383  004842  0ECE               	movlw	206
   384  004844                     clear_3:
   385  004844  6AEE               	clrf	postinc0,c
   386  004846  06E8               	decf	wreg,f,c
   387  004848  E1FD               	bnz	clear_3
   388                           
   389                           ; Clear objects allocated to BANK1 (237 bytes)
   390  00484A  EE01  F000         	lfsr	0,__pbssBANK1
   391  00484E  0EED               	movlw	237
   392  004850                     clear_4:
   393  004850  6AEE               	clrf	postinc0,c
   394  004852  06E8               	decf	wreg,f,c
   395  004854  E1FD               	bnz	clear_4
   396                           
   397                           ; Clear objects allocated to BANK0 (78 bytes)
   398  004856  EE00  F0B0         	lfsr	0,__pbssBANK0
   399  00485A  0E4E               	movlw	78
   400  00485C                     clear_5:
   401  00485C  6AEE               	clrf	postinc0,c
   402  00485E  06E8               	decf	wreg,f,c
   403  004860  E1FD               	bnz	clear_5
   404                           
   405                           ; Clear objects allocated to COMRAM (26 bytes)
   406  004862  EE00  F02B         	lfsr	0,__pbssCOMRAM
   407  004866  0E1A               	movlw	26
   408  004868                     clear_6:
   409  004868  6AEE               	clrf	postinc0,c
   410  00486A  06E8               	decf	wreg,f,c
   411  00486C  E1FD               	bnz	clear_6
   412                           
   413                           ; Initialize objects allocated to COMRAM (1 bytes)
   414                           ; load TBLPTR registers with __pidataCOMRAM
   415  00486E  0ED4               	movlw	low __pidataCOMRAM
   416  004870  6EF6               	movwf	tblptrl,c
   417  004872  0E4E               	movlw	high __pidataCOMRAM
   418  004874  6EF7               	movwf	tblptrh,c
   419  004876  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   420  004878  6EF8               	movwf	tblptru,c
   421  00487A  0009               	tblrd		*+	;fetch initializer
   422  00487C  CFF5 F045          	movff	tablat,__pdataCOMRAM
   423  004880                     end_of_initialization:
   424                           	opt stack 0
   425  004880                     __end_of__initialization:
   426                           	opt stack 0
   427  004880  0E00               	movlw	low (__Lmediumconst shr (0+16))
   428  004882  6EF8               	movwf	tblptru,c
   429  004884  0100               	movlb	0
   430  004886  EF75  F01F         	goto	_main	;jump to C main() function
   431                           tblptru	equ	0xFF8
   432                           tblptrh	equ	0xFF7
   433                           tblptrl	equ	0xFF6
   434                           tablat	equ	0xFF5
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           
   438                           	psect	bssCOMRAM
   439  00002B                     __pbssCOMRAM:
   440                           	opt stack 0
   441  00002B                     _ADC_Buffer_Point:
   442                           	opt stack 0
   443  00002B                     	ds	2
   444  00002D                     _CountCallBack:
   445                           	opt stack 0
   446  00002D                     	ds	2
   447  00002F                     _sendStructAddress:
   448                           	opt stack 0
   449  00002F                     	ds	2
   450  000031                     _serial_available:
   451                           	opt stack 0
   452  000031                     	ds	2
   453  000033                     _serial_read:
   454                           	opt stack 0
   455  000033                     	ds	2
   456  000035                     _serial_write:
   457                           	opt stack 0
   458  000035                     	ds	2
   459  000037                     _timer1ReloadVal:
   460                           	opt stack 0
   461  000037                     	ds	2
   462  000039                     _AKNAKsend:
   463                           	opt stack 0
   464  000039                     	ds	1
   465  00003A                     _Temp_Aquire:
   466                           	opt stack 0
   467  00003A                     	ds	1
   468  00003B                     _Volt_Aquire:
   469                           	opt stack 0
   470  00003B                     	ds	1
   471  00003C                     _calc_CS:
   472                           	opt stack 0
   473  00003C                     	ds	1
   474  00003D                     _maxDataAddress:
   475                           	opt stack 0
   476  00003D                     	ds	1
   477  00003E                     _moduleAddress:
   478                           	opt stack 0
   479  00003E                     	ds	1
   480  00003F                     _returnAddress:
   481                           	opt stack 0
   482  00003F                     	ds	1
   483  000040                     _rx_address:
   484                           	opt stack 0
   485  000040                     	ds	1
   486  000041                     _rx_array_inx:
   487                           	opt stack 0
   488  000041                     	ds	1
   489  000042                     _rx_len:
   490                           	opt stack 0
   491  000042                     	ds	1
   492  000043                     _group:
   493                           	opt stack 0
   494  000043                     	ds	2
   495                           tblptru	equ	0xFF8
   496                           tblptrh	equ	0xFF7
   497                           tblptrl	equ	0xFF6
   498                           tablat	equ	0xFF5
   499                           postinc0	equ	0xFEE
   500                           wreg	equ	0xFE8
   501                           
   502                           	psect	dataCOMRAM
   503  000045                     __pdataCOMRAM:
   504                           	opt stack 0
   505  000045                     _Transmit_stall:
   506                           	opt stack 0
   507  000045                     	ds	1
   508                           tblptru	equ	0xFF8
   509                           tblptrh	equ	0xFF7
   510                           tblptrl	equ	0xFF6
   511                           tablat	equ	0xFF5
   512                           postinc0	equ	0xFEE
   513                           wreg	equ	0xFE8
   514                           
   515                           	psect	bssBANK0
   516  0000B0                     __pbssBANK0:
   517                           	opt stack 0
   518  0000B0                     _Battery_Adc:
   519                           	opt stack 0
   520  0000B0                     	ds	40
   521  0000D8                     _Temp_Done:
   522                           	opt stack 0
   523  0000D8                     	ds	2
   524  0000DA                     _Volt_Done:
   525                           	opt stack 0
   526  0000DA                     	ds	2
   527  0000DC                     _addressErrorCounter:
   528                           	opt stack 0
   529  0000DC                     	ds	2
   530  0000DE                     _alignErrorCounter:
   531                           	opt stack 0
   532  0000DE                     	ds	2
   533  0000E0                     _crcErrorCounter:
   534                           	opt stack 0
   535  0000E0                     	ds	2
   536  0000E2                     _dataAdressErrorCounter:
   537                           	opt stack 0
   538  0000E2                     	ds	2
   539  0000E4                     _errno:
   540                           	opt stack 0
   541  0000E4                     	ds	2
   542  0000E6                     _receiveArrayAddress:
   543                           	opt stack 0
   544  0000E6                     	ds	2
   545  0000E8                     _serial_peek:
   546                           	opt stack 0
   547  0000E8                     	ds	2
   548  0000EA                     _Temp_Adc:
   549                           	opt stack 0
   550  0000EA                     	ds	20
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           postinc0	equ	0xFEE
   556                           wreg	equ	0xFE8
   557                           
   558                           	psect	bssBANK1
   559  000100                     __pbssBANK1:
   560                           	opt stack 0
   561  000100                     _Battery_Volt:
   562                           	opt stack 0
   563  000100                     	ds	30
   564  00011E                     _PrevBattery_Volt:
   565                           	opt stack 0
   566  00011E                     	ds	30
   567  00013C                     _PrevTemp_DegF:
   568                           	opt stack 0
   569  00013C                     	ds	30
   570  00015A                     _Temp_DegF:
   571                           	opt stack 0
   572  00015A                     	ds	30
   573  000178                     _receiveArray:
   574                           	opt stack 0
   575  000178                     	ds	40
   576  0001A0                     _TempBattery_Volt:
   577                           	opt stack 0
   578  0001A0                     	ds	30
   579  0001BE                     _TmpTemp_DegF:
   580                           	opt stack 0
   581  0001BE                     	ds	30
   582  0001DC                     _crc_buffer:
   583                           	opt stack 0
   584  0001DC                     	ds	17
   585                           tblptru	equ	0xFF8
   586                           tblptrh	equ	0xFF7
   587                           tblptrl	equ	0xFF6
   588                           tablat	equ	0xFF5
   589                           postinc0	equ	0xFEE
   590                           wreg	equ	0xFE8
   591                           
   592                           	psect	bssBANK2
   593  000200                     __pbssBANK2:
   594                           	opt stack 0
   595  000200                     _ring_buffer:
   596                           	opt stack 0
   597  000200                     	ds	206
   598                           tblptru	equ	0xFF8
   599                           tblptrh	equ	0xFF7
   600                           tblptrl	equ	0xFF6
   601                           tablat	equ	0xFF5
   602                           postinc0	equ	0xFEE
   603                           wreg	equ	0xFE8
   604                           
   605                           	psect	bssBANK3
   606  000300                     __pbssBANK3:
   607                           	opt stack 0
   608  000300                     _rx_buffer:
   609                           	opt stack 0
   610  000300                     	ds	200
   611                           tblptru	equ	0xFF8
   612                           tblptrh	equ	0xFF7
   613                           tblptrl	equ	0xFF6
   614                           tablat	equ	0xFF5
   615                           postinc0	equ	0xFEE
   616                           wreg	equ	0xFE8
   617                           
   618                           	psect	bssBANK4
   619  000400                     __pbssBANK4:
   620                           	opt stack 0
   621  000400                     _input_buffer:
   622                           	opt stack 0
   623  000400                     	ds	206
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           
   631                           	psect	bssBANK5
   632  000500                     __pbssBANK5:
   633                           	opt stack 0
   634  000500                     _output_buffer:
   635                           	opt stack 0
   636  000500                     	ds	206
   637                           tblptru	equ	0xFF8
   638                           tblptrh	equ	0xFF7
   639                           tblptrl	equ	0xFF6
   640                           tablat	equ	0xFF5
   641                           postinc0	equ	0xFEE
   642                           wreg	equ	0xFE8
   643                           
   644                           	psect	cstackBANK2
   645  0002CE                     __pcstackBANK2:
   646                           	opt stack 0
   647  0002CE                     _printf$2056:
   648                           	opt stack 0
   649                           
   650                           ; 3 bytes @ 0x0
   651  0002CE                     	ds	3
   652  0002D1                     printf@ap:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x3
   656  0002D1                     	ds	2
   657  0002D3                     printf@tmpval:
   658                           	opt stack 0
   659                           
   660                           ; 4 bytes @ 0x5
   661  0002D3                     	ds	4
   662  0002D7                     printf@val:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x9
   666  0002D7                     	ds	4
   667  0002DB                     printf@exp:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0xD
   671  0002DB                     	ds	2
   672  0002DD                     printf@flag:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0xF
   676  0002DD                     	ds	2
   677  0002DF                     printf@width:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x11
   681  0002DF                     	ds	2
   682  0002E1                     printf@fval:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0x13
   686  0002E1                     	ds	3
   687  0002E4                     printf@prec:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x16
   691  0002E4                     	ds	2
   692  0002E6                     printf@c:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x18
   696  0002E6                     	ds	1
   697                           tblptru	equ	0xFF8
   698                           tblptrh	equ	0xFF7
   699                           tblptrl	equ	0xFF6
   700                           tablat	equ	0xFF5
   701                           postinc0	equ	0xFEE
   702                           wreg	equ	0xFE8
   703                           
   704                           	psect	cstackBANK1
   705  0001ED                     __pcstackBANK1:
   706                           	opt stack 0
   707  0001ED                     
   708                           ; 2 bytes @ 0x0
   709  0001ED                     	ds	2
   710  0001EF                     
   711                           ; 3 bytes @ 0x2
   712  0001EF                     	ds	3
   713  0001F2                     main@x:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x5
   717  0001F2                     	ds	2
   718  0001F4                     main@x_890:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x7
   722  0001F4                     	ds	2
   723                           tblptru	equ	0xFF8
   724                           tblptrh	equ	0xFF7
   725                           tblptrl	equ	0xFF6
   726                           tablat	equ	0xFF5
   727                           postinc0	equ	0xFEE
   728                           wreg	equ	0xFE8
   729                           
   730                           	psect	cstackBANK0
   731  000060                     __pcstackBANK0:
   732                           	opt stack 0
   733  000060                     ?___wmul:
   734                           	opt stack 0
   735  000060                     ?___awtoft:
   736                           	opt stack 0
   737  000060                     ?___llmod:
   738                           	opt stack 0
   739  000060                     CRCcheck@SentCRC:
   740                           	opt stack 0
   741  000060                     ___altoft@exp:
   742                           	opt stack 0
   743  000060                     ___lltoft@exp:
   744                           	opt stack 0
   745  000060                     begin@ptr:
   746                           	opt stack 0
   747  000060                     ___wmul@multiplier:
   748                           	opt stack 0
   749  000060                     ___awtoft@c:
   750                           	opt stack 0
   751  000060                     ___llmod@dividend:
   752                           	opt stack 0
   753                           
   754                           ; 4 bytes @ 0x0
   755  000060                     	ds	1
   756  000061                     CRCcheck@calculatedCRC:
   757                           	opt stack 0
   758  000061                     ___altoft@sign:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x1
   762  000061                     	ds	1
   763  000062                     ?___ftdiv:
   764                           	opt stack 0
   765  000062                     begin@maxSize:
   766                           	opt stack 0
   767  000062                     ___wmul@multiplicand:
   768                           	opt stack 0
   769  000062                     CRCcheck@arrayHolder:
   770                           	opt stack 0
   771  000062                     ___ftdiv@f1:
   772                           	opt stack 0
   773                           
   774                           ; 3 bytes @ 0x2
   775  000062                     	ds	1
   776  000063                     begin@givenAddress:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x3
   780  000063                     	ds	1
   781  000064                     ?_Battery_Get:
   782                           	opt stack 0
   783  000064                     begin@error:
   784                           	opt stack 0
   785  000064                     Battery_Get@channelnum:
   786                           	opt stack 0
   787  000064                     ___ftge@ff1:
   788                           	opt stack 0
   789  000064                     ___llmod@divisor:
   790                           	opt stack 0
   791                           
   792                           ; 4 bytes @ 0x4
   793  000064                     	ds	1
   794  000065                     begin@stufftosend:
   795                           	opt stack 0
   796  000065                     CRCcheck@rt:
   797                           	opt stack 0
   798  000065                     ___ftdiv@f2:
   799                           	opt stack 0
   800                           
   801                           ; 3 bytes @ 0x5
   802  000065                     	ds	2
   803  000067                     ??_receiveData:
   804  000067                     begin@stufftoreceive:
   805                           	opt stack 0
   806  000067                     ___ftge@ff2:
   807                           	opt stack 0
   808                           
   809                           ; 3 bytes @ 0x7
   810  000067                     	ds	1
   811  000068                     ??___ftdiv:
   812                           
   813                           ; 0 bytes @ 0x8
   814  000068                     	ds	1
   815  000069                     begin@stuffavailable:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x9
   819  000069                     	ds	1
   820  00006A                     ??___ftge:
   821                           
   822                           ; 0 bytes @ 0xA
   823  00006A                     	ds	1
   824  00006B                     ___ftdiv@cntr:
   825                           	opt stack 0
   826  00006B                     begin@stuffpeek:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0xB
   830  00006B                     	ds	1
   831  00006C                     ___ftdiv@f3:
   832                           	opt stack 0
   833                           
   834                           ; 3 bytes @ 0xC
   835  00006C                     	ds	1
   836  00006D                     Battery_Fault@fault:
   837                           	opt stack 0
   838  00006D                     Temp_Fault@fault:
   839                           	opt stack 0
   840  00006D                     RunBypas@cellbyp:
   841                           	opt stack 0
   842  00006D                     receiveData@holder:
   843                           	opt stack 0
   844                           
   845                           ; 3 bytes @ 0xD
   846  00006D                     	ds	1
   847  00006E                     Battery_Fault@i:
   848                           	opt stack 0
   849  00006E                     Temp_Fault@i:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0xE
   853  00006E                     	ds	1
   854  00006F                     ___ftdiv@exp:
   855                           	opt stack 0
   856  00006F                     RunBypas@batvolt:
   857                           	opt stack 0
   858                           
   859                           ; 3 bytes @ 0xF
   860  00006F                     	ds	1
   861  000070                     ___ftdiv@sign:
   862                           	opt stack 0
   863  000070                     receiveData@holder_1240:
   864                           	opt stack 0
   865                           
   866                           ; 3 bytes @ 0x10
   867  000070                     	ds	1
   868  000071                     ?___ftmul:
   869                           	opt stack 0
   870  000071                     ___ftmul@f1:
   871                           	opt stack 0
   872                           
   873                           ; 3 bytes @ 0x11
   874  000071                     	ds	1
   875  000072                     RunBypas@i:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x12
   879  000072                     	ds	1
   880  000073                     receiveData@crcHolder:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x13
   884  000073                     	ds	1
   885  000074                     receiveData@crcHolder_1241:
   886                           	opt stack 0
   887  000074                     ___ftmul@f2:
   888                           	opt stack 0
   889                           
   890                           ; 3 bytes @ 0x14
   891  000074                     	ds	1
   892  000075                     receiveData@u:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x15
   896  000075                     	ds	2
   897  000077                     ??___ftmul:
   898  000077                     receiveData@r:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x17
   902  000077                     	ds	3
   903  00007A                     ___ftmul@exp:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x1A
   907  00007A                     	ds	1
   908  00007B                     ___ftmul@f3_as_product:
   909                           	opt stack 0
   910                           
   911                           ; 3 bytes @ 0x1B
   912  00007B                     	ds	3
   913  00007E                     ___ftmul@cntr:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x1E
   917  00007E                     	ds	1
   918  00007F                     ___ftmul@sign:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x1F
   922  00007F                     	ds	1
   923  000080                     ?_fround:
   924                           	opt stack 0
   925  000080                     ?_scale:
   926                           	opt stack 0
   927                           
   928                           ; 3 bytes @ 0x20
   929  000080                     	ds	3
   930  000083                     _fround$2054:
   931                           	opt stack 0
   932  000083                     _scale$2055:
   933                           	opt stack 0
   934                           
   935                           ; 3 bytes @ 0x23
   936  000083                     	ds	3
   937  000086                     scale@scl:
   938                           	opt stack 0
   939  000086                     _fround$2053:
   940                           	opt stack 0
   941                           
   942                           ; 3 bytes @ 0x26
   943  000086                     	ds	1
   944  000087                     ?___fttol:
   945                           	opt stack 0
   946  000087                     ___fttol@f1:
   947                           	opt stack 0
   948                           
   949                           ; 3 bytes @ 0x27
   950  000087                     	ds	2
   951  000089                     fround@prec:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x29
   955  000089                     	ds	1
   956  00008A                     ?___ftadd:
   957                           	opt stack 0
   958  00008A                     ___ftadd@f1:
   959                           	opt stack 0
   960                           
   961                           ; 3 bytes @ 0x2A
   962  00008A                     	ds	1
   963  00008B                     ??___fttol:
   964                           
   965                           ; 0 bytes @ 0x2B
   966  00008B                     	ds	2
   967  00008D                     ___ftadd@f2:
   968                           	opt stack 0
   969                           
   970                           ; 3 bytes @ 0x2D
   971  00008D                     	ds	3
   972  000090                     ??___ftadd:
   973  000090                     ___fttol@sign1:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x30
   977  000090                     	ds	1
   978  000091                     ___fttol@lval:
   979                           	opt stack 0
   980                           
   981                           ; 4 bytes @ 0x31
   982  000091                     	ds	2
   983  000093                     ___ftadd@sign:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x33
   987  000093                     	ds	1
   988  000094                     ___ftadd@exp2:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x34
   992  000094                     	ds	1
   993  000095                     ___ftadd@exp1:
   994                           	opt stack 0
   995  000095                     ___fttol@exp1:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x35
   999  000095                     	ds	1
  1000  000096                     ?___ftsub:
  1001                           	opt stack 0
  1002  000096                     ?_eval_poly:
  1003                           	opt stack 0
  1004  000096                     Battery_Filter@x:
  1005                           	opt stack 0
  1006  000096                     Temp_Filter@x:
  1007                           	opt stack 0
  1008  000096                     ___ftsub@f1:
  1009                           	opt stack 0
  1010  000096                     eval_poly@x:
  1011                           	opt stack 0
  1012                           
  1013                           ; 3 bytes @ 0x36
  1014  000096                     	ds	2
  1015  000098                     ??_Battery_Convert:
  1016                           
  1017                           ; 0 bytes @ 0x38
  1018  000098                     	ds	1
  1019  000099                     eval_poly@d:
  1020                           	opt stack 0
  1021  000099                     ___ftsub@f2:
  1022                           	opt stack 0
  1023                           
  1024                           ; 3 bytes @ 0x39
  1025  000099                     	ds	1
  1026  00009A                     Battery_Convert@x:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x3A
  1030  00009A                     	ds	1
  1031  00009B                     eval_poly@n:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x3B
  1035  00009B                     	ds	1
  1036  00009C                     ?_printf:
  1037                           	opt stack 0
  1038  00009C                     printf@f:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x3C
  1042  00009C                     	ds	1
  1043  00009D                     ??_eval_poly:
  1044                           
  1045                           ; 0 bytes @ 0x3D
  1046  00009D                     	ds	2
  1047  00009F                     eval_poly@res:
  1048                           	opt stack 0
  1049                           
  1050                           ; 3 bytes @ 0x3F
  1051  00009F                     	ds	3
  1052  0000A2                     ?_log:
  1053                           	opt stack 0
  1054  0000A2                     log@x:
  1055                           	opt stack 0
  1056                           
  1057                           ; 3 bytes @ 0x42
  1058  0000A2                     	ds	1
  1059  0000A3                     ??_printf:
  1060                           
  1061                           ; 0 bytes @ 0x43
  1062  0000A3                     	ds	2
  1063  0000A5                     log@exponent:
  1064                           	opt stack 0
  1065                           
  1066                           ; 2 bytes @ 0x45
  1067  0000A5                     	ds	2
  1068  0000A7                     _Temp_Convert$2051:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x47
  1072  0000A7                     	ds	2
  1073  0000A9                     _Temp_Convert$2052:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x49
  1077  0000A9                     	ds	2
  1078  0000AB                     Temp_Convert@x:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x4B
  1082  0000AB                     	ds	2
  1083  0000AD                     Temp_Convert@steinhart:
  1084                           	opt stack 0
  1085                           
  1086                           ; 3 bytes @ 0x4D
  1087  0000AD                     	ds	3
  1088                           tblptru	equ	0xFF8
  1089                           tblptrh	equ	0xFF7
  1090                           tblptrl	equ	0xFF6
  1091                           tablat	equ	0xFF5
  1092                           postinc0	equ	0xFEE
  1093                           wreg	equ	0xFE8
  1094                           
  1095                           	psect	cstackCOMRAM
  1096  000001                     __pcstackCOMRAM:
  1097                           	opt stack 0
  1098  000001                     ??_ADC_StartConversion:
  1099  000001                     ?_ADC_GetConversionResult:
  1100                           	opt stack 0
  1101  000001                     ?i2_UART_buff_size:
  1102                           	opt stack 0
  1103  000001                     ?i2_UART_buff_modulo_inc:
  1104                           	opt stack 0
  1105  000001                     Set_4051@Channel:
  1106                           	opt stack 0
  1107  000001                     i2UART_buff_size@_this:
  1108                           	opt stack 0
  1109  000001                     i2UART_buff_modulo_inc@value:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x0
  1113  000001                     	ds	1
  1114  000002                     ADC_StartConversion@channel:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x1
  1118  000002                     	ds	1
  1119  000003                     ??_Set_4051:
  1120  000003                     ??_ADC_GetConversionResult:
  1121  000003                     i2UART_buff_modulo_inc@modulus:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0x2
  1125  000003                     	ds	2
  1126  000005                     ??_ADC_ISR:
  1127  000005                     i2UART_buff_modulo_inc@my_value:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x4
  1131  000005                     	ds	2
  1132  000007                     i2UART_buff_put@_this:
  1133                           	opt stack 0
  1134  000007                     i2UART_buff_get@_this:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x6
  1138  000007                     	ds	2
  1139  000009                     ??i2_UART_buff_get:
  1140  000009                     i2UART_buff_put@c:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x8
  1144  000009                     	ds	1
  1145  00000A                     ??i2_UART_buff_put:
  1146                           
  1147                           ; 0 bytes @ 0x9
  1148  00000A                     	ds	1
  1149  00000B                     i2UART_buff_get@c:
  1150                           	opt stack 0
  1151  00000B                     ADC_ISR@ADC_Result:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0xA
  1155  00000B                     	ds	1
  1156  00000C                     EUSART1_Receive_ISR@data:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0xB
  1160  00000C                     	ds	1
  1161  00000D                     ??_INTERRUPT_InterruptManager:
  1162                           
  1163                           ; 0 bytes @ 0xC
  1164  00000D                     	ds	14
  1165  00001B                     ??_isdigit:
  1166  00001B                     ?_UART_buff_modulo_inc:
  1167                           	opt stack 0
  1168  00001B                     ?_UART_buff_size:
  1169                           	opt stack 0
  1170  00001B                     ?___awmod:
  1171                           	opt stack 0
  1172  00001B                     ?___ftpack:
  1173                           	opt stack 0
  1174  00001B                     ?_frexp:
  1175                           	opt stack 0
  1176  00001B                     ?___ftneg:
  1177                           	opt stack 0
  1178  00001B                     ?__tdiv_to_l_:
  1179                           	opt stack 0
  1180  00001B                     ?__div_to_l_:
  1181                           	opt stack 0
  1182  00001B                     ?___lldiv:
  1183                           	opt stack 0
  1184  00001B                     SetBypass@pin:
  1185                           	opt stack 0
  1186  00001B                     UART_buff_size@_this:
  1187                           	opt stack 0
  1188  00001B                     UART_buff_modulo_inc@value:
  1189                           	opt stack 0
  1190  00001B                     UART_buff_peek@_this:
  1191                           	opt stack 0
  1192  00001B                     CRC8@data:
  1193                           	opt stack 0
  1194  00001B                     crcBufS_status_put@_this:
  1195                           	opt stack 0
  1196  00001B                     crcBufS_get@_this:
  1197                           	opt stack 0
  1198  00001B                     ___awmod@dividend:
  1199                           	opt stack 0
  1200  00001B                     memset@p1:
  1201                           	opt stack 0
  1202  00001B                     __div_to_l_@f1:
  1203                           	opt stack 0
  1204  00001B                     ___ftpack@arg:
  1205                           	opt stack 0
  1206  00001B                     __tdiv_to_l_@f1:
  1207                           	opt stack 0
  1208  00001B                     ___ftneg@f1:
  1209                           	opt stack 0
  1210  00001B                     frexp@value:
  1211                           	opt stack 0
  1212  00001B                     ___lldiv@dividend:
  1213                           	opt stack 0
  1214                           
  1215                           ; 4 bytes @ 0x1A
  1216  00001B                     	ds	1
  1217  00001C                     _isdigit$1644:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x1B
  1221  00001C                     	ds	1
  1222  00001D                     ??_UART_buff_peek:
  1223  00001D                     ?_Receive_available:
  1224                           	opt stack 0
  1225  00001D                     CRC8@len:
  1226                           	opt stack 0
  1227  00001D                     crcBufS_status_put@time:
  1228                           	opt stack 0
  1229  00001D                     crcBufS_get@time:
  1230                           	opt stack 0
  1231  00001D                     isdigit@c:
  1232                           	opt stack 0
  1233  00001D                     SetBypass@state:
  1234                           	opt stack 0
  1235  00001D                     UART_buff_modulo_inc@modulus:
  1236                           	opt stack 0
  1237  00001D                     ___awmod@divisor:
  1238                           	opt stack 0
  1239  00001D                     memset@c:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x1C
  1243  00001D                     	ds	1
  1244  00001E                     CRC8@sum:
  1245                           	opt stack 0
  1246  00001E                     crcBufS_status_put@status:
  1247                           	opt stack 0
  1248  00001E                     crcBufS_get@space:
  1249                           	opt stack 0
  1250  00001E                     ___ftpack@exp:
  1251                           	opt stack 0
  1252  00001E                     frexp@eptr:
  1253                           	opt stack 0
  1254  00001E                     __div_to_l_@f2:
  1255                           	opt stack 0
  1256  00001E                     __tdiv_to_l_@f2:
  1257                           	opt stack 0
  1258                           
  1259                           ; 3 bytes @ 0x1D
  1260  00001E                     	ds	1
  1261  00001F                     ??_crcBufS_get:
  1262  00001F                     ??_SetBypass:
  1263  00001F                     ??_crcBufS_status_put:
  1264  00001F                     CRC8@extract:
  1265                           	opt stack 0
  1266  00001F                     ___awmod@counter:
  1267                           	opt stack 0
  1268  00001F                     ___ftpack@sign:
  1269                           	opt stack 0
  1270  00001F                     UART_buff_modulo_inc@my_value:
  1271                           	opt stack 0
  1272  00001F                     memset@n:
  1273                           	opt stack 0
  1274  00001F                     ___lldiv@divisor:
  1275                           	opt stack 0
  1276                           
  1277                           ; 4 bytes @ 0x1E
  1278  00001F                     	ds	1
  1279  000020                     ??___ftpack:
  1280  000020                     ??_frexp:
  1281  000020                     CRC8@tempI:
  1282                           	opt stack 0
  1283  000020                     ___awmod@sign:
  1284                           	opt stack 0
  1285                           
  1286                           ; 1 bytes @ 0x1F
  1287  000020                     	ds	1
  1288  000021                     ??__tdiv_to_l_:
  1289  000021                     ?___awdiv:
  1290                           	opt stack 0
  1291  000021                     CRC8@crc:
  1292                           	opt stack 0
  1293  000021                     UART_buff_put@_this:
  1294                           	opt stack 0
  1295  000021                     UART_buff_get@_this:
  1296                           	opt stack 0
  1297  000021                     ___awdiv@dividend:
  1298                           	opt stack 0
  1299  000021                     memset@p:
  1300                           	opt stack 0
  1301  000021                     __div_to_l_@quot:
  1302                           	opt stack 0
  1303                           
  1304                           ; 4 bytes @ 0x20
  1305  000021                     	ds	2
  1306  000023                     ??_UART_buff_get:
  1307  000023                     ?___altoft:
  1308                           	opt stack 0
  1309  000023                     ?___lltoft:
  1310                           	opt stack 0
  1311  000023                     UART_buff_put@c:
  1312                           	opt stack 0
  1313  000023                     UART_buff_init@_this:
  1314                           	opt stack 0
  1315  000023                     crcBufS_status_put@wantedTime:
  1316                           	opt stack 0
  1317  000023                     ___awdiv@divisor:
  1318                           	opt stack 0
  1319  000023                     ___altoft@c:
  1320                           	opt stack 0
  1321  000023                     ___lldiv@quotient:
  1322                           	opt stack 0
  1323  000023                     ___lltoft@c:
  1324                           	opt stack 0
  1325                           
  1326                           ; 4 bytes @ 0x22
  1327  000023                     	ds	1
  1328  000024                     ??_UART_buff_put:
  1329  000024                     __tdiv_to_l_@quot:
  1330                           	opt stack 0
  1331                           
  1332                           ; 4 bytes @ 0x23
  1333  000024                     	ds	1
  1334  000025                     UART_buff_get@c:
  1335                           	opt stack 0
  1336  000025                     ___awdiv@counter:
  1337                           	opt stack 0
  1338  000025                     __div_to_l_@cntr:
  1339                           	opt stack 0
  1340  000025                     crcBufS_get@wantedTime:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x24
  1344  000025                     	ds	1
  1345  000026                     Send_put@_data:
  1346                           	opt stack 0
  1347  000026                     ___awdiv@sign:
  1348                           	opt stack 0
  1349  000026                     __div_to_l_@exp1:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x25
  1353  000026                     	ds	1
  1354  000027                     ??___altoft:
  1355  000027                     ??___lltoft:
  1356  000027                     putch@txData:
  1357                           	opt stack 0
  1358  000027                     ___lldiv@counter:
  1359                           	opt stack 0
  1360  000027                     ___awdiv@quotient:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x26
  1364  000027                     	ds	1
  1365  000028                     __tdiv_to_l_@cntr:
  1366                           	opt stack 0
  1367  000028                     ___llmod@counter:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x27
  1371  000028                     	ds	1
  1372  000029                     ___awtoft@sign:
  1373                           	opt stack 0
  1374  000029                     __tdiv_to_l_@exp1:
  1375                           	opt stack 0
  1376  000029                     ___wmul@product:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x28
  1380  000029                     	ds	2
  1381  00002B                     tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           
  1388                           ; 0 bytes @ 0x2A
  1389 ;;
  1390 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1391 ;;
  1392 ;; *************** function _main *****************
  1393 ;; Defined at:
  1394 ;;		line 30 in file "Main.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;  argc            2    0[BANK1 ] int 
  1397 ;;  argv            3    2[BANK1 ] PTR PTR unsigned char 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;  x               2    7[BANK1 ] int 
  1400 ;;  x               2    5[BANK1 ] int 
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  2    0[BANK1 ] int 
  1403 ;; Registers used:
  1404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1410 ;;      Params:         0       0       5       0       0       0       0
  1411 ;;      Locals:         0       0       4       0       0       0       0
  1412 ;;      Temps:          0       0       0       0       0       0       0
  1413 ;;      Totals:         0       0       9       0       0       0       0
  1414 ;;Total ram usage:        9 bytes
  1415 ;; Hardware stack levels required when called:   10
  1416 ;; This function calls:
  1417 ;;		_Battery_Convert
  1418 ;;		_Battery_Fault
  1419 ;;		_Battery_Get
  1420 ;;		_RunBypas
  1421 ;;		_SYSTEM_Initialize
  1422 ;;		_Temp_Convert
  1423 ;;		_Temp_Fault
  1424 ;;		_printf
  1425 ;;		_updateComms
  1426 ;; This function is called by:
  1427 ;;		Startup code after reset
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431                           	psect	text0
  1432  003EEA                     __ptext0:
  1433                           	opt stack 0
  1434  003EEA                     _main:
  1435                           	opt stack 21
  1436                           
  1437                           ;Main.c: 32: SYSTEM_Initialize();
  1438                           
  1439                           ;incstack = 0
  1440  003EEA  EC45  F024         	call	_SYSTEM_Initialize	;wreg free
  1441                           
  1442                           ;Main.c: 51: (INTCONbits.GIE = 1);
  1443  003EEE  8EF2               	bsf	intcon,7,c	;volatile
  1444                           
  1445                           ;Main.c: 54: (INTCONbits.PEIE = 1);
  1446  003EF0  8CF2               	bsf	intcon,6,c	;volatile
  1447                           
  1448                           ;Main.c: 63: printf("Hi Rick");
  1449  003EF2  0EA9               	movlw	low STR_1
  1450  003EF4  0100               	movlb	0	; () banked
  1451  003EF6  6F9C               	movwf	printf@f& (0+255),b
  1452  003EF8  0E06               	movlw	high STR_1
  1453  003EFA  0100               	movlb	0	; () banked
  1454  003EFC  6F9D               	movwf	(printf@f+1)& (0+255),b
  1455  003EFE  EC59  F003         	call	_printf	;wreg free
  1456  003F02  D000               	goto	l7274
  1457  003F04                     l7274:
  1458                           
  1459                           ;Main.c: 65: {
  1460                           ;Main.c: 66: if (Temp_Done)
  1461  003F04  0100               	movlb	0	; () banked
  1462  003F06  51D8               	movf	_Temp_Done& (0+255),w,b
  1463  003F08  0100               	movlb	0	; () banked
  1464  003F0A  11D9               	iorwf	(_Temp_Done+1)& (0+255),w,b
  1465  003F0C  B4D8               	btfsc	status,2,c
  1466  003F0E  D01B               	goto	l7290
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;Main.c: 67: {
  1470                           ;Main.c: 68: Temp_Convert();
  1471  003F10  ECAC  F014         	call	_Temp_Convert	;wreg free
  1472                           
  1473                           ;Main.c: 69: Temp_Fault();
  1474  003F14  EC44  F023         	call	_Temp_Fault	;wreg free
  1475                           
  1476                           ;Main.c: 70: for (int x = 0;x<9;x++)
  1477  003F18  0E00               	movlw	0
  1478  003F1A  0101               	movlb	1	; () banked
  1479  003F1C  6FF3               	movwf	(main@x+1)& (0+255),b
  1480  003F1E  0E00               	movlw	0
  1481  003F20  6FF2               	movwf	main@x& (0+255),b
  1482  003F22                     l7282:
  1483                           
  1484                           ; BSR set to: 1
  1485  003F22  0101               	movlb	1	; () banked
  1486  003F24  BFF3               	btfsc	(main@x+1)& (0+255),7,b
  1487  003F26  D00A               	goto	l7286
  1488  003F28  0101               	movlb	1	; () banked
  1489  003F2A  51F3               	movf	(main@x+1)& (0+255),w,b
  1490  003F2C  E10C               	bnz	l7290
  1491  003F2E  0E09               	movlw	9
  1492  003F30  0101               	movlb	1	; () banked
  1493  003F32  5DF2               	subwf	main@x& (0+255),w,b
  1494  003F34  B0D8               	btfsc	status,0,c
  1495  003F36  D007               	goto	l7290
  1496  003F38  D001               	goto	l7286
  1497                           
  1498                           ; BSR set to: 1
  1499  003F3A  D005               	goto	l7290
  1500  003F3C                     l7286:
  1501                           
  1502                           ; BSR set to: 1
  1503                           ;Main.c: 71: {
  1504  003F3C  0101               	movlb	1	; () banked
  1505  003F3E  4BF2               	infsnz	main@x& (0+255),f,b
  1506  003F40  2BF3               	incf	(main@x+1)& (0+255),f,b
  1507  003F42  D7EF               	goto	l7282
  1508                           
  1509                           ; BSR set to: 1
  1510                           
  1511                           ; BSR set to: 1
  1512  003F44  D000               	goto	l7290
  1513  003F46                     l7290:
  1514                           
  1515                           ;Main.c: 73: }
  1516                           ;Main.c: 74: }
  1517                           ;Main.c: 75: if (Volt_Done)
  1518  003F46  0100               	movlb	0	; () banked
  1519  003F48  51DA               	movf	_Volt_Done& (0+255),w,b
  1520  003F4A  0100               	movlb	0	; () banked
  1521  003F4C  11DB               	iorwf	(_Volt_Done+1)& (0+255),w,b
  1522  003F4E  B4D8               	btfsc	status,2,c
  1523  003F50  D035               	goto	l7310
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;Main.c: 76: {
  1527                           ;Main.c: 77: Battery_Convert();
  1528  003F52  EC10  F01D         	call	_Battery_Convert	;wreg free
  1529                           
  1530                           ;Main.c: 78: Battery_Fault();
  1531  003F56  EC50  F020         	call	_Battery_Fault	;wreg free
  1532                           
  1533                           ;Main.c: 79: RunBypas();
  1534  003F5A  EC96  F01D         	call	_RunBypas	;wreg free
  1535                           
  1536                           ;Main.c: 80: for (int x = 0;x<9;x++)
  1537  003F5E  0E00               	movlw	0
  1538  003F60  0101               	movlb	1	; () banked
  1539  003F62  6FF5               	movwf	(main@x_890+1)& (0+255),b
  1540  003F64  0E00               	movlw	0
  1541  003F66  6FF4               	movwf	main@x_890& (0+255),b
  1542  003F68                     l7300:
  1543                           
  1544                           ; BSR set to: 1
  1545  003F68  0101               	movlb	1	; () banked
  1546  003F6A  BFF5               	btfsc	(main@x_890+1)& (0+255),7,b
  1547  003F6C  D00A               	goto	l7304
  1548  003F6E  0101               	movlb	1	; () banked
  1549  003F70  51F5               	movf	(main@x_890+1)& (0+255),w,b
  1550  003F72  E124               	bnz	l7310
  1551  003F74  0E09               	movlw	9
  1552  003F76  0101               	movlb	1	; () banked
  1553  003F78  5DF4               	subwf	main@x_890& (0+255),w,b
  1554  003F7A  B0D8               	btfsc	status,0,c
  1555  003F7C  D01F               	goto	l7310
  1556  003F7E  D001               	goto	l7304
  1557                           
  1558                           ; BSR set to: 1
  1559  003F80  D01D               	goto	l7310
  1560  003F82                     l7304:
  1561                           
  1562                           ; BSR set to: 1
  1563                           ;Main.c: 81: {
  1564                           ;Main.c: 82: printf("Battery %d = %0.02f \r\n", x,Battery_Get(x));
  1565  003F82  0E92               	movlw	low STR_2
  1566  003F84  0100               	movlb	0	; () banked
  1567  003F86  6F9C               	movwf	printf@f& (0+255),b
  1568  003F88  0E06               	movlw	high STR_2
  1569  003F8A  0100               	movlb	0	; () banked
  1570  003F8C  6F9D               	movwf	(printf@f+1)& (0+255),b
  1571  003F8E  C1F4  F09E         	movff	main@x_890,?_printf+2
  1572  003F92  C1F5  F09F         	movff	main@x_890+1,?_printf+3
  1573  003F96  C1F4  F064         	movff	main@x_890,Battery_Get@channelnum
  1574  003F9A  C1F5  F065         	movff	main@x_890+1,Battery_Get@channelnum+1
  1575  003F9E  ECD3  F025         	call	_Battery_Get	;wreg free
  1576  003FA2  C064  F0A0         	movff	?_Battery_Get,?_printf+4
  1577  003FA6  C065  F0A1         	movff	?_Battery_Get+1,?_printf+5
  1578  003FAA  C066  F0A2         	movff	?_Battery_Get+2,?_printf+6
  1579  003FAE  EC59  F003         	call	_printf	;wreg free
  1580  003FB2  0101               	movlb	1	; () banked
  1581  003FB4  4BF4               	infsnz	main@x_890& (0+255),f,b
  1582  003FB6  2BF5               	incf	(main@x_890+1)& (0+255),f,b
  1583  003FB8  D7D7               	goto	l7300
  1584                           
  1585                           ; BSR set to: 1
  1586                           
  1587                           ; BSR set to: 1
  1588  003FBA  D000               	goto	l7310
  1589  003FBC                     l7310:
  1590                           
  1591                           ;Main.c: 83: }
  1592                           ;Main.c: 84: }
  1593                           ;Main.c: 85: updateComms();
  1594  003FBC  EC64  F027         	call	_updateComms	;wreg free
  1595  003FC0  D7A1               	goto	l7274
  1596                           
  1597                           ;Main.c: 102: }
  1598                           ;Main.c: 103: return (0);
  1599                           ;	Return value of _main is never used
  1600  003FC2  EF55  F000         	goto	start
  1601  003FC6                     __end_of_main:
  1602                           	opt stack 0
  1603                           tblptru	equ	0xFF8
  1604                           tblptrh	equ	0xFF7
  1605                           tblptrl	equ	0xFF6
  1606                           tablat	equ	0xFF5
  1607                           intcon	equ	0xFF2
  1608                           postinc0	equ	0xFEE
  1609                           wreg	equ	0xFE8
  1610                           status	equ	0xFD8
  1611                           
  1612 ;; *************** function _updateComms *****************
  1613 ;; Defined at:
  1614 ;;		line 5 in file "Communications.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;		None
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;		None
  1619 ;; Return value:  Size  Location     Type
  1620 ;;		None               void
  1621 ;; Registers used:
  1622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1628 ;;      Params:         0       0       0       0       0       0       0
  1629 ;;      Locals:         0       0       0       0       0       0       0
  1630 ;;      Temps:          0       0       0       0       0       0       0
  1631 ;;      Totals:         0       0       0       0       0       0       0
  1632 ;;Total ram usage:        0 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    9
  1635 ;; This function calls:
  1636 ;;		_receiveData
  1637 ;; This function is called by:
  1638 ;;		_main
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           	psect	text1
  1643  004EC8                     __ptext1:
  1644                           	opt stack 0
  1645  004EC8                     _updateComms:
  1646                           	opt stack 21
  1647                           
  1648                           ;Communications.c: 7: if(receiveData()){
  1649                           
  1650                           ;incstack = 0
  1651  004EC8  EC9F  F009         	call	_receiveData	;wreg free
  1652  004ECC  0012               	return	
  1653  004ECE  0012               	return		;funcret
  1654  004ED0                     __end_of_updateComms:
  1655                           	opt stack 0
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           intcon	equ	0xFF2
  1661                           postinc0	equ	0xFEE
  1662                           wreg	equ	0xFE8
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _receiveData *****************
  1666 ;; Defined at:
  1667 ;;		line 82 in file "FastTransfer.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;		None
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  holder          3   16[BANK0 ] unsigned char [3]
  1672 ;;  crcHolder       1   20[BANK0 ] unsigned char 
  1673 ;;  holder          3   13[BANK0 ] unsigned char [3]
  1674 ;;  crcHolder       1   19[BANK0 ] unsigned char 
  1675 ;;  u               2   21[BANK0 ] int 
  1676 ;;  r               2   23[BANK0 ] int 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  1    wreg      unsigned char 
  1679 ;; Registers used:
  1680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1686 ;;      Params:         0       0       0       0       0       0       0
  1687 ;;      Locals:         0      12       0       0       0       0       0
  1688 ;;      Temps:          0       6       0       0       0       0       0
  1689 ;;      Totals:         0      18       0       0       0       0       0
  1690 ;;Total ram usage:       18 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    8
  1693 ;; This function calls:
  1694 ;;		Absolute function
  1695 ;;		_CRC8
  1696 ;;		_CRCcheck
  1697 ;;		_Receive_available
  1698 ;;		_Receive_get
  1699 ;;		_Receive_peek
  1700 ;;		_Send_put
  1701 ;; This function is called by:
  1702 ;;		_updateComms
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text2
  1707  00133E                     __ptext2:
  1708                           	opt stack 0
  1709  00133E                     _receiveData:
  1710                           	opt stack 21
  1711                           
  1712                           ;FastTransfer.c: 85: if (rx_len == 0) {
  1713                           
  1714                           ;incstack = 0
  1715  00133E  5042               	movf	_rx_len,w,c
  1716  001340  A4D8               	btfss	status,2,c
  1717  001342  D0B0               	goto	l6350
  1718                           
  1719                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  1720  001344  D801               	call	u7308
  1721  001346  D00A               	goto	u7309
  1722  001348                     u7308:
  1723  001348  0005               	push	
  1724  00134A  6EFA               	movwf	pclath,c
  1725  00134C  5031               	movf	_serial_available,w,c
  1726  00134E  6EFD               	movwf	tosl,c
  1727  001350  5032               	movf	_serial_available+1,w,c
  1728  001352  6EFE               	movwf	tosh,c
  1729  001354  50F8               	movf	tblptru,w,c
  1730  001356  6EFF               	movwf	tosu,c
  1731  001358  50FA               	movf	pclath,w,c
  1732  00135A  0012               	return		;indir
  1733  00135C                     u7309:
  1734  00135C  BE1E               	btfsc	?_Receive_available+1,7,c
  1735  00135E  D0A2               	goto	l6350
  1736  001360  501E               	movf	?_Receive_available+1,w,c
  1737  001362  E120               	bnz	l6326
  1738  001364  0E05               	movlw	5
  1739  001366  5C1D               	subwf	?_Receive_available,w,c
  1740  001368  B0D8               	btfsc	status,0,c
  1741  00136A  D01C               	goto	l6326
  1742  00136C  D09B               	goto	l6350
  1743                           
  1744                           ;FastTransfer.c: 89: while (serial_read() != 0x06) {
  1745  00136E  D01A               	goto	l6326
  1746  001370                     l6318:
  1747                           
  1748                           ;FastTransfer.c: 93: alignErrorCounter++;
  1749  001370  0100               	movlb	0	; () banked
  1750  001372  4BDE               	infsnz	_alignErrorCounter& (0+255),f,b
  1751  001374  2BDF               	incf	(_alignErrorCounter+1)& (0+255),f,b
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;FastTransfer.c: 94: if (serial_available() < 5)
  1755  001376  D801               	call	u7328
  1756  001378  D00A               	goto	u7329
  1757  00137A                     u7328:
  1758  00137A  0005               	push	
  1759  00137C  6EFA               	movwf	pclath,c
  1760  00137E  5031               	movf	_serial_available,w,c
  1761  001380  6EFD               	movwf	tosl,c
  1762  001382  5032               	movf	_serial_available+1,w,c
  1763  001384  6EFE               	movwf	tosh,c
  1764  001386  50F8               	movf	tblptru,w,c
  1765  001388  6EFF               	movwf	tosu,c
  1766  00138A  50FA               	movf	pclath,w,c
  1767  00138C  0012               	return		;indir
  1768  00138E                     u7329:
  1769  00138E  BE1E               	btfsc	?_Receive_available+1,7,c
  1770  001390  D006               	goto	l6322
  1771  001392  501E               	movf	?_Receive_available+1,w,c
  1772  001394  E107               	bnz	l6326
  1773  001396  0E05               	movlw	5
  1774  001398  5C1D               	subwf	?_Receive_available,w,c
  1775  00139A  B0D8               	btfsc	status,0,c
  1776  00139C  D003               	goto	l6326
  1777  00139E                     l6322:
  1778                           
  1779                           ;FastTransfer.c: 95: return 0;
  1780  00139E  0E00               	movlw	0
  1781  0013A0  0012               	return	
  1782  0013A2  D000               	goto	l6326
  1783  0013A4                     l6326:
  1784  0013A4  D801               	call	u7348
  1785  0013A6  D00A               	goto	u7349
  1786  0013A8                     u7348:
  1787  0013A8  0005               	push	
  1788  0013AA  6EFA               	movwf	pclath,c
  1789  0013AC  5033               	movf	_serial_read,w,c
  1790  0013AE  6EFD               	movwf	tosl,c
  1791  0013B0  5034               	movf	_serial_read+1,w,c
  1792  0013B2  6EFE               	movwf	tosh,c
  1793  0013B4  50F8               	movf	tblptru,w,c
  1794  0013B6  6EFF               	movwf	tosu,c
  1795  0013B8  50FA               	movf	pclath,w,c
  1796  0013BA  0012               	return		;indir
  1797  0013BC                     u7349:
  1798  0013BC  0A06               	xorlw	6
  1799  0013BE  A4D8               	btfss	status,2,c
  1800  0013C0  D7D7               	goto	l6318
  1801                           
  1802                           ;FastTransfer.c: 96: }
  1803                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  1804  0013C2  D801               	call	u7368
  1805  0013C4  D00A               	goto	u7369
  1806  0013C6                     u7368:
  1807  0013C6  0005               	push	
  1808  0013C8  6EFA               	movwf	pclath,c
  1809  0013CA  5033               	movf	_serial_read,w,c
  1810  0013CC  6EFD               	movwf	tosl,c
  1811  0013CE  5034               	movf	_serial_read+1,w,c
  1812  0013D0  6EFE               	movwf	tosh,c
  1813  0013D2  50F8               	movf	tblptru,w,c
  1814  0013D4  6EFF               	movwf	tosu,c
  1815  0013D6  50FA               	movf	pclath,w,c
  1816  0013D8  0012               	return		;indir
  1817  0013DA                     u7369:
  1818  0013DA  0A85               	xorlw	133
  1819  0013DC  A4D8               	btfss	status,2,c
  1820  0013DE  D062               	goto	l6350
  1821                           
  1822                           ;FastTransfer.c: 98: rx_address = serial_read();
  1823  0013E0  D801               	call	u7388
  1824  0013E2  D00A               	goto	u7389
  1825  0013E4                     u7388:
  1826  0013E4  0005               	push	
  1827  0013E6  6EFA               	movwf	pclath,c
  1828  0013E8  5033               	movf	_serial_read,w,c
  1829  0013EA  6EFD               	movwf	tosl,c
  1830  0013EC  5034               	movf	_serial_read+1,w,c
  1831  0013EE  6EFE               	movwf	tosh,c
  1832  0013F0  50F8               	movf	tblptru,w,c
  1833  0013F2  6EFF               	movwf	tosu,c
  1834  0013F4  50FA               	movf	pclath,w,c
  1835  0013F6  0012               	return		;indir
  1836  0013F8                     u7389:
  1837  0013F8  6E40               	movwf	_rx_address,c
  1838                           
  1839                           ;FastTransfer.c: 99: returnAddress = serial_read();
  1840  0013FA  D801               	call	u7398
  1841  0013FC  D00A               	goto	u7399
  1842  0013FE                     u7398:
  1843  0013FE  0005               	push	
  1844  001400  6EFA               	movwf	pclath,c
  1845  001402  5033               	movf	_serial_read,w,c
  1846  001404  6EFD               	movwf	tosl,c
  1847  001406  5034               	movf	_serial_read+1,w,c
  1848  001408  6EFE               	movwf	tosh,c
  1849  00140A  50F8               	movf	tblptru,w,c
  1850  00140C  6EFF               	movwf	tosu,c
  1851  00140E  50FA               	movf	pclath,w,c
  1852  001410  0012               	return		;indir
  1853  001412                     u7399:
  1854  001412  6E3F               	movwf	_returnAddress,c
  1855                           
  1856                           ;FastTransfer.c: 100: rx_len = serial_read();
  1857  001414  D801               	call	u7408
  1858  001416  D00A               	goto	u7409
  1859  001418                     u7408:
  1860  001418  0005               	push	
  1861  00141A  6EFA               	movwf	pclath,c
  1862  00141C  5033               	movf	_serial_read,w,c
  1863  00141E  6EFD               	movwf	tosl,c
  1864  001420  5034               	movf	_serial_read+1,w,c
  1865  001422  6EFE               	movwf	tosh,c
  1866  001424  50F8               	movf	tblptru,w,c
  1867  001426  6EFF               	movwf	tosu,c
  1868  001428  50FA               	movf	pclath,w,c
  1869  00142A  0012               	return		;indir
  1870  00142C                     u7409:
  1871  00142C  6E42               	movwf	_rx_len,c
  1872                           
  1873                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  1874  00142E  503E               	movf	_moduleAddress,w,c
  1875  001430  1840               	xorwf	_rx_address,w,c
  1876  001432  B4D8               	btfsc	status,2,c
  1877  001434  D037               	goto	l6350
  1878                           
  1879                           ;FastTransfer.c: 103: addressErrorCounter++;
  1880  001436  0100               	movlb	0	; () banked
  1881  001438  4BDC               	infsnz	_addressErrorCounter& (0+255),f,b
  1882  00143A  2BDD               	incf	(_addressErrorCounter+1)& (0+255),f,b
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;FastTransfer.c: 106: int u;
  1886                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  1887  00143C  0E00               	movlw	0
  1888  00143E  0100               	movlb	0	; () banked
  1889  001440  6F76               	movwf	(receiveData@u+1)& (0+255),b
  1890  001442  0E00               	movlw	0
  1891  001444  6F75               	movwf	receiveData@u& (0+255),b
  1892  001446  D010               	goto	l6342
  1893  001448                     l6338:
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;FastTransfer.c: 108: serial_read();
  1897  001448  D801               	call	u7428
  1898  00144A  D00A               	goto	l6340
  1899  00144C                     u7428:
  1900  00144C  0005               	push	
  1901  00144E  6EFA               	movwf	pclath,c
  1902  001450  5033               	movf	_serial_read,w,c
  1903  001452  6EFD               	movwf	tosl,c
  1904  001454  5034               	movf	_serial_read+1,w,c
  1905  001456  6EFE               	movwf	tosh,c
  1906  001458  50F8               	movf	tblptru,w,c
  1907  00145A  6EFF               	movwf	tosu,c
  1908  00145C  50FA               	movf	pclath,w,c
  1909  00145E  0012               	return		;indir
  1910  001460                     l6340:
  1911  001460  0100               	movlb	0	; () banked
  1912  001462  4B75               	infsnz	receiveData@u& (0+255),f,b
  1913  001464  2B76               	incf	(receiveData@u+1)& (0+255),f,b
  1914  001466  D000               	goto	l6342
  1915  001468                     l6342:
  1916                           
  1917                           ; BSR set to: 0
  1918  001468  5042               	movf	_rx_len,w,c
  1919  00146A  0100               	movlb	0	; () banked
  1920  00146C  6F67               	movwf	??_receiveData& (0+255),b
  1921  00146E  6B68               	clrf	(??_receiveData+1)& (0+255),b
  1922  001470  0E01               	movlw	1
  1923  001472  0100               	movlb	0	; () banked
  1924  001474  2767               	addwf	??_receiveData& (0+255),f,b
  1925  001476  0E00               	movlw	0
  1926  001478  2368               	addwfc	(??_receiveData+1)& (0+255),f,b
  1927  00147A  0100               	movlb	0	; () banked
  1928  00147C  5175               	movf	receiveData@u& (0+255),w,b
  1929  00147E  0100               	movlb	0	; () banked
  1930  001480  5D67               	subwf	??_receiveData& (0+255),w,b
  1931  001482  0100               	movlb	0	; () banked
  1932  001484  5168               	movf	(??_receiveData+1)& (0+255),w,b
  1933  001486  0A80               	xorlw	128
  1934  001488  0100               	movlb	0	; () banked
  1935  00148A  6F69               	movwf	(??_receiveData+2)& (0+255),b
  1936  00148C  0100               	movlb	0	; () banked
  1937  00148E  5176               	movf	(receiveData@u+1)& (0+255),w,b
  1938  001490  0A80               	xorlw	128
  1939  001492  0100               	movlb	0	; () banked
  1940  001494  5969               	subwfb	(??_receiveData+2)& (0+255),w,b
  1941  001496  B0D8               	btfsc	status,0,c
  1942  001498  D7D7               	goto	l6338
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;FastTransfer.c: 109: }
  1946                           ;FastTransfer.c: 110: rx_len = 0;
  1947                           
  1948                           ; BSR set to: 0
  1949  00149A  0E00               	movlw	0
  1950  00149C  6E42               	movwf	_rx_len,c
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;FastTransfer.c: 111: return 0;
  1954  00149E  0E00               	movlw	0
  1955                           
  1956                           ; BSR set to: 0
  1957  0014A0  0012               	return	
  1958                           
  1959                           ; BSR set to: 0
  1960                           
  1961                           ; BSR set to: 0
  1962                           
  1963                           ; BSR set to: 0
  1964  0014A2  D000               	goto	l6350
  1965  0014A4                     l6350:
  1966                           
  1967                           ;FastTransfer.c: 112: }
  1968                           ;FastTransfer.c: 114: }
  1969                           ;FastTransfer.c: 115: }
  1970                           ;FastTransfer.c: 116: }
  1971                           ;FastTransfer.c: 119: if (rx_len != 0) {
  1972  0014A4  5042               	movf	_rx_len,w,c
  1973  0014A6  B4D8               	btfsc	status,2,c
  1974  0014A8  D2B2               	goto	l6474
  1975                           
  1976                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  1977  0014AA  5041               	movf	_rx_array_inx,w,c
  1978  0014AC  B4D8               	btfsc	status,2,c
  1979  0014AE  D002               	goto	l6356
  1980  0014B0  D049               	goto	l6374
  1981                           
  1982                           ;FastTransfer.c: 123: while (!(serial_available() >= 1));
  1983  0014B2  D000               	goto	l6356
  1984  0014B4                     l6356:
  1985  0014B4  D801               	call	u7468
  1986  0014B6  D00A               	goto	u7469
  1987  0014B8                     u7468:
  1988  0014B8  0005               	push	
  1989  0014BA  6EFA               	movwf	pclath,c
  1990  0014BC  5031               	movf	_serial_available,w,c
  1991  0014BE  6EFD               	movwf	tosl,c
  1992  0014C0  5032               	movf	_serial_available+1,w,c
  1993  0014C2  6EFE               	movwf	tosh,c
  1994  0014C4  50F8               	movf	tblptru,w,c
  1995  0014C6  6EFF               	movwf	tosu,c
  1996  0014C8  50FA               	movf	pclath,w,c
  1997  0014CA  0012               	return		;indir
  1998  0014CC                     u7469:
  1999  0014CC  BE1E               	btfsc	?_Receive_available+1,7,c
  2000  0014CE  D7F2               	goto	l6356
  2001  0014D0  501E               	movf	?_Receive_available+1,w,c
  2002  0014D2  E105               	bnz	l6358
  2003  0014D4  041D               	decf	?_Receive_available,w,c
  2004  0014D6  B0D8               	btfsc	status,0,c
  2005  0014D8  D002               	goto	l6358
  2006  0014DA  D7EC               	goto	l6356
  2007  0014DC  D000               	goto	l6358
  2008  0014DE                     l6358:
  2009                           
  2010                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2011  0014DE  D801               	call	u7488
  2012  0014E0  D00B               	goto	u7489
  2013  0014E2                     u7488:
  2014  0014E2  0005               	push	
  2015  0014E4  0100               	movlb	0	; () banked
  2016  0014E6  6EFA               	movwf	pclath,c
  2017  0014E8  51E8               	movf	_serial_peek& (0+255),w,b
  2018  0014EA  6EFD               	movwf	tosl,c
  2019  0014EC  51E9               	movf	(_serial_peek+1)& (0+255),w,b
  2020  0014EE  6EFE               	movwf	tosh,c
  2021  0014F0  50F8               	movf	tblptru,w,c
  2022  0014F2  6EFF               	movwf	tosu,c
  2023  0014F4  50FA               	movf	pclath,w,c
  2024  0014F6  0012               	return		;indir
  2025  0014F8                     u7489:
  2026  0014F8  0AFF               	xorlw	255
  2027  0014FA  A4D8               	btfss	status,2,c
  2028  0014FC  D023               	goto	l6374
  2029                           
  2030                           ;FastTransfer.c: 125: CRCcheck();
  2031  0014FE  EC57  F017         	call	_CRCcheck	;wreg free
  2032                           
  2033                           ;FastTransfer.c: 126: rx_len = 0;
  2034  001502  0E00               	movlw	0
  2035  001504  6E42               	movwf	_rx_len,c
  2036                           
  2037                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2038  001506  0E00               	movlw	0
  2039  001508  6E41               	movwf	_rx_array_inx,c
  2040                           
  2041                           ;FastTransfer.c: 128: return 0;
  2042  00150A  0E00               	movlw	0
  2043  00150C  0012               	return	
  2044                           
  2045                           ;FastTransfer.c: 129: }
  2046                           ;FastTransfer.c: 130: }
  2047                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2048  00150E  D01A               	goto	l6374
  2049  001510                     l6370:
  2050                           
  2051                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2052  001510  D801               	call	u7508
  2053  001512  D00A               	goto	u7509
  2054  001514                     u7508:
  2055  001514  0005               	push	
  2056  001516  6EFA               	movwf	pclath,c
  2057  001518  5033               	movf	_serial_read,w,c
  2058  00151A  6EFD               	movwf	tosl,c
  2059  00151C  5034               	movf	_serial_read+1,w,c
  2060  00151E  6EFE               	movwf	tosh,c
  2061  001520  50F8               	movf	tblptru,w,c
  2062  001522  6EFF               	movwf	tosu,c
  2063  001524  50FA               	movf	pclath,w,c
  2064  001526  0012               	return		;indir
  2065  001528                     u7509:
  2066  001528  0100               	movlb	0	; () banked
  2067  00152A  6F67               	movwf	??_receiveData& (0+255),b
  2068  00152C  5041               	movf	_rx_array_inx,w,c
  2069  00152E  0D01               	mullw	1
  2070  001530  0E00               	movlw	low _rx_buffer
  2071  001532  24F3               	addwf	prodl,w,c
  2072  001534  6ED9               	movwf	fsr2l,c
  2073  001536  0E03               	movlw	high _rx_buffer
  2074  001538  20F4               	addwfc	prodh,w,c
  2075  00153A  6EDA               	movwf	fsr2h,c
  2076  00153C  C067  FFDF         	movff	??_receiveData,indf2
  2077                           
  2078                           ; BSR set to: 0
  2079  001540  2A41               	incf	_rx_array_inx,f,c
  2080  001542  D000               	goto	l6374
  2081  001544                     l6374:
  2082  001544  D801               	call	u7518
  2083  001546  D00A               	goto	u7519
  2084  001548                     u7518:
  2085  001548  0005               	push	
  2086  00154A  6EFA               	movwf	pclath,c
  2087  00154C  5031               	movf	_serial_available,w,c
  2088  00154E  6EFD               	movwf	tosl,c
  2089  001550  5032               	movf	_serial_available+1,w,c
  2090  001552  6EFE               	movwf	tosh,c
  2091  001554  50F8               	movf	tblptru,w,c
  2092  001556  6EFF               	movwf	tosu,c
  2093  001558  50FA               	movf	pclath,w,c
  2094  00155A  0012               	return		;indir
  2095  00155C                     u7519:
  2096  00155C  501D               	movf	?_Receive_available,w,c
  2097  00155E  101E               	iorwf	?_Receive_available+1,w,c
  2098  001560  B4D8               	btfsc	status,2,c
  2099  001562  D006               	goto	l6378
  2100  001564  5041               	movf	_rx_array_inx,w,c
  2101  001566  5C42               	subwf	_rx_len,w,c
  2102  001568  A0D8               	btfss	status,0,c
  2103  00156A  D002               	goto	l6378
  2104  00156C  D7D1               	goto	l6370
  2105  00156E  D000               	goto	l6378
  2106  001570                     l6378:
  2107                           
  2108                           ;FastTransfer.c: 135: }
  2109                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2110  001570  5042               	movf	_rx_len,w,c
  2111  001572  0100               	movlb	0	; () banked
  2112  001574  6F67               	movwf	??_receiveData& (0+255),b
  2113  001576  6B68               	clrf	(??_receiveData+1)& (0+255),b
  2114  001578  0EFF               	movlw	255
  2115  00157A  0100               	movlb	0	; () banked
  2116  00157C  6F69               	movwf	(??_receiveData+2)& (0+255),b
  2117  00157E  0EFF               	movlw	255
  2118  001580  0100               	movlb	0	; () banked
  2119  001582  6F6A               	movwf	(??_receiveData+3)& (0+255),b
  2120  001584  5041               	movf	_rx_array_inx,w,c
  2121  001586  0100               	movlb	0	; () banked
  2122  001588  6F6B               	movwf	(??_receiveData+4)& (0+255),b
  2123  00158A  6B6C               	clrf	(??_receiveData+5)& (0+255),b
  2124  00158C  0100               	movlb	0	; () banked
  2125  00158E  5169               	movf	(??_receiveData+2)& (0+255),w,b
  2126  001590  0100               	movlb	0	; () banked
  2127  001592  276B               	addwf	(??_receiveData+4)& (0+255),f,b
  2128  001594  0100               	movlb	0	; () banked
  2129  001596  516A               	movf	(??_receiveData+3)& (0+255),w,b
  2130  001598  0100               	movlb	0	; () banked
  2131  00159A  236C               	addwfc	(??_receiveData+5)& (0+255),f,b
  2132  00159C  0100               	movlb	0	; () banked
  2133  00159E  5167               	movf	??_receiveData& (0+255),w,b
  2134  0015A0  0100               	movlb	0	; () banked
  2135  0015A2  196B               	xorwf	(??_receiveData+4)& (0+255),w,b
  2136  0015A4  E105               	bnz	u7541
  2137  0015A6  0100               	movlb	0	; () banked
  2138  0015A8  5168               	movf	(??_receiveData+1)& (0+255),w,b
  2139  0015AA  0100               	movlb	0	; () banked
  2140  0015AC  196C               	xorwf	(??_receiveData+5)& (0+255),w,b
  2141  0015AE  A4D8               	btfss	status,2,c
  2142  0015B0                     u7541:
  2143  0015B0  D22E               	goto	l6474
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2147  0015B2  0E00               	movlw	low _rx_buffer
  2148  0015B4  6E1B               	movwf	CRC8@data,c
  2149  0015B6  0E03               	movlw	high _rx_buffer
  2150  0015B8  6E1C               	movwf	CRC8@data+1,c
  2151  0015BA  C042  F01D         	movff	_rx_len,CRC8@len
  2152  0015BE  ECDA  F024         	call	_CRC8	;wreg free
  2153  0015C2  6E3C               	movwf	_calc_CS,c
  2154                           
  2155                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2156  0015C4  0EFF               	movlw	255
  2157  0015C6  0100               	movlb	0	; () banked
  2158  0015C8  6F67               	movwf	??_receiveData& (0+255),b
  2159  0015CA  0EFF               	movlw	255
  2160  0015CC  0100               	movlb	0	; () banked
  2161  0015CE  6F68               	movwf	(??_receiveData+1)& (0+255),b
  2162  0015D0  5041               	movf	_rx_array_inx,w,c
  2163  0015D2  0100               	movlb	0	; () banked
  2164  0015D4  6F69               	movwf	(??_receiveData+2)& (0+255),b
  2165  0015D6  6B6A               	clrf	(??_receiveData+3)& (0+255),b
  2166  0015D8  0100               	movlb	0	; () banked
  2167  0015DA  5167               	movf	??_receiveData& (0+255),w,b
  2168  0015DC  0100               	movlb	0	; () banked
  2169  0015DE  2769               	addwf	(??_receiveData+2)& (0+255),f,b
  2170  0015E0  0100               	movlb	0	; () banked
  2171  0015E2  5168               	movf	(??_receiveData+1)& (0+255),w,b
  2172  0015E4  0100               	movlb	0	; () banked
  2173  0015E6  236A               	addwfc	(??_receiveData+3)& (0+255),f,b
  2174  0015E8  0E00               	movlw	low _rx_buffer
  2175  0015EA  0100               	movlb	0	; () banked
  2176  0015EC  2569               	addwf	(??_receiveData+2)& (0+255),w,b
  2177  0015EE  6ED9               	movwf	fsr2l,c
  2178  0015F0  0E03               	movlw	high _rx_buffer
  2179  0015F2  0100               	movlb	0	; () banked
  2180  0015F4  216A               	addwfc	(??_receiveData+3)& (0+255),w,b
  2181  0015F6  6EDA               	movwf	fsr2h,c
  2182  0015F8  503C               	movf	_calc_CS,w,c
  2183  0015FA  18DE               	xorwf	postinc2,w,c
  2184  0015FC  A4D8               	btfss	status,2,c
  2185  0015FE  D13E               	goto	l6436
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;FastTransfer.c: 147: int r;
  2189                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2190  001600  0E00               	movlw	0
  2191  001602  0100               	movlb	0	; () banked
  2192  001604  6F78               	movwf	(receiveData@r+1)& (0+255),b
  2193  001606  0E00               	movlw	0
  2194  001608  6F77               	movwf	receiveData@r& (0+255),b
  2195  00160A  D05E               	goto	l6396
  2196  00160C                     l6386:
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2200  00160C  0E00               	movlw	low _rx_buffer
  2201  00160E  0100               	movlb	0	; () banked
  2202  001610  2577               	addwf	receiveData@r& (0+255),w,b
  2203  001612  6ED9               	movwf	fsr2l,c
  2204  001614  0E03               	movlw	high _rx_buffer
  2205  001616  0100               	movlb	0	; () banked
  2206  001618  2178               	addwfc	(receiveData@r+1)& (0+255),w,b
  2207  00161A  6EDA               	movwf	fsr2h,c
  2208  00161C  503D               	movf	_maxDataAddress,w,c
  2209  00161E  5CDE               	subwf	postinc2,w,c
  2210  001620  B0D8               	btfsc	status,0,c
  2211  001622  D043               	goto	l6392
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2215  001624  0E01               	movlw	1
  2216  001626  0100               	movlb	0	; () banked
  2217  001628  2577               	addwf	receiveData@r& (0+255),w,b
  2218  00162A  0100               	movlb	0	; () banked
  2219  00162C  6F67               	movwf	??_receiveData& (0+255),b
  2220  00162E  0E00               	movlw	0
  2221  001630  0100               	movlb	0	; () banked
  2222  001632  2178               	addwfc	(receiveData@r+1)& (0+255),w,b
  2223  001634  0100               	movlb	0	; () banked
  2224  001636  6F68               	movwf	(??_receiveData+1)& (0+255),b
  2225  001638  0E00               	movlw	low _rx_buffer
  2226  00163A  0100               	movlb	0	; () banked
  2227  00163C  2567               	addwf	??_receiveData& (0+255),w,b
  2228  00163E  6ED9               	movwf	fsr2l,c
  2229  001640  0E03               	movlw	high _rx_buffer
  2230  001642  0100               	movlb	0	; () banked
  2231  001644  2168               	addwfc	(??_receiveData+1)& (0+255),w,b
  2232  001646  6EDA               	movwf	fsr2h,c
  2233  001648  50DF               	movf	indf2,w,c
  2234  00164A  6E43               	movwf	_group,c
  2235                           
  2236                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2237  00164C  0E02               	movlw	2
  2238  00164E  0100               	movlb	0	; () banked
  2239  001650  2577               	addwf	receiveData@r& (0+255),w,b
  2240  001652  0100               	movlb	0	; () banked
  2241  001654  6F67               	movwf	??_receiveData& (0+255),b
  2242  001656  0E00               	movlw	0
  2243  001658  0100               	movlb	0	; () banked
  2244  00165A  2178               	addwfc	(receiveData@r+1)& (0+255),w,b
  2245  00165C  0100               	movlb	0	; () banked
  2246  00165E  6F68               	movwf	(??_receiveData+1)& (0+255),b
  2247  001660  0E00               	movlw	low _rx_buffer
  2248  001662  0100               	movlb	0	; () banked
  2249  001664  2567               	addwf	??_receiveData& (0+255),w,b
  2250  001666  6ED9               	movwf	fsr2l,c
  2251  001668  0E03               	movlw	high _rx_buffer
  2252  00166A  0100               	movlb	0	; () banked
  2253  00166C  2168               	addwfc	(??_receiveData+1)& (0+255),w,b
  2254  00166E  6EDA               	movwf	fsr2h,c
  2255  001670  50DF               	movf	indf2,w,c
  2256  001672  6E44               	movwf	_group+1,c
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2260  001674  0E00               	movlw	low _rx_buffer
  2261  001676  0100               	movlb	0	; () banked
  2262  001678  2577               	addwf	receiveData@r& (0+255),w,b
  2263  00167A  6ED9               	movwf	fsr2l,c
  2264  00167C  0E03               	movlw	high _rx_buffer
  2265  00167E  0100               	movlb	0	; () banked
  2266  001680  2178               	addwfc	(receiveData@r+1)& (0+255),w,b
  2267  001682  6EDA               	movwf	fsr2h,c
  2268  001684  50DF               	movf	indf2,w,c
  2269  001686  0100               	movlb	0	; () banked
  2270  001688  6F67               	movwf	??_receiveData& (0+255),b
  2271  00168A  0100               	movlb	0	; () banked
  2272  00168C  5167               	movf	??_receiveData& (0+255),w,b
  2273  00168E  0D02               	mullw	2
  2274  001690  50F3               	movf	prodl,w,c
  2275  001692  0100               	movlb	0	; () banked
  2276  001694  25E6               	addwf	_receiveArrayAddress& (0+255),w,b
  2277  001696  6ED9               	movwf	fsr2l,c
  2278  001698  50F4               	movf	prodh,w,c
  2279  00169A  0100               	movlb	0	; () banked
  2280  00169C  21E7               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  2281  00169E  6EDA               	movwf	fsr2h,c
  2282  0016A0  C043  FFDE         	movff	_group,postinc2
  2283  0016A4  C044  FFDD         	movff	_group+1,postdec2
  2284                           
  2285                           ;FastTransfer.c: 153: } else {
  2286  0016A8  D004               	goto	l6394
  2287  0016AA                     l6392:
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2291  0016AA  0100               	movlb	0	; () banked
  2292  0016AC  4BE2               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2293  0016AE  2BE3               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2294  0016B0  D000               	goto	l6394
  2295  0016B2                     l6394:
  2296                           
  2297                           ; BSR set to: 0
  2298  0016B2  0E03               	movlw	3
  2299  0016B4  0100               	movlb	0	; () banked
  2300  0016B6  2577               	addwf	receiveData@r& (0+255),w,b
  2301  0016B8  0100               	movlb	0	; () banked
  2302  0016BA  6F77               	movwf	receiveData@r& (0+255),b
  2303  0016BC  0E00               	movlw	0
  2304  0016BE  0100               	movlb	0	; () banked
  2305  0016C0  2178               	addwfc	(receiveData@r+1)& (0+255),w,b
  2306  0016C2  0100               	movlb	0	; () banked
  2307  0016C4  6F78               	movwf	(receiveData@r+1)& (0+255),b
  2308  0016C6  D000               	goto	l6396
  2309  0016C8                     l6396:
  2310                           
  2311                           ; BSR set to: 0
  2312  0016C8  5042               	movf	_rx_len,w,c
  2313  0016CA  0100               	movlb	0	; () banked
  2314  0016CC  6F67               	movwf	??_receiveData& (0+255),b
  2315  0016CE  6B68               	clrf	(??_receiveData+1)& (0+255),b
  2316  0016D0  0100               	movlb	0	; () banked
  2317  0016D2  5167               	movf	??_receiveData& (0+255),w,b
  2318  0016D4  0100               	movlb	0	; () banked
  2319  0016D6  5D77               	subwf	receiveData@r& (0+255),w,b
  2320  0016D8  0100               	movlb	0	; () banked
  2321  0016DA  5178               	movf	(receiveData@r+1)& (0+255),w,b
  2322  0016DC  0A80               	xorlw	128
  2323  0016DE  0100               	movlb	0	; () banked
  2324  0016E0  6F69               	movwf	(??_receiveData+2)& (0+255),b
  2325  0016E2  0100               	movlb	0	; () banked
  2326  0016E4  5168               	movf	(??_receiveData+1)& (0+255),w,b
  2327  0016E6  0A80               	xorlw	128
  2328  0016E8  0100               	movlb	0	; () banked
  2329  0016EA  5969               	subwfb	(??_receiveData+2)& (0+255),w,b
  2330  0016EC  A0D8               	btfss	status,0,c
  2331  0016EE  D78E               	goto	l6386
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;FastTransfer.c: 155: }
  2335                           ;FastTransfer.c: 156: }
  2336                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2337                           
  2338                           ; BSR set to: 0
  2339  0016F0  5039               	movf	_AKNAKsend,w,c
  2340  0016F2  B4D8               	btfsc	status,2,c
  2341  0016F4  D0BC               	goto	l6426
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;FastTransfer.c: 160: unsigned char holder[3];
  2345                           ;FastTransfer.c: 161: holder[0] = 255;
  2346  0016F6  0100               	movlb	0	; () banked
  2347  0016F8  696D               	setf	receiveData@holder& (0+255),b
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;FastTransfer.c: 162: holder[1] = 1;
  2351  0016FA  0E01               	movlw	1
  2352  0016FC  0100               	movlb	0	; () banked
  2353  0016FE  6F6E               	movwf	(receiveData@holder+1)& (0+255),b
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2357  001700  0EFF               	movlw	255
  2358  001702  0100               	movlb	0	; () banked
  2359  001704  6F67               	movwf	??_receiveData& (0+255),b
  2360  001706  0EFF               	movlw	255
  2361  001708  0100               	movlb	0	; () banked
  2362  00170A  6F68               	movwf	(??_receiveData+1)& (0+255),b
  2363  00170C  5041               	movf	_rx_array_inx,w,c
  2364  00170E  0100               	movlb	0	; () banked
  2365  001710  6F69               	movwf	(??_receiveData+2)& (0+255),b
  2366  001712  6B6A               	clrf	(??_receiveData+3)& (0+255),b
  2367  001714  0100               	movlb	0	; () banked
  2368  001716  5167               	movf	??_receiveData& (0+255),w,b
  2369  001718  0100               	movlb	0	; () banked
  2370  00171A  2769               	addwf	(??_receiveData+2)& (0+255),f,b
  2371  00171C  0100               	movlb	0	; () banked
  2372  00171E  5168               	movf	(??_receiveData+1)& (0+255),w,b
  2373  001720  0100               	movlb	0	; () banked
  2374  001722  236A               	addwfc	(??_receiveData+3)& (0+255),f,b
  2375  001724  0E00               	movlw	low _rx_buffer
  2376  001726  0100               	movlb	0	; () banked
  2377  001728  2569               	addwf	(??_receiveData+2)& (0+255),w,b
  2378  00172A  6ED9               	movwf	fsr2l,c
  2379  00172C  0E03               	movlw	high _rx_buffer
  2380  00172E  0100               	movlb	0	; () banked
  2381  001730  216A               	addwfc	(??_receiveData+3)& (0+255),w,b
  2382  001732  6EDA               	movwf	fsr2h,c
  2383  001734  50DF               	movf	indf2,w,c
  2384  001736  0100               	movlb	0	; () banked
  2385  001738  6F6F               	movwf	(receiveData@holder+2)& (0+255),b
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2389  00173A  0E6D               	movlw	low receiveData@holder
  2390  00173C  6E1B               	movwf	CRC8@data,c
  2391  00173E  0E00               	movlw	high receiveData@holder
  2392  001740  6E1C               	movwf	CRC8@data+1,c
  2393  001742  0E03               	movlw	3
  2394  001744  6E1D               	movwf	CRC8@len,c
  2395  001746  ECDA  F024         	call	_CRC8	;wreg free
  2396  00174A  0100               	movlb	0	; () banked
  2397  00174C  6F73               	movwf	receiveData@crcHolder& (0+255),b
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;FastTransfer.c: 165: serial_write(0x06);
  2401  00174E  D801               	call	u7598
  2402  001750  D00B               	goto	l6410
  2403  001752                     u7598:
  2404  001752  0005               	push	
  2405  001754  6EFA               	movwf	pclath,c
  2406  001756  5035               	movf	_serial_write,w,c
  2407  001758  6EFD               	movwf	tosl,c
  2408  00175A  5036               	movf	_serial_write+1,w,c
  2409  00175C  6EFE               	movwf	tosh,c
  2410  00175E  50F8               	movf	tblptru,w,c
  2411  001760  6EFF               	movwf	tosu,c
  2412  001762  50FA               	movf	pclath,w,c
  2413  001764  0E06               	movlw	6
  2414  001766  0012               	return		;indir
  2415  001768                     l6410:
  2416                           
  2417                           ;FastTransfer.c: 166: serial_write(0x85);
  2418  001768  D801               	call	u7608
  2419  00176A  D00B               	goto	l6412
  2420  00176C                     u7608:
  2421  00176C  0005               	push	
  2422  00176E  6EFA               	movwf	pclath,c
  2423  001770  5035               	movf	_serial_write,w,c
  2424  001772  6EFD               	movwf	tosl,c
  2425  001774  5036               	movf	_serial_write+1,w,c
  2426  001776  6EFE               	movwf	tosh,c
  2427  001778  50F8               	movf	tblptru,w,c
  2428  00177A  6EFF               	movwf	tosu,c
  2429  00177C  50FA               	movf	pclath,w,c
  2430  00177E  0E85               	movlw	133
  2431  001780  0012               	return		;indir
  2432  001782                     l6412:
  2433                           
  2434                           ;FastTransfer.c: 167: serial_write(returnAddress);
  2435  001782  D801               	call	u7618
  2436  001784  D00B               	goto	l6414
  2437  001786                     u7618:
  2438  001786  0005               	push	
  2439  001788  6EFA               	movwf	pclath,c
  2440  00178A  5035               	movf	_serial_write,w,c
  2441  00178C  6EFD               	movwf	tosl,c
  2442  00178E  5036               	movf	_serial_write+1,w,c
  2443  001790  6EFE               	movwf	tosh,c
  2444  001792  50F8               	movf	tblptru,w,c
  2445  001794  6EFF               	movwf	tosu,c
  2446  001796  50FA               	movf	pclath,w,c
  2447  001798  503F               	movf	_returnAddress,w,c
  2448  00179A  0012               	return		;indir
  2449  00179C                     l6414:
  2450                           
  2451                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  2452  00179C  D801               	call	u7628
  2453  00179E  D00B               	goto	l6416
  2454  0017A0                     u7628:
  2455  0017A0  0005               	push	
  2456  0017A2  6EFA               	movwf	pclath,c
  2457  0017A4  5035               	movf	_serial_write,w,c
  2458  0017A6  6EFD               	movwf	tosl,c
  2459  0017A8  5036               	movf	_serial_write+1,w,c
  2460  0017AA  6EFE               	movwf	tosh,c
  2461  0017AC  50F8               	movf	tblptru,w,c
  2462  0017AE  6EFF               	movwf	tosu,c
  2463  0017B0  50FA               	movf	pclath,w,c
  2464  0017B2  503E               	movf	_moduleAddress,w,c
  2465  0017B4  0012               	return		;indir
  2466  0017B6                     l6416:
  2467                           
  2468                           ;FastTransfer.c: 169: serial_write(3);
  2469  0017B6  D801               	call	u7638
  2470  0017B8  D00B               	goto	l6418
  2471  0017BA                     u7638:
  2472  0017BA  0005               	push	
  2473  0017BC  6EFA               	movwf	pclath,c
  2474  0017BE  5035               	movf	_serial_write,w,c
  2475  0017C0  6EFD               	movwf	tosl,c
  2476  0017C2  5036               	movf	_serial_write+1,w,c
  2477  0017C4  6EFE               	movwf	tosh,c
  2478  0017C6  50F8               	movf	tblptru,w,c
  2479  0017C8  6EFF               	movwf	tosu,c
  2480  0017CA  50FA               	movf	pclath,w,c
  2481  0017CC  0E03               	movlw	3
  2482  0017CE  0012               	return		;indir
  2483  0017D0                     l6418:
  2484                           
  2485                           ;FastTransfer.c: 170: serial_write(255);
  2486  0017D0  D801               	call	u7648
  2487  0017D2  D00B               	goto	l6420
  2488  0017D4                     u7648:
  2489  0017D4  0005               	push	
  2490  0017D6  6EFA               	movwf	pclath,c
  2491  0017D8  5035               	movf	_serial_write,w,c
  2492  0017DA  6EFD               	movwf	tosl,c
  2493  0017DC  5036               	movf	_serial_write+1,w,c
  2494  0017DE  6EFE               	movwf	tosh,c
  2495  0017E0  50F8               	movf	tblptru,w,c
  2496  0017E2  6EFF               	movwf	tosu,c
  2497  0017E4  50FA               	movf	pclath,w,c
  2498  0017E6  0EFF               	movlw	255
  2499  0017E8  0012               	return		;indir
  2500  0017EA                     l6420:
  2501                           
  2502                           ;FastTransfer.c: 171: serial_write(1);
  2503  0017EA  D801               	call	u7658
  2504  0017EC  D00B               	goto	l6422
  2505  0017EE                     u7658:
  2506  0017EE  0005               	push	
  2507  0017F0  6EFA               	movwf	pclath,c
  2508  0017F2  5035               	movf	_serial_write,w,c
  2509  0017F4  6EFD               	movwf	tosl,c
  2510  0017F6  5036               	movf	_serial_write+1,w,c
  2511  0017F8  6EFE               	movwf	tosh,c
  2512  0017FA  50F8               	movf	tblptru,w,c
  2513  0017FC  6EFF               	movwf	tosu,c
  2514  0017FE  50FA               	movf	pclath,w,c
  2515  001800  0E01               	movlw	1
  2516  001802  0012               	return		;indir
  2517  001804                     l6422:
  2518                           
  2519                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  2520  001804  D801               	call	u7668
  2521  001806  D025               	goto	l6424
  2522  001808                     u7668:
  2523  001808  0005               	push	
  2524  00180A  6EFA               	movwf	pclath,c
  2525  00180C  5035               	movf	_serial_write,w,c
  2526  00180E  6EFD               	movwf	tosl,c
  2527  001810  5036               	movf	_serial_write+1,w,c
  2528  001812  6EFE               	movwf	tosh,c
  2529  001814  50F8               	movf	tblptru,w,c
  2530  001816  6EFF               	movwf	tosu,c
  2531  001818  50FA               	movf	pclath,w,c
  2532  00181A  0EFF               	movlw	255
  2533  00181C  0100               	movlb	0	; () banked
  2534  00181E  6F67               	movwf	??_receiveData& (0+255),b
  2535  001820  0EFF               	movlw	255
  2536  001822  0100               	movlb	0	; () banked
  2537  001824  6F68               	movwf	(??_receiveData+1)& (0+255),b
  2538  001826  5041               	movf	_rx_array_inx,w,c
  2539  001828  0100               	movlb	0	; () banked
  2540  00182A  6F69               	movwf	(??_receiveData+2)& (0+255),b
  2541  00182C  6B6A               	clrf	(??_receiveData+3)& (0+255),b
  2542  00182E  0100               	movlb	0	; () banked
  2543  001830  5167               	movf	??_receiveData& (0+255),w,b
  2544  001832  0100               	movlb	0	; () banked
  2545  001834  2769               	addwf	(??_receiveData+2)& (0+255),f,b
  2546  001836  0100               	movlb	0	; () banked
  2547  001838  5168               	movf	(??_receiveData+1)& (0+255),w,b
  2548  00183A  0100               	movlb	0	; () banked
  2549  00183C  236A               	addwfc	(??_receiveData+3)& (0+255),f,b
  2550  00183E  0E00               	movlw	low _rx_buffer
  2551  001840  0100               	movlb	0	; () banked
  2552  001842  2569               	addwf	(??_receiveData+2)& (0+255),w,b
  2553  001844  6ED9               	movwf	fsr2l,c
  2554  001846  0E03               	movlw	high _rx_buffer
  2555  001848  0100               	movlb	0	; () banked
  2556  00184A  216A               	addwfc	(??_receiveData+3)& (0+255),w,b
  2557  00184C  6EDA               	movwf	fsr2h,c
  2558  00184E  50DF               	movf	indf2,w,c
  2559  001850  0012               	return		;indir
  2560  001852                     l6424:
  2561                           
  2562                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2563  001852  D801               	call	u7678
  2564  001854  D00C               	goto	l6426
  2565  001856                     u7678:
  2566  001856  0005               	push	
  2567  001858  6EFA               	movwf	pclath,c
  2568  00185A  5035               	movf	_serial_write,w,c
  2569  00185C  6EFD               	movwf	tosl,c
  2570  00185E  5036               	movf	_serial_write+1,w,c
  2571  001860  6EFE               	movwf	tosh,c
  2572  001862  50F8               	movf	tblptru,w,c
  2573  001864  6EFF               	movwf	tosu,c
  2574  001866  50FA               	movf	pclath,w,c
  2575  001868  0100               	movlb	0	; () banked
  2576  00186A  5173               	movf	receiveData@crcHolder& (0+255),w,b
  2577  00186C  0012               	return		;indir
  2578  00186E                     l6426:
  2579                           
  2580                           ;FastTransfer.c: 174: }
  2581                           ;FastTransfer.c: 178: rx_len = 0;
  2582  00186E  0E00               	movlw	0
  2583  001870  6E42               	movwf	_rx_len,c
  2584                           
  2585                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2586  001872  0E00               	movlw	0
  2587  001874  6E41               	movwf	_rx_array_inx,c
  2588                           
  2589                           ;FastTransfer.c: 180: return 1;
  2590  001876  0E01               	movlw	1
  2591  001878  0012               	return	
  2592                           
  2593                           ;FastTransfer.c: 181: } else {
  2594  00187A  D0C9               	goto	l6474
  2595  00187C                     l6436:
  2596                           
  2597                           ;FastTransfer.c: 182: crcErrorCounter++;
  2598  00187C  0100               	movlb	0	; () banked
  2599  00187E  4BE0               	infsnz	_crcErrorCounter& (0+255),f,b
  2600  001880  2BE1               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2604  001882  5039               	movf	_AKNAKsend,w,c
  2605  001884  B4D8               	btfsc	status,2,c
  2606  001886  D0BC               	goto	l6466
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;FastTransfer.c: 185: unsigned char holder[3];
  2610                           ;FastTransfer.c: 186: holder[0] = 255;
  2611  001888  0100               	movlb	0	; () banked
  2612  00188A  6970               	setf	receiveData@holder_1240& (0+255),b
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;FastTransfer.c: 187: holder[1] = 2;
  2616  00188C  0E02               	movlw	2
  2617  00188E  0100               	movlb	0	; () banked
  2618  001890  6F71               	movwf	(receiveData@holder_1240+1)& (0+255),b
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2622  001892  0EFF               	movlw	255
  2623  001894  0100               	movlb	0	; () banked
  2624  001896  6F67               	movwf	??_receiveData& (0+255),b
  2625  001898  0EFF               	movlw	255
  2626  00189A  0100               	movlb	0	; () banked
  2627  00189C  6F68               	movwf	(??_receiveData+1)& (0+255),b
  2628  00189E  5041               	movf	_rx_array_inx,w,c
  2629  0018A0  0100               	movlb	0	; () banked
  2630  0018A2  6F69               	movwf	(??_receiveData+2)& (0+255),b
  2631  0018A4  6B6A               	clrf	(??_receiveData+3)& (0+255),b
  2632  0018A6  0100               	movlb	0	; () banked
  2633  0018A8  5167               	movf	??_receiveData& (0+255),w,b
  2634  0018AA  0100               	movlb	0	; () banked
  2635  0018AC  2769               	addwf	(??_receiveData+2)& (0+255),f,b
  2636  0018AE  0100               	movlb	0	; () banked
  2637  0018B0  5168               	movf	(??_receiveData+1)& (0+255),w,b
  2638  0018B2  0100               	movlb	0	; () banked
  2639  0018B4  236A               	addwfc	(??_receiveData+3)& (0+255),f,b
  2640  0018B6  0E00               	movlw	low _rx_buffer
  2641  0018B8  0100               	movlb	0	; () banked
  2642  0018BA  2569               	addwf	(??_receiveData+2)& (0+255),w,b
  2643  0018BC  6ED9               	movwf	fsr2l,c
  2644  0018BE  0E03               	movlw	high _rx_buffer
  2645  0018C0  0100               	movlb	0	; () banked
  2646  0018C2  216A               	addwfc	(??_receiveData+3)& (0+255),w,b
  2647  0018C4  6EDA               	movwf	fsr2h,c
  2648  0018C6  50DF               	movf	indf2,w,c
  2649  0018C8  0100               	movlb	0	; () banked
  2650  0018CA  6F72               	movwf	(receiveData@holder_1240+2)& (0+255),b
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  2654  0018CC  0E70               	movlw	low receiveData@holder_1240
  2655  0018CE  6E1B               	movwf	CRC8@data,c
  2656  0018D0  0E00               	movlw	high receiveData@holder_1240
  2657  0018D2  6E1C               	movwf	CRC8@data+1,c
  2658  0018D4  0E03               	movlw	3
  2659  0018D6  6E1D               	movwf	CRC8@len,c
  2660  0018D8  ECDA  F024         	call	_CRC8
  2661  0018DC  0100               	movlb	0	; () banked
  2662  0018DE  6F74               	movwf	receiveData@crcHolder_1241& (0+255),b
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;FastTransfer.c: 190: serial_write(0x06);
  2666  0018E0  D801               	call	u7698
  2667  0018E2  D00B               	goto	l6450
  2668  0018E4                     u7698:
  2669  0018E4  0005               	push	
  2670  0018E6  6EFA               	movwf	pclath,c
  2671  0018E8  5035               	movf	_serial_write,w,c
  2672  0018EA  6EFD               	movwf	tosl,c
  2673  0018EC  5036               	movf	_serial_write+1,w,c
  2674  0018EE  6EFE               	movwf	tosh,c
  2675  0018F0  50F8               	movf	tblptru,w,c
  2676  0018F2  6EFF               	movwf	tosu,c
  2677  0018F4  50FA               	movf	pclath,w,c
  2678  0018F6  0E06               	movlw	6
  2679  0018F8  0012               	return		;indir
  2680  0018FA                     l6450:
  2681                           
  2682                           ;FastTransfer.c: 191: serial_write(0x85);
  2683  0018FA  D801               	call	u7708
  2684  0018FC  D00B               	goto	l6452
  2685  0018FE                     u7708:
  2686  0018FE  0005               	push	
  2687  001900  6EFA               	movwf	pclath,c
  2688  001902  5035               	movf	_serial_write,w,c
  2689  001904  6EFD               	movwf	tosl,c
  2690  001906  5036               	movf	_serial_write+1,w,c
  2691  001908  6EFE               	movwf	tosh,c
  2692  00190A  50F8               	movf	tblptru,w,c
  2693  00190C  6EFF               	movwf	tosu,c
  2694  00190E  50FA               	movf	pclath,w,c
  2695  001910  0E85               	movlw	133
  2696  001912  0012               	return		;indir
  2697  001914                     l6452:
  2698                           
  2699                           ;FastTransfer.c: 192: serial_write(returnAddress);
  2700  001914  D801               	call	u7718
  2701  001916  D00B               	goto	l6454
  2702  001918                     u7718:
  2703  001918  0005               	push	
  2704  00191A  6EFA               	movwf	pclath,c
  2705  00191C  5035               	movf	_serial_write,w,c
  2706  00191E  6EFD               	movwf	tosl,c
  2707  001920  5036               	movf	_serial_write+1,w,c
  2708  001922  6EFE               	movwf	tosh,c
  2709  001924  50F8               	movf	tblptru,w,c
  2710  001926  6EFF               	movwf	tosu,c
  2711  001928  50FA               	movf	pclath,w,c
  2712  00192A  503F               	movf	_returnAddress,w,c
  2713  00192C  0012               	return		;indir
  2714  00192E                     l6454:
  2715                           
  2716                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  2717  00192E  D801               	call	u7728
  2718  001930  D00B               	goto	l6456
  2719  001932                     u7728:
  2720  001932  0005               	push	
  2721  001934  6EFA               	movwf	pclath,c
  2722  001936  5035               	movf	_serial_write,w,c
  2723  001938  6EFD               	movwf	tosl,c
  2724  00193A  5036               	movf	_serial_write+1,w,c
  2725  00193C  6EFE               	movwf	tosh,c
  2726  00193E  50F8               	movf	tblptru,w,c
  2727  001940  6EFF               	movwf	tosu,c
  2728  001942  50FA               	movf	pclath,w,c
  2729  001944  503E               	movf	_moduleAddress,w,c
  2730  001946  0012               	return		;indir
  2731  001948                     l6456:
  2732                           
  2733                           ;FastTransfer.c: 194: serial_write(3);
  2734  001948  D801               	call	u7738
  2735  00194A  D00B               	goto	l6458
  2736  00194C                     u7738:
  2737  00194C  0005               	push	
  2738  00194E  6EFA               	movwf	pclath,c
  2739  001950  5035               	movf	_serial_write,w,c
  2740  001952  6EFD               	movwf	tosl,c
  2741  001954  5036               	movf	_serial_write+1,w,c
  2742  001956  6EFE               	movwf	tosh,c
  2743  001958  50F8               	movf	tblptru,w,c
  2744  00195A  6EFF               	movwf	tosu,c
  2745  00195C  50FA               	movf	pclath,w,c
  2746  00195E  0E03               	movlw	3
  2747  001960  0012               	return		;indir
  2748  001962                     l6458:
  2749                           
  2750                           ;FastTransfer.c: 195: serial_write(255);
  2751  001962  D801               	call	u7748
  2752  001964  D00B               	goto	l6460
  2753  001966                     u7748:
  2754  001966  0005               	push	
  2755  001968  6EFA               	movwf	pclath,c
  2756  00196A  5035               	movf	_serial_write,w,c
  2757  00196C  6EFD               	movwf	tosl,c
  2758  00196E  5036               	movf	_serial_write+1,w,c
  2759  001970  6EFE               	movwf	tosh,c
  2760  001972  50F8               	movf	tblptru,w,c
  2761  001974  6EFF               	movwf	tosu,c
  2762  001976  50FA               	movf	pclath,w,c
  2763  001978  0EFF               	movlw	255
  2764  00197A  0012               	return		;indir
  2765  00197C                     l6460:
  2766                           
  2767                           ;FastTransfer.c: 196: serial_write(2);
  2768  00197C  D801               	call	u7758
  2769  00197E  D00B               	goto	l6462
  2770  001980                     u7758:
  2771  001980  0005               	push	
  2772  001982  6EFA               	movwf	pclath,c
  2773  001984  5035               	movf	_serial_write,w,c
  2774  001986  6EFD               	movwf	tosl,c
  2775  001988  5036               	movf	_serial_write+1,w,c
  2776  00198A  6EFE               	movwf	tosh,c
  2777  00198C  50F8               	movf	tblptru,w,c
  2778  00198E  6EFF               	movwf	tosu,c
  2779  001990  50FA               	movf	pclath,w,c
  2780  001992  0E02               	movlw	2
  2781  001994  0012               	return		;indir
  2782  001996                     l6462:
  2783                           
  2784                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  2785  001996  D801               	call	u7768
  2786  001998  D025               	goto	l6464
  2787  00199A                     u7768:
  2788  00199A  0005               	push	
  2789  00199C  6EFA               	movwf	pclath,c
  2790  00199E  5035               	movf	_serial_write,w,c
  2791  0019A0  6EFD               	movwf	tosl,c
  2792  0019A2  5036               	movf	_serial_write+1,w,c
  2793  0019A4  6EFE               	movwf	tosh,c
  2794  0019A6  50F8               	movf	tblptru,w,c
  2795  0019A8  6EFF               	movwf	tosu,c
  2796  0019AA  50FA               	movf	pclath,w,c
  2797  0019AC  0EFF               	movlw	255
  2798  0019AE  0100               	movlb	0	; () banked
  2799  0019B0  6F67               	movwf	??_receiveData& (0+255),b
  2800  0019B2  0EFF               	movlw	255
  2801  0019B4  0100               	movlb	0	; () banked
  2802  0019B6  6F68               	movwf	(??_receiveData+1)& (0+255),b
  2803  0019B8  5041               	movf	_rx_array_inx,w,c
  2804  0019BA  0100               	movlb	0	; () banked
  2805  0019BC  6F69               	movwf	(??_receiveData+2)& (0+255),b
  2806  0019BE  6B6A               	clrf	(??_receiveData+3)& (0+255),b
  2807  0019C0  0100               	movlb	0	; () banked
  2808  0019C2  5167               	movf	??_receiveData& (0+255),w,b
  2809  0019C4  0100               	movlb	0	; () banked
  2810  0019C6  2769               	addwf	(??_receiveData+2)& (0+255),f,b
  2811  0019C8  0100               	movlb	0	; () banked
  2812  0019CA  5168               	movf	(??_receiveData+1)& (0+255),w,b
  2813  0019CC  0100               	movlb	0	; () banked
  2814  0019CE  236A               	addwfc	(??_receiveData+3)& (0+255),f,b
  2815  0019D0  0E00               	movlw	low _rx_buffer
  2816  0019D2  0100               	movlb	0	; () banked
  2817  0019D4  2569               	addwf	(??_receiveData+2)& (0+255),w,b
  2818  0019D6  6ED9               	movwf	fsr2l,c
  2819  0019D8  0E03               	movlw	high _rx_buffer
  2820  0019DA  0100               	movlb	0	; () banked
  2821  0019DC  216A               	addwfc	(??_receiveData+3)& (0+255),w,b
  2822  0019DE  6EDA               	movwf	fsr2h,c
  2823  0019E0  50DF               	movf	indf2,w,c
  2824  0019E2  0012               	return		;indir
  2825  0019E4                     l6464:
  2826                           
  2827                           ;FastTransfer.c: 198: serial_write(crcHolder);
  2828  0019E4  D801               	call	u7778
  2829  0019E6  D00C               	goto	l6466
  2830  0019E8                     u7778:
  2831  0019E8  0005               	push	
  2832  0019EA  6EFA               	movwf	pclath,c
  2833  0019EC  5035               	movf	_serial_write,w,c
  2834  0019EE  6EFD               	movwf	tosl,c
  2835  0019F0  5036               	movf	_serial_write+1,w,c
  2836  0019F2  6EFE               	movwf	tosh,c
  2837  0019F4  50F8               	movf	tblptru,w,c
  2838  0019F6  6EFF               	movwf	tosu,c
  2839  0019F8  50FA               	movf	pclath,w,c
  2840  0019FA  0100               	movlb	0	; () banked
  2841  0019FC  5174               	movf	receiveData@crcHolder_1241& (0+255),w,b
  2842  0019FE  0012               	return		;indir
  2843  001A00                     l6466:
  2844                           
  2845                           ;FastTransfer.c: 199: }
  2846                           ;FastTransfer.c: 202: rx_len = 0;
  2847  001A00  0E00               	movlw	0
  2848  001A02  6E42               	movwf	_rx_len,c
  2849                           
  2850                           ;FastTransfer.c: 203: rx_array_inx = 0;
  2851  001A04  0E00               	movlw	0
  2852  001A06  6E41               	movwf	_rx_array_inx,c
  2853                           
  2854                           ;FastTransfer.c: 204: return 0;
  2855  001A08  0E00               	movlw	0
  2856  001A0A  0012               	return	
  2857  001A0C  D000               	goto	l6474
  2858  001A0E                     l6474:
  2859                           
  2860                           ;FastTransfer.c: 205: }
  2861                           ;FastTransfer.c: 206: }
  2862                           ;FastTransfer.c: 207: }
  2863                           ;FastTransfer.c: 210: return 0;
  2864  001A0E  0E00               	movlw	0
  2865  001A10  0012               	return	
  2866  001A12  0012               	return		;funcret
  2867  001A14                     __end_of_receiveData:
  2868                           	opt stack 0
  2869                           tosu	equ	0xFFF
  2870                           tosh	equ	0xFFE
  2871                           tosl	equ	0xFFD
  2872                           pclath	equ	0xFFA
  2873                           tblptru	equ	0xFF8
  2874                           tblptrh	equ	0xFF7
  2875                           tblptrl	equ	0xFF6
  2876                           tablat	equ	0xFF5
  2877                           prodh	equ	0xFF4
  2878                           prodl	equ	0xFF3
  2879                           intcon	equ	0xFF2
  2880                           postinc0	equ	0xFEE
  2881                           wreg	equ	0xFE8
  2882                           indf2	equ	0xFDF
  2883                           postinc2	equ	0xFDE
  2884                           postdec2	equ	0xFDD
  2885                           fsr2h	equ	0xFDA
  2886                           fsr2l	equ	0xFD9
  2887                           status	equ	0xFD8
  2888                           
  2889 ;; *************** function _Receive_peek *****************
  2890 ;; Defined at:
  2891 ;;		line 116 in file "UART.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;		None
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;		None
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  1    wreg      unsigned char 
  2898 ;; Registers used:
  2899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2905 ;;      Params:         0       0       0       0       0       0       0
  2906 ;;      Locals:         0       0       0       0       0       0       0
  2907 ;;      Temps:          0       0       0       0       0       0       0
  2908 ;;      Totals:         0       0       0       0       0       0       0
  2909 ;;Total ram usage:        0 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    5
  2912 ;; This function calls:
  2913 ;;		_UART_buff_peek
  2914 ;; This function is called by:
  2915 ;;		_SYSTEM_Initialize
  2916 ;;		_receiveData
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text3
  2921  004E84                     __ptext3:
  2922                           	opt stack 0
  2923  004E84                     _Receive_peek:
  2924                           	opt stack 23
  2925                           
  2926                           ;UART.c: 117: return UART_buff_peek(&input_buffer);
  2927                           
  2928                           ;incstack = 0
  2929  004E84  0E00               	movlw	low _input_buffer
  2930  004E86  6E1B               	movwf	UART_buff_peek@_this,c
  2931  004E88  0E04               	movlw	high _input_buffer
  2932  004E8A  6E1C               	movwf	UART_buff_peek@_this+1,c
  2933  004E8C  EC7D  F026         	call	_UART_buff_peek
  2934  004E90  0012               	return	
  2935  004E92  0012               	return		;funcret
  2936  004E94                     __end_of_Receive_peek:
  2937                           	opt stack 0
  2938                           tosu	equ	0xFFF
  2939                           tosh	equ	0xFFE
  2940                           tosl	equ	0xFFD
  2941                           pclath	equ	0xFFA
  2942                           tblptru	equ	0xFF8
  2943                           tblptrh	equ	0xFF7
  2944                           tblptrl	equ	0xFF6
  2945                           tablat	equ	0xFF5
  2946                           prodh	equ	0xFF4
  2947                           prodl	equ	0xFF3
  2948                           intcon	equ	0xFF2
  2949                           postinc0	equ	0xFEE
  2950                           wreg	equ	0xFE8
  2951                           indf2	equ	0xFDF
  2952                           postinc2	equ	0xFDE
  2953                           postdec2	equ	0xFDD
  2954                           fsr2h	equ	0xFDA
  2955                           fsr2l	equ	0xFD9
  2956                           status	equ	0xFD8
  2957                           
  2958 ;; *************** function _UART_buff_peek *****************
  2959 ;; Defined at:
  2960 ;;		line 112 in file "UART.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  2963 ;;		 -> input_buffer(206), 
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;		None
  2966 ;; Return value:  Size  Location     Type
  2967 ;;                  1    wreg      unsigned char 
  2968 ;; Registers used:
  2969 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2975 ;;      Params:         2       0       0       0       0       0       0
  2976 ;;      Locals:         0       0       0       0       0       0       0
  2977 ;;      Temps:          2       0       0       0       0       0       0
  2978 ;;      Totals:         4       0       0       0       0       0       0
  2979 ;;Total ram usage:        4 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; Hardware stack levels required when called:    4
  2982 ;; This function calls:
  2983 ;;		Nothing
  2984 ;; This function is called by:
  2985 ;;		_Receive_peek
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text4
  2990  004CFA                     __ptext4:
  2991                           	opt stack 0
  2992  004CFA                     _UART_buff_peek:
  2993                           	opt stack 23
  2994                           
  2995                           ;UART.c: 113: return _this->buf[_this->tail];
  2996                           
  2997                           ;incstack = 0
  2998  004CFA  EE20 F0CA          	lfsr	2,202
  2999  004CFE  501B               	movf	UART_buff_peek@_this,w,c
  3000  004D00  26D9               	addwf	fsr2l,f,c
  3001  004D02  501C               	movf	UART_buff_peek@_this+1,w,c
  3002  004D04  22DA               	addwfc	fsr2h,f,c
  3003  004D06  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3004  004D0A  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3005  004D0E  501D               	movf	??_UART_buff_peek,w,c
  3006  004D10  241B               	addwf	UART_buff_peek@_this,w,c
  3007  004D12  6ED9               	movwf	fsr2l,c
  3008  004D14  501E               	movf	??_UART_buff_peek+1,w,c
  3009  004D16  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3010  004D18  6EDA               	movwf	fsr2h,c
  3011  004D1A  50DF               	movf	indf2,w,c
  3012  004D1C  0012               	return	
  3013  004D1E  0012               	return		;funcret
  3014  004D20                     __end_of_UART_buff_peek:
  3015                           	opt stack 0
  3016                           tosu	equ	0xFFF
  3017                           tosh	equ	0xFFE
  3018                           tosl	equ	0xFFD
  3019                           pclath	equ	0xFFA
  3020                           tblptru	equ	0xFF8
  3021                           tblptrh	equ	0xFF7
  3022                           tblptrl	equ	0xFF6
  3023                           tablat	equ	0xFF5
  3024                           prodh	equ	0xFF4
  3025                           prodl	equ	0xFF3
  3026                           intcon	equ	0xFF2
  3027                           postinc0	equ	0xFEE
  3028                           wreg	equ	0xFE8
  3029                           indf2	equ	0xFDF
  3030                           postinc2	equ	0xFDE
  3031                           postdec2	equ	0xFDD
  3032                           fsr2h	equ	0xFDA
  3033                           fsr2l	equ	0xFD9
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function _CRCcheck *****************
  3037 ;; Defined at:
  3038 ;;		line 373 in file "FastTransfer.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;		None
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  rt              2    5[BANK0 ] int 
  3043 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3044 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3045 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3046 ;; Return value:  Size  Location     Type
  3047 ;;		None               void
  3048 ;; Registers used:
  3049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3055 ;;      Params:         0       0       0       0       0       0       0
  3056 ;;      Locals:         0       7       0       0       0       0       0
  3057 ;;      Temps:          0       0       0       0       0       0       0
  3058 ;;      Totals:         0       7       0       0       0       0       0
  3059 ;;Total ram usage:        7 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    7
  3062 ;; This function calls:
  3063 ;;		Absolute function
  3064 ;;		_CRC8
  3065 ;;		_Receive_available
  3066 ;;		_Receive_get
  3067 ;;		_crcBufS_get
  3068 ;;		_crcBufS_status_put
  3069 ;; This function is called by:
  3070 ;;		_receiveData
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           	psect	text5
  3075  002EAE                     __ptext5:
  3076                           	opt stack 0
  3077  002EAE                     _CRCcheck:
  3078                           	opt stack 21
  3079                           
  3080                           ;FastTransfer.c: 375: while (!(serial_available() > 3));
  3081                           
  3082                           ;incstack = 0
  3083  002EAE  D000               	goto	l6010
  3084  002EB0                     l6010:
  3085  002EB0  D801               	call	u6808
  3086  002EB2  D00A               	goto	u6809
  3087  002EB4                     u6808:
  3088  002EB4  0005               	push	
  3089  002EB6  6EFA               	movwf	pclath,c
  3090  002EB8  5031               	movf	_serial_available,w,c
  3091  002EBA  6EFD               	movwf	tosl,c
  3092  002EBC  5032               	movf	_serial_available+1,w,c
  3093  002EBE  6EFE               	movwf	tosh,c
  3094  002EC0  50F8               	movf	tblptru,w,c
  3095  002EC2  6EFF               	movwf	tosu,c
  3096  002EC4  50FA               	movf	pclath,w,c
  3097  002EC6  0012               	return		;indir
  3098  002EC8                     u6809:
  3099  002EC8  BE1E               	btfsc	?_Receive_available+1,7,c
  3100  002ECA  D7F2               	goto	l6010
  3101  002ECC  501E               	movf	?_Receive_available+1,w,c
  3102  002ECE  E106               	bnz	l6012
  3103  002ED0  0E04               	movlw	4
  3104  002ED2  5C1D               	subwf	?_Receive_available,w,c
  3105  002ED4  B0D8               	btfsc	status,0,c
  3106  002ED6  D002               	goto	l6012
  3107  002ED8  D7EB               	goto	l6010
  3108  002EDA  D000               	goto	l6012
  3109  002EDC                     l6012:
  3110                           
  3111                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  3112                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  3113  002EDC  D801               	call	u6828
  3114  002EDE  D00A               	goto	u6829
  3115  002EE0                     u6828:
  3116  002EE0  0005               	push	
  3117  002EE2  6EFA               	movwf	pclath,c
  3118  002EE4  5033               	movf	_serial_read,w,c
  3119  002EE6  6EFD               	movwf	tosl,c
  3120  002EE8  5034               	movf	_serial_read+1,w,c
  3121  002EEA  6EFE               	movwf	tosh,c
  3122  002EEC  50F8               	movf	tblptru,w,c
  3123  002EEE  6EFF               	movwf	tosu,c
  3124  002EF0  50FA               	movf	pclath,w,c
  3125  002EF2  0012               	return		;indir
  3126  002EF4                     u6829:
  3127  002EF4  0100               	movlb	0	; () banked
  3128  002EF6  6F62               	movwf	CRCcheck@arrayHolder& (0+255),b
  3129                           
  3130                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  3131  002EF8  D801               	call	u6838
  3132  002EFA  D00A               	goto	u6839
  3133  002EFC                     u6838:
  3134  002EFC  0005               	push	
  3135  002EFE  6EFA               	movwf	pclath,c
  3136  002F00  5033               	movf	_serial_read,w,c
  3137  002F02  6EFD               	movwf	tosl,c
  3138  002F04  5034               	movf	_serial_read+1,w,c
  3139  002F06  6EFE               	movwf	tosh,c
  3140  002F08  50F8               	movf	tblptru,w,c
  3141  002F0A  6EFF               	movwf	tosu,c
  3142  002F0C  50FA               	movf	pclath,w,c
  3143  002F0E  0012               	return		;indir
  3144  002F10                     u6839:
  3145  002F10  0100               	movlb	0	; () banked
  3146  002F12  6F63               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3147                           
  3148                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  3149  002F14  D801               	call	u6848
  3150  002F16  D00A               	goto	u6849
  3151  002F18                     u6848:
  3152  002F18  0005               	push	
  3153  002F1A  6EFA               	movwf	pclath,c
  3154  002F1C  5033               	movf	_serial_read,w,c
  3155  002F1E  6EFD               	movwf	tosl,c
  3156  002F20  5034               	movf	_serial_read+1,w,c
  3157  002F22  6EFE               	movwf	tosh,c
  3158  002F24  50F8               	movf	tblptru,w,c
  3159  002F26  6EFF               	movwf	tosu,c
  3160  002F28  50FA               	movf	pclath,w,c
  3161  002F2A  0012               	return		;indir
  3162  002F2C                     u6849:
  3163  002F2C  0100               	movlb	0	; () banked
  3164  002F2E  6F64               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3165                           
  3166                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  3167  002F30  D801               	call	u6858
  3168  002F32  D00A               	goto	u6859
  3169  002F34                     u6858:
  3170  002F34  0005               	push	
  3171  002F36  6EFA               	movwf	pclath,c
  3172  002F38  5033               	movf	_serial_read,w,c
  3173  002F3A  6EFD               	movwf	tosl,c
  3174  002F3C  5034               	movf	_serial_read+1,w,c
  3175  002F3E  6EFE               	movwf	tosh,c
  3176  002F40  50F8               	movf	tblptru,w,c
  3177  002F42  6EFF               	movwf	tosu,c
  3178  002F44  50FA               	movf	pclath,w,c
  3179  002F46  0012               	return		;indir
  3180  002F48                     u6859:
  3181  002F48  0100               	movlb	0	; () banked
  3182  002F4A  6F60               	movwf	CRCcheck@SentCRC& (0+255),b
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3186  002F4C  0E62               	movlw	low CRCcheck@arrayHolder
  3187  002F4E  6E1B               	movwf	CRC8@data,c
  3188  002F50  0E00               	movlw	high CRCcheck@arrayHolder
  3189  002F52  6E1C               	movwf	CRC8@data+1,c
  3190  002F54  0E03               	movlw	3
  3191  002F56  6E1D               	movwf	CRC8@len,c
  3192  002F58  ECDA  F024         	call	_CRC8	;wreg free
  3193  002F5C  0100               	movlb	0	; () banked
  3194  002F5E  6F61               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  3198  002F60  0100               	movlb	0	; () banked
  3199  002F62  5161               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3200  002F64  0100               	movlb	0	; () banked
  3201  002F66  1960               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3202  002F68  A4D8               	btfss	status,2,c
  3203  002F6A  D053               	goto	l6042
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;FastTransfer.c: 387: int rt;
  3207                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  3208  002F6C  0E00               	movlw	0
  3209  002F6E  0100               	movlb	0	; () banked
  3210  002F70  6F66               	movwf	(CRCcheck@rt+1)& (0+255),b
  3211  002F72  0E00               	movlw	0
  3212  002F74  6F65               	movwf	CRCcheck@rt& (0+255),b
  3213  002F76                     l6020:
  3214                           
  3215                           ; BSR set to: 0
  3216  002F76  0100               	movlb	0	; () banked
  3217  002F78  BF66               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3218  002F7A  D00A               	goto	l6024
  3219  002F7C  0100               	movlb	0	; () banked
  3220  002F7E  5166               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3221  002F80  E14C               	bnz	l790
  3222  002F82  0E05               	movlw	5
  3223  002F84  0100               	movlb	0	; () banked
  3224  002F86  5D65               	subwf	CRCcheck@rt& (0+255),w,b
  3225  002F88  B0D8               	btfsc	status,0,c
  3226  002F8A  0012               	return	
  3227  002F8C  D001               	goto	l6024
  3228                           
  3229                           ; BSR set to: 0
  3230  002F8E  0012               	return	
  3231  002F90                     l6024:
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3235  002F90  0EDC               	movlw	low _crc_buffer
  3236  002F92  6E1B               	movwf	crcBufS_get@_this,c
  3237  002F94  0E01               	movlw	high _crc_buffer
  3238  002F96  6E1C               	movwf	crcBufS_get@_this+1,c
  3239  002F98  C065  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3240  002F9C  0E00               	movlw	0
  3241  002F9E  6E1E               	movwf	crcBufS_get@space,c
  3242  002FA0  EC01  F01F         	call	_crcBufS_get	;wreg free
  3243  002FA4  183F               	xorwf	_returnAddress,w,c
  3244  002FA6  A4D8               	btfss	status,2,c
  3245  002FA8  D02F               	goto	l6038
  3246                           
  3247                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3248  002FAA  0EDC               	movlw	low _crc_buffer
  3249  002FAC  6E1B               	movwf	crcBufS_get@_this,c
  3250  002FAE  0E01               	movlw	high _crc_buffer
  3251  002FB0  6E1C               	movwf	crcBufS_get@_this+1,c
  3252  002FB2  C065  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3253  002FB6  0E01               	movlw	1
  3254  002FB8  6E1E               	movwf	crcBufS_get@space,c
  3255  002FBA  EC01  F01F         	call	_crcBufS_get	;wreg free
  3256  002FBE  0100               	movlb	0	; () banked
  3257  002FC0  1964               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3258  002FC2  A4D8               	btfss	status,2,c
  3259  002FC4  D021               	goto	l6038
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3263  002FC6  0100               	movlb	0	; () banked
  3264  002FC8  0563               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3265  002FCA  A4D8               	btfss	status,2,c
  3266  002FCC  D00C               	goto	l6034
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3270  002FCE  0EDC               	movlw	low _crc_buffer
  3271  002FD0  6E1B               	movwf	crcBufS_status_put@_this,c
  3272  002FD2  0E01               	movlw	high _crc_buffer
  3273  002FD4  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3274  002FD6  C065  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3275  002FDA  0E01               	movlw	1
  3276  002FDC  6E1E               	movwf	crcBufS_status_put@status,c
  3277  002FDE  ECE3  F01F         	call	_crcBufS_status_put	;wreg free
  3278                           
  3279                           ;FastTransfer.c: 393: break;
  3280  002FE2  0012               	return	
  3281                           
  3282                           ;FastTransfer.c: 394: } else if (arrayHolder[1] == 2) {
  3283  002FE4  D011               	goto	l6038
  3284  002FE6                     l6034:
  3285  002FE6  0E02               	movlw	2
  3286  002FE8  0100               	movlb	0	; () banked
  3287  002FEA  1963               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3288  002FEC  A4D8               	btfss	status,2,c
  3289  002FEE  D00C               	goto	l6038
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3293  002FF0  0EDC               	movlw	low _crc_buffer
  3294  002FF2  6E1B               	movwf	crcBufS_status_put@_this,c
  3295  002FF4  0E01               	movlw	high _crc_buffer
  3296  002FF6  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3297  002FF8  C065  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3298  002FFC  0E02               	movlw	2
  3299  002FFE  6E1E               	movwf	crcBufS_status_put@status,c
  3300  003000  ECE3  F01F         	call	_crcBufS_status_put	;wreg free
  3301                           
  3302                           ;FastTransfer.c: 396: break;
  3303  003004  0012               	return	
  3304  003006  D000               	goto	l6038
  3305  003008                     l6038:
  3306  003008  0100               	movlb	0	; () banked
  3307  00300A  4B65               	infsnz	CRCcheck@rt& (0+255),f,b
  3308  00300C  2B66               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3309  00300E  D7B3               	goto	l6020
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;FastTransfer.c: 397: }
  3313                           ;FastTransfer.c: 398: }
  3314                           ;FastTransfer.c: 399: }
  3315                           ;FastTransfer.c: 400: }
  3316                           ;FastTransfer.c: 401: } else {
  3317                           
  3318                           ; BSR set to: 0
  3319  003010  0012               	return	
  3320  003012                     l6042:
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;FastTransfer.c: 402: crcErrorCounter++;
  3324  003012  0100               	movlb	0	; () banked
  3325  003014  4BE0               	infsnz	_crcErrorCounter& (0+255),f,b
  3326  003016  2BE1               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3327  003018  0012               	return	
  3328  00301A                     l790:
  3329  00301A  0012               	return		;funcret
  3330  00301C                     __end_of_CRCcheck:
  3331                           	opt stack 0
  3332                           tosu	equ	0xFFF
  3333                           tosh	equ	0xFFE
  3334                           tosl	equ	0xFFD
  3335                           pclath	equ	0xFFA
  3336                           tblptru	equ	0xFF8
  3337                           tblptrh	equ	0xFF7
  3338                           tblptrl	equ	0xFF6
  3339                           tablat	equ	0xFF5
  3340                           prodh	equ	0xFF4
  3341                           prodl	equ	0xFF3
  3342                           intcon	equ	0xFF2
  3343                           postinc0	equ	0xFEE
  3344                           wreg	equ	0xFE8
  3345                           indf2	equ	0xFDF
  3346                           postinc2	equ	0xFDE
  3347                           postdec2	equ	0xFDD
  3348                           fsr2h	equ	0xFDA
  3349                           fsr2l	equ	0xFD9
  3350                           status	equ	0xFD8
  3351                           
  3352 ;; *************** function _crcBufS_status_put *****************
  3353 ;; Defined at:
  3354 ;;		line 336 in file "FastTransfer.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3357 ;;		 -> crc_buffer(17), 
  3358 ;;  time            1   28[COMRAM] unsigned char 
  3359 ;;  status          1   29[COMRAM] unsigned char 
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;  wantedTime      2   34[COMRAM] int 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;		None               void
  3364 ;; Registers used:
  3365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3371 ;;      Params:         4       0       0       0       0       0       0
  3372 ;;      Locals:         2       0       0       0       0       0       0
  3373 ;;      Temps:          4       0       0       0       0       0       0
  3374 ;;      Totals:        10       0       0       0       0       0       0
  3375 ;;Total ram usage:       10 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    4
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_CRCcheck
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text6
  3386  003FC6                     __ptext6:
  3387                           	opt stack 0
  3388  003FC6                     _crcBufS_status_put:
  3389                           	opt stack 23
  3390                           
  3391                           ;FastTransfer.c: 337: if (time >= 5) {
  3392                           
  3393                           ;incstack = 0
  3394  003FC6  0E04               	movlw	4
  3395  003FC8  641D               	cpfsgt	crcBufS_status_put@time,c
  3396  003FCA  D003               	goto	l5858
  3397                           
  3398                           ;FastTransfer.c: 338: time = 5 - 1;
  3399  003FCC  0E04               	movlw	4
  3400  003FCE  6E1D               	movwf	crcBufS_status_put@time,c
  3401  003FD0  D000               	goto	l5858
  3402  003FD2                     l5858:
  3403                           
  3404                           ;FastTransfer.c: 339: }
  3405                           ;FastTransfer.c: 340: time = time + 1;
  3406  003FD2  281D               	incf	crcBufS_status_put@time,w,c
  3407  003FD4  6E1D               	movwf	crcBufS_status_put@time,c
  3408                           
  3409                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3410  003FD6  501D               	movf	crcBufS_status_put@time,w,c
  3411  003FD8  0D03               	mullw	3
  3412  003FDA  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3413  003FDE  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3414                           
  3415                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3416  003FE2  EE20 F00F          	lfsr	2,15
  3417  003FE6  501B               	movf	crcBufS_status_put@_this,w,c
  3418  003FE8  26D9               	addwf	fsr2l,f,c
  3419  003FEA  501C               	movf	crcBufS_status_put@_this+1,w,c
  3420  003FEC  22DA               	addwfc	fsr2h,f,c
  3421  003FEE  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3422  003FF0  5CDE               	subwf	postinc2,w,c
  3423  003FF2  50DE               	movf	postinc2,w,c
  3424  003FF4  0A80               	xorlw	128
  3425  003FF6  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3426  003FF8  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3427  003FFA  0A80               	xorlw	128
  3428  003FFC  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3429  003FFE  B0D8               	btfsc	status,0,c
  3430  004000  D02B               	goto	l5866
  3431                           
  3432                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3433  004002  EE20 F00F          	lfsr	2,15
  3434  004006  501B               	movf	crcBufS_status_put@_this,w,c
  3435  004008  26D9               	addwf	fsr2l,f,c
  3436  00400A  501C               	movf	crcBufS_status_put@_this+1,w,c
  3437  00400C  22DA               	addwfc	fsr2h,f,c
  3438  00400E  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3439  004012  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3440  004016  1E1F               	comf	??_crcBufS_status_put,f,c
  3441  004018  1E20               	comf	??_crcBufS_status_put+1,f,c
  3442  00401A  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3443  00401C  2A20               	incf	??_crcBufS_status_put+1,f,c
  3444  00401E  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3445  004020  261F               	addwf	??_crcBufS_status_put,f,c
  3446  004022  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3447  004024  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3448  004026  1E1F               	comf	??_crcBufS_status_put,f,c
  3449  004028  1E20               	comf	??_crcBufS_status_put+1,f,c
  3450  00402A  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3451  00402C  2A20               	incf	??_crcBufS_status_put+1,f,c
  3452  00402E  0E0F               	movlw	15
  3453  004030  241F               	addwf	??_crcBufS_status_put,w,c
  3454  004032  6E23               	movwf	crcBufS_status_put@wantedTime,c
  3455  004034  0E00               	movlw	0
  3456  004036  2020               	addwfc	??_crcBufS_status_put+1,w,c
  3457  004038  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  3458                           
  3459                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  3460  00403A  0E02               	movlw	2
  3461  00403C  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  3462  00403E  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  3463  004040  0E00               	movlw	0
  3464  004042  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  3465  004044  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  3466  004046  501F               	movf	??_crcBufS_status_put,w,c
  3467  004048  241B               	addwf	crcBufS_status_put@_this,w,c
  3468  00404A  6ED9               	movwf	fsr2l,c
  3469  00404C  5020               	movf	??_crcBufS_status_put+1,w,c
  3470  00404E  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3471  004050  6EDA               	movwf	fsr2h,c
  3472  004052  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3473                           
  3474                           ;FastTransfer.c: 345: } else {
  3475  004056  0012               	return	
  3476  004058                     l5866:
  3477                           
  3478                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  3479  004058  EE20 F00F          	lfsr	2,15
  3480  00405C  501B               	movf	crcBufS_status_put@_this,w,c
  3481  00405E  26D9               	addwf	fsr2l,f,c
  3482  004060  501C               	movf	crcBufS_status_put@_this+1,w,c
  3483  004062  22DA               	addwfc	fsr2h,f,c
  3484  004064  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3485  004068  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3486  00406C  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  3487  004070  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  3488  004074  1E21               	comf	??_crcBufS_status_put+2,f,c
  3489  004076  1E22               	comf	??_crcBufS_status_put+3,f,c
  3490  004078  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  3491  00407A  2A22               	incf	??_crcBufS_status_put+3,f,c
  3492  00407C  501F               	movf	??_crcBufS_status_put,w,c
  3493  00407E  2621               	addwf	??_crcBufS_status_put+2,f,c
  3494  004080  5020               	movf	??_crcBufS_status_put+1,w,c
  3495  004082  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3496  004084  0E02               	movlw	2
  3497  004086  2621               	addwf	??_crcBufS_status_put+2,f,c
  3498  004088  0E00               	movlw	0
  3499  00408A  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3500  00408C  5021               	movf	??_crcBufS_status_put+2,w,c
  3501  00408E  241B               	addwf	crcBufS_status_put@_this,w,c
  3502  004090  6ED9               	movwf	fsr2l,c
  3503  004092  5022               	movf	??_crcBufS_status_put+3,w,c
  3504  004094  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3505  004096  6EDA               	movwf	fsr2h,c
  3506  004098  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3507  00409C  0012               	return	
  3508  00409E  0012               	return		;funcret
  3509  0040A0                     __end_of_crcBufS_status_put:
  3510                           	opt stack 0
  3511                           tosu	equ	0xFFF
  3512                           tosh	equ	0xFFE
  3513                           tosl	equ	0xFFD
  3514                           pclath	equ	0xFFA
  3515                           tblptru	equ	0xFF8
  3516                           tblptrh	equ	0xFF7
  3517                           tblptrl	equ	0xFF6
  3518                           tablat	equ	0xFF5
  3519                           prodh	equ	0xFF4
  3520                           prodl	equ	0xFF3
  3521                           intcon	equ	0xFF2
  3522                           postinc0	equ	0xFEE
  3523                           wreg	equ	0xFE8
  3524                           indf2	equ	0xFDF
  3525                           postinc2	equ	0xFDE
  3526                           postdec2	equ	0xFDD
  3527                           fsr2h	equ	0xFDA
  3528                           fsr2l	equ	0xFD9
  3529                           status	equ	0xFD8
  3530                           
  3531 ;; *************** function _crcBufS_get *****************
  3532 ;; Defined at:
  3533 ;;		line 353 in file "FastTransfer.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3536 ;;		 -> crc_buffer(17), 
  3537 ;;  time            1   28[COMRAM] unsigned char 
  3538 ;;  space           1   29[COMRAM] unsigned char 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;  wantedTime      2   36[COMRAM] int 
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      unsigned char 
  3543 ;; Registers used:
  3544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3550 ;;      Params:         4       0       0       0       0       0       0
  3551 ;;      Locals:         2       0       0       0       0       0       0
  3552 ;;      Temps:          6       0       0       0       0       0       0
  3553 ;;      Totals:        12       0       0       0       0       0       0
  3554 ;;Total ram usage:       12 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    4
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_CRCcheck
  3561 ;;		_AKNAK
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	text7
  3566  003E02                     __ptext7:
  3567                           	opt stack 0
  3568  003E02                     _crcBufS_get:
  3569                           	opt stack 23
  3570                           
  3571                           ;FastTransfer.c: 354: if (time >= 5) {
  3572                           
  3573                           ;incstack = 0
  3574  003E02  0E04               	movlw	4
  3575  003E04  641D               	cpfsgt	crcBufS_get@time,c
  3576  003E06  D003               	goto	l5834
  3577                           
  3578                           ;FastTransfer.c: 355: time = 5 - 1;
  3579  003E08  0E04               	movlw	4
  3580  003E0A  6E1D               	movwf	crcBufS_get@time,c
  3581  003E0C  D000               	goto	l5834
  3582  003E0E                     l5834:
  3583                           
  3584                           ;FastTransfer.c: 356: }
  3585                           ;FastTransfer.c: 357: if (space >= 3) {
  3586  003E0E  0E02               	movlw	2
  3587  003E10  641E               	cpfsgt	crcBufS_get@space,c
  3588  003E12  D003               	goto	l5838
  3589                           
  3590                           ;FastTransfer.c: 358: space = 3 - 1;
  3591  003E14  0E02               	movlw	2
  3592  003E16  6E1E               	movwf	crcBufS_get@space,c
  3593  003E18  D000               	goto	l5838
  3594  003E1A                     l5838:
  3595                           
  3596                           ;FastTransfer.c: 359: }
  3597                           ;FastTransfer.c: 360: time = time + 1;
  3598  003E1A  281D               	incf	crcBufS_get@time,w,c
  3599  003E1C  6E1D               	movwf	crcBufS_get@time,c
  3600                           
  3601                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  3602  003E1E  501D               	movf	crcBufS_get@time,w,c
  3603  003E20  0D03               	mullw	3
  3604  003E22  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  3605  003E26  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  3606                           
  3607                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  3608  003E2A  EE20 F00F          	lfsr	2,15
  3609  003E2E  501B               	movf	crcBufS_get@_this,w,c
  3610  003E30  26D9               	addwf	fsr2l,f,c
  3611  003E32  501C               	movf	crcBufS_get@_this+1,w,c
  3612  003E34  22DA               	addwfc	fsr2h,f,c
  3613  003E36  5025               	movf	crcBufS_get@wantedTime,w,c
  3614  003E38  5CDE               	subwf	postinc2,w,c
  3615  003E3A  50DE               	movf	postinc2,w,c
  3616  003E3C  0A80               	xorlw	128
  3617  003E3E  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  3618  003E40  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3619  003E42  0A80               	xorlw	128
  3620  003E44  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  3621  003E46  B0D8               	btfsc	status,0,c
  3622  003E48  D02A               	goto	l5850
  3623                           
  3624                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3625  003E4A  EE20 F00F          	lfsr	2,15
  3626  003E4E  501B               	movf	crcBufS_get@_this,w,c
  3627  003E50  26D9               	addwf	fsr2l,f,c
  3628  003E52  501C               	movf	crcBufS_get@_this+1,w,c
  3629  003E54  22DA               	addwfc	fsr2h,f,c
  3630  003E56  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3631  003E5A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3632  003E5E  1E1F               	comf	??_crcBufS_get,f,c
  3633  003E60  1E20               	comf	??_crcBufS_get+1,f,c
  3634  003E62  4A1F               	infsnz	??_crcBufS_get,f,c
  3635  003E64  2A20               	incf	??_crcBufS_get+1,f,c
  3636  003E66  5025               	movf	crcBufS_get@wantedTime,w,c
  3637  003E68  261F               	addwf	??_crcBufS_get,f,c
  3638  003E6A  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3639  003E6C  2220               	addwfc	??_crcBufS_get+1,f,c
  3640  003E6E  1E1F               	comf	??_crcBufS_get,f,c
  3641  003E70  1E20               	comf	??_crcBufS_get+1,f,c
  3642  003E72  4A1F               	infsnz	??_crcBufS_get,f,c
  3643  003E74  2A20               	incf	??_crcBufS_get+1,f,c
  3644  003E76  0E0F               	movlw	15
  3645  003E78  241F               	addwf	??_crcBufS_get,w,c
  3646  003E7A  6E25               	movwf	crcBufS_get@wantedTime,c
  3647  003E7C  0E00               	movlw	0
  3648  003E7E  2020               	addwfc	??_crcBufS_get+1,w,c
  3649  003E80  6E26               	movwf	crcBufS_get@wantedTime+1,c
  3650                           
  3651                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  3652  003E82  501E               	movf	crcBufS_get@space,w,c
  3653  003E84  2425               	addwf	crcBufS_get@wantedTime,w,c
  3654  003E86  6E1F               	movwf	??_crcBufS_get& (0+255),c
  3655  003E88  0E00               	movlw	0
  3656  003E8A  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  3657  003E8C  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  3658  003E8E  501F               	movf	??_crcBufS_get,w,c
  3659  003E90  241B               	addwf	crcBufS_get@_this,w,c
  3660  003E92  6ED9               	movwf	fsr2l,c
  3661  003E94  5020               	movf	??_crcBufS_get+1,w,c
  3662  003E96  201C               	addwfc	crcBufS_get@_this+1,w,c
  3663  003E98  6EDA               	movwf	fsr2h,c
  3664  003E9A  50DF               	movf	indf2,w,c
  3665                           
  3666                           ;FastTransfer.c: 365: } else {
  3667  003E9C  0012               	return	
  3668  003E9E                     l5850:
  3669                           
  3670                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  3671  003E9E  EE20 F00F          	lfsr	2,15
  3672  003EA2  501B               	movf	crcBufS_get@_this,w,c
  3673  003EA4  26D9               	addwf	fsr2l,f,c
  3674  003EA6  501C               	movf	crcBufS_get@_this+1,w,c
  3675  003EA8  22DA               	addwfc	fsr2h,f,c
  3676  003EAA  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3677  003EAE  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3678  003EB2  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  3679  003EB6  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  3680  003EBA  1E21               	comf	??_crcBufS_get+2,f,c
  3681  003EBC  1E22               	comf	??_crcBufS_get+3,f,c
  3682  003EBE  4A21               	infsnz	??_crcBufS_get+2,f,c
  3683  003EC0  2A22               	incf	??_crcBufS_get+3,f,c
  3684  003EC2  501E               	movf	crcBufS_get@space,w,c
  3685  003EC4  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  3686  003EC6  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  3687  003EC8  5021               	movf	??_crcBufS_get+2,w,c
  3688  003ECA  2623               	addwf	??_crcBufS_get+4,f,c
  3689  003ECC  5022               	movf	??_crcBufS_get+3,w,c
  3690  003ECE  2224               	addwfc	??_crcBufS_get+5,f,c
  3691  003ED0  501F               	movf	??_crcBufS_get,w,c
  3692  003ED2  2623               	addwf	??_crcBufS_get+4,f,c
  3693  003ED4  5020               	movf	??_crcBufS_get+1,w,c
  3694  003ED6  2224               	addwfc	??_crcBufS_get+5,f,c
  3695  003ED8  5023               	movf	??_crcBufS_get+4,w,c
  3696  003EDA  241B               	addwf	crcBufS_get@_this,w,c
  3697  003EDC  6ED9               	movwf	fsr2l,c
  3698  003EDE  5024               	movf	??_crcBufS_get+5,w,c
  3699  003EE0  201C               	addwfc	crcBufS_get@_this+1,w,c
  3700  003EE2  6EDA               	movwf	fsr2h,c
  3701  003EE4  50DF               	movf	indf2,w,c
  3702  003EE6  0012               	return	
  3703  003EE8  0012               	return		;funcret
  3704  003EEA                     __end_of_crcBufS_get:
  3705                           	opt stack 0
  3706                           tosu	equ	0xFFF
  3707                           tosh	equ	0xFFE
  3708                           tosl	equ	0xFFD
  3709                           pclath	equ	0xFFA
  3710                           tblptru	equ	0xFF8
  3711                           tblptrh	equ	0xFF7
  3712                           tblptrl	equ	0xFF6
  3713                           tablat	equ	0xFF5
  3714                           prodh	equ	0xFF4
  3715                           prodl	equ	0xFF3
  3716                           intcon	equ	0xFF2
  3717                           postinc0	equ	0xFEE
  3718                           wreg	equ	0xFE8
  3719                           indf2	equ	0xFDF
  3720                           postinc2	equ	0xFDE
  3721                           postdec2	equ	0xFDD
  3722                           fsr2h	equ	0xFDA
  3723                           fsr2l	equ	0xFD9
  3724                           status	equ	0xFD8
  3725                           
  3726 ;; *************** function _Receive_get *****************
  3727 ;; Defined at:
  3728 ;;		line 124 in file "UART.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  1    wreg      unsigned char 
  3735 ;; Registers used:
  3736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3742 ;;      Params:         0       0       0       0       0       0       0
  3743 ;;      Locals:         0       0       0       0       0       0       0
  3744 ;;      Temps:          0       0       0       0       0       0       0
  3745 ;;      Totals:         0       0       0       0       0       0       0
  3746 ;;Total ram usage:        0 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    6
  3749 ;; This function calls:
  3750 ;;		_UART_buff_get
  3751 ;; This function is called by:
  3752 ;;		_SYSTEM_Initialize
  3753 ;;		_getch
  3754 ;;		_CRCcheck
  3755 ;;		_receiveData
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           	psect	text8
  3760  004E94                     __ptext8:
  3761                           	opt stack 0
  3762  004E94                     _Receive_get:
  3763                           	opt stack 22
  3764                           
  3765                           ;UART.c: 125: return UART_buff_get(&input_buffer);
  3766                           
  3767                           ;incstack = 0
  3768  004E94  0E00               	movlw	low _input_buffer
  3769  004E96  6E21               	movwf	UART_buff_get@_this,c
  3770  004E98  0E04               	movlw	high _input_buffer
  3771  004E9A  6E22               	movwf	UART_buff_get@_this+1,c
  3772  004E9C  EC21  F022         	call	_UART_buff_get	;wreg free
  3773  004EA0  0012               	return	
  3774  004EA2  0012               	return		;funcret
  3775  004EA4                     __end_of_Receive_get:
  3776                           	opt stack 0
  3777                           tosu	equ	0xFFF
  3778                           tosh	equ	0xFFE
  3779                           tosl	equ	0xFFD
  3780                           pclath	equ	0xFFA
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           intcon	equ	0xFF2
  3788                           postinc0	equ	0xFEE
  3789                           wreg	equ	0xFE8
  3790                           indf2	equ	0xFDF
  3791                           postinc2	equ	0xFDE
  3792                           postdec2	equ	0xFDD
  3793                           fsr2h	equ	0xFDA
  3794                           fsr2l	equ	0xFD9
  3795                           status	equ	0xFD8
  3796                           
  3797 ;; *************** function _Receive_available *****************
  3798 ;; Defined at:
  3799 ;;		line 120 in file "UART.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;		None
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;		None
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  2   28[COMRAM] int 
  3806 ;; Registers used:
  3807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3813 ;;      Params:         2       0       0       0       0       0       0
  3814 ;;      Locals:         0       0       0       0       0       0       0
  3815 ;;      Temps:          0       0       0       0       0       0       0
  3816 ;;      Totals:         2       0       0       0       0       0       0
  3817 ;;Total ram usage:        2 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    5
  3820 ;; This function calls:
  3821 ;;		_UART_buff_size
  3822 ;; This function is called by:
  3823 ;;		_SYSTEM_Initialize
  3824 ;;		_CRCcheck
  3825 ;;		_receiveData
  3826 ;; This function uses a non-reentrant model
  3827 ;;
  3828                           
  3829                           	psect	text9
  3830  004DDE                     __ptext9:
  3831                           	opt stack 0
  3832  004DDE                     _Receive_available:
  3833                           	opt stack 23
  3834                           
  3835                           ;UART.c: 121: return UART_buff_size(&input_buffer);
  3836                           
  3837                           ;incstack = 0
  3838  004DDE  0E00               	movlw	low _input_buffer
  3839  004DE0  6E1B               	movwf	UART_buff_size@_this,c
  3840  004DE2  0E04               	movlw	high _input_buffer
  3841  004DE4  6E1C               	movwf	UART_buff_size@_this+1,c
  3842  004DE6  ECFB  F026         	call	_UART_buff_size	;wreg free
  3843  004DEA  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  3844  004DEE  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  3845  004DF2  0012               	return	
  3846  004DF4  0012               	return		;funcret
  3847  004DF6                     __end_of_Receive_available:
  3848                           	opt stack 0
  3849                           tosu	equ	0xFFF
  3850                           tosh	equ	0xFFE
  3851                           tosl	equ	0xFFD
  3852                           pclath	equ	0xFFA
  3853                           tblptru	equ	0xFF8
  3854                           tblptrh	equ	0xFF7
  3855                           tblptrl	equ	0xFF6
  3856                           tablat	equ	0xFF5
  3857                           prodh	equ	0xFF4
  3858                           prodl	equ	0xFF3
  3859                           intcon	equ	0xFF2
  3860                           postinc0	equ	0xFEE
  3861                           wreg	equ	0xFE8
  3862                           indf2	equ	0xFDF
  3863                           postinc2	equ	0xFDE
  3864                           postdec2	equ	0xFDD
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869 ;; *************** function _UART_buff_size *****************
  3870 ;; Defined at:
  3871 ;;		line 100 in file "UART.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3874 ;;		 -> output_buffer(206), input_buffer(206), 
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;		None
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  2   26[COMRAM] int 
  3879 ;; Registers used:
  3880 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3886 ;;      Params:         2       0       0       0       0       0       0
  3887 ;;      Locals:         0       0       0       0       0       0       0
  3888 ;;      Temps:          0       0       0       0       0       0       0
  3889 ;;      Totals:         2       0       0       0       0       0       0
  3890 ;;Total ram usage:        2 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    4
  3893 ;; This function calls:
  3894 ;;		Nothing
  3895 ;; This function is called by:
  3896 ;;		_Receive_available
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text10
  3901  004DF6                     __ptext10:
  3902                           	opt stack 0
  3903  004DF6                     _UART_buff_size:
  3904                           	opt stack 23
  3905                           
  3906                           ;UART.c: 101: return (_this->count);
  3907                           
  3908                           ;incstack = 0
  3909  004DF6  EE20 F0CC          	lfsr	2,204
  3910  004DFA  501B               	movf	UART_buff_size@_this,w,c
  3911  004DFC  26D9               	addwf	fsr2l,f,c
  3912  004DFE  501C               	movf	UART_buff_size@_this+1,w,c
  3913  004E00  22DA               	addwfc	fsr2h,f,c
  3914  004E02  CFDE F01B          	movff	postinc2,?_UART_buff_size
  3915  004E06  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  3916  004E0A  0012               	return	
  3917  004E0C  0012               	return		;funcret
  3918  004E0E                     __end_of_UART_buff_size:
  3919                           	opt stack 0
  3920                           tosu	equ	0xFFF
  3921                           tosh	equ	0xFFE
  3922                           tosl	equ	0xFFD
  3923                           pclath	equ	0xFFA
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           intcon	equ	0xFF2
  3931                           postinc0	equ	0xFEE
  3932                           wreg	equ	0xFE8
  3933                           indf2	equ	0xFDF
  3934                           postinc2	equ	0xFDE
  3935                           postdec2	equ	0xFDD
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8
  3939                           
  3940 ;; *************** function _CRC8 *****************
  3941 ;; Defined at:
  3942 ;;		line 34 in file "FastTransfer.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3945 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1240(3), receiveData@holder(3), 
  3946 ;;		 -> rx_buffer(200), ring_buffer(206), 
  3947 ;;  len             1   28[COMRAM] unsigned char 
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;  sum             1   29[COMRAM] unsigned char 
  3950 ;;  tempI           1   31[COMRAM] unsigned char 
  3951 ;;  extract         1   30[COMRAM] unsigned char 
  3952 ;;  crc             1   32[COMRAM] unsigned char 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  1    wreg      unsigned char 
  3955 ;; Registers used:
  3956 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3962 ;;      Params:         3       0       0       0       0       0       0
  3963 ;;      Locals:         4       0       0       0       0       0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0
  3965 ;;      Totals:         7       0       0       0       0       0       0
  3966 ;;Total ram usage:        7 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    4
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_receiveData
  3973 ;;		_CRCcheck
  3974 ;;		_sendData
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text11
  3979  0049B4                     __ptext11:
  3980                           	opt stack 0
  3981  0049B4                     _CRC8:
  3982                           	opt stack 23
  3983                           
  3984                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  3985                           
  3986                           ;incstack = 0
  3987  0049B4  0E00               	movlw	0
  3988  0049B6  6E21               	movwf	CRC8@crc,c
  3989                           
  3990                           ;FastTransfer.c: 36: while (len--) {
  3991  0049B8  D01F               	goto	l5824
  3992  0049BA                     l5808:
  3993                           
  3994                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  3995  0049BA  C01B  FFD9         	movff	CRC8@data,fsr2l
  3996  0049BE  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3997  0049C2  50DF               	movf	indf2,w,c
  3998  0049C4  6E1F               	movwf	CRC8@extract,c
  3999  0049C6  4A1B               	infsnz	CRC8@data,f,c
  4000  0049C8  2A1C               	incf	CRC8@data+1,f,c
  4001                           
  4002                           ;FastTransfer.c: 38: unsigned char tempI;
  4003                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  4004  0049CA  0E08               	movlw	8
  4005  0049CC  6E20               	movwf	CRC8@tempI,c
  4006  0049CE  D00F               	goto	l5822
  4007  0049D0                     l5814:
  4008                           
  4009                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  4010  0049D0  5021               	movf	CRC8@crc,w,c
  4011  0049D2  181F               	xorwf	CRC8@extract,w,c
  4012  0049D4  0B01               	andlw	1
  4013  0049D6  6E1E               	movwf	CRC8@sum,c
  4014                           
  4015                           ;FastTransfer.c: 41: crc >>= 1;
  4016  0049D8  90D8               	bcf	status,0,c
  4017  0049DA  3221               	rrcf	CRC8@crc,f,c
  4018                           
  4019                           ;FastTransfer.c: 42: if (sum) {
  4020  0049DC  501E               	movf	CRC8@sum,w,c
  4021  0049DE  B4D8               	btfsc	status,2,c
  4022  0049E0  D002               	goto	l676
  4023                           
  4024                           ;FastTransfer.c: 43: crc ^= 0x8C;
  4025  0049E2  0E8C               	movlw	140
  4026  0049E4  1A21               	xorwf	CRC8@crc,f,c
  4027  0049E6                     l676:
  4028                           
  4029                           ;FastTransfer.c: 44: }
  4030                           ;FastTransfer.c: 45: extract >>= 1;
  4031  0049E6  90D8               	bcf	status,0,c
  4032  0049E8  321F               	rrcf	CRC8@extract,f,c
  4033  0049EA  0620               	decf	CRC8@tempI,f,c
  4034  0049EC  D000               	goto	l5822
  4035  0049EE                     l5822:
  4036  0049EE  5020               	movf	CRC8@tempI,w,c
  4037  0049F0  B4D8               	btfsc	status,2,c
  4038  0049F2  D002               	goto	l5824
  4039  0049F4  D7ED               	goto	l5814
  4040  0049F6  D000               	goto	l5824
  4041  0049F8                     l5824:
  4042  0049F8  061D               	decf	CRC8@len,f,c
  4043  0049FA  281D               	incf	CRC8@len,w,c
  4044  0049FC  A4D8               	btfss	status,2,c
  4045  0049FE  D7DD               	goto	l5808
  4046                           
  4047                           ;FastTransfer.c: 46: }
  4048                           ;FastTransfer.c: 47: }
  4049                           ;FastTransfer.c: 48: return crc;
  4050  004A00  5021               	movf	CRC8@crc,w,c
  4051  004A02  0012               	return	
  4052  004A04  0012               	return		;funcret
  4053  004A06                     __end_of_CRC8:
  4054                           	opt stack 0
  4055                           tosu	equ	0xFFF
  4056                           tosh	equ	0xFFE
  4057                           tosl	equ	0xFFD
  4058                           pclath	equ	0xFFA
  4059                           tblptru	equ	0xFF8
  4060                           tblptrh	equ	0xFF7
  4061                           tblptrl	equ	0xFF6
  4062                           tablat	equ	0xFF5
  4063                           prodh	equ	0xFF4
  4064                           prodl	equ	0xFF3
  4065                           intcon	equ	0xFF2
  4066                           postinc0	equ	0xFEE
  4067                           wreg	equ	0xFE8
  4068                           indf2	equ	0xFDF
  4069                           postinc2	equ	0xFDE
  4070                           postdec2	equ	0xFDD
  4071                           fsr2h	equ	0xFDA
  4072                           fsr2l	equ	0xFD9
  4073                           status	equ	0xFD8
  4074                           
  4075 ;; *************** function _printf *****************
  4076 ;; Defined at:
  4077 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  f               2   60[BANK0 ] PTR const unsigned char 
  4080 ;;		 -> STR_2(23), STR_1(8), 
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  val             4    9[BANK2 ] unsigned long 
  4083 ;;  tmpval          4    5[BANK2 ] struct .
  4084 ;;  fval            3   19[BANK2 ] struct .
  4085 ;;  cp              3    0        PTR const unsigned char 
  4086 ;;  prec            2   22[BANK2 ] int 
  4087 ;;  width           2   17[BANK2 ] int 
  4088 ;;  flag            2   15[BANK2 ] unsigned short 
  4089 ;;  exp             2   13[BANK2 ] int 
  4090 ;;  ap              2    3[BANK2 ] PTR void [1]
  4091 ;;		 -> ?_printf(2), 
  4092 ;;  len             2    0        unsigned int 
  4093 ;;  c               1   24[BANK2 ] char 
  4094 ;;  d               1    0        unsigned char 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  2   60[BANK0 ] int 
  4097 ;; Registers used:
  4098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4104 ;;      Params:         0       7       0       0       0       0       0
  4105 ;;      Locals:         0       0       0      25       0       0       0
  4106 ;;      Temps:          0       6       0       0       0       0       0
  4107 ;;      Totals:         0      13       0      25       0       0       0
  4108 ;;Total ram usage:       38 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    8
  4111 ;; This function calls:
  4112 ;;		___awdiv
  4113 ;;		___ftadd
  4114 ;;		___ftge
  4115 ;;		___ftmul
  4116 ;;		___ftneg
  4117 ;;		___ftsub
  4118 ;;		___fttol
  4119 ;;		___lldiv
  4120 ;;		___llmod
  4121 ;;		___lltoft
  4122 ;;		___wmul
  4123 ;;		__div_to_l_
  4124 ;;		__tdiv_to_l_
  4125 ;;		_fround
  4126 ;;		_isdigit
  4127 ;;		_putch
  4128 ;;		_scale
  4129 ;; This function is called by:
  4130 ;;		_main
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           	psect	text12
  4135  0006B2                     __ptext12:
  4136                           	opt stack 0
  4137  0006B2                     _printf:
  4138                           	opt stack 22
  4139                           
  4140                           ;doprnt.c: 466: va_list ap;
  4141                           ;doprnt.c: 499: signed char c;
  4142                           ;doprnt.c: 501: int width;
  4143                           ;doprnt.c: 504: int prec;
  4144                           ;doprnt.c: 508: unsigned short flag;
  4145                           ;doprnt.c: 515: char d;
  4146                           ;doprnt.c: 516: double fval;
  4147                           ;doprnt.c: 517: int exp;
  4148                           ;doprnt.c: 523: union {
  4149                           ;doprnt.c: 524: unsigned long vd;
  4150                           ;doprnt.c: 525: double integ;
  4151                           ;doprnt.c: 526: } tmpval;
  4152                           ;doprnt.c: 528: unsigned long val;
  4153                           ;doprnt.c: 529: unsigned len;
  4154                           ;doprnt.c: 530: const char * cp;
  4155                           ;doprnt.c: 533: *ap = __va_start();
  4156                           
  4157                           ;incstack = 0
  4158  0006B2  0E9E               	movlw	low (?_printf+2)
  4159  0006B4  0102               	movlb	2	; () banked
  4160  0006B6  6FD1               	movwf	printf@ap& (0+255),b
  4161  0006B8  0E00               	movlw	high (?_printf+2)
  4162  0006BA  0102               	movlb	2	; () banked
  4163  0006BC  6FD2               	movwf	(printf@ap+1)& (0+255),b
  4164                           
  4165                           ;doprnt.c: 536: while(c = *f++) {
  4166  0006BE  EF8D  F009         	goto	l7236
  4167  0006C2                     l6942:
  4168                           
  4169                           ; BSR set to: 2
  4170                           ;doprnt.c: 538: if(c != '%')
  4171  0006C2  0E25               	movlw	37
  4172  0006C4  0102               	movlb	2	; () banked
  4173  0006C6  19E6               	xorwf	printf@c& (0+255),w,b
  4174  0006C8  B4D8               	btfsc	status,2,c
  4175  0006CA  D006               	goto	l6946
  4176                           
  4177                           ; BSR set to: 2
  4178                           ;doprnt.c: 540: {
  4179                           ;doprnt.c: 541: (putch(c) );
  4180  0006CC  0102               	movlb	2	; () banked
  4181  0006CE  51E6               	movf	printf@c& (0+255),w,b
  4182  0006D0  EC5F  F027         	call	_putch
  4183                           
  4184                           ;doprnt.c: 542: continue;
  4185  0006D4  EF8D  F009         	goto	l7236
  4186  0006D8                     l6946:
  4187                           
  4188                           ;doprnt.c: 543: }
  4189                           ;doprnt.c: 546: width = 0;
  4190  0006D8  0E00               	movlw	0
  4191  0006DA  0102               	movlb	2	; () banked
  4192  0006DC  6FE0               	movwf	(printf@width+1)& (0+255),b
  4193  0006DE  0E00               	movlw	0
  4194  0006E0  6FDF               	movwf	printf@width& (0+255),b
  4195                           
  4196                           ;doprnt.c: 548: flag = 0;
  4197  0006E2  0E00               	movlw	0
  4198  0006E4  0102               	movlb	2	; () banked
  4199  0006E6  6FDE               	movwf	(printf@flag+1)& (0+255),b
  4200  0006E8  0E00               	movlw	0
  4201  0006EA  6FDD               	movwf	printf@flag& (0+255),b
  4202                           
  4203                           ; BSR set to: 2
  4204                           ;doprnt.c: 551: switch(*f) {
  4205                           
  4206                           ;doprnt.c: 550: for(;;) {
  4207  0006EC  D007               	goto	l6952
  4208  0006EE                     l6948:
  4209                           
  4210                           ;doprnt.c: 580: flag |= 0x04;
  4211  0006EE  0102               	movlb	2	; () banked
  4212  0006F0  85DD               	bsf	printf@flag& (0+255),2,b
  4213                           
  4214                           ;doprnt.c: 581: f++;
  4215  0006F2  0100               	movlb	0	; () banked
  4216  0006F4  4B9C               	infsnz	printf@f& (0+255),f,b
  4217  0006F6  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4218                           
  4219                           ;doprnt.c: 582: continue;
  4220  0006F8  D001               	goto	l6952
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;doprnt.c: 584: }
  4224  0006FA  D00B               	goto	l6954
  4225  0006FC                     l6952:
  4226  0006FC  C09C  FFF6         	movff	printf@f,tblptrl
  4227  000700  C09D  FFF7         	movff	printf@f+1,tblptrh
  4228  000704                     	if	0	;tblptru may be non-zero
  4229  000704                     	endif
  4230  000704                     	if	0	;tblptru may be non-zero
  4231  000704                     	endif
  4232  000704  0008               	tblrd		*
  4233  000706  50F5               	movf	tablat,w,c
  4234                           
  4235                           ; Switch size 1, requested type "space"
  4236                           ; Number of cases is 1, Range of values is 48 to 48
  4237                           ; switch strategies available:
  4238                           ; Name         Instructions Cycles
  4239                           ; simple_byte            4     3 (average)
  4240                           ;	Chosen strategy is simple_byte
  4241  000708  0A30               	xorlw	48	; case 48
  4242  00070A  B4D8               	btfsc	status,2,c
  4243  00070C  D7F0               	goto	l6948
  4244                           
  4245                           ;doprnt.c: 585: break;
  4246  00070E  D001               	goto	l6954
  4247                           
  4248                           ;doprnt.c: 586: }
  4249  000710  D7F5               	goto	l6952
  4250  000712                     l6954:
  4251                           
  4252                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4253  000712  C09C  FFF6         	movff	printf@f,tblptrl
  4254  000716  C09D  FFF7         	movff	printf@f+1,tblptrh
  4255  00071A                     	if	0	;tblptru may be non-zero
  4256  00071A                     	endif
  4257  00071A                     	if	0	;tblptru may be non-zero
  4258  00071A                     	endif
  4259  00071A  0008               	tblrd		*
  4260  00071C  50F5               	movf	tablat,w,c
  4261  00071E  ECA2  F026         	call	_isdigit
  4262  000722  A0D8               	btfss	status,0,c
  4263  000724  D043               	goto	l6966
  4264                           
  4265                           ;doprnt.c: 598: width = 0;
  4266  000726  0E00               	movlw	0
  4267  000728  0102               	movlb	2	; () banked
  4268  00072A  6FE0               	movwf	(printf@width+1)& (0+255),b
  4269  00072C  0E00               	movlw	0
  4270  00072E  6FDF               	movwf	printf@width& (0+255),b
  4271  000730  D000               	goto	l6958
  4272  000732                     l6958:
  4273                           
  4274                           ;doprnt.c: 600: width *= 10;
  4275  000732  C2DF  F060         	movff	printf@width,___wmul@multiplier
  4276  000736  C2E0  F061         	movff	printf@width+1,___wmul@multiplier+1
  4277  00073A  0E00               	movlw	0
  4278  00073C  0100               	movlb	0	; () banked
  4279  00073E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4280  000740  0E0A               	movlw	10
  4281  000742  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4282  000744  ECEE  F025         	call	___wmul	;wreg free
  4283  000748  C060  F2DF         	movff	?___wmul,printf@width
  4284  00074C  C061  F2E0         	movff	?___wmul+1,printf@width+1
  4285                           
  4286                           ;doprnt.c: 601: width += *f++ - '0';
  4287  000750  0ED0               	movlw	208
  4288  000752  0100               	movlb	0	; () banked
  4289  000754  6FA3               	movwf	??_printf& (0+255),b
  4290  000756  0EFF               	movlw	255
  4291  000758  0100               	movlb	0	; () banked
  4292  00075A  6FA4               	movwf	(??_printf+1)& (0+255),b
  4293  00075C  C09C  FFF6         	movff	printf@f,tblptrl
  4294  000760  C09D  FFF7         	movff	printf@f+1,tblptrh
  4295  000764                     	if	0	;tblptru may be non-zero
  4296  000764                     	endif
  4297  000764                     	if	0	;tblptru may be non-zero
  4298  000764                     	endif
  4299  000764  0008               	tblrd		*
  4300  000766  50F5               	movf	tablat,w,c
  4301  000768  0100               	movlb	0	; () banked
  4302  00076A  6FA5               	movwf	(??_printf+2)& (0+255),b
  4303  00076C  6BA6               	clrf	(??_printf+3)& (0+255),b
  4304  00076E  0100               	movlb	0	; () banked
  4305  000770  51A3               	movf	??_printf& (0+255),w,b
  4306  000772  0100               	movlb	0	; () banked
  4307  000774  27A5               	addwf	(??_printf+2)& (0+255),f,b
  4308  000776  0100               	movlb	0	; () banked
  4309  000778  51A4               	movf	(??_printf+1)& (0+255),w,b
  4310  00077A  0100               	movlb	0	; () banked
  4311  00077C  23A6               	addwfc	(??_printf+3)& (0+255),f,b
  4312  00077E  0100               	movlb	0	; () banked
  4313  000780  51A5               	movf	(??_printf+2)& (0+255),w,b
  4314  000782  0102               	movlb	2	; () banked
  4315  000784  27DF               	addwf	printf@width& (0+255),f,b
  4316  000786  0100               	movlb	0	; () banked
  4317  000788  51A6               	movf	(??_printf+3)& (0+255),w,b
  4318  00078A  0102               	movlb	2	; () banked
  4319  00078C  23E0               	addwfc	(printf@width+1)& (0+255),f,b
  4320                           
  4321                           ; BSR set to: 2
  4322  00078E  0100               	movlb	0	; () banked
  4323  000790  4B9C               	infsnz	printf@f& (0+255),f,b
  4324  000792  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4328  000794  C09C  FFF6         	movff	printf@f,tblptrl
  4329  000798  C09D  FFF7         	movff	printf@f+1,tblptrh
  4330  00079C                     	if	0	;tblptru may be non-zero
  4331  00079C                     	endif
  4332  00079C                     	if	0	;tblptru may be non-zero
  4333  00079C                     	endif
  4334  00079C  0008               	tblrd		*
  4335  00079E  50F5               	movf	tablat,w,c
  4336  0007A0  ECA2  F026         	call	_isdigit
  4337  0007A4  A0D8               	btfss	status,0,c
  4338  0007A6  D002               	goto	l6966
  4339  0007A8  D7C4               	goto	l6958
  4340  0007AA  D000               	goto	l6966
  4341  0007AC                     l6966:
  4342                           
  4343                           ;doprnt.c: 608: }
  4344                           ;doprnt.c: 611: if(*f == '.') {
  4345  0007AC  C09C  FFF6         	movff	printf@f,tblptrl
  4346  0007B0  C09D  FFF7         	movff	printf@f+1,tblptrh
  4347  0007B4                     	if	0	;tblptru may be non-zero
  4348  0007B4                     	endif
  4349  0007B4                     	if	0	;tblptru may be non-zero
  4350  0007B4                     	endif
  4351  0007B4  0008               	tblrd		*
  4352  0007B6  50F5               	movf	tablat,w,c
  4353  0007B8  0A2E               	xorlw	46
  4354  0007BA  A4D8               	btfss	status,2,c
  4355  0007BC  D03B               	goto	l6978
  4356                           
  4357                           ;doprnt.c: 612: flag |= 0x4000;
  4358  0007BE  0102               	movlb	2	; () banked
  4359  0007C0  8DDE               	bsf	(printf@flag+1)& (0+255),6,b
  4360                           
  4361                           ;doprnt.c: 613: f++;
  4362  0007C2  0100               	movlb	0	; () banked
  4363  0007C4  4B9C               	infsnz	printf@f& (0+255),f,b
  4364  0007C6  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;doprnt.c: 620: {
  4368                           ;doprnt.c: 621: prec = 0;
  4369  0007C8  0E00               	movlw	0
  4370  0007CA  0102               	movlb	2	; () banked
  4371  0007CC  6FE5               	movwf	(printf@prec+1)& (0+255),b
  4372  0007CE  0E00               	movlw	0
  4373  0007D0  6FE4               	movwf	printf@prec& (0+255),b
  4374                           
  4375                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4376  0007D2  D024               	goto	l6976
  4377  0007D4                     l6972:
  4378                           
  4379                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4380  0007D4  C2E4  F060         	movff	printf@prec,___wmul@multiplier
  4381  0007D8  C2E5  F061         	movff	printf@prec+1,___wmul@multiplier+1
  4382  0007DC  0E00               	movlw	0
  4383  0007DE  0100               	movlb	0	; () banked
  4384  0007E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4385  0007E2  0E0A               	movlw	10
  4386  0007E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4387  0007E6  ECEE  F025         	call	___wmul	;wreg free
  4388  0007EA  C09C  FFF6         	movff	printf@f,tblptrl
  4389  0007EE  C09D  FFF7         	movff	printf@f+1,tblptrh
  4390  0007F2                     	if	0	;tblptru may be non-zero
  4391  0007F2                     	endif
  4392  0007F2                     	if	0	;tblptru may be non-zero
  4393  0007F2                     	endif
  4394  0007F2  0008               	tblrd		*
  4395  0007F4  50F5               	movf	tablat,w,c
  4396  0007F6  0100               	movlb	0	; () banked
  4397  0007F8  2760               	addwf	?___wmul& (0+255),f,b
  4398  0007FA  0E00               	movlw	0
  4399  0007FC  0100               	movlb	0	; () banked
  4400  0007FE  2361               	addwfc	(?___wmul+1)& (0+255),f,b
  4401  000800  0ED0               	movlw	208
  4402  000802  0100               	movlb	0	; () banked
  4403  000804  2560               	addwf	?___wmul& (0+255),w,b
  4404  000806  0102               	movlb	2	; () banked
  4405  000808  6FE4               	movwf	printf@prec& (0+255),b
  4406  00080A  0EFF               	movlw	255
  4407  00080C  0100               	movlb	0	; () banked
  4408  00080E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4409  000810  0102               	movlb	2	; () banked
  4410  000812  6FE5               	movwf	(printf@prec+1)& (0+255),b
  4411                           
  4412                           ; BSR set to: 2
  4413  000814  0100               	movlb	0	; () banked
  4414  000816  4B9C               	infsnz	printf@f& (0+255),f,b
  4415  000818  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4416  00081A  D000               	goto	l6976
  4417  00081C                     l6976:
  4418  00081C  C09C  FFF6         	movff	printf@f,tblptrl
  4419  000820  C09D  FFF7         	movff	printf@f+1,tblptrh
  4420  000824                     	if	0	;tblptru may be non-zero
  4421  000824                     	endif
  4422  000824                     	if	0	;tblptru may be non-zero
  4423  000824                     	endif
  4424  000824  0008               	tblrd		*
  4425  000826  50F5               	movf	tablat,w,c
  4426  000828  ECA2  F026         	call	_isdigit
  4427  00082C  A0D8               	btfss	status,0,c
  4428  00082E  D011               	goto	l6986
  4429  000830  D7D1               	goto	l6972
  4430                           
  4431                           ;doprnt.c: 624: }
  4432                           ;doprnt.c: 625: } else {
  4433  000832  D00F               	goto	l6986
  4434  000834                     l6978:
  4435                           
  4436                           ;doprnt.c: 626: prec = 0;
  4437  000834  0E00               	movlw	0
  4438  000836  0102               	movlb	2	; () banked
  4439  000838  6FE5               	movwf	(printf@prec+1)& (0+255),b
  4440  00083A  0E00               	movlw	0
  4441  00083C  6FE4               	movwf	printf@prec& (0+255),b
  4442                           
  4443                           ; BSR set to: 2
  4444                           ;doprnt.c: 628: flag |= 0x1000;
  4445  00083E  0102               	movlb	2	; () banked
  4446  000840  89DE               	bsf	(printf@flag+1)& (0+255),4,b
  4447                           
  4448                           ; BSR set to: 2
  4449                           ;doprnt.c: 630: }
  4450                           ;doprnt.c: 635: switch(c = *f++) {
  4451  000842  D007               	goto	l6986
  4452                           
  4453                           ; BSR set to: 2
  4454                           ;doprnt.c: 638: goto alldone;
  4455                           
  4456                           ;doprnt.c: 637: case 0:
  4457  000844  0012               	return	
  4458  000846                     l6982:
  4459                           
  4460                           ; BSR set to: 2
  4461                           ;doprnt.c: 663: flag |= 0x400;
  4462  000846  0102               	movlb	2	; () banked
  4463  000848  85DE               	bsf	(printf@flag+1)& (0+255),2,b
  4464                           
  4465                           ; BSR set to: 2
  4466                           ;doprnt.c: 698: case 'i':
  4467                           ;doprnt.c: 699: break;
  4468                           
  4469                           ; BSR set to: 2
  4470                           
  4471                           ;doprnt.c: 697: case 'd':
  4472                           
  4473                           ;doprnt.c: 664: break;
  4474  00084A  D01C               	goto	l6988
  4475                           
  4476                           ; BSR set to: 2
  4477                           ;doprnt.c: 813: continue;
  4478                           
  4479                           ;doprnt.c: 802: default:
  4480  00084C  EF8D  F009         	goto	l7236
  4481                           
  4482                           ; BSR set to: 2
  4483                           ;doprnt.c: 822: }
  4484  000850  D019               	goto	l6988
  4485  000852                     l6986:
  4486  000852  C09C  FFF6         	movff	printf@f,tblptrl
  4487  000856  C09D  FFF7         	movff	printf@f+1,tblptrh
  4488  00085A  0100               	movlb	0	; () banked
  4489  00085C  4B9C               	infsnz	printf@f& (0+255),f,b
  4490  00085E  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4491  000860                     	if	0	;tblptru may be non-zero
  4492  000860                     	endif
  4493  000860                     	if	0	;tblptru may be non-zero
  4494  000860                     	endif
  4495  000860  0008               	tblrd		*
  4496  000862  CFF5 F2E6          	movff	tablat,printf@c
  4497  000866  0102               	movlb	2	; () banked
  4498  000868  51E6               	movf	printf@c& (0+255),w,b
  4499                           
  4500                           ; Switch size 1, requested type "space"
  4501                           ; Number of cases is 4, Range of values is 0 to 105
  4502                           ; switch strategies available:
  4503                           ; Name         Instructions Cycles
  4504                           ; simple_byte           13     7 (average)
  4505                           ;	Chosen strategy is simple_byte
  4506  00086A  0A00               	xorlw	0	; case 0
  4507  00086C  B4D8               	btfsc	status,2,c
  4508  00086E  0012               	return	
  4509  000870  0A64               	xorlw	100	; case 100
  4510  000872  B4D8               	btfsc	status,2,c
  4511  000874  D007               	goto	l6988
  4512  000876  0A02               	xorlw	2	; case 102
  4513  000878  B4D8               	btfsc	status,2,c
  4514  00087A  D7E5               	goto	l6982
  4515  00087C  0A0F               	xorlw	15	; case 105
  4516  00087E  A4D8               	btfss	status,2,c
  4517  000880  EF8D  F009         	goto	l7236
  4518  000884                     l6988:
  4519                           
  4520                           ; BSR set to: 2
  4521                           ;doprnt.c: 825: if(flag & (0x700)) {
  4522  000884  0E07               	movlw	7
  4523  000886  0102               	movlb	2	; () banked
  4524  000888  15DE               	andwf	(printf@flag+1)& (0+255),w,b
  4525  00088A  B4D8               	btfsc	status,2,c
  4526  00088C  D3B1               	goto	l7150
  4527                           
  4528                           ; BSR set to: 2
  4529                           ;doprnt.c: 827: if(flag & 0x1000)
  4530  00088E  0102               	movlb	2	; () banked
  4531  000890  A9DE               	btfss	(printf@flag+1)& (0+255),4,b
  4532  000892  D006               	goto	l6994
  4533                           
  4534                           ; BSR set to: 2
  4535                           ;doprnt.c: 829: prec = 6;
  4536  000894  0E00               	movlw	0
  4537  000896  0102               	movlb	2	; () banked
  4538  000898  6FE5               	movwf	(printf@prec+1)& (0+255),b
  4539  00089A  0E06               	movlw	6
  4540  00089C  6FE4               	movwf	printf@prec& (0+255),b
  4541  00089E  D000               	goto	l6994
  4542  0008A0                     l6994:
  4543                           
  4544                           ; BSR set to: 2
  4545                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4546  0008A0  C2D1  FFD9         	movff	printf@ap,fsr2l
  4547  0008A4  C2D2  FFDA         	movff	printf@ap+1,fsr2h
  4548  0008A8  CFDE F2E1          	movff	postinc2,printf@fval
  4549  0008AC  CFDE F2E2          	movff	postinc2,printf@fval+1
  4550  0008B0  CFDD F2E3          	movff	postdec2,printf@fval+2
  4551                           
  4552                           ; BSR set to: 2
  4553  0008B4  0E03               	movlw	3
  4554  0008B6  0102               	movlb	2	; () banked
  4555  0008B8  27D1               	addwf	printf@ap& (0+255),f,b
  4556  0008BA  0E00               	movlw	0
  4557  0008BC  23D2               	addwfc	(printf@ap+1)& (0+255),f,b
  4558                           
  4559                           ; BSR set to: 2
  4560                           ;doprnt.c: 831: if(fval < 0.0) {
  4561  0008BE  0102               	movlb	2	; () banked
  4562  0008C0  AFE3               	btfss	(printf@fval+2)& (0+255),7,b
  4563  0008C2  D012               	goto	l7004
  4564                           
  4565                           ; BSR set to: 2
  4566                           ;doprnt.c: 832: fval = -fval;
  4567  0008C4  C2E1  F01B         	movff	printf@fval,___ftneg@f1
  4568  0008C8  C2E2  F01C         	movff	printf@fval+1,___ftneg@f1+1
  4569  0008CC  C2E3  F01D         	movff	printf@fval+2,___ftneg@f1+2
  4570  0008D0  EC90  F026         	call	___ftneg	;wreg free
  4571  0008D4  C01B  F2E1         	movff	?___ftneg,printf@fval
  4572  0008D8  C01C  F2E2         	movff	?___ftneg+1,printf@fval+1
  4573  0008DC  C01D  F2E3         	movff	?___ftneg+2,printf@fval+2
  4574                           
  4575                           ;doprnt.c: 833: flag |= 0x03;
  4576  0008E0  0E03               	movlw	3
  4577  0008E2  0102               	movlb	2	; () banked
  4578  0008E4  13DD               	iorwf	printf@flag& (0+255),f,b
  4579  0008E6  D000               	goto	l7004
  4580  0008E8                     l7004:
  4581                           
  4582                           ; BSR set to: 2
  4583                           ;doprnt.c: 834: }
  4584                           ;doprnt.c: 835: exp = 0;
  4585  0008E8  0E00               	movlw	0
  4586  0008EA  0102               	movlb	2	; () banked
  4587  0008EC  6FDC               	movwf	(printf@exp+1)& (0+255),b
  4588  0008EE  0E00               	movlw	0
  4589  0008F0  6FDB               	movwf	printf@exp& (0+255),b
  4590                           
  4591                           ; BSR set to: 2
  4592                           ;doprnt.c: 836: if( fval!=0) {
  4593  0008F2  0102               	movlb	2	; () banked
  4594  0008F4  51E1               	movf	printf@fval& (0+255),w,b
  4595  0008F6  0102               	movlb	2	; () banked
  4596  0008F8  11E2               	iorwf	(printf@fval+1)& (0+255),w,b
  4597  0008FA  0102               	movlb	2	; () banked
  4598  0008FC  11E3               	iorwf	(printf@fval+2)& (0+255),w,b
  4599  0008FE  B4D8               	btfsc	status,2,c
  4600  000900  D09C               	goto	l7032
  4601                           
  4602                           ; BSR set to: 2
  4603                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4604  000902  0E82               	movlw	130
  4605  000904  0100               	movlb	0	; () banked
  4606  000906  6FA3               	movwf	??_printf& (0+255),b
  4607  000908  0EFF               	movlw	255
  4608  00090A  0100               	movlb	0	; () banked
  4609  00090C  6FA4               	movwf	(??_printf+1)& (0+255),b
  4610  00090E  C2E1  F0A5         	movff	printf@fval,??_printf+2
  4611  000912  C2E2  F0A6         	movff	printf@fval+1,??_printf+3
  4612  000916  C2E3  F0A7         	movff	printf@fval+2,??_printf+4
  4613  00091A  C2E4  F0A8         	movff	printf@fval+3,??_printf+5
  4614  00091E  0E10               	movlw	16
  4615  000920  D006               	goto	u8500
  4616  000922                     u8505:
  4617  000922  0100               	movlb	0	; () banked
  4618  000924  90D8               	bcf	status,0,c
  4619  000926  33A8               	rrcf	(??_printf+5)& (0+255),f,b
  4620  000928  33A7               	rrcf	(??_printf+4)& (0+255),f,b
  4621  00092A  33A6               	rrcf	(??_printf+3)& (0+255),f,b
  4622  00092C  33A5               	rrcf	(??_printf+2)& (0+255),f,b
  4623  00092E                     u8500:
  4624  00092E  2EE8               	decfsz	wreg,f,c
  4625  000930  D7F8               	goto	u8505
  4626  000932  0100               	movlb	0	; () banked
  4627  000934  51A5               	movf	(??_printf+2)& (0+255),w,b
  4628  000936  0100               	movlb	0	; () banked
  4629  000938  25A3               	addwf	??_printf& (0+255),w,b
  4630  00093A  0102               	movlb	2	; () banked
  4631  00093C  6FDB               	movwf	printf@exp& (0+255),b
  4632  00093E  0E00               	movlw	0
  4633  000940  0100               	movlb	0	; () banked
  4634  000942  21A4               	addwfc	(??_printf+1)& (0+255),w,b
  4635  000944  0102               	movlb	2	; () banked
  4636  000946  6FDC               	movwf	(printf@exp+1)& (0+255),b
  4637                           
  4638                           ; BSR set to: 2
  4639                           ;doprnt.c: 838: exp--;
  4640  000948  0102               	movlb	2	; () banked
  4641  00094A  07DB               	decf	printf@exp& (0+255),f,b
  4642  00094C  A0D8               	btfss	status,0,c
  4643  00094E  07DC               	decf	(printf@exp+1)& (0+255),f,b
  4644                           
  4645                           ; BSR set to: 2
  4646                           ;doprnt.c: 839: exp *= 3;
  4647  000950  C2DB  F060         	movff	printf@exp,___wmul@multiplier
  4648  000954  C2DC  F061         	movff	printf@exp+1,___wmul@multiplier+1
  4649  000958  0E00               	movlw	0
  4650  00095A  0100               	movlb	0	; () banked
  4651  00095C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4652  00095E  0E03               	movlw	3
  4653  000960  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4654  000962  ECEE  F025         	call	___wmul	;wreg free
  4655  000966  C060  F2DB         	movff	?___wmul,printf@exp
  4656  00096A  C061  F2DC         	movff	?___wmul+1,printf@exp+1
  4657                           
  4658                           ;doprnt.c: 840: exp /= 10;
  4659  00096E  C2DB  F021         	movff	printf@exp,___awdiv@dividend
  4660  000972  C2DC  F022         	movff	printf@exp+1,___awdiv@dividend+1
  4661  000976  0E00               	movlw	0
  4662  000978  6E24               	movwf	___awdiv@divisor+1,c
  4663  00097A  0E0A               	movlw	10
  4664  00097C  6E23               	movwf	___awdiv@divisor,c
  4665  00097E  ECD6  F021         	call	___awdiv	;wreg free
  4666  000982  C021  F2DB         	movff	?___awdiv,printf@exp
  4667  000986  C022  F2DC         	movff	?___awdiv+1,printf@exp+1
  4668                           
  4669                           ;doprnt.c: 841: if(exp < 0)
  4670  00098A  0102               	movlb	2	; () banked
  4671  00098C  AFDC               	btfss	(printf@exp+1)& (0+255),7,b
  4672  00098E  D005               	goto	l7020
  4673                           
  4674                           ; BSR set to: 2
  4675                           ;doprnt.c: 842: exp--;
  4676  000990  0102               	movlb	2	; () banked
  4677  000992  07DB               	decf	printf@exp& (0+255),f,b
  4678  000994  A0D8               	btfss	status,0,c
  4679  000996  07DC               	decf	(printf@exp+1)& (0+255),f,b
  4680  000998  D000               	goto	l7020
  4681  00099A                     l7020:
  4682                           
  4683                           ; BSR set to: 2
  4684                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4685  00099A  0102               	movlb	2	; () banked
  4686  00099C  51DB               	movf	printf@exp& (0+255),w,b
  4687  00099E  0800               	sublw	0
  4688  0009A0  ECE8  F00F         	call	_scale
  4689  0009A4  C080  F2D3         	movff	?_scale,printf@tmpval
  4690  0009A8  C081  F2D4         	movff	?_scale+1,printf@tmpval+1
  4691  0009AC  C082  F2D5         	movff	?_scale+2,printf@tmpval+2
  4692                           
  4693                           ;doprnt.c: 847: tmpval.integ *= fval;
  4694  0009B0  C2D3  F071         	movff	printf@tmpval,___ftmul@f1
  4695  0009B4  C2D4  F072         	movff	printf@tmpval+1,___ftmul@f1+1
  4696  0009B8  C2D5  F073         	movff	printf@tmpval+2,___ftmul@f1+2
  4697  0009BC  C2E1  F074         	movff	printf@fval,___ftmul@f2
  4698  0009C0  C2E2  F075         	movff	printf@fval+1,___ftmul@f2+1
  4699  0009C4  C2E3  F076         	movff	printf@fval+2,___ftmul@f2+2
  4700  0009C8  EC0E  F018         	call	___ftmul	;wreg free
  4701  0009CC  C071  F2D3         	movff	?___ftmul,printf@tmpval
  4702  0009D0  C072  F2D4         	movff	?___ftmul+1,printf@tmpval+1
  4703  0009D4  C073  F2D5         	movff	?___ftmul+2,printf@tmpval+2
  4704                           
  4705                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4706  0009D8  C2D3  F064         	movff	printf@tmpval,___ftge@ff1
  4707  0009DC  C2D4  F065         	movff	printf@tmpval+1,___ftge@ff1+1
  4708  0009E0  C2D5  F066         	movff	printf@tmpval+2,___ftge@ff1+2
  4709  0009E4  0E00               	movlw	0
  4710  0009E6  0100               	movlb	0	; () banked
  4711  0009E8  6F67               	movwf	___ftge@ff2& (0+255),b
  4712  0009EA  0E80               	movlw	128
  4713  0009EC  0100               	movlb	0	; () banked
  4714  0009EE  6F68               	movwf	(___ftge@ff2+1)& (0+255),b
  4715  0009F0  0E3F               	movlw	63
  4716  0009F2  0100               	movlb	0	; () banked
  4717  0009F4  6F69               	movwf	(___ftge@ff2+2)& (0+255),b
  4718  0009F6  ECBD  F020         	call	___ftge	;wreg free
  4719  0009FA  0100               	movlb	0	; () banked
  4720  0009FC  B0D8               	btfsc	status,0,c
  4721  0009FE  D005               	goto	l7028
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;doprnt.c: 849: exp--;
  4725  000A00  0102               	movlb	2	; () banked
  4726  000A02  07DB               	decf	printf@exp& (0+255),f,b
  4727  000A04  A0D8               	btfss	status,0,c
  4728  000A06  07DC               	decf	(printf@exp+1)& (0+255),f,b
  4729  000A08  D018               	goto	l7032
  4730  000A0A                     l7028:
  4731                           
  4732                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4733  000A0A  C2D3  F064         	movff	printf@tmpval,___ftge@ff1
  4734  000A0E  C2D4  F065         	movff	printf@tmpval+1,___ftge@ff1+1
  4735  000A12  C2D5  F066         	movff	printf@tmpval+2,___ftge@ff1+2
  4736  000A16  0E00               	movlw	0
  4737  000A18  0100               	movlb	0	; () banked
  4738  000A1A  6F67               	movwf	___ftge@ff2& (0+255),b
  4739  000A1C  0E20               	movlw	32
  4740  000A1E  0100               	movlb	0	; () banked
  4741  000A20  6F68               	movwf	(___ftge@ff2+1)& (0+255),b
  4742  000A22  0E41               	movlw	65
  4743  000A24  0100               	movlb	0	; () banked
  4744  000A26  6F69               	movwf	(___ftge@ff2+2)& (0+255),b
  4745  000A28  ECBD  F020         	call	___ftge	;wreg free
  4746  000A2C  0100               	movlb	0	; () banked
  4747  000A2E  A0D8               	btfss	status,0,c
  4748  000A30  D004               	goto	l7032
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;doprnt.c: 851: exp++;
  4752  000A32  0102               	movlb	2	; () banked
  4753  000A34  4BDB               	infsnz	printf@exp& (0+255),f,b
  4754  000A36  2BDC               	incf	(printf@exp+1)& (0+255),f,b
  4755                           
  4756                           ; BSR set to: 2
  4757                           
  4758                           ; BSR set to: 2
  4759  000A38  D000               	goto	l7032
  4760  000A3A                     l7032:
  4761                           
  4762                           ;doprnt.c: 852: }
  4763                           ;doprnt.c: 1112: if(prec <= 12)
  4764  000A3A  0102               	movlb	2	; () banked
  4765  000A3C  BFE5               	btfsc	(printf@prec+1)& (0+255),7,b
  4766  000A3E  D008               	goto	l7034
  4767  000A40  0102               	movlb	2	; () banked
  4768  000A42  51E5               	movf	(printf@prec+1)& (0+255),w,b
  4769  000A44  E11E               	bnz	l7036
  4770  000A46  0E0D               	movlw	13
  4771  000A48  0102               	movlb	2	; () banked
  4772  000A4A  5DE4               	subwf	printf@prec& (0+255),w,b
  4773  000A4C  B0D8               	btfsc	status,0,c
  4774  000A4E  D019               	goto	l7036
  4775  000A50                     l7034:
  4776                           
  4777                           ; BSR set to: 2
  4778                           ;doprnt.c: 1113: fval += fround(prec);
  4779  000A50  C2E1  F08A         	movff	printf@fval,___ftadd@f1
  4780  000A54  C2E2  F08B         	movff	printf@fval+1,___ftadd@f1+1
  4781  000A58  C2E3  F08C         	movff	printf@fval+2,___ftadd@f1+2
  4782  000A5C  0102               	movlb	2	; () banked
  4783  000A5E  51E4               	movf	printf@prec& (0+255),w,b
  4784  000A60  EC24  F012         	call	_fround
  4785  000A64  C080  F08D         	movff	?_fround,___ftadd@f2
  4786  000A68  C081  F08E         	movff	?_fround+1,___ftadd@f2+1
  4787  000A6C  C082  F08F         	movff	?_fround+2,___ftadd@f2+2
  4788  000A70  EC6D  F013         	call	___ftadd	;wreg free
  4789  000A74  C08A  F2E1         	movff	?___ftadd,printf@fval
  4790  000A78  C08B  F2E2         	movff	?___ftadd+1,printf@fval+1
  4791  000A7C  C08C  F2E3         	movff	?___ftadd+2,printf@fval+2
  4792  000A80  D000               	goto	l7036
  4793  000A82                     l7036:
  4794                           
  4795                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4796  000A82  0102               	movlb	2	; () banked
  4797  000A84  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  4798  000A86  D008               	goto	l7038
  4799  000A88  0102               	movlb	2	; () banked
  4800  000A8A  51DC               	movf	(printf@exp+1)& (0+255),w,b
  4801  000A8C  E12C               	bnz	l7044
  4802  000A8E  0E0A               	movlw	10
  4803  000A90  0102               	movlb	2	; () banked
  4804  000A92  5DDB               	subwf	printf@exp& (0+255),w,b
  4805  000A94  B0D8               	btfsc	status,0,c
  4806  000A96  D027               	goto	l7044
  4807  000A98                     l7038:
  4808                           
  4809                           ; BSR set to: 2
  4810  000A98  0102               	movlb	2	; () banked
  4811  000A9A  51E1               	movf	printf@fval& (0+255),w,b
  4812  000A9C  0102               	movlb	2	; () banked
  4813  000A9E  11E2               	iorwf	(printf@fval+1)& (0+255),w,b
  4814  000AA0  0102               	movlb	2	; () banked
  4815  000AA2  11E3               	iorwf	(printf@fval+2)& (0+255),w,b
  4816  000AA4  B4D8               	btfsc	status,2,c
  4817  000AA6  D07F               	goto	l7058
  4818                           
  4819                           ; BSR set to: 2
  4820  000AA8  C2E1  F087         	movff	printf@fval,___fttol@f1
  4821  000AAC  C2E2  F088         	movff	printf@fval+1,___fttol@f1+1
  4822  000AB0  C2E3  F089         	movff	printf@fval+2,___fttol@f1+2
  4823  000AB4  ECC4  F018         	call	___fttol	;wreg free
  4824  000AB8  0100               	movlb	0	; () banked
  4825  000ABA  5187               	movf	?___fttol& (0+255),w,b
  4826  000ABC  0100               	movlb	0	; () banked
  4827  000ABE  1188               	iorwf	(?___fttol+1)& (0+255),w,b
  4828  000AC0  0100               	movlb	0	; () banked
  4829  000AC2  1189               	iorwf	(?___fttol+2)& (0+255),w,b
  4830  000AC4  0100               	movlb	0	; () banked
  4831  000AC6  118A               	iorwf	(?___fttol+3)& (0+255),w,b
  4832  000AC8  A4D8               	btfss	status,2,c
  4833  000ACA  D06D               	goto	l7058
  4834                           
  4835                           ; BSR set to: 0
  4836  000ACC  0102               	movlb	2	; () banked
  4837  000ACE  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  4838  000AD0  D06A               	goto	l7058
  4839  000AD2  0102               	movlb	2	; () banked
  4840  000AD4  51DC               	movf	(printf@exp+1)& (0+255),w,b
  4841  000AD6  E107               	bnz	l7044
  4842  000AD8  0E02               	movlw	2
  4843  000ADA  0102               	movlb	2	; () banked
  4844  000ADC  5DDB               	subwf	printf@exp& (0+255),w,b
  4845  000ADE  B0D8               	btfsc	status,0,c
  4846  000AE0  D002               	goto	l7044
  4847  000AE2  D061               	goto	l7058
  4848  000AE4  D000               	goto	l7044
  4849  000AE6                     l7044:
  4850                           
  4851                           ; BSR set to: 2
  4852                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4853  000AE6  C2D3  F064         	movff	printf@tmpval,___ftge@ff1
  4854  000AEA  C2D4  F065         	movff	printf@tmpval+1,___ftge@ff1+1
  4855  000AEE  C2D5  F066         	movff	printf@tmpval+2,___ftge@ff1+2
  4856  000AF2  0E70               	movlw	112
  4857  000AF4  0100               	movlb	0	; () banked
  4858  000AF6  6F67               	movwf	___ftge@ff2& (0+255),b
  4859  000AF8  0E89               	movlw	137
  4860  000AFA  0100               	movlb	0	; () banked
  4861  000AFC  6F68               	movwf	(___ftge@ff2+1)& (0+255),b
  4862  000AFE  0E40               	movlw	64
  4863  000B00  0100               	movlb	0	; () banked
  4864  000B02  6F69               	movwf	(___ftge@ff2+2)& (0+255),b
  4865  000B04  ECBD  F020         	call	___ftge	;wreg free
  4866  000B08  0100               	movlb	0	; () banked
  4867  000B0A  B0D8               	btfsc	status,0,c
  4868  000B0C  D003               	goto	l7048
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4872  000B0E  0102               	movlb	2	; () banked
  4873  000B10  0EF7               	movlw	247
  4874  000B12  D002               	goto	L1
  4875  000B14                     l7048:
  4876                           
  4877                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4878  000B14  0102               	movlb	2	; () banked
  4879  000B16  0EF8               	movlw	248
  4880  000B18                     L1:
  4881  000B18  27DB               	addwf	printf@exp& (0+255),f,b
  4882  000B1A  0EFF               	movlw	255
  4883  000B1C  23DC               	addwfc	(printf@exp+1)& (0+255),f,b
  4884  000B1E  D000               	goto	l7050
  4885  000B20                     l7050:
  4886                           
  4887                           ; BSR set to: 2
  4888                           ;doprnt.c: 1124: }
  4889                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4890  000B20  0102               	movlb	2	; () banked
  4891  000B22  51DB               	movf	printf@exp& (0+255),w,b
  4892  000B24  ECE8  F00F         	call	_scale
  4893  000B28  C080  F2D3         	movff	?_scale,printf@tmpval
  4894  000B2C  C081  F2D4         	movff	?_scale+1,printf@tmpval+1
  4895  000B30  C082  F2D5         	movff	?_scale+2,printf@tmpval+2
  4896                           
  4897                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4898  000B34  D017               	goto	l7054
  4899  000B36  C2E1  F01B         	movff	printf@fval,__div_to_l_@f1
  4900  000B3A  C2E2  F01C         	movff	printf@fval+1,__div_to_l_@f1+1
  4901  000B3E  C2E3  F01D         	movff	printf@fval+2,__div_to_l_@f1+2
  4902  000B42  C2D3  F01E         	movff	printf@tmpval,__div_to_l_@f2
  4903  000B46  C2D4  F01F         	movff	printf@tmpval+1,__div_to_l_@f2+1
  4904  000B4A  C2D5  F020         	movff	printf@tmpval+2,__div_to_l_@f2+2
  4905  000B4E  EC5A  F01B         	call	__div_to_l_	;wreg free
  4906  000B52  C01B  F2D7         	movff	?__div_to_l_,printf@val
  4907  000B56  C01C  F2D8         	movff	?__div_to_l_+1,printf@val+1
  4908  000B5A  C01D  F2D9         	movff	?__div_to_l_+2,printf@val+2
  4909  000B5E  C01E  F2DA         	movff	?__div_to_l_+3,printf@val+3
  4910  000B62  D017               	goto	l7056
  4911  000B64                     l7054:
  4912  000B64  C2E1  F01B         	movff	printf@fval,__tdiv_to_l_@f1
  4913  000B68  C2E2  F01C         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  4914  000B6C  C2E3  F01D         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  4915  000B70  C2D3  F01E         	movff	printf@tmpval,__tdiv_to_l_@f2
  4916  000B74  C2D4  F01F         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  4917  000B78  C2D5  F020         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  4918  000B7C  ECBD  F01A         	call	__tdiv_to_l_	;wreg free
  4919  000B80  C01B  F2D7         	movff	?__tdiv_to_l_,printf@val
  4920  000B84  C01C  F2D8         	movff	?__tdiv_to_l_+1,printf@val+1
  4921  000B88  C01D  F2D9         	movff	?__tdiv_to_l_+2,printf@val+2
  4922  000B8C  C01E  F2DA         	movff	?__tdiv_to_l_+3,printf@val+3
  4923  000B90  D000               	goto	l7056
  4924  000B92                     l7056:
  4925                           
  4926                           ;doprnt.c: 1129: fval = 0.0;
  4927  000B92  0E00               	movlw	0
  4928  000B94  0102               	movlb	2	; () banked
  4929  000B96  6FE1               	movwf	printf@fval& (0+255),b
  4930  000B98  0E00               	movlw	0
  4931  000B9A  0102               	movlb	2	; () banked
  4932  000B9C  6FE2               	movwf	(printf@fval+1)& (0+255),b
  4933  000B9E  0E00               	movlw	0
  4934  000BA0  0102               	movlb	2	; () banked
  4935  000BA2  6FE3               	movwf	(printf@fval+2)& (0+255),b
  4936                           
  4937                           ;doprnt.c: 1130: } else {
  4938  000BA4  D034               	goto	l7062
  4939  000BA6                     l7058:
  4940                           
  4941                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4942  000BA6  C2E1  F087         	movff	printf@fval,___fttol@f1
  4943  000BAA  C2E2  F088         	movff	printf@fval+1,___fttol@f1+1
  4944  000BAE  C2E3  F089         	movff	printf@fval+2,___fttol@f1+2
  4945  000BB2  ECC4  F018         	call	___fttol	;wreg free
  4946  000BB6  C087  F2D7         	movff	?___fttol,printf@val
  4947  000BBA  C088  F2D8         	movff	?___fttol+1,printf@val+1
  4948  000BBE  C089  F2D9         	movff	?___fttol+2,printf@val+2
  4949  000BC2  C08A  F2DA         	movff	?___fttol+3,printf@val+3
  4950                           
  4951                           ;doprnt.c: 1132: fval -= (double)val;
  4952  000BC6  C2E1  F096         	movff	printf@fval,___ftsub@f1
  4953  000BCA  C2E2  F097         	movff	printf@fval+1,___ftsub@f1+1
  4954  000BCE  C2E3  F098         	movff	printf@fval+2,___ftsub@f1+2
  4955  000BD2  C2D7  F023         	movff	printf@val,___lltoft@c
  4956  000BD6  C2D8  F024         	movff	printf@val+1,___lltoft@c+1
  4957  000BDA  C2D9  F025         	movff	printf@val+2,___lltoft@c+2
  4958  000BDE  C2DA  F026         	movff	printf@val+3,___lltoft@c+3
  4959  000BE2  EC7B  F024         	call	___lltoft	;wreg free
  4960  000BE6  C023  F099         	movff	?___lltoft,___ftsub@f2
  4961  000BEA  C024  F09A         	movff	?___lltoft+1,___ftsub@f2+1
  4962  000BEE  C025  F09B         	movff	?___lltoft+2,___ftsub@f2+2
  4963  000BF2  EC03  F025         	call	___ftsub	;wreg free
  4964  000BF6  C096  F2E1         	movff	?___ftsub,printf@fval
  4965  000BFA  C097  F2E2         	movff	?___ftsub+1,printf@fval+1
  4966  000BFE  C098  F2E3         	movff	?___ftsub+2,printf@fval+2
  4967                           
  4968                           ;doprnt.c: 1133: exp = 0;
  4969  000C02  0E00               	movlw	0
  4970  000C04  0102               	movlb	2	; () banked
  4971  000C06  6FDC               	movwf	(printf@exp+1)& (0+255),b
  4972  000C08  0E00               	movlw	0
  4973  000C0A  6FDB               	movwf	printf@exp& (0+255),b
  4974  000C0C  D000               	goto	l7062
  4975  000C0E                     l7062:
  4976                           
  4977                           ; BSR set to: 2
  4978                           ;doprnt.c: 1134: }
  4979                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4980  000C0E  0E01               	movlw	1
  4981  000C10  0102               	movlb	2	; () banked
  4982  000C12  6FE6               	movwf	printf@c& (0+255),b
  4983  000C14                     l7064:
  4984                           
  4985                           ; BSR set to: 2
  4986  000C14  0E0A               	movlw	10
  4987  000C16  0102               	movlb	2	; () banked
  4988  000C18  19E6               	xorwf	printf@c& (0+255),w,b
  4989  000C1A  B4D8               	btfsc	status,2,c
  4990  000C1C  D022               	goto	l7076
  4991  000C1E  D001               	goto	l7068
  4992                           
  4993                           ; BSR set to: 2
  4994  000C20  D020               	goto	l7076
  4995  000C22                     l7068:
  4996                           
  4997                           ; BSR set to: 2
  4998                           ;doprnt.c: 1137: if(val < dpowers[c])
  4999  000C22  0102               	movlb	2	; () banked
  5000  000C24  51E6               	movf	printf@c& (0+255),w,b
  5001  000C26  0D04               	mullw	4
  5002  000C28  0E01               	movlw	low _dpowers
  5003  000C2A  24F3               	addwf	prodl,w,c
  5004  000C2C  6EF6               	movwf	tblptrl,c
  5005  000C2E  0E06               	movlw	high _dpowers
  5006  000C30  20F4               	addwfc	prodh,w,c
  5007  000C32  6EF7               	movwf	tblptrh,c
  5008  000C34                     	if	0	;There are less than 3 active tblptr bytes
  5009  000C34                     	endif
  5010  000C34  0009               	tblrd		*+
  5011  000C36  50F5               	movf	tablat,w,c
  5012  000C38  0102               	movlb	2	; () banked
  5013  000C3A  5DD7               	subwf	printf@val& (0+255),w,b
  5014  000C3C  0009               	tblrd		*+
  5015  000C3E  50F5               	movf	tablat,w,c
  5016  000C40  0102               	movlb	2	; () banked
  5017  000C42  59D8               	subwfb	(printf@val+1)& (0+255),w,b
  5018  000C44  0009               	tblrd		*+
  5019  000C46  50F5               	movf	tablat,w,c
  5020  000C48  0102               	movlb	2	; () banked
  5021  000C4A  59D9               	subwfb	(printf@val+2)& (0+255),w,b
  5022  000C4C  0009               	tblrd		*+
  5023  000C4E  50F5               	movf	tablat,w,c
  5024  000C50  0102               	movlb	2	; () banked
  5025  000C52  59DA               	subwfb	(printf@val+3)& (0+255),w,b
  5026  000C54  A0D8               	btfss	status,0,c
  5027  000C56  D005               	goto	l7076
  5028  000C58  D001               	goto	l7072
  5029                           
  5030                           ; BSR set to: 2
  5031                           ;doprnt.c: 1138: break;
  5032  000C5A  D003               	goto	l7076
  5033  000C5C                     l7072:
  5034                           
  5035                           ; BSR set to: 2
  5036  000C5C  0102               	movlb	2	; () banked
  5037  000C5E  2BE6               	incf	printf@c& (0+255),f,b
  5038  000C60  D7D9               	goto	l7064
  5039  000C62                     l7076:
  5040                           
  5041                           ; BSR set to: 2
  5042                           ;doprnt.c: 1142: width -= prec + c + exp;
  5043  000C62  C2E6  F0A3         	movff	printf@c,??_printf
  5044  000C66  0100               	movlb	0	; () banked
  5045  000C68  6BA4               	clrf	(??_printf+1)& (0+255),b
  5046  000C6A  BFA3               	btfsc	??_printf& (0+255),7,b
  5047  000C6C  07A4               	decf	(??_printf+1)& (0+255),f,b
  5048  000C6E  0102               	movlb	2	; () banked
  5049  000C70  51E4               	movf	printf@prec& (0+255),w,b
  5050  000C72  0100               	movlb	0	; () banked
  5051  000C74  27A3               	addwf	??_printf& (0+255),f,b
  5052  000C76  0102               	movlb	2	; () banked
  5053  000C78  51E5               	movf	(printf@prec+1)& (0+255),w,b
  5054  000C7A  0100               	movlb	0	; () banked
  5055  000C7C  23A4               	addwfc	(??_printf+1)& (0+255),f,b
  5056  000C7E  0102               	movlb	2	; () banked
  5057  000C80  51DB               	movf	printf@exp& (0+255),w,b
  5058  000C82  0100               	movlb	0	; () banked
  5059  000C84  27A3               	addwf	??_printf& (0+255),f,b
  5060  000C86  0102               	movlb	2	; () banked
  5061  000C88  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5062  000C8A  0100               	movlb	0	; () banked
  5063  000C8C  23A4               	addwfc	(??_printf+1)& (0+255),f,b
  5064  000C8E  0100               	movlb	0	; () banked
  5065  000C90  51A3               	movf	??_printf& (0+255),w,b
  5066  000C92  0102               	movlb	2	; () banked
  5067  000C94  5FDF               	subwf	printf@width& (0+255),f,b
  5068  000C96  0100               	movlb	0	; () banked
  5069  000C98  51A4               	movf	(??_printf+1)& (0+255),w,b
  5070  000C9A  0102               	movlb	2	; () banked
  5071  000C9C  5BE0               	subwfb	(printf@width+1)& (0+255),f,b
  5072                           
  5073                           ;doprnt.c: 1143: if(
  5074                           ;doprnt.c: 1147: prec)
  5075  000C9E  0102               	movlb	2	; () banked
  5076  000CA0  51E4               	movf	printf@prec& (0+255),w,b
  5077  000CA2  0102               	movlb	2	; () banked
  5078  000CA4  11E5               	iorwf	(printf@prec+1)& (0+255),w,b
  5079  000CA6  B4D8               	btfsc	status,2,c
  5080  000CA8  D005               	goto	l7080
  5081                           
  5082                           ; BSR set to: 2
  5083                           ;doprnt.c: 1148: width--;
  5084  000CAA  0102               	movlb	2	; () banked
  5085  000CAC  07DF               	decf	printf@width& (0+255),f,b
  5086  000CAE  A0D8               	btfss	status,0,c
  5087  000CB0  07E0               	decf	(printf@width+1)& (0+255),f,b
  5088  000CB2  D000               	goto	l7080
  5089  000CB4                     l7080:
  5090                           
  5091                           ; BSR set to: 2
  5092                           ;doprnt.c: 1149: if(flag & 0x03)
  5093  000CB4  0E03               	movlw	3
  5094  000CB6  0102               	movlb	2	; () banked
  5095  000CB8  15DD               	andwf	printf@flag& (0+255),w,b
  5096  000CBA  0100               	movlb	0	; () banked
  5097  000CBC  6FA3               	movwf	??_printf& (0+255),b
  5098  000CBE  0E00               	movlw	0
  5099  000CC0  0102               	movlb	2	; () banked
  5100  000CC2  15DE               	andwf	(printf@flag+1)& (0+255),w,b
  5101  000CC4  0100               	movlb	0	; () banked
  5102  000CC6  6FA4               	movwf	(??_printf+1)& (0+255),b
  5103  000CC8  0100               	movlb	0	; () banked
  5104  000CCA  51A3               	movf	??_printf& (0+255),w,b
  5105  000CCC  0100               	movlb	0	; () banked
  5106  000CCE  11A4               	iorwf	(??_printf+1)& (0+255),w,b
  5107  000CD0  B4D8               	btfsc	status,2,c
  5108  000CD2  D005               	goto	l7084
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;doprnt.c: 1150: width--;
  5112  000CD4  0102               	movlb	2	; () banked
  5113  000CD6  07DF               	decf	printf@width& (0+255),f,b
  5114  000CD8  A0D8               	btfss	status,0,c
  5115  000CDA  07E0               	decf	(printf@width+1)& (0+255),f,b
  5116  000CDC  D000               	goto	l7084
  5117  000CDE                     l7084:
  5118                           
  5119                           ;doprnt.c: 1153: if(flag & 0x04) {
  5120  000CDE  0102               	movlb	2	; () banked
  5121  000CE0  A5DD               	btfss	printf@flag& (0+255),2,b
  5122  000CE2  D031               	goto	l7100
  5123                           
  5124                           ; BSR set to: 2
  5125                           ;doprnt.c: 1157: if(flag & 0x03)
  5126  000CE4  0E03               	movlw	3
  5127  000CE6  0102               	movlb	2	; () banked
  5128  000CE8  15DD               	andwf	printf@flag& (0+255),w,b
  5129  000CEA  0100               	movlb	0	; () banked
  5130  000CEC  6FA3               	movwf	??_printf& (0+255),b
  5131  000CEE  0E00               	movlw	0
  5132  000CF0  0102               	movlb	2	; () banked
  5133  000CF2  15DE               	andwf	(printf@flag+1)& (0+255),w,b
  5134  000CF4  0100               	movlb	0	; () banked
  5135  000CF6  6FA4               	movwf	(??_printf+1)& (0+255),b
  5136  000CF8  0100               	movlb	0	; () banked
  5137  000CFA  51A3               	movf	??_printf& (0+255),w,b
  5138  000CFC  0100               	movlb	0	; () banked
  5139  000CFE  11A4               	iorwf	(??_printf+1)& (0+255),w,b
  5140  000D00  B4D8               	btfsc	status,2,c
  5141  000D02  D00C               	goto	l7094
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;doprnt.c: 1159: (putch('-') );
  5145  000D04  0E2D               	movlw	45
  5146  000D06  EC5F  F027         	call	_putch
  5147                           
  5148                           ;doprnt.c: 1168: while(width > 0) {
  5149  000D0A  D008               	goto	l7094
  5150  000D0C                     l7090:
  5151                           
  5152                           ;doprnt.c: 1169: (putch('0') );
  5153  000D0C  0E30               	movlw	48
  5154  000D0E  EC5F  F027         	call	_putch
  5155                           
  5156                           ;doprnt.c: 1170: width--;
  5157  000D12  0102               	movlb	2	; () banked
  5158  000D14  07DF               	decf	printf@width& (0+255),f,b
  5159  000D16  A0D8               	btfss	status,0,c
  5160  000D18  07E0               	decf	(printf@width+1)& (0+255),f,b
  5161  000D1A  D000               	goto	l7094
  5162  000D1C                     l7094:
  5163  000D1C  0102               	movlb	2	; () banked
  5164  000D1E  BFE0               	btfsc	(printf@width+1)& (0+255),7,b
  5165  000D20  D078               	goto	l7112
  5166  000D22  0102               	movlb	2	; () banked
  5167  000D24  51E0               	movf	(printf@width+1)& (0+255),w,b
  5168  000D26  E1F2               	bnz	l7090
  5169  000D28  0102               	movlb	2	; () banked
  5170  000D2A  05DF               	decf	printf@width& (0+255),w,b
  5171  000D2C  A0D8               	btfss	status,0,c
  5172  000D2E  D071               	goto	l7112
  5173  000D30  D7ED               	goto	l7090
  5174                           
  5175                           ; BSR set to: 2
  5176                           ;doprnt.c: 1171: }
  5177                           ;doprnt.c: 1173: } else
  5178  000D32  D06F               	goto	l7112
  5179                           
  5180                           ; BSR set to: 2
  5181                           ;doprnt.c: 1175: {
  5182                           ;doprnt.c: 1180: while(width > 0) {
  5183  000D34  D008               	goto	l7100
  5184  000D36                     l7096:
  5185                           
  5186                           ; BSR set to: 2
  5187                           ;doprnt.c: 1181: (putch(' ') );
  5188  000D36  0E20               	movlw	32
  5189  000D38  EC5F  F027         	call	_putch
  5190                           
  5191                           ;doprnt.c: 1182: width--;
  5192  000D3C  0102               	movlb	2	; () banked
  5193  000D3E  07DF               	decf	printf@width& (0+255),f,b
  5194  000D40  A0D8               	btfss	status,0,c
  5195  000D42  07E0               	decf	(printf@width+1)& (0+255),f,b
  5196  000D44  D000               	goto	l7100
  5197  000D46                     l7100:
  5198                           
  5199                           ; BSR set to: 2
  5200  000D46  0102               	movlb	2	; () banked
  5201  000D48  BFE0               	btfsc	(printf@width+1)& (0+255),7,b
  5202  000D4A  D007               	goto	l7102
  5203  000D4C  0102               	movlb	2	; () banked
  5204  000D4E  51E0               	movf	(printf@width+1)& (0+255),w,b
  5205  000D50  E1F2               	bnz	l7096
  5206  000D52  0102               	movlb	2	; () banked
  5207  000D54  05DF               	decf	printf@width& (0+255),w,b
  5208  000D56  B0D8               	btfsc	status,0,c
  5209  000D58  D7EE               	goto	l7096
  5210  000D5A                     l7102:
  5211                           
  5212                           ; BSR set to: 2
  5213                           ;doprnt.c: 1183: }
  5214                           ;doprnt.c: 1188: if(flag & 0x03)
  5215  000D5A  0E03               	movlw	3
  5216  000D5C  0102               	movlb	2	; () banked
  5217  000D5E  15DD               	andwf	printf@flag& (0+255),w,b
  5218  000D60  0100               	movlb	0	; () banked
  5219  000D62  6FA3               	movwf	??_printf& (0+255),b
  5220  000D64  0E00               	movlw	0
  5221  000D66  0102               	movlb	2	; () banked
  5222  000D68  15DE               	andwf	(printf@flag+1)& (0+255),w,b
  5223  000D6A  0100               	movlb	0	; () banked
  5224  000D6C  6FA4               	movwf	(??_printf+1)& (0+255),b
  5225  000D6E  0100               	movlb	0	; () banked
  5226  000D70  51A3               	movf	??_printf& (0+255),w,b
  5227  000D72  0100               	movlb	0	; () banked
  5228  000D74  11A4               	iorwf	(??_printf+1)& (0+255),w,b
  5229  000D76  B4D8               	btfsc	status,2,c
  5230  000D78  D04C               	goto	l7112
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;doprnt.c: 1190: (putch('-') );
  5234  000D7A  0E2D               	movlw	45
  5235  000D7C  EC5F  F027         	call	_putch
  5236                           
  5237                           ;doprnt.c: 1195: }
  5238                           ;doprnt.c: 1196: while(c--) {
  5239  000D80  D048               	goto	l7112
  5240  000D82                     l7106:
  5241                           
  5242                           ;doprnt.c: 1200: {
  5243                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5244  000D82  C2D7  F01B         	movff	printf@val,___lldiv@dividend
  5245  000D86  C2D8  F01C         	movff	printf@val+1,___lldiv@dividend+1
  5246  000D8A  C2D9  F01D         	movff	printf@val+2,___lldiv@dividend+2
  5247  000D8E  C2DA  F01E         	movff	printf@val+3,___lldiv@dividend+3
  5248  000D92  0102               	movlb	2	; () banked
  5249  000D94  51E6               	movf	printf@c& (0+255),w,b
  5250  000D96  0D04               	mullw	4
  5251  000D98  0E01               	movlw	low _dpowers
  5252  000D9A  24F3               	addwf	prodl,w,c
  5253  000D9C  6EF6               	movwf	tblptrl,c
  5254  000D9E  0E06               	movlw	high _dpowers
  5255  000DA0  20F4               	addwfc	prodh,w,c
  5256  000DA2  6EF7               	movwf	tblptrh,c
  5257  000DA4                     	if	0	;There are less than 3 active tblptr bytes
  5258  000DA4                     	endif
  5259  000DA4  0009               	tblrd		*+
  5260  000DA6  CFF5 F01F          	movff	tablat,___lldiv@divisor
  5261  000DAA  0009               	tblrd		*+
  5262  000DAC  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  5263  000DB0  0009               	tblrd		*+
  5264  000DB2  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  5265  000DB6  000A               	tblrd		*-
  5266  000DB8  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  5267  000DBC  ECFE  F022         	call	___lldiv	;wreg free
  5268  000DC0  C01B  F2D3         	movff	?___lldiv,printf@tmpval
  5269  000DC4  C01C  F2D4         	movff	?___lldiv+1,printf@tmpval+1
  5270  000DC8  C01D  F2D5         	movff	?___lldiv+2,printf@tmpval+2
  5271  000DCC  C01E  F2D6         	movff	?___lldiv+3,printf@tmpval+3
  5272                           
  5273                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5274  000DD0  C2D3  F060         	movff	printf@tmpval,___llmod@dividend
  5275  000DD4  C2D4  F061         	movff	printf@tmpval+1,___llmod@dividend+1
  5276  000DD8  C2D5  F062         	movff	printf@tmpval+2,___llmod@dividend+2
  5277  000DDC  C2D6  F063         	movff	printf@tmpval+3,___llmod@dividend+3
  5278  000DE0  0E0A               	movlw	10
  5279  000DE2  0100               	movlb	0	; () banked
  5280  000DE4  6F64               	movwf	___llmod@divisor& (0+255),b
  5281  000DE6  0E00               	movlw	0
  5282  000DE8  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  5283  000DEA  0E00               	movlw	0
  5284  000DEC  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  5285  000DEE  0E00               	movlw	0
  5286  000DF0  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  5287  000DF2  EC87  F021         	call	___llmod	;wreg free
  5288  000DF6  C060  F2D3         	movff	?___llmod,printf@tmpval
  5289  000DFA  C061  F2D4         	movff	?___llmod+1,printf@tmpval+1
  5290  000DFE  C062  F2D5         	movff	?___llmod+2,printf@tmpval+2
  5291  000E02  C063  F2D6         	movff	?___llmod+3,printf@tmpval+3
  5292                           
  5293                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5294  000E06  0102               	movlb	2	; () banked
  5295  000E08  51D3               	movf	printf@tmpval& (0+255),w,b
  5296  000E0A  0F30               	addlw	48
  5297  000E0C  EC5F  F027         	call	_putch
  5298  000E10  D000               	goto	l7112
  5299  000E12                     l7112:
  5300  000E12  0102               	movlb	2	; () banked
  5301  000E14  07E6               	decf	printf@c& (0+255),f,b
  5302  000E16  0102               	movlb	2	; () banked
  5303  000E18  29E6               	incf	printf@c& (0+255),w,b
  5304  000E1A  B4D8               	btfsc	status,2,c
  5305  000E1C  D00A               	goto	l7118
  5306  000E1E  D7B1               	goto	l7106
  5307                           
  5308                           ; BSR set to: 2
  5309                           ;doprnt.c: 1204: }
  5310                           ;doprnt.c: 1206: }
  5311                           ;doprnt.c: 1207: while(exp > 0) {
  5312  000E20  D008               	goto	l7118
  5313  000E22                     l7114:
  5314                           
  5315                           ; BSR set to: 2
  5316                           ;doprnt.c: 1208: (putch('0') );
  5317  000E22  0E30               	movlw	48
  5318  000E24  EC5F  F027         	call	_putch
  5319                           
  5320                           ;doprnt.c: 1209: exp--;
  5321  000E28  0102               	movlb	2	; () banked
  5322  000E2A  07DB               	decf	printf@exp& (0+255),f,b
  5323  000E2C  A0D8               	btfss	status,0,c
  5324  000E2E  07DC               	decf	(printf@exp+1)& (0+255),f,b
  5325  000E30  D000               	goto	l7118
  5326  000E32                     l7118:
  5327                           
  5328                           ; BSR set to: 2
  5329  000E32  0102               	movlb	2	; () banked
  5330  000E34  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  5331  000E36  D007               	goto	l7120
  5332  000E38  0102               	movlb	2	; () banked
  5333  000E3A  51DC               	movf	(printf@exp+1)& (0+255),w,b
  5334  000E3C  E1F2               	bnz	l7114
  5335  000E3E  0102               	movlb	2	; () banked
  5336  000E40  05DB               	decf	printf@exp& (0+255),w,b
  5337  000E42  B0D8               	btfsc	status,0,c
  5338  000E44  D7EE               	goto	l7114
  5339  000E46                     l7120:
  5340                           
  5341                           ; BSR set to: 2
  5342                           ;doprnt.c: 1210: }
  5343                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5344  000E46  0102               	movlb	2	; () banked
  5345  000E48  BFE5               	btfsc	(printf@prec+1)& (0+255),7,b
  5346  000E4A  D00C               	goto	l898
  5347  000E4C  0102               	movlb	2	; () banked
  5348  000E4E  51E5               	movf	(printf@prec+1)& (0+255),w,b
  5349  000E50  E105               	bnz	u8720
  5350  000E52  0E09               	movlw	9
  5351  000E54  0102               	movlb	2	; () banked
  5352  000E56  5DE4               	subwf	printf@prec& (0+255),w,b
  5353  000E58  A0D8               	btfss	status,0,c
  5354  000E5A  D004               	goto	l898
  5355  000E5C                     u8720:
  5356                           
  5357                           ; BSR set to: 2
  5358                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5359  000E5C  0E08               	movlw	8
  5360  000E5E  0102               	movlb	2	; () banked
  5361  000E60  6FE6               	movwf	printf@c& (0+255),b
  5362  000E62  D003               	goto	l7124
  5363  000E64                     l898:
  5364                           
  5365                           ; BSR set to: 2
  5366                           ;doprnt.c: 1213: else
  5367                           ;doprnt.c: 1214: c = prec;
  5368  000E64  C2E4  F2E6         	movff	printf@prec,printf@c
  5369  000E68  D000               	goto	l7124
  5370  000E6A                     l7124:
  5371                           
  5372                           ; BSR set to: 2
  5373                           ;doprnt.c: 1215: prec -= c;
  5374  000E6A  0102               	movlb	2	; () banked
  5375  000E6C  51E6               	movf	printf@c& (0+255),w,b
  5376  000E6E  0102               	movlb	2	; () banked
  5377  000E70  5FE4               	subwf	printf@prec& (0+255),f,b
  5378  000E72  0E00               	movlw	0
  5379  000E74  0102               	movlb	2	; () banked
  5380  000E76  BFE6               	btfsc	printf@c& (0+255),7,b
  5381  000E78  0EFF               	movlw	255
  5382  000E7A  0102               	movlb	2	; () banked
  5383  000E7C  5BE5               	subwfb	(printf@prec+1)& (0+255),f,b
  5384                           
  5385                           ; BSR set to: 2
  5386                           ;doprnt.c: 1219: if(c)
  5387  000E7E  0102               	movlb	2	; () banked
  5388  000E80  51E6               	movf	printf@c& (0+255),w,b
  5389  000E82  0102               	movlb	2	; () banked
  5390  000E84  B4D8               	btfsc	status,2,c
  5391  000E86  D004               	goto	l7130
  5392                           
  5393                           ; BSR set to: 2
  5394                           ;doprnt.c: 1221: (putch('.') );
  5395  000E88  0E2E               	movlw	46
  5396  000E8A  EC5F  F027         	call	_putch
  5397  000E8E  D000               	goto	l7130
  5398  000E90                     l7130:
  5399                           
  5400                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5401  000E90  0102               	movlb	2	; () banked
  5402  000E92  51E6               	movf	printf@c& (0+255),w,b
  5403  000E94  ECE8  F00F         	call	_scale
  5404  000E98  C080  F2CE         	movff	?_scale,_printf$2056
  5405  000E9C  C081  F2CF         	movff	?_scale+1,_printf$2056+1
  5406  000EA0  C082  F2D0         	movff	?_scale+2,_printf$2056+2
  5407                           
  5408                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5409  000EA4  C2E1  F074         	movff	printf@fval,___ftmul@f2
  5410  000EA8  C2E2  F075         	movff	printf@fval+1,___ftmul@f2+1
  5411  000EAC  C2E3  F076         	movff	printf@fval+2,___ftmul@f2+2
  5412  000EB0  C2CE  F071         	movff	_printf$2056,___ftmul@f1
  5413  000EB4  C2CF  F072         	movff	_printf$2056+1,___ftmul@f1+1
  5414  000EB8  C2D0  F073         	movff	_printf$2056+2,___ftmul@f1+2
  5415  000EBC  EC0E  F018         	call	___ftmul	;wreg free
  5416  000EC0  C071  F087         	movff	?___ftmul,___fttol@f1
  5417  000EC4  C072  F088         	movff	?___ftmul+1,___fttol@f1+1
  5418  000EC8  C073  F089         	movff	?___ftmul+2,___fttol@f1+2
  5419  000ECC  ECC4  F018         	call	___fttol	;wreg free
  5420  000ED0  C087  F2D7         	movff	?___fttol,printf@val
  5421  000ED4  C088  F2D8         	movff	?___fttol+1,printf@val+1
  5422  000ED8  C089  F2D9         	movff	?___fttol+2,printf@val+2
  5423  000EDC  C08A  F2DA         	movff	?___fttol+3,printf@val+3
  5424                           
  5425                           ;doprnt.c: 1228: while(c--) {
  5426  000EE0  D06F               	goto	l7142
  5427  000EE2                     l7134:
  5428                           
  5429                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5430  000EE2  C2D7  F01B         	movff	printf@val,___lldiv@dividend
  5431  000EE6  C2D8  F01C         	movff	printf@val+1,___lldiv@dividend+1
  5432  000EEA  C2D9  F01D         	movff	printf@val+2,___lldiv@dividend+2
  5433  000EEE  C2DA  F01E         	movff	printf@val+3,___lldiv@dividend+3
  5434  000EF2  0102               	movlb	2	; () banked
  5435  000EF4  51E6               	movf	printf@c& (0+255),w,b
  5436  000EF6  0D04               	mullw	4
  5437  000EF8  0E01               	movlw	low _dpowers
  5438  000EFA  24F3               	addwf	prodl,w,c
  5439  000EFC  6EF6               	movwf	tblptrl,c
  5440  000EFE  0E06               	movlw	high _dpowers
  5441  000F00  20F4               	addwfc	prodh,w,c
  5442  000F02  6EF7               	movwf	tblptrh,c
  5443  000F04                     	if	0	;There are less than 3 active tblptr bytes
  5444  000F04                     	endif
  5445  000F04  0009               	tblrd		*+
  5446  000F06  CFF5 F01F          	movff	tablat,___lldiv@divisor
  5447  000F0A  0009               	tblrd		*+
  5448  000F0C  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  5449  000F10  0009               	tblrd		*+
  5450  000F12  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  5451  000F16  000A               	tblrd		*-
  5452  000F18  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  5453  000F1C  ECFE  F022         	call	___lldiv	;wreg free
  5454  000F20  C01B  F2D3         	movff	?___lldiv,printf@tmpval
  5455  000F24  C01C  F2D4         	movff	?___lldiv+1,printf@tmpval+1
  5456  000F28  C01D  F2D5         	movff	?___lldiv+2,printf@tmpval+2
  5457  000F2C  C01E  F2D6         	movff	?___lldiv+3,printf@tmpval+3
  5458                           
  5459                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5460  000F30  C2D3  F060         	movff	printf@tmpval,___llmod@dividend
  5461  000F34  C2D4  F061         	movff	printf@tmpval+1,___llmod@dividend+1
  5462  000F38  C2D5  F062         	movff	printf@tmpval+2,___llmod@dividend+2
  5463  000F3C  C2D6  F063         	movff	printf@tmpval+3,___llmod@dividend+3
  5464  000F40  0E0A               	movlw	10
  5465  000F42  0100               	movlb	0	; () banked
  5466  000F44  6F64               	movwf	___llmod@divisor& (0+255),b
  5467  000F46  0E00               	movlw	0
  5468  000F48  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  5469  000F4A  0E00               	movlw	0
  5470  000F4C  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  5471  000F4E  0E00               	movlw	0
  5472  000F50  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  5473  000F52  EC87  F021         	call	___llmod	;wreg free
  5474  000F56  C060  F2D3         	movff	?___llmod,printf@tmpval
  5475  000F5A  C061  F2D4         	movff	?___llmod+1,printf@tmpval+1
  5476  000F5E  C062  F2D5         	movff	?___llmod+2,printf@tmpval+2
  5477  000F62  C063  F2D6         	movff	?___llmod+3,printf@tmpval+3
  5478                           
  5479                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5480  000F66  0102               	movlb	2	; () banked
  5481  000F68  51D3               	movf	printf@tmpval& (0+255),w,b
  5482  000F6A  0F30               	addlw	48
  5483  000F6C  EC5F  F027         	call	_putch
  5484                           
  5485                           ;doprnt.c: 1232: val %= dpowers[c];
  5486  000F70  C2D7  F060         	movff	printf@val,___llmod@dividend
  5487  000F74  C2D8  F061         	movff	printf@val+1,___llmod@dividend+1
  5488  000F78  C2D9  F062         	movff	printf@val+2,___llmod@dividend+2
  5489  000F7C  C2DA  F063         	movff	printf@val+3,___llmod@dividend+3
  5490  000F80  0102               	movlb	2	; () banked
  5491  000F82  51E6               	movf	printf@c& (0+255),w,b
  5492  000F84  0D04               	mullw	4
  5493  000F86  0E01               	movlw	low _dpowers
  5494  000F88  24F3               	addwf	prodl,w,c
  5495  000F8A  6EF6               	movwf	tblptrl,c
  5496  000F8C  0E06               	movlw	high _dpowers
  5497  000F8E  20F4               	addwfc	prodh,w,c
  5498  000F90  6EF7               	movwf	tblptrh,c
  5499  000F92                     	if	0	;There are less than 3 active tblptr bytes
  5500  000F92                     	endif
  5501  000F92  0009               	tblrd		*+
  5502  000F94  CFF5 F064          	movff	tablat,___llmod@divisor
  5503  000F98  0009               	tblrd		*+
  5504  000F9A  CFF5 F065          	movff	tablat,___llmod@divisor+1
  5505  000F9E  0009               	tblrd		*+
  5506  000FA0  CFF5 F066          	movff	tablat,___llmod@divisor+2
  5507  000FA4  000A               	tblrd		*-
  5508  000FA6  CFF5 F067          	movff	tablat,___llmod@divisor+3
  5509  000FAA  EC87  F021         	call	___llmod	;wreg free
  5510  000FAE  C060  F2D7         	movff	?___llmod,printf@val
  5511  000FB2  C061  F2D8         	movff	?___llmod+1,printf@val+1
  5512  000FB6  C062  F2D9         	movff	?___llmod+2,printf@val+2
  5513  000FBA  C063  F2DA         	movff	?___llmod+3,printf@val+3
  5514  000FBE  D000               	goto	l7142
  5515  000FC0                     l7142:
  5516  000FC0  0102               	movlb	2	; () banked
  5517  000FC2  07E6               	decf	printf@c& (0+255),f,b
  5518  000FC4  0102               	movlb	2	; () banked
  5519  000FC6  29E6               	incf	printf@c& (0+255),w,b
  5520  000FC8  B4D8               	btfsc	status,2,c
  5521  000FCA  D00A               	goto	l7148
  5522  000FCC  D78A               	goto	l7134
  5523                           
  5524                           ; BSR set to: 2
  5525                           ;doprnt.c: 1233: }
  5526                           ;doprnt.c: 1235: while(prec) {
  5527  000FCE  D008               	goto	l7148
  5528  000FD0                     l7144:
  5529                           
  5530                           ; BSR set to: 2
  5531                           ;doprnt.c: 1236: (putch('0') );
  5532  000FD0  0E30               	movlw	48
  5533  000FD2  EC5F  F027         	call	_putch
  5534                           
  5535                           ;doprnt.c: 1237: prec--;
  5536  000FD6  0102               	movlb	2	; () banked
  5537  000FD8  07E4               	decf	printf@prec& (0+255),f,b
  5538  000FDA  A0D8               	btfss	status,0,c
  5539  000FDC  07E5               	decf	(printf@prec+1)& (0+255),f,b
  5540  000FDE  D000               	goto	l7148
  5541  000FE0                     l7148:
  5542                           
  5543                           ; BSR set to: 2
  5544  000FE0  0102               	movlb	2	; () banked
  5545  000FE2  51E4               	movf	printf@prec& (0+255),w,b
  5546  000FE4  0102               	movlb	2	; () banked
  5547  000FE6  11E5               	iorwf	(printf@prec+1)& (0+255),w,b
  5548  000FE8  B4D8               	btfsc	status,2,c
  5549  000FEA  D197               	goto	l7236
  5550  000FEC  D7F1               	goto	l7144
  5551                           
  5552                           ; BSR set to: 2
  5553                           ;doprnt.c: 1238: }
  5554                           ;doprnt.c: 1245: continue;
  5555  000FEE  D195               	goto	l7236
  5556  000FF0                     l7150:
  5557                           
  5558                           ; BSR set to: 2
  5559                           ;doprnt.c: 1246: }
  5560                           ;doprnt.c: 1253: {
  5561                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5562  000FF0  C2D1  FFD9         	movff	printf@ap,fsr2l
  5563  000FF4  C2D2  FFDA         	movff	printf@ap+1,fsr2h
  5564  000FF8  CFDE F2D7          	movff	postinc2,printf@val
  5565  000FFC  CFDD F2D8          	movff	postdec2,printf@val+1
  5566  001000  0102               	movlb	2	; () banked
  5567  001002  0E00               	movlw	0
  5568  001004  BFD8               	btfsc	(printf@val+1)& (0+255),7,b
  5569  001006  0EFF               	movlw	-1
  5570  001008  6FD9               	movwf	(printf@val+2)& (0+255),b
  5571  00100A  6FDA               	movwf	(printf@val+3)& (0+255),b
  5572                           
  5573                           ; BSR set to: 2
  5574  00100C  0E02               	movlw	2
  5575  00100E  0102               	movlb	2	; () banked
  5576  001010  27D1               	addwf	printf@ap& (0+255),f,b
  5577  001012  0E00               	movlw	0
  5578  001014  23D2               	addwfc	(printf@ap+1)& (0+255),f,b
  5579                           
  5580                           ; BSR set to: 2
  5581                           ;doprnt.c: 1261: if((long)val < 0) {
  5582  001016  0102               	movlb	2	; () banked
  5583  001018  AFDA               	btfss	(printf@val+3)& (0+255),7,b
  5584  00101A  D00D               	goto	l7160
  5585                           
  5586                           ; BSR set to: 2
  5587                           ;doprnt.c: 1262: flag |= 0x03;
  5588  00101C  0E03               	movlw	3
  5589  00101E  0102               	movlb	2	; () banked
  5590  001020  13DD               	iorwf	printf@flag& (0+255),f,b
  5591                           
  5592                           ; BSR set to: 2
  5593                           ;doprnt.c: 1263: val = -val;
  5594  001022  0102               	movlb	2	; () banked
  5595  001024  1FDA               	comf	(printf@val+3)& (0+255),f,b
  5596  001026  1FD9               	comf	(printf@val+2)& (0+255),f,b
  5597  001028  1FD8               	comf	(printf@val+1)& (0+255),f,b
  5598  00102A  6DD7               	negf	printf@val& (0+255),b
  5599  00102C  0E00               	movlw	0
  5600  00102E  23D8               	addwfc	(printf@val+1)& (0+255),f,b
  5601  001030  23D9               	addwfc	(printf@val+2)& (0+255),f,b
  5602  001032  23DA               	addwfc	(printf@val+3)& (0+255),f,b
  5603  001034  D000               	goto	l7160
  5604  001036                     l7160:
  5605                           
  5606                           ; BSR set to: 2
  5607                           ;doprnt.c: 1264: }
  5608                           ;doprnt.c: 1266: }
  5609                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5610  001036  0102               	movlb	2	; () banked
  5611  001038  51E4               	movf	printf@prec& (0+255),w,b
  5612  00103A  0102               	movlb	2	; () banked
  5613  00103C  11E5               	iorwf	(printf@prec+1)& (0+255),w,b
  5614  00103E  A4D8               	btfss	status,2,c
  5615  001040  D00E               	goto	l7166
  5616                           
  5617                           ; BSR set to: 2
  5618  001042  0102               	movlb	2	; () banked
  5619  001044  51D7               	movf	printf@val& (0+255),w,b
  5620  001046  0102               	movlb	2	; () banked
  5621  001048  11D8               	iorwf	(printf@val+1)& (0+255),w,b
  5622  00104A  0102               	movlb	2	; () banked
  5623  00104C  11D9               	iorwf	(printf@val+2)& (0+255),w,b
  5624  00104E  0102               	movlb	2	; () banked
  5625  001050  11DA               	iorwf	(printf@val+3)& (0+255),w,b
  5626  001052  A4D8               	btfss	status,2,c
  5627  001054  D004               	goto	l7166
  5628                           
  5629                           ; BSR set to: 2
  5630                           ;doprnt.c: 1291: prec++;
  5631  001056  0102               	movlb	2	; () banked
  5632  001058  4BE4               	infsnz	printf@prec& (0+255),f,b
  5633  00105A  2BE5               	incf	(printf@prec+1)& (0+255),f,b
  5634  00105C  D000               	goto	l7166
  5635  00105E                     l7166:
  5636                           
  5637                           ; BSR set to: 2
  5638                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5639  00105E  0E01               	movlw	1
  5640  001060  0102               	movlb	2	; () banked
  5641  001062  6FE6               	movwf	printf@c& (0+255),b
  5642  001064                     l7168:
  5643                           
  5644                           ; BSR set to: 2
  5645  001064  0E0A               	movlw	10
  5646  001066  0102               	movlb	2	; () banked
  5647  001068  19E6               	xorwf	printf@c& (0+255),w,b
  5648  00106A  B4D8               	btfsc	status,2,c
  5649  00106C  D022               	goto	l7180
  5650  00106E  D001               	goto	l7172
  5651                           
  5652                           ; BSR set to: 2
  5653  001070  D020               	goto	l7180
  5654  001072                     l7172:
  5655                           
  5656                           ; BSR set to: 2
  5657                           ;doprnt.c: 1306: if(val < dpowers[c])
  5658  001072  0102               	movlb	2	; () banked
  5659  001074  51E6               	movf	printf@c& (0+255),w,b
  5660  001076  0D04               	mullw	4
  5661  001078  0E01               	movlw	low _dpowers
  5662  00107A  24F3               	addwf	prodl,w,c
  5663  00107C  6EF6               	movwf	tblptrl,c
  5664  00107E  0E06               	movlw	high _dpowers
  5665  001080  20F4               	addwfc	prodh,w,c
  5666  001082  6EF7               	movwf	tblptrh,c
  5667  001084                     	if	0	;There are less than 3 active tblptr bytes
  5668  001084                     	endif
  5669  001084  0009               	tblrd		*+
  5670  001086  50F5               	movf	tablat,w,c
  5671  001088  0102               	movlb	2	; () banked
  5672  00108A  5DD7               	subwf	printf@val& (0+255),w,b
  5673  00108C  0009               	tblrd		*+
  5674  00108E  50F5               	movf	tablat,w,c
  5675  001090  0102               	movlb	2	; () banked
  5676  001092  59D8               	subwfb	(printf@val+1)& (0+255),w,b
  5677  001094  0009               	tblrd		*+
  5678  001096  50F5               	movf	tablat,w,c
  5679  001098  0102               	movlb	2	; () banked
  5680  00109A  59D9               	subwfb	(printf@val+2)& (0+255),w,b
  5681  00109C  0009               	tblrd		*+
  5682  00109E  50F5               	movf	tablat,w,c
  5683  0010A0  0102               	movlb	2	; () banked
  5684  0010A2  59DA               	subwfb	(printf@val+3)& (0+255),w,b
  5685  0010A4  A0D8               	btfss	status,0,c
  5686  0010A6  D005               	goto	l7180
  5687  0010A8  D001               	goto	l7176
  5688                           
  5689                           ; BSR set to: 2
  5690                           ;doprnt.c: 1307: break;
  5691  0010AA  D003               	goto	l7180
  5692  0010AC                     l7176:
  5693                           
  5694                           ; BSR set to: 2
  5695  0010AC  0102               	movlb	2	; () banked
  5696  0010AE  2BE6               	incf	printf@c& (0+255),f,b
  5697  0010B0  D7D9               	goto	l7168
  5698  0010B2                     l7180:
  5699                           
  5700                           ; BSR set to: 2
  5701                           ;doprnt.c: 1339: if(c < prec)
  5702  0010B2  0E80               	movlw	128
  5703  0010B4  0102               	movlb	2	; () banked
  5704  0010B6  BFE6               	btfsc	printf@c& (0+255),7,b
  5705  0010B8  0E7F               	movlw	127
  5706  0010BA  0100               	movlb	0	; () banked
  5707  0010BC  6FA3               	movwf	??_printf& (0+255),b
  5708  0010BE  0102               	movlb	2	; () banked
  5709  0010C0  51E4               	movf	printf@prec& (0+255),w,b
  5710  0010C2  0102               	movlb	2	; () banked
  5711  0010C4  5DE6               	subwf	printf@c& (0+255),w,b
  5712  0010C6  0102               	movlb	2	; () banked
  5713  0010C8  51E5               	movf	(printf@prec+1)& (0+255),w,b
  5714  0010CA  0A80               	xorlw	128
  5715  0010CC  0100               	movlb	0	; () banked
  5716  0010CE  59A3               	subwfb	??_printf& (0+255),w,b
  5717  0010D0  B0D8               	btfsc	status,0,c
  5718  0010D2  D003               	goto	l7184
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;doprnt.c: 1340: c = prec;
  5722  0010D4  C2E4  F2E6         	movff	printf@prec,printf@c
  5723  0010D8  D019               	goto	l7188
  5724  0010DA                     l7184:
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;doprnt.c: 1341: else if(prec < c)
  5728  0010DA  0102               	movlb	2	; () banked
  5729  0010DC  51E5               	movf	(printf@prec+1)& (0+255),w,b
  5730  0010DE  0A80               	xorlw	128
  5731  0010E0  0100               	movlb	0	; () banked
  5732  0010E2  6FA3               	movwf	??_printf& (0+255),b
  5733  0010E4  0102               	movlb	2	; () banked
  5734  0010E6  51E6               	movf	printf@c& (0+255),w,b
  5735  0010E8  0102               	movlb	2	; () banked
  5736  0010EA  5DE4               	subwf	printf@prec& (0+255),w,b
  5737  0010EC  0E80               	movlw	128
  5738  0010EE  0102               	movlb	2	; () banked
  5739  0010F0  BFE6               	btfsc	printf@c& (0+255),7,b
  5740  0010F2  0E7F               	movlw	127
  5741  0010F4  0100               	movlb	0	; () banked
  5742  0010F6  59A3               	subwfb	??_printf& (0+255),w,b
  5743  0010F8  B0D8               	btfsc	status,0,c
  5744  0010FA  D008               	goto	l7188
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;doprnt.c: 1342: prec = c;
  5748  0010FC  0102               	movlb	2	; () banked
  5749  0010FE  51E6               	movf	printf@c& (0+255),w,b
  5750  001100  0102               	movlb	2	; () banked
  5751  001102  6FE4               	movwf	printf@prec& (0+255),b
  5752  001104  6BE5               	clrf	(printf@prec+1)& (0+255),b
  5753  001106  BFE4               	btfsc	printf@prec& (0+255),7,b
  5754  001108  07E5               	decf	(printf@prec+1)& (0+255),f,b
  5755                           
  5756                           ; BSR set to: 2
  5757  00110A  D000               	goto	l7188
  5758  00110C                     l7188:
  5759                           
  5760                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5761  00110C  0102               	movlb	2	; () banked
  5762  00110E  51DF               	movf	printf@width& (0+255),w,b
  5763  001110  0102               	movlb	2	; () banked
  5764  001112  11E0               	iorwf	(printf@width+1)& (0+255),w,b
  5765  001114  B4D8               	btfsc	status,2,c
  5766  001116  D015               	goto	l7194
  5767                           
  5768                           ; BSR set to: 2
  5769  001118  0E03               	movlw	3
  5770  00111A  0102               	movlb	2	; () banked
  5771  00111C  15DD               	andwf	printf@flag& (0+255),w,b
  5772  00111E  0100               	movlb	0	; () banked
  5773  001120  6FA3               	movwf	??_printf& (0+255),b
  5774  001122  0E00               	movlw	0
  5775  001124  0102               	movlb	2	; () banked
  5776  001126  15DE               	andwf	(printf@flag+1)& (0+255),w,b
  5777  001128  0100               	movlb	0	; () banked
  5778  00112A  6FA4               	movwf	(??_printf+1)& (0+255),b
  5779  00112C  0100               	movlb	0	; () banked
  5780  00112E  51A3               	movf	??_printf& (0+255),w,b
  5781  001130  0100               	movlb	0	; () banked
  5782  001132  11A4               	iorwf	(??_printf+1)& (0+255),w,b
  5783  001134  B4D8               	btfsc	status,2,c
  5784  001136  D005               	goto	l7194
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;doprnt.c: 1346: width--;
  5788  001138  0102               	movlb	2	; () banked
  5789  00113A  07DF               	decf	printf@width& (0+255),f,b
  5790  00113C  A0D8               	btfss	status,0,c
  5791  00113E  07E0               	decf	(printf@width+1)& (0+255),f,b
  5792  001140  D000               	goto	l7194
  5793  001142                     l7194:
  5794                           
  5795                           ;doprnt.c: 1348: if(flag & 0x4000) {
  5796  001142  0102               	movlb	2	; () banked
  5797  001144  ADDE               	btfss	(printf@flag+1)& (0+255),6,b
  5798  001146  D01F               	goto	l7202
  5799                           
  5800                           ; BSR set to: 2
  5801                           ;doprnt.c: 1349: if(width > prec)
  5802  001148  0102               	movlb	2	; () banked
  5803  00114A  51DF               	movf	printf@width& (0+255),w,b
  5804  00114C  0102               	movlb	2	; () banked
  5805  00114E  5DE4               	subwf	printf@prec& (0+255),w,b
  5806  001150  0102               	movlb	2	; () banked
  5807  001152  51E5               	movf	(printf@prec+1)& (0+255),w,b
  5808  001154  0A80               	xorlw	128
  5809  001156  0100               	movlb	0	; () banked
  5810  001158  6FA3               	movwf	??_printf& (0+255),b
  5811  00115A  0102               	movlb	2	; () banked
  5812  00115C  51E0               	movf	(printf@width+1)& (0+255),w,b
  5813  00115E  0A80               	xorlw	128
  5814  001160  0100               	movlb	0	; () banked
  5815  001162  59A3               	subwfb	??_printf& (0+255),w,b
  5816  001164  B0D8               	btfsc	status,0,c
  5817  001166  D009               	goto	l7200
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;doprnt.c: 1350: width -= prec;
  5821  001168  0102               	movlb	2	; () banked
  5822  00116A  51E4               	movf	printf@prec& (0+255),w,b
  5823  00116C  0102               	movlb	2	; () banked
  5824  00116E  5FDF               	subwf	printf@width& (0+255),f,b
  5825  001170  0102               	movlb	2	; () banked
  5826  001172  51E5               	movf	(printf@prec+1)& (0+255),w,b
  5827  001174  0102               	movlb	2	; () banked
  5828  001176  5BE0               	subwfb	(printf@width+1)& (0+255),f,b
  5829  001178  D006               	goto	l7202
  5830  00117A                     l7200:
  5831                           
  5832                           ;doprnt.c: 1351: else
  5833                           ;doprnt.c: 1352: width = 0;
  5834  00117A  0E00               	movlw	0
  5835  00117C  0102               	movlb	2	; () banked
  5836  00117E  6FE0               	movwf	(printf@width+1)& (0+255),b
  5837  001180  0E00               	movlw	0
  5838  001182  6FDF               	movwf	printf@width& (0+255),b
  5839                           
  5840                           ; BSR set to: 2
  5841  001184  D000               	goto	l7202
  5842  001186                     l7202:
  5843                           
  5844                           ; BSR set to: 2
  5845                           ;doprnt.c: 1353: }
  5846                           ;doprnt.c: 1381: if(width > c)
  5847  001186  0E80               	movlw	128
  5848  001188  0102               	movlb	2	; () banked
  5849  00118A  BFE6               	btfsc	printf@c& (0+255),7,b
  5850  00118C  0E7F               	movlw	127
  5851  00118E  0100               	movlb	0	; () banked
  5852  001190  6FA3               	movwf	??_printf& (0+255),b
  5853  001192  0102               	movlb	2	; () banked
  5854  001194  51DF               	movf	printf@width& (0+255),w,b
  5855  001196  0102               	movlb	2	; () banked
  5856  001198  5DE6               	subwf	printf@c& (0+255),w,b
  5857  00119A  0102               	movlb	2	; () banked
  5858  00119C  51E0               	movf	(printf@width+1)& (0+255),w,b
  5859  00119E  0A80               	xorlw	128
  5860  0011A0  0100               	movlb	0	; () banked
  5861  0011A2  59A3               	subwfb	??_printf& (0+255),w,b
  5862  0011A4  B0D8               	btfsc	status,0,c
  5863  0011A6  D00B               	goto	l7206
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;doprnt.c: 1382: width -= c;
  5867  0011A8  0102               	movlb	2	; () banked
  5868  0011AA  51E6               	movf	printf@c& (0+255),w,b
  5869  0011AC  0102               	movlb	2	; () banked
  5870  0011AE  5FDF               	subwf	printf@width& (0+255),f,b
  5871  0011B0  0E00               	movlw	0
  5872  0011B2  0102               	movlb	2	; () banked
  5873  0011B4  BFE6               	btfsc	printf@c& (0+255),7,b
  5874  0011B6  0EFF               	movlw	255
  5875  0011B8  0102               	movlb	2	; () banked
  5876  0011BA  5BE0               	subwfb	(printf@width+1)& (0+255),f,b
  5877  0011BC  D006               	goto	l7208
  5878  0011BE                     l7206:
  5879                           
  5880                           ;doprnt.c: 1383: else
  5881                           ;doprnt.c: 1384: width = 0;
  5882  0011BE  0E00               	movlw	0
  5883  0011C0  0102               	movlb	2	; () banked
  5884  0011C2  6FE0               	movwf	(printf@width+1)& (0+255),b
  5885  0011C4  0E00               	movlw	0
  5886  0011C6  6FDF               	movwf	printf@width& (0+255),b
  5887  0011C8  D000               	goto	l7208
  5888  0011CA                     l7208:
  5889                           
  5890                           ; BSR set to: 2
  5891                           ;doprnt.c: 1387: if(flag & 0x04) {
  5892  0011CA  0102               	movlb	2	; () banked
  5893  0011CC  A5DD               	btfss	printf@flag& (0+255),2,b
  5894  0011CE  D029               	goto	l7220
  5895                           
  5896                           ; BSR set to: 2
  5897                           ;doprnt.c: 1392: if(flag & 0x03)
  5898  0011D0  0E03               	movlw	3
  5899  0011D2  0102               	movlb	2	; () banked
  5900  0011D4  15DD               	andwf	printf@flag& (0+255),w,b
  5901  0011D6  0100               	movlb	0	; () banked
  5902  0011D8  6FA3               	movwf	??_printf& (0+255),b
  5903  0011DA  0E00               	movlw	0
  5904  0011DC  0102               	movlb	2	; () banked
  5905  0011DE  15DE               	andwf	(printf@flag+1)& (0+255),w,b
  5906  0011E0  0100               	movlb	0	; () banked
  5907  0011E2  6FA4               	movwf	(??_printf+1)& (0+255),b
  5908  0011E4  0100               	movlb	0	; () banked
  5909  0011E6  51A3               	movf	??_printf& (0+255),w,b
  5910  0011E8  0100               	movlb	0	; () banked
  5911  0011EA  11A4               	iorwf	(??_printf+1)& (0+255),w,b
  5912  0011EC  B4D8               	btfsc	status,2,c
  5913  0011EE  D004               	goto	l7214
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;doprnt.c: 1393: (putch('-') );
  5917  0011F0  0E2D               	movlw	45
  5918  0011F2  EC5F  F027         	call	_putch
  5919  0011F6  D000               	goto	l7214
  5920  0011F8                     l7214:
  5921                           
  5922                           ;doprnt.c: 1415: if(width)
  5923  0011F8  0102               	movlb	2	; () banked
  5924  0011FA  51DF               	movf	printf@width& (0+255),w,b
  5925  0011FC  0102               	movlb	2	; () banked
  5926  0011FE  11E0               	iorwf	(printf@width+1)& (0+255),w,b
  5927  001200  B4D8               	btfsc	status,2,c
  5928  001202  D07E               	goto	l7234
  5929  001204                     l7216:
  5930                           
  5931                           ; BSR set to: 2
  5932                           ;doprnt.c: 1417: (putch('0') );
  5933  001204  0E30               	movlw	48
  5934  001206  EC5F  F027         	call	_putch
  5935                           
  5936                           ;doprnt.c: 1418: while(--width);
  5937  00120A  0102               	movlb	2	; () banked
  5938  00120C  07DF               	decf	printf@width& (0+255),f,b
  5939  00120E  A0D8               	btfss	status,0,c
  5940  001210  07E0               	decf	(printf@width+1)& (0+255),f,b
  5941  001212  0102               	movlb	2	; () banked
  5942  001214  51DF               	movf	printf@width& (0+255),w,b
  5943  001216  0102               	movlb	2	; () banked
  5944  001218  11E0               	iorwf	(printf@width+1)& (0+255),w,b
  5945  00121A  B4D8               	btfsc	status,2,c
  5946  00121C  D071               	goto	l7234
  5947  00121E  D7F2               	goto	l7216
  5948                           
  5949                           ; BSR set to: 2
  5950                           ;doprnt.c: 1420: } else
  5951                           
  5952                           ; BSR set to: 2
  5953  001220  D06F               	goto	l7234
  5954  001222                     l7220:
  5955                           
  5956                           ; BSR set to: 2
  5957                           ;doprnt.c: 1422: {
  5958                           ;doprnt.c: 1424: if(width
  5959                           ;doprnt.c: 1428: )
  5960  001222  0102               	movlb	2	; () banked
  5961  001224  51DF               	movf	printf@width& (0+255),w,b
  5962  001226  0102               	movlb	2	; () banked
  5963  001228  11E0               	iorwf	(printf@width+1)& (0+255),w,b
  5964  00122A  B4D8               	btfsc	status,2,c
  5965  00122C  D00F               	goto	l7226
  5966  00122E                     l7222:
  5967                           
  5968                           ; BSR set to: 2
  5969                           ;doprnt.c: 1430: (putch(' ') );
  5970  00122E  0E20               	movlw	32
  5971  001230  EC5F  F027         	call	_putch
  5972                           
  5973                           ;doprnt.c: 1431: while(--width);
  5974  001234  0102               	movlb	2	; () banked
  5975  001236  07DF               	decf	printf@width& (0+255),f,b
  5976  001238  A0D8               	btfss	status,0,c
  5977  00123A  07E0               	decf	(printf@width+1)& (0+255),f,b
  5978  00123C  0102               	movlb	2	; () banked
  5979  00123E  51DF               	movf	printf@width& (0+255),w,b
  5980  001240  0102               	movlb	2	; () banked
  5981  001242  11E0               	iorwf	(printf@width+1)& (0+255),w,b
  5982  001244  B4D8               	btfsc	status,2,c
  5983  001246  D002               	goto	l7226
  5984  001248  D7F2               	goto	l7222
  5985                           
  5986                           ; BSR set to: 2
  5987  00124A  D000               	goto	l7226
  5988  00124C                     l7226:
  5989                           
  5990                           ; BSR set to: 2
  5991                           ;doprnt.c: 1438: if(flag & 0x03)
  5992  00124C  0E03               	movlw	3
  5993  00124E  0102               	movlb	2	; () banked
  5994  001250  15DD               	andwf	printf@flag& (0+255),w,b
  5995  001252  0100               	movlb	0	; () banked
  5996  001254  6FA3               	movwf	??_printf& (0+255),b
  5997  001256  0E00               	movlw	0
  5998  001258  0102               	movlb	2	; () banked
  5999  00125A  15DE               	andwf	(printf@flag+1)& (0+255),w,b
  6000  00125C  0100               	movlb	0	; () banked
  6001  00125E  6FA4               	movwf	(??_printf+1)& (0+255),b
  6002  001260  0100               	movlb	0	; () banked
  6003  001262  51A3               	movf	??_printf& (0+255),w,b
  6004  001264  0100               	movlb	0	; () banked
  6005  001266  11A4               	iorwf	(??_printf+1)& (0+255),w,b
  6006  001268  B4D8               	btfsc	status,2,c
  6007  00126A  D04A               	goto	l7234
  6008                           
  6009                           ; BSR set to: 0
  6010                           ;doprnt.c: 1439: (putch('-') );
  6011  00126C  0E2D               	movlw	45
  6012  00126E  EC5F  F027         	call	_putch
  6013                           
  6014                           ;doprnt.c: 1469: }
  6015                           ;doprnt.c: 1474: while(prec--) {
  6016  001272  D046               	goto	l7234
  6017  001274                     l7230:
  6018                           
  6019                           ;doprnt.c: 1478: {
  6020                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6021  001274  C2E4  F0A3         	movff	printf@prec,??_printf
  6022  001278  C2E5  F0A4         	movff	printf@prec+1,??_printf+1
  6023  00127C  0100               	movlb	0	; () banked
  6024  00127E  90D8               	bcf	status,0,c
  6025  001280  37A3               	rlcf	??_printf& (0+255),f,b
  6026  001282  37A4               	rlcf	(??_printf+1)& (0+255),f,b
  6027  001284  0100               	movlb	0	; () banked
  6028  001286  90D8               	bcf	status,0,c
  6029  001288  37A3               	rlcf	??_printf& (0+255),f,b
  6030  00128A  37A4               	rlcf	(??_printf+1)& (0+255),f,b
  6031  00128C  0E01               	movlw	low _dpowers
  6032  00128E  0100               	movlb	0	; () banked
  6033  001290  25A3               	addwf	??_printf& (0+255),w,b
  6034  001292  6EF6               	movwf	tblptrl,c
  6035  001294  0E06               	movlw	high _dpowers
  6036  001296  21A4               	addwfc	(??_printf+1)& (0+255),w,b
  6037  001298  6EF7               	movwf	tblptrh,c
  6038  00129A                     	if	0	;There are less than 3 active tblptr bytes
  6039  00129A                     	endif
  6040  00129A  0009               	tblrd		*+
  6041  00129C  CFF5 F01F          	movff	tablat,___lldiv@divisor
  6042  0012A0  0009               	tblrd		*+
  6043  0012A2  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  6044  0012A6  0009               	tblrd		*+
  6045  0012A8  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  6046  0012AC  000A               	tblrd		*-
  6047  0012AE  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  6048  0012B2  C2D7  F01B         	movff	printf@val,___lldiv@dividend
  6049  0012B6  C2D8  F01C         	movff	printf@val+1,___lldiv@dividend+1
  6050  0012BA  C2D9  F01D         	movff	printf@val+2,___lldiv@dividend+2
  6051  0012BE  C2DA  F01E         	movff	printf@val+3,___lldiv@dividend+3
  6052  0012C2  ECFE  F022         	call	___lldiv	;wreg free
  6053  0012C6  C01B  F060         	movff	?___lldiv,___llmod@dividend
  6054  0012CA  C01C  F061         	movff	?___lldiv+1,___llmod@dividend+1
  6055  0012CE  C01D  F062         	movff	?___lldiv+2,___llmod@dividend+2
  6056  0012D2  C01E  F063         	movff	?___lldiv+3,___llmod@dividend+3
  6057  0012D6  0E0A               	movlw	10
  6058  0012D8  0100               	movlb	0	; () banked
  6059  0012DA  6F64               	movwf	___llmod@divisor& (0+255),b
  6060  0012DC  0E00               	movlw	0
  6061  0012DE  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  6062  0012E0  0E00               	movlw	0
  6063  0012E2  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  6064  0012E4  0E00               	movlw	0
  6065  0012E6  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  6066  0012E8  EC87  F021         	call	___llmod	;wreg free
  6067  0012EC  0100               	movlb	0	; () banked
  6068  0012EE  5160               	movf	?___llmod& (0+255),w,b
  6069  0012F0  0F30               	addlw	48
  6070  0012F2  0102               	movlb	2	; () banked
  6071  0012F4  6FE6               	movwf	printf@c& (0+255),b
  6072                           
  6073                           ; BSR set to: 2
  6074                           ;doprnt.c: 1523: }
  6075                           ;doprnt.c: 1524: (putch(c) );
  6076  0012F6  0102               	movlb	2	; () banked
  6077  0012F8  51E6               	movf	printf@c& (0+255),w,b
  6078  0012FA  EC5F  F027         	call	_putch
  6079  0012FE  D000               	goto	l7234
  6080  001300                     l7234:
  6081  001300  0102               	movlb	2	; () banked
  6082  001302  07E4               	decf	printf@prec& (0+255),f,b
  6083  001304  A0D8               	btfss	status,0,c
  6084  001306  07E5               	decf	(printf@prec+1)& (0+255),f,b
  6085  001308  0102               	movlb	2	; () banked
  6086  00130A  29E4               	incf	printf@prec& (0+255),w,b
  6087  00130C  E1B3               	bnz	l7230
  6088  00130E  0102               	movlb	2	; () banked
  6089  001310  29E5               	incf	(printf@prec+1)& (0+255),w,b
  6090  001312  B4D8               	btfsc	status,2,c
  6091  001314  D002               	goto	l7236
  6092  001316  D7AE               	goto	l7230
  6093                           
  6094                           ; BSR set to: 2
  6095  001318  D000               	goto	l7236
  6096  00131A                     l7236:
  6097  00131A  C09C  FFF6         	movff	printf@f,tblptrl
  6098  00131E  C09D  FFF7         	movff	printf@f+1,tblptrh
  6099  001322  0100               	movlb	0	; () banked
  6100  001324  4B9C               	infsnz	printf@f& (0+255),f,b
  6101  001326  2B9D               	incf	(printf@f+1)& (0+255),f,b
  6102  001328                     	if	0	;tblptru may be non-zero
  6103  001328                     	endif
  6104  001328                     	if	0	;tblptru may be non-zero
  6105  001328                     	endif
  6106  001328  0008               	tblrd		*
  6107  00132A  CFF5 F2E6          	movff	tablat,printf@c
  6108  00132E  0102               	movlb	2	; () banked
  6109  001330  51E6               	movf	printf@c& (0+255),w,b
  6110  001332  B4D8               	btfsc	status,2,c
  6111  001334  0012               	return	
  6112  001336  EF61  F003         	goto	l6942
  6113                           
  6114                           ; BSR set to: 2
  6115  00133A  0012               	return	
  6116                           
  6117                           ; BSR set to: 2
  6118                           
  6119                           ; BSR set to: 2
  6120                           ;doprnt.c: 1540: return 0;
  6121                           ;	Return value of _printf is never used
  6122                           
  6123                           ;doprnt.c: 1525: }
  6124                           ;doprnt.c: 1533: }
  6125                           ;doprnt.c: 1535: alldone:
  6126  00133C  0012               	return		;funcret
  6127  00133E                     __end_of_printf:
  6128                           	opt stack 0
  6129                           tosu	equ	0xFFF
  6130                           tosh	equ	0xFFE
  6131                           tosl	equ	0xFFD
  6132                           pclath	equ	0xFFA
  6133                           tblptru	equ	0xFF8
  6134                           tblptrh	equ	0xFF7
  6135                           tblptrl	equ	0xFF6
  6136                           tablat	equ	0xFF5
  6137                           prodh	equ	0xFF4
  6138                           prodl	equ	0xFF3
  6139                           intcon	equ	0xFF2
  6140                           postinc0	equ	0xFEE
  6141                           wreg	equ	0xFE8
  6142                           indf2	equ	0xFDF
  6143                           postinc2	equ	0xFDE
  6144                           postdec2	equ	0xFDD
  6145                           fsr2h	equ	0xFDA
  6146                           fsr2l	equ	0xFD9
  6147                           status	equ	0xFD8
  6148                           
  6149 ;; *************** function _scale *****************
  6150 ;; Defined at:
  6151 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;  scl             1    wreg     char 
  6154 ;; Auto vars:     Size  Location     Type
  6155 ;;  scl             1   38[BANK0 ] char 
  6156 ;; Return value:  Size  Location     Type
  6157 ;;                  3   32[BANK0 ] char 
  6158 ;; Registers used:
  6159 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6165 ;;      Params:         0       3       0       0       0       0       0
  6166 ;;      Locals:         0       4       0       0       0       0       0
  6167 ;;      Temps:          0       0       0       0       0       0       0
  6168 ;;      Totals:         0       7       0       0       0       0       0
  6169 ;;Total ram usage:        7 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    6
  6172 ;; This function calls:
  6173 ;;		___awdiv
  6174 ;;		___awmod
  6175 ;;		___ftmul
  6176 ;;		___wmul
  6177 ;; This function is called by:
  6178 ;;		_printf
  6179 ;; This function uses a non-reentrant model
  6180 ;;
  6181                           
  6182                           	psect	text13
  6183  001FD0                     __ptext13:
  6184                           	opt stack 0
  6185  001FD0                     _scale:
  6186                           	opt stack 23
  6187                           
  6188                           ; BSR set to: 2
  6189                           ;incstack = 0
  6190                           ;scale@scl stored from wreg
  6191  001FD0  0100               	movlb	0	; () banked
  6192  001FD2  6F86               	movwf	scale@scl& (0+255),b
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;doprnt.c: 428: if(scl < 0) {
  6196  001FD4  0100               	movlb	0	; () banked
  6197  001FD6  AF86               	btfss	scale@scl& (0+255),7,b
  6198  001FD8  D11C               	goto	l6520
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;doprnt.c: 429: scl = -scl;
  6202  001FDA  0100               	movlb	0	; () banked
  6203  001FDC  6D86               	negf	scale@scl& (0+255),b
  6204                           
  6205                           ;doprnt.c: 430: if(scl>=110)
  6206  001FDE  0100               	movlb	0	; () banked
  6207  001FE0  5186               	movf	scale@scl& (0+255),w,b
  6208  001FE2  0A80               	xorlw	128
  6209  001FE4  0F12               	addlw	-238
  6210  001FE6  A0D8               	btfss	status,0,c
  6211  001FE8  D0A2               	goto	l6510
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6215  001FEA  0E00               	movlw	0
  6216  001FEC  0100               	movlb	0	; () banked
  6217  001FEE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6218  001FF0  0E03               	movlw	3
  6219  001FF2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6220  001FF4  0E00               	movlw	0
  6221  001FF6  6E24               	movwf	___awdiv@divisor+1,c
  6222  001FF8  0E0A               	movlw	10
  6223  001FFA  6E23               	movwf	___awdiv@divisor,c
  6224  001FFC  0E00               	movlw	0
  6225  001FFE  6E1E               	movwf	___awmod@divisor+1,c
  6226  002000  0E64               	movlw	100
  6227  002002  6E1D               	movwf	___awmod@divisor,c
  6228  002004  0100               	movlb	0	; () banked
  6229  002006  5186               	movf	scale@scl& (0+255),w,b
  6230  002008  6E1B               	movwf	___awmod@dividend,c
  6231  00200A  6A1C               	clrf	___awmod@dividend+1,c
  6232  00200C  BE1B               	btfsc	___awmod@dividend,7,c
  6233  00200E  061C               	decf	___awmod@dividend+1,f,c
  6234  002010  ECCC  F023         	call	___awmod	;wreg free
  6235  002014  C01B  F021         	movff	?___awmod,___awdiv@dividend
  6236  002018  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  6237  00201C  ECD6  F021         	call	___awdiv	;wreg free
  6238  002020  0E09               	movlw	9
  6239  002022  2421               	addwf	?___awdiv,w,c
  6240  002024  0100               	movlb	0	; () banked
  6241  002026  6F60               	movwf	___wmul@multiplier& (0+255),b
  6242  002028  0E00               	movlw	0
  6243  00202A  2022               	addwfc	?___awdiv+1,w,c
  6244  00202C  0100               	movlb	0	; () banked
  6245  00202E  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  6246  002030  ECEE  F025         	call	___wmul	;wreg free
  6247  002034  0E29               	movlw	low __npowers_
  6248  002036  0100               	movlb	0	; () banked
  6249  002038  2560               	addwf	?___wmul& (0+255),w,b
  6250  00203A  6EF6               	movwf	tblptrl,c
  6251  00203C  0E06               	movlw	high __npowers_
  6252  00203E  0100               	movlb	0	; () banked
  6253  002040  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6254  002042  6EF7               	movwf	tblptrh,c
  6255  002044                     	if	0	;There are less than 3 active tblptr bytes
  6256  002044                     	endif
  6257  002044  0009               	tblrd		*+
  6258  002046  CFF5 F074          	movff	tablat,___ftmul@f2
  6259  00204A  0009               	tblrd		*+
  6260  00204C  CFF5 F075          	movff	tablat,___ftmul@f2+1
  6261  002050  000A               	tblrd		*-
  6262  002052  CFF5 F076          	movff	tablat,___ftmul@f2+2
  6263  002056  0E00               	movlw	0
  6264  002058  6E24               	movwf	___awdiv@divisor+1,c
  6265  00205A  0E64               	movlw	100
  6266  00205C  6E23               	movwf	___awdiv@divisor,c
  6267  00205E  0100               	movlb	0	; () banked
  6268  002060  5186               	movf	scale@scl& (0+255),w,b
  6269  002062  6E21               	movwf	___awdiv@dividend,c
  6270  002064  6A22               	clrf	___awdiv@dividend+1,c
  6271  002066  BE21               	btfsc	___awdiv@dividend,7,c
  6272  002068  0622               	decf	___awdiv@dividend+1,f,c
  6273  00206A  ECD6  F021         	call	___awdiv	;wreg free
  6274  00206E  0E12               	movlw	18
  6275  002070  2421               	addwf	?___awdiv,w,c
  6276  002072  0100               	movlb	0	; () banked
  6277  002074  6F60               	movwf	___wmul@multiplier& (0+255),b
  6278  002076  0E00               	movlw	0
  6279  002078  2022               	addwfc	?___awdiv+1,w,c
  6280  00207A  0100               	movlb	0	; () banked
  6281  00207C  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  6282  00207E  0E00               	movlw	0
  6283  002080  0100               	movlb	0	; () banked
  6284  002082  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6285  002084  0E03               	movlw	3
  6286  002086  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6287  002088  ECEE  F025         	call	___wmul	;wreg free
  6288  00208C  0E29               	movlw	low __npowers_
  6289  00208E  0100               	movlb	0	; () banked
  6290  002090  2560               	addwf	?___wmul& (0+255),w,b
  6291  002092  6EF6               	movwf	tblptrl,c
  6292  002094  0E06               	movlw	high __npowers_
  6293  002096  0100               	movlb	0	; () banked
  6294  002098  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6295  00209A  6EF7               	movwf	tblptrh,c
  6296  00209C                     	if	0	;There are less than 3 active tblptr bytes
  6297  00209C                     	endif
  6298  00209C  0009               	tblrd		*+
  6299  00209E  CFF5 F071          	movff	tablat,___ftmul@f1
  6300  0020A2  0009               	tblrd		*+
  6301  0020A4  CFF5 F072          	movff	tablat,___ftmul@f1+1
  6302  0020A8  000A               	tblrd		*-
  6303  0020AA  CFF5 F073          	movff	tablat,___ftmul@f1+2
  6304  0020AE  EC0E  F018         	call	___ftmul	;wreg free
  6305  0020B2  C071  F083         	movff	?___ftmul,_scale$2055
  6306  0020B6  C072  F084         	movff	?___ftmul+1,_scale$2055+1
  6307  0020BA  C073  F085         	movff	?___ftmul+2,_scale$2055+2
  6308                           
  6309                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6310  0020BE  C083  F071         	movff	_scale$2055,___ftmul@f1
  6311  0020C2  C084  F072         	movff	_scale$2055+1,___ftmul@f1+1
  6312  0020C6  C085  F073         	movff	_scale$2055+2,___ftmul@f1+2
  6313  0020CA  0E00               	movlw	0
  6314  0020CC  0100               	movlb	0	; () banked
  6315  0020CE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6316  0020D0  0E03               	movlw	3
  6317  0020D2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6318  0020D4  0E00               	movlw	0
  6319  0020D6  6E1E               	movwf	___awmod@divisor+1,c
  6320  0020D8  0E0A               	movlw	10
  6321  0020DA  6E1D               	movwf	___awmod@divisor,c
  6322  0020DC  0100               	movlb	0	; () banked
  6323  0020DE  5186               	movf	scale@scl& (0+255),w,b
  6324  0020E0  6E1B               	movwf	___awmod@dividend,c
  6325  0020E2  6A1C               	clrf	___awmod@dividend+1,c
  6326  0020E4  BE1B               	btfsc	___awmod@dividend,7,c
  6327  0020E6  061C               	decf	___awmod@dividend+1,f,c
  6328  0020E8  ECCC  F023         	call	___awmod	;wreg free
  6329  0020EC  C01B  F060         	movff	?___awmod,___wmul@multiplier
  6330  0020F0  C01C  F061         	movff	?___awmod+1,___wmul@multiplier+1
  6331  0020F4  ECEE  F025         	call	___wmul	;wreg free
  6332  0020F8  0E29               	movlw	low __npowers_
  6333  0020FA  0100               	movlb	0	; () banked
  6334  0020FC  2560               	addwf	?___wmul& (0+255),w,b
  6335  0020FE  6EF6               	movwf	tblptrl,c
  6336  002100  0E06               	movlw	high __npowers_
  6337  002102  0100               	movlb	0	; () banked
  6338  002104  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6339  002106  6EF7               	movwf	tblptrh,c
  6340  002108                     	if	0	;There are less than 3 active tblptr bytes
  6341  002108                     	endif
  6342  002108  0009               	tblrd		*+
  6343  00210A  CFF5 F074          	movff	tablat,___ftmul@f2
  6344  00210E  0009               	tblrd		*+
  6345  002110  CFF5 F075          	movff	tablat,___ftmul@f2+1
  6346  002114  000A               	tblrd		*-
  6347  002116  CFF5 F076          	movff	tablat,___ftmul@f2+2
  6348  00211A  EC0E  F018         	call	___ftmul	;wreg free
  6349  00211E  C071  F080         	movff	?___ftmul,?_scale
  6350  002122  C072  F081         	movff	?___ftmul+1,?_scale+1
  6351  002126  C073  F082         	movff	?___ftmul+2,?_scale+2
  6352  00212A  0012               	return	
  6353  00212C  D05F               	goto	l6516
  6354  00212E                     l6510:
  6355                           
  6356                           ;doprnt.c: 432: else if(scl > 10)
  6357  00212E  0100               	movlb	0	; () banked
  6358  002130  5186               	movf	scale@scl& (0+255),w,b
  6359  002132  0A80               	xorlw	128
  6360  002134  0F75               	addlw	-139
  6361  002136  A0D8               	btfss	status,0,c
  6362  002138  D059               	goto	l6516
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6366  00213A  0E00               	movlw	0
  6367  00213C  6E24               	movwf	___awdiv@divisor+1,c
  6368  00213E  0E0A               	movlw	10
  6369  002140  6E23               	movwf	___awdiv@divisor,c
  6370  002142  0100               	movlb	0	; () banked
  6371  002144  5186               	movf	scale@scl& (0+255),w,b
  6372  002146  6E21               	movwf	___awdiv@dividend,c
  6373  002148  6A22               	clrf	___awdiv@dividend+1,c
  6374  00214A  BE21               	btfsc	___awdiv@dividend,7,c
  6375  00214C  0622               	decf	___awdiv@dividend+1,f,c
  6376  00214E  ECD6  F021         	call	___awdiv	;wreg free
  6377  002152  0E09               	movlw	9
  6378  002154  2421               	addwf	?___awdiv,w,c
  6379  002156  0100               	movlb	0	; () banked
  6380  002158  6F60               	movwf	___wmul@multiplier& (0+255),b
  6381  00215A  0E00               	movlw	0
  6382  00215C  2022               	addwfc	?___awdiv+1,w,c
  6383  00215E  0100               	movlb	0	; () banked
  6384  002160  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  6385  002162  0E00               	movlw	0
  6386  002164  0100               	movlb	0	; () banked
  6387  002166  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6388  002168  0E03               	movlw	3
  6389  00216A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6390  00216C  ECEE  F025         	call	___wmul	;wreg free
  6391  002170  0E29               	movlw	low __npowers_
  6392  002172  0100               	movlb	0	; () banked
  6393  002174  2560               	addwf	?___wmul& (0+255),w,b
  6394  002176  6EF6               	movwf	tblptrl,c
  6395  002178  0E06               	movlw	high __npowers_
  6396  00217A  0100               	movlb	0	; () banked
  6397  00217C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6398  00217E  6EF7               	movwf	tblptrh,c
  6399  002180                     	if	0	;There are less than 3 active tblptr bytes
  6400  002180                     	endif
  6401  002180  0009               	tblrd		*+
  6402  002182  CFF5 F071          	movff	tablat,___ftmul@f1
  6403  002186  0009               	tblrd		*+
  6404  002188  CFF5 F072          	movff	tablat,___ftmul@f1+1
  6405  00218C  000A               	tblrd		*-
  6406  00218E  CFF5 F073          	movff	tablat,___ftmul@f1+2
  6407  002192  0E00               	movlw	0
  6408  002194  0100               	movlb	0	; () banked
  6409  002196  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6410  002198  0E03               	movlw	3
  6411  00219A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6412  00219C  0E00               	movlw	0
  6413  00219E  6E1E               	movwf	___awmod@divisor+1,c
  6414  0021A0  0E0A               	movlw	10
  6415  0021A2  6E1D               	movwf	___awmod@divisor,c
  6416  0021A4  0100               	movlb	0	; () banked
  6417  0021A6  5186               	movf	scale@scl& (0+255),w,b
  6418  0021A8  6E1B               	movwf	___awmod@dividend,c
  6419  0021AA  6A1C               	clrf	___awmod@dividend+1,c
  6420  0021AC  BE1B               	btfsc	___awmod@dividend,7,c
  6421  0021AE  061C               	decf	___awmod@dividend+1,f,c
  6422  0021B0  ECCC  F023         	call	___awmod	;wreg free
  6423  0021B4  C01B  F060         	movff	?___awmod,___wmul@multiplier
  6424  0021B8  C01C  F061         	movff	?___awmod+1,___wmul@multiplier+1
  6425  0021BC  ECEE  F025         	call	___wmul	;wreg free
  6426  0021C0  0E29               	movlw	low __npowers_
  6427  0021C2  0100               	movlb	0	; () banked
  6428  0021C4  2560               	addwf	?___wmul& (0+255),w,b
  6429  0021C6  6EF6               	movwf	tblptrl,c
  6430  0021C8  0E06               	movlw	high __npowers_
  6431  0021CA  0100               	movlb	0	; () banked
  6432  0021CC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6433  0021CE  6EF7               	movwf	tblptrh,c
  6434  0021D0                     	if	0	;There are less than 3 active tblptr bytes
  6435  0021D0                     	endif
  6436  0021D0  0009               	tblrd		*+
  6437  0021D2  CFF5 F074          	movff	tablat,___ftmul@f2
  6438  0021D6  0009               	tblrd		*+
  6439  0021D8  CFF5 F075          	movff	tablat,___ftmul@f2+1
  6440  0021DC  000A               	tblrd		*-
  6441  0021DE  CFF5 F076          	movff	tablat,___ftmul@f2+2
  6442  0021E2  EC0E  F018         	call	___ftmul	;wreg free
  6443  0021E6  D79B               	goto	L2
  6444  0021E8  0012               	return	
  6445  0021EA  D000               	goto	l6516
  6446  0021EC                     l6516:
  6447                           
  6448                           ;doprnt.c: 434: return _npowers_[scl];
  6449  0021EC  0100               	movlb	0	; () banked
  6450  0021EE  5186               	movf	scale@scl& (0+255),w,b
  6451  0021F0  0D03               	mullw	3
  6452  0021F2  0E29               	movlw	low __npowers_
  6453  0021F4  24F3               	addwf	prodl,w,c
  6454  0021F6  6EF6               	movwf	tblptrl,c
  6455  0021F8  0E06               	movlw	high __npowers_
  6456  0021FA  20F4               	addwfc	prodh,w,c
  6457  0021FC  6EF7               	movwf	tblptrh,c
  6458  0021FE                     	if	0	;There are less than 3 active tblptr bytes
  6459  0021FE                     	endif
  6460  0021FE  0009               	tblrd		*+
  6461  002200  CFF5 F080          	movff	tablat,?_scale
  6462  002204  0009               	tblrd		*+
  6463  002206  CFF5 F081          	movff	tablat,?_scale+1
  6464  00220A  000A               	tblrd		*-
  6465  00220C  CFF5 F082          	movff	tablat,?_scale+2
  6466                           
  6467                           ; BSR set to: 0
  6468  002210  0012               	return	
  6469  002212                     l6520:
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;doprnt.c: 435: }
  6473                           ;doprnt.c: 436: if(scl>=110)
  6474  002212  0100               	movlb	0	; () banked
  6475  002214  5186               	movf	scale@scl& (0+255),w,b
  6476  002216  0A80               	xorlw	128
  6477  002218  0F12               	addlw	-238
  6478  00221A  A0D8               	btfss	status,0,c
  6479  00221C  D0A2               	goto	l6528
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6483  00221E  0E00               	movlw	0
  6484  002220  0100               	movlb	0	; () banked
  6485  002222  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6486  002224  0E03               	movlw	3
  6487  002226  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6488  002228  0E00               	movlw	0
  6489  00222A  6E24               	movwf	___awdiv@divisor+1,c
  6490  00222C  0E0A               	movlw	10
  6491  00222E  6E23               	movwf	___awdiv@divisor,c
  6492  002230  0E00               	movlw	0
  6493  002232  6E1E               	movwf	___awmod@divisor+1,c
  6494  002234  0E64               	movlw	100
  6495  002236  6E1D               	movwf	___awmod@divisor,c
  6496  002238  0100               	movlb	0	; () banked
  6497  00223A  5186               	movf	scale@scl& (0+255),w,b
  6498  00223C  6E1B               	movwf	___awmod@dividend,c
  6499  00223E  6A1C               	clrf	___awmod@dividend+1,c
  6500  002240  BE1B               	btfsc	___awmod@dividend,7,c
  6501  002242  061C               	decf	___awmod@dividend+1,f,c
  6502  002244  ECCC  F023         	call	___awmod	;wreg free
  6503  002248  C01B  F021         	movff	?___awmod,___awdiv@dividend
  6504  00224C  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  6505  002250  ECD6  F021         	call	___awdiv	;wreg free
  6506  002254  0E09               	movlw	9
  6507  002256  2421               	addwf	?___awdiv,w,c
  6508  002258  0100               	movlb	0	; () banked
  6509  00225A  6F60               	movwf	___wmul@multiplier& (0+255),b
  6510  00225C  0E00               	movlw	0
  6511  00225E  2022               	addwfc	?___awdiv+1,w,c
  6512  002260  0100               	movlb	0	; () banked
  6513  002262  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  6514  002264  ECEE  F025         	call	___wmul	;wreg free
  6515  002268  0E50               	movlw	low __powers_
  6516  00226A  0100               	movlb	0	; () banked
  6517  00226C  2560               	addwf	?___wmul& (0+255),w,b
  6518  00226E  6EF6               	movwf	tblptrl,c
  6519  002270  0E06               	movlw	high __powers_
  6520  002272  0100               	movlb	0	; () banked
  6521  002274  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6522  002276  6EF7               	movwf	tblptrh,c
  6523  002278                     	if	0	;There are less than 3 active tblptr bytes
  6524  002278                     	endif
  6525  002278  0009               	tblrd		*+
  6526  00227A  CFF5 F074          	movff	tablat,___ftmul@f2
  6527  00227E  0009               	tblrd		*+
  6528  002280  CFF5 F075          	movff	tablat,___ftmul@f2+1
  6529  002284  000A               	tblrd		*-
  6530  002286  CFF5 F076          	movff	tablat,___ftmul@f2+2
  6531  00228A  0E00               	movlw	0
  6532  00228C  6E24               	movwf	___awdiv@divisor+1,c
  6533  00228E  0E64               	movlw	100
  6534  002290  6E23               	movwf	___awdiv@divisor,c
  6535  002292  0100               	movlb	0	; () banked
  6536  002294  5186               	movf	scale@scl& (0+255),w,b
  6537  002296  6E21               	movwf	___awdiv@dividend,c
  6538  002298  6A22               	clrf	___awdiv@dividend+1,c
  6539  00229A  BE21               	btfsc	___awdiv@dividend,7,c
  6540  00229C  0622               	decf	___awdiv@dividend+1,f,c
  6541  00229E  ECD6  F021         	call	___awdiv	;wreg free
  6542  0022A2  0E12               	movlw	18
  6543  0022A4  2421               	addwf	?___awdiv,w,c
  6544  0022A6  0100               	movlb	0	; () banked
  6545  0022A8  6F60               	movwf	___wmul@multiplier& (0+255),b
  6546  0022AA  0E00               	movlw	0
  6547  0022AC  2022               	addwfc	?___awdiv+1,w,c
  6548  0022AE  0100               	movlb	0	; () banked
  6549  0022B0  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  6550  0022B2  0E00               	movlw	0
  6551  0022B4  0100               	movlb	0	; () banked
  6552  0022B6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6553  0022B8  0E03               	movlw	3
  6554  0022BA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6555  0022BC  ECEE  F025         	call	___wmul	;wreg free
  6556  0022C0  0E50               	movlw	low __powers_
  6557  0022C2  0100               	movlb	0	; () banked
  6558  0022C4  2560               	addwf	?___wmul& (0+255),w,b
  6559  0022C6  6EF6               	movwf	tblptrl,c
  6560  0022C8  0E06               	movlw	high __powers_
  6561  0022CA  0100               	movlb	0	; () banked
  6562  0022CC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6563  0022CE  6EF7               	movwf	tblptrh,c
  6564  0022D0                     	if	0	;There are less than 3 active tblptr bytes
  6565  0022D0                     	endif
  6566  0022D0  0009               	tblrd		*+
  6567  0022D2  CFF5 F071          	movff	tablat,___ftmul@f1
  6568  0022D6  0009               	tblrd		*+
  6569  0022D8  CFF5 F072          	movff	tablat,___ftmul@f1+1
  6570  0022DC  000A               	tblrd		*-
  6571  0022DE  CFF5 F073          	movff	tablat,___ftmul@f1+2
  6572  0022E2  EC0E  F018         	call	___ftmul	;wreg free
  6573  0022E6  C071  F083         	movff	?___ftmul,_scale$2055
  6574  0022EA  C072  F084         	movff	?___ftmul+1,_scale$2055+1
  6575  0022EE  C073  F085         	movff	?___ftmul+2,_scale$2055+2
  6576                           
  6577                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6578  0022F2  C083  F071         	movff	_scale$2055,___ftmul@f1
  6579  0022F6  C084  F072         	movff	_scale$2055+1,___ftmul@f1+1
  6580  0022FA  C085  F073         	movff	_scale$2055+2,___ftmul@f1+2
  6581  0022FE  0E00               	movlw	0
  6582  002300  0100               	movlb	0	; () banked
  6583  002302  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6584  002304  0E03               	movlw	3
  6585  002306  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6586  002308  0E00               	movlw	0
  6587  00230A  6E1E               	movwf	___awmod@divisor+1,c
  6588  00230C  0E0A               	movlw	10
  6589  00230E  6E1D               	movwf	___awmod@divisor,c
  6590  002310  0100               	movlb	0	; () banked
  6591  002312  5186               	movf	scale@scl& (0+255),w,b
  6592  002314  6E1B               	movwf	___awmod@dividend,c
  6593  002316  6A1C               	clrf	___awmod@dividend+1,c
  6594  002318  BE1B               	btfsc	___awmod@dividend,7,c
  6595  00231A  061C               	decf	___awmod@dividend+1,f,c
  6596  00231C  ECCC  F023         	call	___awmod	;wreg free
  6597  002320  C01B  F060         	movff	?___awmod,___wmul@multiplier
  6598  002324  C01C  F061         	movff	?___awmod+1,___wmul@multiplier+1
  6599  002328  ECEE  F025         	call	___wmul	;wreg free
  6600  00232C  0E50               	movlw	low __powers_
  6601  00232E  0100               	movlb	0	; () banked
  6602  002330  2560               	addwf	?___wmul& (0+255),w,b
  6603  002332  6EF6               	movwf	tblptrl,c
  6604  002334  0E06               	movlw	high __powers_
  6605  002336  0100               	movlb	0	; () banked
  6606  002338  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6607  00233A  6EF7               	movwf	tblptrh,c
  6608  00233C                     	if	0	;There are less than 3 active tblptr bytes
  6609  00233C                     	endif
  6610  00233C  0009               	tblrd		*+
  6611  00233E  CFF5 F074          	movff	tablat,___ftmul@f2
  6612  002342  0009               	tblrd		*+
  6613  002344  CFF5 F075          	movff	tablat,___ftmul@f2+1
  6614  002348  000A               	tblrd		*-
  6615  00234A  CFF5 F076          	movff	tablat,___ftmul@f2+2
  6616  00234E  EC0E  F018         	call	___ftmul	;wreg free
  6617  002352  C071  F080         	movff	?___ftmul,?_scale
  6618  002356  C072  F081         	movff	?___ftmul+1,?_scale+1
  6619  00235A  C073  F082         	movff	?___ftmul+2,?_scale+2
  6620  00235E  0012               	return	
  6621  002360  D05F               	goto	l6534
  6622  002362                     l6528:
  6623                           
  6624                           ;doprnt.c: 438: else if(scl > 10)
  6625  002362  0100               	movlb	0	; () banked
  6626  002364  5186               	movf	scale@scl& (0+255),w,b
  6627  002366  0A80               	xorlw	128
  6628  002368  0F75               	addlw	-139
  6629  00236A  A0D8               	btfss	status,0,c
  6630  00236C  D059               	goto	l6534
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6634  00236E  0E00               	movlw	0
  6635  002370  6E24               	movwf	___awdiv@divisor+1,c
  6636  002372  0E0A               	movlw	10
  6637  002374  6E23               	movwf	___awdiv@divisor,c
  6638  002376  0100               	movlb	0	; () banked
  6639  002378  5186               	movf	scale@scl& (0+255),w,b
  6640  00237A  6E21               	movwf	___awdiv@dividend,c
  6641  00237C  6A22               	clrf	___awdiv@dividend+1,c
  6642  00237E  BE21               	btfsc	___awdiv@dividend,7,c
  6643  002380  0622               	decf	___awdiv@dividend+1,f,c
  6644  002382  ECD6  F021         	call	___awdiv	;wreg free
  6645  002386  0E09               	movlw	9
  6646  002388  2421               	addwf	?___awdiv,w,c
  6647  00238A  0100               	movlb	0	; () banked
  6648  00238C  6F60               	movwf	___wmul@multiplier& (0+255),b
  6649  00238E  0E00               	movlw	0
  6650  002390  2022               	addwfc	?___awdiv+1,w,c
  6651  002392  0100               	movlb	0	; () banked
  6652  002394  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  6653  002396  0E00               	movlw	0
  6654  002398  0100               	movlb	0	; () banked
  6655  00239A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6656  00239C  0E03               	movlw	3
  6657  00239E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6658  0023A0  ECEE  F025         	call	___wmul	;wreg free
  6659  0023A4  0E50               	movlw	low __powers_
  6660  0023A6  0100               	movlb	0	; () banked
  6661  0023A8  2560               	addwf	?___wmul& (0+255),w,b
  6662  0023AA  6EF6               	movwf	tblptrl,c
  6663  0023AC  0E06               	movlw	high __powers_
  6664  0023AE  0100               	movlb	0	; () banked
  6665  0023B0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6666  0023B2  6EF7               	movwf	tblptrh,c
  6667  0023B4                     	if	0	;There are less than 3 active tblptr bytes
  6668  0023B4                     	endif
  6669  0023B4  0009               	tblrd		*+
  6670  0023B6  CFF5 F071          	movff	tablat,___ftmul@f1
  6671  0023BA  0009               	tblrd		*+
  6672  0023BC  CFF5 F072          	movff	tablat,___ftmul@f1+1
  6673  0023C0  000A               	tblrd		*-
  6674  0023C2  CFF5 F073          	movff	tablat,___ftmul@f1+2
  6675  0023C6  0E00               	movlw	0
  6676  0023C8  0100               	movlb	0	; () banked
  6677  0023CA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6678  0023CC  0E03               	movlw	3
  6679  0023CE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6680  0023D0  0E00               	movlw	0
  6681  0023D2  6E1E               	movwf	___awmod@divisor+1,c
  6682  0023D4  0E0A               	movlw	10
  6683  0023D6  6E1D               	movwf	___awmod@divisor,c
  6684  0023D8  0100               	movlb	0	; () banked
  6685  0023DA  5186               	movf	scale@scl& (0+255),w,b
  6686  0023DC  6E1B               	movwf	___awmod@dividend,c
  6687  0023DE  6A1C               	clrf	___awmod@dividend+1,c
  6688  0023E0  BE1B               	btfsc	___awmod@dividend,7,c
  6689  0023E2  061C               	decf	___awmod@dividend+1,f,c
  6690  0023E4  ECCC  F023         	call	___awmod	;wreg free
  6691  0023E8  C01B  F060         	movff	?___awmod,___wmul@multiplier
  6692  0023EC  C01C  F061         	movff	?___awmod+1,___wmul@multiplier+1
  6693  0023F0  ECEE  F025         	call	___wmul	;wreg free
  6694  0023F4  0E50               	movlw	low __powers_
  6695  0023F6  0100               	movlb	0	; () banked
  6696  0023F8  2560               	addwf	?___wmul& (0+255),w,b
  6697  0023FA  6EF6               	movwf	tblptrl,c
  6698  0023FC  0E06               	movlw	high __powers_
  6699  0023FE  0100               	movlb	0	; () banked
  6700  002400  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6701  002402  6EF7               	movwf	tblptrh,c
  6702  002404                     	if	0	;There are less than 3 active tblptr bytes
  6703  002404                     	endif
  6704  002404  0009               	tblrd		*+
  6705  002406  CFF5 F074          	movff	tablat,___ftmul@f2
  6706  00240A  0009               	tblrd		*+
  6707  00240C  CFF5 F075          	movff	tablat,___ftmul@f2+1
  6708  002410  000A               	tblrd		*-
  6709  002412  CFF5 F076          	movff	tablat,___ftmul@f2+2
  6710  002416  EC0E  F018         	call	___ftmul	;wreg free
  6711  00241A  D79B               	goto	L3
  6712  00241C  0012               	return	
  6713  00241E  D000               	goto	l6534
  6714  002420                     l6534:
  6715                           
  6716                           ;doprnt.c: 440: return _powers_[scl];
  6717  002420  0100               	movlb	0	; () banked
  6718  002422  5186               	movf	scale@scl& (0+255),w,b
  6719  002424  0D03               	mullw	3
  6720  002426  0E50               	movlw	low __powers_
  6721  002428  24F3               	addwf	prodl,w,c
  6722  00242A  6EF6               	movwf	tblptrl,c
  6723  00242C  0E06               	movlw	high __powers_
  6724  00242E  20F4               	addwfc	prodh,w,c
  6725  002430  6EF7               	movwf	tblptrh,c
  6726  002432                     	if	0	;There are less than 3 active tblptr bytes
  6727  002432                     	endif
  6728  002432  0009               	tblrd		*+
  6729  002434  CFF5 F080          	movff	tablat,?_scale
  6730  002438  0009               	tblrd		*+
  6731  00243A  CFF5 F081          	movff	tablat,?_scale+1
  6732  00243E  000A               	tblrd		*-
  6733  002440  CFF5 F082          	movff	tablat,?_scale+2
  6734  002444  0012               	return	
  6735                           
  6736                           ; BSR set to: 0
  6737  002446  0012               	return		;funcret
  6738  002448                     __end_of_scale:
  6739                           	opt stack 0
  6740                           tosu	equ	0xFFF
  6741                           tosh	equ	0xFFE
  6742                           tosl	equ	0xFFD
  6743                           pclath	equ	0xFFA
  6744                           tblptru	equ	0xFF8
  6745                           tblptrh	equ	0xFF7
  6746                           tblptrl	equ	0xFF6
  6747                           tablat	equ	0xFF5
  6748                           prodh	equ	0xFF4
  6749                           prodl	equ	0xFF3
  6750                           intcon	equ	0xFF2
  6751                           postinc0	equ	0xFEE
  6752                           wreg	equ	0xFE8
  6753                           indf2	equ	0xFDF
  6754                           postinc2	equ	0xFDE
  6755                           postdec2	equ	0xFDD
  6756                           fsr2h	equ	0xFDA
  6757                           fsr2l	equ	0xFD9
  6758                           status	equ	0xFD8
  6759                           
  6760 ;; *************** function _putch *****************
  6761 ;; Defined at:
  6762 ;;		line 165 in file "UART.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  txData          1    wreg     unsigned char 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  txData          1   38[COMRAM] unsigned char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;		None               void
  6769 ;; Registers used:
  6770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6776 ;;      Params:         0       0       0       0       0       0       0
  6777 ;;      Locals:         1       0       0       0       0       0       0
  6778 ;;      Temps:          0       0       0       0       0       0       0
  6779 ;;      Totals:         1       0       0       0       0       0       0
  6780 ;;Total ram usage:        1 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:    7
  6783 ;; This function calls:
  6784 ;;		_Send_put
  6785 ;; This function is called by:
  6786 ;;		_printf
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           	psect	text14
  6791  004EBE                     __ptext14:
  6792                           	opt stack 0
  6793  004EBE                     _putch:
  6794                           	opt stack 22
  6795                           
  6796                           ;incstack = 0
  6797                           ;putch@txData stored from wreg
  6798  004EBE  6E27               	movwf	putch@txData,c
  6799                           
  6800                           ;UART.c: 167: Send_put(txData);
  6801  004EC0  5027               	movf	putch@txData,w,c
  6802  004EC2  EC21  F026         	call	_Send_put
  6803  004EC6  0012               	return		;funcret
  6804  004EC8                     __end_of_putch:
  6805                           	opt stack 0
  6806                           tosu	equ	0xFFF
  6807                           tosh	equ	0xFFE
  6808                           tosl	equ	0xFFD
  6809                           pclath	equ	0xFFA
  6810                           tblptru	equ	0xFF8
  6811                           tblptrh	equ	0xFF7
  6812                           tblptrl	equ	0xFF6
  6813                           tablat	equ	0xFF5
  6814                           prodh	equ	0xFF4
  6815                           prodl	equ	0xFF3
  6816                           intcon	equ	0xFF2
  6817                           postinc0	equ	0xFEE
  6818                           wreg	equ	0xFE8
  6819                           indf2	equ	0xFDF
  6820                           postinc2	equ	0xFDE
  6821                           postdec2	equ	0xFDD
  6822                           fsr2h	equ	0xFDA
  6823                           fsr2l	equ	0xFD9
  6824                           status	equ	0xFD8
  6825                           
  6826 ;; *************** function _Send_put *****************
  6827 ;; Defined at:
  6828 ;;		line 128 in file "UART.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;  _data           1    wreg     unsigned char 
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;  _data           1   37[COMRAM] unsigned char 
  6833 ;; Return value:  Size  Location     Type
  6834 ;;		None               void
  6835 ;; Registers used:
  6836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6837 ;; Tracked objects:
  6838 ;;		On entry : 0/0
  6839 ;;		On exit  : 0/0
  6840 ;;		Unchanged: 0/0
  6841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6842 ;;      Params:         0       0       0       0       0       0       0
  6843 ;;      Locals:         1       0       0       0       0       0       0
  6844 ;;      Temps:          0       0       0       0       0       0       0
  6845 ;;      Totals:         1       0       0       0       0       0       0
  6846 ;;Total ram usage:        1 bytes
  6847 ;; Hardware stack levels used:    1
  6848 ;; Hardware stack levels required when called:    6
  6849 ;; This function calls:
  6850 ;;		_UART_buff_get
  6851 ;;		_UART_buff_put
  6852 ;; This function is called by:
  6853 ;;		_SYSTEM_Initialize
  6854 ;;		_putch
  6855 ;;		_receiveData
  6856 ;;		_sendData
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           	psect	text15
  6861  004C42                     __ptext15:
  6862                           	opt stack 0
  6863  004C42                     _Send_put:
  6864                           	opt stack 22
  6865                           
  6866                           ;incstack = 0
  6867                           ;Send_put@_data stored from wreg
  6868  004C42  6E26               	movwf	Send_put@_data,c
  6869                           
  6870                           ;UART.c: 129: UART_buff_put(&output_buffer, _data);
  6871  004C44  0E00               	movlw	low _output_buffer
  6872  004C46  6E21               	movwf	UART_buff_put@_this,c
  6873  004C48  0E05               	movlw	high _output_buffer
  6874  004C4A  6E22               	movwf	UART_buff_put@_this+1,c
  6875  004C4C  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  6876  004C50  ECF4  F01B         	call	_UART_buff_put	;wreg free
  6877                           
  6878                           ;UART.c: 130: if (Transmit_stall == 1) {
  6879  004C54  0445               	decf	_Transmit_stall,w,c
  6880  004C56  A4D8               	btfss	status,2,c
  6881  004C58  0012               	return	
  6882                           
  6883                           ;UART.c: 131: Transmit_stall = 0;
  6884  004C5A  0E00               	movlw	0
  6885  004C5C  6E45               	movwf	_Transmit_stall,c
  6886                           
  6887                           ;UART.c: 132: TXREG1 = UART_buff_get(&output_buffer);
  6888  004C5E  0E00               	movlw	low _output_buffer
  6889  004C60  6E21               	movwf	UART_buff_get@_this,c
  6890  004C62  0E05               	movlw	high _output_buffer
  6891  004C64  6E22               	movwf	UART_buff_get@_this+1,c
  6892  004C66  EC21  F022         	call	_UART_buff_get	;wreg free
  6893  004C6A  6EAD               	movwf	4013,c	;volatile
  6894  004C6C  0012               	return	
  6895  004C6E  0012               	return		;funcret
  6896  004C70                     __end_of_Send_put:
  6897                           	opt stack 0
  6898                           tosu	equ	0xFFF
  6899                           tosh	equ	0xFFE
  6900                           tosl	equ	0xFFD
  6901                           pclath	equ	0xFFA
  6902                           tblptru	equ	0xFF8
  6903                           tblptrh	equ	0xFF7
  6904                           tblptrl	equ	0xFF6
  6905                           tablat	equ	0xFF5
  6906                           prodh	equ	0xFF4
  6907                           prodl	equ	0xFF3
  6908                           intcon	equ	0xFF2
  6909                           postinc0	equ	0xFEE
  6910                           wreg	equ	0xFE8
  6911                           indf2	equ	0xFDF
  6912                           postinc2	equ	0xFDE
  6913                           postdec2	equ	0xFDD
  6914                           fsr2h	equ	0xFDA
  6915                           fsr2l	equ	0xFD9
  6916                           status	equ	0xFD8
  6917                           
  6918 ;; *************** function _UART_buff_put *****************
  6919 ;; Defined at:
  6920 ;;		line 66 in file "UART.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  6923 ;;		 -> output_buffer(206), input_buffer(206), 
  6924 ;;  c               1   34[COMRAM] const unsigned char 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;		None
  6927 ;; Return value:  Size  Location     Type
  6928 ;;		None               void
  6929 ;; Registers used:
  6930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6936 ;;      Params:         3       0       0       0       0       0       0
  6937 ;;      Locals:         0       0       0       0       0       0       0
  6938 ;;      Temps:          2       0       0       0       0       0       0
  6939 ;;      Totals:         5       0       0       0       0       0       0
  6940 ;;Total ram usage:        5 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    5
  6943 ;; This function calls:
  6944 ;;		_UART_buff_modulo_inc
  6945 ;; This function is called by:
  6946 ;;		_Send_put
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           	psect	text16
  6951  0037E8                     __ptext16:
  6952                           	opt stack 0
  6953  0037E8                     _UART_buff_put:
  6954                           	opt stack 22
  6955                           
  6956                           ;UART.c: 67: if (_this->count < 200) {
  6957                           
  6958                           ;incstack = 0
  6959  0037E8  EE20 F0CC          	lfsr	2,204
  6960  0037EC  5021               	movf	UART_buff_put@_this,w,c
  6961  0037EE  26D9               	addwf	fsr2l,f,c
  6962  0037F0  5022               	movf	UART_buff_put@_this+1,w,c
  6963  0037F2  22DA               	addwfc	fsr2h,f,c
  6964  0037F4  0E01               	movlw	1
  6965  0037F6  BEDB               	btfsc	plusw2,7,c
  6966  0037F8  D007               	goto	l5782
  6967  0037FA  0E01               	movlw	1
  6968  0037FC  50DB               	movf	plusw2,w,c
  6969  0037FE  E13A               	bnz	l5788
  6970  003800  0EC8               	movlw	200
  6971  003802  5CDE               	subwf	postinc2,w,c
  6972  003804  B0D8               	btfsc	status,0,c
  6973  003806  D036               	goto	l5788
  6974  003808                     l5782:
  6975                           
  6976                           ;UART.c: 68: _this->buf[_this->head] = c;
  6977  003808  EE20 F0C8          	lfsr	2,200
  6978  00380C  5021               	movf	UART_buff_put@_this,w,c
  6979  00380E  26D9               	addwf	fsr2l,f,c
  6980  003810  5022               	movf	UART_buff_put@_this+1,w,c
  6981  003812  22DA               	addwfc	fsr2h,f,c
  6982  003814  CFDE F024          	movff	postinc2,??_UART_buff_put
  6983  003818  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  6984  00381C  5024               	movf	??_UART_buff_put,w,c
  6985  00381E  2421               	addwf	UART_buff_put@_this,w,c
  6986  003820  6ED9               	movwf	fsr2l,c
  6987  003822  5025               	movf	??_UART_buff_put+1,w,c
  6988  003824  2022               	addwfc	UART_buff_put@_this+1,w,c
  6989  003826  6EDA               	movwf	fsr2h,c
  6990  003828  C023  FFDF         	movff	UART_buff_put@c,indf2
  6991                           
  6992                           ;UART.c: 69: _this->head = UART_buff_modulo_inc(_this->head, 200);
  6993  00382C  EE20 F0C8          	lfsr	2,200
  6994  003830  5021               	movf	UART_buff_put@_this,w,c
  6995  003832  26D9               	addwf	fsr2l,f,c
  6996  003834  5022               	movf	UART_buff_put@_this+1,w,c
  6997  003836  22DA               	addwfc	fsr2h,f,c
  6998  003838  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  6999  00383C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  7000  003840  0E00               	movlw	0
  7001  003842  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  7002  003844  0EC8               	movlw	200
  7003  003846  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  7004  003848  EC38  F026         	call	_UART_buff_modulo_inc	;wreg free
  7005  00384C  EE20 F0C8          	lfsr	2,200
  7006  003850  5021               	movf	UART_buff_put@_this,w,c
  7007  003852  26D9               	addwf	fsr2l,f,c
  7008  003854  5022               	movf	UART_buff_put@_this+1,w,c
  7009  003856  22DA               	addwfc	fsr2h,f,c
  7010  003858  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7011  00385C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7012                           
  7013                           ;UART.c: 70: ++_this->count;
  7014  003860  EE20 F0CC          	lfsr	2,204
  7015  003864  5021               	movf	UART_buff_put@_this,w,c
  7016  003866  26D9               	addwf	fsr2l,f,c
  7017  003868  5022               	movf	UART_buff_put@_this+1,w,c
  7018  00386A  22DA               	addwfc	fsr2h,f,c
  7019  00386C  2ADE               	incf	postinc2,f,c
  7020  00386E  0E00               	movlw	0
  7021  003870  22DD               	addwfc	postdec2,f,c
  7022                           
  7023                           ;UART.c: 71: } else {
  7024  003872  0012               	return	
  7025  003874                     l5788:
  7026                           
  7027                           ;UART.c: 72: _this->buf[_this->head] = c;
  7028  003874  EE20 F0C8          	lfsr	2,200
  7029  003878  5021               	movf	UART_buff_put@_this,w,c
  7030  00387A  26D9               	addwf	fsr2l,f,c
  7031  00387C  5022               	movf	UART_buff_put@_this+1,w,c
  7032  00387E  22DA               	addwfc	fsr2h,f,c
  7033  003880  CFDE F024          	movff	postinc2,??_UART_buff_put
  7034  003884  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  7035  003888  5024               	movf	??_UART_buff_put,w,c
  7036  00388A  2421               	addwf	UART_buff_put@_this,w,c
  7037  00388C  6ED9               	movwf	fsr2l,c
  7038  00388E  5025               	movf	??_UART_buff_put+1,w,c
  7039  003890  2022               	addwfc	UART_buff_put@_this+1,w,c
  7040  003892  6EDA               	movwf	fsr2h,c
  7041  003894  C023  FFDF         	movff	UART_buff_put@c,indf2
  7042                           
  7043                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7044  003898  EE20 F0C8          	lfsr	2,200
  7045  00389C  5021               	movf	UART_buff_put@_this,w,c
  7046  00389E  26D9               	addwf	fsr2l,f,c
  7047  0038A0  5022               	movf	UART_buff_put@_this+1,w,c
  7048  0038A2  22DA               	addwfc	fsr2h,f,c
  7049  0038A4  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  7050  0038A8  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  7051  0038AC  0E00               	movlw	0
  7052  0038AE  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  7053  0038B0  0EC8               	movlw	200
  7054  0038B2  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  7055  0038B4  EC38  F026         	call	_UART_buff_modulo_inc	;wreg free
  7056  0038B8  EE20 F0C8          	lfsr	2,200
  7057  0038BC  5021               	movf	UART_buff_put@_this,w,c
  7058  0038BE  26D9               	addwf	fsr2l,f,c
  7059  0038C0  5022               	movf	UART_buff_put@_this+1,w,c
  7060  0038C2  22DA               	addwfc	fsr2h,f,c
  7061  0038C4  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7062  0038C8  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7063                           
  7064                           ;UART.c: 74: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7065  0038CC  EE20 F0CA          	lfsr	2,202
  7066  0038D0  5021               	movf	UART_buff_put@_this,w,c
  7067  0038D2  26D9               	addwf	fsr2l,f,c
  7068  0038D4  5022               	movf	UART_buff_put@_this+1,w,c
  7069  0038D6  22DA               	addwfc	fsr2h,f,c
  7070  0038D8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  7071  0038DC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  7072  0038E0  0E00               	movlw	0
  7073  0038E2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  7074  0038E4  0EC8               	movlw	200
  7075  0038E6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  7076  0038E8  EC38  F026         	call	_UART_buff_modulo_inc	;wreg free
  7077  0038EC  EE20 F0CA          	lfsr	2,202
  7078  0038F0  5021               	movf	UART_buff_put@_this,w,c
  7079  0038F2  26D9               	addwf	fsr2l,f,c
  7080  0038F4  5022               	movf	UART_buff_put@_this+1,w,c
  7081  0038F6  22DA               	addwfc	fsr2h,f,c
  7082  0038F8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7083  0038FC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7084  003900  0012               	return	
  7085  003902  0012               	return		;funcret
  7086  003904                     __end_of_UART_buff_put:
  7087                           	opt stack 0
  7088                           tosu	equ	0xFFF
  7089                           tosh	equ	0xFFE
  7090                           tosl	equ	0xFFD
  7091                           pclath	equ	0xFFA
  7092                           tblptru	equ	0xFF8
  7093                           tblptrh	equ	0xFF7
  7094                           tblptrl	equ	0xFF6
  7095                           tablat	equ	0xFF5
  7096                           prodh	equ	0xFF4
  7097                           prodl	equ	0xFF3
  7098                           intcon	equ	0xFF2
  7099                           postinc0	equ	0xFEE
  7100                           wreg	equ	0xFE8
  7101                           indf2	equ	0xFDF
  7102                           postinc2	equ	0xFDE
  7103                           postdec2	equ	0xFDD
  7104                           plusw2	equ	0xFDB
  7105                           fsr2h	equ	0xFDA
  7106                           fsr2l	equ	0xFD9
  7107                           status	equ	0xFD8
  7108                           
  7109 ;; *************** function _UART_buff_get *****************
  7110 ;; Defined at:
  7111 ;;		line 79 in file "UART.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  7114 ;;		 -> output_buffer(206), input_buffer(206), 
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;  c               1   36[COMRAM] unsigned char 
  7117 ;; Return value:  Size  Location     Type
  7118 ;;                  1    wreg      unsigned char 
  7119 ;; Registers used:
  7120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7126 ;;      Params:         2       0       0       0       0       0       0
  7127 ;;      Locals:         1       0       0       0       0       0       0
  7128 ;;      Temps:          2       0       0       0       0       0       0
  7129 ;;      Totals:         5       0       0       0       0       0       0
  7130 ;;Total ram usage:        5 bytes
  7131 ;; Hardware stack levels used:    1
  7132 ;; Hardware stack levels required when called:    5
  7133 ;; This function calls:
  7134 ;;		_UART_buff_modulo_inc
  7135 ;; This function is called by:
  7136 ;;		_Receive_get
  7137 ;;		_Send_put
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           	psect	text17
  7142  004442                     __ptext17:
  7143                           	opt stack 0
  7144  004442                     _UART_buff_get:
  7145                           	opt stack 22
  7146                           
  7147                           ;UART.c: 80: unsigned char c;
  7148                           ;UART.c: 81: if (_this->count > 0) {
  7149                           
  7150                           ;incstack = 0
  7151  004442  EE20 F0CC          	lfsr	2,204
  7152  004446  5021               	movf	UART_buff_get@_this,w,c
  7153  004448  26D9               	addwf	fsr2l,f,c
  7154  00444A  5022               	movf	UART_buff_get@_this+1,w,c
  7155  00444C  22DA               	addwfc	fsr2h,f,c
  7156  00444E  0E01               	movlw	1
  7157  004450  BEDB               	btfsc	plusw2,7,c
  7158  004452  D03C               	goto	l5728
  7159  004454  0E01               	movlw	1
  7160  004456  50DB               	movf	plusw2,w,c
  7161  004458  E103               	bnz	u6330
  7162  00445A  04DE               	decf	postinc2,w,c
  7163  00445C  A0D8               	btfss	status,0,c
  7164  00445E  D036               	goto	l5728
  7165  004460                     u6330:
  7166                           
  7167                           ;UART.c: 82: c = _this->buf[_this->tail];
  7168  004460  EE20 F0CA          	lfsr	2,202
  7169  004464  5021               	movf	UART_buff_get@_this,w,c
  7170  004466  26D9               	addwf	fsr2l,f,c
  7171  004468  5022               	movf	UART_buff_get@_this+1,w,c
  7172  00446A  22DA               	addwfc	fsr2h,f,c
  7173  00446C  CFDE F023          	movff	postinc2,??_UART_buff_get
  7174  004470  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  7175  004474  5023               	movf	??_UART_buff_get,w,c
  7176  004476  2421               	addwf	UART_buff_get@_this,w,c
  7177  004478  6ED9               	movwf	fsr2l,c
  7178  00447A  5024               	movf	??_UART_buff_get+1,w,c
  7179  00447C  2022               	addwfc	UART_buff_get@_this+1,w,c
  7180  00447E  6EDA               	movwf	fsr2h,c
  7181  004480  50DF               	movf	indf2,w,c
  7182  004482  6E25               	movwf	UART_buff_get@c,c
  7183                           
  7184                           ;UART.c: 83: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7185  004484  EE20 F0CA          	lfsr	2,202
  7186  004488  5021               	movf	UART_buff_get@_this,w,c
  7187  00448A  26D9               	addwf	fsr2l,f,c
  7188  00448C  5022               	movf	UART_buff_get@_this+1,w,c
  7189  00448E  22DA               	addwfc	fsr2h,f,c
  7190  004490  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  7191  004494  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  7192  004498  0E00               	movlw	0
  7193  00449A  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  7194  00449C  0EC8               	movlw	200
  7195  00449E  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  7196  0044A0  EC38  F026         	call	_UART_buff_modulo_inc	;wreg free
  7197  0044A4  EE20 F0CA          	lfsr	2,202
  7198  0044A8  5021               	movf	UART_buff_get@_this,w,c
  7199  0044AA  26D9               	addwf	fsr2l,f,c
  7200  0044AC  5022               	movf	UART_buff_get@_this+1,w,c
  7201  0044AE  22DA               	addwfc	fsr2h,f,c
  7202  0044B0  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7203  0044B4  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7204                           
  7205                           ;UART.c: 84: --_this->count;
  7206  0044B8  EE20 F0CC          	lfsr	2,204
  7207  0044BC  5021               	movf	UART_buff_get@_this,w,c
  7208  0044BE  26D9               	addwf	fsr2l,f,c
  7209  0044C0  5022               	movf	UART_buff_get@_this+1,w,c
  7210  0044C2  22DA               	addwfc	fsr2h,f,c
  7211  0044C4  06DE               	decf	postinc2,f,c
  7212  0044C6  0E00               	movlw	0
  7213  0044C8  5ADD               	subwfb	postdec2,f,c
  7214                           
  7215                           ;UART.c: 85: } else {
  7216  0044CA  D002               	goto	l563
  7217  0044CC                     l5728:
  7218                           
  7219                           ;UART.c: 86: c = 0;
  7220  0044CC  0E00               	movlw	0
  7221  0044CE  6E25               	movwf	UART_buff_get@c,c
  7222  0044D0                     l563:
  7223                           
  7224                           ;UART.c: 87: }
  7225                           ;UART.c: 88: return (c);
  7226  0044D0  5025               	movf	UART_buff_get@c,w,c
  7227  0044D2  0012               	return	
  7228  0044D4  0012               	return		;funcret
  7229  0044D6                     __end_of_UART_buff_get:
  7230                           	opt stack 0
  7231                           tosu	equ	0xFFF
  7232                           tosh	equ	0xFFE
  7233                           tosl	equ	0xFFD
  7234                           pclath	equ	0xFFA
  7235                           tblptru	equ	0xFF8
  7236                           tblptrh	equ	0xFF7
  7237                           tblptrl	equ	0xFF6
  7238                           tablat	equ	0xFF5
  7239                           prodh	equ	0xFF4
  7240                           prodl	equ	0xFF3
  7241                           intcon	equ	0xFF2
  7242                           postinc0	equ	0xFEE
  7243                           wreg	equ	0xFE8
  7244                           indf2	equ	0xFDF
  7245                           postinc2	equ	0xFDE
  7246                           postdec2	equ	0xFDD
  7247                           plusw2	equ	0xFDB
  7248                           fsr2h	equ	0xFDA
  7249                           fsr2l	equ	0xFD9
  7250                           status	equ	0xFD8
  7251                           
  7252 ;; *************** function _UART_buff_modulo_inc *****************
  7253 ;; Defined at:
  7254 ;;		line 104 in file "UART.c"
  7255 ;; Parameters:    Size  Location     Type
  7256 ;;  value           2   26[COMRAM] const unsigned int 
  7257 ;;  modulus         2   28[COMRAM] const unsigned int 
  7258 ;; Auto vars:     Size  Location     Type
  7259 ;;  my_value        2   30[COMRAM] unsigned int 
  7260 ;; Return value:  Size  Location     Type
  7261 ;;                  2   26[COMRAM] unsigned int 
  7262 ;; Registers used:
  7263 ;;		wreg, status,2, status,0
  7264 ;; Tracked objects:
  7265 ;;		On entry : 0/0
  7266 ;;		On exit  : 0/0
  7267 ;;		Unchanged: 0/0
  7268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7269 ;;      Params:         4       0       0       0       0       0       0
  7270 ;;      Locals:         2       0       0       0       0       0       0
  7271 ;;      Temps:          0       0       0       0       0       0       0
  7272 ;;      Totals:         6       0       0       0       0       0       0
  7273 ;;Total ram usage:        6 bytes
  7274 ;; Hardware stack levels used:    1
  7275 ;; Hardware stack levels required when called:    4
  7276 ;; This function calls:
  7277 ;;		Nothing
  7278 ;; This function is called by:
  7279 ;;		_UART_buff_put
  7280 ;;		_UART_buff_get
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           	psect	text18
  7285  004C70                     __ptext18:
  7286                           	opt stack 0
  7287  004C70                     _UART_buff_modulo_inc:
  7288                           	opt stack 22
  7289                           
  7290                           ;UART.c: 105: unsigned int my_value = value + 1;
  7291                           
  7292                           ;incstack = 0
  7293  004C70  0E01               	movlw	1
  7294  004C72  241B               	addwf	UART_buff_modulo_inc@value,w,c
  7295  004C74  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  7296  004C76  0E00               	movlw	0
  7297  004C78  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  7298  004C7A  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  7299                           
  7300                           ;UART.c: 106: if (my_value >= modulus) {
  7301  004C7C  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  7302  004C7E  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  7303  004C80  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  7304  004C82  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  7305  004C84  A0D8               	btfss	status,0,c
  7306  004C86  D005               	goto	l5716
  7307                           
  7308                           ;UART.c: 107: my_value = 0;
  7309  004C88  0E00               	movlw	0
  7310  004C8A  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  7311  004C8C  0E00               	movlw	0
  7312  004C8E  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  7313  004C90  D000               	goto	l5716
  7314  004C92                     l5716:
  7315                           
  7316                           ;UART.c: 108: }
  7317                           ;UART.c: 109: return (my_value);
  7318  004C92  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  7319  004C96  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  7320  004C9A  0012               	return	
  7321  004C9C  0012               	return		;funcret
  7322  004C9E                     __end_of_UART_buff_modulo_inc:
  7323                           	opt stack 0
  7324                           tosu	equ	0xFFF
  7325                           tosh	equ	0xFFE
  7326                           tosl	equ	0xFFD
  7327                           pclath	equ	0xFFA
  7328                           tblptru	equ	0xFF8
  7329                           tblptrh	equ	0xFF7
  7330                           tblptrl	equ	0xFF6
  7331                           tablat	equ	0xFF5
  7332                           prodh	equ	0xFF4
  7333                           prodl	equ	0xFF3
  7334                           intcon	equ	0xFF2
  7335                           postinc0	equ	0xFEE
  7336                           wreg	equ	0xFE8
  7337                           indf2	equ	0xFDF
  7338                           postinc2	equ	0xFDE
  7339                           postdec2	equ	0xFDD
  7340                           plusw2	equ	0xFDB
  7341                           fsr2h	equ	0xFDA
  7342                           fsr2l	equ	0xFD9
  7343                           status	equ	0xFD8
  7344                           
  7345 ;; *************** function _isdigit *****************
  7346 ;; Defined at:
  7347 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  7348 ;; Parameters:    Size  Location     Type
  7349 ;;  c               1    wreg     unsigned char 
  7350 ;; Auto vars:     Size  Location     Type
  7351 ;;  c               1   28[COMRAM] unsigned char 
  7352 ;; Return value:  Size  Location     Type
  7353 ;;		None               void
  7354 ;; Registers used:
  7355 ;;		wreg, status,2, status,0
  7356 ;; Tracked objects:
  7357 ;;		On entry : 0/0
  7358 ;;		On exit  : 0/0
  7359 ;;		Unchanged: 0/0
  7360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7361 ;;      Params:         0       0       0       0       0       0       0
  7362 ;;      Locals:         2       0       0       0       0       0       0
  7363 ;;      Temps:          1       0       0       0       0       0       0
  7364 ;;      Totals:         3       0       0       0       0       0       0
  7365 ;;Total ram usage:        3 bytes
  7366 ;; Hardware stack levels used:    1
  7367 ;; Hardware stack levels required when called:    4
  7368 ;; This function calls:
  7369 ;;		Nothing
  7370 ;; This function is called by:
  7371 ;;		_printf
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           	psect	text19
  7376  004D44                     __ptext19:
  7377                           	opt stack 0
  7378  004D44                     _isdigit:
  7379                           	opt stack 25
  7380                           
  7381                           ;incstack = 0
  7382                           ;isdigit@c stored from wreg
  7383  004D44  6E1D               	movwf	isdigit@c,c
  7384  004D46  0E00               	movlw	0
  7385  004D48  6E1C               	movwf	_isdigit$1644,c
  7386  004D4A  0E3A               	movlw	58
  7387  004D4C  601D               	cpfslt	isdigit@c,c
  7388  004D4E  D006               	goto	l6546
  7389  004D50  0E2F               	movlw	47
  7390  004D52  641D               	cpfsgt	isdigit@c,c
  7391  004D54  D003               	goto	l6546
  7392  004D56  0E01               	movlw	1
  7393  004D58  6E1C               	movwf	_isdigit$1644,c
  7394  004D5A  D000               	goto	l6546
  7395  004D5C                     l6546:
  7396  004D5C  C01C  F01B         	movff	_isdigit$1644,??_isdigit
  7397  004D60  301B               	rrcf	??_isdigit,w,c
  7398  004D62  0012               	return	
  7399  004D64  0012               	return		;funcret
  7400  004D66                     __end_of_isdigit:
  7401                           	opt stack 0
  7402                           tosu	equ	0xFFF
  7403                           tosh	equ	0xFFE
  7404                           tosl	equ	0xFFD
  7405                           pclath	equ	0xFFA
  7406                           tblptru	equ	0xFF8
  7407                           tblptrh	equ	0xFF7
  7408                           tblptrl	equ	0xFF6
  7409                           tablat	equ	0xFF5
  7410                           prodh	equ	0xFF4
  7411                           prodl	equ	0xFF3
  7412                           intcon	equ	0xFF2
  7413                           postinc0	equ	0xFEE
  7414                           wreg	equ	0xFE8
  7415                           indf2	equ	0xFDF
  7416                           postinc2	equ	0xFDE
  7417                           postdec2	equ	0xFDD
  7418                           plusw2	equ	0xFDB
  7419                           fsr2h	equ	0xFDA
  7420                           fsr2l	equ	0xFD9
  7421                           status	equ	0xFD8
  7422                           
  7423 ;; *************** function _fround *****************
  7424 ;; Defined at:
  7425 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;  prec            1    wreg     unsigned char 
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;  prec            1   41[BANK0 ] unsigned char 
  7430 ;; Return value:  Size  Location     Type
  7431 ;;                  3   32[BANK0 ] unsigned char 
  7432 ;; Registers used:
  7433 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7434 ;; Tracked objects:
  7435 ;;		On entry : 0/0
  7436 ;;		On exit  : 0/0
  7437 ;;		Unchanged: 0/0
  7438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7439 ;;      Params:         0       3       0       0       0       0       0
  7440 ;;      Locals:         0       7       0       0       0       0       0
  7441 ;;      Temps:          0       0       0       0       0       0       0
  7442 ;;      Totals:         0      10       0       0       0       0       0
  7443 ;;Total ram usage:       10 bytes
  7444 ;; Hardware stack levels used:    1
  7445 ;; Hardware stack levels required when called:    6
  7446 ;; This function calls:
  7447 ;;		___awdiv
  7448 ;;		___awmod
  7449 ;;		___ftmul
  7450 ;;		___wmul
  7451 ;; This function is called by:
  7452 ;;		_printf
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455                           
  7456                           	psect	text20
  7457  002448                     __ptext20:
  7458                           	opt stack 0
  7459  002448                     _fround:
  7460                           	opt stack 23
  7461                           
  7462                           ;incstack = 0
  7463                           ;fround@prec stored from wreg
  7464  002448  0100               	movlb	0	; () banked
  7465  00244A  6F89               	movwf	fround@prec& (0+255),b
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;doprnt.c: 413: if(prec>=110)
  7469  00244C  0E6D               	movlw	109
  7470  00244E  0100               	movlb	0	; () banked
  7471  002450  6589               	cpfsgt	fround@prec& (0+255),b
  7472  002452  D0B0               	goto	l6488
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7476  002454  0E00               	movlw	0
  7477  002456  0100               	movlb	0	; () banked
  7478  002458  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7479  00245A  0E03               	movlw	3
  7480  00245C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7481  00245E  0E00               	movlw	0
  7482  002460  6E24               	movwf	___awdiv@divisor+1,c
  7483  002462  0E0A               	movlw	10
  7484  002464  6E23               	movwf	___awdiv@divisor,c
  7485  002466  0E00               	movlw	0
  7486  002468  6E1E               	movwf	___awmod@divisor+1,c
  7487  00246A  0E64               	movlw	100
  7488  00246C  6E1D               	movwf	___awmod@divisor,c
  7489  00246E  C089  F01B         	movff	fround@prec,___awmod@dividend
  7490  002472  6A1C               	clrf	___awmod@dividend+1,c
  7491  002474  ECCC  F023         	call	___awmod	;wreg free
  7492  002478  C01B  F021         	movff	?___awmod,___awdiv@dividend
  7493  00247C  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  7494  002480  ECD6  F021         	call	___awdiv	;wreg free
  7495  002484  0E09               	movlw	9
  7496  002486  2421               	addwf	?___awdiv,w,c
  7497  002488  0100               	movlb	0	; () banked
  7498  00248A  6F60               	movwf	___wmul@multiplier& (0+255),b
  7499  00248C  0E00               	movlw	0
  7500  00248E  2022               	addwfc	?___awdiv+1,w,c
  7501  002490  0100               	movlb	0	; () banked
  7502  002492  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  7503  002494  ECEE  F025         	call	___wmul	;wreg free
  7504  002498  0E29               	movlw	low __npowers_
  7505  00249A  0100               	movlb	0	; () banked
  7506  00249C  2560               	addwf	?___wmul& (0+255),w,b
  7507  00249E  6EF6               	movwf	tblptrl,c
  7508  0024A0  0E06               	movlw	high __npowers_
  7509  0024A2  0100               	movlb	0	; () banked
  7510  0024A4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7511  0024A6  6EF7               	movwf	tblptrh,c
  7512  0024A8                     	if	0	;There are less than 3 active tblptr bytes
  7513  0024A8                     	endif
  7514  0024A8  0009               	tblrd		*+
  7515  0024AA  CFF5 F074          	movff	tablat,___ftmul@f2
  7516  0024AE  0009               	tblrd		*+
  7517  0024B0  CFF5 F075          	movff	tablat,___ftmul@f2+1
  7518  0024B4  000A               	tblrd		*-
  7519  0024B6  CFF5 F076          	movff	tablat,___ftmul@f2+2
  7520  0024BA  0E00               	movlw	0
  7521  0024BC  6E24               	movwf	___awdiv@divisor+1,c
  7522  0024BE  0E64               	movlw	100
  7523  0024C0  6E23               	movwf	___awdiv@divisor,c
  7524  0024C2  C089  F021         	movff	fround@prec,___awdiv@dividend
  7525  0024C6  6A22               	clrf	___awdiv@dividend+1,c
  7526  0024C8  ECD6  F021         	call	___awdiv	;wreg free
  7527  0024CC  0E12               	movlw	18
  7528  0024CE  2421               	addwf	?___awdiv,w,c
  7529  0024D0  0100               	movlb	0	; () banked
  7530  0024D2  6F60               	movwf	___wmul@multiplier& (0+255),b
  7531  0024D4  0E00               	movlw	0
  7532  0024D6  2022               	addwfc	?___awdiv+1,w,c
  7533  0024D8  0100               	movlb	0	; () banked
  7534  0024DA  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  7535  0024DC  0E00               	movlw	0
  7536  0024DE  0100               	movlb	0	; () banked
  7537  0024E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7538  0024E2  0E03               	movlw	3
  7539  0024E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7540  0024E6  ECEE  F025         	call	___wmul	;wreg free
  7541  0024EA  0E29               	movlw	low __npowers_
  7542  0024EC  0100               	movlb	0	; () banked
  7543  0024EE  2560               	addwf	?___wmul& (0+255),w,b
  7544  0024F0  6EF6               	movwf	tblptrl,c
  7545  0024F2  0E06               	movlw	high __npowers_
  7546  0024F4  0100               	movlb	0	; () banked
  7547  0024F6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7548  0024F8  6EF7               	movwf	tblptrh,c
  7549  0024FA                     	if	0	;There are less than 3 active tblptr bytes
  7550  0024FA                     	endif
  7551  0024FA  0009               	tblrd		*+
  7552  0024FC  CFF5 F071          	movff	tablat,___ftmul@f1
  7553  002500  0009               	tblrd		*+
  7554  002502  CFF5 F072          	movff	tablat,___ftmul@f1+1
  7555  002506  000A               	tblrd		*-
  7556  002508  CFF5 F073          	movff	tablat,___ftmul@f1+2
  7557  00250C  EC0E  F018         	call	___ftmul	;wreg free
  7558  002510  C071  F086         	movff	?___ftmul,_fround$2053
  7559  002514  C072  F087         	movff	?___ftmul+1,_fround$2053+1
  7560  002518  C073  F088         	movff	?___ftmul+2,_fround$2053+2
  7561                           
  7562                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7563  00251C  0E00               	movlw	0
  7564  00251E  0100               	movlb	0	; () banked
  7565  002520  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7566  002522  0E03               	movlw	3
  7567  002524  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7568  002526  0E00               	movlw	0
  7569  002528  6E1E               	movwf	___awmod@divisor+1,c
  7570  00252A  0E0A               	movlw	10
  7571  00252C  6E1D               	movwf	___awmod@divisor,c
  7572  00252E  C089  F01B         	movff	fround@prec,___awmod@dividend
  7573  002532  6A1C               	clrf	___awmod@dividend+1,c
  7574  002534  ECCC  F023         	call	___awmod	;wreg free
  7575  002538  C01B  F060         	movff	?___awmod,___wmul@multiplier
  7576  00253C  C01C  F061         	movff	?___awmod+1,___wmul@multiplier+1
  7577  002540  ECEE  F025         	call	___wmul	;wreg free
  7578  002544  0E29               	movlw	low __npowers_
  7579  002546  0100               	movlb	0	; () banked
  7580  002548  2560               	addwf	?___wmul& (0+255),w,b
  7581  00254A  6EF6               	movwf	tblptrl,c
  7582  00254C  0E06               	movlw	high __npowers_
  7583  00254E  0100               	movlb	0	; () banked
  7584  002550  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7585  002552  6EF7               	movwf	tblptrh,c
  7586  002554                     	if	0	;There are less than 3 active tblptr bytes
  7587  002554                     	endif
  7588  002554  0009               	tblrd		*+
  7589  002556  CFF5 F074          	movff	tablat,___ftmul@f2
  7590  00255A  0009               	tblrd		*+
  7591  00255C  CFF5 F075          	movff	tablat,___ftmul@f2+1
  7592  002560  000A               	tblrd		*-
  7593  002562  CFF5 F076          	movff	tablat,___ftmul@f2+2
  7594  002566  C086  F071         	movff	_fround$2053,___ftmul@f1
  7595  00256A  C087  F072         	movff	_fround$2053+1,___ftmul@f1+1
  7596  00256E  C088  F073         	movff	_fround$2053+2,___ftmul@f1+2
  7597  002572  EC0E  F018         	call	___ftmul	;wreg free
  7598  002576  C071  F083         	movff	?___ftmul,_fround$2054
  7599  00257A  C072  F084         	movff	?___ftmul+1,_fround$2054+1
  7600  00257E  C073  F085         	movff	?___ftmul+2,_fround$2054+2
  7601                           
  7602                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7603  002582  C083  F071         	movff	_fround$2054,___ftmul@f1
  7604  002586  C084  F072         	movff	_fround$2054+1,___ftmul@f1+1
  7605  00258A  C085  F073         	movff	_fround$2054+2,___ftmul@f1+2
  7606  00258E  0E00               	movlw	0
  7607  002590  0100               	movlb	0	; () banked
  7608  002592  6F74               	movwf	___ftmul@f2& (0+255),b
  7609  002594  0E00               	movlw	0
  7610  002596  0100               	movlb	0	; () banked
  7611  002598  6F75               	movwf	(___ftmul@f2+1)& (0+255),b
  7612  00259A  0E3F               	movlw	63
  7613  00259C  0100               	movlb	0	; () banked
  7614  00259E  6F76               	movwf	(___ftmul@f2+2)& (0+255),b
  7615  0025A0  EC0E  F018         	call	___ftmul	;wreg free
  7616  0025A4  C071  F080         	movff	?___ftmul,?_fround
  7617  0025A8  C072  F081         	movff	?___ftmul+1,?_fround+1
  7618  0025AC  C073  F082         	movff	?___ftmul+2,?_fround+2
  7619  0025B0  0012               	return	
  7620  0025B2  D06E               	goto	l6496
  7621  0025B4                     l6488:
  7622                           
  7623                           ;doprnt.c: 415: else if(prec > 10)
  7624  0025B4  0E0A               	movlw	10
  7625  0025B6  0100               	movlb	0	; () banked
  7626  0025B8  6589               	cpfsgt	fround@prec& (0+255),b
  7627  0025BA  D06A               	goto	l6496
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7631  0025BC  0E00               	movlw	0
  7632  0025BE  0100               	movlb	0	; () banked
  7633  0025C0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7634  0025C2  0E03               	movlw	3
  7635  0025C4  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7636  0025C6  0E00               	movlw	0
  7637  0025C8  6E1E               	movwf	___awmod@divisor+1,c
  7638  0025CA  0E0A               	movlw	10
  7639  0025CC  6E1D               	movwf	___awmod@divisor,c
  7640  0025CE  C089  F01B         	movff	fround@prec,___awmod@dividend
  7641  0025D2  6A1C               	clrf	___awmod@dividend+1,c
  7642  0025D4  ECCC  F023         	call	___awmod	;wreg free
  7643  0025D8  C01B  F060         	movff	?___awmod,___wmul@multiplier
  7644  0025DC  C01C  F061         	movff	?___awmod+1,___wmul@multiplier+1
  7645  0025E0  ECEE  F025         	call	___wmul	;wreg free
  7646  0025E4  0E29               	movlw	low __npowers_
  7647  0025E6  0100               	movlb	0	; () banked
  7648  0025E8  2560               	addwf	?___wmul& (0+255),w,b
  7649  0025EA  6EF6               	movwf	tblptrl,c
  7650  0025EC  0E06               	movlw	high __npowers_
  7651  0025EE  0100               	movlb	0	; () banked
  7652  0025F0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7653  0025F2  6EF7               	movwf	tblptrh,c
  7654  0025F4                     	if	0	;There are less than 3 active tblptr bytes
  7655  0025F4                     	endif
  7656  0025F4  0009               	tblrd		*+
  7657  0025F6  CFF5 F074          	movff	tablat,___ftmul@f2
  7658  0025FA  0009               	tblrd		*+
  7659  0025FC  CFF5 F075          	movff	tablat,___ftmul@f2+1
  7660  002600  000A               	tblrd		*-
  7661  002602  CFF5 F076          	movff	tablat,___ftmul@f2+2
  7662  002606  0E00               	movlw	0
  7663  002608  6E24               	movwf	___awdiv@divisor+1,c
  7664  00260A  0E0A               	movlw	10
  7665  00260C  6E23               	movwf	___awdiv@divisor,c
  7666  00260E  C089  F021         	movff	fround@prec,___awdiv@dividend
  7667  002612  6A22               	clrf	___awdiv@dividend+1,c
  7668  002614  ECD6  F021         	call	___awdiv	;wreg free
  7669  002618  0E09               	movlw	9
  7670  00261A  2421               	addwf	?___awdiv,w,c
  7671  00261C  0100               	movlb	0	; () banked
  7672  00261E  6F60               	movwf	___wmul@multiplier& (0+255),b
  7673  002620  0E00               	movlw	0
  7674  002622  2022               	addwfc	?___awdiv+1,w,c
  7675  002624  0100               	movlb	0	; () banked
  7676  002626  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  7677  002628  0E00               	movlw	0
  7678  00262A  0100               	movlb	0	; () banked
  7679  00262C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7680  00262E  0E03               	movlw	3
  7681  002630  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7682  002632  ECEE  F025         	call	___wmul	;wreg free
  7683  002636  0E29               	movlw	low __npowers_
  7684  002638  0100               	movlb	0	; () banked
  7685  00263A  2560               	addwf	?___wmul& (0+255),w,b
  7686  00263C  6EF6               	movwf	tblptrl,c
  7687  00263E  0E06               	movlw	high __npowers_
  7688  002640  0100               	movlb	0	; () banked
  7689  002642  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7690  002644  6EF7               	movwf	tblptrh,c
  7691  002646                     	if	0	;There are less than 3 active tblptr bytes
  7692  002646                     	endif
  7693  002646  0009               	tblrd		*+
  7694  002648  CFF5 F071          	movff	tablat,___ftmul@f1
  7695  00264C  0009               	tblrd		*+
  7696  00264E  CFF5 F072          	movff	tablat,___ftmul@f1+1
  7697  002652  000A               	tblrd		*-
  7698  002654  CFF5 F073          	movff	tablat,___ftmul@f1+2
  7699  002658  EC0E  F018         	call	___ftmul	;wreg free
  7700  00265C  C071  F086         	movff	?___ftmul,_fround$2053
  7701  002660  C072  F087         	movff	?___ftmul+1,_fround$2053+1
  7702  002664  C073  F088         	movff	?___ftmul+2,_fround$2053+2
  7703                           
  7704                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7705  002668  C086  F071         	movff	_fround$2053,___ftmul@f1
  7706  00266C  C087  F072         	movff	_fround$2053+1,___ftmul@f1+1
  7707  002670  C088  F073         	movff	_fround$2053+2,___ftmul@f1+2
  7708  002674  0E00               	movlw	0
  7709  002676  0100               	movlb	0	; () banked
  7710  002678  6F74               	movwf	___ftmul@f2& (0+255),b
  7711  00267A  0E00               	movlw	0
  7712  00267C  0100               	movlb	0	; () banked
  7713  00267E  6F75               	movwf	(___ftmul@f2+1)& (0+255),b
  7714  002680  0E3F               	movlw	63
  7715  002682  0100               	movlb	0	; () banked
  7716  002684  6F76               	movwf	(___ftmul@f2+2)& (0+255),b
  7717  002686  EC0E  F018         	call	___ftmul	;wreg free
  7718  00268A  D78C               	goto	L4
  7719  00268C  0012               	return	
  7720  00268E  D000               	goto	l6496
  7721  002690                     l6496:
  7722                           
  7723                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7724  002690  0100               	movlb	0	; () banked
  7725  002692  5189               	movf	fround@prec& (0+255),w,b
  7726  002694  0D03               	mullw	3
  7727  002696  0E29               	movlw	low __npowers_
  7728  002698  24F3               	addwf	prodl,w,c
  7729  00269A  6EF6               	movwf	tblptrl,c
  7730  00269C  0E06               	movlw	high __npowers_
  7731  00269E  20F4               	addwfc	prodh,w,c
  7732  0026A0  6EF7               	movwf	tblptrh,c
  7733  0026A2                     	if	0	;There are less than 3 active tblptr bytes
  7734  0026A2                     	endif
  7735  0026A2  0009               	tblrd		*+
  7736  0026A4  CFF5 F071          	movff	tablat,___ftmul@f1
  7737  0026A8  0009               	tblrd		*+
  7738  0026AA  CFF5 F072          	movff	tablat,___ftmul@f1+1
  7739  0026AE  000A               	tblrd		*-
  7740  0026B0  CFF5 F073          	movff	tablat,___ftmul@f1+2
  7741  0026B4  0E00               	movlw	0
  7742  0026B6  0100               	movlb	0	; () banked
  7743  0026B8  6F74               	movwf	___ftmul@f2& (0+255),b
  7744  0026BA  0E00               	movlw	0
  7745  0026BC  0100               	movlb	0	; () banked
  7746  0026BE  6F75               	movwf	(___ftmul@f2+1)& (0+255),b
  7747  0026C0  0E3F               	movlw	63
  7748  0026C2  0100               	movlb	0	; () banked
  7749  0026C4  6F76               	movwf	(___ftmul@f2+2)& (0+255),b
  7750  0026C6  EC0E  F018         	call	___ftmul	;wreg free
  7751  0026CA  C071  F080         	movff	?___ftmul,?_fround
  7752  0026CE  C072  F081         	movff	?___ftmul+1,?_fround+1
  7753  0026D2  C073  F082         	movff	?___ftmul+2,?_fround+2
  7754  0026D6  0012               	return	
  7755  0026D8  0012               	return		;funcret
  7756  0026DA                     __end_of_fround:
  7757                           	opt stack 0
  7758                           tosu	equ	0xFFF
  7759                           tosh	equ	0xFFE
  7760                           tosl	equ	0xFFD
  7761                           pclath	equ	0xFFA
  7762                           tblptru	equ	0xFF8
  7763                           tblptrh	equ	0xFF7
  7764                           tblptrl	equ	0xFF6
  7765                           tablat	equ	0xFF5
  7766                           prodh	equ	0xFF4
  7767                           prodl	equ	0xFF3
  7768                           intcon	equ	0xFF2
  7769                           postinc0	equ	0xFEE
  7770                           wreg	equ	0xFE8
  7771                           indf2	equ	0xFDF
  7772                           postinc2	equ	0xFDE
  7773                           postdec2	equ	0xFDD
  7774                           plusw2	equ	0xFDB
  7775                           fsr2h	equ	0xFDA
  7776                           fsr2l	equ	0xFD9
  7777                           status	equ	0xFD8
  7778                           
  7779 ;; *************** function ___awmod *****************
  7780 ;; Defined at:
  7781 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;  dividend        2   26[COMRAM] int 
  7784 ;;  divisor         2   28[COMRAM] int 
  7785 ;; Auto vars:     Size  Location     Type
  7786 ;;  sign            1   31[COMRAM] unsigned char 
  7787 ;;  counter         1   30[COMRAM] unsigned char 
  7788 ;; Return value:  Size  Location     Type
  7789 ;;                  2   26[COMRAM] int 
  7790 ;; Registers used:
  7791 ;;		wreg, status,2, status,0
  7792 ;; Tracked objects:
  7793 ;;		On entry : 0/0
  7794 ;;		On exit  : 0/0
  7795 ;;		Unchanged: 0/0
  7796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7797 ;;      Params:         4       0       0       0       0       0       0
  7798 ;;      Locals:         2       0       0       0       0       0       0
  7799 ;;      Temps:          0       0       0       0       0       0       0
  7800 ;;      Totals:         6       0       0       0       0       0       0
  7801 ;;Total ram usage:        6 bytes
  7802 ;; Hardware stack levels used:    1
  7803 ;; Hardware stack levels required when called:    4
  7804 ;; This function calls:
  7805 ;;		Nothing
  7806 ;; This function is called by:
  7807 ;;		_fround
  7808 ;;		_scale
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           	psect	text21
  7813  004798                     __ptext21:
  7814                           	opt stack 0
  7815  004798                     ___awmod:
  7816                           	opt stack 24
  7817                           
  7818                           ;incstack = 0
  7819  004798  0E00               	movlw	0
  7820  00479A  6E20               	movwf	___awmod@sign,c
  7821  00479C  AE1C               	btfss	___awmod@dividend+1,7,c
  7822  00479E  D007               	goto	l6096
  7823  0047A0  6C1B               	negf	___awmod@dividend,c
  7824  0047A2  1E1C               	comf	___awmod@dividend+1,f,c
  7825  0047A4  B0D8               	btfsc	status,0,c
  7826  0047A6  2A1C               	incf	___awmod@dividend+1,f,c
  7827  0047A8  0E01               	movlw	1
  7828  0047AA  6E20               	movwf	___awmod@sign,c
  7829  0047AC  D000               	goto	l6096
  7830  0047AE                     l6096:
  7831  0047AE  AE1E               	btfss	___awmod@divisor+1,7,c
  7832  0047B0  D005               	goto	l6100
  7833  0047B2  6C1D               	negf	___awmod@divisor,c
  7834  0047B4  1E1E               	comf	___awmod@divisor+1,f,c
  7835  0047B6  B0D8               	btfsc	status,0,c
  7836  0047B8  2A1E               	incf	___awmod@divisor+1,f,c
  7837  0047BA  D000               	goto	l6100
  7838  0047BC                     l6100:
  7839  0047BC  501D               	movf	___awmod@divisor,w,c
  7840  0047BE  101E               	iorwf	___awmod@divisor+1,w,c
  7841  0047C0  B4D8               	btfsc	status,2,c
  7842  0047C2  D01D               	goto	l6116
  7843  0047C4  0E01               	movlw	1
  7844  0047C6  6E1F               	movwf	___awmod@counter,c
  7845  0047C8  D005               	goto	l6106
  7846  0047CA                     l6104:
  7847  0047CA  90D8               	bcf	status,0,c
  7848  0047CC  361D               	rlcf	___awmod@divisor,f,c
  7849  0047CE  361E               	rlcf	___awmod@divisor+1,f,c
  7850  0047D0  2A1F               	incf	___awmod@counter,f,c
  7851  0047D2  D000               	goto	l6106
  7852  0047D4                     l6106:
  7853  0047D4  BE1E               	btfsc	___awmod@divisor+1,7,c
  7854  0047D6  D002               	goto	l6108
  7855  0047D8  D7F8               	goto	l6104
  7856  0047DA  D000               	goto	l6108
  7857  0047DC                     l6108:
  7858  0047DC  501D               	movf	___awmod@divisor,w,c
  7859  0047DE  5C1B               	subwf	___awmod@dividend,w,c
  7860  0047E0  501E               	movf	___awmod@divisor+1,w,c
  7861  0047E2  581C               	subwfb	___awmod@dividend+1,w,c
  7862  0047E4  A0D8               	btfss	status,0,c
  7863  0047E6  D005               	goto	l6112
  7864  0047E8  501D               	movf	___awmod@divisor,w,c
  7865  0047EA  5E1B               	subwf	___awmod@dividend,f,c
  7866  0047EC  501E               	movf	___awmod@divisor+1,w,c
  7867  0047EE  5A1C               	subwfb	___awmod@dividend+1,f,c
  7868  0047F0  D000               	goto	l6112
  7869  0047F2                     l6112:
  7870  0047F2  90D8               	bcf	status,0,c
  7871  0047F4  321E               	rrcf	___awmod@divisor+1,f,c
  7872  0047F6  321D               	rrcf	___awmod@divisor,f,c
  7873  0047F8  2E1F               	decfsz	___awmod@counter,f,c
  7874  0047FA  D7F0               	goto	l6108
  7875  0047FC  D000               	goto	l6116
  7876  0047FE                     l6116:
  7877  0047FE  5020               	movf	___awmod@sign,w,c
  7878  004800  B4D8               	btfsc	status,2,c
  7879  004802  D005               	goto	l6120
  7880  004804  6C1B               	negf	___awmod@dividend,c
  7881  004806  1E1C               	comf	___awmod@dividend+1,f,c
  7882  004808  B0D8               	btfsc	status,0,c
  7883  00480A  2A1C               	incf	___awmod@dividend+1,f,c
  7884  00480C  D000               	goto	l6120
  7885  00480E                     l6120:
  7886  00480E  C01B  F01B         	movff	___awmod@dividend,?___awmod
  7887  004812  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
  7888  004816  0012               	return	
  7889  004818  0012               	return		;funcret
  7890  00481A                     __end_of___awmod:
  7891                           	opt stack 0
  7892                           tosu	equ	0xFFF
  7893                           tosh	equ	0xFFE
  7894                           tosl	equ	0xFFD
  7895                           pclath	equ	0xFFA
  7896                           tblptru	equ	0xFF8
  7897                           tblptrh	equ	0xFF7
  7898                           tblptrl	equ	0xFF6
  7899                           tablat	equ	0xFF5
  7900                           prodh	equ	0xFF4
  7901                           prodl	equ	0xFF3
  7902                           intcon	equ	0xFF2
  7903                           postinc0	equ	0xFEE
  7904                           wreg	equ	0xFE8
  7905                           indf2	equ	0xFDF
  7906                           postinc2	equ	0xFDE
  7907                           postdec2	equ	0xFDD
  7908                           plusw2	equ	0xFDB
  7909                           fsr2h	equ	0xFDA
  7910                           fsr2l	equ	0xFD9
  7911                           status	equ	0xFD8
  7912                           
  7913 ;; *************** function __tdiv_to_l_ *****************
  7914 ;; Defined at:
  7915 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;  f1              3   26[COMRAM] float 
  7918 ;;  f2              3   29[COMRAM] float 
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;  quot            4   35[COMRAM] unsigned long 
  7921 ;;  exp1            1   40[COMRAM] unsigned char 
  7922 ;;  cntr            1   39[COMRAM] unsigned char 
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  4   26[COMRAM] unsigned long 
  7925 ;; Registers used:
  7926 ;;		wreg, status,2, status,0
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7932 ;;      Params:         6       0       0       0       0       0       0
  7933 ;;      Locals:         6       0       0       0       0       0       0
  7934 ;;      Temps:          3       0       0       0       0       0       0
  7935 ;;      Totals:        15       0       0       0       0       0       0
  7936 ;;Total ram usage:       15 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    4
  7939 ;; This function calls:
  7940 ;;		Nothing
  7941 ;; This function is called by:
  7942 ;;		_printf
  7943 ;; This function uses a non-reentrant model
  7944 ;;
  7945                           
  7946                           	psect	text22
  7947  00357A                     __ptext22:
  7948                           	opt stack 0
  7949  00357A                     __tdiv_to_l_:
  7950                           	opt stack 25
  7951                           
  7952                           ;incstack = 0
  7953  00357A  C01D  F021         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7954  00357E  6A22               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7955  003580  6A23               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7956  003582  341C               	rlcf	__tdiv_to_l_@f1+1,w,c
  7957  003584  3621               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7958  003586  E301               	bnc	u7871
  7959  003588  8022               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7960  00358A                     u7871:
  7961  00358A  5021               	movf	??__tdiv_to_l_,w,c
  7962  00358C  6E29               	movwf	__tdiv_to_l_@exp1,c
  7963  00358E  5029               	movf	__tdiv_to_l_@exp1,w,c
  7964  003590  A4D8               	btfss	status,2,c
  7965  003592  D009               	goto	l6556
  7966  003594  0E00               	movlw	0
  7967  003596  6E1B               	movwf	?__tdiv_to_l_,c
  7968  003598  0E00               	movlw	0
  7969  00359A  6E1C               	movwf	?__tdiv_to_l_+1,c
  7970  00359C  0E00               	movlw	0
  7971  00359E  6E1D               	movwf	?__tdiv_to_l_+2,c
  7972  0035A0  0E00               	movlw	0
  7973  0035A2  6E1E               	movwf	?__tdiv_to_l_+3,c
  7974  0035A4  0012               	return	
  7975  0035A6                     l6556:
  7976  0035A6  C020  F021         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7977  0035AA  6A22               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7978  0035AC  6A23               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7979  0035AE  341F               	rlcf	__tdiv_to_l_@f2+1,w,c
  7980  0035B0  3621               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7981  0035B2  E301               	bnc	u7891
  7982  0035B4  8022               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7983  0035B6                     u7891:
  7984  0035B6  5021               	movf	??__tdiv_to_l_,w,c
  7985  0035B8  6E28               	movwf	__tdiv_to_l_@cntr,c
  7986  0035BA  5028               	movf	__tdiv_to_l_@cntr,w,c
  7987  0035BC  A4D8               	btfss	status,2,c
  7988  0035BE  D009               	goto	l6562
  7989  0035C0  0E00               	movlw	0
  7990  0035C2  6E1B               	movwf	?__tdiv_to_l_,c
  7991  0035C4  0E00               	movlw	0
  7992  0035C6  6E1C               	movwf	?__tdiv_to_l_+1,c
  7993  0035C8  0E00               	movlw	0
  7994  0035CA  6E1D               	movwf	?__tdiv_to_l_+2,c
  7995  0035CC  0E00               	movlw	0
  7996  0035CE  6E1E               	movwf	?__tdiv_to_l_+3,c
  7997  0035D0  0012               	return	
  7998  0035D2                     l6562:
  7999  0035D2  8E1C               	bsf	__tdiv_to_l_@f1+1,7,c
  8000  0035D4  0EFF               	movlw	255
  8001  0035D6  161B               	andwf	__tdiv_to_l_@f1,f,c
  8002  0035D8  0EFF               	movlw	255
  8003  0035DA  161C               	andwf	__tdiv_to_l_@f1+1,f,c
  8004  0035DC  0E00               	movlw	0
  8005  0035DE  161D               	andwf	__tdiv_to_l_@f1+2,f,c
  8006  0035E0  8E1F               	bsf	__tdiv_to_l_@f2+1,7,c
  8007  0035E2  0EFF               	movlw	255
  8008  0035E4  161E               	andwf	__tdiv_to_l_@f2,f,c
  8009  0035E6  0EFF               	movlw	255
  8010  0035E8  161F               	andwf	__tdiv_to_l_@f2+1,f,c
  8011  0035EA  0E00               	movlw	0
  8012  0035EC  1620               	andwf	__tdiv_to_l_@f2+2,f,c
  8013  0035EE  0E00               	movlw	0
  8014  0035F0  6E24               	movwf	__tdiv_to_l_@quot,c
  8015  0035F2  0E00               	movlw	0
  8016  0035F4  6E25               	movwf	__tdiv_to_l_@quot+1,c
  8017  0035F6  0E00               	movlw	0
  8018  0035F8  6E26               	movwf	__tdiv_to_l_@quot+2,c
  8019  0035FA  0E00               	movlw	0
  8020  0035FC  6E27               	movwf	__tdiv_to_l_@quot+3,c
  8021  0035FE  0E7F               	movlw	127
  8022  003600  5E29               	subwf	__tdiv_to_l_@exp1,f,c
  8023  003602  5028               	movf	__tdiv_to_l_@cntr,w,c
  8024  003604  0F98               	addlw	152
  8025  003606  5E29               	subwf	__tdiv_to_l_@exp1,f,c
  8026  003608  0E18               	movlw	24
  8027  00360A  6E28               	movwf	__tdiv_to_l_@cntr,c
  8028  00360C                     l1345:
  8029  00360C  90D8               	bcf	status,0,c
  8030  00360E  3624               	rlcf	__tdiv_to_l_@quot,f,c
  8031  003610  3625               	rlcf	__tdiv_to_l_@quot+1,f,c
  8032  003612  3626               	rlcf	__tdiv_to_l_@quot+2,f,c
  8033  003614  3627               	rlcf	__tdiv_to_l_@quot+3,f,c
  8034  003616  501E               	movf	__tdiv_to_l_@f2,w,c
  8035  003618  5C1B               	subwf	__tdiv_to_l_@f1,w,c
  8036  00361A  501F               	movf	__tdiv_to_l_@f2+1,w,c
  8037  00361C  581C               	subwfb	__tdiv_to_l_@f1+1,w,c
  8038  00361E  5020               	movf	__tdiv_to_l_@f2+2,w,c
  8039  003620  581D               	subwfb	__tdiv_to_l_@f1+2,w,c
  8040  003622  A0D8               	btfss	status,0,c
  8041  003624  D007               	goto	l1346
  8042  003626  501E               	movf	__tdiv_to_l_@f2,w,c
  8043  003628  5E1B               	subwf	__tdiv_to_l_@f1,f,c
  8044  00362A  501F               	movf	__tdiv_to_l_@f2+1,w,c
  8045  00362C  5A1C               	subwfb	__tdiv_to_l_@f1+1,f,c
  8046  00362E  5020               	movf	__tdiv_to_l_@f2+2,w,c
  8047  003630  5A1D               	subwfb	__tdiv_to_l_@f1+2,f,c
  8048  003632  8024               	bsf	__tdiv_to_l_@quot,0,c
  8049  003634                     l1346:
  8050  003634  90D8               	bcf	status,0,c
  8051  003636  361B               	rlcf	__tdiv_to_l_@f1,f,c
  8052  003638  361C               	rlcf	__tdiv_to_l_@f1+1,f,c
  8053  00363A  361D               	rlcf	__tdiv_to_l_@f1+2,f,c
  8054  00363C  2E28               	decfsz	__tdiv_to_l_@cntr,f,c
  8055  00363E  D7E6               	goto	l1345
  8056  003640  D000               	goto	l6584
  8057  003642                     l6584:
  8058  003642  AE29               	btfss	__tdiv_to_l_@exp1,7,c
  8059  003644  D017               	goto	l6596
  8060  003646  5029               	movf	__tdiv_to_l_@exp1,w,c
  8061  003648  0A80               	xorlw	128
  8062  00364A  0F97               	addlw	151
  8063  00364C  B0D8               	btfsc	status,0,c
  8064  00364E  D00A               	goto	l6592
  8065  003650  0E00               	movlw	0
  8066  003652  6E1B               	movwf	?__tdiv_to_l_,c
  8067  003654  0E00               	movlw	0
  8068  003656  6E1C               	movwf	?__tdiv_to_l_+1,c
  8069  003658  0E00               	movlw	0
  8070  00365A  6E1D               	movwf	?__tdiv_to_l_+2,c
  8071  00365C  0E00               	movlw	0
  8072  00365E  6E1E               	movwf	?__tdiv_to_l_+3,c
  8073  003660  0012               	return	
  8074  003662  D000               	goto	l6592
  8075  003664                     l6592:
  8076  003664  90D8               	bcf	status,0,c
  8077  003666  3227               	rrcf	__tdiv_to_l_@quot+3,f,c
  8078  003668  3226               	rrcf	__tdiv_to_l_@quot+2,f,c
  8079  00366A  3225               	rrcf	__tdiv_to_l_@quot+1,f,c
  8080  00366C  3224               	rrcf	__tdiv_to_l_@quot,f,c
  8081  00366E  3E29               	incfsz	__tdiv_to_l_@exp1,f,c
  8082  003670  D7F9               	goto	l6592
  8083  003672  D017               	goto	l1352
  8084  003674                     l6596:
  8085  003674  0E17               	movlw	23
  8086  003676  6429               	cpfsgt	__tdiv_to_l_@exp1,c
  8087  003678  D011               	goto	l6604
  8088  00367A  0E00               	movlw	0
  8089  00367C  6E1B               	movwf	?__tdiv_to_l_,c
  8090  00367E  0E00               	movlw	0
  8091  003680  6E1C               	movwf	?__tdiv_to_l_+1,c
  8092  003682  0E00               	movlw	0
  8093  003684  6E1D               	movwf	?__tdiv_to_l_+2,c
  8094  003686  0E00               	movlw	0
  8095  003688  6E1E               	movwf	?__tdiv_to_l_+3,c
  8096  00368A  0012               	return	
  8097  00368C  D007               	goto	l6604
  8098  00368E                     l6602:
  8099  00368E  90D8               	bcf	status,0,c
  8100  003690  3624               	rlcf	__tdiv_to_l_@quot,f,c
  8101  003692  3625               	rlcf	__tdiv_to_l_@quot+1,f,c
  8102  003694  3626               	rlcf	__tdiv_to_l_@quot+2,f,c
  8103  003696  3627               	rlcf	__tdiv_to_l_@quot+3,f,c
  8104  003698  0629               	decf	__tdiv_to_l_@exp1,f,c
  8105  00369A  D000               	goto	l6604
  8106  00369C                     l6604:
  8107  00369C  5029               	movf	__tdiv_to_l_@exp1,w,c
  8108  00369E  A4D8               	btfss	status,2,c
  8109  0036A0  D7F6               	goto	l6602
  8110  0036A2                     l1352:
  8111  0036A2  C024  F01B         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8112  0036A6  C025  F01C         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8113  0036AA  C026  F01D         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8114  0036AE  C027  F01E         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8115  0036B2  0012               	return		;funcret
  8116  0036B4                     __end_of__tdiv_to_l_:
  8117                           	opt stack 0
  8118                           tosu	equ	0xFFF
  8119                           tosh	equ	0xFFE
  8120                           tosl	equ	0xFFD
  8121                           pclath	equ	0xFFA
  8122                           tblptru	equ	0xFF8
  8123                           tblptrh	equ	0xFF7
  8124                           tblptrl	equ	0xFF6
  8125                           tablat	equ	0xFF5
  8126                           prodh	equ	0xFF4
  8127                           prodl	equ	0xFF3
  8128                           intcon	equ	0xFF2
  8129                           postinc0	equ	0xFEE
  8130                           wreg	equ	0xFE8
  8131                           indf2	equ	0xFDF
  8132                           postinc2	equ	0xFDE
  8133                           postdec2	equ	0xFDD
  8134                           plusw2	equ	0xFDB
  8135                           fsr2h	equ	0xFDA
  8136                           fsr2l	equ	0xFD9
  8137                           status	equ	0xFD8
  8138                           
  8139 ;; *************** function __div_to_l_ *****************
  8140 ;; Defined at:
  8141 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  8142 ;; Parameters:    Size  Location     Type
  8143 ;;  f1              3   26[COMRAM] unsigned long 
  8144 ;;  f2              3   29[COMRAM] unsigned long 
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;  quot            4   32[COMRAM] unsigned long 
  8147 ;;  exp1            1   37[COMRAM] unsigned char 
  8148 ;;  cntr            1   36[COMRAM] unsigned char 
  8149 ;; Return value:  Size  Location     Type
  8150 ;;                  4   26[COMRAM] unsigned long 
  8151 ;; Registers used:
  8152 ;;		wreg, status,2, status,0
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8158 ;;      Params:         6       0       0       0       0       0       0
  8159 ;;      Locals:         6       0       0       0       0       0       0
  8160 ;;      Temps:          0       0       0       0       0       0       0
  8161 ;;      Totals:        12       0       0       0       0       0       0
  8162 ;;Total ram usage:       12 bytes
  8163 ;; Hardware stack levels used:    1
  8164 ;; Hardware stack levels required when called:    4
  8165 ;; This function calls:
  8166 ;;		Nothing
  8167 ;; This function is called by:
  8168 ;;		_printf
  8169 ;; This function uses a non-reentrant model
  8170 ;;
  8171                           
  8172                           	psect	text23
  8173  0036B4                     __ptext23:
  8174                           	opt stack 0
  8175  0036B4                     __div_to_l_:
  8176                           	opt stack 25
  8177                           
  8178                           ;incstack = 0
  8179  0036B4  341D               	rlcf	__div_to_l_@f1+2,w,c
  8180  0036B6  341E               	rlcf	__div_to_l_@f1+3,w,c
  8181  0036B8  6E26               	movwf	__div_to_l_@exp1,c
  8182  0036BA  5026               	movf	__div_to_l_@exp1,w,c
  8183  0036BC  A4D8               	btfss	status,2,c
  8184  0036BE  D009               	goto	l6612
  8185  0036C0  0E00               	movlw	0
  8186  0036C2  6E1B               	movwf	?__div_to_l_,c
  8187  0036C4  0E00               	movlw	0
  8188  0036C6  6E1C               	movwf	?__div_to_l_+1,c
  8189  0036C8  0E00               	movlw	0
  8190  0036CA  6E1D               	movwf	?__div_to_l_+2,c
  8191  0036CC  0E00               	movlw	0
  8192  0036CE  6E1E               	movwf	?__div_to_l_+3,c
  8193  0036D0  0012               	return	
  8194  0036D2                     l6612:
  8195  0036D2  3420               	rlcf	__div_to_l_@f2+2,w,c
  8196  0036D4  3421               	rlcf	__div_to_l_@f2+3,w,c
  8197  0036D6  6E25               	movwf	__div_to_l_@cntr,c
  8198  0036D8  5025               	movf	__div_to_l_@cntr,w,c
  8199  0036DA  A4D8               	btfss	status,2,c
  8200  0036DC  D009               	goto	l6618
  8201  0036DE  0E00               	movlw	0
  8202  0036E0  6E1B               	movwf	?__div_to_l_,c
  8203  0036E2  0E00               	movlw	0
  8204  0036E4  6E1C               	movwf	?__div_to_l_+1,c
  8205  0036E6  0E00               	movlw	0
  8206  0036E8  6E1D               	movwf	?__div_to_l_+2,c
  8207  0036EA  0E00               	movlw	0
  8208  0036EC  6E1E               	movwf	?__div_to_l_+3,c
  8209  0036EE  0012               	return	
  8210  0036F0                     l6618:
  8211  0036F0  8E1D               	bsf	__div_to_l_@f1+2,7,c
  8212  0036F2  0EFF               	movlw	255
  8213  0036F4  161B               	andwf	__div_to_l_@f1,f,c
  8214  0036F6  0EFF               	movlw	255
  8215  0036F8  161C               	andwf	__div_to_l_@f1+1,f,c
  8216  0036FA  0EFF               	movlw	255
  8217  0036FC  161D               	andwf	__div_to_l_@f1+2,f,c
  8218  0036FE  0E00               	movlw	0
  8219  003700  161E               	andwf	__div_to_l_@f1+3,f,c
  8220  003702  8E20               	bsf	__div_to_l_@f2+2,7,c
  8221  003704  0EFF               	movlw	255
  8222  003706  161E               	andwf	__div_to_l_@f2,f,c
  8223  003708  0EFF               	movlw	255
  8224  00370A  161F               	andwf	__div_to_l_@f2+1,f,c
  8225  00370C  0EFF               	movlw	255
  8226  00370E  1620               	andwf	__div_to_l_@f2+2,f,c
  8227  003710  0E00               	movlw	0
  8228  003712  1621               	andwf	__div_to_l_@f2+3,f,c
  8229  003714  0E00               	movlw	0
  8230  003716  6E21               	movwf	__div_to_l_@quot,c
  8231  003718  0E00               	movlw	0
  8232  00371A  6E22               	movwf	__div_to_l_@quot+1,c
  8233  00371C  0E00               	movlw	0
  8234  00371E  6E23               	movwf	__div_to_l_@quot+2,c
  8235  003720  0E00               	movlw	0
  8236  003722  6E24               	movwf	__div_to_l_@quot+3,c
  8237  003724  0E7F               	movlw	127
  8238  003726  5E26               	subwf	__div_to_l_@exp1,f,c
  8239  003728  5025               	movf	__div_to_l_@cntr,w,c
  8240  00372A  0FA0               	addlw	160
  8241  00372C  5E26               	subwf	__div_to_l_@exp1,f,c
  8242  00372E  0E20               	movlw	32
  8243  003730  6E25               	movwf	__div_to_l_@cntr,c
  8244  003732  D000               	goto	l6632
  8245  003734                     l6632:
  8246  003734  90D8               	bcf	status,0,c
  8247  003736  3621               	rlcf	__div_to_l_@quot,f,c
  8248  003738  3622               	rlcf	__div_to_l_@quot+1,f,c
  8249  00373A  3623               	rlcf	__div_to_l_@quot+2,f,c
  8250  00373C  3624               	rlcf	__div_to_l_@quot+3,f,c
  8251  00373E  501E               	movf	__div_to_l_@f2,w,c
  8252  003740  5C1B               	subwf	__div_to_l_@f1,w,c
  8253  003742  501F               	movf	__div_to_l_@f2+1,w,c
  8254  003744  581C               	subwfb	__div_to_l_@f1+1,w,c
  8255  003746  5020               	movf	__div_to_l_@f2+2,w,c
  8256  003748  581D               	subwfb	__div_to_l_@f1+2,w,c
  8257  00374A  5021               	movf	__div_to_l_@f2+3,w,c
  8258  00374C  581E               	subwfb	__div_to_l_@f1+3,w,c
  8259  00374E  A0D8               	btfss	status,0,c
  8260  003750  D00A               	goto	l6640
  8261  003752  501E               	movf	__div_to_l_@f2,w,c
  8262  003754  5E1B               	subwf	__div_to_l_@f1,f,c
  8263  003756  501F               	movf	__div_to_l_@f2+1,w,c
  8264  003758  5A1C               	subwfb	__div_to_l_@f1+1,f,c
  8265  00375A  5020               	movf	__div_to_l_@f2+2,w,c
  8266  00375C  5A1D               	subwfb	__div_to_l_@f1+2,f,c
  8267  00375E  5021               	movf	__div_to_l_@f2+3,w,c
  8268  003760  5A1E               	subwfb	__div_to_l_@f1+3,f,c
  8269  003762  8021               	bsf	__div_to_l_@quot,0,c
  8270  003764  D000               	goto	l6640
  8271  003766                     l6640:
  8272  003766  90D8               	bcf	status,0,c
  8273  003768  361B               	rlcf	__div_to_l_@f1,f,c
  8274  00376A  361C               	rlcf	__div_to_l_@f1+1,f,c
  8275  00376C  361D               	rlcf	__div_to_l_@f1+2,f,c
  8276  00376E  361E               	rlcf	__div_to_l_@f1+3,f,c
  8277  003770  2E25               	decfsz	__div_to_l_@cntr,f,c
  8278  003772  D7E0               	goto	l6632
  8279  003774  D000               	goto	l6644
  8280  003776                     l6644:
  8281  003776  AE26               	btfss	__div_to_l_@exp1,7,c
  8282  003778  D017               	goto	l6656
  8283  00377A  5026               	movf	__div_to_l_@exp1,w,c
  8284  00377C  0A80               	xorlw	128
  8285  00377E  0F9F               	addlw	159
  8286  003780  B0D8               	btfsc	status,0,c
  8287  003782  D00A               	goto	l6652
  8288  003784  0E00               	movlw	0
  8289  003786  6E1B               	movwf	?__div_to_l_,c
  8290  003788  0E00               	movlw	0
  8291  00378A  6E1C               	movwf	?__div_to_l_+1,c
  8292  00378C  0E00               	movlw	0
  8293  00378E  6E1D               	movwf	?__div_to_l_+2,c
  8294  003790  0E00               	movlw	0
  8295  003792  6E1E               	movwf	?__div_to_l_+3,c
  8296  003794  0012               	return	
  8297  003796  D000               	goto	l6652
  8298  003798                     l6652:
  8299  003798  90D8               	bcf	status,0,c
  8300  00379A  3224               	rrcf	__div_to_l_@quot+3,f,c
  8301  00379C  3223               	rrcf	__div_to_l_@quot+2,f,c
  8302  00379E  3222               	rrcf	__div_to_l_@quot+1,f,c
  8303  0037A0  3221               	rrcf	__div_to_l_@quot,f,c
  8304  0037A2  3E26               	incfsz	__div_to_l_@exp1,f,c
  8305  0037A4  D7F9               	goto	l6652
  8306  0037A6  D017               	goto	l1231
  8307  0037A8                     l6656:
  8308  0037A8  0E1F               	movlw	31
  8309  0037AA  6426               	cpfsgt	__div_to_l_@exp1,c
  8310  0037AC  D011               	goto	l6664
  8311  0037AE  0E00               	movlw	0
  8312  0037B0  6E1B               	movwf	?__div_to_l_,c
  8313  0037B2  0E00               	movlw	0
  8314  0037B4  6E1C               	movwf	?__div_to_l_+1,c
  8315  0037B6  0E00               	movlw	0
  8316  0037B8  6E1D               	movwf	?__div_to_l_+2,c
  8317  0037BA  0E00               	movlw	0
  8318  0037BC  6E1E               	movwf	?__div_to_l_+3,c
  8319  0037BE  0012               	return	
  8320  0037C0  D007               	goto	l6664
  8321  0037C2                     l6662:
  8322  0037C2  90D8               	bcf	status,0,c
  8323  0037C4  3621               	rlcf	__div_to_l_@quot,f,c
  8324  0037C6  3622               	rlcf	__div_to_l_@quot+1,f,c
  8325  0037C8  3623               	rlcf	__div_to_l_@quot+2,f,c
  8326  0037CA  3624               	rlcf	__div_to_l_@quot+3,f,c
  8327  0037CC  0626               	decf	__div_to_l_@exp1,f,c
  8328  0037CE  D000               	goto	l6664
  8329  0037D0                     l6664:
  8330  0037D0  5026               	movf	__div_to_l_@exp1,w,c
  8331  0037D2  A4D8               	btfss	status,2,c
  8332  0037D4  D7F6               	goto	l6662
  8333  0037D6                     l1231:
  8334  0037D6  C021  F01B         	movff	__div_to_l_@quot,?__div_to_l_
  8335  0037DA  C022  F01C         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8336  0037DE  C023  F01D         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8337  0037E2  C024  F01E         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8338  0037E6  0012               	return		;funcret
  8339  0037E8                     __end_of__div_to_l_:
  8340                           	opt stack 0
  8341                           tosu	equ	0xFFF
  8342                           tosh	equ	0xFFE
  8343                           tosl	equ	0xFFD
  8344                           pclath	equ	0xFFA
  8345                           tblptru	equ	0xFF8
  8346                           tblptrh	equ	0xFF7
  8347                           tblptrl	equ	0xFF6
  8348                           tablat	equ	0xFF5
  8349                           prodh	equ	0xFF4
  8350                           prodl	equ	0xFF3
  8351                           intcon	equ	0xFF2
  8352                           postinc0	equ	0xFEE
  8353                           wreg	equ	0xFE8
  8354                           indf2	equ	0xFDF
  8355                           postinc2	equ	0xFDE
  8356                           postdec2	equ	0xFDD
  8357                           plusw2	equ	0xFDB
  8358                           fsr2h	equ	0xFDA
  8359                           fsr2l	equ	0xFD9
  8360                           status	equ	0xFD8
  8361                           
  8362 ;; *************** function ___lltoft *****************
  8363 ;; Defined at:
  8364 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  8365 ;; Parameters:    Size  Location     Type
  8366 ;;  c               4   34[COMRAM] unsigned long 
  8367 ;; Auto vars:     Size  Location     Type
  8368 ;;  exp             1    0[BANK0 ] unsigned char 
  8369 ;; Return value:  Size  Location     Type
  8370 ;;                  3   34[COMRAM] float 
  8371 ;; Registers used:
  8372 ;;		wreg, status,2, status,0, cstack
  8373 ;; Tracked objects:
  8374 ;;		On entry : 0/0
  8375 ;;		On exit  : 0/0
  8376 ;;		Unchanged: 0/0
  8377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8378 ;;      Params:         4       0       0       0       0       0       0
  8379 ;;      Locals:         0       1       0       0       0       0       0
  8380 ;;      Temps:          4       0       0       0       0       0       0
  8381 ;;      Totals:         8       1       0       0       0       0       0
  8382 ;;Total ram usage:        9 bytes
  8383 ;; Hardware stack levels used:    1
  8384 ;; Hardware stack levels required when called:    5
  8385 ;; This function calls:
  8386 ;;		___ftpack
  8387 ;; This function is called by:
  8388 ;;		_printf
  8389 ;; This function uses a non-reentrant model
  8390 ;;
  8391                           
  8392                           	psect	text24
  8393  0048F6                     __ptext24:
  8394                           	opt stack 0
  8395  0048F6                     ___lltoft:
  8396                           	opt stack 24
  8397                           
  8398                           ;incstack = 0
  8399  0048F6  0E8E               	movlw	142
  8400  0048F8  0100               	movlb	0	; () banked
  8401  0048FA  6F60               	movwf	___lltoft@exp& (0+255),b
  8402  0048FC  D008               	goto	l6846
  8403  0048FE                     l6844:
  8404                           
  8405                           ; BSR set to: 0
  8406  0048FE  90D8               	bcf	status,0,c
  8407  004900  3226               	rrcf	___lltoft@c+3,f,c
  8408  004902  3225               	rrcf	___lltoft@c+2,f,c
  8409  004904  3224               	rrcf	___lltoft@c+1,f,c
  8410  004906  3223               	rrcf	___lltoft@c,f,c
  8411  004908  0100               	movlb	0	; () banked
  8412  00490A  2B60               	incf	___lltoft@exp& (0+255),f,b
  8413  00490C  D000               	goto	l6846
  8414  00490E                     l6846:
  8415                           
  8416                           ; BSR set to: 0
  8417  00490E  0E00               	movlw	0
  8418  004910  1423               	andwf	___lltoft@c,w,c
  8419  004912  6E27               	movwf	??___lltoft& (0+255),c
  8420  004914  0E00               	movlw	0
  8421  004916  1424               	andwf	___lltoft@c+1,w,c
  8422  004918  6E28               	movwf	(??___lltoft+1)& (0+255),c
  8423  00491A  0E00               	movlw	0
  8424  00491C  1425               	andwf	___lltoft@c+2,w,c
  8425  00491E  6E29               	movwf	(??___lltoft+2)& (0+255),c
  8426  004920  0EFF               	movlw	255
  8427  004922  1426               	andwf	___lltoft@c+3,w,c
  8428  004924  6E2A               	movwf	(??___lltoft+3)& (0+255),c
  8429  004926  5027               	movf	??___lltoft,w,c
  8430  004928  1028               	iorwf	??___lltoft+1,w,c
  8431  00492A  1029               	iorwf	??___lltoft+2,w,c
  8432  00492C  102A               	iorwf	??___lltoft+3,w,c
  8433  00492E  A4D8               	btfss	status,2,c
  8434  004930  D7E6               	goto	l6844
  8435                           
  8436                           ; BSR set to: 0
  8437                           
  8438                           ; BSR set to: 0
  8439  004932  C023  F01B         	movff	___lltoft@c,___ftpack@arg
  8440  004936  C024  F01C         	movff	___lltoft@c+1,___ftpack@arg+1
  8441  00493A  C025  F01D         	movff	___lltoft@c+2,___ftpack@arg+2
  8442  00493E  C060  F01E         	movff	___lltoft@exp,___ftpack@exp
  8443  004942  0E00               	movlw	0
  8444  004944  6E1F               	movwf	___ftpack@sign,c
  8445  004946  EC24  F021         	call	___ftpack	;wreg free
  8446  00494A  C01B  F023         	movff	?___ftpack,?___lltoft
  8447  00494E  C01C  F024         	movff	?___ftpack+1,?___lltoft+1
  8448  004952  C01D  F025         	movff	?___ftpack+2,?___lltoft+2
  8449  004956  0012               	return	
  8450  004958  0012               	return		;funcret
  8451  00495A                     __end_of___lltoft:
  8452                           	opt stack 0
  8453                           tosu	equ	0xFFF
  8454                           tosh	equ	0xFFE
  8455                           tosl	equ	0xFFD
  8456                           pclath	equ	0xFFA
  8457                           tblptru	equ	0xFF8
  8458                           tblptrh	equ	0xFF7
  8459                           tblptrl	equ	0xFF6
  8460                           tablat	equ	0xFF5
  8461                           prodh	equ	0xFF4
  8462                           prodl	equ	0xFF3
  8463                           intcon	equ	0xFF2
  8464                           postinc0	equ	0xFEE
  8465                           wreg	equ	0xFE8
  8466                           indf2	equ	0xFDF
  8467                           postinc2	equ	0xFDE
  8468                           postdec2	equ	0xFDD
  8469                           plusw2	equ	0xFDB
  8470                           fsr2h	equ	0xFDA
  8471                           fsr2l	equ	0xFD9
  8472                           status	equ	0xFD8
  8473                           
  8474 ;; *************** function ___llmod *****************
  8475 ;; Defined at:
  8476 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  8477 ;; Parameters:    Size  Location     Type
  8478 ;;  dividend        4    0[BANK0 ] unsigned long 
  8479 ;;  divisor         4    4[BANK0 ] unsigned long 
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;  counter         1   39[COMRAM] unsigned char 
  8482 ;; Return value:  Size  Location     Type
  8483 ;;                  4    0[BANK0 ] unsigned long 
  8484 ;; Registers used:
  8485 ;;		wreg, status,2, status,0
  8486 ;; Tracked objects:
  8487 ;;		On entry : 0/0
  8488 ;;		On exit  : 0/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8491 ;;      Params:         0       8       0       0       0       0       0
  8492 ;;      Locals:         1       0       0       0       0       0       0
  8493 ;;      Temps:          0       0       0       0       0       0       0
  8494 ;;      Totals:         1       8       0       0       0       0       0
  8495 ;;Total ram usage:        9 bytes
  8496 ;; Hardware stack levels used:    1
  8497 ;; Hardware stack levels required when called:    4
  8498 ;; This function calls:
  8499 ;;		Nothing
  8500 ;; This function is called by:
  8501 ;;		_printf
  8502 ;; This function uses a non-reentrant model
  8503 ;;
  8504                           
  8505                           	psect	text25
  8506  00430E                     __ptext25:
  8507                           	opt stack 0
  8508  00430E                     ___llmod:
  8509                           	opt stack 25
  8510                           
  8511                           ;incstack = 0
  8512  00430E  0100               	movlb	0	; () banked
  8513  004310  5164               	movf	___llmod@divisor& (0+255),w,b
  8514  004312  0100               	movlb	0	; () banked
  8515  004314  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  8516  004316  0100               	movlb	0	; () banked
  8517  004318  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  8518  00431A  0100               	movlb	0	; () banked
  8519  00431C  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  8520  00431E  B4D8               	btfsc	status,2,c
  8521  004320  D03C               	goto	l1442
  8522                           
  8523                           ; BSR set to: 0
  8524  004322  0E01               	movlw	1
  8525  004324  6E28               	movwf	___llmod@counter,c
  8526  004326  D008               	goto	l6832
  8527  004328                     l6830:
  8528                           
  8529                           ; BSR set to: 0
  8530  004328  0100               	movlb	0	; () banked
  8531  00432A  90D8               	bcf	status,0,c
  8532  00432C  3764               	rlcf	___llmod@divisor& (0+255),f,b
  8533  00432E  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  8534  004330  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  8535  004332  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  8536  004334  2A28               	incf	___llmod@counter,f,c
  8537  004336  D000               	goto	l6832
  8538  004338                     l6832:
  8539                           
  8540                           ; BSR set to: 0
  8541  004338  0100               	movlb	0	; () banked
  8542  00433A  BF67               	btfsc	(___llmod@divisor+3)& (0+255),7,b
  8543  00433C  D002               	goto	l6834
  8544  00433E  D7F4               	goto	l6830
  8545                           
  8546                           ; BSR set to: 0
  8547  004340  D000               	goto	l6834
  8548  004342                     l6834:
  8549                           
  8550                           ; BSR set to: 0
  8551  004342  0100               	movlb	0	; () banked
  8552  004344  5164               	movf	___llmod@divisor& (0+255),w,b
  8553  004346  0100               	movlb	0	; () banked
  8554  004348  5D60               	subwf	___llmod@dividend& (0+255),w,b
  8555  00434A  0100               	movlb	0	; () banked
  8556  00434C  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  8557  00434E  0100               	movlb	0	; () banked
  8558  004350  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  8559  004352  0100               	movlb	0	; () banked
  8560  004354  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  8561  004356  0100               	movlb	0	; () banked
  8562  004358  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  8563  00435A  0100               	movlb	0	; () banked
  8564  00435C  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  8565  00435E  0100               	movlb	0	; () banked
  8566  004360  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  8567  004362  A0D8               	btfss	status,0,c
  8568  004364  D011               	goto	l6838
  8569                           
  8570                           ; BSR set to: 0
  8571  004366  0100               	movlb	0	; () banked
  8572  004368  5164               	movf	___llmod@divisor& (0+255),w,b
  8573  00436A  0100               	movlb	0	; () banked
  8574  00436C  5F60               	subwf	___llmod@dividend& (0+255),f,b
  8575  00436E  0100               	movlb	0	; () banked
  8576  004370  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  8577  004372  0100               	movlb	0	; () banked
  8578  004374  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  8579  004376  0100               	movlb	0	; () banked
  8580  004378  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  8581  00437A  0100               	movlb	0	; () banked
  8582  00437C  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  8583  00437E  0100               	movlb	0	; () banked
  8584  004380  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  8585  004382  0100               	movlb	0	; () banked
  8586  004384  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  8587  004386  D000               	goto	l6838
  8588  004388                     l6838:
  8589                           
  8590                           ; BSR set to: 0
  8591  004388  0100               	movlb	0	; () banked
  8592  00438A  90D8               	bcf	status,0,c
  8593  00438C  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  8594  00438E  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  8595  004390  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  8596  004392  3364               	rrcf	___llmod@divisor& (0+255),f,b
  8597                           
  8598                           ; BSR set to: 0
  8599  004394  2E28               	decfsz	___llmod@counter,f,c
  8600  004396  D7D5               	goto	l6834
  8601  004398  D000               	goto	l1442
  8602  00439A                     l1442:
  8603                           
  8604                           ; BSR set to: 0
  8605  00439A  C060  F060         	movff	___llmod@dividend,?___llmod
  8606  00439E  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  8607  0043A2  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  8608  0043A6  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  8609                           
  8610                           ; BSR set to: 0
  8611  0043AA  0012               	return		;funcret
  8612  0043AC                     __end_of___llmod:
  8613                           	opt stack 0
  8614                           tosu	equ	0xFFF
  8615                           tosh	equ	0xFFE
  8616                           tosl	equ	0xFFD
  8617                           pclath	equ	0xFFA
  8618                           tblptru	equ	0xFF8
  8619                           tblptrh	equ	0xFF7
  8620                           tblptrl	equ	0xFF6
  8621                           tablat	equ	0xFF5
  8622                           prodh	equ	0xFF4
  8623                           prodl	equ	0xFF3
  8624                           intcon	equ	0xFF2
  8625                           postinc0	equ	0xFEE
  8626                           wreg	equ	0xFE8
  8627                           indf2	equ	0xFDF
  8628                           postinc2	equ	0xFDE
  8629                           postdec2	equ	0xFDD
  8630                           plusw2	equ	0xFDB
  8631                           fsr2h	equ	0xFDA
  8632                           fsr2l	equ	0xFD9
  8633                           status	equ	0xFD8
  8634                           
  8635 ;; *************** function ___lldiv *****************
  8636 ;; Defined at:
  8637 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  8638 ;; Parameters:    Size  Location     Type
  8639 ;;  dividend        4   26[COMRAM] unsigned long 
  8640 ;;  divisor         4   30[COMRAM] unsigned long 
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;  quotient        4   34[COMRAM] unsigned long 
  8643 ;;  counter         1   38[COMRAM] unsigned char 
  8644 ;; Return value:  Size  Location     Type
  8645 ;;                  4   26[COMRAM] unsigned long 
  8646 ;; Registers used:
  8647 ;;		wreg, status,2, status,0
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8653 ;;      Params:         8       0       0       0       0       0       0
  8654 ;;      Locals:         5       0       0       0       0       0       0
  8655 ;;      Temps:          0       0       0       0       0       0       0
  8656 ;;      Totals:        13       0       0       0       0       0       0
  8657 ;;Total ram usage:       13 bytes
  8658 ;; Hardware stack levels used:    1
  8659 ;; Hardware stack levels required when called:    4
  8660 ;; This function calls:
  8661 ;;		Nothing
  8662 ;; This function is called by:
  8663 ;;		_printf
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           	psect	text26
  8668  0045FC                     __ptext26:
  8669                           	opt stack 0
  8670  0045FC                     ___lldiv:
  8671                           	opt stack 25
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;incstack = 0
  8675  0045FC  0E00               	movlw	0
  8676  0045FE  6E23               	movwf	___lldiv@quotient,c
  8677  004600  0E00               	movlw	0
  8678  004602  6E24               	movwf	___lldiv@quotient+1,c
  8679  004604  0E00               	movlw	0
  8680  004606  6E25               	movwf	___lldiv@quotient+2,c
  8681  004608  0E00               	movlw	0
  8682  00460A  6E26               	movwf	___lldiv@quotient+3,c
  8683  00460C  501F               	movf	___lldiv@divisor,w,c
  8684  00460E  1020               	iorwf	___lldiv@divisor+1,w,c
  8685  004610  1021               	iorwf	___lldiv@divisor+2,w,c
  8686  004612  1022               	iorwf	___lldiv@divisor+3,w,c
  8687  004614  B4D8               	btfsc	status,2,c
  8688  004616  D02F               	goto	l1432
  8689  004618  0E01               	movlw	1
  8690  00461A  6E27               	movwf	___lldiv@counter,c
  8691  00461C  D007               	goto	l6812
  8692  00461E                     l6810:
  8693  00461E  90D8               	bcf	status,0,c
  8694  004620  361F               	rlcf	___lldiv@divisor,f,c
  8695  004622  3620               	rlcf	___lldiv@divisor+1,f,c
  8696  004624  3621               	rlcf	___lldiv@divisor+2,f,c
  8697  004626  3622               	rlcf	___lldiv@divisor+3,f,c
  8698  004628  2A27               	incf	___lldiv@counter,f,c
  8699  00462A  D000               	goto	l6812
  8700  00462C                     l6812:
  8701  00462C  BE22               	btfsc	___lldiv@divisor+3,7,c
  8702  00462E  D002               	goto	l6814
  8703  004630  D7F6               	goto	l6810
  8704  004632  D000               	goto	l6814
  8705  004634                     l6814:
  8706  004634  90D8               	bcf	status,0,c
  8707  004636  3623               	rlcf	___lldiv@quotient,f,c
  8708  004638  3624               	rlcf	___lldiv@quotient+1,f,c
  8709  00463A  3625               	rlcf	___lldiv@quotient+2,f,c
  8710  00463C  3626               	rlcf	___lldiv@quotient+3,f,c
  8711  00463E  501F               	movf	___lldiv@divisor,w,c
  8712  004640  5C1B               	subwf	___lldiv@dividend,w,c
  8713  004642  5020               	movf	___lldiv@divisor+1,w,c
  8714  004644  581C               	subwfb	___lldiv@dividend+1,w,c
  8715  004646  5021               	movf	___lldiv@divisor+2,w,c
  8716  004648  581D               	subwfb	___lldiv@dividend+2,w,c
  8717  00464A  5022               	movf	___lldiv@divisor+3,w,c
  8718  00464C  581E               	subwfb	___lldiv@dividend+3,w,c
  8719  00464E  A0D8               	btfss	status,0,c
  8720  004650  D00A               	goto	l6822
  8721  004652  501F               	movf	___lldiv@divisor,w,c
  8722  004654  5E1B               	subwf	___lldiv@dividend,f,c
  8723  004656  5020               	movf	___lldiv@divisor+1,w,c
  8724  004658  5A1C               	subwfb	___lldiv@dividend+1,f,c
  8725  00465A  5021               	movf	___lldiv@divisor+2,w,c
  8726  00465C  5A1D               	subwfb	___lldiv@dividend+2,f,c
  8727  00465E  5022               	movf	___lldiv@divisor+3,w,c
  8728  004660  5A1E               	subwfb	___lldiv@dividend+3,f,c
  8729  004662  8023               	bsf	___lldiv@quotient,0,c
  8730  004664  D000               	goto	l6822
  8731  004666                     l6822:
  8732  004666  90D8               	bcf	status,0,c
  8733  004668  3222               	rrcf	___lldiv@divisor+3,f,c
  8734  00466A  3221               	rrcf	___lldiv@divisor+2,f,c
  8735  00466C  3220               	rrcf	___lldiv@divisor+1,f,c
  8736  00466E  321F               	rrcf	___lldiv@divisor,f,c
  8737  004670  2E27               	decfsz	___lldiv@counter,f,c
  8738  004672  D7E0               	goto	l6814
  8739  004674  D000               	goto	l1432
  8740  004676                     l1432:
  8741  004676  C023  F01B         	movff	___lldiv@quotient,?___lldiv
  8742  00467A  C024  F01C         	movff	___lldiv@quotient+1,?___lldiv+1
  8743  00467E  C025  F01D         	movff	___lldiv@quotient+2,?___lldiv+2
  8744  004682  C026  F01E         	movff	___lldiv@quotient+3,?___lldiv+3
  8745  004686  0012               	return		;funcret
  8746  004688                     __end_of___lldiv:
  8747                           	opt stack 0
  8748                           tosu	equ	0xFFF
  8749                           tosh	equ	0xFFE
  8750                           tosl	equ	0xFFD
  8751                           pclath	equ	0xFFA
  8752                           tblptru	equ	0xFF8
  8753                           tblptrh	equ	0xFF7
  8754                           tblptrl	equ	0xFF6
  8755                           tablat	equ	0xFF5
  8756                           prodh	equ	0xFF4
  8757                           prodl	equ	0xFF3
  8758                           intcon	equ	0xFF2
  8759                           postinc0	equ	0xFEE
  8760                           wreg	equ	0xFE8
  8761                           indf2	equ	0xFDF
  8762                           postinc2	equ	0xFDE
  8763                           postdec2	equ	0xFDD
  8764                           plusw2	equ	0xFDB
  8765                           fsr2h	equ	0xFDA
  8766                           fsr2l	equ	0xFD9
  8767                           status	equ	0xFD8
  8768                           
  8769 ;; *************** function ___fttol *****************
  8770 ;; Defined at:
  8771 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  8772 ;; Parameters:    Size  Location     Type
  8773 ;;  f1              3   39[BANK0 ] float 
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;  lval            4   49[BANK0 ] unsigned long 
  8776 ;;  exp1            1   53[BANK0 ] unsigned char 
  8777 ;;  sign1           1   48[BANK0 ] unsigned char 
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  4   39[BANK0 ] long 
  8780 ;; Registers used:
  8781 ;;		wreg, status,2, status,0
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8787 ;;      Params:         0       4       0       0       0       0       0
  8788 ;;      Locals:         0       6       0       0       0       0       0
  8789 ;;      Temps:          0       5       0       0       0       0       0
  8790 ;;      Totals:         0      15       0       0       0       0       0
  8791 ;;Total ram usage:       15 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    4
  8794 ;; This function calls:
  8795 ;;		Nothing
  8796 ;; This function is called by:
  8797 ;;		_printf
  8798 ;; This function uses a non-reentrant model
  8799 ;;
  8800                           
  8801                           	psect	text27
  8802  003188                     __ptext27:
  8803                           	opt stack 0
  8804  003188                     ___fttol:
  8805                           	opt stack 25
  8806                           
  8807                           ;incstack = 0
  8808  003188  C089  F08B         	movff	___fttol@f1+2,??___fttol
  8809  00318C  0100               	movlb	0	; () banked
  8810  00318E  6B8C               	clrf	(??___fttol+1)& (0+255),b
  8811  003190  6B8D               	clrf	(??___fttol+2)& (0+255),b
  8812  003192  0100               	movlb	0	; () banked
  8813  003194  3588               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8814  003196  0100               	movlb	0	; () banked
  8815  003198  378B               	rlcf	??___fttol& (0+255),f,b
  8816  00319A  E301               	bnc	u8151
  8817  00319C  818C               	bsf	(??___fttol+1)& (0+255),0,b
  8818  00319E                     u8151:
  8819  00319E  0100               	movlb	0	; () banked
  8820  0031A0  518B               	movf	??___fttol& (0+255),w,b
  8821  0031A2  0100               	movlb	0	; () banked
  8822  0031A4  6F95               	movwf	___fttol@exp1& (0+255),b
  8823  0031A6  0100               	movlb	0	; () banked
  8824  0031A8  5195               	movf	___fttol@exp1& (0+255),w,b
  8825  0031AA  A4D8               	btfss	status,2,c
  8826  0031AC  D00A               	goto	l6764
  8827                           
  8828                           ; BSR set to: 0
  8829  0031AE  0E00               	movlw	0
  8830  0031B0  0100               	movlb	0	; () banked
  8831  0031B2  6F87               	movwf	?___fttol& (0+255),b
  8832  0031B4  0E00               	movlw	0
  8833  0031B6  6F88               	movwf	(?___fttol+1)& (0+255),b
  8834  0031B8  0E00               	movlw	0
  8835  0031BA  6F89               	movwf	(?___fttol+2)& (0+255),b
  8836  0031BC  0E00               	movlw	0
  8837  0031BE  6F8A               	movwf	(?___fttol+3)& (0+255),b
  8838                           
  8839                           ; BSR set to: 0
  8840  0031C0  0012               	return	
  8841  0031C2                     l6764:
  8842                           
  8843                           ; BSR set to: 0
  8844  0031C2  0E17               	movlw	23
  8845  0031C4  0100               	movlb	0	; () banked
  8846  0031C6  6F8B               	movwf	??___fttol& (0+255),b
  8847  0031C8  C087  F08C         	movff	___fttol@f1,??___fttol+1
  8848  0031CC  C088  F08D         	movff	___fttol@f1+1,??___fttol+2
  8849  0031D0  C089  F08E         	movff	___fttol@f1+2,??___fttol+3
  8850  0031D4  0100               	movlb	0	; () banked
  8851  0031D6  298B               	incf	??___fttol& (0+255),w,b
  8852  0031D8  0100               	movlb	0	; () banked
  8853  0031DA  6F8F               	movwf	(??___fttol+4)& (0+255),b
  8854  0031DC  D005               	goto	u8170
  8855  0031DE                     u8175:
  8856  0031DE  0100               	movlb	0	; () banked
  8857  0031E0  90D8               	bcf	status,0,c
  8858  0031E2  338E               	rrcf	(??___fttol+3)& (0+255),f,b
  8859  0031E4  338D               	rrcf	(??___fttol+2)& (0+255),f,b
  8860  0031E6  338C               	rrcf	(??___fttol+1)& (0+255),f,b
  8861  0031E8                     u8170:
  8862  0031E8  0100               	movlb	0	; () banked
  8863  0031EA  2F8F               	decfsz	(??___fttol+4)& (0+255),f,b
  8864  0031EC  D7F8               	goto	u8175
  8865  0031EE  0100               	movlb	0	; () banked
  8866  0031F0  518C               	movf	(??___fttol+1)& (0+255),w,b
  8867  0031F2  0100               	movlb	0	; () banked
  8868  0031F4  6F90               	movwf	___fttol@sign1& (0+255),b
  8869                           
  8870                           ; BSR set to: 0
  8871  0031F6  0100               	movlb	0	; () banked
  8872  0031F8  8F88               	bsf	(___fttol@f1+1)& (0+255),7,b
  8873                           
  8874                           ; BSR set to: 0
  8875  0031FA  0EFF               	movlw	255
  8876  0031FC  0100               	movlb	0	; () banked
  8877  0031FE  1787               	andwf	___fttol@f1& (0+255),f,b
  8878  003200  0EFF               	movlw	255
  8879  003202  0100               	movlb	0	; () banked
  8880  003204  1788               	andwf	(___fttol@f1+1)& (0+255),f,b
  8881  003206  0E00               	movlw	0
  8882  003208  0100               	movlb	0	; () banked
  8883  00320A  1789               	andwf	(___fttol@f1+2)& (0+255),f,b
  8884                           
  8885                           ; BSR set to: 0
  8886  00320C  0100               	movlb	0	; () banked
  8887  00320E  5187               	movf	___fttol@f1& (0+255),w,b
  8888  003210  0100               	movlb	0	; () banked
  8889  003212  6F91               	movwf	___fttol@lval& (0+255),b
  8890  003214  0100               	movlb	0	; () banked
  8891  003216  5188               	movf	(___fttol@f1+1)& (0+255),w,b
  8892  003218  0100               	movlb	0	; () banked
  8893  00321A  6F92               	movwf	(___fttol@lval+1)& (0+255),b
  8894  00321C  0100               	movlb	0	; () banked
  8895  00321E  5189               	movf	(___fttol@f1+2)& (0+255),w,b
  8896  003220  0100               	movlb	0	; () banked
  8897  003222  6F93               	movwf	(___fttol@lval+2)& (0+255),b
  8898  003224  0100               	movlb	0	; () banked
  8899  003226  6B94               	clrf	(___fttol@lval+3)& (0+255),b
  8900                           
  8901                           ; BSR set to: 0
  8902  003228  0E8E               	movlw	142
  8903  00322A  0100               	movlb	0	; () banked
  8904  00322C  5F95               	subwf	___fttol@exp1& (0+255),f,b
  8905                           
  8906                           ; BSR set to: 0
  8907  00322E  0100               	movlb	0	; () banked
  8908  003230  AF95               	btfss	___fttol@exp1& (0+255),7,b
  8909  003232  D01B               	goto	l6786
  8910                           
  8911                           ; BSR set to: 0
  8912  003234  0100               	movlb	0	; () banked
  8913  003236  5195               	movf	___fttol@exp1& (0+255),w,b
  8914  003238  0A80               	xorlw	128
  8915  00323A  0F8F               	addlw	143
  8916  00323C  B0D8               	btfsc	status,0,c
  8917  00323E  D00B               	goto	l6782
  8918                           
  8919                           ; BSR set to: 0
  8920  003240  0E00               	movlw	0
  8921  003242  0100               	movlb	0	; () banked
  8922  003244  6F87               	movwf	?___fttol& (0+255),b
  8923  003246  0E00               	movlw	0
  8924  003248  6F88               	movwf	(?___fttol+1)& (0+255),b
  8925  00324A  0E00               	movlw	0
  8926  00324C  6F89               	movwf	(?___fttol+2)& (0+255),b
  8927  00324E  0E00               	movlw	0
  8928  003250  6F8A               	movwf	(?___fttol+3)& (0+255),b
  8929                           
  8930                           ; BSR set to: 0
  8931  003252  0012               	return	
  8932                           
  8933                           ; BSR set to: 0
  8934  003254  D000               	goto	l6782
  8935  003256                     l6782:
  8936                           
  8937                           ; BSR set to: 0
  8938  003256  0100               	movlb	0	; () banked
  8939  003258  90D8               	bcf	status,0,c
  8940  00325A  3394               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8941  00325C  3393               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8942  00325E  3392               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8943  003260  3391               	rrcf	___fttol@lval& (0+255),f,b
  8944                           
  8945                           ; BSR set to: 0
  8946  003262  0100               	movlb	0	; () banked
  8947  003264  3F95               	incfsz	___fttol@exp1& (0+255),f,b
  8948  003266  D7F7               	goto	l6782
  8949                           
  8950                           ; BSR set to: 0
  8951  003268  D01F               	goto	l6796
  8952  00326A                     l6786:
  8953                           
  8954                           ; BSR set to: 0
  8955  00326A  0E17               	movlw	23
  8956  00326C  0100               	movlb	0	; () banked
  8957  00326E  6595               	cpfsgt	___fttol@exp1& (0+255),b
  8958  003270  D014               	goto	l6794
  8959                           
  8960                           ; BSR set to: 0
  8961  003272  0E00               	movlw	0
  8962  003274  0100               	movlb	0	; () banked
  8963  003276  6F87               	movwf	?___fttol& (0+255),b
  8964  003278  0E00               	movlw	0
  8965  00327A  6F88               	movwf	(?___fttol+1)& (0+255),b
  8966  00327C  0E00               	movlw	0
  8967  00327E  6F89               	movwf	(?___fttol+2)& (0+255),b
  8968  003280  0E00               	movlw	0
  8969  003282  6F8A               	movwf	(?___fttol+3)& (0+255),b
  8970                           
  8971                           ; BSR set to: 0
  8972  003284  0012               	return	
  8973                           
  8974                           ; BSR set to: 0
  8975  003286  D009               	goto	l6794
  8976  003288                     l6792:
  8977                           
  8978                           ; BSR set to: 0
  8979  003288  0100               	movlb	0	; () banked
  8980  00328A  90D8               	bcf	status,0,c
  8981  00328C  3791               	rlcf	___fttol@lval& (0+255),f,b
  8982  00328E  3792               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8983  003290  3793               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8984  003292  3794               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8985  003294  0100               	movlb	0	; () banked
  8986  003296  0795               	decf	___fttol@exp1& (0+255),f,b
  8987  003298  D000               	goto	l6794
  8988  00329A                     l6794:
  8989                           
  8990                           ; BSR set to: 0
  8991  00329A  0100               	movlb	0	; () banked
  8992  00329C  5195               	movf	___fttol@exp1& (0+255),w,b
  8993  00329E  0100               	movlb	0	; () banked
  8994  0032A0  B4D8               	btfsc	status,2,c
  8995  0032A2  D002               	goto	l6796
  8996  0032A4  D7F1               	goto	l6792
  8997                           
  8998                           ; BSR set to: 0
  8999  0032A6  D000               	goto	l6796
  9000  0032A8                     l6796:
  9001                           
  9002                           ; BSR set to: 0
  9003  0032A8  0100               	movlb	0	; () banked
  9004  0032AA  5190               	movf	___fttol@sign1& (0+255),w,b
  9005  0032AC  0100               	movlb	0	; () banked
  9006  0032AE  B4D8               	btfsc	status,2,c
  9007  0032B0  D00A               	goto	l6800
  9008                           
  9009                           ; BSR set to: 0
  9010  0032B2  0100               	movlb	0	; () banked
  9011  0032B4  1F94               	comf	(___fttol@lval+3)& (0+255),f,b
  9012  0032B6  1F93               	comf	(___fttol@lval+2)& (0+255),f,b
  9013  0032B8  1F92               	comf	(___fttol@lval+1)& (0+255),f,b
  9014  0032BA  6D91               	negf	___fttol@lval& (0+255),b
  9015  0032BC  0E00               	movlw	0
  9016  0032BE  2392               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9017  0032C0  2393               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9018  0032C2  2394               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9019  0032C4  D000               	goto	l6800
  9020  0032C6                     l6800:
  9021                           
  9022                           ; BSR set to: 0
  9023  0032C6  C091  F087         	movff	___fttol@lval,?___fttol
  9024  0032CA  C092  F088         	movff	___fttol@lval+1,?___fttol+1
  9025  0032CE  C093  F089         	movff	___fttol@lval+2,?___fttol+2
  9026  0032D2  C094  F08A         	movff	___fttol@lval+3,?___fttol+3
  9027  0032D6  0012               	return	
  9028                           
  9029                           ; BSR set to: 0
  9030                           
  9031                           ; BSR set to: 0
  9032  0032D8  0012               	return		;funcret
  9033  0032DA                     __end_of___fttol:
  9034                           	opt stack 0
  9035                           tosu	equ	0xFFF
  9036                           tosh	equ	0xFFE
  9037                           tosl	equ	0xFFD
  9038                           pclath	equ	0xFFA
  9039                           tblptru	equ	0xFF8
  9040                           tblptrh	equ	0xFF7
  9041                           tblptrl	equ	0xFF6
  9042                           tablat	equ	0xFF5
  9043                           prodh	equ	0xFF4
  9044                           prodl	equ	0xFF3
  9045                           intcon	equ	0xFF2
  9046                           postinc0	equ	0xFEE
  9047                           wreg	equ	0xFE8
  9048                           indf2	equ	0xFDF
  9049                           postinc2	equ	0xFDE
  9050                           postdec2	equ	0xFDD
  9051                           plusw2	equ	0xFDB
  9052                           fsr2h	equ	0xFDA
  9053                           fsr2l	equ	0xFD9
  9054                           status	equ	0xFD8
  9055                           
  9056 ;; *************** function ___ftneg *****************
  9057 ;; Defined at:
  9058 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  9059 ;; Parameters:    Size  Location     Type
  9060 ;;  f1              3   26[COMRAM] float 
  9061 ;; Auto vars:     Size  Location     Type
  9062 ;;		None
  9063 ;; Return value:  Size  Location     Type
  9064 ;;                  3   26[COMRAM] float 
  9065 ;; Registers used:
  9066 ;;		wreg, status,2, status,0
  9067 ;; Tracked objects:
  9068 ;;		On entry : 0/0
  9069 ;;		On exit  : 0/0
  9070 ;;		Unchanged: 0/0
  9071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9072 ;;      Params:         3       0       0       0       0       0       0
  9073 ;;      Locals:         0       0       0       0       0       0       0
  9074 ;;      Temps:          0       0       0       0       0       0       0
  9075 ;;      Totals:         3       0       0       0       0       0       0
  9076 ;;Total ram usage:        3 bytes
  9077 ;; Hardware stack levels used:    1
  9078 ;; Hardware stack levels required when called:    4
  9079 ;; This function calls:
  9080 ;;		Nothing
  9081 ;; This function is called by:
  9082 ;;		_printf
  9083 ;; This function uses a non-reentrant model
  9084 ;;
  9085                           
  9086                           	psect	text28
  9087  004D20                     __ptext28:
  9088                           	opt stack 0
  9089  004D20                     ___ftneg:
  9090                           	opt stack 25
  9091                           
  9092                           ; BSR set to: 0
  9093                           ;incstack = 0
  9094  004D20  501B               	movf	___ftneg@f1,w,c
  9095  004D22  101C               	iorwf	___ftneg@f1+1,w,c
  9096  004D24  101D               	iorwf	___ftneg@f1+2,w,c
  9097  004D26  B4D8               	btfsc	status,2,c
  9098  004D28  D006               	goto	l1377
  9099  004D2A  0E00               	movlw	0
  9100  004D2C  1A1B               	xorwf	___ftneg@f1,f,c
  9101  004D2E  0E00               	movlw	0
  9102  004D30  1A1C               	xorwf	___ftneg@f1+1,f,c
  9103  004D32  0E80               	movlw	128
  9104  004D34  1A1D               	xorwf	___ftneg@f1+2,f,c
  9105  004D36                     l1377:
  9106  004D36  C01B  F01B         	movff	___ftneg@f1,?___ftneg
  9107  004D3A  C01C  F01C         	movff	___ftneg@f1+1,?___ftneg+1
  9108  004D3E  C01D  F01D         	movff	___ftneg@f1+2,?___ftneg+2
  9109  004D42  0012               	return		;funcret
  9110  004D44                     __end_of___ftneg:
  9111                           	opt stack 0
  9112                           tosu	equ	0xFFF
  9113                           tosh	equ	0xFFE
  9114                           tosl	equ	0xFFD
  9115                           pclath	equ	0xFFA
  9116                           tblptru	equ	0xFF8
  9117                           tblptrh	equ	0xFF7
  9118                           tblptrl	equ	0xFF6
  9119                           tablat	equ	0xFF5
  9120                           prodh	equ	0xFF4
  9121                           prodl	equ	0xFF3
  9122                           intcon	equ	0xFF2
  9123                           postinc0	equ	0xFEE
  9124                           wreg	equ	0xFE8
  9125                           indf2	equ	0xFDF
  9126                           postinc2	equ	0xFDE
  9127                           postdec2	equ	0xFDD
  9128                           plusw2	equ	0xFDB
  9129                           fsr2h	equ	0xFDA
  9130                           fsr2l	equ	0xFD9
  9131                           status	equ	0xFD8
  9132                           
  9133 ;; *************** function _Temp_Fault *****************
  9134 ;; Defined at:
  9135 ;;		line 16 in file "Tempeture.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;		None
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;  i               2   14[BANK0 ] int 
  9140 ;;  fault           1   13[BANK0 ] unsigned char 
  9141 ;; Return value:  Size  Location     Type
  9142 ;;                  1    wreg      unsigned char 
  9143 ;; Registers used:
  9144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9145 ;; Tracked objects:
  9146 ;;		On entry : 0/0
  9147 ;;		On exit  : 0/0
  9148 ;;		Unchanged: 0/0
  9149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9150 ;;      Params:         0       0       0       0       0       0       0
  9151 ;;      Locals:         0       3       0       0       0       0       0
  9152 ;;      Temps:          0       0       0       0       0       0       0
  9153 ;;      Totals:         0       3       0       0       0       0       0
  9154 ;;Total ram usage:        3 bytes
  9155 ;; Hardware stack levels used:    1
  9156 ;; Hardware stack levels required when called:    5
  9157 ;; This function calls:
  9158 ;;		___ftge
  9159 ;;		___wmul
  9160 ;; This function is called by:
  9161 ;;		_main
  9162 ;; This function uses a non-reentrant model
  9163 ;;
  9164                           
  9165                           	psect	text29
  9166  004688                     __ptext29:
  9167                           	opt stack 0
  9168  004688                     _Temp_Fault:
  9169                           	opt stack 25
  9170                           
  9171                           ;Tempeture.c: 19: char fault = 0;
  9172                           
  9173                           ;incstack = 0
  9174  004688  0E00               	movlw	0
  9175  00468A  0100               	movlb	0	; () banked
  9176  00468C  6F6D               	movwf	Temp_Fault@fault& (0+255),b
  9177                           
  9178                           ;Tempeture.c: 20: for(int i = 0;i<9;i++)
  9179  00468E  0E00               	movlw	0
  9180  004690  0100               	movlb	0	; () banked
  9181  004692  6F6F               	movwf	(Temp_Fault@i+1)& (0+255),b
  9182  004694  0E00               	movlw	0
  9183  004696  6F6E               	movwf	Temp_Fault@i& (0+255),b
  9184  004698                     l6896:
  9185                           
  9186                           ; BSR set to: 0
  9187  004698  0100               	movlb	0	; () banked
  9188  00469A  BF6F               	btfsc	(Temp_Fault@i+1)& (0+255),7,b
  9189  00469C  D00A               	goto	l6900
  9190  00469E  0100               	movlb	0	; () banked
  9191  0046A0  516F               	movf	(Temp_Fault@i+1)& (0+255),w,b
  9192  0046A2  E137               	bnz	l334
  9193  0046A4  0E09               	movlw	9
  9194  0046A6  0100               	movlb	0	; () banked
  9195  0046A8  5D6E               	subwf	Temp_Fault@i& (0+255),w,b
  9196  0046AA  B0D8               	btfsc	status,0,c
  9197  0046AC  0012               	return	
  9198  0046AE  D001               	goto	l6900
  9199                           
  9200                           ; BSR set to: 0
  9201  0046B0  0012               	return	
  9202  0046B2                     l6900:
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;Tempeture.c: 21: {
  9206                           ;Tempeture.c: 22: if (60.5 > Temp_DegF[i])
  9207  0046B2  C06E  F060         	movff	Temp_Fault@i,___wmul@multiplier
  9208  0046B6  C06F  F061         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  9209  0046BA  0E00               	movlw	0
  9210  0046BC  0100               	movlb	0	; () banked
  9211  0046BE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9212  0046C0  0E03               	movlw	3
  9213  0046C2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9214  0046C4  ECEE  F025         	call	___wmul	;wreg free
  9215  0046C8  0E5A               	movlw	low _Temp_DegF
  9216  0046CA  0100               	movlb	0	; () banked
  9217  0046CC  2560               	addwf	?___wmul& (0+255),w,b
  9218  0046CE  6ED9               	movwf	fsr2l,c
  9219  0046D0  0E01               	movlw	high _Temp_DegF
  9220  0046D2  0100               	movlb	0	; () banked
  9221  0046D4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9222  0046D6  6EDA               	movwf	fsr2h,c
  9223  0046D8  CFDE F064          	movff	postinc2,___ftge@ff1
  9224  0046DC  CFDE F065          	movff	postinc2,___ftge@ff1+1
  9225  0046E0  CFDD F066          	movff	postdec2,___ftge@ff1+2
  9226  0046E4  0E00               	movlw	0
  9227  0046E6  0100               	movlb	0	; () banked
  9228  0046E8  6F67               	movwf	___ftge@ff2& (0+255),b
  9229  0046EA  0E72               	movlw	114
  9230  0046EC  0100               	movlb	0	; () banked
  9231  0046EE  6F68               	movwf	(___ftge@ff2+1)& (0+255),b
  9232  0046F0  0E42               	movlw	66
  9233  0046F2  0100               	movlb	0	; () banked
  9234  0046F4  6F69               	movwf	(___ftge@ff2+2)& (0+255),b
  9235  0046F6  ECBD  F020         	call	___ftge	;wreg free
  9236  0046FA  0100               	movlb	0	; () banked
  9237  0046FC  B0D8               	btfsc	status,0,c
  9238  0046FE  D004               	goto	l6904
  9239                           
  9240                           ; BSR set to: 0
  9241                           ;Tempeture.c: 23: {
  9242                           ;Tempeture.c: 24: fault = 1;
  9243  004700  0E01               	movlw	1
  9244  004702  0100               	movlb	0	; () banked
  9245  004704  6F6D               	movwf	Temp_Fault@fault& (0+255),b
  9246  004706  D000               	goto	l6904
  9247  004708                     l6904:
  9248                           
  9249                           ; BSR set to: 0
  9250  004708  0100               	movlb	0	; () banked
  9251  00470A  4B6E               	infsnz	Temp_Fault@i& (0+255),f,b
  9252  00470C  2B6F               	incf	(Temp_Fault@i+1)& (0+255),f,b
  9253  00470E  D7C4               	goto	l6896
  9254                           
  9255                           ; BSR set to: 0
  9256  004710  0012               	return	
  9257  004712                     l334:
  9258                           
  9259                           ; BSR set to: 0
  9260  004712  0012               	return		;funcret
  9261  004714                     __end_of_Temp_Fault:
  9262                           	opt stack 0
  9263                           tosu	equ	0xFFF
  9264                           tosh	equ	0xFFE
  9265                           tosl	equ	0xFFD
  9266                           pclath	equ	0xFFA
  9267                           tblptru	equ	0xFF8
  9268                           tblptrh	equ	0xFF7
  9269                           tblptrl	equ	0xFF6
  9270                           tablat	equ	0xFF5
  9271                           prodh	equ	0xFF4
  9272                           prodl	equ	0xFF3
  9273                           intcon	equ	0xFF2
  9274                           postinc0	equ	0xFEE
  9275                           wreg	equ	0xFE8
  9276                           indf2	equ	0xFDF
  9277                           postinc2	equ	0xFDE
  9278                           postdec2	equ	0xFDD
  9279                           plusw2	equ	0xFDB
  9280                           fsr2h	equ	0xFDA
  9281                           fsr2l	equ	0xFD9
  9282                           status	equ	0xFD8
  9283                           
  9284 ;; *************** function _Temp_Convert *****************
  9285 ;; Defined at:
  9286 ;;		line 68 in file "Tempeture.c"
  9287 ;; Parameters:    Size  Location     Type
  9288 ;;		None
  9289 ;; Auto vars:     Size  Location     Type
  9290 ;;  steinhart       3   77[BANK0 ] float 
  9291 ;;  x               2   75[BANK0 ] int 
  9292 ;; Return value:  Size  Location     Type
  9293 ;;		None               void
  9294 ;; Registers used:
  9295 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9301 ;;      Params:         0       0       0       0       0       0       0
  9302 ;;      Locals:         0       9       0       0       0       0       0
  9303 ;;      Temps:          0       0       0       0       0       0       0
  9304 ;;      Totals:         0       9       0       0       0       0       0
  9305 ;;Total ram usage:        9 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; Hardware stack levels required when called:    8
  9308 ;; This function calls:
  9309 ;;		_Temp_Filter
  9310 ;;		___awdiv
  9311 ;;		___awtoft
  9312 ;;		___ftadd
  9313 ;;		___ftdiv
  9314 ;;		___ftmul
  9315 ;;		___ftsub
  9316 ;;		___wmul
  9317 ;;		_log
  9318 ;; This function is called by:
  9319 ;;		_main
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           	psect	text30
  9324  002958                     __ptext30:
  9325                           	opt stack 0
  9326  002958                     _Temp_Convert:
  9327                           	opt stack 22
  9328                           
  9329                           ;Tempeture.c: 70: int x;
  9330                           ;Tempeture.c: 71: float steinhart;
  9331                           ;Tempeture.c: 72: for(x = 0; x < 10; x++)
  9332                           
  9333                           ; BSR set to: 0
  9334                           ;incstack = 0
  9335  002958  0E00               	movlw	0
  9336  00295A  0100               	movlb	0	; () banked
  9337  00295C  6FAC               	movwf	(Temp_Convert@x+1)& (0+255),b
  9338  00295E  0E00               	movlw	0
  9339  002960  6FAB               	movwf	Temp_Convert@x& (0+255),b
  9340                           
  9341                           ; BSR set to: 0
  9342  002962  0100               	movlb	0	; () banked
  9343  002964  BFAC               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  9344  002966  D00A               	goto	l6914
  9345  002968  0100               	movlb	0	; () banked
  9346  00296A  51AC               	movf	(Temp_Convert@x+1)& (0+255),w,b
  9347  00296C  E106               	bnz	u8390
  9348  00296E  0E0A               	movlw	10
  9349  002970  0100               	movlb	0	; () banked
  9350  002972  5DAB               	subwf	Temp_Convert@x& (0+255),w,b
  9351  002974  B0D8               	btfsc	status,0,c
  9352  002976  D0F8               	goto	l6938
  9353  002978  D001               	goto	l6914
  9354  00297A                     u8390:
  9355                           
  9356                           ; BSR set to: 0
  9357  00297A  D0F6               	goto	l6938
  9358  00297C                     l6914:
  9359                           
  9360                           ; BSR set to: 0
  9361                           ;Tempeture.c: 73: {
  9362                           ;Tempeture.c: 74: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  9363  00297C  90D8               	bcf	status,0,c
  9364  00297E  0100               	movlb	0	; () banked
  9365  002980  35AB               	rlcf	Temp_Convert@x& (0+255),w,b
  9366  002982  6ED9               	movwf	fsr2l,c
  9367  002984  0100               	movlb	0	; () banked
  9368  002986  35AC               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  9369  002988  6EDA               	movwf	fsr2h,c
  9370  00298A  0EEA               	movlw	low _Temp_Adc
  9371  00298C  26D9               	addwf	fsr2l,f,c
  9372  00298E  0E00               	movlw	high _Temp_Adc
  9373  002990  22DA               	addwfc	fsr2h,f,c
  9374  002992  CFDE F023          	movff	postinc2,___awdiv@divisor
  9375  002996  CFDD F024          	movff	postdec2,___awdiv@divisor+1
  9376  00299A  0E03               	movlw	3
  9377  00299C  6E22               	movwf	___awdiv@dividend+1,c
  9378  00299E  6821               	setf	___awdiv@dividend,c
  9379  0029A0  ECD6  F021         	call	___awdiv	;wreg free
  9380  0029A4  0EFF               	movlw	255
  9381  0029A6  2421               	addwf	?___awdiv,w,c
  9382  0029A8  0100               	movlb	0	; () banked
  9383  0029AA  6FA7               	movwf	_Temp_Convert$2051& (0+255),b
  9384  0029AC  0EFF               	movlw	255
  9385  0029AE  2022               	addwfc	?___awdiv+1,w,c
  9386  0029B0  0100               	movlb	0	; () banked
  9387  0029B2  6FA8               	movwf	(_Temp_Convert$2051+1)& (0+255),b
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;Tempeture.c: 73: {
  9391                           ;Tempeture.c: 74: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  9392  0029B4  C0A7  F023         	movff	_Temp_Convert$2051,___awdiv@divisor
  9393  0029B8  C0A8  F024         	movff	_Temp_Convert$2051+1,___awdiv@divisor+1
  9394  0029BC  0E27               	movlw	39
  9395  0029BE  6E22               	movwf	___awdiv@dividend+1,c
  9396  0029C0  0E10               	movlw	16
  9397  0029C2  6E21               	movwf	___awdiv@dividend,c
  9398  0029C4  ECD6  F021         	call	___awdiv	;wreg free
  9399  0029C8  C021  F0A9         	movff	?___awdiv,_Temp_Convert$2052
  9400  0029CC  C022  F0AA         	movff	?___awdiv+1,_Temp_Convert$2052+1
  9401                           
  9402                           ;Tempeture.c: 73: {
  9403                           ;Tempeture.c: 74: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  9404  0029D0  0E27               	movlw	39
  9405  0029D2  6E24               	movwf	___awdiv@divisor+1,c
  9406  0029D4  0E10               	movlw	16
  9407  0029D6  6E23               	movwf	___awdiv@divisor,c
  9408  0029D8  C0A9  F021         	movff	_Temp_Convert$2052,___awdiv@dividend
  9409  0029DC  C0AA  F022         	movff	_Temp_Convert$2052+1,___awdiv@dividend+1
  9410  0029E0  ECD6  F021         	call	___awdiv	;wreg free
  9411  0029E4  C021  F060         	movff	?___awdiv,___awtoft@c
  9412  0029E8  C022  F061         	movff	?___awdiv+1,___awtoft@c+1
  9413  0029EC  EC79  F025         	call	___awtoft	;wreg free
  9414  0029F0  C060  F0AD         	movff	?___awtoft,Temp_Convert@steinhart
  9415  0029F4  C061  F0AE         	movff	?___awtoft+1,Temp_Convert@steinhart+1
  9416  0029F8  C062  F0AF         	movff	?___awtoft+2,Temp_Convert@steinhart+2
  9417                           
  9418                           ;Tempeture.c: 75: steinhart = log(steinhart);
  9419  0029FC  C0AD  F0A2         	movff	Temp_Convert@steinhart,log@x
  9420  002A00  C0AE  F0A3         	movff	Temp_Convert@steinhart+1,log@x+1
  9421  002A04  C0AF  F0A4         	movff	Temp_Convert@steinhart+2,log@x+2
  9422  002A08  EC16  F01A         	call	_log	;wreg free
  9423  002A0C  C0A2  F0AD         	movff	?_log,Temp_Convert@steinhart
  9424  002A10  C0A3  F0AE         	movff	?_log+1,Temp_Convert@steinhart+1
  9425  002A14  C0A4  F0AF         	movff	?_log+2,Temp_Convert@steinhart+2
  9426                           
  9427                           ;Tempeture.c: 76: steinhart /= 3950;
  9428  002A18  C0AD  F062         	movff	Temp_Convert@steinhart,___ftdiv@f1
  9429  002A1C  C0AE  F063         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  9430  002A20  C0AF  F064         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  9431  002A24  0EE0               	movlw	224
  9432  002A26  0100               	movlb	0	; () banked
  9433  002A28  6F65               	movwf	___ftdiv@f2& (0+255),b
  9434  002A2A  0E76               	movlw	118
  9435  002A2C  0100               	movlb	0	; () banked
  9436  002A2E  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  9437  002A30  0E45               	movlw	69
  9438  002A32  0100               	movlb	0	; () banked
  9439  002A34  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  9440  002A36  EC6D  F019         	call	___ftdiv	;wreg free
  9441  002A3A  C062  F0AD         	movff	?___ftdiv,Temp_Convert@steinhart
  9442  002A3E  C063  F0AE         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  9443  002A42  C064  F0AF         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  9444                           
  9445                           ;Tempeture.c: 77: steinhart += 1.0 / (25 + 273.15);
  9446  002A46  C0AD  F08A         	movff	Temp_Convert@steinhart,___ftadd@f1
  9447  002A4A  C0AE  F08B         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  9448  002A4E  C0AF  F08C         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  9449  002A52  0ECF               	movlw	207
  9450  002A54  0100               	movlb	0	; () banked
  9451  002A56  6F8D               	movwf	___ftadd@f2& (0+255),b
  9452  002A58  0E5B               	movlw	91
  9453  002A5A  0100               	movlb	0	; () banked
  9454  002A5C  6F8E               	movwf	(___ftadd@f2+1)& (0+255),b
  9455  002A5E  0E3B               	movlw	59
  9456  002A60  0100               	movlb	0	; () banked
  9457  002A62  6F8F               	movwf	(___ftadd@f2+2)& (0+255),b
  9458  002A64  EC6D  F013         	call	___ftadd	;wreg free
  9459  002A68  C08A  F0AD         	movff	?___ftadd,Temp_Convert@steinhart
  9460  002A6C  C08B  F0AE         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  9461  002A70  C08C  F0AF         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  9462                           
  9463                           ;Tempeture.c: 78: steinhart = 1.0 / steinhart;
  9464  002A74  0E00               	movlw	0
  9465  002A76  0100               	movlb	0	; () banked
  9466  002A78  6F62               	movwf	___ftdiv@f1& (0+255),b
  9467  002A7A  0E80               	movlw	128
  9468  002A7C  0100               	movlb	0	; () banked
  9469  002A7E  6F63               	movwf	(___ftdiv@f1+1)& (0+255),b
  9470  002A80  0E3F               	movlw	63
  9471  002A82  0100               	movlb	0	; () banked
  9472  002A84  6F64               	movwf	(___ftdiv@f1+2)& (0+255),b
  9473  002A86  C0AD  F065         	movff	Temp_Convert@steinhart,___ftdiv@f2
  9474  002A8A  C0AE  F066         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  9475  002A8E  C0AF  F067         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  9476  002A92  EC6D  F019         	call	___ftdiv	;wreg free
  9477  002A96  C062  F0AD         	movff	?___ftdiv,Temp_Convert@steinhart
  9478  002A9A  C063  F0AE         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  9479  002A9E  C064  F0AF         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  9480                           
  9481                           ;Tempeture.c: 79: steinhart -= 273.15;
  9482  002AA2  C0AD  F096         	movff	Temp_Convert@steinhart,___ftsub@f1
  9483  002AA6  C0AE  F097         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  9484  002AAA  C0AF  F098         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  9485  002AAE  0E93               	movlw	147
  9486  002AB0  0100               	movlb	0	; () banked
  9487  002AB2  6F99               	movwf	___ftsub@f2& (0+255),b
  9488  002AB4  0E88               	movlw	136
  9489  002AB6  0100               	movlb	0	; () banked
  9490  002AB8  6F9A               	movwf	(___ftsub@f2+1)& (0+255),b
  9491  002ABA  0E43               	movlw	67
  9492  002ABC  0100               	movlb	0	; () banked
  9493  002ABE  6F9B               	movwf	(___ftsub@f2+2)& (0+255),b
  9494  002AC0  EC03  F025         	call	___ftsub	;wreg free
  9495  002AC4  C096  F0AD         	movff	?___ftsub,Temp_Convert@steinhart
  9496  002AC8  C097  F0AE         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  9497  002ACC  C098  F0AF         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  9498                           
  9499                           ;Tempeture.c: 80: steinhart = (steinhart*1.800) + 32.00;
  9500  002AD0  0E66               	movlw	102
  9501  002AD2  0100               	movlb	0	; () banked
  9502  002AD4  6F74               	movwf	___ftmul@f2& (0+255),b
  9503  002AD6  0EE6               	movlw	230
  9504  002AD8  0100               	movlb	0	; () banked
  9505  002ADA  6F75               	movwf	(___ftmul@f2+1)& (0+255),b
  9506  002ADC  0E3F               	movlw	63
  9507  002ADE  0100               	movlb	0	; () banked
  9508  002AE0  6F76               	movwf	(___ftmul@f2+2)& (0+255),b
  9509  002AE2  C0AD  F071         	movff	Temp_Convert@steinhart,___ftmul@f1
  9510  002AE6  C0AE  F072         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  9511  002AEA  C0AF  F073         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  9512  002AEE  EC0E  F018         	call	___ftmul	;wreg free
  9513  002AF2  C071  F08A         	movff	?___ftmul,___ftadd@f1
  9514  002AF6  C072  F08B         	movff	?___ftmul+1,___ftadd@f1+1
  9515  002AFA  C073  F08C         	movff	?___ftmul+2,___ftadd@f1+2
  9516  002AFE  0E00               	movlw	0
  9517  002B00  0100               	movlb	0	; () banked
  9518  002B02  6F8D               	movwf	___ftadd@f2& (0+255),b
  9519  002B04  0E00               	movlw	0
  9520  002B06  0100               	movlb	0	; () banked
  9521  002B08  6F8E               	movwf	(___ftadd@f2+1)& (0+255),b
  9522  002B0A  0E42               	movlw	66
  9523  002B0C  0100               	movlb	0	; () banked
  9524  002B0E  6F8F               	movwf	(___ftadd@f2+2)& (0+255),b
  9525  002B10  EC6D  F013         	call	___ftadd	;wreg free
  9526  002B14  C08A  F0AD         	movff	?___ftadd,Temp_Convert@steinhart
  9527  002B18  C08B  F0AE         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  9528  002B1C  C08C  F0AF         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  9529                           
  9530                           ;Tempeture.c: 81: TmpTemp_DegF[x] = steinhart;
  9531  002B20  C0AB  F060         	movff	Temp_Convert@x,___wmul@multiplier
  9532  002B24  C0AC  F061         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  9533  002B28  0E00               	movlw	0
  9534  002B2A  0100               	movlb	0	; () banked
  9535  002B2C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9536  002B2E  0E03               	movlw	3
  9537  002B30  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9538  002B32  ECEE  F025         	call	___wmul	;wreg free
  9539  002B36  0EBE               	movlw	low _TmpTemp_DegF
  9540  002B38  0100               	movlb	0	; () banked
  9541  002B3A  2560               	addwf	?___wmul& (0+255),w,b
  9542  002B3C  6ED9               	movwf	fsr2l,c
  9543  002B3E  0E01               	movlw	high _TmpTemp_DegF
  9544  002B40  0100               	movlb	0	; () banked
  9545  002B42  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9546  002B44  6EDA               	movwf	fsr2h,c
  9547  002B46  C0AD  FFDE         	movff	Temp_Convert@steinhart,postinc2
  9548  002B4A  C0AE  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  9549  002B4E  C0AF  FFDE         	movff	Temp_Convert@steinhart+2,postinc2
  9550                           
  9551                           ; BSR set to: 0
  9552  002B52  0100               	movlb	0	; () banked
  9553  002B54  4BAB               	infsnz	Temp_Convert@x& (0+255),f,b
  9554  002B56  2BAC               	incf	(Temp_Convert@x+1)& (0+255),f,b
  9555                           
  9556                           ; BSR set to: 0
  9557  002B58  0100               	movlb	0	; () banked
  9558  002B5A  BFAC               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  9559  002B5C  D70F               	goto	l6914
  9560  002B5E  0100               	movlb	0	; () banked
  9561  002B60  51AC               	movf	(Temp_Convert@x+1)& (0+255),w,b
  9562  002B62  E102               	bnz	l6938
  9563  002B64  D704               	goto	L5
  9564  002B66  D000               	goto	l6938
  9565  002B68                     l6938:
  9566                           
  9567                           ; BSR set to: 0
  9568                           ;Tempeture.c: 82: }
  9569                           ;Tempeture.c: 83: Temp_Filter();
  9570  002B68  ECB7  F015         	call	_Temp_Filter	;wreg free
  9571  002B6C  0012               	return		;funcret
  9572  002B6E                     __end_of_Temp_Convert:
  9573                           	opt stack 0
  9574                           tosu	equ	0xFFF
  9575                           tosh	equ	0xFFE
  9576                           tosl	equ	0xFFD
  9577                           pclath	equ	0xFFA
  9578                           tblptru	equ	0xFF8
  9579                           tblptrh	equ	0xFF7
  9580                           tblptrl	equ	0xFF6
  9581                           tablat	equ	0xFF5
  9582                           prodh	equ	0xFF4
  9583                           prodl	equ	0xFF3
  9584                           intcon	equ	0xFF2
  9585                           postinc0	equ	0xFEE
  9586                           wreg	equ	0xFE8
  9587                           indf2	equ	0xFDF
  9588                           postinc2	equ	0xFDE
  9589                           postdec2	equ	0xFDD
  9590                           plusw2	equ	0xFDB
  9591                           fsr2h	equ	0xFDA
  9592                           fsr2l	equ	0xFD9
  9593                           status	equ	0xFD8
  9594                           
  9595 ;; *************** function _log *****************
  9596 ;; Defined at:
  9597 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  9598 ;; Parameters:    Size  Location     Type
  9599 ;;  x               3   66[BANK0 ] int 
  9600 ;; Auto vars:     Size  Location     Type
  9601 ;;  exponent        2   69[BANK0 ] int 
  9602 ;; Return value:  Size  Location     Type
  9603 ;;                  3   66[BANK0 ] int 
  9604 ;; Registers used:
  9605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9606 ;; Tracked objects:
  9607 ;;		On entry : 0/0
  9608 ;;		On exit  : 0/0
  9609 ;;		Unchanged: 0/0
  9610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9611 ;;      Params:         0       3       0       0       0       0       0
  9612 ;;      Locals:         0       2       0       0       0       0       0
  9613 ;;      Temps:          0       0       0       0       0       0       0
  9614 ;;      Totals:         0       5       0       0       0       0       0
  9615 ;;Total ram usage:        5 bytes
  9616 ;; Hardware stack levels used:    1
  9617 ;; Hardware stack levels required when called:    7
  9618 ;; This function calls:
  9619 ;;		___awtoft
  9620 ;;		___ftadd
  9621 ;;		___ftmul
  9622 ;;		_eval_poly
  9623 ;;		_frexp
  9624 ;; This function is called by:
  9625 ;;		_Temp_Convert
  9626 ;; This function uses a non-reentrant model
  9627 ;;
  9628                           
  9629                           	psect	text31
  9630  00342C                     __ptext31:
  9631                           	opt stack 0
  9632  00342C                     _log:
  9633                           	opt stack 22
  9634                           
  9635                           ;incstack = 0
  9636  00342C  0100               	movlb	0	; () banked
  9637  00342E  AFA4               	btfss	(log@x+2)& (0+255),7,b
  9638  003430  D00F               	goto	l6264
  9639                           
  9640                           ; BSR set to: 0
  9641  003432  0E00               	movlw	0
  9642  003434  0100               	movlb	0	; () banked
  9643  003436  6FE5               	movwf	(_errno+1)& (0+255),b
  9644  003438  0E21               	movlw	33
  9645  00343A  6FE4               	movwf	_errno& (0+255),b
  9646  00343C  0E00               	movlw	0
  9647  00343E  0100               	movlb	0	; () banked
  9648  003440  6FA2               	movwf	?_log& (0+255),b
  9649  003442  0E00               	movlw	0
  9650  003444  0100               	movlb	0	; () banked
  9651  003446  6FA3               	movwf	(?_log+1)& (0+255),b
  9652  003448  0E00               	movlw	0
  9653  00344A  0100               	movlb	0	; () banked
  9654  00344C  6FA4               	movwf	(?_log+2)& (0+255),b
  9655                           
  9656                           ; BSR set to: 0
  9657  00344E  0012               	return	
  9658  003450                     l6264:
  9659                           
  9660                           ; BSR set to: 0
  9661  003450  0100               	movlb	0	; () banked
  9662  003452  51A2               	movf	log@x& (0+255),w,b
  9663  003454  0100               	movlb	0	; () banked
  9664  003456  11A3               	iorwf	(log@x+1)& (0+255),w,b
  9665  003458  0100               	movlb	0	; () banked
  9666  00345A  11A4               	iorwf	(log@x+2)& (0+255),w,b
  9667  00345C  A4D8               	btfss	status,2,c
  9668  00345E  D00F               	goto	l6270
  9669                           
  9670                           ; BSR set to: 0
  9671  003460  0E00               	movlw	0
  9672  003462  0100               	movlb	0	; () banked
  9673  003464  6FE5               	movwf	(_errno+1)& (0+255),b
  9674  003466  0E22               	movlw	34
  9675  003468  6FE4               	movwf	_errno& (0+255),b
  9676  00346A  0E00               	movlw	0
  9677  00346C  0100               	movlb	0	; () banked
  9678  00346E  6FA2               	movwf	?_log& (0+255),b
  9679  003470  0E00               	movlw	0
  9680  003472  0100               	movlb	0	; () banked
  9681  003474  6FA3               	movwf	(?_log+1)& (0+255),b
  9682  003476  0E00               	movlw	0
  9683  003478  0100               	movlb	0	; () banked
  9684  00347A  6FA4               	movwf	(?_log+2)& (0+255),b
  9685                           
  9686                           ; BSR set to: 0
  9687  00347C  0012               	return	
  9688  00347E                     l6270:
  9689                           
  9690                           ; BSR set to: 0
  9691  00347E  0E00               	movlw	0
  9692  003480  0100               	movlb	0	; () banked
  9693  003482  6F74               	movwf	___ftmul@f2& (0+255),b
  9694  003484  0E00               	movlw	0
  9695  003486  0100               	movlb	0	; () banked
  9696  003488  6F75               	movwf	(___ftmul@f2+1)& (0+255),b
  9697  00348A  0E40               	movlw	64
  9698  00348C  0100               	movlb	0	; () banked
  9699  00348E  6F76               	movwf	(___ftmul@f2+2)& (0+255),b
  9700  003490  0EA5               	movlw	low log@exponent
  9701  003492  6E1E               	movwf	frexp@eptr,c
  9702  003494  0E00               	movlw	high log@exponent
  9703  003496  6E1F               	movwf	frexp@eptr+1,c
  9704  003498  C0A2  F01B         	movff	log@x,frexp@value
  9705  00349C  C0A3  F01C         	movff	log@x+1,frexp@value+1
  9706  0034A0  C0A4  F01D         	movff	log@x+2,frexp@value+2
  9707  0034A4  ECB5  F022         	call	_frexp	;wreg free
  9708  0034A8  C01B  F071         	movff	?_frexp,___ftmul@f1
  9709  0034AC  C01C  F072         	movff	?_frexp+1,___ftmul@f1+1
  9710  0034B0  C01D  F073         	movff	?_frexp+2,___ftmul@f1+2
  9711  0034B4  EC0E  F018         	call	___ftmul	;wreg free
  9712  0034B8  C071  F08A         	movff	?___ftmul,___ftadd@f1
  9713  0034BC  C072  F08B         	movff	?___ftmul+1,___ftadd@f1+1
  9714  0034C0  C073  F08C         	movff	?___ftmul+2,___ftadd@f1+2
  9715  0034C4  0E00               	movlw	0
  9716  0034C6  0100               	movlb	0	; () banked
  9717  0034C8  6F8D               	movwf	___ftadd@f2& (0+255),b
  9718  0034CA  0E80               	movlw	128
  9719  0034CC  0100               	movlb	0	; () banked
  9720  0034CE  6F8E               	movwf	(___ftadd@f2+1)& (0+255),b
  9721  0034D0  0EBF               	movlw	191
  9722  0034D2  0100               	movlb	0	; () banked
  9723  0034D4  6F8F               	movwf	(___ftadd@f2+2)& (0+255),b
  9724  0034D6  EC6D  F013         	call	___ftadd	;wreg free
  9725  0034DA  C08A  F0A2         	movff	?___ftadd,log@x
  9726  0034DE  C08B  F0A3         	movff	?___ftadd+1,log@x+1
  9727  0034E2  C08C  F0A4         	movff	?___ftadd+2,log@x+2
  9728  0034E6  0100               	movlb	0	; () banked
  9729  0034E8  07A5               	decf	log@exponent& (0+255),f,b
  9730  0034EA  A0D8               	btfss	status,0,c
  9731  0034EC  07A6               	decf	(log@exponent+1)& (0+255),f,b
  9732                           
  9733                           ; BSR set to: 0
  9734  0034EE  C0A2  F096         	movff	log@x,eval_poly@x
  9735  0034F2  C0A3  F097         	movff	log@x+1,eval_poly@x+1
  9736  0034F6  C0A4  F098         	movff	log@x+2,eval_poly@x+2
  9737  0034FA  0E77               	movlw	low log@coeff
  9738  0034FC  0100               	movlb	0	; () banked
  9739  0034FE  6F99               	movwf	eval_poly@d& (0+255),b
  9740  003500  0E06               	movlw	high log@coeff
  9741  003502  0100               	movlb	0	; () banked
  9742  003504  6F9A               	movwf	(eval_poly@d+1)& (0+255),b
  9743  003506  0E00               	movlw	0
  9744  003508  0100               	movlb	0	; () banked
  9745  00350A  6F9C               	movwf	(eval_poly@n+1)& (0+255),b
  9746  00350C  0E08               	movlw	8
  9747  00350E  6F9B               	movwf	eval_poly@n& (0+255),b
  9748  003510  EC8A  F01E         	call	_eval_poly	;wreg free
  9749  003514  C096  F0A2         	movff	?_eval_poly,log@x
  9750  003518  C097  F0A3         	movff	?_eval_poly+1,log@x+1
  9751  00351C  C098  F0A4         	movff	?_eval_poly+2,log@x+2
  9752  003520  0E72               	movlw	114
  9753  003522  0100               	movlb	0	; () banked
  9754  003524  6F74               	movwf	___ftmul@f2& (0+255),b
  9755  003526  0E31               	movlw	49
  9756  003528  0100               	movlb	0	; () banked
  9757  00352A  6F75               	movwf	(___ftmul@f2+1)& (0+255),b
  9758  00352C  0E3F               	movlw	63
  9759  00352E  0100               	movlb	0	; () banked
  9760  003530  6F76               	movwf	(___ftmul@f2+2)& (0+255),b
  9761  003532  C0A5  F060         	movff	log@exponent,___awtoft@c
  9762  003536  C0A6  F061         	movff	log@exponent+1,___awtoft@c+1
  9763  00353A  EC79  F025         	call	___awtoft	;wreg free
  9764  00353E  C060  F071         	movff	?___awtoft,___ftmul@f1
  9765  003542  C061  F072         	movff	?___awtoft+1,___ftmul@f1+1
  9766  003546  C062  F073         	movff	?___awtoft+2,___ftmul@f1+2
  9767  00354A  EC0E  F018         	call	___ftmul	;wreg free
  9768  00354E  C071  F08A         	movff	?___ftmul,___ftadd@f1
  9769  003552  C072  F08B         	movff	?___ftmul+1,___ftadd@f1+1
  9770  003556  C073  F08C         	movff	?___ftmul+2,___ftadd@f1+2
  9771  00355A  C0A2  F08D         	movff	log@x,___ftadd@f2
  9772  00355E  C0A3  F08E         	movff	log@x+1,___ftadd@f2+1
  9773  003562  C0A4  F08F         	movff	log@x+2,___ftadd@f2+2
  9774  003566  EC6D  F013         	call	___ftadd	;wreg free
  9775  00356A  C08A  F0A2         	movff	?___ftadd,?_log
  9776  00356E  C08B  F0A3         	movff	?___ftadd+1,?_log+1
  9777  003572  C08C  F0A4         	movff	?___ftadd+2,?_log+2
  9778  003576  0012               	return	
  9779  003578  0012               	return		;funcret
  9780  00357A                     __end_of_log:
  9781                           	opt stack 0
  9782                           tosu	equ	0xFFF
  9783                           tosh	equ	0xFFE
  9784                           tosl	equ	0xFFD
  9785                           pclath	equ	0xFFA
  9786                           tblptru	equ	0xFF8
  9787                           tblptrh	equ	0xFF7
  9788                           tblptrl	equ	0xFF6
  9789                           tablat	equ	0xFF5
  9790                           prodh	equ	0xFF4
  9791                           prodl	equ	0xFF3
  9792                           intcon	equ	0xFF2
  9793                           postinc0	equ	0xFEE
  9794                           wreg	equ	0xFE8
  9795                           indf2	equ	0xFDF
  9796                           postinc2	equ	0xFDE
  9797                           postdec2	equ	0xFDD
  9798                           plusw2	equ	0xFDB
  9799                           fsr2h	equ	0xFDA
  9800                           fsr2l	equ	0xFD9
  9801                           status	equ	0xFD8
  9802                           
  9803 ;; *************** function _frexp *****************
  9804 ;; Defined at:
  9805 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;  value           3   26[COMRAM] int 
  9808 ;;  eptr            2   29[COMRAM] PTR int 
  9809 ;;		 -> log@exponent(2), 
  9810 ;; Auto vars:     Size  Location     Type
  9811 ;;		None
  9812 ;; Return value:  Size  Location     Type
  9813 ;;                  3   26[COMRAM] PTR int 
  9814 ;; Registers used:
  9815 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9816 ;; Tracked objects:
  9817 ;;		On entry : 0/0
  9818 ;;		On exit  : 0/0
  9819 ;;		Unchanged: 0/0
  9820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9821 ;;      Params:         5       0       0       0       0       0       0
  9822 ;;      Locals:         0       0       0       0       0       0       0
  9823 ;;      Temps:          2       0       0       0       0       0       0
  9824 ;;      Totals:         7       0       0       0       0       0       0
  9825 ;;Total ram usage:        7 bytes
  9826 ;; Hardware stack levels used:    1
  9827 ;; Hardware stack levels required when called:    4
  9828 ;; This function calls:
  9829 ;;		Nothing
  9830 ;; This function is called by:
  9831 ;;		_log
  9832 ;; This function uses a non-reentrant model
  9833 ;;
  9834                           
  9835                           	psect	text32
  9836  00456A                     __ptext32:
  9837                           	opt stack 0
  9838  00456A                     _frexp:
  9839                           	opt stack 24
  9840                           
  9841                           ;incstack = 0
  9842  00456A  501B               	movf	frexp@value,w,c
  9843  00456C  101C               	iorwf	frexp@value+1,w,c
  9844  00456E  101D               	iorwf	frexp@value+2,w,c
  9845  004570  A4D8               	btfss	status,2,c
  9846  004572  D00F               	goto	l6144
  9847  004574  C01E  FFD9         	movff	frexp@eptr,fsr2l
  9848  004578  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  9849  00457C  0E00               	movlw	0
  9850  00457E  6EDE               	movwf	postinc2,c
  9851  004580  0E00               	movlw	0
  9852  004582  6EDD               	movwf	postdec2,c
  9853  004584  0E00               	movlw	0
  9854  004586  6E1B               	movwf	?_frexp,c
  9855  004588  0E00               	movlw	0
  9856  00458A  6E1C               	movwf	?_frexp+1,c
  9857  00458C  0E00               	movlw	0
  9858  00458E  6E1D               	movwf	?_frexp+2,c
  9859  004590  0012               	return	
  9860  004592                     l6144:
  9861  004592  501D               	movf	frexp@value+2,w,c
  9862  004594  0B7F               	andlw	127
  9863  004596  6E20               	movwf	??_frexp& (0+255),c
  9864  004598  6A21               	clrf	(??_frexp+1)& (0+255),c
  9865  00459A  90D8               	bcf	status,0,c
  9866  00459C  3620               	rlcf	??_frexp,f,c
  9867  00459E  3621               	rlcf	??_frexp+1,f,c
  9868  0045A0  C01E  FFD9         	movff	frexp@eptr,fsr2l
  9869  0045A4  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  9870  0045A8  C020  FFDE         	movff	??_frexp,postinc2
  9871  0045AC  C021  FFDD         	movff	??_frexp+1,postdec2
  9872  0045B0  AE1C               	btfss	frexp@value+1,7,c
  9873  0045B2  D003               	goto	u7070
  9874  0045B4  6A20               	clrf	??_frexp& (0+255),c
  9875  0045B6  2A20               	incf	??_frexp& (0+255),f,c
  9876  0045B8  D001               	goto	u7078
  9877  0045BA                     u7070:
  9878  0045BA  6A20               	clrf	??_frexp& (0+255),c
  9879  0045BC                     u7078:
  9880  0045BC  5020               	movf	??_frexp,w,c
  9881  0045BE  C01E  FFD9         	movff	frexp@eptr,fsr2l
  9882  0045C2  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  9883  0045C6  12DE               	iorwf	postinc2,f,c
  9884  0045C8  0E00               	movlw	0
  9885  0045CA  12DD               	iorwf	postdec2,f,c
  9886  0045CC  C01E  FFD9         	movff	frexp@eptr,fsr2l
  9887  0045D0  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  9888  0045D4  0E82               	movlw	130
  9889  0045D6  26DE               	addwf	postinc2,f,c
  9890  0045D8  0EFF               	movlw	255
  9891  0045DA  22DD               	addwfc	postdec2,f,c
  9892  0045DC  801D               	bsf	frexp@value+2,0,c
  9893  0045DE  821D               	bsf	frexp@value+2,1,c
  9894  0045E0  841D               	bsf	frexp@value+2,2,c
  9895  0045E2  861D               	bsf	frexp@value+2,3,c
  9896  0045E4  881D               	bsf	frexp@value+2,4,c
  9897  0045E6  8A1D               	bsf	frexp@value+2,5,c
  9898  0045E8  9C1D               	bcf	frexp@value+2,6,c
  9899  0045EA  9E1C               	bcf	frexp@value+1,7,c
  9900  0045EC  C01B  F01B         	movff	frexp@value,?_frexp
  9901  0045F0  C01C  F01C         	movff	frexp@value+1,?_frexp+1
  9902  0045F4  C01D  F01D         	movff	frexp@value+2,?_frexp+2
  9903  0045F8  0012               	return	
  9904  0045FA  0012               	return		;funcret
  9905  0045FC                     __end_of_frexp:
  9906                           	opt stack 0
  9907                           tosu	equ	0xFFF
  9908                           tosh	equ	0xFFE
  9909                           tosl	equ	0xFFD
  9910                           pclath	equ	0xFFA
  9911                           tblptru	equ	0xFF8
  9912                           tblptrh	equ	0xFF7
  9913                           tblptrl	equ	0xFF6
  9914                           tablat	equ	0xFF5
  9915                           prodh	equ	0xFF4
  9916                           prodl	equ	0xFF3
  9917                           intcon	equ	0xFF2
  9918                           postinc0	equ	0xFEE
  9919                           wreg	equ	0xFE8
  9920                           indf2	equ	0xFDF
  9921                           postinc2	equ	0xFDE
  9922                           postdec2	equ	0xFDD
  9923                           plusw2	equ	0xFDB
  9924                           fsr2h	equ	0xFDA
  9925                           fsr2l	equ	0xFD9
  9926                           status	equ	0xFD8
  9927                           
  9928 ;; *************** function _eval_poly *****************
  9929 ;; Defined at:
  9930 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  9931 ;; Parameters:    Size  Location     Type
  9932 ;;  x               3   54[BANK0 ] PTR int 
  9933 ;;  d               2   57[BANK0 ] PTR const 
  9934 ;;		 -> log@coeff(27), 
  9935 ;;  n               2   59[BANK0 ] int 
  9936 ;; Auto vars:     Size  Location     Type
  9937 ;;  res             3   63[BANK0 ] int 
  9938 ;; Return value:  Size  Location     Type
  9939 ;;                  3   54[BANK0 ] int 
  9940 ;; Registers used:
  9941 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9942 ;; Tracked objects:
  9943 ;;		On entry : 0/0
  9944 ;;		On exit  : 0/0
  9945 ;;		Unchanged: 0/0
  9946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9947 ;;      Params:         0       7       0       0       0       0       0
  9948 ;;      Locals:         0       3       0       0       0       0       0
  9949 ;;      Temps:          0       2       0       0       0       0       0
  9950 ;;      Totals:         0      12       0       0       0       0       0
  9951 ;;Total ram usage:       12 bytes
  9952 ;; Hardware stack levels used:    1
  9953 ;; Hardware stack levels required when called:    6
  9954 ;; This function calls:
  9955 ;;		___ftadd
  9956 ;;		___ftmul
  9957 ;;		___wmul
  9958 ;; This function is called by:
  9959 ;;		_log
  9960 ;; This function uses a non-reentrant model
  9961 ;;
  9962                           
  9963                           	psect	text33
  9964  003D14                     __ptext33:
  9965                           	opt stack 0
  9966  003D14                     _eval_poly:
  9967                           	opt stack 22
  9968                           
  9969                           ;incstack = 0
  9970  003D14  C09B  F060         	movff	eval_poly@n,___wmul@multiplier
  9971  003D18  C09C  F061         	movff	eval_poly@n+1,___wmul@multiplier+1
  9972  003D1C  0E00               	movlw	0
  9973  003D1E  0100               	movlb	0	; () banked
  9974  003D20  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9975  003D22  0E03               	movlw	3
  9976  003D24  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9977  003D26  ECEE  F025         	call	___wmul	;wreg free
  9978  003D2A  C099  F09D         	movff	eval_poly@d,??_eval_poly
  9979  003D2E  C09A  F09E         	movff	eval_poly@d+1,??_eval_poly+1
  9980  003D32  0100               	movlb	0	; () banked
  9981  003D34  5160               	movf	?___wmul& (0+255),w,b
  9982  003D36  0100               	movlb	0	; () banked
  9983  003D38  279D               	addwf	??_eval_poly& (0+255),f,b
  9984  003D3A  0100               	movlb	0	; () banked
  9985  003D3C  5161               	movf	(?___wmul+1)& (0+255),w,b
  9986  003D3E  0100               	movlb	0	; () banked
  9987  003D40  239E               	addwfc	(??_eval_poly+1)& (0+255),f,b
  9988  003D42  C09D  FFF6         	movff	??_eval_poly,tblptrl
  9989  003D46  C09E  FFF7         	movff	??_eval_poly+1,tblptrh
  9990  003D4A                     	if	0	;tblptru may be non-zero
  9991  003D4A                     	endif
  9992  003D4A                     	if	0	;tblptru may be non-zero
  9993  003D4A                     	endif
  9994  003D4A  0009               	tblrd		*+
  9995  003D4C  CFF5 F09F          	movff	tablat,eval_poly@res
  9996  003D50  0009               	tblrd		*+
  9997  003D52  CFF5 F0A0          	movff	tablat,eval_poly@res+1
  9998  003D56  000A               	tblrd		*-
  9999  003D58  CFF5 F0A1          	movff	tablat,eval_poly@res+2
 10000  003D5C  D045               	goto	l6160
 10001  003D5E                     l6158:
 10002                           
 10003                           ; BSR set to: 0
 10004  003D5E  C09F  F074         	movff	eval_poly@res,___ftmul@f2
 10005  003D62  C0A0  F075         	movff	eval_poly@res+1,___ftmul@f2+1
 10006  003D66  C0A1  F076         	movff	eval_poly@res+2,___ftmul@f2+2
 10007  003D6A  C096  F071         	movff	eval_poly@x,___ftmul@f1
 10008  003D6E  C097  F072         	movff	eval_poly@x+1,___ftmul@f1+1
 10009  003D72  C098  F073         	movff	eval_poly@x+2,___ftmul@f1+2
 10010  003D76  EC0E  F018         	call	___ftmul	;wreg free
 10011  003D7A  C071  F08A         	movff	?___ftmul,___ftadd@f1
 10012  003D7E  C072  F08B         	movff	?___ftmul+1,___ftadd@f1+1
 10013  003D82  C073  F08C         	movff	?___ftmul+2,___ftadd@f1+2
 10014  003D86  0E00               	movlw	0
 10015  003D88  0100               	movlb	0	; () banked
 10016  003D8A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10017  003D8C  0E03               	movlw	3
 10018  003D8E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10019  003D90  0100               	movlb	0	; () banked
 10020  003D92  079B               	decf	eval_poly@n& (0+255),f,b
 10021  003D94  A0D8               	btfss	status,0,c
 10022  003D96  079C               	decf	(eval_poly@n+1)& (0+255),f,b
 10023  003D98  C09B  F060         	movff	eval_poly@n,___wmul@multiplier
 10024  003D9C  C09C  F061         	movff	eval_poly@n+1,___wmul@multiplier+1
 10025  003DA0  ECEE  F025         	call	___wmul	;wreg free
 10026  003DA4  C099  F09D         	movff	eval_poly@d,??_eval_poly
 10027  003DA8  C09A  F09E         	movff	eval_poly@d+1,??_eval_poly+1
 10028  003DAC  0100               	movlb	0	; () banked
 10029  003DAE  5160               	movf	?___wmul& (0+255),w,b
 10030  003DB0  0100               	movlb	0	; () banked
 10031  003DB2  279D               	addwf	??_eval_poly& (0+255),f,b
 10032  003DB4  0100               	movlb	0	; () banked
 10033  003DB6  5161               	movf	(?___wmul+1)& (0+255),w,b
 10034  003DB8  0100               	movlb	0	; () banked
 10035  003DBA  239E               	addwfc	(??_eval_poly+1)& (0+255),f,b
 10036  003DBC  C09D  FFF6         	movff	??_eval_poly,tblptrl
 10037  003DC0  C09E  FFF7         	movff	??_eval_poly+1,tblptrh
 10038  003DC4                     	if	0	;tblptru may be non-zero
 10039  003DC4                     	endif
 10040  003DC4                     	if	0	;tblptru may be non-zero
 10041  003DC4                     	endif
 10042  003DC4  0009               	tblrd		*+
 10043  003DC6  CFF5 F08D          	movff	tablat,___ftadd@f2
 10044  003DCA  0009               	tblrd		*+
 10045  003DCC  CFF5 F08E          	movff	tablat,___ftadd@f2+1
 10046  003DD0  000A               	tblrd		*-
 10047  003DD2  CFF5 F08F          	movff	tablat,___ftadd@f2+2
 10048  003DD6  EC6D  F013         	call	___ftadd	;wreg free
 10049  003DDA  C08A  F09F         	movff	?___ftadd,eval_poly@res
 10050  003DDE  C08B  F0A0         	movff	?___ftadd+1,eval_poly@res+1
 10051  003DE2  C08C  F0A1         	movff	?___ftadd+2,eval_poly@res+2
 10052  003DE6  D000               	goto	l6160
 10053  003DE8                     l6160:
 10054  003DE8  0100               	movlb	0	; () banked
 10055  003DEA  519B               	movf	eval_poly@n& (0+255),w,b
 10056  003DEC  0100               	movlb	0	; () banked
 10057  003DEE  119C               	iorwf	(eval_poly@n+1)& (0+255),w,b
 10058  003DF0  A4D8               	btfss	status,2,c
 10059  003DF2  D7B5               	goto	l6158
 10060                           
 10061                           ; BSR set to: 0
 10062  003DF4  C09F  F096         	movff	eval_poly@res,?_eval_poly
 10063  003DF8  C0A0  F097         	movff	eval_poly@res+1,?_eval_poly+1
 10064  003DFC  C0A1  F098         	movff	eval_poly@res+2,?_eval_poly+2
 10065                           
 10066                           ; BSR set to: 0
 10067  003E00  0012               	return		;funcret
 10068  003E02                     __end_of_eval_poly:
 10069                           	opt stack 0
 10070                           tosu	equ	0xFFF
 10071                           tosh	equ	0xFFE
 10072                           tosl	equ	0xFFD
 10073                           pclath	equ	0xFFA
 10074                           tblptru	equ	0xFF8
 10075                           tblptrh	equ	0xFF7
 10076                           tblptrl	equ	0xFF6
 10077                           tablat	equ	0xFF5
 10078                           prodh	equ	0xFF4
 10079                           prodl	equ	0xFF3
 10080                           intcon	equ	0xFF2
 10081                           postinc0	equ	0xFEE
 10082                           wreg	equ	0xFE8
 10083                           indf2	equ	0xFDF
 10084                           postinc2	equ	0xFDE
 10085                           postdec2	equ	0xFDD
 10086                           plusw2	equ	0xFDB
 10087                           fsr2h	equ	0xFDA
 10088                           fsr2l	equ	0xFD9
 10089                           status	equ	0xFD8
 10090                           
 10091 ;; *************** function ___awtoft *****************
 10092 ;; Defined at:
 10093 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
 10094 ;; Parameters:    Size  Location     Type
 10095 ;;  c               2    0[BANK0 ] int 
 10096 ;; Auto vars:     Size  Location     Type
 10097 ;;  sign            1   40[COMRAM] unsigned char 
 10098 ;; Return value:  Size  Location     Type
 10099 ;;                  3    0[BANK0 ] float 
 10100 ;; Registers used:
 10101 ;;		wreg, status,2, status,0, cstack
 10102 ;; Tracked objects:
 10103 ;;		On entry : 0/0
 10104 ;;		On exit  : 0/0
 10105 ;;		Unchanged: 0/0
 10106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10107 ;;      Params:         0       3       0       0       0       0       0
 10108 ;;      Locals:         1       0       0       0       0       0       0
 10109 ;;      Temps:          0       0       0       0       0       0       0
 10110 ;;      Totals:         1       3       0       0       0       0       0
 10111 ;;Total ram usage:        4 bytes
 10112 ;; Hardware stack levels used:    1
 10113 ;; Hardware stack levels required when called:    5
 10114 ;; This function calls:
 10115 ;;		___ftpack
 10116 ;; This function is called by:
 10117 ;;		_Temp_Convert
 10118 ;;		_log
 10119 ;; This function uses a non-reentrant model
 10120 ;;
 10121                           
 10122                           	psect	text34
 10123  004AF2                     __ptext34:
 10124                           	opt stack 0
 10125  004AF2                     ___awtoft:
 10126                           	opt stack 23
 10127                           
 10128                           ; BSR set to: 0
 10129                           ;incstack = 0
 10130  004AF2  0E00               	movlw	0
 10131  004AF4  6E29               	movwf	___awtoft@sign,c
 10132  004AF6  0100               	movlb	0	; () banked
 10133  004AF8  AF61               	btfss	(___awtoft@c+1)& (0+255),7,b
 10134  004AFA  D008               	goto	l6132
 10135                           
 10136                           ; BSR set to: 0
 10137  004AFC  0100               	movlb	0	; () banked
 10138  004AFE  6D60               	negf	___awtoft@c& (0+255),b
 10139  004B00  1F61               	comf	(___awtoft@c+1)& (0+255),f,b
 10140  004B02  B0D8               	btfsc	status,0,c
 10141  004B04  2B61               	incf	(___awtoft@c+1)& (0+255),f,b
 10142                           
 10143                           ; BSR set to: 0
 10144  004B06  0E01               	movlw	1
 10145  004B08  6E29               	movwf	___awtoft@sign,c
 10146  004B0A  D000               	goto	l6132
 10147  004B0C                     l6132:
 10148                           
 10149                           ; BSR set to: 0
 10150  004B0C  C060  F01B         	movff	___awtoft@c,___ftpack@arg
 10151  004B10  C061  F01C         	movff	___awtoft@c+1,___ftpack@arg+1
 10152  004B14  6A1D               	clrf	___ftpack@arg+2,c
 10153  004B16  0E8E               	movlw	142
 10154  004B18  6E1E               	movwf	___ftpack@exp,c
 10155  004B1A  C029  F01F         	movff	___awtoft@sign,___ftpack@sign
 10156  004B1E  EC24  F021         	call	___ftpack	;wreg free
 10157  004B22  C01B  F060         	movff	?___ftpack,?___awtoft
 10158  004B26  C01C  F061         	movff	?___ftpack+1,?___awtoft+1
 10159  004B2A  C01D  F062         	movff	?___ftpack+2,?___awtoft+2
 10160  004B2E  0012               	return	
 10161  004B30  0012               	return		;funcret
 10162  004B32                     __end_of___awtoft:
 10163                           	opt stack 0
 10164                           tosu	equ	0xFFF
 10165                           tosh	equ	0xFFE
 10166                           tosl	equ	0xFFD
 10167                           pclath	equ	0xFFA
 10168                           tblptru	equ	0xFF8
 10169                           tblptrh	equ	0xFF7
 10170                           tblptrl	equ	0xFF6
 10171                           tablat	equ	0xFF5
 10172                           prodh	equ	0xFF4
 10173                           prodl	equ	0xFF3
 10174                           intcon	equ	0xFF2
 10175                           postinc0	equ	0xFEE
 10176                           wreg	equ	0xFE8
 10177                           indf2	equ	0xFDF
 10178                           postinc2	equ	0xFDE
 10179                           postdec2	equ	0xFDD
 10180                           plusw2	equ	0xFDB
 10181                           fsr2h	equ	0xFDA
 10182                           fsr2l	equ	0xFD9
 10183                           status	equ	0xFD8
 10184                           
 10185 ;; *************** function ___ftsub *****************
 10186 ;; Defined at:
 10187 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 10188 ;; Parameters:    Size  Location     Type
 10189 ;;  f1              3   54[BANK0 ] float 
 10190 ;;  f2              3   57[BANK0 ] float 
 10191 ;; Auto vars:     Size  Location     Type
 10192 ;;		None
 10193 ;; Return value:  Size  Location     Type
 10194 ;;                  3   54[BANK0 ] float 
 10195 ;; Registers used:
 10196 ;;		wreg, status,2, status,0, cstack
 10197 ;; Tracked objects:
 10198 ;;		On entry : 0/0
 10199 ;;		On exit  : 0/0
 10200 ;;		Unchanged: 0/0
 10201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10202 ;;      Params:         0       6       0       0       0       0       0
 10203 ;;      Locals:         0       0       0       0       0       0       0
 10204 ;;      Temps:          0       0       0       0       0       0       0
 10205 ;;      Totals:         0       6       0       0       0       0       0
 10206 ;;Total ram usage:        6 bytes
 10207 ;; Hardware stack levels used:    1
 10208 ;; Hardware stack levels required when called:    6
 10209 ;; This function calls:
 10210 ;;		___ftadd
 10211 ;; This function is called by:
 10212 ;;		_Temp_Convert
 10213 ;;		_printf
 10214 ;; This function uses a non-reentrant model
 10215 ;;
 10216                           
 10217                           	psect	text35
 10218  004A06                     __ptext35:
 10219                           	opt stack 0
 10220  004A06                     ___ftsub:
 10221                           	opt stack 23
 10222                           
 10223                           ;incstack = 0
 10224  004A06  0100               	movlb	0	; () banked
 10225  004A08  5199               	movf	___ftsub@f2& (0+255),w,b
 10226  004A0A  0100               	movlb	0	; () banked
 10227  004A0C  119A               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10228  004A0E  0100               	movlb	0	; () banked
 10229  004A10  119B               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10230  004A12  B4D8               	btfsc	status,2,c
 10231  004A14  D00A               	goto	l6732
 10232                           
 10233                           ; BSR set to: 0
 10234  004A16  0E00               	movlw	0
 10235  004A18  0100               	movlb	0	; () banked
 10236  004A1A  1B99               	xorwf	___ftsub@f2& (0+255),f,b
 10237  004A1C  0E00               	movlw	0
 10238  004A1E  0100               	movlb	0	; () banked
 10239  004A20  1B9A               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10240  004A22  0E80               	movlw	128
 10241  004A24  0100               	movlb	0	; () banked
 10242  004A26  1B9B               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10243  004A28  D000               	goto	l6732
 10244  004A2A                     l6732:
 10245                           
 10246                           ; BSR set to: 0
 10247  004A2A  C096  F08A         	movff	___ftsub@f1,___ftadd@f1
 10248  004A2E  C097  F08B         	movff	___ftsub@f1+1,___ftadd@f1+1
 10249  004A32  C098  F08C         	movff	___ftsub@f1+2,___ftadd@f1+2
 10250  004A36  C099  F08D         	movff	___ftsub@f2,___ftadd@f2
 10251  004A3A  C09A  F08E         	movff	___ftsub@f2+1,___ftadd@f2+1
 10252  004A3E  C09B  F08F         	movff	___ftsub@f2+2,___ftadd@f2+2
 10253  004A42  EC6D  F013         	call	___ftadd	;wreg free
 10254  004A46  C08A  F096         	movff	?___ftadd,?___ftsub
 10255  004A4A  C08B  F097         	movff	?___ftadd+1,?___ftsub+1
 10256  004A4E  C08C  F098         	movff	?___ftadd+2,?___ftsub+2
 10257  004A52  0012               	return	
 10258  004A54  0012               	return		;funcret
 10259  004A56                     __end_of___ftsub:
 10260                           	opt stack 0
 10261                           tosu	equ	0xFFF
 10262                           tosh	equ	0xFFE
 10263                           tosl	equ	0xFFD
 10264                           pclath	equ	0xFFA
 10265                           tblptru	equ	0xFF8
 10266                           tblptrh	equ	0xFF7
 10267                           tblptrl	equ	0xFF6
 10268                           tablat	equ	0xFF5
 10269                           prodh	equ	0xFF4
 10270                           prodl	equ	0xFF3
 10271                           intcon	equ	0xFF2
 10272                           postinc0	equ	0xFEE
 10273                           wreg	equ	0xFE8
 10274                           indf2	equ	0xFDF
 10275                           postinc2	equ	0xFDE
 10276                           postdec2	equ	0xFDD
 10277                           plusw2	equ	0xFDB
 10278                           fsr2h	equ	0xFDA
 10279                           fsr2l	equ	0xFD9
 10280                           status	equ	0xFD8
 10281                           
 10282 ;; *************** function _Temp_Filter *****************
 10283 ;; Defined at:
 10284 ;;		line 49 in file "Tempeture.c"
 10285 ;; Parameters:    Size  Location     Type
 10286 ;;		None
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;  x               2   54[BANK0 ] int 
 10289 ;; Return value:  Size  Location     Type
 10290 ;;		None               void
 10291 ;; Registers used:
 10292 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10293 ;; Tracked objects:
 10294 ;;		On entry : 0/0
 10295 ;;		On exit  : 0/0
 10296 ;;		Unchanged: 0/0
 10297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10298 ;;      Params:         0       0       0       0       0       0       0
 10299 ;;      Locals:         0       2       0       0       0       0       0
 10300 ;;      Temps:          0       0       0       0       0       0       0
 10301 ;;      Totals:         0       2       0       0       0       0       0
 10302 ;;Total ram usage:        2 bytes
 10303 ;; Hardware stack levels used:    1
 10304 ;; Hardware stack levels required when called:    6
 10305 ;; This function calls:
 10306 ;;		___ftadd
 10307 ;;		___ftmul
 10308 ;;		___wmul
 10309 ;; This function is called by:
 10310 ;;		_Temp_Convert
 10311 ;; This function uses a non-reentrant model
 10312 ;;
 10313                           
 10314                           	psect	text36
 10315  002B6E                     __ptext36:
 10316                           	opt stack 0
 10317  002B6E                     _Temp_Filter:
 10318                           	opt stack 23
 10319                           
 10320                           ;Tempeture.c: 52: int x;
 10321                           ;Tempeture.c: 53: for(x = 0; x < 10; x++)
 10322                           
 10323                           ;incstack = 0
 10324  002B6E  0E00               	movlw	0
 10325  002B70  0100               	movlb	0	; () banked
 10326  002B72  6F97               	movwf	(Temp_Filter@x+1)& (0+255),b
 10327  002B74  0E00               	movlw	0
 10328  002B76  6F96               	movwf	Temp_Filter@x& (0+255),b
 10329                           
 10330                           ; BSR set to: 0
 10331  002B78  0100               	movlb	0	; () banked
 10332  002B7A  BF97               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
 10333  002B7C  D00A               	goto	l6240
 10334  002B7E  0100               	movlb	0	; () banked
 10335  002B80  5197               	movf	(Temp_Filter@x+1)& (0+255),w,b
 10336  002B82  E106               	bnz	u7130
 10337  002B84  0E0A               	movlw	10
 10338  002B86  0100               	movlb	0	; () banked
 10339  002B88  5D96               	subwf	Temp_Filter@x& (0+255),w,b
 10340  002B8A  B0D8               	btfsc	status,0,c
 10341  002B8C  D07C               	goto	l6246
 10342  002B8E  D001               	goto	l6240
 10343  002B90                     u7130:
 10344                           
 10345                           ; BSR set to: 0
 10346  002B90  D07A               	goto	l6246
 10347  002B92                     l6240:
 10348                           
 10349                           ; BSR set to: 0
 10350                           ;Tempeture.c: 54: {
 10351                           ;Tempeture.c: 55: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
 10352  002B92  C096  F060         	movff	Temp_Filter@x,___wmul@multiplier
 10353  002B96  C097  F061         	movff	Temp_Filter@x+1,___wmul@multiplier+1
 10354  002B9A  0E00               	movlw	0
 10355  002B9C  0100               	movlb	0	; () banked
 10356  002B9E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10357  002BA0  0E03               	movlw	3
 10358  002BA2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10359  002BA4  ECEE  F025         	call	___wmul	;wreg free
 10360  002BA8  0E5A               	movlw	low _Temp_DegF
 10361  002BAA  0100               	movlb	0	; () banked
 10362  002BAC  2560               	addwf	?___wmul& (0+255),w,b
 10363  002BAE  6ED9               	movwf	fsr2l,c
 10364  002BB0  0E01               	movlw	high _Temp_DegF
 10365  002BB2  0100               	movlb	0	; () banked
 10366  002BB4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10367  002BB6  6EDA               	movwf	fsr2h,c
 10368  002BB8  0E48               	movlw	72
 10369  002BBA  0100               	movlb	0	; () banked
 10370  002BBC  6F74               	movwf	___ftmul@f2& (0+255),b
 10371  002BBE  0E61               	movlw	97
 10372  002BC0  0100               	movlb	0	; () banked
 10373  002BC2  6F75               	movwf	(___ftmul@f2+1)& (0+255),b
 10374  002BC4  0E3F               	movlw	63
 10375  002BC6  0100               	movlb	0	; () banked
 10376  002BC8  6F76               	movwf	(___ftmul@f2+2)& (0+255),b
 10377  002BCA  C096  F060         	movff	Temp_Filter@x,___wmul@multiplier
 10378  002BCE  C097  F061         	movff	Temp_Filter@x+1,___wmul@multiplier+1
 10379  002BD2  0E00               	movlw	0
 10380  002BD4  0100               	movlb	0	; () banked
 10381  002BD6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10382  002BD8  0E03               	movlw	3
 10383  002BDA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10384  002BDC  ECEE  F025         	call	___wmul	;wreg free
 10385  002BE0  0EBE               	movlw	low _TmpTemp_DegF
 10386  002BE2  0100               	movlb	0	; () banked
 10387  002BE4  2560               	addwf	?___wmul& (0+255),w,b
 10388  002BE6  6EE1               	movwf	fsr1l,c
 10389  002BE8  0E01               	movlw	high _TmpTemp_DegF
 10390  002BEA  0100               	movlb	0	; () banked
 10391  002BEC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10392  002BEE  6EE2               	movwf	fsr1h,c
 10393  002BF0  CFE6 F071          	movff	postinc1,___ftmul@f1
 10394  002BF4  CFE6 F072          	movff	postinc1,___ftmul@f1+1
 10395  002BF8  CFE5 F073          	movff	postdec1,___ftmul@f1+2
 10396  002BFC  EC0E  F018         	call	___ftmul	;wreg free
 10397  002C00  C071  F08A         	movff	?___ftmul,___ftadd@f1
 10398  002C04  C072  F08B         	movff	?___ftmul+1,___ftadd@f1+1
 10399  002C08  C073  F08C         	movff	?___ftmul+2,___ftadd@f1+2
 10400  002C0C  0EC3               	movlw	195
 10401  002C0E  0100               	movlb	0	; () banked
 10402  002C10  6F74               	movwf	___ftmul@f2& (0+255),b
 10403  002C12  0EF5               	movlw	245
 10404  002C14  0100               	movlb	0	; () banked
 10405  002C16  6F75               	movwf	(___ftmul@f2+1)& (0+255),b
 10406  002C18  0E3D               	movlw	61
 10407  002C1A  0100               	movlb	0	; () banked
 10408  002C1C  6F76               	movwf	(___ftmul@f2+2)& (0+255),b
 10409  002C1E  0E00               	movlw	0
 10410  002C20  0100               	movlb	0	; () banked
 10411  002C22  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10412  002C24  0E03               	movlw	3
 10413  002C26  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10414  002C28  C096  F060         	movff	Temp_Filter@x,___wmul@multiplier
 10415  002C2C  C097  F061         	movff	Temp_Filter@x+1,___wmul@multiplier+1
 10416  002C30  ECEE  F025         	call	___wmul	;wreg free
 10417  002C34  0E3C               	movlw	low _PrevTemp_DegF
 10418  002C36  0100               	movlb	0	; () banked
 10419  002C38  2560               	addwf	?___wmul& (0+255),w,b
 10420  002C3A  6EE1               	movwf	fsr1l,c
 10421  002C3C  0E01               	movlw	high _PrevTemp_DegF
 10422  002C3E  0100               	movlb	0	; () banked
 10423  002C40  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10424  002C42  6EE2               	movwf	fsr1h,c
 10425  002C44  CFE6 F071          	movff	postinc1,___ftmul@f1
 10426  002C48  CFE6 F072          	movff	postinc1,___ftmul@f1+1
 10427  002C4C  CFE5 F073          	movff	postdec1,___ftmul@f1+2
 10428  002C50  EC0E  F018         	call	___ftmul	;wreg free
 10429  002C54  C071  F08D         	movff	?___ftmul,___ftadd@f2
 10430  002C58  C072  F08E         	movff	?___ftmul+1,___ftadd@f2+1
 10431  002C5C  C073  F08F         	movff	?___ftmul+2,___ftadd@f2+2
 10432  002C60  EC6D  F013         	call	___ftadd	;wreg free
 10433  002C64  C08A  FFDE         	movff	?___ftadd,postinc2
 10434  002C68  C08B  FFDE         	movff	?___ftadd+1,postinc2
 10435  002C6C  C08C  FFDE         	movff	?___ftadd+2,postinc2
 10436  002C70  0100               	movlb	0	; () banked
 10437  002C72  4B96               	infsnz	Temp_Filter@x& (0+255),f,b
 10438  002C74  2B97               	incf	(Temp_Filter@x+1)& (0+255),f,b
 10439                           
 10440                           ; BSR set to: 0
 10441  002C76  0100               	movlb	0	; () banked
 10442  002C78  BF97               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
 10443  002C7A  D78B               	goto	l6240
 10444  002C7C  0100               	movlb	0	; () banked
 10445  002C7E  5197               	movf	(Temp_Filter@x+1)& (0+255),w,b
 10446  002C80  E102               	bnz	l6246
 10447  002C82  D780               	goto	L6
 10448  002C84  D000               	goto	l6246
 10449  002C86                     l6246:
 10450                           
 10451                           ; BSR set to: 0
 10452                           ;Tempeture.c: 56: }
 10453                           ;Tempeture.c: 57: for(x = 0; x < 10; x++)
 10454  002C86  0E00               	movlw	0
 10455  002C88  0100               	movlb	0	; () banked
 10456  002C8A  6F97               	movwf	(Temp_Filter@x+1)& (0+255),b
 10457  002C8C  0E00               	movlw	0
 10458  002C8E  6F96               	movwf	Temp_Filter@x& (0+255),b
 10459  002C90                     l6248:
 10460                           
 10461                           ; BSR set to: 0
 10462  002C90  0100               	movlb	0	; () banked
 10463  002C92  BF97               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
 10464  002C94  D00A               	goto	l6252
 10465  002C96  0100               	movlb	0	; () banked
 10466  002C98  5197               	movf	(Temp_Filter@x+1)& (0+255),w,b
 10467  002C9A  E138               	bnz	l344
 10468  002C9C  0E0A               	movlw	10
 10469  002C9E  0100               	movlb	0	; () banked
 10470  002CA0  5D96               	subwf	Temp_Filter@x& (0+255),w,b
 10471  002CA2  B0D8               	btfsc	status,0,c
 10472  002CA4  0012               	return	
 10473  002CA6  D001               	goto	l6252
 10474                           
 10475                           ; BSR set to: 0
 10476  002CA8  0012               	return	
 10477  002CAA                     l6252:
 10478                           
 10479                           ; BSR set to: 0
 10480                           ;Tempeture.c: 58: {
 10481                           ;Tempeture.c: 59: PrevTemp_DegF[x] = Temp_DegF[x];
 10482  002CAA  C096  F060         	movff	Temp_Filter@x,___wmul@multiplier
 10483  002CAE  C097  F061         	movff	Temp_Filter@x+1,___wmul@multiplier+1
 10484  002CB2  0E00               	movlw	0
 10485  002CB4  0100               	movlb	0	; () banked
 10486  002CB6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10487  002CB8  0E03               	movlw	3
 10488  002CBA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10489  002CBC  ECEE  F025         	call	___wmul	;wreg free
 10490  002CC0  0E5A               	movlw	low _Temp_DegF
 10491  002CC2  0100               	movlb	0	; () banked
 10492  002CC4  2560               	addwf	?___wmul& (0+255),w,b
 10493  002CC6  6ED9               	movwf	fsr2l,c
 10494  002CC8  0E01               	movlw	high _Temp_DegF
 10495  002CCA  0100               	movlb	0	; () banked
 10496  002CCC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10497  002CCE  6EDA               	movwf	fsr2h,c
 10498  002CD0  C096  F060         	movff	Temp_Filter@x,___wmul@multiplier
 10499  002CD4  C097  F061         	movff	Temp_Filter@x+1,___wmul@multiplier+1
 10500  002CD8  0E00               	movlw	0
 10501  002CDA  0100               	movlb	0	; () banked
 10502  002CDC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10503  002CDE  0E03               	movlw	3
 10504  002CE0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10505  002CE2  ECEE  F025         	call	___wmul	;wreg free
 10506  002CE6  0E3C               	movlw	low _PrevTemp_DegF
 10507  002CE8  0100               	movlb	0	; () banked
 10508  002CEA  2560               	addwf	?___wmul& (0+255),w,b
 10509  002CEC  6EE1               	movwf	fsr1l,c
 10510  002CEE  0E01               	movlw	high _PrevTemp_DegF
 10511  002CF0  0100               	movlb	0	; () banked
 10512  002CF2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10513  002CF4  6EE2               	movwf	fsr1h,c
 10514  002CF6  CFDE FFE6          	movff	postinc2,postinc1
 10515  002CFA  CFDE FFE6          	movff	postinc2,postinc1
 10516  002CFE  CFDE FFE6          	movff	postinc2,postinc1
 10517                           
 10518                           ; BSR set to: 0
 10519  002D02  0100               	movlb	0	; () banked
 10520  002D04  4B96               	infsnz	Temp_Filter@x& (0+255),f,b
 10521  002D06  2B97               	incf	(Temp_Filter@x+1)& (0+255),f,b
 10522  002D08  D7C3               	goto	l6248
 10523                           
 10524                           ; BSR set to: 0
 10525  002D0A  0012               	return	
 10526  002D0C                     l344:
 10527                           
 10528                           ; BSR set to: 0
 10529  002D0C  0012               	return		;funcret
 10530  002D0E                     __end_of_Temp_Filter:
 10531                           	opt stack 0
 10532                           tosu	equ	0xFFF
 10533                           tosh	equ	0xFFE
 10534                           tosl	equ	0xFFD
 10535                           pclath	equ	0xFFA
 10536                           tblptru	equ	0xFF8
 10537                           tblptrh	equ	0xFF7
 10538                           tblptrl	equ	0xFF6
 10539                           tablat	equ	0xFF5
 10540                           prodh	equ	0xFF4
 10541                           prodl	equ	0xFF3
 10542                           intcon	equ	0xFF2
 10543                           postinc0	equ	0xFEE
 10544                           wreg	equ	0xFE8
 10545                           postinc1	equ	0xFE6
 10546                           postdec1	equ	0xFE5
 10547                           fsr1h	equ	0xFE2
 10548                           fsr1l	equ	0xFE1
 10549                           indf2	equ	0xFDF
 10550                           postinc2	equ	0xFDE
 10551                           postdec2	equ	0xFDD
 10552                           plusw2	equ	0xFDB
 10553                           fsr2h	equ	0xFDA
 10554                           fsr2l	equ	0xFD9
 10555                           status	equ	0xFD8
 10556                           
 10557 ;; *************** function _SYSTEM_Initialize *****************
 10558 ;; Defined at:
 10559 ;;		line 113 in file "mcc_generated_files/mcc.c"
 10560 ;; Parameters:    Size  Location     Type
 10561 ;;		None
 10562 ;; Auto vars:     Size  Location     Type
 10563 ;;		None
 10564 ;; Return value:  Size  Location     Type
 10565 ;;		None               void
 10566 ;; Registers used:
 10567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10568 ;; Tracked objects:
 10569 ;;		On entry : 0/0
 10570 ;;		On exit  : 0/0
 10571 ;;		Unchanged: 0/0
 10572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10573 ;;      Params:         0       0       0       0       0       0       0
 10574 ;;      Locals:         0       0       0       0       0       0       0
 10575 ;;      Temps:          0       0       0       0       0       0       0
 10576 ;;      Totals:         0       0       0       0       0       0       0
 10577 ;;Total ram usage:        0 bytes
 10578 ;; Hardware stack levels used:    1
 10579 ;; Hardware stack levels required when called:    7
 10580 ;; This function calls:
 10581 ;;		_ADC_Initialize
 10582 ;;		_INTERRUPT_Initialize
 10583 ;;		_OSCILLATOR_Initialize
 10584 ;;		_PIN_MANAGER_Initialize
 10585 ;;		_TMR1_Initialize
 10586 ;;		_UART_init
 10587 ;;		_begin
 10588 ;; This function is called by:
 10589 ;;		_main
 10590 ;; This function uses a non-reentrant model
 10591 ;;
 10592                           
 10593                           	psect	text37
 10594  00488A                     __ptext37:
 10595                           	opt stack 0
 10596  00488A                     _SYSTEM_Initialize:
 10597                           	opt stack 23
 10598                           
 10599                           ;mcc.c: 114: OSCILLATOR_Initialize();
 10600                           
 10601                           ; BSR set to: 0
 10602                           ;incstack = 0
 10603  00488A  EC52  F027         	call	_OSCILLATOR_Initialize	;wreg free
 10604                           
 10605                           ;mcc.c: 115: PIN_MANAGER_Initialize();
 10606  00488E  EC2B  F025         	call	_PIN_MANAGER_Initialize	;wreg free
 10607                           
 10608                           ;mcc.c: 116: INTERRUPT_Initialize();
 10609  004892  EC59  F027         	call	_INTERRUPT_Initialize	;wreg free
 10610                           
 10611                           ;mcc.c: 117: ADC_Initialize();
 10612  004896  EC07  F027         	call	_ADC_Initialize	;wreg free
 10613                           
 10614                           ;mcc.c: 120: UART_init();
 10615  00489A  EC99  F025         	call	_UART_init	;wreg free
 10616                           
 10617                           ;mcc.c: 121: TMR1_Initialize();
 10618  00489E  ECB3  F026         	call	_TMR1_Initialize	;wreg free
 10619                           
 10620                           ;mcc.c: 123: begin(receiveArray, sizeof (receiveArray), 1, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
 10621  0048A2  0E78               	movlw	low _receiveArray
 10622  0048A4  0100               	movlb	0	; () banked
 10623  0048A6  6F60               	movwf	begin@ptr& (0+255),b
 10624  0048A8  0E01               	movlw	high _receiveArray
 10625  0048AA  0100               	movlb	0	; () banked
 10626  0048AC  6F61               	movwf	(begin@ptr+1)& (0+255),b
 10627  0048AE  0E28               	movlw	40
 10628  0048B0  0100               	movlb	0	; () banked
 10629  0048B2  6F62               	movwf	begin@maxSize& (0+255),b
 10630  0048B4  0E01               	movlw	1
 10631  0048B6  0100               	movlb	0	; () banked
 10632  0048B8  6F63               	movwf	begin@givenAddress& (0+255),b
 10633  0048BA  0E00               	movlw	0
 10634  0048BC  0100               	movlb	0	; () banked
 10635  0048BE  6F64               	movwf	begin@error& (0+255),b
 10636  0048C0  0E42               	movlw	low _Send_put
 10637  0048C2  0100               	movlb	0	; () banked
 10638  0048C4  6F65               	movwf	begin@stufftosend& (0+255),b
 10639  0048C6  0E4C               	movlw	high _Send_put
 10640  0048C8  0100               	movlb	0	; () banked
 10641  0048CA  6F66               	movwf	(begin@stufftosend+1)& (0+255),b
 10642  0048CC  0E94               	movlw	low _Receive_get
 10643  0048CE  0100               	movlb	0	; () banked
 10644  0048D0  6F67               	movwf	begin@stufftoreceive& (0+255),b
 10645  0048D2  0E4E               	movlw	high _Receive_get
 10646  0048D4  0100               	movlb	0	; () banked
 10647  0048D6  6F68               	movwf	(begin@stufftoreceive+1)& (0+255),b
 10648  0048D8  0EDE               	movlw	low _Receive_available
 10649  0048DA  0100               	movlb	0	; () banked
 10650  0048DC  6F69               	movwf	begin@stuffavailable& (0+255),b
 10651  0048DE  0E4D               	movlw	high _Receive_available
 10652  0048E0  0100               	movlb	0	; () banked
 10653  0048E2  6F6A               	movwf	(begin@stuffavailable+1)& (0+255),b
 10654  0048E4  0E84               	movlw	low _Receive_peek
 10655  0048E6  0100               	movlb	0	; () banked
 10656  0048E8  6F6B               	movwf	begin@stuffpeek& (0+255),b
 10657  0048EA  0E4E               	movlw	high _Receive_peek
 10658  0048EC  0100               	movlb	0	; () banked
 10659  0048EE  6F6C               	movwf	(begin@stuffpeek+1)& (0+255),b
 10660  0048F0  ECAD  F024         	call	_begin	;wreg free
 10661  0048F4  0012               	return		;funcret
 10662  0048F6                     __end_of_SYSTEM_Initialize:
 10663                           	opt stack 0
 10664                           tosu	equ	0xFFF
 10665                           tosh	equ	0xFFE
 10666                           tosl	equ	0xFFD
 10667                           pclath	equ	0xFFA
 10668                           tblptru	equ	0xFF8
 10669                           tblptrh	equ	0xFF7
 10670                           tblptrl	equ	0xFF6
 10671                           tablat	equ	0xFF5
 10672                           prodh	equ	0xFF4
 10673                           prodl	equ	0xFF3
 10674                           intcon	equ	0xFF2
 10675                           postinc0	equ	0xFEE
 10676                           wreg	equ	0xFE8
 10677                           postinc1	equ	0xFE6
 10678                           postdec1	equ	0xFE5
 10679                           fsr1h	equ	0xFE2
 10680                           fsr1l	equ	0xFE1
 10681                           indf2	equ	0xFDF
 10682                           postinc2	equ	0xFDE
 10683                           postdec2	equ	0xFDD
 10684                           plusw2	equ	0xFDB
 10685                           fsr2h	equ	0xFDA
 10686                           fsr2l	equ	0xFD9
 10687                           status	equ	0xFD8
 10688                           
 10689 ;; *************** function _begin *****************
 10690 ;; Defined at:
 10691 ;;		line 18 in file "FastTransfer.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;  ptr             2    0[BANK0 ] PTR volatile int 
 10694 ;;		 -> receiveArray(40), 
 10695 ;;  maxSize         1    2[BANK0 ] unsigned char 
 10696 ;;  givenAddress    1    3[BANK0 ] unsigned char 
 10697 ;;  error           1    4[BANK0 ] unsigned char 
 10698 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
 10699 ;;		 -> Send_put(0), 
 10700 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
 10701 ;;		 -> Receive_get(1), 
 10702 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
 10703 ;;		 -> Receive_available(2), 
 10704 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
 10705 ;;		 -> Receive_peek(1), 
 10706 ;; Auto vars:     Size  Location     Type
 10707 ;;		None
 10708 ;; Return value:  Size  Location     Type
 10709 ;;		None               void
 10710 ;; Registers used:
 10711 ;;		wreg, status,2, status,0, cstack
 10712 ;; Tracked objects:
 10713 ;;		On entry : 0/0
 10714 ;;		On exit  : 0/0
 10715 ;;		Unchanged: 0/0
 10716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10717 ;;      Params:         0      13       0       0       0       0       0
 10718 ;;      Locals:         0       0       0       0       0       0       0
 10719 ;;      Temps:          0       0       0       0       0       0       0
 10720 ;;      Totals:         0      13       0       0       0       0       0
 10721 ;;Total ram usage:       13 bytes
 10722 ;; Hardware stack levels used:    1
 10723 ;; Hardware stack levels required when called:    5
 10724 ;; This function calls:
 10725 ;;		___awdiv
 10726 ;; This function is called by:
 10727 ;;		_SYSTEM_Initialize
 10728 ;; This function uses a non-reentrant model
 10729 ;;
 10730                           
 10731                           	psect	text38
 10732  00495A                     __ptext38:
 10733                           	opt stack 0
 10734  00495A                     _begin:
 10735                           	opt stack 24
 10736                           
 10737                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
 10738                           
 10739                           ;incstack = 0
 10740  00495A  C060  F0E6         	movff	begin@ptr,_receiveArrayAddress
 10741  00495E  C061  F0E7         	movff	begin@ptr+1,_receiveArrayAddress+1
 10742                           
 10743                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
 10744  004962  C063  F03E         	movff	begin@givenAddress,_moduleAddress
 10745                           
 10746                           ;FastTransfer.c: 21: serial_write = stufftosend;
 10747  004966  C065  F035         	movff	begin@stufftosend,_serial_write
 10748  00496A  C066  F036         	movff	begin@stufftosend+1,_serial_write+1
 10749                           
 10750                           ;FastTransfer.c: 22: serial_available = stuffavailable;
 10751  00496E  C069  F031         	movff	begin@stuffavailable,_serial_available
 10752  004972  C06A  F032         	movff	begin@stuffavailable+1,_serial_available+1
 10753                           
 10754                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
 10755  004976  C06B  F0E8         	movff	begin@stuffpeek,_serial_peek
 10756  00497A  C06C  F0E9         	movff	begin@stuffpeek+1,_serial_peek+1
 10757                           
 10758                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
 10759  00497E  C067  F033         	movff	begin@stufftoreceive,_serial_read
 10760  004982  C068  F034         	movff	begin@stufftoreceive+1,_serial_read+1
 10761                           
 10762                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
 10763  004986  C062  F021         	movff	begin@maxSize,___awdiv@dividend
 10764  00498A  6A22               	clrf	___awdiv@dividend+1,c
 10765  00498C  0E00               	movlw	0
 10766  00498E  6E24               	movwf	___awdiv@divisor+1,c
 10767  004990  0E02               	movlw	2
 10768  004992  6E23               	movwf	___awdiv@divisor,c
 10769  004994  ECD6  F021         	call	___awdiv	;wreg free
 10770  004998  5021               	movf	?___awdiv,w,c
 10771  00499A  6E3D               	movwf	_maxDataAddress,c
 10772                           
 10773                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
 10774  00499C  0E00               	movlw	low _ring_buffer
 10775  00499E  6E2F               	movwf	_sendStructAddress,c
 10776  0049A0  0E02               	movlw	high _ring_buffer
 10777  0049A2  6E30               	movwf	_sendStructAddress+1,c
 10778                           
 10779                           ;FastTransfer.c: 27: AKNAKsend = error;
 10780  0049A4  C064  F039         	movff	begin@error,_AKNAKsend
 10781                           
 10782                           ;FastTransfer.c: 28: alignErrorCounter = 0;
 10783  0049A8  0E00               	movlw	0
 10784  0049AA  0100               	movlb	0	; () banked
 10785  0049AC  6FDF               	movwf	(_alignErrorCounter+1)& (0+255),b
 10786  0049AE  0E00               	movlw	0
 10787  0049B0  6FDE               	movwf	_alignErrorCounter& (0+255),b
 10788                           
 10789                           ; BSR set to: 0
 10790  0049B2  0012               	return		;funcret
 10791  0049B4                     __end_of_begin:
 10792                           	opt stack 0
 10793                           tosu	equ	0xFFF
 10794                           tosh	equ	0xFFE
 10795                           tosl	equ	0xFFD
 10796                           pclath	equ	0xFFA
 10797                           tblptru	equ	0xFF8
 10798                           tblptrh	equ	0xFF7
 10799                           tblptrl	equ	0xFF6
 10800                           tablat	equ	0xFF5
 10801                           prodh	equ	0xFF4
 10802                           prodl	equ	0xFF3
 10803                           intcon	equ	0xFF2
 10804                           postinc0	equ	0xFEE
 10805                           wreg	equ	0xFE8
 10806                           postinc1	equ	0xFE6
 10807                           postdec1	equ	0xFE5
 10808                           fsr1h	equ	0xFE2
 10809                           fsr1l	equ	0xFE1
 10810                           indf2	equ	0xFDF
 10811                           postinc2	equ	0xFDE
 10812                           postdec2	equ	0xFDD
 10813                           plusw2	equ	0xFDB
 10814                           fsr2h	equ	0xFDA
 10815                           fsr2l	equ	0xFD9
 10816                           status	equ	0xFD8
 10817                           
 10818 ;; *************** function ___awdiv *****************
 10819 ;; Defined at:
 10820 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 10821 ;; Parameters:    Size  Location     Type
 10822 ;;  dividend        2   32[COMRAM] int 
 10823 ;;  divisor         2   34[COMRAM] int 
 10824 ;; Auto vars:     Size  Location     Type
 10825 ;;  quotient        2   38[COMRAM] int 
 10826 ;;  sign            1   37[COMRAM] unsigned char 
 10827 ;;  counter         1   36[COMRAM] unsigned char 
 10828 ;; Return value:  Size  Location     Type
 10829 ;;                  2   32[COMRAM] int 
 10830 ;; Registers used:
 10831 ;;		wreg, status,2, status,0
 10832 ;; Tracked objects:
 10833 ;;		On entry : 0/0
 10834 ;;		On exit  : 0/0
 10835 ;;		Unchanged: 0/0
 10836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10837 ;;      Params:         4       0       0       0       0       0       0
 10838 ;;      Locals:         4       0       0       0       0       0       0
 10839 ;;      Temps:          0       0       0       0       0       0       0
 10840 ;;      Totals:         8       0       0       0       0       0       0
 10841 ;;Total ram usage:        8 bytes
 10842 ;; Hardware stack levels used:    1
 10843 ;; Hardware stack levels required when called:    4
 10844 ;; This function calls:
 10845 ;;		Nothing
 10846 ;; This function is called by:
 10847 ;;		_Temp_Convert
 10848 ;;		_begin
 10849 ;;		_fround
 10850 ;;		_scale
 10851 ;;		_printf
 10852 ;; This function uses a non-reentrant model
 10853 ;;
 10854                           
 10855                           	psect	text39
 10856  0043AC                     __ptext39:
 10857                           	opt stack 0
 10858  0043AC                     ___awdiv:
 10859                           	opt stack 24
 10860                           
 10861                           ; BSR set to: 0
 10862                           ;incstack = 0
 10863  0043AC  0E00               	movlw	0
 10864  0043AE  6E26               	movwf	___awdiv@sign,c
 10865  0043B0  AE24               	btfss	___awdiv@divisor+1,7,c
 10866  0043B2  D007               	goto	l6052
 10867  0043B4  6C23               	negf	___awdiv@divisor,c
 10868  0043B6  1E24               	comf	___awdiv@divisor+1,f,c
 10869  0043B8  B0D8               	btfsc	status,0,c
 10870  0043BA  2A24               	incf	___awdiv@divisor+1,f,c
 10871  0043BC  0E01               	movlw	1
 10872  0043BE  6E26               	movwf	___awdiv@sign,c
 10873  0043C0  D000               	goto	l6052
 10874  0043C2                     l6052:
 10875  0043C2  AE22               	btfss	___awdiv@dividend+1,7,c
 10876  0043C4  D007               	goto	l6058
 10877  0043C6  6C21               	negf	___awdiv@dividend,c
 10878  0043C8  1E22               	comf	___awdiv@dividend+1,f,c
 10879  0043CA  B0D8               	btfsc	status,0,c
 10880  0043CC  2A22               	incf	___awdiv@dividend+1,f,c
 10881  0043CE  0E01               	movlw	1
 10882  0043D0  1A26               	xorwf	___awdiv@sign,f,c
 10883  0043D2  D000               	goto	l6058
 10884  0043D4                     l6058:
 10885  0043D4  0E00               	movlw	0
 10886  0043D6  6E28               	movwf	___awdiv@quotient+1,c
 10887  0043D8  0E00               	movlw	0
 10888  0043DA  6E27               	movwf	___awdiv@quotient,c
 10889  0043DC  5023               	movf	___awdiv@divisor,w,c
 10890  0043DE  1024               	iorwf	___awdiv@divisor+1,w,c
 10891  0043E0  B4D8               	btfsc	status,2,c
 10892  0043E2  D021               	goto	l6080
 10893  0043E4  0E01               	movlw	1
 10894  0043E6  6E25               	movwf	___awdiv@counter,c
 10895  0043E8  D005               	goto	l6066
 10896  0043EA                     l6064:
 10897  0043EA  90D8               	bcf	status,0,c
 10898  0043EC  3623               	rlcf	___awdiv@divisor,f,c
 10899  0043EE  3624               	rlcf	___awdiv@divisor+1,f,c
 10900  0043F0  2A25               	incf	___awdiv@counter,f,c
 10901  0043F2  D000               	goto	l6066
 10902  0043F4                     l6066:
 10903  0043F4  BE24               	btfsc	___awdiv@divisor+1,7,c
 10904  0043F6  D002               	goto	l6068
 10905  0043F8  D7F8               	goto	l6064
 10906  0043FA  D000               	goto	l6068
 10907  0043FC                     l6068:
 10908  0043FC  90D8               	bcf	status,0,c
 10909  0043FE  3627               	rlcf	___awdiv@quotient,f,c
 10910  004400  3628               	rlcf	___awdiv@quotient+1,f,c
 10911  004402  5023               	movf	___awdiv@divisor,w,c
 10912  004404  5C21               	subwf	___awdiv@dividend,w,c
 10913  004406  5024               	movf	___awdiv@divisor+1,w,c
 10914  004408  5822               	subwfb	___awdiv@dividend+1,w,c
 10915  00440A  A0D8               	btfss	status,0,c
 10916  00440C  D006               	goto	l6076
 10917  00440E  5023               	movf	___awdiv@divisor,w,c
 10918  004410  5E21               	subwf	___awdiv@dividend,f,c
 10919  004412  5024               	movf	___awdiv@divisor+1,w,c
 10920  004414  5A22               	subwfb	___awdiv@dividend+1,f,c
 10921  004416  8027               	bsf	___awdiv@quotient,0,c
 10922  004418  D000               	goto	l6076
 10923  00441A                     l6076:
 10924  00441A  90D8               	bcf	status,0,c
 10925  00441C  3224               	rrcf	___awdiv@divisor+1,f,c
 10926  00441E  3223               	rrcf	___awdiv@divisor,f,c
 10927  004420  2E25               	decfsz	___awdiv@counter,f,c
 10928  004422  D7EC               	goto	l6068
 10929  004424  D000               	goto	l6080
 10930  004426                     l6080:
 10931  004426  5026               	movf	___awdiv@sign,w,c
 10932  004428  B4D8               	btfsc	status,2,c
 10933  00442A  D005               	goto	l6084
 10934  00442C  6C27               	negf	___awdiv@quotient,c
 10935  00442E  1E28               	comf	___awdiv@quotient+1,f,c
 10936  004430  B0D8               	btfsc	status,0,c
 10937  004432  2A28               	incf	___awdiv@quotient+1,f,c
 10938  004434  D000               	goto	l6084
 10939  004436                     l6084:
 10940  004436  C027  F021         	movff	___awdiv@quotient,?___awdiv
 10941  00443A  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
 10942  00443E  0012               	return	
 10943  004440  0012               	return		;funcret
 10944  004442                     __end_of___awdiv:
 10945                           	opt stack 0
 10946                           tosu	equ	0xFFF
 10947                           tosh	equ	0xFFE
 10948                           tosl	equ	0xFFD
 10949                           pclath	equ	0xFFA
 10950                           tblptru	equ	0xFF8
 10951                           tblptrh	equ	0xFF7
 10952                           tblptrl	equ	0xFF6
 10953                           tablat	equ	0xFF5
 10954                           prodh	equ	0xFF4
 10955                           prodl	equ	0xFF3
 10956                           intcon	equ	0xFF2
 10957                           postinc0	equ	0xFEE
 10958                           wreg	equ	0xFE8
 10959                           postinc1	equ	0xFE6
 10960                           postdec1	equ	0xFE5
 10961                           fsr1h	equ	0xFE2
 10962                           fsr1l	equ	0xFE1
 10963                           indf2	equ	0xFDF
 10964                           postinc2	equ	0xFDE
 10965                           postdec2	equ	0xFDD
 10966                           plusw2	equ	0xFDB
 10967                           fsr2h	equ	0xFDA
 10968                           fsr2l	equ	0xFD9
 10969                           status	equ	0xFD8
 10970                           
 10971 ;; *************** function _UART_init *****************
 10972 ;; Defined at:
 10973 ;;		line 21 in file "UART.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;		None
 10976 ;; Auto vars:     Size  Location     Type
 10977 ;;		None
 10978 ;; Return value:  Size  Location     Type
 10979 ;;		None               void
 10980 ;; Registers used:
 10981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10982 ;; Tracked objects:
 10983 ;;		On entry : 0/0
 10984 ;;		On exit  : 0/0
 10985 ;;		Unchanged: 0/0
 10986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10987 ;;      Params:         0       0       0       0       0       0       0
 10988 ;;      Locals:         0       0       0       0       0       0       0
 10989 ;;      Temps:          0       0       0       0       0       0       0
 10990 ;;      Totals:         0       0       0       0       0       0       0
 10991 ;;Total ram usage:        0 bytes
 10992 ;; Hardware stack levels used:    1
 10993 ;; Hardware stack levels required when called:    6
 10994 ;; This function calls:
 10995 ;;		_UART_buff_init
 10996 ;; This function is called by:
 10997 ;;		_SYSTEM_Initialize
 10998 ;; This function uses a non-reentrant model
 10999 ;;
 11000                           
 11001                           	psect	text40
 11002  004B32                     __ptext40:
 11003                           	opt stack 0
 11004  004B32                     _UART_init:
 11005                           	opt stack 23
 11006                           
 11007                           ;UART.c: 23: PIE1bits.RC1IE = 0;
 11008                           
 11009                           ;incstack = 0
 11010  004B32  9A9D               	bcf	3997,5,c	;volatile
 11011                           
 11012                           ;UART.c: 24: PIE1bits.TX1IE = 0;
 11013  004B34  989D               	bcf	3997,4,c	;volatile
 11014                           
 11015                           ;UART.c: 29: BAUD1CON = 0x48;
 11016  004B36  0E48               	movlw	72
 11017  004B38  6EB8               	movwf	4024,c	;volatile
 11018                           
 11019                           ;UART.c: 32: RC1STA = 0x98;
 11020  004B3A  0E98               	movlw	152
 11021  004B3C  6EAB               	movwf	4011,c	;volatile
 11022                           
 11023                           ;UART.c: 35: TX1STA = 0x26;
 11024  004B3E  0E26               	movlw	38
 11025  004B40  6EAC               	movwf	4012,c	;volatile
 11026                           
 11027                           ;UART.c: 38: SPBRG1 = 0x22;
 11028  004B42  0E22               	movlw	34
 11029  004B44  6EAF               	movwf	4015,c	;volatile
 11030                           
 11031                           ;UART.c: 41: SPBRGH1 = 0x00;
 11032  004B46  0E00               	movlw	0
 11033  004B48  6EB0               	movwf	4016,c	;volatile
 11034                           
 11035                           ;UART.c: 44: TXREG1 = 0x00;
 11036  004B4A  0E00               	movlw	0
 11037  004B4C  6EAD               	movwf	4013,c	;volatile
 11038                           
 11039                           ;UART.c: 47: RCREG1 = 0x00;
 11040  004B4E  0E00               	movlw	0
 11041  004B50  6EAE               	movwf	4014,c	;volatile
 11042                           
 11043                           ;UART.c: 48: UART_buff_init(&input_buffer);
 11044  004B52  0E00               	movlw	low _input_buffer
 11045  004B54  6E23               	movwf	UART_buff_init@_this,c
 11046  004B56  0E04               	movlw	high _input_buffer
 11047  004B58  6E24               	movwf	UART_buff_init@_this+1,c
 11048  004B5A  ECC4  F026         	call	_UART_buff_init	;wreg free
 11049                           
 11050                           ;UART.c: 49: UART_buff_init(&output_buffer);
 11051  004B5E  0E00               	movlw	low _output_buffer
 11052  004B60  6E23               	movwf	UART_buff_init@_this,c
 11053  004B62  0E05               	movlw	high _output_buffer
 11054  004B64  6E24               	movwf	UART_buff_init@_this+1,c
 11055  004B66  ECC4  F026         	call	_UART_buff_init	;wreg free
 11056                           
 11057                           ;UART.c: 51: PIE1bits.RC1IE = 1;
 11058  004B6A  8A9D               	bsf	3997,5,c	;volatile
 11059  004B6C  0012               	return		;funcret
 11060  004B6E                     __end_of_UART_init:
 11061                           	opt stack 0
 11062                           tosu	equ	0xFFF
 11063                           tosh	equ	0xFFE
 11064                           tosl	equ	0xFFD
 11065                           pclath	equ	0xFFA
 11066                           tblptru	equ	0xFF8
 11067                           tblptrh	equ	0xFF7
 11068                           tblptrl	equ	0xFF6
 11069                           tablat	equ	0xFF5
 11070                           prodh	equ	0xFF4
 11071                           prodl	equ	0xFF3
 11072                           intcon	equ	0xFF2
 11073                           postinc0	equ	0xFEE
 11074                           wreg	equ	0xFE8
 11075                           postinc1	equ	0xFE6
 11076                           postdec1	equ	0xFE5
 11077                           fsr1h	equ	0xFE2
 11078                           fsr1l	equ	0xFE1
 11079                           indf2	equ	0xFDF
 11080                           postinc2	equ	0xFDE
 11081                           postdec2	equ	0xFDD
 11082                           plusw2	equ	0xFDB
 11083                           fsr2h	equ	0xFDA
 11084                           fsr2l	equ	0xFD9
 11085                           status	equ	0xFD8
 11086                           
 11087 ;; *************** function _UART_buff_init *****************
 11088 ;; Defined at:
 11089 ;;		line 54 in file "UART.c"
 11090 ;; Parameters:    Size  Location     Type
 11091 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
 11092 ;;		 -> output_buffer(206), input_buffer(206), 
 11093 ;; Auto vars:     Size  Location     Type
 11094 ;;		None
 11095 ;; Return value:  Size  Location     Type
 11096 ;;		None               void
 11097 ;; Registers used:
 11098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11099 ;; Tracked objects:
 11100 ;;		On entry : 0/0
 11101 ;;		On exit  : 0/0
 11102 ;;		Unchanged: 0/0
 11103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11104 ;;      Params:         2       0       0       0       0       0       0
 11105 ;;      Locals:         0       0       0       0       0       0       0
 11106 ;;      Temps:          0       0       0       0       0       0       0
 11107 ;;      Totals:         2       0       0       0       0       0       0
 11108 ;;Total ram usage:        2 bytes
 11109 ;; Hardware stack levels used:    1
 11110 ;; Hardware stack levels required when called:    5
 11111 ;; This function calls:
 11112 ;;		_memset
 11113 ;; This function is called by:
 11114 ;;		_UART_init
 11115 ;; This function uses a non-reentrant model
 11116 ;;
 11117                           
 11118                           	psect	text41
 11119  004D88                     __ptext41:
 11120                           	opt stack 0
 11121  004D88                     _UART_buff_init:
 11122                           	opt stack 23
 11123                           
 11124                           ;UART.c: 63: memset(_this, 0, sizeof (*_this));
 11125                           
 11126                           ;incstack = 0
 11127  004D88  C023  F01B         	movff	UART_buff_init@_this,memset@p1
 11128  004D8C  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
 11129  004D90  0E00               	movlw	0
 11130  004D92  6E1E               	movwf	memset@c+1,c
 11131  004D94  0E00               	movlw	0
 11132  004D96  6E1D               	movwf	memset@c,c
 11133  004D98  0E00               	movlw	0
 11134  004D9A  6E20               	movwf	memset@n+1,c
 11135  004D9C  0ECE               	movlw	206
 11136  004D9E  6E1F               	movwf	memset@n,c
 11137  004DA0  EC4F  F026         	call	_memset	;wreg free
 11138  004DA4  0012               	return		;funcret
 11139  004DA6                     __end_of_UART_buff_init:
 11140                           	opt stack 0
 11141                           tosu	equ	0xFFF
 11142                           tosh	equ	0xFFE
 11143                           tosl	equ	0xFFD
 11144                           pclath	equ	0xFFA
 11145                           tblptru	equ	0xFF8
 11146                           tblptrh	equ	0xFF7
 11147                           tblptrl	equ	0xFF6
 11148                           tablat	equ	0xFF5
 11149                           prodh	equ	0xFF4
 11150                           prodl	equ	0xFF3
 11151                           intcon	equ	0xFF2
 11152                           postinc0	equ	0xFEE
 11153                           wreg	equ	0xFE8
 11154                           postinc1	equ	0xFE6
 11155                           postdec1	equ	0xFE5
 11156                           fsr1h	equ	0xFE2
 11157                           fsr1l	equ	0xFE1
 11158                           indf2	equ	0xFDF
 11159                           postinc2	equ	0xFDE
 11160                           postdec2	equ	0xFDD
 11161                           plusw2	equ	0xFDB
 11162                           fsr2h	equ	0xFDA
 11163                           fsr2l	equ	0xFD9
 11164                           status	equ	0xFD8
 11165                           
 11166 ;; *************** function _memset *****************
 11167 ;; Defined at:
 11168 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\memset.c"
 11169 ;; Parameters:    Size  Location     Type
 11170 ;;  p1              2   26[COMRAM] PTR void 
 11171 ;;		 -> ring_buffer(206), output_buffer(206), input_buffer(206), 
 11172 ;;  c               2   28[COMRAM] int 
 11173 ;;  n               2   30[COMRAM] unsigned int 
 11174 ;; Auto vars:     Size  Location     Type
 11175 ;;  p               2   32[COMRAM] PTR unsigned char 
 11176 ;;		 -> ring_buffer(206), output_buffer(206), input_buffer(206), 
 11177 ;; Return value:  Size  Location     Type
 11178 ;;                  2   26[COMRAM] PTR void 
 11179 ;; Registers used:
 11180 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11181 ;; Tracked objects:
 11182 ;;		On entry : 0/0
 11183 ;;		On exit  : 0/0
 11184 ;;		Unchanged: 0/0
 11185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11186 ;;      Params:         6       0       0       0       0       0       0
 11187 ;;      Locals:         2       0       0       0       0       0       0
 11188 ;;      Temps:          0       0       0       0       0       0       0
 11189 ;;      Totals:         8       0       0       0       0       0       0
 11190 ;;Total ram usage:        8 bytes
 11191 ;; Hardware stack levels used:    1
 11192 ;; Hardware stack levels required when called:    4
 11193 ;; This function calls:
 11194 ;;		Nothing
 11195 ;; This function is called by:
 11196 ;;		_UART_buff_init
 11197 ;;		_UART_buff_flush
 11198 ;;		_FastTransfer_buffer_flush
 11199 ;; This function uses a non-reentrant model
 11200 ;;
 11201                           
 11202                           	psect	text42
 11203  004C9E                     __ptext42:
 11204                           	opt stack 0
 11205  004C9E                     _memset:
 11206                           	opt stack 23
 11207                           
 11208                           ;incstack = 0
 11209  004C9E  C01B  F021         	movff	memset@p1,memset@p
 11210  004CA2  C01C  F022         	movff	memset@p1+1,memset@p+1
 11211  004CA6  D009               	goto	l5778
 11212  004CA8                     l5774:
 11213  004CA8  C021  FFD9         	movff	memset@p,fsr2l
 11214  004CAC  C022  FFDA         	movff	memset@p+1,fsr2h
 11215  004CB0  C01D  FFDF         	movff	memset@c,indf2
 11216  004CB4  4A21               	infsnz	memset@p,f,c
 11217  004CB6  2A22               	incf	memset@p+1,f,c
 11218  004CB8  D000               	goto	l5778
 11219  004CBA                     l5778:
 11220  004CBA  061F               	decf	memset@n,f,c
 11221  004CBC  A0D8               	btfss	status,0,c
 11222  004CBE  0620               	decf	memset@n+1,f,c
 11223  004CC0  281F               	incf	memset@n,w,c
 11224  004CC2  E1F2               	bnz	l5774
 11225  004CC4  2820               	incf	memset@n+1,w,c
 11226  004CC6  A4D8               	btfss	status,2,c
 11227  004CC8  D7EF               	goto	l5774
 11228                           
 11229                           ;	Return value of _memset is never used
 11230  004CCA  0012               	return		;funcret
 11231  004CCC                     __end_of_memset:
 11232                           	opt stack 0
 11233                           tosu	equ	0xFFF
 11234                           tosh	equ	0xFFE
 11235                           tosl	equ	0xFFD
 11236                           pclath	equ	0xFFA
 11237                           tblptru	equ	0xFF8
 11238                           tblptrh	equ	0xFF7
 11239                           tblptrl	equ	0xFF6
 11240                           tablat	equ	0xFF5
 11241                           prodh	equ	0xFF4
 11242                           prodl	equ	0xFF3
 11243                           intcon	equ	0xFF2
 11244                           postinc0	equ	0xFEE
 11245                           wreg	equ	0xFE8
 11246                           postinc1	equ	0xFE6
 11247                           postdec1	equ	0xFE5
 11248                           fsr1h	equ	0xFE2
 11249                           fsr1l	equ	0xFE1
 11250                           indf2	equ	0xFDF
 11251                           postinc2	equ	0xFDE
 11252                           postdec2	equ	0xFDD
 11253                           plusw2	equ	0xFDB
 11254                           fsr2h	equ	0xFDA
 11255                           fsr2l	equ	0xFD9
 11256                           status	equ	0xFD8
 11257                           
 11258 ;; *************** function _TMR1_Initialize *****************
 11259 ;; Defined at:
 11260 ;;		line 18 in file "mcc_generated_files/tmr1.c"
 11261 ;; Parameters:    Size  Location     Type
 11262 ;;		None
 11263 ;; Auto vars:     Size  Location     Type
 11264 ;;		None
 11265 ;; Return value:  Size  Location     Type
 11266 ;;		None               void
 11267 ;; Registers used:
 11268 ;;		wreg, status,2, cstack
 11269 ;; Tracked objects:
 11270 ;;		On entry : 0/0
 11271 ;;		On exit  : 0/0
 11272 ;;		Unchanged: 0/0
 11273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11274 ;;      Params:         0       0       0       0       0       0       0
 11275 ;;      Locals:         0       0       0       0       0       0       0
 11276 ;;      Temps:          0       0       0       0       0       0       0
 11277 ;;      Totals:         0       0       0       0       0       0       0
 11278 ;;Total ram usage:        0 bytes
 11279 ;; Hardware stack levels used:    1
 11280 ;; Hardware stack levels required when called:    5
 11281 ;; This function calls:
 11282 ;;		_TMR1_StartTimer
 11283 ;; This function is called by:
 11284 ;;		_SYSTEM_Initialize
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           	psect	text43
 11289  004D66                     __ptext43:
 11290                           	opt stack 0
 11291  004D66                     _TMR1_Initialize:
 11292                           	opt stack 24
 11293                           
 11294                           ;tmr1.c: 23: T1CON = 0x30;
 11295                           
 11296                           ;incstack = 0
 11297  004D66  0E30               	movlw	48
 11298  004D68  6ECD               	movwf	4045,c	;volatile
 11299                           
 11300                           ;tmr1.c: 26: T1GCON = 0x00;
 11301  004D6A  0E00               	movlw	0
 11302  004D6C  6ECC               	movwf	4044,c	;volatile
 11303                           
 11304                           ;tmr1.c: 29: TMR1H = 0x0B;
 11305  004D6E  0E0B               	movlw	11
 11306  004D70  6ECF               	movwf	4047,c	;volatile
 11307                           
 11308                           ;tmr1.c: 32: TMR1L = 0xDC;
 11309  004D72  0EDC               	movlw	220
 11310  004D74  6ECE               	movwf	4046,c	;volatile
 11311                           
 11312                           ;tmr1.c: 35: timer1ReloadVal=TMR1;
 11313  004D76  CFCE F037          	movff	4046,_timer1ReloadVal	;volatile
 11314  004D7A  CFCF F038          	movff	4047,_timer1ReloadVal+1	;volatile
 11315                           
 11316                           ;tmr1.c: 38: PIR1bits.TMR1IF = 0;
 11317  004D7E  909E               	bcf	3998,0,c	;volatile
 11318                           
 11319                           ;tmr1.c: 41: PIE1bits.TMR1IE = 1;
 11320  004D80  809D               	bsf	3997,0,c	;volatile
 11321                           
 11322                           ;tmr1.c: 44: TMR1_StartTimer();
 11323  004D82  EC68  F027         	call	_TMR1_StartTimer	;wreg free
 11324  004D86  0012               	return		;funcret
 11325  004D88                     __end_of_TMR1_Initialize:
 11326                           	opt stack 0
 11327                           tosu	equ	0xFFF
 11328                           tosh	equ	0xFFE
 11329                           tosl	equ	0xFFD
 11330                           pclath	equ	0xFFA
 11331                           tblptru	equ	0xFF8
 11332                           tblptrh	equ	0xFF7
 11333                           tblptrl	equ	0xFF6
 11334                           tablat	equ	0xFF5
 11335                           prodh	equ	0xFF4
 11336                           prodl	equ	0xFF3
 11337                           intcon	equ	0xFF2
 11338                           postinc0	equ	0xFEE
 11339                           wreg	equ	0xFE8
 11340                           postinc1	equ	0xFE6
 11341                           postdec1	equ	0xFE5
 11342                           fsr1h	equ	0xFE2
 11343                           fsr1l	equ	0xFE1
 11344                           indf2	equ	0xFDF
 11345                           postinc2	equ	0xFDE
 11346                           postdec2	equ	0xFDD
 11347                           plusw2	equ	0xFDB
 11348                           fsr2h	equ	0xFDA
 11349                           fsr2l	equ	0xFD9
 11350                           status	equ	0xFD8
 11351                           
 11352 ;; *************** function _TMR1_StartTimer *****************
 11353 ;; Defined at:
 11354 ;;		line 47 in file "mcc_generated_files/tmr1.c"
 11355 ;; Parameters:    Size  Location     Type
 11356 ;;		None
 11357 ;; Auto vars:     Size  Location     Type
 11358 ;;		None
 11359 ;; Return value:  Size  Location     Type
 11360 ;;		None               void
 11361 ;; Registers used:
 11362 ;;		None
 11363 ;; Tracked objects:
 11364 ;;		On entry : 0/0
 11365 ;;		On exit  : 0/0
 11366 ;;		Unchanged: 0/0
 11367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11368 ;;      Params:         0       0       0       0       0       0       0
 11369 ;;      Locals:         0       0       0       0       0       0       0
 11370 ;;      Temps:          0       0       0       0       0       0       0
 11371 ;;      Totals:         0       0       0       0       0       0       0
 11372 ;;Total ram usage:        0 bytes
 11373 ;; Hardware stack levels used:    1
 11374 ;; Hardware stack levels required when called:    4
 11375 ;; This function calls:
 11376 ;;		Nothing
 11377 ;; This function is called by:
 11378 ;;		_TMR1_Initialize
 11379 ;; This function uses a non-reentrant model
 11380 ;;
 11381                           
 11382                           	psect	text44
 11383  004ED0                     __ptext44:
 11384                           	opt stack 0
 11385  004ED0                     _TMR1_StartTimer:
 11386                           	opt stack 24
 11387                           
 11388                           ;tmr1.c: 50: T1CONbits.TMR1ON = 1;
 11389                           
 11390                           ;incstack = 0
 11391  004ED0  80CD               	bsf	4045,0,c	;volatile
 11392  004ED2  0012               	return		;funcret
 11393  004ED4                     __end_of_TMR1_StartTimer:
 11394                           	opt stack 0
 11395                           tosu	equ	0xFFF
 11396                           tosh	equ	0xFFE
 11397                           tosl	equ	0xFFD
 11398                           pclath	equ	0xFFA
 11399                           tblptru	equ	0xFF8
 11400                           tblptrh	equ	0xFF7
 11401                           tblptrl	equ	0xFF6
 11402                           tablat	equ	0xFF5
 11403                           prodh	equ	0xFF4
 11404                           prodl	equ	0xFF3
 11405                           intcon	equ	0xFF2
 11406                           postinc0	equ	0xFEE
 11407                           wreg	equ	0xFE8
 11408                           postinc1	equ	0xFE6
 11409                           postdec1	equ	0xFE5
 11410                           fsr1h	equ	0xFE2
 11411                           fsr1l	equ	0xFE1
 11412                           indf2	equ	0xFDF
 11413                           postinc2	equ	0xFDE
 11414                           postdec2	equ	0xFDD
 11415                           plusw2	equ	0xFDB
 11416                           fsr2h	equ	0xFDA
 11417                           fsr2l	equ	0xFD9
 11418                           status	equ	0xFD8
 11419                           
 11420 ;; *************** function _PIN_MANAGER_Initialize *****************
 11421 ;; Defined at:
 11422 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
 11423 ;; Parameters:    Size  Location     Type
 11424 ;;		None
 11425 ;; Auto vars:     Size  Location     Type
 11426 ;;		None
 11427 ;; Return value:  Size  Location     Type
 11428 ;;		None               void
 11429 ;; Registers used:
 11430 ;;		wreg, status,2
 11431 ;; Tracked objects:
 11432 ;;		On entry : 0/0
 11433 ;;		On exit  : 0/0
 11434 ;;		Unchanged: 0/0
 11435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11436 ;;      Params:         0       0       0       0       0       0       0
 11437 ;;      Locals:         0       0       0       0       0       0       0
 11438 ;;      Temps:          0       0       0       0       0       0       0
 11439 ;;      Totals:         0       0       0       0       0       0       0
 11440 ;;Total ram usage:        0 bytes
 11441 ;; Hardware stack levels used:    1
 11442 ;; Hardware stack levels required when called:    4
 11443 ;; This function calls:
 11444 ;;		Nothing
 11445 ;; This function is called by:
 11446 ;;		_SYSTEM_Initialize
 11447 ;; This function uses a non-reentrant model
 11448 ;;
 11449                           
 11450                           	psect	text45
 11451  004A56                     __ptext45:
 11452                           	opt stack 0
 11453  004A56                     _PIN_MANAGER_Initialize:
 11454                           	opt stack 25
 11455                           
 11456                           ;pin_manager.c: 8: LATA = 0x00;
 11457                           
 11458                           ;incstack = 0
 11459  004A56  0E00               	movlw	0
 11460  004A58  6E89               	movwf	3977,c	;volatile
 11461                           
 11462                           ;pin_manager.c: 9: TRISA = 0xAE;
 11463  004A5A  0EAE               	movlw	174
 11464  004A5C  6E92               	movwf	3986,c	;volatile
 11465                           
 11466                           ;pin_manager.c: 10: ANSELA = 0x2E;
 11467  004A5E  0E2E               	movlw	46
 11468  004A60  010F               	movlb	15	; () banked
 11469  004A62  6F38               	movwf	56,b	;volatile
 11470                           
 11471                           ;pin_manager.c: 12: LATB = 0x00;
 11472  004A64  0E00               	movlw	0
 11473  004A66  6E8A               	movwf	3978,c	;volatile
 11474                           
 11475                           ;pin_manager.c: 13: TRISB = 0xF4;
 11476  004A68  0EF4               	movlw	244
 11477  004A6A  6E93               	movwf	3987,c	;volatile
 11478                           
 11479                           ;pin_manager.c: 14: ANSELB = 0x34;
 11480  004A6C  0E34               	movlw	52
 11481  004A6E  010F               	movlb	15	; () banked
 11482  004A70  6F39               	movwf	57,b	;volatile
 11483                           
 11484                           ;pin_manager.c: 15: WPUB = 0x00;
 11485  004A72  0E00               	movlw	0
 11486  004A74  6E61               	movwf	3937,c	;volatile
 11487                           
 11488                           ;pin_manager.c: 17: LATC = 0x08;
 11489  004A76  0E08               	movlw	8
 11490  004A78  6E8B               	movwf	3979,c	;volatile
 11491                           
 11492                           ;pin_manager.c: 18: TRISC = 0xC4;
 11493  004A7A  0EC4               	movlw	196
 11494  004A7C  6E94               	movwf	3988,c	;volatile
 11495                           
 11496                           ;pin_manager.c: 19: ANSELC = 0x04;
 11497  004A7E  0E04               	movlw	4
 11498  004A80  010F               	movlb	15	; () banked
 11499  004A82  6F3A               	movwf	58,b	;volatile
 11500                           
 11501                           ;pin_manager.c: 21: LATD = 0x00;
 11502  004A84  0E00               	movlw	0
 11503  004A86  6E8C               	movwf	3980,c	;volatile
 11504                           
 11505                           ;pin_manager.c: 22: TRISD = 0xD1;
 11506  004A88  0ED1               	movlw	209
 11507  004A8A  6E95               	movwf	3989,c	;volatile
 11508                           
 11509                           ;pin_manager.c: 23: ANSELD = 0xD1;
 11510  004A8C  0ED1               	movlw	209
 11511  004A8E  010F               	movlb	15	; () banked
 11512  004A90  6F3B               	movwf	59,b	;volatile
 11513                           
 11514                           ;pin_manager.c: 25: LATE = 0x00;
 11515  004A92  0E00               	movlw	0
 11516  004A94  6E8D               	movwf	3981,c	;volatile
 11517                           
 11518                           ;pin_manager.c: 26: TRISE = 0x05;
 11519  004A96  0E05               	movlw	5
 11520  004A98  6E96               	movwf	3990,c	;volatile
 11521                           
 11522                           ;pin_manager.c: 27: ANSELE = 0x05;
 11523  004A9A  0E05               	movlw	5
 11524  004A9C  010F               	movlb	15	; () banked
 11525  004A9E  6F3C               	movwf	60,b	;volatile
 11526                           
 11527                           ; BSR set to: 15
 11528                           ;pin_manager.c: 29: INTCON2bits.nRBPU = 0x01;
 11529  004AA0  8EF1               	bsf	intcon2,7,c	;volatile
 11530                           
 11531                           ; BSR set to: 15
 11532  004AA2  0012               	return		;funcret
 11533  004AA4                     __end_of_PIN_MANAGER_Initialize:
 11534                           	opt stack 0
 11535                           tosu	equ	0xFFF
 11536                           tosh	equ	0xFFE
 11537                           tosl	equ	0xFFD
 11538                           pclath	equ	0xFFA
 11539                           tblptru	equ	0xFF8
 11540                           tblptrh	equ	0xFF7
 11541                           tblptrl	equ	0xFF6
 11542                           tablat	equ	0xFF5
 11543                           prodh	equ	0xFF4
 11544                           prodl	equ	0xFF3
 11545                           intcon	equ	0xFF2
 11546                           intcon2	equ	0xFF1
 11547                           postinc0	equ	0xFEE
 11548                           wreg	equ	0xFE8
 11549                           postinc1	equ	0xFE6
 11550                           postdec1	equ	0xFE5
 11551                           fsr1h	equ	0xFE2
 11552                           fsr1l	equ	0xFE1
 11553                           indf2	equ	0xFDF
 11554                           postinc2	equ	0xFDE
 11555                           postdec2	equ	0xFDD
 11556                           plusw2	equ	0xFDB
 11557                           fsr2h	equ	0xFDA
 11558                           fsr2l	equ	0xFD9
 11559                           status	equ	0xFD8
 11560                           
 11561 ;; *************** function _OSCILLATOR_Initialize *****************
 11562 ;; Defined at:
 11563 ;;		line 127 in file "mcc_generated_files/mcc.c"
 11564 ;; Parameters:    Size  Location     Type
 11565 ;;		None
 11566 ;; Auto vars:     Size  Location     Type
 11567 ;;		None
 11568 ;; Return value:  Size  Location     Type
 11569 ;;		None               void
 11570 ;; Registers used:
 11571 ;;		wreg, status,2
 11572 ;; Tracked objects:
 11573 ;;		On entry : 0/0
 11574 ;;		On exit  : 0/0
 11575 ;;		Unchanged: 0/0
 11576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11577 ;;      Params:         0       0       0       0       0       0       0
 11578 ;;      Locals:         0       0       0       0       0       0       0
 11579 ;;      Temps:          0       0       0       0       0       0       0
 11580 ;;      Totals:         0       0       0       0       0       0       0
 11581 ;;Total ram usage:        0 bytes
 11582 ;; Hardware stack levels used:    1
 11583 ;; Hardware stack levels required when called:    4
 11584 ;; This function calls:
 11585 ;;		Nothing
 11586 ;; This function is called by:
 11587 ;;		_SYSTEM_Initialize
 11588 ;; This function uses a non-reentrant model
 11589 ;;
 11590                           
 11591                           	psect	text46
 11592  004EA4                     __ptext46:
 11593                           	opt stack 0
 11594  004EA4                     _OSCILLATOR_Initialize:
 11595                           	opt stack 25
 11596                           
 11597                           ;mcc.c: 129: OSCCON = 0x62;
 11598                           
 11599                           ; BSR set to: 15
 11600                           ;incstack = 0
 11601  004EA4  0E62               	movlw	98
 11602  004EA6  6ED3               	movwf	4051,c	;volatile
 11603                           
 11604                           ;mcc.c: 131: OSCCON2 = 0x04;
 11605  004EA8  0E04               	movlw	4
 11606  004EAA  6ED2               	movwf	4050,c	;volatile
 11607                           
 11608                           ;mcc.c: 133: OSCTUNE = 0x00;
 11609  004EAC  0E00               	movlw	0
 11610  004EAE  6E9B               	movwf	3995,c	;volatile
 11611  004EB0  0012               	return		;funcret
 11612  004EB2                     __end_of_OSCILLATOR_Initialize:
 11613                           	opt stack 0
 11614                           tosu	equ	0xFFF
 11615                           tosh	equ	0xFFE
 11616                           tosl	equ	0xFFD
 11617                           pclath	equ	0xFFA
 11618                           tblptru	equ	0xFF8
 11619                           tblptrh	equ	0xFF7
 11620                           tblptrl	equ	0xFF6
 11621                           tablat	equ	0xFF5
 11622                           prodh	equ	0xFF4
 11623                           prodl	equ	0xFF3
 11624                           intcon	equ	0xFF2
 11625                           intcon2	equ	0xFF1
 11626                           postinc0	equ	0xFEE
 11627                           wreg	equ	0xFE8
 11628                           postinc1	equ	0xFE6
 11629                           postdec1	equ	0xFE5
 11630                           fsr1h	equ	0xFE2
 11631                           fsr1l	equ	0xFE1
 11632                           indf2	equ	0xFDF
 11633                           postinc2	equ	0xFDE
 11634                           postdec2	equ	0xFDD
 11635                           plusw2	equ	0xFDB
 11636                           fsr2h	equ	0xFDA
 11637                           fsr2l	equ	0xFD9
 11638                           status	equ	0xFD8
 11639                           
 11640 ;; *************** function _INTERRUPT_Initialize *****************
 11641 ;; Defined at:
 11642 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11643 ;; Parameters:    Size  Location     Type
 11644 ;;		None
 11645 ;; Auto vars:     Size  Location     Type
 11646 ;;		None
 11647 ;; Return value:  Size  Location     Type
 11648 ;;		None               void
 11649 ;; Registers used:
 11650 ;;		None
 11651 ;; Tracked objects:
 11652 ;;		On entry : 0/0
 11653 ;;		On exit  : 0/0
 11654 ;;		Unchanged: 0/0
 11655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11656 ;;      Params:         0       0       0       0       0       0       0
 11657 ;;      Locals:         0       0       0       0       0       0       0
 11658 ;;      Temps:          0       0       0       0       0       0       0
 11659 ;;      Totals:         0       0       0       0       0       0       0
 11660 ;;Total ram usage:        0 bytes
 11661 ;; Hardware stack levels used:    1
 11662 ;; Hardware stack levels required when called:    4
 11663 ;; This function calls:
 11664 ;;		Nothing
 11665 ;; This function is called by:
 11666 ;;		_SYSTEM_Initialize
 11667 ;; This function uses a non-reentrant model
 11668 ;;
 11669                           
 11670                           	psect	text47
 11671  004EB2                     __ptext47:
 11672                           	opt stack 0
 11673  004EB2                     _INTERRUPT_Initialize:
 11674                           	opt stack 25
 11675                           
 11676                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
 11677                           
 11678                           ;incstack = 0
 11679  004EB2  9ED0               	bcf	4048,7,c	;volatile
 11680                           
 11681                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
 11682  004EB4  9A9F               	bcf	3999,5,c	;volatile
 11683                           
 11684                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
 11685  004EB6  9C9F               	bcf	3999,6,c	;volatile
 11686                           
 11687                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
 11688  004EB8  909F               	bcf	3999,0,c	;volatile
 11689                           
 11690                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
 11691  004EBA  989F               	bcf	3999,4,c	;volatile
 11692  004EBC  0012               	return		;funcret
 11693  004EBE                     __end_of_INTERRUPT_Initialize:
 11694                           	opt stack 0
 11695                           tosu	equ	0xFFF
 11696                           tosh	equ	0xFFE
 11697                           tosl	equ	0xFFD
 11698                           pclath	equ	0xFFA
 11699                           tblptru	equ	0xFF8
 11700                           tblptrh	equ	0xFF7
 11701                           tblptrl	equ	0xFF6
 11702                           tablat	equ	0xFF5
 11703                           prodh	equ	0xFF4
 11704                           prodl	equ	0xFF3
 11705                           intcon	equ	0xFF2
 11706                           intcon2	equ	0xFF1
 11707                           postinc0	equ	0xFEE
 11708                           wreg	equ	0xFE8
 11709                           postinc1	equ	0xFE6
 11710                           postdec1	equ	0xFE5
 11711                           fsr1h	equ	0xFE2
 11712                           fsr1l	equ	0xFE1
 11713                           indf2	equ	0xFDF
 11714                           postinc2	equ	0xFDE
 11715                           postdec2	equ	0xFDD
 11716                           plusw2	equ	0xFDB
 11717                           fsr2h	equ	0xFDA
 11718                           fsr2l	equ	0xFD9
 11719                           status	equ	0xFD8
 11720                           
 11721 ;; *************** function _ADC_Initialize *****************
 11722 ;; Defined at:
 11723 ;;		line 13 in file "mcc_generated_files/adc.c"
 11724 ;; Parameters:    Size  Location     Type
 11725 ;;		None
 11726 ;; Auto vars:     Size  Location     Type
 11727 ;;		None
 11728 ;; Return value:  Size  Location     Type
 11729 ;;		None               void
 11730 ;; Registers used:
 11731 ;;		wreg, status,2
 11732 ;; Tracked objects:
 11733 ;;		On entry : 0/0
 11734 ;;		On exit  : 0/0
 11735 ;;		Unchanged: 0/0
 11736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11737 ;;      Params:         0       0       0       0       0       0       0
 11738 ;;      Locals:         0       0       0       0       0       0       0
 11739 ;;      Temps:          0       0       0       0       0       0       0
 11740 ;;      Totals:         0       0       0       0       0       0       0
 11741 ;;Total ram usage:        0 bytes
 11742 ;; Hardware stack levels used:    1
 11743 ;; Hardware stack levels required when called:    4
 11744 ;; This function calls:
 11745 ;;		Nothing
 11746 ;; This function is called by:
 11747 ;;		_SYSTEM_Initialize
 11748 ;; This function uses a non-reentrant model
 11749 ;;
 11750                           
 11751                           	psect	text48
 11752  004E0E                     __ptext48:
 11753                           	opt stack 0
 11754  004E0E                     _ADC_Initialize:
 11755                           	opt stack 25
 11756                           
 11757                           ;adc.c: 18: ADCON0 = 0x01;
 11758                           
 11759                           ;incstack = 0
 11760  004E0E  0E01               	movlw	1
 11761  004E10  6EC2               	movwf	4034,c	;volatile
 11762                           
 11763                           ;adc.c: 21: ADCON1 = 0x80;
 11764  004E12  0E80               	movlw	128
 11765  004E14  6EC1               	movwf	4033,c	;volatile
 11766                           
 11767                           ;adc.c: 24: ADCON2 = 0xA9;
 11768  004E16  0EA9               	movlw	169
 11769  004E18  6EC0               	movwf	4032,c	;volatile
 11770                           
 11771                           ;adc.c: 27: ADRESL = 0x00;
 11772  004E1A  0E00               	movlw	0
 11773  004E1C  6EC3               	movwf	4035,c	;volatile
 11774                           
 11775                           ;adc.c: 30: ADRESH = 0x00;
 11776  004E1E  0E00               	movlw	0
 11777  004E20  6EC4               	movwf	4036,c	;volatile
 11778                           
 11779                           ;adc.c: 33: PIE1bits.ADIE = 1;
 11780  004E22  8C9D               	bsf	3997,6,c	;volatile
 11781  004E24  0012               	return		;funcret
 11782  004E26                     __end_of_ADC_Initialize:
 11783                           	opt stack 0
 11784                           tosu	equ	0xFFF
 11785                           tosh	equ	0xFFE
 11786                           tosl	equ	0xFFD
 11787                           pclath	equ	0xFFA
 11788                           tblptru	equ	0xFF8
 11789                           tblptrh	equ	0xFF7
 11790                           tblptrl	equ	0xFF6
 11791                           tablat	equ	0xFF5
 11792                           prodh	equ	0xFF4
 11793                           prodl	equ	0xFF3
 11794                           intcon	equ	0xFF2
 11795                           intcon2	equ	0xFF1
 11796                           postinc0	equ	0xFEE
 11797                           wreg	equ	0xFE8
 11798                           postinc1	equ	0xFE6
 11799                           postdec1	equ	0xFE5
 11800                           fsr1h	equ	0xFE2
 11801                           fsr1l	equ	0xFE1
 11802                           indf2	equ	0xFDF
 11803                           postinc2	equ	0xFDE
 11804                           postdec2	equ	0xFDD
 11805                           plusw2	equ	0xFDB
 11806                           fsr2h	equ	0xFDA
 11807                           fsr2l	equ	0xFD9
 11808                           status	equ	0xFD8
 11809                           
 11810 ;; *************** function _RunBypas *****************
 11811 ;; Defined at:
 11812 ;;		line 129 in file "Bypass.c"
 11813 ;; Parameters:    Size  Location     Type
 11814 ;;		None
 11815 ;; Auto vars:     Size  Location     Type
 11816 ;;  batvolt         3   15[BANK0 ] float 
 11817 ;;  i               2   18[BANK0 ] int 
 11818 ;;  cellbyp         2   13[BANK0 ] int 
 11819 ;; Return value:  Size  Location     Type
 11820 ;;                  2  398[None  ] int 
 11821 ;; Registers used:
 11822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11823 ;; Tracked objects:
 11824 ;;		On entry : 0/0
 11825 ;;		On exit  : 0/0
 11826 ;;		Unchanged: 0/0
 11827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11828 ;;      Params:         0       0       0       0       0       0       0
 11829 ;;      Locals:         0       7       0       0       0       0       0
 11830 ;;      Temps:          0       0       0       0       0       0       0
 11831 ;;      Totals:         0       7       0       0       0       0       0
 11832 ;;Total ram usage:        7 bytes
 11833 ;; Hardware stack levels used:    1
 11834 ;; Hardware stack levels required when called:    6
 11835 ;; This function calls:
 11836 ;;		_Battery_Get
 11837 ;;		_SetBypass
 11838 ;;		___ftge
 11839 ;; This function is called by:
 11840 ;;		_main
 11841 ;; This function uses a non-reentrant model
 11842 ;;
 11843                           
 11844                           	psect	text49
 11845  003B2C                     __ptext49:
 11846                           	opt stack 0
 11847  003B2C                     _RunBypas:
 11848                           	opt stack 24
 11849                           
 11850                           ;Bypass.c: 131: int cellbyp = 0;
 11851                           
 11852                           ;incstack = 0
 11853  003B2C  0E00               	movlw	0
 11854  003B2E  0100               	movlb	0	; () banked
 11855  003B30  6F6E               	movwf	(RunBypas@cellbyp+1)& (0+255),b
 11856  003B32  0E00               	movlw	0
 11857  003B34  6F6D               	movwf	RunBypas@cellbyp& (0+255),b
 11858                           
 11859                           ;Bypass.c: 132: int i = 0;
 11860  003B36  0E00               	movlw	0
 11861  003B38  0100               	movlb	0	; () banked
 11862  003B3A  6F73               	movwf	(RunBypas@i+1)& (0+255),b
 11863  003B3C  0E00               	movlw	0
 11864  003B3E  6F72               	movwf	RunBypas@i& (0+255),b
 11865                           
 11866                           ;Bypass.c: 133: float batvolt = 0;
 11867  003B40  0E00               	movlw	0
 11868  003B42  0100               	movlb	0	; () banked
 11869  003B44  6F6F               	movwf	RunBypas@batvolt& (0+255),b
 11870  003B46  0E00               	movlw	0
 11871  003B48  0100               	movlb	0	; () banked
 11872  003B4A  6F70               	movwf	(RunBypas@batvolt+1)& (0+255),b
 11873  003B4C  0E00               	movlw	0
 11874  003B4E  0100               	movlb	0	; () banked
 11875  003B50  6F71               	movwf	(RunBypas@batvolt+2)& (0+255),b
 11876                           
 11877                           ;Bypass.c: 135: for(i = 0; i<9;i++)
 11878  003B52  0E00               	movlw	0
 11879  003B54  0100               	movlb	0	; () banked
 11880  003B56  6F73               	movwf	(RunBypas@i+1)& (0+255),b
 11881  003B58  0E00               	movlw	0
 11882  003B5A  6F72               	movwf	RunBypas@i& (0+255),b
 11883  003B5C                     l7240:
 11884                           
 11885                           ; BSR set to: 0
 11886  003B5C  0100               	movlb	0	; () banked
 11887  003B5E  BF73               	btfsc	(RunBypas@i+1)& (0+255),7,b
 11888  003B60  D00A               	goto	l7244
 11889  003B62  0100               	movlb	0	; () banked
 11890  003B64  5173               	movf	(RunBypas@i+1)& (0+255),w,b
 11891  003B66  E15B               	bnz	l518
 11892  003B68  0E09               	movlw	9
 11893  003B6A  0100               	movlb	0	; () banked
 11894  003B6C  5D72               	subwf	RunBypas@i& (0+255),w,b
 11895  003B6E  B0D8               	btfsc	status,0,c
 11896  003B70  0012               	return	
 11897  003B72  D001               	goto	l7244
 11898                           
 11899                           ; BSR set to: 0
 11900  003B74  0012               	return	
 11901  003B76                     l7244:
 11902                           
 11903                           ; BSR set to: 0
 11904                           ;Bypass.c: 136: {
 11905                           ;Bypass.c: 137: batvolt = Battery_Get(i);
 11906  003B76  C072  F064         	movff	RunBypas@i,Battery_Get@channelnum
 11907  003B7A  C073  F065         	movff	RunBypas@i+1,Battery_Get@channelnum+1
 11908  003B7E  ECD3  F025         	call	_Battery_Get	;wreg free
 11909  003B82  C064  F06F         	movff	?_Battery_Get,RunBypas@batvolt
 11910  003B86  C065  F070         	movff	?_Battery_Get+1,RunBypas@batvolt+1
 11911  003B8A  C066  F071         	movff	?_Battery_Get+2,RunBypas@batvolt+2
 11912                           
 11913                           ;Bypass.c: 139: if(batvolt >= 4.18)
 11914  003B8E  C06F  F064         	movff	RunBypas@batvolt,___ftge@ff1
 11915  003B92  C070  F065         	movff	RunBypas@batvolt+1,___ftge@ff1+1
 11916  003B96  C071  F066         	movff	RunBypas@batvolt+2,___ftge@ff1+2
 11917  003B9A  0EC3               	movlw	195
 11918  003B9C  0100               	movlb	0	; () banked
 11919  003B9E  6F67               	movwf	___ftge@ff2& (0+255),b
 11920  003BA0  0E85               	movlw	133
 11921  003BA2  0100               	movlb	0	; () banked
 11922  003BA4  6F68               	movwf	(___ftge@ff2+1)& (0+255),b
 11923  003BA6  0E40               	movlw	64
 11924  003BA8  0100               	movlb	0	; () banked
 11925  003BAA  6F69               	movwf	(___ftge@ff2+2)& (0+255),b
 11926  003BAC  ECBD  F020         	call	___ftge	;wreg free
 11927  003BB0  0100               	movlb	0	; () banked
 11928  003BB2  A0D8               	btfss	status,0,c
 11929  003BB4  D010               	goto	l7252
 11930                           
 11931                           ; BSR set to: 0
 11932                           ;Bypass.c: 140: {
 11933                           ;Bypass.c: 141: SetBypass(i,1);
 11934  003BB6  C072  F01B         	movff	RunBypas@i,SetBypass@pin
 11935  003BBA  C073  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
 11936  003BBE  0E00               	movlw	0
 11937  003BC0  6E1E               	movwf	SetBypass@state+1,c
 11938  003BC2  0E01               	movlw	1
 11939  003BC4  6E1D               	movwf	SetBypass@state,c
 11940  003BC6  EC10  F01E         	call	_SetBypass	;wreg free
 11941                           
 11942                           ;Bypass.c: 142: cellbyp = 1;
 11943  003BCA  0E00               	movlw	0
 11944  003BCC  0100               	movlb	0	; () banked
 11945  003BCE  6F6E               	movwf	(RunBypas@cellbyp+1)& (0+255),b
 11946  003BD0  0E01               	movlw	1
 11947  003BD2  6F6D               	movwf	RunBypas@cellbyp& (0+255),b
 11948  003BD4  D000               	goto	l7252
 11949  003BD6                     l7252:
 11950                           
 11951                           ; BSR set to: 0
 11952                           ;Bypass.c: 143: }
 11953                           ;Bypass.c: 144: if(batvolt <= 4.15)
 11954  003BD6  0ECD               	movlw	205
 11955  003BD8  0100               	movlb	0	; () banked
 11956  003BDA  6F64               	movwf	___ftge@ff1& (0+255),b
 11957  003BDC  0E84               	movlw	132
 11958  003BDE  0100               	movlb	0	; () banked
 11959  003BE0  6F65               	movwf	(___ftge@ff1+1)& (0+255),b
 11960  003BE2  0E40               	movlw	64
 11961  003BE4  0100               	movlb	0	; () banked
 11962  003BE6  6F66               	movwf	(___ftge@ff1+2)& (0+255),b
 11963  003BE8  C06F  F067         	movff	RunBypas@batvolt,___ftge@ff2
 11964  003BEC  C070  F068         	movff	RunBypas@batvolt+1,___ftge@ff2+1
 11965  003BF0  C071  F069         	movff	RunBypas@batvolt+2,___ftge@ff2+2
 11966  003BF4  ECBD  F020         	call	___ftge	;wreg free
 11967  003BF8  0100               	movlb	0	; () banked
 11968  003BFA  A0D8               	btfss	status,0,c
 11969  003BFC  D00B               	goto	l7256
 11970                           
 11971                           ; BSR set to: 0
 11972                           ;Bypass.c: 145: {
 11973                           ;Bypass.c: 146: SetBypass(i,0);
 11974  003BFE  C072  F01B         	movff	RunBypas@i,SetBypass@pin
 11975  003C02  C073  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
 11976  003C06  0E00               	movlw	0
 11977  003C08  6E1E               	movwf	SetBypass@state+1,c
 11978  003C0A  0E00               	movlw	0
 11979  003C0C  6E1D               	movwf	SetBypass@state,c
 11980  003C0E  EC10  F01E         	call	_SetBypass	;wreg free
 11981  003C12  D000               	goto	l7256
 11982  003C14                     l7256:
 11983  003C14  0100               	movlb	0	; () banked
 11984  003C16  4B72               	infsnz	RunBypas@i& (0+255),f,b
 11985  003C18  2B73               	incf	(RunBypas@i+1)& (0+255),f,b
 11986  003C1A  D7A0               	goto	l7240
 11987                           
 11988                           ; BSR set to: 0
 11989  003C1C  0012               	return	
 11990  003C1E                     l518:
 11991                           
 11992                           ; BSR set to: 0
 11993  003C1E  0012               	return		;funcret
 11994  003C20                     __end_of_RunBypas:
 11995                           	opt stack 0
 11996                           tosu	equ	0xFFF
 11997                           tosh	equ	0xFFE
 11998                           tosl	equ	0xFFD
 11999                           pclath	equ	0xFFA
 12000                           tblptru	equ	0xFF8
 12001                           tblptrh	equ	0xFF7
 12002                           tblptrl	equ	0xFF6
 12003                           tablat	equ	0xFF5
 12004                           prodh	equ	0xFF4
 12005                           prodl	equ	0xFF3
 12006                           intcon	equ	0xFF2
 12007                           intcon2	equ	0xFF1
 12008                           postinc0	equ	0xFEE
 12009                           wreg	equ	0xFE8
 12010                           postinc1	equ	0xFE6
 12011                           postdec1	equ	0xFE5
 12012                           fsr1h	equ	0xFE2
 12013                           fsr1l	equ	0xFE1
 12014                           indf2	equ	0xFDF
 12015                           postinc2	equ	0xFDE
 12016                           postdec2	equ	0xFDD
 12017                           plusw2	equ	0xFDB
 12018                           fsr2h	equ	0xFDA
 12019                           fsr2l	equ	0xFD9
 12020                           status	equ	0xFD8
 12021                           
 12022 ;; *************** function _SetBypass *****************
 12023 ;; Defined at:
 12024 ;;		line 18 in file "Bypass.c"
 12025 ;; Parameters:    Size  Location     Type
 12026 ;;  pin             2   26[COMRAM] int 
 12027 ;;  state           2   28[COMRAM] int 
 12028 ;; Auto vars:     Size  Location     Type
 12029 ;;		None
 12030 ;; Return value:  Size  Location     Type
 12031 ;;                  2   26[COMRAM] int 
 12032 ;; Registers used:
 12033 ;;		wreg, status,2, status,0
 12034 ;; Tracked objects:
 12035 ;;		On entry : 0/0
 12036 ;;		On exit  : 0/0
 12037 ;;		Unchanged: 0/0
 12038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12039 ;;      Params:         4       0       0       0       0       0       0
 12040 ;;      Locals:         0       0       0       0       0       0       0
 12041 ;;      Temps:          2       0       0       0       0       0       0
 12042 ;;      Totals:         6       0       0       0       0       0       0
 12043 ;;Total ram usage:        6 bytes
 12044 ;; Hardware stack levels used:    1
 12045 ;; Hardware stack levels required when called:    4
 12046 ;; This function calls:
 12047 ;;		Nothing
 12048 ;; This function is called by:
 12049 ;;		_RunBypas
 12050 ;; This function uses a non-reentrant model
 12051 ;;
 12052                           
 12053                           	psect	text50
 12054  003C20                     __ptext50:
 12055                           	opt stack 0
 12056  003C20                     _SetBypass:
 12057                           	opt stack 25
 12058                           
 12059                           ;Bypass.c: 20: switch (pin) {
 12060                           
 12061                           ; BSR set to: 0
 12062                           ;incstack = 0
 12063  003C20  D050               	goto	l6304
 12064  003C22                     l6282:
 12065                           
 12066                           ;Bypass.c: 22: if (state)
 12067  003C22  501D               	movf	SetBypass@state,w,c
 12068  003C24  101E               	iorwf	SetBypass@state+1,w,c
 12069  003C26  B4D8               	btfsc	status,2,c
 12070  003C28  D002               	goto	l445
 12071                           
 12072                           ;Bypass.c: 23: {
 12073                           ;Bypass.c: 24: do { LATC5 = 1; } while(0);
 12074  003C2A  8A8B               	bsf	3979,5,c	;volatile
 12075                           
 12076                           ;Bypass.c: 25: }
 12077  003C2C  0012               	return	
 12078  003C2E                     l445:
 12079  003C2E  9A8B               	bcf	3979,5,c	;volatile
 12080                           
 12081                           ;Bypass.c: 29: }
 12082                           ;Bypass.c: 30: break;
 12083  003C30  0012               	return	
 12084  003C32                     l6284:
 12085                           
 12086                           ;Bypass.c: 32: if (state)
 12087  003C32  501D               	movf	SetBypass@state,w,c
 12088  003C34  101E               	iorwf	SetBypass@state+1,w,c
 12089  003C36  B4D8               	btfsc	status,2,c
 12090  003C38  D002               	goto	l453
 12091                           
 12092                           ;Bypass.c: 33: {
 12093                           ;Bypass.c: 34: do { LATC4 = 1; } while(0);
 12094  003C3A  888B               	bsf	3979,4,c	;volatile
 12095                           
 12096                           ;Bypass.c: 35: }
 12097  003C3C  0012               	return	
 12098  003C3E                     l453:
 12099  003C3E  988B               	bcf	3979,4,c	;volatile
 12100                           
 12101                           ;Bypass.c: 39: }
 12102                           ;Bypass.c: 40: break;
 12103  003C40  0012               	return	
 12104  003C42                     l6286:
 12105                           
 12106                           ;Bypass.c: 42: if (state)
 12107  003C42  501D               	movf	SetBypass@state,w,c
 12108  003C44  101E               	iorwf	SetBypass@state+1,w,c
 12109  003C46  B4D8               	btfsc	status,2,c
 12110  003C48  D002               	goto	l460
 12111                           
 12112                           ;Bypass.c: 43: {
 12113                           ;Bypass.c: 44: do { LATD3 = 1; } while(0);
 12114  003C4A  868C               	bsf	3980,3,c	;volatile
 12115                           
 12116                           ;Bypass.c: 45: }
 12117  003C4C  0012               	return	
 12118  003C4E                     l460:
 12119  003C4E  968C               	bcf	3980,3,c	;volatile
 12120                           
 12121                           ;Bypass.c: 49: }
 12122                           ;Bypass.c: 50: break;
 12123  003C50  0012               	return	
 12124  003C52                     l6288:
 12125                           
 12126                           ;Bypass.c: 52: if (state)
 12127  003C52  501D               	movf	SetBypass@state,w,c
 12128  003C54  101E               	iorwf	SetBypass@state+1,w,c
 12129  003C56  B4D8               	btfsc	status,2,c
 12130  003C58  D002               	goto	l467
 12131                           
 12132                           ;Bypass.c: 53: {
 12133                           ;Bypass.c: 54: do { LATD2 = 1; } while(0);
 12134  003C5A  848C               	bsf	3980,2,c	;volatile
 12135                           
 12136                           ;Bypass.c: 55: }
 12137  003C5C  0012               	return	
 12138  003C5E                     l467:
 12139  003C5E  948C               	bcf	3980,2,c	;volatile
 12140                           
 12141                           ;Bypass.c: 59: }
 12142                           ;Bypass.c: 60: break;
 12143  003C60  0012               	return	
 12144  003C62                     l6290:
 12145                           
 12146                           ;Bypass.c: 62: if (state)
 12147  003C62  501D               	movf	SetBypass@state,w,c
 12148  003C64  101E               	iorwf	SetBypass@state+1,w,c
 12149  003C66  B4D8               	btfsc	status,2,c
 12150  003C68  D002               	goto	l474
 12151                           
 12152                           ;Bypass.c: 63: {
 12153                           ;Bypass.c: 64: do { LATD1 = 1; } while(0);
 12154  003C6A  828C               	bsf	3980,1,c	;volatile
 12155                           
 12156                           ;Bypass.c: 65: }
 12157  003C6C  0012               	return	
 12158  003C6E                     l474:
 12159  003C6E  928C               	bcf	3980,1,c	;volatile
 12160                           
 12161                           ;Bypass.c: 69: }
 12162                           ;Bypass.c: 70: break;
 12163  003C70  0012               	return	
 12164  003C72                     l6292:
 12165                           
 12166                           ;Bypass.c: 72: if (state)
 12167  003C72  501D               	movf	SetBypass@state,w,c
 12168  003C74  101E               	iorwf	SetBypass@state+1,w,c
 12169  003C76  B4D8               	btfsc	status,2,c
 12170  003C78  D002               	goto	l481
 12171                           
 12172                           ;Bypass.c: 73: {
 12173                           ;Bypass.c: 74: do { LATD5 = 1; } while(0);
 12174  003C7A  8A8C               	bsf	3980,5,c	;volatile
 12175                           
 12176                           ;Bypass.c: 75: }
 12177  003C7C  0012               	return	
 12178  003C7E                     l481:
 12179  003C7E  9A8C               	bcf	3980,5,c	;volatile
 12180                           
 12181                           ;Bypass.c: 79: }
 12182                           ;Bypass.c: 80: break;
 12183  003C80  0012               	return	
 12184  003C82                     l6294:
 12185                           
 12186                           ;Bypass.c: 82: if (state)
 12187  003C82  501D               	movf	SetBypass@state,w,c
 12188  003C84  101E               	iorwf	SetBypass@state+1,w,c
 12189  003C86  B4D8               	btfsc	status,2,c
 12190  003C88  D002               	goto	l488
 12191                           
 12192                           ;Bypass.c: 83: {
 12193                           ;Bypass.c: 84: do { LATB0 = 1; } while(0);
 12194  003C8A  808A               	bsf	3978,0,c	;volatile
 12195                           
 12196                           ;Bypass.c: 85: }
 12197  003C8C  0012               	return	
 12198  003C8E                     l488:
 12199  003C8E  908A               	bcf	3978,0,c	;volatile
 12200                           
 12201                           ;Bypass.c: 89: }
 12202                           ;Bypass.c: 90: break;
 12203  003C90  0012               	return	
 12204  003C92                     l6296:
 12205                           
 12206                           ;Bypass.c: 92: if (state)
 12207  003C92  501D               	movf	SetBypass@state,w,c
 12208  003C94  101E               	iorwf	SetBypass@state+1,w,c
 12209  003C96  B4D8               	btfsc	status,2,c
 12210  003C98  D002               	goto	l495
 12211                           
 12212                           ;Bypass.c: 93: {
 12213                           ;Bypass.c: 94: do { LATB1 = 1; } while(0);
 12214  003C9A  828A               	bsf	3978,1,c	;volatile
 12215                           
 12216                           ;Bypass.c: 95: }
 12217  003C9C  0012               	return	
 12218  003C9E                     l495:
 12219  003C9E  928A               	bcf	3978,1,c	;volatile
 12220                           
 12221                           ;Bypass.c: 99: }
 12222                           ;Bypass.c: 100: break;
 12223  003CA0  0012               	return	
 12224  003CA2                     l6298:
 12225                           
 12226                           ;Bypass.c: 102: if (state)
 12227  003CA2  501D               	movf	SetBypass@state,w,c
 12228  003CA4  101E               	iorwf	SetBypass@state+1,w,c
 12229  003CA6  B4D8               	btfsc	status,2,c
 12230  003CA8  D002               	goto	l502
 12231                           
 12232                           ;Bypass.c: 103: {
 12233                           ;Bypass.c: 104: do { LATB3 = 1; } while(0);
 12234  003CAA  868A               	bsf	3978,3,c	;volatile
 12235                           
 12236                           ;Bypass.c: 105: }
 12237  003CAC  0012               	return	
 12238  003CAE                     l502:
 12239  003CAE  968A               	bcf	3978,3,c	;volatile
 12240                           
 12241                           ;Bypass.c: 109: }
 12242                           ;Bypass.c: 110: break;
 12243  003CB0  0012               	return	
 12244  003CB2                     l6300:
 12245                           
 12246                           ;Bypass.c: 112: if (state)
 12247  003CB2  501D               	movf	SetBypass@state,w,c
 12248  003CB4  101E               	iorwf	SetBypass@state+1,w,c
 12249  003CB6  B4D8               	btfsc	status,2,c
 12250  003CB8  D002               	goto	l509
 12251                           
 12252                           ;Bypass.c: 113: {
 12253                           ;Bypass.c: 114: do { LATA0 = 1; } while(0);
 12254  003CBA  8089               	bsf	3977,0,c	;volatile
 12255                           
 12256                           ;Bypass.c: 115: }
 12257  003CBC  0012               	return	
 12258  003CBE                     l509:
 12259  003CBE  9089               	bcf	3977,0,c	;volatile
 12260                           
 12261                           ;Bypass.c: 121: }
 12262                           
 12263                           ;Bypass.c: 119: }
 12264                           ;Bypass.c: 120: break;
 12265  003CC0  0012               	return	
 12266  003CC2                     l6304:
 12267  003CC2  C01B  F01F         	movff	SetBypass@pin,??_SetBypass
 12268  003CC6  C01C  F020         	movff	SetBypass@pin+1,??_SetBypass+1
 12269                           
 12270                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12271                           ; Switch size 1, requested type "space"
 12272                           ; Number of cases is 1, Range of values is 0 to 0
 12273                           ; switch strategies available:
 12274                           ; Name         Instructions Cycles
 12275                           ; simple_byte            4     3 (average)
 12276                           ;	Chosen strategy is simple_byte
 12277  003CCA  5020               	movf	??_SetBypass+1,w,c
 12278  003CCC  0A00               	xorlw	0	; case 0
 12279  003CCE  A4D8               	btfss	status,2,c
 12280  003CD0  0012               	return	
 12281                           
 12282                           ; Switch size 1, requested type "space"
 12283                           ; Number of cases is 10, Range of values is 0 to 9
 12284                           ; switch strategies available:
 12285                           ; Name         Instructions Cycles
 12286                           ; simple_byte           31    16 (average)
 12287                           ;	Chosen strategy is simple_byte
 12288  003CD2  501F               	movf	??_SetBypass,w,c
 12289  003CD4  0A00               	xorlw	0	; case 0
 12290  003CD6  B4D8               	btfsc	status,2,c
 12291  003CD8  D7A4               	goto	l6282
 12292  003CDA  0A01               	xorlw	1	; case 1
 12293  003CDC  B4D8               	btfsc	status,2,c
 12294  003CDE  D7A9               	goto	l6284
 12295  003CE0  0A03               	xorlw	3	; case 2
 12296  003CE2  B4D8               	btfsc	status,2,c
 12297  003CE4  D7AE               	goto	l6286
 12298  003CE6  0A01               	xorlw	1	; case 3
 12299  003CE8  B4D8               	btfsc	status,2,c
 12300  003CEA  D7B3               	goto	l6288
 12301  003CEC  0A07               	xorlw	7	; case 4
 12302  003CEE  B4D8               	btfsc	status,2,c
 12303  003CF0  D7B8               	goto	l6290
 12304  003CF2  0A01               	xorlw	1	; case 5
 12305  003CF4  B4D8               	btfsc	status,2,c
 12306  003CF6  D7BD               	goto	l6292
 12307  003CF8  0A03               	xorlw	3	; case 6
 12308  003CFA  B4D8               	btfsc	status,2,c
 12309  003CFC  D7C2               	goto	l6294
 12310  003CFE  0A01               	xorlw	1	; case 7
 12311  003D00  B4D8               	btfsc	status,2,c
 12312  003D02  D7C7               	goto	l6296
 12313  003D04  0A0F               	xorlw	15	; case 8
 12314  003D06  B4D8               	btfsc	status,2,c
 12315  003D08  D7CC               	goto	l6298
 12316  003D0A  0A01               	xorlw	1	; case 9
 12317  003D0C  A4D8               	btfss	status,2,c
 12318  003D0E  0012               	return	
 12319  003D10  D7D0               	goto	l6300
 12320  003D12  0012               	return		;funcret
 12321  003D14                     __end_of_SetBypass:
 12322                           	opt stack 0
 12323                           tosu	equ	0xFFF
 12324                           tosh	equ	0xFFE
 12325                           tosl	equ	0xFFD
 12326                           pclath	equ	0xFFA
 12327                           tblptru	equ	0xFF8
 12328                           tblptrh	equ	0xFF7
 12329                           tblptrl	equ	0xFF6
 12330                           tablat	equ	0xFF5
 12331                           prodh	equ	0xFF4
 12332                           prodl	equ	0xFF3
 12333                           intcon	equ	0xFF2
 12334                           intcon2	equ	0xFF1
 12335                           postinc0	equ	0xFEE
 12336                           wreg	equ	0xFE8
 12337                           postinc1	equ	0xFE6
 12338                           postdec1	equ	0xFE5
 12339                           fsr1h	equ	0xFE2
 12340                           fsr1l	equ	0xFE1
 12341                           indf2	equ	0xFDF
 12342                           postinc2	equ	0xFDE
 12343                           postdec2	equ	0xFDD
 12344                           plusw2	equ	0xFDB
 12345                           fsr2h	equ	0xFDA
 12346                           fsr2l	equ	0xFD9
 12347                           status	equ	0xFD8
 12348                           
 12349 ;; *************** function _Battery_Get *****************
 12350 ;; Defined at:
 12351 ;;		line 93 in file "Battery.c"
 12352 ;; Parameters:    Size  Location     Type
 12353 ;;  channelnum      2    4[BANK0 ] int 
 12354 ;; Auto vars:     Size  Location     Type
 12355 ;;		None
 12356 ;; Return value:  Size  Location     Type
 12357 ;;                  3    4[BANK0 ] float 
 12358 ;; Registers used:
 12359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12360 ;; Tracked objects:
 12361 ;;		On entry : 0/0
 12362 ;;		On exit  : 0/0
 12363 ;;		Unchanged: 0/0
 12364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12365 ;;      Params:         0       3       0       0       0       0       0
 12366 ;;      Locals:         0       0       0       0       0       0       0
 12367 ;;      Temps:          0       0       0       0       0       0       0
 12368 ;;      Totals:         0       3       0       0       0       0       0
 12369 ;;Total ram usage:        3 bytes
 12370 ;; Hardware stack levels used:    1
 12371 ;; Hardware stack levels required when called:    5
 12372 ;; This function calls:
 12373 ;;		___wmul
 12374 ;; This function is called by:
 12375 ;;		_main
 12376 ;;		_RunBypas
 12377 ;; This function uses a non-reentrant model
 12378 ;;
 12379                           
 12380                           	psect	text51
 12381  004BA6                     __ptext51:
 12382                           	opt stack 0
 12383  004BA6                     _Battery_Get:
 12384                           	opt stack 24
 12385                           
 12386                           ;Battery.c: 96: return Battery_Volt[channelnum];
 12387                           
 12388                           ;incstack = 0
 12389  004BA6  C064  F060         	movff	Battery_Get@channelnum,___wmul@multiplier
 12390  004BAA  C065  F061         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
 12391  004BAE  0E00               	movlw	0
 12392  004BB0  0100               	movlb	0	; () banked
 12393  004BB2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12394  004BB4  0E03               	movlw	3
 12395  004BB6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12396  004BB8  ECEE  F025         	call	___wmul	;wreg free
 12397  004BBC  0E00               	movlw	low _Battery_Volt
 12398  004BBE  0100               	movlb	0	; () banked
 12399  004BC0  2560               	addwf	?___wmul& (0+255),w,b
 12400  004BC2  6ED9               	movwf	fsr2l,c
 12401  004BC4  0E01               	movlw	high _Battery_Volt
 12402  004BC6  0100               	movlb	0	; () banked
 12403  004BC8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12404  004BCA  6EDA               	movwf	fsr2h,c
 12405  004BCC  CFDE F064          	movff	postinc2,?_Battery_Get
 12406  004BD0  CFDE F065          	movff	postinc2,?_Battery_Get+1
 12407  004BD4  CFDD F066          	movff	postdec2,?_Battery_Get+2
 12408  004BD8  0012               	return	
 12409                           
 12410                           ; BSR set to: 0
 12411                           
 12412                           ; BSR set to: 0
 12413  004BDA  0012               	return		;funcret
 12414  004BDC                     __end_of_Battery_Get:
 12415                           	opt stack 0
 12416                           tosu	equ	0xFFF
 12417                           tosh	equ	0xFFE
 12418                           tosl	equ	0xFFD
 12419                           pclath	equ	0xFFA
 12420                           tblptru	equ	0xFF8
 12421                           tblptrh	equ	0xFF7
 12422                           tblptrl	equ	0xFF6
 12423                           tablat	equ	0xFF5
 12424                           prodh	equ	0xFF4
 12425                           prodl	equ	0xFF3
 12426                           intcon	equ	0xFF2
 12427                           intcon2	equ	0xFF1
 12428                           postinc0	equ	0xFEE
 12429                           wreg	equ	0xFE8
 12430                           postinc1	equ	0xFE6
 12431                           postdec1	equ	0xFE5
 12432                           fsr1h	equ	0xFE2
 12433                           fsr1l	equ	0xFE1
 12434                           indf2	equ	0xFDF
 12435                           postinc2	equ	0xFDE
 12436                           postdec2	equ	0xFDD
 12437                           plusw2	equ	0xFDB
 12438                           fsr2h	equ	0xFDA
 12439                           fsr2l	equ	0xFD9
 12440                           status	equ	0xFD8
 12441                           
 12442 ;; *************** function _Battery_Fault *****************
 12443 ;; Defined at:
 12444 ;;		line 72 in file "Battery.c"
 12445 ;; Parameters:    Size  Location     Type
 12446 ;;		None
 12447 ;; Auto vars:     Size  Location     Type
 12448 ;;  i               2   14[BANK0 ] int 
 12449 ;;  fault           1   13[BANK0 ] unsigned char 
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  1    wreg      unsigned char 
 12452 ;; Registers used:
 12453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12459 ;;      Params:         0       0       0       0       0       0       0
 12460 ;;      Locals:         0       3       0       0       0       0       0
 12461 ;;      Temps:          0       0       0       0       0       0       0
 12462 ;;      Totals:         0       3       0       0       0       0       0
 12463 ;;Total ram usage:        3 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; Hardware stack levels required when called:    5
 12466 ;; This function calls:
 12467 ;;		___ftge
 12468 ;;		___wmul
 12469 ;; This function is called by:
 12470 ;;		_main
 12471 ;; This function uses a non-reentrant model
 12472 ;;
 12473                           
 12474                           	psect	text52
 12475  0040A0                     __ptext52:
 12476                           	opt stack 0
 12477  0040A0                     _Battery_Fault:
 12478                           	opt stack 25
 12479                           
 12480                           ;Battery.c: 74: char fault = 0;
 12481                           
 12482                           ; BSR set to: 0
 12483                           ;incstack = 0
 12484  0040A0  0E00               	movlw	0
 12485  0040A2  0100               	movlb	0	; () banked
 12486  0040A4  6F6D               	movwf	Battery_Fault@fault& (0+255),b
 12487                           
 12488                           ;Battery.c: 75: for(int i = 0;i<9;i++)
 12489  0040A6  0E00               	movlw	0
 12490  0040A8  0100               	movlb	0	; () banked
 12491  0040AA  6F6F               	movwf	(Battery_Fault@i+1)& (0+255),b
 12492  0040AC  0E00               	movlw	0
 12493  0040AE  6F6E               	movwf	Battery_Fault@i& (0+255),b
 12494  0040B0                     l6880:
 12495                           
 12496                           ; BSR set to: 0
 12497  0040B0  0100               	movlb	0	; () banked
 12498  0040B2  BF6F               	btfsc	(Battery_Fault@i+1)& (0+255),7,b
 12499  0040B4  D00A               	goto	l6884
 12500  0040B6  0100               	movlb	0	; () banked
 12501  0040B8  516F               	movf	(Battery_Fault@i+1)& (0+255),w,b
 12502  0040BA  E15E               	bnz	l291
 12503  0040BC  0E09               	movlw	9
 12504  0040BE  0100               	movlb	0	; () banked
 12505  0040C0  5D6E               	subwf	Battery_Fault@i& (0+255),w,b
 12506  0040C2  B0D8               	btfsc	status,0,c
 12507  0040C4  0012               	return	
 12508  0040C6  D001               	goto	l6884
 12509                           
 12510                           ; BSR set to: 0
 12511  0040C8  0012               	return	
 12512  0040CA                     l6884:
 12513                           
 12514                           ; BSR set to: 0
 12515                           ;Battery.c: 76: {
 12516                           ;Battery.c: 77: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
 12517  0040CA  0E00               	movlw	0
 12518  0040CC  0100               	movlb	0	; () banked
 12519  0040CE  6F64               	movwf	___ftge@ff1& (0+255),b
 12520  0040D0  0E40               	movlw	64
 12521  0040D2  0100               	movlb	0	; () banked
 12522  0040D4  6F65               	movwf	(___ftge@ff1+1)& (0+255),b
 12523  0040D6  0E40               	movlw	64
 12524  0040D8  0100               	movlb	0	; () banked
 12525  0040DA  6F66               	movwf	(___ftge@ff1+2)& (0+255),b
 12526  0040DC  C06E  F060         	movff	Battery_Fault@i,___wmul@multiplier
 12527  0040E0  C06F  F061         	movff	Battery_Fault@i+1,___wmul@multiplier+1
 12528  0040E4  0E00               	movlw	0
 12529  0040E6  0100               	movlb	0	; () banked
 12530  0040E8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12531  0040EA  0E03               	movlw	3
 12532  0040EC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12533  0040EE  ECEE  F025         	call	___wmul	;wreg free
 12534  0040F2  0E00               	movlw	low _Battery_Volt
 12535  0040F4  0100               	movlb	0	; () banked
 12536  0040F6  2560               	addwf	?___wmul& (0+255),w,b
 12537  0040F8  6ED9               	movwf	fsr2l,c
 12538  0040FA  0E01               	movlw	high _Battery_Volt
 12539  0040FC  0100               	movlb	0	; () banked
 12540  0040FE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12541  004100  6EDA               	movwf	fsr2h,c
 12542  004102  CFDE F067          	movff	postinc2,___ftge@ff2
 12543  004106  CFDE F068          	movff	postinc2,___ftge@ff2+1
 12544  00410A  CFDD F069          	movff	postdec2,___ftge@ff2+2
 12545  00410E  ECBD  F020         	call	___ftge	;wreg free
 12546  004112  0100               	movlb	0	; () banked
 12547  004114  B0D8               	btfsc	status,0,c
 12548  004116  D02B               	goto	l6890
 12549                           
 12550                           ; BSR set to: 0
 12551  004118  C06E  F060         	movff	Battery_Fault@i,___wmul@multiplier
 12552  00411C  C06F  F061         	movff	Battery_Fault@i+1,___wmul@multiplier+1
 12553  004120  0E00               	movlw	0
 12554  004122  0100               	movlb	0	; () banked
 12555  004124  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12556  004126  0E03               	movlw	3
 12557  004128  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12558  00412A  ECEE  F025         	call	___wmul	;wreg free
 12559  00412E  0E00               	movlw	low _Battery_Volt
 12560  004130  0100               	movlb	0	; () banked
 12561  004132  2560               	addwf	?___wmul& (0+255),w,b
 12562  004134  6ED9               	movwf	fsr2l,c
 12563  004136  0E01               	movlw	high _Battery_Volt
 12564  004138  0100               	movlb	0	; () banked
 12565  00413A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12566  00413C  6EDA               	movwf	fsr2h,c
 12567  00413E  CFDE F064          	movff	postinc2,___ftge@ff1
 12568  004142  CFDE F065          	movff	postinc2,___ftge@ff1+1
 12569  004146  CFDD F066          	movff	postdec2,___ftge@ff1+2
 12570  00414A  0EB8               	movlw	184
 12571  00414C  0100               	movlb	0	; () banked
 12572  00414E  6F67               	movwf	___ftge@ff2& (0+255),b
 12573  004150  0E86               	movlw	134
 12574  004152  0100               	movlb	0	; () banked
 12575  004154  6F68               	movwf	(___ftge@ff2+1)& (0+255),b
 12576  004156  0E40               	movlw	64
 12577  004158  0100               	movlb	0	; () banked
 12578  00415A  6F69               	movwf	(___ftge@ff2+2)& (0+255),b
 12579  00415C  ECBD  F020         	call	___ftge	;wreg free
 12580  004160  0100               	movlb	0	; () banked
 12581  004162  B0D8               	btfsc	status,0,c
 12582  004164  D004               	goto	l6890
 12583                           
 12584                           ; BSR set to: 0
 12585                           ;Battery.c: 78: {
 12586                           ;Battery.c: 79: fault = 1;
 12587  004166  0E01               	movlw	1
 12588  004168  0100               	movlb	0	; () banked
 12589  00416A  6F6D               	movwf	Battery_Fault@fault& (0+255),b
 12590  00416C  D000               	goto	l6890
 12591  00416E                     l6890:
 12592                           
 12593                           ; BSR set to: 0
 12594  00416E  0100               	movlb	0	; () banked
 12595  004170  4B6E               	infsnz	Battery_Fault@i& (0+255),f,b
 12596  004172  2B6F               	incf	(Battery_Fault@i+1)& (0+255),f,b
 12597  004174  D79D               	goto	l6880
 12598                           
 12599                           ; BSR set to: 0
 12600  004176  0012               	return	
 12601  004178                     l291:
 12602                           
 12603                           ; BSR set to: 0
 12604  004178  0012               	return		;funcret
 12605  00417A                     __end_of_Battery_Fault:
 12606                           	opt stack 0
 12607                           tosu	equ	0xFFF
 12608                           tosh	equ	0xFFE
 12609                           tosl	equ	0xFFD
 12610                           pclath	equ	0xFFA
 12611                           tblptru	equ	0xFF8
 12612                           tblptrh	equ	0xFF7
 12613                           tblptrl	equ	0xFF6
 12614                           tablat	equ	0xFF5
 12615                           prodh	equ	0xFF4
 12616                           prodl	equ	0xFF3
 12617                           intcon	equ	0xFF2
 12618                           intcon2	equ	0xFF1
 12619                           postinc0	equ	0xFEE
 12620                           wreg	equ	0xFE8
 12621                           postinc1	equ	0xFE6
 12622                           postdec1	equ	0xFE5
 12623                           fsr1h	equ	0xFE2
 12624                           fsr1l	equ	0xFE1
 12625                           indf2	equ	0xFDF
 12626                           postinc2	equ	0xFDE
 12627                           postdec2	equ	0xFDD
 12628                           plusw2	equ	0xFDB
 12629                           fsr2h	equ	0xFDA
 12630                           fsr2l	equ	0xFD9
 12631                           status	equ	0xFD8
 12632                           
 12633 ;; *************** function ___ftge *****************
 12634 ;; Defined at:
 12635 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 12636 ;; Parameters:    Size  Location     Type
 12637 ;;  ff1             3    4[BANK0 ] float 
 12638 ;;  ff2             3    7[BANK0 ] float 
 12639 ;; Auto vars:     Size  Location     Type
 12640 ;;		None
 12641 ;; Return value:  Size  Location     Type
 12642 ;;		None               void
 12643 ;; Registers used:
 12644 ;;		wreg, status,2, status,0
 12645 ;; Tracked objects:
 12646 ;;		On entry : 0/0
 12647 ;;		On exit  : 0/0
 12648 ;;		Unchanged: 0/0
 12649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12650 ;;      Params:         0       6       0       0       0       0       0
 12651 ;;      Locals:         0       0       0       0       0       0       0
 12652 ;;      Temps:          0       3       0       0       0       0       0
 12653 ;;      Totals:         0       9       0       0       0       0       0
 12654 ;;Total ram usage:        9 bytes
 12655 ;; Hardware stack levels used:    1
 12656 ;; Hardware stack levels required when called:    4
 12657 ;; This function calls:
 12658 ;;		Nothing
 12659 ;; This function is called by:
 12660 ;;		_Battery_Fault
 12661 ;;		_Temp_Fault
 12662 ;;		_RunBypas
 12663 ;;		_printf
 12664 ;; This function uses a non-reentrant model
 12665 ;;
 12666                           
 12667                           	psect	text53
 12668  00417A                     __ptext53:
 12669                           	opt stack 0
 12670  00417A                     ___ftge:
 12671                           	opt stack 25
 12672                           
 12673                           ; BSR set to: 0
 12674                           ;incstack = 0
 12675  00417A  0100               	movlb	0	; () banked
 12676  00417C  AF66               	btfss	(___ftge@ff1+2)& (0+255),7,b
 12677  00417E  D01E               	goto	l6740
 12678                           
 12679                           ; BSR set to: 0
 12680  004180  C064  F06A         	movff	___ftge@ff1,??___ftge
 12681  004184  C065  F06B         	movff	___ftge@ff1+1,??___ftge+1
 12682  004188  C066  F06C         	movff	___ftge@ff1+2,??___ftge+2
 12683  00418C  0100               	movlb	0	; () banked
 12684  00418E  1F6A               	comf	??___ftge& (0+255),f,b
 12685  004190  1F6B               	comf	(??___ftge+1)& (0+255),f,b
 12686  004192  1F6C               	comf	(??___ftge+2)& (0+255),f,b
 12687  004194  2B6A               	incf	??___ftge& (0+255),f,b
 12688  004196  0E00               	movlw	0
 12689  004198  236B               	addwfc	(??___ftge+1)& (0+255),f,b
 12690  00419A  236C               	addwfc	(??___ftge+2)& (0+255),f,b
 12691  00419C  0E00               	movlw	0
 12692  00419E  0100               	movlb	0	; () banked
 12693  0041A0  256A               	addwf	??___ftge& (0+255),w,b
 12694  0041A2  0100               	movlb	0	; () banked
 12695  0041A4  6F64               	movwf	___ftge@ff1& (0+255),b
 12696  0041A6  0E00               	movlw	0
 12697  0041A8  0100               	movlb	0	; () banked
 12698  0041AA  216B               	addwfc	(??___ftge+1)& (0+255),w,b
 12699  0041AC  0100               	movlb	0	; () banked
 12700  0041AE  6F65               	movwf	(___ftge@ff1+1)& (0+255),b
 12701  0041B0  0E80               	movlw	128
 12702  0041B2  0100               	movlb	0	; () banked
 12703  0041B4  216C               	addwfc	(??___ftge+2)& (0+255),w,b
 12704  0041B6  0100               	movlb	0	; () banked
 12705  0041B8  6F66               	movwf	(___ftge@ff1+2)& (0+255),b
 12706  0041BA  D000               	goto	l6740
 12707  0041BC                     l6740:
 12708                           
 12709                           ; BSR set to: 0
 12710  0041BC  0100               	movlb	0	; () banked
 12711  0041BE  AF69               	btfss	(___ftge@ff2+2)& (0+255),7,b
 12712  0041C0  D01E               	goto	l6744
 12713                           
 12714                           ; BSR set to: 0
 12715  0041C2  C067  F06A         	movff	___ftge@ff2,??___ftge
 12716  0041C6  C068  F06B         	movff	___ftge@ff2+1,??___ftge+1
 12717  0041CA  C069  F06C         	movff	___ftge@ff2+2,??___ftge+2
 12718  0041CE  0100               	movlb	0	; () banked
 12719  0041D0  1F6A               	comf	??___ftge& (0+255),f,b
 12720  0041D2  1F6B               	comf	(??___ftge+1)& (0+255),f,b
 12721  0041D4  1F6C               	comf	(??___ftge+2)& (0+255),f,b
 12722  0041D6  2B6A               	incf	??___ftge& (0+255),f,b
 12723  0041D8  0E00               	movlw	0
 12724  0041DA  236B               	addwfc	(??___ftge+1)& (0+255),f,b
 12725  0041DC  236C               	addwfc	(??___ftge+2)& (0+255),f,b
 12726  0041DE  0E00               	movlw	0
 12727  0041E0  0100               	movlb	0	; () banked
 12728  0041E2  256A               	addwf	??___ftge& (0+255),w,b
 12729  0041E4  0100               	movlb	0	; () banked
 12730  0041E6  6F67               	movwf	___ftge@ff2& (0+255),b
 12731  0041E8  0E00               	movlw	0
 12732  0041EA  0100               	movlb	0	; () banked
 12733  0041EC  216B               	addwfc	(??___ftge+1)& (0+255),w,b
 12734  0041EE  0100               	movlb	0	; () banked
 12735  0041F0  6F68               	movwf	(___ftge@ff2+1)& (0+255),b
 12736  0041F2  0E80               	movlw	128
 12737  0041F4  0100               	movlb	0	; () banked
 12738  0041F6  216C               	addwfc	(??___ftge+2)& (0+255),w,b
 12739  0041F8  0100               	movlb	0	; () banked
 12740  0041FA  6F69               	movwf	(___ftge@ff2+2)& (0+255),b
 12741  0041FC  D000               	goto	l6744
 12742  0041FE                     l6744:
 12743                           
 12744                           ; BSR set to: 0
 12745  0041FE  0E00               	movlw	0
 12746  004200  0100               	movlb	0	; () banked
 12747  004202  1B64               	xorwf	___ftge@ff1& (0+255),f,b
 12748  004204  0E00               	movlw	0
 12749  004206  0100               	movlb	0	; () banked
 12750  004208  1B65               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 12751  00420A  0E80               	movlw	128
 12752  00420C  0100               	movlb	0	; () banked
 12753  00420E  1B66               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 12754                           
 12755                           ; BSR set to: 0
 12756  004210  0E00               	movlw	0
 12757  004212  0100               	movlb	0	; () banked
 12758  004214  1B67               	xorwf	___ftge@ff2& (0+255),f,b
 12759  004216  0E00               	movlw	0
 12760  004218  0100               	movlb	0	; () banked
 12761  00421A  1B68               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 12762  00421C  0E80               	movlw	128
 12763  00421E  0100               	movlb	0	; () banked
 12764  004220  1B69               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 12765  004222  0100               	movlb	0	; () banked
 12766  004224  5167               	movf	___ftge@ff2& (0+255),w,b
 12767  004226  0100               	movlb	0	; () banked
 12768  004228  5D64               	subwf	___ftge@ff1& (0+255),w,b
 12769  00422A  0100               	movlb	0	; () banked
 12770  00422C  5168               	movf	(___ftge@ff2+1)& (0+255),w,b
 12771  00422E  0100               	movlb	0	; () banked
 12772  004230  5965               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 12773  004232  0100               	movlb	0	; () banked
 12774  004234  5169               	movf	(___ftge@ff2+2)& (0+255),w,b
 12775  004236  0100               	movlb	0	; () banked
 12776  004238  5966               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 12777  00423A  B0D8               	btfsc	status,0,c
 12778  00423C  D002               	goto	l6750
 12779                           
 12780                           ; BSR set to: 0
 12781  00423E  90D8               	bcf	status,0,c
 12782  004240  0012               	return	
 12783  004242                     l6750:
 12784                           
 12785                           ; BSR set to: 0
 12786  004242  80D8               	bsf	status,0,c
 12787                           
 12788                           ; BSR set to: 0
 12789  004244  0012               	return	
 12790                           
 12791                           ; BSR set to: 0
 12792                           
 12793                           ; BSR set to: 0
 12794  004246  0012               	return		;funcret
 12795  004248                     __end_of___ftge:
 12796                           	opt stack 0
 12797                           tosu	equ	0xFFF
 12798                           tosh	equ	0xFFE
 12799                           tosl	equ	0xFFD
 12800                           pclath	equ	0xFFA
 12801                           tblptru	equ	0xFF8
 12802                           tblptrh	equ	0xFF7
 12803                           tblptrl	equ	0xFF6
 12804                           tablat	equ	0xFF5
 12805                           prodh	equ	0xFF4
 12806                           prodl	equ	0xFF3
 12807                           intcon	equ	0xFF2
 12808                           intcon2	equ	0xFF1
 12809                           postinc0	equ	0xFEE
 12810                           wreg	equ	0xFE8
 12811                           postinc1	equ	0xFE6
 12812                           postdec1	equ	0xFE5
 12813                           fsr1h	equ	0xFE2
 12814                           fsr1l	equ	0xFE1
 12815                           indf2	equ	0xFDF
 12816                           postinc2	equ	0xFDE
 12817                           postdec2	equ	0xFDD
 12818                           plusw2	equ	0xFDB
 12819                           fsr2h	equ	0xFDA
 12820                           fsr2l	equ	0xFD9
 12821                           status	equ	0xFD8
 12822                           
 12823 ;; *************** function _Battery_Convert *****************
 12824 ;; Defined at:
 12825 ;;		line 34 in file "Battery.c"
 12826 ;; Parameters:    Size  Location     Type
 12827 ;;		None
 12828 ;; Auto vars:     Size  Location     Type
 12829 ;;  x               2   58[BANK0 ] int 
 12830 ;; Return value:  Size  Location     Type
 12831 ;;		None               void
 12832 ;; Registers used:
 12833 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12834 ;; Tracked objects:
 12835 ;;		On entry : 0/0
 12836 ;;		On exit  : 0/0
 12837 ;;		Unchanged: 0/0
 12838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12839 ;;      Params:         0       0       0       0       0       0       0
 12840 ;;      Locals:         0       2       0       0       0       0       0
 12841 ;;      Temps:          0       2       0       0       0       0       0
 12842 ;;      Totals:         0       4       0       0       0       0       0
 12843 ;;Total ram usage:        4 bytes
 12844 ;; Hardware stack levels used:    1
 12845 ;; Hardware stack levels required when called:    7
 12846 ;; This function calls:
 12847 ;;		_Battery_Filter
 12848 ;;		___altoft
 12849 ;;		___ftadd
 12850 ;;		___ftdiv
 12851 ;;		___ftmul
 12852 ;;		___wmul
 12853 ;; This function is called by:
 12854 ;;		_main
 12855 ;; This function uses a non-reentrant model
 12856 ;;
 12857                           
 12858                           	psect	text54
 12859  003A20                     __ptext54:
 12860                           	opt stack 0
 12861  003A20                     _Battery_Convert:
 12862                           	opt stack 23
 12863                           
 12864                           ;Battery.c: 36: int x;
 12865                           ;Battery.c: 37: for(x = 0; x < 9; x++)
 12866                           
 12867                           ; BSR set to: 0
 12868                           ;incstack = 0
 12869  003A20  0E00               	movlw	0
 12870  003A22  0100               	movlb	0	; () banked
 12871  003A24  6F9B               	movwf	(Battery_Convert@x+1)& (0+255),b
 12872  003A26  0E00               	movlw	0
 12873  003A28  6F9A               	movwf	Battery_Convert@x& (0+255),b
 12874  003A2A                     l6866:
 12875                           
 12876                           ; BSR set to: 0
 12877  003A2A  0100               	movlb	0	; () banked
 12878  003A2C  BF9B               	btfsc	(Battery_Convert@x+1)& (0+255),7,b
 12879  003A2E  D00A               	goto	l6870
 12880  003A30  0100               	movlb	0	; () banked
 12881  003A32  519B               	movf	(Battery_Convert@x+1)& (0+255),w,b
 12882  003A34  E178               	bnz	l6876
 12883  003A36  0E09               	movlw	9
 12884  003A38  0100               	movlb	0	; () banked
 12885  003A3A  5D9A               	subwf	Battery_Convert@x& (0+255),w,b
 12886  003A3C  B0D8               	btfsc	status,0,c
 12887  003A3E  D073               	goto	l6876
 12888  003A40  D001               	goto	l6870
 12889                           
 12890                           ; BSR set to: 0
 12891  003A42  D071               	goto	l6876
 12892  003A44                     l6870:
 12893                           
 12894                           ; BSR set to: 0
 12895                           ;Battery.c: 38: {
 12896                           ;Battery.c: 39: TempBattery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0) + 0.05;
 12897  003A44  C09A  F060         	movff	Battery_Convert@x,___wmul@multiplier
 12898  003A48  C09B  F061         	movff	Battery_Convert@x+1,___wmul@multiplier+1
 12899  003A4C  0E00               	movlw	0
 12900  003A4E  0100               	movlb	0	; () banked
 12901  003A50  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12902  003A52  0E03               	movlw	3
 12903  003A54  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12904  003A56  ECEE  F025         	call	___wmul	;wreg free
 12905  003A5A  0EA0               	movlw	low _TempBattery_Volt
 12906  003A5C  0100               	movlb	0	; () banked
 12907  003A5E  2560               	addwf	?___wmul& (0+255),w,b
 12908  003A60  6ED9               	movwf	fsr2l,c
 12909  003A62  0E01               	movlw	high _TempBattery_Volt
 12910  003A64  0100               	movlb	0	; () banked
 12911  003A66  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12912  003A68  6EDA               	movwf	fsr2h,c
 12913  003A6A  0E00               	movlw	0
 12914  003A6C  0100               	movlb	0	; () banked
 12915  003A6E  6F74               	movwf	___ftmul@f2& (0+255),b
 12916  003A70  0EA0               	movlw	160
 12917  003A72  0100               	movlb	0	; () banked
 12918  003A74  6F75               	movwf	(___ftmul@f2+1)& (0+255),b
 12919  003A76  0E40               	movlw	64
 12920  003A78  0100               	movlb	0	; () banked
 12921  003A7A  6F76               	movwf	(___ftmul@f2+2)& (0+255),b
 12922  003A7C  0E00               	movlw	0
 12923  003A7E  0100               	movlb	0	; () banked
 12924  003A80  6F65               	movwf	___ftdiv@f2& (0+255),b
 12925  003A82  0E80               	movlw	128
 12926  003A84  0100               	movlb	0	; () banked
 12927  003A86  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
 12928  003A88  0E44               	movlw	68
 12929  003A8A  0100               	movlb	0	; () banked
 12930  003A8C  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
 12931  003A8E  0EB0               	movlw	low _Battery_Adc
 12932  003A90  0100               	movlb	0	; () banked
 12933  003A92  6F98               	movwf	??_Battery_Convert& (0+255),b
 12934  003A94  0E00               	movlw	high _Battery_Adc
 12935  003A96  0100               	movlb	0	; () banked
 12936  003A98  6F99               	movwf	(??_Battery_Convert+1)& (0+255),b
 12937  003A9A  90D8               	bcf	status,0,c
 12938  003A9C  0100               	movlb	0	; () banked
 12939  003A9E  359A               	rlcf	Battery_Convert@x& (0+255),w,b
 12940  003AA0  6EE1               	movwf	fsr1l,c
 12941  003AA2  0100               	movlb	0	; () banked
 12942  003AA4  359B               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
 12943  003AA6  6EE2               	movwf	fsr1h,c
 12944  003AA8  90D8               	bcf	status,0,c
 12945  003AAA  36E1               	rlcf	fsr1l,f,c
 12946  003AAC  36E2               	rlcf	fsr1h,f,c
 12947  003AAE  0100               	movlb	0	; () banked
 12948  003AB0  5198               	movf	??_Battery_Convert& (0+255),w,b
 12949  003AB2  26E1               	addwf	fsr1l,f,c
 12950  003AB4  0100               	movlb	0	; () banked
 12951  003AB6  5199               	movf	(??_Battery_Convert+1)& (0+255),w,b
 12952  003AB8  22E2               	addwfc	fsr1h,f,c
 12953  003ABA  CFE6 F023          	movff	postinc1,___altoft@c
 12954  003ABE  CFE6 F024          	movff	postinc1,___altoft@c+1
 12955  003AC2  CFE6 F025          	movff	postinc1,___altoft@c+2
 12956  003AC6  CFE6 F026          	movff	postinc1,___altoft@c+3
 12957  003ACA  EC8A  F023         	call	___altoft	;wreg free
 12958  003ACE  C023  F062         	movff	?___altoft,___ftdiv@f1
 12959  003AD2  C024  F063         	movff	?___altoft+1,___ftdiv@f1+1
 12960  003AD6  C025  F064         	movff	?___altoft+2,___ftdiv@f1+2
 12961  003ADA  EC6D  F019         	call	___ftdiv	;wreg free
 12962  003ADE  C062  F071         	movff	?___ftdiv,___ftmul@f1
 12963  003AE2  C063  F072         	movff	?___ftdiv+1,___ftmul@f1+1
 12964  003AE6  C064  F073         	movff	?___ftdiv+2,___ftmul@f1+2
 12965  003AEA  EC0E  F018         	call	___ftmul	;wreg free
 12966  003AEE  C071  F08A         	movff	?___ftmul,___ftadd@f1
 12967  003AF2  C072  F08B         	movff	?___ftmul+1,___ftadd@f1+1
 12968  003AF6  C073  F08C         	movff	?___ftmul+2,___ftadd@f1+2
 12969  003AFA  0ECD               	movlw	205
 12970  003AFC  0100               	movlb	0	; () banked
 12971  003AFE  6F8D               	movwf	___ftadd@f2& (0+255),b
 12972  003B00  0E4C               	movlw	76
 12973  003B02  0100               	movlb	0	; () banked
 12974  003B04  6F8E               	movwf	(___ftadd@f2+1)& (0+255),b
 12975  003B06  0E3D               	movlw	61
 12976  003B08  0100               	movlb	0	; () banked
 12977  003B0A  6F8F               	movwf	(___ftadd@f2+2)& (0+255),b
 12978  003B0C  EC6D  F013         	call	___ftadd	;wreg free
 12979  003B10  C08A  FFDE         	movff	?___ftadd,postinc2
 12980  003B14  C08B  FFDE         	movff	?___ftadd+1,postinc2
 12981  003B18  C08C  FFDE         	movff	?___ftadd+2,postinc2
 12982  003B1C  0100               	movlb	0	; () banked
 12983  003B1E  4B9A               	infsnz	Battery_Convert@x& (0+255),f,b
 12984  003B20  2B9B               	incf	(Battery_Convert@x+1)& (0+255),f,b
 12985  003B22  D783               	goto	l6866
 12986                           
 12987                           ; BSR set to: 0
 12988  003B24  D000               	goto	l6876
 12989  003B26                     l6876:
 12990                           
 12991                           ; BSR set to: 0
 12992                           ;Battery.c: 40: }
 12993                           ;Battery.c: 41: Battery_Filter();
 12994  003B26  EC87  F016         	call	_Battery_Filter	;wreg free
 12995  003B2A  0012               	return		;funcret
 12996  003B2C                     __end_of_Battery_Convert:
 12997                           	opt stack 0
 12998                           tosu	equ	0xFFF
 12999                           tosh	equ	0xFFE
 13000                           tosl	equ	0xFFD
 13001                           pclath	equ	0xFFA
 13002                           tblptru	equ	0xFF8
 13003                           tblptrh	equ	0xFF7
 13004                           tblptrl	equ	0xFF6
 13005                           tablat	equ	0xFF5
 13006                           prodh	equ	0xFF4
 13007                           prodl	equ	0xFF3
 13008                           intcon	equ	0xFF2
 13009                           intcon2	equ	0xFF1
 13010                           postinc0	equ	0xFEE
 13011                           wreg	equ	0xFE8
 13012                           postinc1	equ	0xFE6
 13013                           postdec1	equ	0xFE5
 13014                           fsr1h	equ	0xFE2
 13015                           fsr1l	equ	0xFE1
 13016                           indf2	equ	0xFDF
 13017                           postinc2	equ	0xFDE
 13018                           postdec2	equ	0xFDD
 13019                           plusw2	equ	0xFDB
 13020                           fsr2h	equ	0xFDA
 13021                           fsr2l	equ	0xFD9
 13022                           status	equ	0xFD8
 13023                           
 13024 ;; *************** function ___ftdiv *****************
 13025 ;; Defined at:
 13026 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 13027 ;; Parameters:    Size  Location     Type
 13028 ;;  f1              3    2[BANK0 ] float 
 13029 ;;  f2              3    5[BANK0 ] float 
 13030 ;; Auto vars:     Size  Location     Type
 13031 ;;  f3              3   12[BANK0 ] float 
 13032 ;;  sign            1   16[BANK0 ] unsigned char 
 13033 ;;  exp             1   15[BANK0 ] unsigned char 
 13034 ;;  cntr            1   11[BANK0 ] unsigned char 
 13035 ;; Return value:  Size  Location     Type
 13036 ;;                  3    2[BANK0 ] float 
 13037 ;; Registers used:
 13038 ;;		wreg, status,2, status,0, cstack
 13039 ;; Tracked objects:
 13040 ;;		On entry : 0/0
 13041 ;;		On exit  : 0/0
 13042 ;;		Unchanged: 0/0
 13043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13044 ;;      Params:         0       6       0       0       0       0       0
 13045 ;;      Locals:         0       6       0       0       0       0       0
 13046 ;;      Temps:          0       3       0       0       0       0       0
 13047 ;;      Totals:         0      15       0       0       0       0       0
 13048 ;;Total ram usage:       15 bytes
 13049 ;; Hardware stack levels used:    1
 13050 ;; Hardware stack levels required when called:    5
 13051 ;; This function calls:
 13052 ;;		___ftpack
 13053 ;; This function is called by:
 13054 ;;		_Battery_Convert
 13055 ;;		_Temp_Convert
 13056 ;; This function uses a non-reentrant model
 13057 ;;
 13058                           
 13059                           	psect	text55
 13060  0032DA                     __ptext55:
 13061                           	opt stack 0
 13062  0032DA                     ___ftdiv:
 13063                           	opt stack 24
 13064                           
 13065                           ;incstack = 0
 13066  0032DA  C064  F068         	movff	___ftdiv@f1+2,??___ftdiv
 13067  0032DE  0100               	movlb	0	; () banked
 13068  0032E0  6B69               	clrf	(??___ftdiv+1)& (0+255),b
 13069  0032E2  6B6A               	clrf	(??___ftdiv+2)& (0+255),b
 13070  0032E4  0100               	movlb	0	; () banked
 13071  0032E6  3563               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 13072  0032E8  0100               	movlb	0	; () banked
 13073  0032EA  3768               	rlcf	??___ftdiv& (0+255),f,b
 13074  0032EC  E301               	bnc	u8051
 13075  0032EE  8169               	bsf	(??___ftdiv+1)& (0+255),0,b
 13076  0032F0                     u8051:
 13077  0032F0  0100               	movlb	0	; () banked
 13078  0032F2  5168               	movf	??___ftdiv& (0+255),w,b
 13079  0032F4  0100               	movlb	0	; () banked
 13080  0032F6  6F6F               	movwf	___ftdiv@exp& (0+255),b
 13081  0032F8  0100               	movlb	0	; () banked
 13082  0032FA  516F               	movf	___ftdiv@exp& (0+255),w,b
 13083  0032FC  A4D8               	btfss	status,2,c
 13084  0032FE  D00A               	goto	l6688
 13085                           
 13086                           ; BSR set to: 0
 13087  003300  0E00               	movlw	0
 13088  003302  0100               	movlb	0	; () banked
 13089  003304  6F62               	movwf	?___ftdiv& (0+255),b
 13090  003306  0E00               	movlw	0
 13091  003308  0100               	movlb	0	; () banked
 13092  00330A  6F63               	movwf	(?___ftdiv+1)& (0+255),b
 13093  00330C  0E00               	movlw	0
 13094  00330E  0100               	movlb	0	; () banked
 13095  003310  6F64               	movwf	(?___ftdiv+2)& (0+255),b
 13096                           
 13097                           ; BSR set to: 0
 13098  003312  0012               	return	
 13099  003314                     l6688:
 13100                           
 13101                           ; BSR set to: 0
 13102  003314  C067  F068         	movff	___ftdiv@f2+2,??___ftdiv
 13103  003318  0100               	movlb	0	; () banked
 13104  00331A  6B69               	clrf	(??___ftdiv+1)& (0+255),b
 13105  00331C  6B6A               	clrf	(??___ftdiv+2)& (0+255),b
 13106  00331E  0100               	movlb	0	; () banked
 13107  003320  3566               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 13108  003322  0100               	movlb	0	; () banked
 13109  003324  3768               	rlcf	??___ftdiv& (0+255),f,b
 13110  003326  E301               	bnc	u8071
 13111  003328  8169               	bsf	(??___ftdiv+1)& (0+255),0,b
 13112  00332A                     u8071:
 13113  00332A  0100               	movlb	0	; () banked
 13114  00332C  5168               	movf	??___ftdiv& (0+255),w,b
 13115  00332E  0100               	movlb	0	; () banked
 13116  003330  6F70               	movwf	___ftdiv@sign& (0+255),b
 13117  003332  0100               	movlb	0	; () banked
 13118  003334  5170               	movf	___ftdiv@sign& (0+255),w,b
 13119  003336  A4D8               	btfss	status,2,c
 13120  003338  D00A               	goto	l6694
 13121                           
 13122                           ; BSR set to: 0
 13123  00333A  0E00               	movlw	0
 13124  00333C  0100               	movlb	0	; () banked
 13125  00333E  6F62               	movwf	?___ftdiv& (0+255),b
 13126  003340  0E00               	movlw	0
 13127  003342  0100               	movlb	0	; () banked
 13128  003344  6F63               	movwf	(?___ftdiv+1)& (0+255),b
 13129  003346  0E00               	movlw	0
 13130  003348  0100               	movlb	0	; () banked
 13131  00334A  6F64               	movwf	(?___ftdiv+2)& (0+255),b
 13132                           
 13133                           ; BSR set to: 0
 13134  00334C  0012               	return	
 13135  00334E                     l6694:
 13136                           
 13137                           ; BSR set to: 0
 13138  00334E  0E00               	movlw	0
 13139  003350  0100               	movlb	0	; () banked
 13140  003352  6F6C               	movwf	___ftdiv@f3& (0+255),b
 13141  003354  0E00               	movlw	0
 13142  003356  0100               	movlb	0	; () banked
 13143  003358  6F6D               	movwf	(___ftdiv@f3+1)& (0+255),b
 13144  00335A  0E00               	movlw	0
 13145  00335C  0100               	movlb	0	; () banked
 13146  00335E  6F6E               	movwf	(___ftdiv@f3+2)& (0+255),b
 13147                           
 13148                           ; BSR set to: 0
 13149  003360  0100               	movlb	0	; () banked
 13150  003362  5170               	movf	___ftdiv@sign& (0+255),w,b
 13151  003364  0F89               	addlw	137
 13152  003366  0100               	movlb	0	; () banked
 13153  003368  5F6F               	subwf	___ftdiv@exp& (0+255),f,b
 13154                           
 13155                           ; BSR set to: 0
 13156  00336A  C064  F070         	movff	___ftdiv@f1+2,___ftdiv@sign
 13157                           
 13158                           ; BSR set to: 0
 13159  00336E  0100               	movlb	0	; () banked
 13160  003370  5167               	movf	(___ftdiv@f2+2)& (0+255),w,b
 13161  003372  0100               	movlb	0	; () banked
 13162  003374  1B70               	xorwf	___ftdiv@sign& (0+255),f,b
 13163                           
 13164                           ; BSR set to: 0
 13165  003376  0E80               	movlw	128
 13166  003378  0100               	movlb	0	; () banked
 13167  00337A  1770               	andwf	___ftdiv@sign& (0+255),f,b
 13168                           
 13169                           ; BSR set to: 0
 13170  00337C  0100               	movlb	0	; () banked
 13171  00337E  8F63               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 13172                           
 13173                           ; BSR set to: 0
 13174  003380  0EFF               	movlw	255
 13175  003382  0100               	movlb	0	; () banked
 13176  003384  1762               	andwf	___ftdiv@f1& (0+255),f,b
 13177  003386  0EFF               	movlw	255
 13178  003388  0100               	movlb	0	; () banked
 13179  00338A  1763               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 13180  00338C  0E00               	movlw	0
 13181  00338E  0100               	movlb	0	; () banked
 13182  003390  1764               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 13183                           
 13184                           ; BSR set to: 0
 13185  003392  0100               	movlb	0	; () banked
 13186  003394  8F66               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 13187                           
 13188                           ; BSR set to: 0
 13189  003396  0EFF               	movlw	255
 13190  003398  0100               	movlb	0	; () banked
 13191  00339A  1765               	andwf	___ftdiv@f2& (0+255),f,b
 13192  00339C  0EFF               	movlw	255
 13193  00339E  0100               	movlb	0	; () banked
 13194  0033A0  1766               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 13195  0033A2  0E00               	movlw	0
 13196  0033A4  0100               	movlb	0	; () banked
 13197  0033A6  1767               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 13198                           
 13199                           ; BSR set to: 0
 13200  0033A8  0E18               	movlw	24
 13201  0033AA  0100               	movlb	0	; () banked
 13202  0033AC  6F6B               	movwf	___ftdiv@cntr& (0+255),b
 13203  0033AE  D000               	goto	l6714
 13204  0033B0                     l6714:
 13205                           
 13206                           ; BSR set to: 0
 13207  0033B0  0100               	movlb	0	; () banked
 13208  0033B2  90D8               	bcf	status,0,c
 13209  0033B4  376C               	rlcf	___ftdiv@f3& (0+255),f,b
 13210  0033B6  376D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 13211  0033B8  376E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 13212                           
 13213                           ; BSR set to: 0
 13214  0033BA  0100               	movlb	0	; () banked
 13215  0033BC  5165               	movf	___ftdiv@f2& (0+255),w,b
 13216  0033BE  0100               	movlb	0	; () banked
 13217  0033C0  5D62               	subwf	___ftdiv@f1& (0+255),w,b
 13218  0033C2  0100               	movlb	0	; () banked
 13219  0033C4  5166               	movf	(___ftdiv@f2+1)& (0+255),w,b
 13220  0033C6  0100               	movlb	0	; () banked
 13221  0033C8  5963               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 13222  0033CA  0100               	movlb	0	; () banked
 13223  0033CC  5167               	movf	(___ftdiv@f2+2)& (0+255),w,b
 13224  0033CE  0100               	movlb	0	; () banked
 13225  0033D0  5964               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 13226  0033D2  A0D8               	btfss	status,0,c
 13227  0033D4  D00E               	goto	l1338
 13228                           
 13229                           ; BSR set to: 0
 13230  0033D6  0100               	movlb	0	; () banked
 13231  0033D8  5165               	movf	___ftdiv@f2& (0+255),w,b
 13232  0033DA  0100               	movlb	0	; () banked
 13233  0033DC  5F62               	subwf	___ftdiv@f1& (0+255),f,b
 13234  0033DE  0100               	movlb	0	; () banked
 13235  0033E0  5166               	movf	(___ftdiv@f2+1)& (0+255),w,b
 13236  0033E2  0100               	movlb	0	; () banked
 13237  0033E4  5B63               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 13238  0033E6  0100               	movlb	0	; () banked
 13239  0033E8  5167               	movf	(___ftdiv@f2+2)& (0+255),w,b
 13240  0033EA  0100               	movlb	0	; () banked
 13241  0033EC  5B64               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 13242                           
 13243                           ; BSR set to: 0
 13244  0033EE  0100               	movlb	0	; () banked
 13245  0033F0  816C               	bsf	___ftdiv@f3& (0+255),0,b
 13246  0033F2                     l1338:
 13247                           
 13248                           ; BSR set to: 0
 13249  0033F2  0100               	movlb	0	; () banked
 13250  0033F4  90D8               	bcf	status,0,c
 13251  0033F6  3762               	rlcf	___ftdiv@f1& (0+255),f,b
 13252  0033F8  3763               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 13253  0033FA  3764               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 13254                           
 13255                           ; BSR set to: 0
 13256  0033FC  0100               	movlb	0	; () banked
 13257  0033FE  2F6B               	decfsz	___ftdiv@cntr& (0+255),f,b
 13258  003400  D7D7               	goto	l6714
 13259  003402  D000               	goto	l6724
 13260  003404                     l6724:
 13261                           
 13262                           ; BSR set to: 0
 13263  003404  C06C  F01B         	movff	___ftdiv@f3,___ftpack@arg
 13264  003408  C06D  F01C         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13265  00340C  C06E  F01D         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13266  003410  C06F  F01E         	movff	___ftdiv@exp,___ftpack@exp
 13267  003414  C070  F01F         	movff	___ftdiv@sign,___ftpack@sign
 13268  003418  EC24  F021         	call	___ftpack	;wreg free
 13269  00341C  C01B  F062         	movff	?___ftpack,?___ftdiv
 13270  003420  C01C  F063         	movff	?___ftpack+1,?___ftdiv+1
 13271  003424  C01D  F064         	movff	?___ftpack+2,?___ftdiv+2
 13272  003428  0012               	return	
 13273  00342A  0012               	return		;funcret
 13274  00342C                     __end_of___ftdiv:
 13275                           	opt stack 0
 13276                           tosu	equ	0xFFF
 13277                           tosh	equ	0xFFE
 13278                           tosl	equ	0xFFD
 13279                           pclath	equ	0xFFA
 13280                           tblptru	equ	0xFF8
 13281                           tblptrh	equ	0xFF7
 13282                           tblptrl	equ	0xFF6
 13283                           tablat	equ	0xFF5
 13284                           prodh	equ	0xFF4
 13285                           prodl	equ	0xFF3
 13286                           intcon	equ	0xFF2
 13287                           intcon2	equ	0xFF1
 13288                           postinc0	equ	0xFEE
 13289                           wreg	equ	0xFE8
 13290                           postinc1	equ	0xFE6
 13291                           postdec1	equ	0xFE5
 13292                           fsr1h	equ	0xFE2
 13293                           fsr1l	equ	0xFE1
 13294                           indf2	equ	0xFDF
 13295                           postinc2	equ	0xFDE
 13296                           postdec2	equ	0xFDD
 13297                           plusw2	equ	0xFDB
 13298                           fsr2h	equ	0xFDA
 13299                           fsr2l	equ	0xFD9
 13300                           status	equ	0xFD8
 13301                           
 13302 ;; *************** function ___altoft *****************
 13303 ;; Defined at:
 13304 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altoft.c"
 13305 ;; Parameters:    Size  Location     Type
 13306 ;;  c               4   34[COMRAM] long 
 13307 ;; Auto vars:     Size  Location     Type
 13308 ;;  sign            1    1[BANK0 ] unsigned char 
 13309 ;;  exp             1    0[BANK0 ] unsigned char 
 13310 ;; Return value:  Size  Location     Type
 13311 ;;                  3   34[COMRAM] float 
 13312 ;; Registers used:
 13313 ;;		wreg, status,2, status,0, cstack
 13314 ;; Tracked objects:
 13315 ;;		On entry : 0/0
 13316 ;;		On exit  : 0/0
 13317 ;;		Unchanged: 0/0
 13318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13319 ;;      Params:         4       0       0       0       0       0       0
 13320 ;;      Locals:         0       2       0       0       0       0       0
 13321 ;;      Temps:          4       0       0       0       0       0       0
 13322 ;;      Totals:         8       2       0       0       0       0       0
 13323 ;;Total ram usage:       10 bytes
 13324 ;; Hardware stack levels used:    1
 13325 ;; Hardware stack levels required when called:    5
 13326 ;; This function calls:
 13327 ;;		___ftpack
 13328 ;; This function is called by:
 13329 ;;		_Battery_Convert
 13330 ;; This function uses a non-reentrant model
 13331 ;;
 13332                           
 13333                           	psect	text56
 13334  004714                     __ptext56:
 13335                           	opt stack 0
 13336  004714                     ___altoft:
 13337                           	opt stack 24
 13338                           
 13339                           ;incstack = 0
 13340  004714  0E00               	movlw	0
 13341  004716  0100               	movlb	0	; () banked
 13342  004718  6F61               	movwf	___altoft@sign& (0+255),b
 13343  00471A  0E8E               	movlw	142
 13344  00471C  0100               	movlb	0	; () banked
 13345  00471E  6F60               	movwf	___altoft@exp& (0+255),b
 13346                           
 13347                           ; BSR set to: 0
 13348  004720  AE26               	btfss	___altoft@c+3,7,c
 13349  004722  D014               	goto	l6676
 13350                           
 13351                           ; BSR set to: 0
 13352  004724  1E26               	comf	___altoft@c+3,f,c
 13353  004726  1E25               	comf	___altoft@c+2,f,c
 13354  004728  1E24               	comf	___altoft@c+1,f,c
 13355  00472A  6C23               	negf	___altoft@c,c
 13356  00472C  0E00               	movlw	0
 13357  00472E  2224               	addwfc	___altoft@c+1,f,c
 13358  004730  2225               	addwfc	___altoft@c+2,f,c
 13359  004732  2226               	addwfc	___altoft@c+3,f,c
 13360                           
 13361                           ; BSR set to: 0
 13362  004734  0E01               	movlw	1
 13363  004736  0100               	movlb	0	; () banked
 13364  004738  6F61               	movwf	___altoft@sign& (0+255),b
 13365                           
 13366                           ; BSR set to: 0
 13367  00473A  D008               	goto	l6676
 13368  00473C                     l6674:
 13369                           
 13370                           ; BSR set to: 0
 13371  00473C  90D8               	bcf	status,0,c
 13372  00473E  3226               	rrcf	___altoft@c+3,f,c
 13373  004740  3225               	rrcf	___altoft@c+2,f,c
 13374  004742  3224               	rrcf	___altoft@c+1,f,c
 13375  004744  3223               	rrcf	___altoft@c,f,c
 13376  004746  0100               	movlb	0	; () banked
 13377  004748  2B60               	incf	___altoft@exp& (0+255),f,b
 13378  00474A  D000               	goto	l6676
 13379  00474C                     l6676:
 13380                           
 13381                           ; BSR set to: 0
 13382  00474C  0E00               	movlw	0
 13383  00474E  1423               	andwf	___altoft@c,w,c
 13384  004750  6E27               	movwf	??___altoft& (0+255),c
 13385  004752  0E00               	movlw	0
 13386  004754  1424               	andwf	___altoft@c+1,w,c
 13387  004756  6E28               	movwf	(??___altoft+1)& (0+255),c
 13388  004758  0E00               	movlw	0
 13389  00475A  1425               	andwf	___altoft@c+2,w,c
 13390  00475C  6E29               	movwf	(??___altoft+2)& (0+255),c
 13391  00475E  0EFF               	movlw	255
 13392  004760  1426               	andwf	___altoft@c+3,w,c
 13393  004762  6E2A               	movwf	(??___altoft+3)& (0+255),c
 13394  004764  5027               	movf	??___altoft,w,c
 13395  004766  1028               	iorwf	??___altoft+1,w,c
 13396  004768  1029               	iorwf	??___altoft+2,w,c
 13397  00476A  102A               	iorwf	??___altoft+3,w,c
 13398  00476C  A4D8               	btfss	status,2,c
 13399  00476E  D7E6               	goto	l6674
 13400                           
 13401                           ; BSR set to: 0
 13402                           
 13403                           ; BSR set to: 0
 13404  004770  C023  F01B         	movff	___altoft@c,___ftpack@arg
 13405  004774  C024  F01C         	movff	___altoft@c+1,___ftpack@arg+1
 13406  004778  C025  F01D         	movff	___altoft@c+2,___ftpack@arg+2
 13407  00477C  C060  F01E         	movff	___altoft@exp,___ftpack@exp
 13408  004780  C061  F01F         	movff	___altoft@sign,___ftpack@sign
 13409  004784  EC24  F021         	call	___ftpack	;wreg free
 13410  004788  C01B  F023         	movff	?___ftpack,?___altoft
 13411  00478C  C01C  F024         	movff	?___ftpack+1,?___altoft+1
 13412  004790  C01D  F025         	movff	?___ftpack+2,?___altoft+2
 13413  004794  0012               	return	
 13414  004796  0012               	return		;funcret
 13415  004798                     __end_of___altoft:
 13416                           	opt stack 0
 13417                           tosu	equ	0xFFF
 13418                           tosh	equ	0xFFE
 13419                           tosl	equ	0xFFD
 13420                           pclath	equ	0xFFA
 13421                           tblptru	equ	0xFF8
 13422                           tblptrh	equ	0xFF7
 13423                           tblptrl	equ	0xFF6
 13424                           tablat	equ	0xFF5
 13425                           prodh	equ	0xFF4
 13426                           prodl	equ	0xFF3
 13427                           intcon	equ	0xFF2
 13428                           intcon2	equ	0xFF1
 13429                           postinc0	equ	0xFEE
 13430                           wreg	equ	0xFE8
 13431                           postinc1	equ	0xFE6
 13432                           postdec1	equ	0xFE5
 13433                           fsr1h	equ	0xFE2
 13434                           fsr1l	equ	0xFE1
 13435                           indf2	equ	0xFDF
 13436                           postinc2	equ	0xFDE
 13437                           postdec2	equ	0xFDD
 13438                           plusw2	equ	0xFDB
 13439                           fsr2h	equ	0xFDA
 13440                           fsr2l	equ	0xFD9
 13441                           status	equ	0xFD8
 13442                           
 13443 ;; *************** function _Battery_Filter *****************
 13444 ;; Defined at:
 13445 ;;		line 51 in file "Battery.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;		None
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;  x               2   54[BANK0 ] int 
 13450 ;; Return value:  Size  Location     Type
 13451 ;;		None               void
 13452 ;; Registers used:
 13453 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13459 ;;      Params:         0       0       0       0       0       0       0
 13460 ;;      Locals:         0       2       0       0       0       0       0
 13461 ;;      Temps:          0       0       0       0       0       0       0
 13462 ;;      Totals:         0       2       0       0       0       0       0
 13463 ;;Total ram usage:        2 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:    6
 13466 ;; This function calls:
 13467 ;;		___ftadd
 13468 ;;		___ftmul
 13469 ;;		___wmul
 13470 ;; This function is called by:
 13471 ;;		_Battery_Convert
 13472 ;; This function uses a non-reentrant model
 13473 ;;
 13474                           
 13475                           	psect	text57
 13476  002D0E                     __ptext57:
 13477                           	opt stack 0
 13478  002D0E                     _Battery_Filter:
 13479                           	opt stack 23
 13480                           
 13481                           ;Battery.c: 54: int x;
 13482                           ;Battery.c: 55: for(x = 0; x < 9; x++)
 13483                           
 13484                           ;incstack = 0
 13485  002D0E  0E00               	movlw	0
 13486  002D10  0100               	movlb	0	; () banked
 13487  002D12  6F97               	movwf	(Battery_Filter@x+1)& (0+255),b
 13488  002D14  0E00               	movlw	0
 13489  002D16  6F96               	movwf	Battery_Filter@x& (0+255),b
 13490                           
 13491                           ; BSR set to: 0
 13492  002D18  0100               	movlb	0	; () banked
 13493  002D1A  BF97               	btfsc	(Battery_Filter@x+1)& (0+255),7,b
 13494  002D1C  D00A               	goto	l6212
 13495  002D1E  0100               	movlb	0	; () banked
 13496  002D20  5197               	movf	(Battery_Filter@x+1)& (0+255),w,b
 13497  002D22  E106               	bnz	u7090
 13498  002D24  0E09               	movlw	9
 13499  002D26  0100               	movlb	0	; () banked
 13500  002D28  5D96               	subwf	Battery_Filter@x& (0+255),w,b
 13501  002D2A  B0D8               	btfsc	status,0,c
 13502  002D2C  D07C               	goto	l6218
 13503  002D2E  D001               	goto	l6212
 13504  002D30                     u7090:
 13505                           
 13506                           ; BSR set to: 0
 13507  002D30  D07A               	goto	l6218
 13508  002D32                     l6212:
 13509                           
 13510                           ; BSR set to: 0
 13511                           ;Battery.c: 56: {
 13512                           ;Battery.c: 57: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
 13513  002D32  C096  F060         	movff	Battery_Filter@x,___wmul@multiplier
 13514  002D36  C097  F061         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 13515  002D3A  0E00               	movlw	0
 13516  002D3C  0100               	movlb	0	; () banked
 13517  002D3E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13518  002D40  0E03               	movlw	3
 13519  002D42  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13520  002D44  ECEE  F025         	call	___wmul	;wreg free
 13521  002D48  0E00               	movlw	low _Battery_Volt
 13522  002D4A  0100               	movlb	0	; () banked
 13523  002D4C  2560               	addwf	?___wmul& (0+255),w,b
 13524  002D4E  6ED9               	movwf	fsr2l,c
 13525  002D50  0E01               	movlw	high _Battery_Volt
 13526  002D52  0100               	movlb	0	; () banked
 13527  002D54  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13528  002D56  6EDA               	movwf	fsr2h,c
 13529  002D58  0E48               	movlw	72
 13530  002D5A  0100               	movlb	0	; () banked
 13531  002D5C  6F74               	movwf	___ftmul@f2& (0+255),b
 13532  002D5E  0E61               	movlw	97
 13533  002D60  0100               	movlb	0	; () banked
 13534  002D62  6F75               	movwf	(___ftmul@f2+1)& (0+255),b
 13535  002D64  0E3F               	movlw	63
 13536  002D66  0100               	movlb	0	; () banked
 13537  002D68  6F76               	movwf	(___ftmul@f2+2)& (0+255),b
 13538  002D6A  C096  F060         	movff	Battery_Filter@x,___wmul@multiplier
 13539  002D6E  C097  F061         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 13540  002D72  0E00               	movlw	0
 13541  002D74  0100               	movlb	0	; () banked
 13542  002D76  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13543  002D78  0E03               	movlw	3
 13544  002D7A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13545  002D7C  ECEE  F025         	call	___wmul	;wreg free
 13546  002D80  0EA0               	movlw	low _TempBattery_Volt
 13547  002D82  0100               	movlb	0	; () banked
 13548  002D84  2560               	addwf	?___wmul& (0+255),w,b
 13549  002D86  6EE1               	movwf	fsr1l,c
 13550  002D88  0E01               	movlw	high _TempBattery_Volt
 13551  002D8A  0100               	movlb	0	; () banked
 13552  002D8C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13553  002D8E  6EE2               	movwf	fsr1h,c
 13554  002D90  CFE6 F071          	movff	postinc1,___ftmul@f1
 13555  002D94  CFE6 F072          	movff	postinc1,___ftmul@f1+1
 13556  002D98  CFE5 F073          	movff	postdec1,___ftmul@f1+2
 13557  002D9C  EC0E  F018         	call	___ftmul	;wreg free
 13558  002DA0  C071  F08A         	movff	?___ftmul,___ftadd@f1
 13559  002DA4  C072  F08B         	movff	?___ftmul+1,___ftadd@f1+1
 13560  002DA8  C073  F08C         	movff	?___ftmul+2,___ftadd@f1+2
 13561  002DAC  0EC3               	movlw	195
 13562  002DAE  0100               	movlb	0	; () banked
 13563  002DB0  6F74               	movwf	___ftmul@f2& (0+255),b
 13564  002DB2  0EF5               	movlw	245
 13565  002DB4  0100               	movlb	0	; () banked
 13566  002DB6  6F75               	movwf	(___ftmul@f2+1)& (0+255),b
 13567  002DB8  0E3D               	movlw	61
 13568  002DBA  0100               	movlb	0	; () banked
 13569  002DBC  6F76               	movwf	(___ftmul@f2+2)& (0+255),b
 13570  002DBE  0E00               	movlw	0
 13571  002DC0  0100               	movlb	0	; () banked
 13572  002DC2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13573  002DC4  0E03               	movlw	3
 13574  002DC6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13575  002DC8  C096  F060         	movff	Battery_Filter@x,___wmul@multiplier
 13576  002DCC  C097  F061         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 13577  002DD0  ECEE  F025         	call	___wmul	;wreg free
 13578  002DD4  0E1E               	movlw	low _PrevBattery_Volt
 13579  002DD6  0100               	movlb	0	; () banked
 13580  002DD8  2560               	addwf	?___wmul& (0+255),w,b
 13581  002DDA  6EE1               	movwf	fsr1l,c
 13582  002DDC  0E01               	movlw	high _PrevBattery_Volt
 13583  002DDE  0100               	movlb	0	; () banked
 13584  002DE0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13585  002DE2  6EE2               	movwf	fsr1h,c
 13586  002DE4  CFE6 F071          	movff	postinc1,___ftmul@f1
 13587  002DE8  CFE6 F072          	movff	postinc1,___ftmul@f1+1
 13588  002DEC  CFE5 F073          	movff	postdec1,___ftmul@f1+2
 13589  002DF0  EC0E  F018         	call	___ftmul	;wreg free
 13590  002DF4  C071  F08D         	movff	?___ftmul,___ftadd@f2
 13591  002DF8  C072  F08E         	movff	?___ftmul+1,___ftadd@f2+1
 13592  002DFC  C073  F08F         	movff	?___ftmul+2,___ftadd@f2+2
 13593  002E00  EC6D  F013         	call	___ftadd	;wreg free
 13594  002E04  C08A  FFDE         	movff	?___ftadd,postinc2
 13595  002E08  C08B  FFDE         	movff	?___ftadd+1,postinc2
 13596  002E0C  C08C  FFDE         	movff	?___ftadd+2,postinc2
 13597  002E10  0100               	movlb	0	; () banked
 13598  002E12  4B96               	infsnz	Battery_Filter@x& (0+255),f,b
 13599  002E14  2B97               	incf	(Battery_Filter@x+1)& (0+255),f,b
 13600                           
 13601                           ; BSR set to: 0
 13602  002E16  0100               	movlb	0	; () banked
 13603  002E18  BF97               	btfsc	(Battery_Filter@x+1)& (0+255),7,b
 13604  002E1A  D78B               	goto	l6212
 13605  002E1C  0100               	movlb	0	; () banked
 13606  002E1E  5197               	movf	(Battery_Filter@x+1)& (0+255),w,b
 13607  002E20  E102               	bnz	l6218
 13608  002E22  D780               	goto	L8
 13609  002E24  D000               	goto	l6218
 13610  002E26                     l6218:
 13611                           
 13612                           ; BSR set to: 0
 13613                           ;Battery.c: 58: }
 13614                           ;Battery.c: 59: for(x = 0; x < 9; x++)
 13615  002E26  0E00               	movlw	0
 13616  002E28  0100               	movlb	0	; () banked
 13617  002E2A  6F97               	movwf	(Battery_Filter@x+1)& (0+255),b
 13618  002E2C  0E00               	movlw	0
 13619  002E2E  6F96               	movwf	Battery_Filter@x& (0+255),b
 13620  002E30                     l6220:
 13621                           
 13622                           ; BSR set to: 0
 13623  002E30  0100               	movlb	0	; () banked
 13624  002E32  BF97               	btfsc	(Battery_Filter@x+1)& (0+255),7,b
 13625  002E34  D00A               	goto	l6224
 13626  002E36  0100               	movlb	0	; () banked
 13627  002E38  5197               	movf	(Battery_Filter@x+1)& (0+255),w,b
 13628  002E3A  E138               	bnz	l285
 13629  002E3C  0E09               	movlw	9
 13630  002E3E  0100               	movlb	0	; () banked
 13631  002E40  5D96               	subwf	Battery_Filter@x& (0+255),w,b
 13632  002E42  B0D8               	btfsc	status,0,c
 13633  002E44  0012               	return	
 13634  002E46  D001               	goto	l6224
 13635                           
 13636                           ; BSR set to: 0
 13637  002E48  0012               	return	
 13638  002E4A                     l6224:
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;Battery.c: 60: {
 13642                           ;Battery.c: 61: PrevBattery_Volt[x] = Battery_Volt[x];
 13643  002E4A  C096  F060         	movff	Battery_Filter@x,___wmul@multiplier
 13644  002E4E  C097  F061         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 13645  002E52  0E00               	movlw	0
 13646  002E54  0100               	movlb	0	; () banked
 13647  002E56  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13648  002E58  0E03               	movlw	3
 13649  002E5A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13650  002E5C  ECEE  F025         	call	___wmul	;wreg free
 13651  002E60  0E00               	movlw	low _Battery_Volt
 13652  002E62  0100               	movlb	0	; () banked
 13653  002E64  2560               	addwf	?___wmul& (0+255),w,b
 13654  002E66  6ED9               	movwf	fsr2l,c
 13655  002E68  0E01               	movlw	high _Battery_Volt
 13656  002E6A  0100               	movlb	0	; () banked
 13657  002E6C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13658  002E6E  6EDA               	movwf	fsr2h,c
 13659  002E70  C096  F060         	movff	Battery_Filter@x,___wmul@multiplier
 13660  002E74  C097  F061         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 13661  002E78  0E00               	movlw	0
 13662  002E7A  0100               	movlb	0	; () banked
 13663  002E7C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13664  002E7E  0E03               	movlw	3
 13665  002E80  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13666  002E82  ECEE  F025         	call	___wmul	;wreg free
 13667  002E86  0E1E               	movlw	low _PrevBattery_Volt
 13668  002E88  0100               	movlb	0	; () banked
 13669  002E8A  2560               	addwf	?___wmul& (0+255),w,b
 13670  002E8C  6EE1               	movwf	fsr1l,c
 13671  002E8E  0E01               	movlw	high _PrevBattery_Volt
 13672  002E90  0100               	movlb	0	; () banked
 13673  002E92  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13674  002E94  6EE2               	movwf	fsr1h,c
 13675  002E96  CFDE FFE6          	movff	postinc2,postinc1
 13676  002E9A  CFDE FFE6          	movff	postinc2,postinc1
 13677  002E9E  CFDE FFE6          	movff	postinc2,postinc1
 13678                           
 13679                           ; BSR set to: 0
 13680  002EA2  0100               	movlb	0	; () banked
 13681  002EA4  4B96               	infsnz	Battery_Filter@x& (0+255),f,b
 13682  002EA6  2B97               	incf	(Battery_Filter@x+1)& (0+255),f,b
 13683  002EA8  D7C3               	goto	l6220
 13684                           
 13685                           ; BSR set to: 0
 13686  002EAA  0012               	return	
 13687  002EAC                     l285:
 13688                           
 13689                           ; BSR set to: 0
 13690  002EAC  0012               	return		;funcret
 13691  002EAE                     __end_of_Battery_Filter:
 13692                           	opt stack 0
 13693                           tosu	equ	0xFFF
 13694                           tosh	equ	0xFFE
 13695                           tosl	equ	0xFFD
 13696                           pclath	equ	0xFFA
 13697                           tblptru	equ	0xFF8
 13698                           tblptrh	equ	0xFF7
 13699                           tblptrl	equ	0xFF6
 13700                           tablat	equ	0xFF5
 13701                           prodh	equ	0xFF4
 13702                           prodl	equ	0xFF3
 13703                           intcon	equ	0xFF2
 13704                           intcon2	equ	0xFF1
 13705                           postinc0	equ	0xFEE
 13706                           wreg	equ	0xFE8
 13707                           postinc1	equ	0xFE6
 13708                           postdec1	equ	0xFE5
 13709                           fsr1h	equ	0xFE2
 13710                           fsr1l	equ	0xFE1
 13711                           indf2	equ	0xFDF
 13712                           postinc2	equ	0xFDE
 13713                           postdec2	equ	0xFDD
 13714                           plusw2	equ	0xFDB
 13715                           fsr2h	equ	0xFDA
 13716                           fsr2l	equ	0xFD9
 13717                           status	equ	0xFD8
 13718                           
 13719 ;; *************** function ___wmul *****************
 13720 ;; Defined at:
 13721 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 13722 ;; Parameters:    Size  Location     Type
 13723 ;;  multiplier      2    0[BANK0 ] unsigned int 
 13724 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 13725 ;; Auto vars:     Size  Location     Type
 13726 ;;  product         2   40[COMRAM] unsigned int 
 13727 ;; Return value:  Size  Location     Type
 13728 ;;                  2    0[BANK0 ] unsigned int 
 13729 ;; Registers used:
 13730 ;;		wreg, status,2, status,0, prodl, prodh
 13731 ;; Tracked objects:
 13732 ;;		On entry : 0/0
 13733 ;;		On exit  : 0/0
 13734 ;;		Unchanged: 0/0
 13735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13736 ;;      Params:         0       4       0       0       0       0       0
 13737 ;;      Locals:         2       0       0       0       0       0       0
 13738 ;;      Temps:          0       0       0       0       0       0       0
 13739 ;;      Totals:         2       4       0       0       0       0       0
 13740 ;;Total ram usage:        6 bytes
 13741 ;; Hardware stack levels used:    1
 13742 ;; Hardware stack levels required when called:    4
 13743 ;; This function calls:
 13744 ;;		Nothing
 13745 ;; This function is called by:
 13746 ;;		_Battery_Convert
 13747 ;;		_Battery_Filter
 13748 ;;		_Battery_Fault
 13749 ;;		_Battery_Get
 13750 ;;		_Temp_Fault
 13751 ;;		_Temp_Filter
 13752 ;;		_Temp_Convert
 13753 ;;		_fround
 13754 ;;		_scale
 13755 ;;		_printf
 13756 ;;		_eval_poly
 13757 ;;		_Tempeture_Get
 13758 ;; This function uses a non-reentrant model
 13759 ;;
 13760                           
 13761                           	psect	text58
 13762  004BDC                     __ptext58:
 13763                           	opt stack 0
 13764  004BDC                     ___wmul:
 13765                           	opt stack 24
 13766                           
 13767                           ; BSR set to: 0
 13768                           ;incstack = 0
 13769  004BDC  0100               	movlb	0	; () banked
 13770  004BDE  5160               	movf	___wmul@multiplier& (0+255),w,b
 13771  004BE0  0100               	movlb	0	; () banked
 13772  004BE2  0362               	mulwf	___wmul@multiplicand& (0+255),b
 13773  004BE4  CFF3 F029          	movff	prodl,___wmul@product
 13774  004BE8  CFF4 F02A          	movff	prodh,___wmul@product+1
 13775  004BEC  0100               	movlb	0	; () banked
 13776  004BEE  5160               	movf	___wmul@multiplier& (0+255),w,b
 13777  004BF0  0100               	movlb	0	; () banked
 13778  004BF2  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13779  004BF4  50F3               	movf	prodl,w,c
 13780  004BF6  262A               	addwf	___wmul@product+1,f,c
 13781  004BF8  0100               	movlb	0	; () banked
 13782  004BFA  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13783  004BFC  0100               	movlb	0	; () banked
 13784  004BFE  0362               	mulwf	___wmul@multiplicand& (0+255),b
 13785  004C00  50F3               	movf	prodl,w,c
 13786  004C02  262A               	addwf	___wmul@product+1,f,c
 13787                           
 13788                           ; BSR set to: 0
 13789  004C04  C029  F060         	movff	___wmul@product,?___wmul
 13790  004C08  C02A  F061         	movff	___wmul@product+1,?___wmul+1
 13791  004C0C  0012               	return	
 13792                           
 13793                           ; BSR set to: 0
 13794                           
 13795                           ; BSR set to: 0
 13796  004C0E  0012               	return		;funcret
 13797  004C10                     __end_of___wmul:
 13798                           	opt stack 0
 13799                           tosu	equ	0xFFF
 13800                           tosh	equ	0xFFE
 13801                           tosl	equ	0xFFD
 13802                           pclath	equ	0xFFA
 13803                           tblptru	equ	0xFF8
 13804                           tblptrh	equ	0xFF7
 13805                           tblptrl	equ	0xFF6
 13806                           tablat	equ	0xFF5
 13807                           prodh	equ	0xFF4
 13808                           prodl	equ	0xFF3
 13809                           intcon	equ	0xFF2
 13810                           intcon2	equ	0xFF1
 13811                           postinc0	equ	0xFEE
 13812                           wreg	equ	0xFE8
 13813                           postinc1	equ	0xFE6
 13814                           postdec1	equ	0xFE5
 13815                           fsr1h	equ	0xFE2
 13816                           fsr1l	equ	0xFE1
 13817                           indf2	equ	0xFDF
 13818                           postinc2	equ	0xFDE
 13819                           postdec2	equ	0xFDD
 13820                           plusw2	equ	0xFDB
 13821                           fsr2h	equ	0xFDA
 13822                           fsr2l	equ	0xFD9
 13823                           status	equ	0xFD8
 13824                           
 13825 ;; *************** function ___ftmul *****************
 13826 ;; Defined at:
 13827 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 13828 ;; Parameters:    Size  Location     Type
 13829 ;;  f1              3   17[BANK0 ] float 
 13830 ;;  f2              3   20[BANK0 ] float 
 13831 ;; Auto vars:     Size  Location     Type
 13832 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
 13833 ;;  sign            1   31[BANK0 ] unsigned char 
 13834 ;;  cntr            1   30[BANK0 ] unsigned char 
 13835 ;;  exp             1   26[BANK0 ] unsigned char 
 13836 ;; Return value:  Size  Location     Type
 13837 ;;                  3   17[BANK0 ] float 
 13838 ;; Registers used:
 13839 ;;		wreg, status,2, status,0, cstack
 13840 ;; Tracked objects:
 13841 ;;		On entry : 0/0
 13842 ;;		On exit  : 0/0
 13843 ;;		Unchanged: 0/0
 13844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13845 ;;      Params:         0       6       0       0       0       0       0
 13846 ;;      Locals:         0       6       0       0       0       0       0
 13847 ;;      Temps:          0       3       0       0       0       0       0
 13848 ;;      Totals:         0      15       0       0       0       0       0
 13849 ;;Total ram usage:       15 bytes
 13850 ;; Hardware stack levels used:    1
 13851 ;; Hardware stack levels required when called:    5
 13852 ;; This function calls:
 13853 ;;		___ftpack
 13854 ;; This function is called by:
 13855 ;;		_Battery_Convert
 13856 ;;		_Battery_Filter
 13857 ;;		_Temp_Filter
 13858 ;;		_Temp_Convert
 13859 ;;		_fround
 13860 ;;		_scale
 13861 ;;		_printf
 13862 ;;		_log
 13863 ;;		_eval_poly
 13864 ;; This function uses a non-reentrant model
 13865 ;;
 13866                           
 13867                           	psect	text59
 13868  00301C                     __ptext59:
 13869                           	opt stack 0
 13870  00301C                     ___ftmul:
 13871                           	opt stack 23
 13872                           
 13873                           ; BSR set to: 0
 13874                           ;incstack = 0
 13875  00301C  C073  F077         	movff	___ftmul@f1+2,??___ftmul
 13876  003020  0100               	movlb	0	; () banked
 13877  003022  6B78               	clrf	(??___ftmul+1)& (0+255),b
 13878  003024  6B79               	clrf	(??___ftmul+2)& (0+255),b
 13879  003026  0100               	movlb	0	; () banked
 13880  003028  3572               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 13881  00302A  0100               	movlb	0	; () banked
 13882  00302C  3777               	rlcf	??___ftmul& (0+255),f,b
 13883  00302E  E301               	bnc	u6731
 13884  003030  8178               	bsf	(??___ftmul+1)& (0+255),0,b
 13885  003032                     u6731:
 13886  003032  0100               	movlb	0	; () banked
 13887  003034  5177               	movf	??___ftmul& (0+255),w,b
 13888  003036  0100               	movlb	0	; () banked
 13889  003038  6F7A               	movwf	___ftmul@exp& (0+255),b
 13890  00303A  0100               	movlb	0	; () banked
 13891  00303C  517A               	movf	___ftmul@exp& (0+255),w,b
 13892  00303E  A4D8               	btfss	status,2,c
 13893  003040  D00A               	goto	l5950
 13894                           
 13895                           ; BSR set to: 0
 13896  003042  0E00               	movlw	0
 13897  003044  0100               	movlb	0	; () banked
 13898  003046  6F71               	movwf	?___ftmul& (0+255),b
 13899  003048  0E00               	movlw	0
 13900  00304A  0100               	movlb	0	; () banked
 13901  00304C  6F72               	movwf	(?___ftmul+1)& (0+255),b
 13902  00304E  0E00               	movlw	0
 13903  003050  0100               	movlb	0	; () banked
 13904  003052  6F73               	movwf	(?___ftmul+2)& (0+255),b
 13905                           
 13906                           ; BSR set to: 0
 13907  003054  0012               	return	
 13908  003056                     l5950:
 13909                           
 13910                           ; BSR set to: 0
 13911  003056  C076  F077         	movff	___ftmul@f2+2,??___ftmul
 13912  00305A  0100               	movlb	0	; () banked
 13913  00305C  6B78               	clrf	(??___ftmul+1)& (0+255),b
 13914  00305E  6B79               	clrf	(??___ftmul+2)& (0+255),b
 13915  003060  0100               	movlb	0	; () banked
 13916  003062  3575               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 13917  003064  0100               	movlb	0	; () banked
 13918  003066  3777               	rlcf	??___ftmul& (0+255),f,b
 13919  003068  E301               	bnc	u6751
 13920  00306A  8178               	bsf	(??___ftmul+1)& (0+255),0,b
 13921  00306C                     u6751:
 13922  00306C  0100               	movlb	0	; () banked
 13923  00306E  5177               	movf	??___ftmul& (0+255),w,b
 13924  003070  0100               	movlb	0	; () banked
 13925  003072  6F7F               	movwf	___ftmul@sign& (0+255),b
 13926  003074  0100               	movlb	0	; () banked
 13927  003076  517F               	movf	___ftmul@sign& (0+255),w,b
 13928  003078  A4D8               	btfss	status,2,c
 13929  00307A  D00A               	goto	l5956
 13930                           
 13931                           ; BSR set to: 0
 13932  00307C  0E00               	movlw	0
 13933  00307E  0100               	movlb	0	; () banked
 13934  003080  6F71               	movwf	?___ftmul& (0+255),b
 13935  003082  0E00               	movlw	0
 13936  003084  0100               	movlb	0	; () banked
 13937  003086  6F72               	movwf	(?___ftmul+1)& (0+255),b
 13938  003088  0E00               	movlw	0
 13939  00308A  0100               	movlb	0	; () banked
 13940  00308C  6F73               	movwf	(?___ftmul+2)& (0+255),b
 13941                           
 13942                           ; BSR set to: 0
 13943  00308E  0012               	return	
 13944  003090                     l5956:
 13945                           
 13946                           ; BSR set to: 0
 13947  003090  0100               	movlb	0	; () banked
 13948  003092  517F               	movf	___ftmul@sign& (0+255),w,b
 13949  003094  0F7B               	addlw	123
 13950  003096  0100               	movlb	0	; () banked
 13951  003098  277A               	addwf	___ftmul@exp& (0+255),f,b
 13952                           
 13953                           ; BSR set to: 0
 13954  00309A  C073  F07F         	movff	___ftmul@f1+2,___ftmul@sign
 13955  00309E  0100               	movlb	0	; () banked
 13956  0030A0  5176               	movf	(___ftmul@f2+2)& (0+255),w,b
 13957  0030A2  0100               	movlb	0	; () banked
 13958  0030A4  1B7F               	xorwf	___ftmul@sign& (0+255),f,b
 13959  0030A6  0E80               	movlw	128
 13960  0030A8  0100               	movlb	0	; () banked
 13961  0030AA  177F               	andwf	___ftmul@sign& (0+255),f,b
 13962                           
 13963                           ; BSR set to: 0
 13964  0030AC  0100               	movlb	0	; () banked
 13965  0030AE  8F72               	bsf	(___ftmul@f1+1)& (0+255),7,b
 13966                           
 13967                           ; BSR set to: 0
 13968  0030B0  0100               	movlb	0	; () banked
 13969  0030B2  8F75               	bsf	(___ftmul@f2+1)& (0+255),7,b
 13970                           
 13971                           ; BSR set to: 0
 13972  0030B4  0EFF               	movlw	255
 13973  0030B6  0100               	movlb	0	; () banked
 13974  0030B8  1774               	andwf	___ftmul@f2& (0+255),f,b
 13975  0030BA  0EFF               	movlw	255
 13976  0030BC  0100               	movlb	0	; () banked
 13977  0030BE  1775               	andwf	(___ftmul@f2+1)& (0+255),f,b
 13978  0030C0  0E00               	movlw	0
 13979  0030C2  0100               	movlb	0	; () banked
 13980  0030C4  1776               	andwf	(___ftmul@f2+2)& (0+255),f,b
 13981                           
 13982                           ; BSR set to: 0
 13983  0030C6  0E00               	movlw	0
 13984  0030C8  0100               	movlb	0	; () banked
 13985  0030CA  6F7B               	movwf	___ftmul@f3_as_product& (0+255),b
 13986  0030CC  0E00               	movlw	0
 13987  0030CE  0100               	movlb	0	; () banked
 13988  0030D0  6F7C               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 13989  0030D2  0E00               	movlw	0
 13990  0030D4  0100               	movlb	0	; () banked
 13991  0030D6  6F7D               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 13992                           
 13993                           ; BSR set to: 0
 13994  0030D8  0E07               	movlw	7
 13995  0030DA  0100               	movlb	0	; () banked
 13996  0030DC  6F7E               	movwf	___ftmul@cntr& (0+255),b
 13997  0030DE  D000               	goto	l5970
 13998  0030E0                     l5970:
 13999                           
 14000                           ; BSR set to: 0
 14001  0030E0  0100               	movlb	0	; () banked
 14002  0030E2  A171               	btfss	___ftmul@f1& (0+255),0,b
 14003  0030E4  D00D               	goto	l5974
 14004                           
 14005                           ; BSR set to: 0
 14006  0030E6  0100               	movlb	0	; () banked
 14007  0030E8  5174               	movf	___ftmul@f2& (0+255),w,b
 14008  0030EA  0100               	movlb	0	; () banked
 14009  0030EC  277B               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14010  0030EE  0100               	movlb	0	; () banked
 14011  0030F0  5175               	movf	(___ftmul@f2+1)& (0+255),w,b
 14012  0030F2  0100               	movlb	0	; () banked
 14013  0030F4  237C               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14014  0030F6  0100               	movlb	0	; () banked
 14015  0030F8  5176               	movf	(___ftmul@f2+2)& (0+255),w,b
 14016  0030FA  0100               	movlb	0	; () banked
 14017  0030FC  237D               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14018  0030FE  D000               	goto	l5974
 14019  003100                     l5974:
 14020                           
 14021                           ; BSR set to: 0
 14022  003100  0100               	movlb	0	; () banked
 14023  003102  90D8               	bcf	status,0,c
 14024  003104  3373               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14025  003106  3372               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14026  003108  3371               	rrcf	___ftmul@f1& (0+255),f,b
 14027  00310A  0100               	movlb	0	; () banked
 14028  00310C  90D8               	bcf	status,0,c
 14029  00310E  3774               	rlcf	___ftmul@f2& (0+255),f,b
 14030  003110  3775               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 14031  003112  3776               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 14032                           
 14033                           ; BSR set to: 0
 14034  003114  0100               	movlb	0	; () banked
 14035  003116  2F7E               	decfsz	___ftmul@cntr& (0+255),f,b
 14036  003118  D7E3               	goto	l5970
 14037  00311A  D000               	goto	l5978
 14038  00311C                     l5978:
 14039                           
 14040                           ; BSR set to: 0
 14041  00311C  0E09               	movlw	9
 14042  00311E  0100               	movlb	0	; () banked
 14043  003120  6F7E               	movwf	___ftmul@cntr& (0+255),b
 14044  003122  D000               	goto	l5980
 14045  003124                     l5980:
 14046                           
 14047                           ; BSR set to: 0
 14048  003124  0100               	movlb	0	; () banked
 14049  003126  A171               	btfss	___ftmul@f1& (0+255),0,b
 14050  003128  D00D               	goto	l5984
 14051                           
 14052                           ; BSR set to: 0
 14053  00312A  0100               	movlb	0	; () banked
 14054  00312C  5174               	movf	___ftmul@f2& (0+255),w,b
 14055  00312E  0100               	movlb	0	; () banked
 14056  003130  277B               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14057  003132  0100               	movlb	0	; () banked
 14058  003134  5175               	movf	(___ftmul@f2+1)& (0+255),w,b
 14059  003136  0100               	movlb	0	; () banked
 14060  003138  237C               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14061  00313A  0100               	movlb	0	; () banked
 14062  00313C  5176               	movf	(___ftmul@f2+2)& (0+255),w,b
 14063  00313E  0100               	movlb	0	; () banked
 14064  003140  237D               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14065  003142  D000               	goto	l5984
 14066  003144                     l5984:
 14067                           
 14068                           ; BSR set to: 0
 14069  003144  0100               	movlb	0	; () banked
 14070  003146  90D8               	bcf	status,0,c
 14071  003148  3373               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14072  00314A  3372               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14073  00314C  3371               	rrcf	___ftmul@f1& (0+255),f,b
 14074  00314E  0100               	movlb	0	; () banked
 14075  003150  90D8               	bcf	status,0,c
 14076  003152  337D               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 14077  003154  337C               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 14078  003156  337B               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 14079                           
 14080                           ; BSR set to: 0
 14081  003158  0100               	movlb	0	; () banked
 14082  00315A  2F7E               	decfsz	___ftmul@cntr& (0+255),f,b
 14083  00315C  D7E3               	goto	l5980
 14084  00315E  D000               	goto	l5988
 14085  003160                     l5988:
 14086                           
 14087                           ; BSR set to: 0
 14088  003160  C07B  F01B         	movff	___ftmul@f3_as_product,___ftpack@arg
 14089  003164  C07C  F01C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 14090  003168  C07D  F01D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 14091  00316C  C07A  F01E         	movff	___ftmul@exp,___ftpack@exp
 14092  003170  C07F  F01F         	movff	___ftmul@sign,___ftpack@sign
 14093  003174  EC24  F021         	call	___ftpack	;wreg free
 14094  003178  C01B  F071         	movff	?___ftpack,?___ftmul
 14095  00317C  C01C  F072         	movff	?___ftpack+1,?___ftmul+1
 14096  003180  C01D  F073         	movff	?___ftpack+2,?___ftmul+2
 14097  003184  0012               	return	
 14098  003186  0012               	return		;funcret
 14099  003188                     __end_of___ftmul:
 14100                           	opt stack 0
 14101                           tosu	equ	0xFFF
 14102                           tosh	equ	0xFFE
 14103                           tosl	equ	0xFFD
 14104                           pclath	equ	0xFFA
 14105                           tblptru	equ	0xFF8
 14106                           tblptrh	equ	0xFF7
 14107                           tblptrl	equ	0xFF6
 14108                           tablat	equ	0xFF5
 14109                           prodh	equ	0xFF4
 14110                           prodl	equ	0xFF3
 14111                           intcon	equ	0xFF2
 14112                           intcon2	equ	0xFF1
 14113                           postinc0	equ	0xFEE
 14114                           wreg	equ	0xFE8
 14115                           postinc1	equ	0xFE6
 14116                           postdec1	equ	0xFE5
 14117                           fsr1h	equ	0xFE2
 14118                           fsr1l	equ	0xFE1
 14119                           indf2	equ	0xFDF
 14120                           postinc2	equ	0xFDE
 14121                           postdec2	equ	0xFDD
 14122                           plusw2	equ	0xFDB
 14123                           fsr2h	equ	0xFDA
 14124                           fsr2l	equ	0xFD9
 14125                           status	equ	0xFD8
 14126                           
 14127 ;; *************** function ___ftadd *****************
 14128 ;; Defined at:
 14129 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 14130 ;; Parameters:    Size  Location     Type
 14131 ;;  f1              3   42[BANK0 ] float 
 14132 ;;  f2              3   45[BANK0 ] float 
 14133 ;; Auto vars:     Size  Location     Type
 14134 ;;  exp1            1   53[BANK0 ] unsigned char 
 14135 ;;  exp2            1   52[BANK0 ] unsigned char 
 14136 ;;  sign            1   51[BANK0 ] unsigned char 
 14137 ;; Return value:  Size  Location     Type
 14138 ;;                  3   42[BANK0 ] float 
 14139 ;; Registers used:
 14140 ;;		wreg, status,2, status,0, cstack
 14141 ;; Tracked objects:
 14142 ;;		On entry : 0/0
 14143 ;;		On exit  : 0/0
 14144 ;;		Unchanged: 0/0
 14145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14146 ;;      Params:         0       6       0       0       0       0       0
 14147 ;;      Locals:         0       3       0       0       0       0       0
 14148 ;;      Temps:          0       3       0       0       0       0       0
 14149 ;;      Totals:         0      12       0       0       0       0       0
 14150 ;;Total ram usage:       12 bytes
 14151 ;; Hardware stack levels used:    1
 14152 ;; Hardware stack levels required when called:    5
 14153 ;; This function calls:
 14154 ;;		___ftpack
 14155 ;; This function is called by:
 14156 ;;		_Battery_Convert
 14157 ;;		_Battery_Filter
 14158 ;;		_Temp_Filter
 14159 ;;		_Temp_Convert
 14160 ;;		_printf
 14161 ;;		___ftsub
 14162 ;;		_log
 14163 ;;		_eval_poly
 14164 ;; This function uses a non-reentrant model
 14165 ;;
 14166                           
 14167                           	psect	text60
 14168  0026DA                     __ptext60:
 14169                           	opt stack 0
 14170  0026DA                     ___ftadd:
 14171                           	opt stack 23
 14172                           
 14173                           ;incstack = 0
 14174  0026DA  C08C  F090         	movff	___ftadd@f1+2,??___ftadd
 14175  0026DE  0100               	movlb	0	; () banked
 14176  0026E0  6B91               	clrf	(??___ftadd+1)& (0+255),b
 14177  0026E2  6B92               	clrf	(??___ftadd+2)& (0+255),b
 14178  0026E4  0100               	movlb	0	; () banked
 14179  0026E6  358B               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14180  0026E8  0100               	movlb	0	; () banked
 14181  0026EA  3790               	rlcf	??___ftadd& (0+255),f,b
 14182  0026EC  E301               	bnc	u6521
 14183  0026EE  8191               	bsf	(??___ftadd+1)& (0+255),0,b
 14184  0026F0                     u6521:
 14185  0026F0  0100               	movlb	0	; () banked
 14186  0026F2  5190               	movf	??___ftadd& (0+255),w,b
 14187  0026F4  0100               	movlb	0	; () banked
 14188  0026F6  6F95               	movwf	___ftadd@exp1& (0+255),b
 14189  0026F8  C08F  F090         	movff	___ftadd@f2+2,??___ftadd
 14190  0026FC  0100               	movlb	0	; () banked
 14191  0026FE  6B91               	clrf	(??___ftadd+1)& (0+255),b
 14192  002700  6B92               	clrf	(??___ftadd+2)& (0+255),b
 14193  002702  0100               	movlb	0	; () banked
 14194  002704  358E               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14195  002706  0100               	movlb	0	; () banked
 14196  002708  3790               	rlcf	??___ftadd& (0+255),f,b
 14197  00270A  E301               	bnc	u6531
 14198  00270C  8191               	bsf	(??___ftadd+1)& (0+255),0,b
 14199  00270E                     u6531:
 14200  00270E  0100               	movlb	0	; () banked
 14201  002710  5190               	movf	??___ftadd& (0+255),w,b
 14202  002712  0100               	movlb	0	; () banked
 14203  002714  6F94               	movwf	___ftadd@exp2& (0+255),b
 14204                           
 14205                           ; BSR set to: 0
 14206  002716  0100               	movlb	0	; () banked
 14207  002718  5195               	movf	___ftadd@exp1& (0+255),w,b
 14208  00271A  0100               	movlb	0	; () banked
 14209  00271C  B4D8               	btfsc	status,2,c
 14210  00271E  D011               	goto	l1303
 14211                           
 14212                           ; BSR set to: 0
 14213  002720  0100               	movlb	0	; () banked
 14214  002722  5194               	movf	___ftadd@exp2& (0+255),w,b
 14215  002724  0100               	movlb	0	; () banked
 14216  002726  5D95               	subwf	___ftadd@exp1& (0+255),w,b
 14217  002728  B0D8               	btfsc	status,0,c
 14218  00272A  D012               	goto	l5882
 14219                           
 14220                           ; BSR set to: 0
 14221  00272C  0100               	movlb	0	; () banked
 14222  00272E  5195               	movf	___ftadd@exp1& (0+255),w,b
 14223  002730  0800               	sublw	0
 14224  002732  0100               	movlb	0	; () banked
 14225  002734  2594               	addwf	___ftadd@exp2& (0+255),w,b
 14226  002736  0100               	movlb	0	; () banked
 14227  002738  6F90               	movwf	??___ftadd& (0+255),b
 14228  00273A  0E18               	movlw	24
 14229  00273C  0100               	movlb	0	; () banked
 14230  00273E  6590               	cpfsgt	??___ftadd& (0+255),b
 14231  002740  D007               	goto	l5882
 14232  002742                     l1303:
 14233                           
 14234                           ; BSR set to: 0
 14235  002742  C08D  F08A         	movff	___ftadd@f2,?___ftadd
 14236  002746  C08E  F08B         	movff	___ftadd@f2+1,?___ftadd+1
 14237  00274A  C08F  F08C         	movff	___ftadd@f2+2,?___ftadd+2
 14238  00274E  0012               	return	
 14239  002750                     l5882:
 14240                           
 14241                           ; BSR set to: 0
 14242  002750  0100               	movlb	0	; () banked
 14243  002752  5194               	movf	___ftadd@exp2& (0+255),w,b
 14244  002754  0100               	movlb	0	; () banked
 14245  002756  B4D8               	btfsc	status,2,c
 14246  002758  D011               	goto	l1307
 14247                           
 14248                           ; BSR set to: 0
 14249  00275A  0100               	movlb	0	; () banked
 14250  00275C  5195               	movf	___ftadd@exp1& (0+255),w,b
 14251  00275E  0100               	movlb	0	; () banked
 14252  002760  5D94               	subwf	___ftadd@exp2& (0+255),w,b
 14253  002762  B0D8               	btfsc	status,0,c
 14254  002764  D012               	goto	l5888
 14255                           
 14256                           ; BSR set to: 0
 14257  002766  0100               	movlb	0	; () banked
 14258  002768  5194               	movf	___ftadd@exp2& (0+255),w,b
 14259  00276A  0800               	sublw	0
 14260  00276C  0100               	movlb	0	; () banked
 14261  00276E  2595               	addwf	___ftadd@exp1& (0+255),w,b
 14262  002770  0100               	movlb	0	; () banked
 14263  002772  6F90               	movwf	??___ftadd& (0+255),b
 14264  002774  0E18               	movlw	24
 14265  002776  0100               	movlb	0	; () banked
 14266  002778  6590               	cpfsgt	??___ftadd& (0+255),b
 14267  00277A  D007               	goto	l5888
 14268  00277C                     l1307:
 14269                           
 14270                           ; BSR set to: 0
 14271  00277C  C08A  F08A         	movff	___ftadd@f1,?___ftadd
 14272  002780  C08B  F08B         	movff	___ftadd@f1+1,?___ftadd+1
 14273  002784  C08C  F08C         	movff	___ftadd@f1+2,?___ftadd+2
 14274  002788  0012               	return	
 14275  00278A                     l5888:
 14276                           
 14277                           ; BSR set to: 0
 14278  00278A  0E06               	movlw	6
 14279  00278C  0100               	movlb	0	; () banked
 14280  00278E  6F93               	movwf	___ftadd@sign& (0+255),b
 14281                           
 14282                           ; BSR set to: 0
 14283  002790  0100               	movlb	0	; () banked
 14284  002792  AF8C               	btfss	(___ftadd@f1+2)& (0+255),7,b
 14285  002794  D003               	goto	l5894
 14286                           
 14287                           ; BSR set to: 0
 14288  002796  0100               	movlb	0	; () banked
 14289  002798  8F93               	bsf	___ftadd@sign& (0+255),7,b
 14290  00279A  D000               	goto	l5894
 14291  00279C                     l5894:
 14292                           
 14293                           ; BSR set to: 0
 14294  00279C  0100               	movlb	0	; () banked
 14295  00279E  AF8F               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14296  0027A0  D002               	goto	l1309
 14297                           
 14298                           ; BSR set to: 0
 14299  0027A2  0100               	movlb	0	; () banked
 14300  0027A4  8D93               	bsf	___ftadd@sign& (0+255),6,b
 14301  0027A6                     l1309:
 14302                           
 14303                           ; BSR set to: 0
 14304  0027A6  0100               	movlb	0	; () banked
 14305  0027A8  8F8B               	bsf	(___ftadd@f1+1)& (0+255),7,b
 14306                           
 14307                           ; BSR set to: 0
 14308  0027AA  0EFF               	movlw	255
 14309  0027AC  0100               	movlb	0	; () banked
 14310  0027AE  178A               	andwf	___ftadd@f1& (0+255),f,b
 14311  0027B0  0EFF               	movlw	255
 14312  0027B2  0100               	movlb	0	; () banked
 14313  0027B4  178B               	andwf	(___ftadd@f1+1)& (0+255),f,b
 14314  0027B6  0E00               	movlw	0
 14315  0027B8  0100               	movlb	0	; () banked
 14316  0027BA  178C               	andwf	(___ftadd@f1+2)& (0+255),f,b
 14317  0027BC  0100               	movlb	0	; () banked
 14318  0027BE  8F8E               	bsf	(___ftadd@f2+1)& (0+255),7,b
 14319                           
 14320                           ; BSR set to: 0
 14321  0027C0  0EFF               	movlw	255
 14322  0027C2  0100               	movlb	0	; () banked
 14323  0027C4  178D               	andwf	___ftadd@f2& (0+255),f,b
 14324  0027C6  0EFF               	movlw	255
 14325  0027C8  0100               	movlb	0	; () banked
 14326  0027CA  178E               	andwf	(___ftadd@f2+1)& (0+255),f,b
 14327  0027CC  0E00               	movlw	0
 14328  0027CE  0100               	movlb	0	; () banked
 14329  0027D0  178F               	andwf	(___ftadd@f2+2)& (0+255),f,b
 14330                           
 14331                           ; BSR set to: 0
 14332  0027D2  0100               	movlb	0	; () banked
 14333  0027D4  5194               	movf	___ftadd@exp2& (0+255),w,b
 14334  0027D6  0100               	movlb	0	; () banked
 14335  0027D8  5D95               	subwf	___ftadd@exp1& (0+255),w,b
 14336  0027DA  B0D8               	btfsc	status,0,c
 14337  0027DC  D028               	goto	l5914
 14338  0027DE                     l5904:
 14339                           
 14340                           ; BSR set to: 0
 14341  0027DE  0100               	movlb	0	; () banked
 14342  0027E0  90D8               	bcf	status,0,c
 14343  0027E2  378D               	rlcf	___ftadd@f2& (0+255),f,b
 14344  0027E4  378E               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 14345  0027E6  378F               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 14346  0027E8  0100               	movlb	0	; () banked
 14347  0027EA  0794               	decf	___ftadd@exp2& (0+255),f,b
 14348                           
 14349                           ; BSR set to: 0
 14350  0027EC  0100               	movlb	0	; () banked
 14351  0027EE  5195               	movf	___ftadd@exp1& (0+255),w,b
 14352  0027F0  0100               	movlb	0	; () banked
 14353  0027F2  1994               	xorwf	___ftadd@exp2& (0+255),w,b
 14354  0027F4  B4D8               	btfsc	status,2,c
 14355  0027F6  D013               	goto	l5912
 14356                           
 14357                           ; BSR set to: 0
 14358  0027F8  0100               	movlb	0	; () banked
 14359  0027FA  0793               	decf	___ftadd@sign& (0+255),f,b
 14360  0027FC  C093  F090         	movff	___ftadd@sign,??___ftadd
 14361  002800  0E07               	movlw	7
 14362  002802  0100               	movlb	0	; () banked
 14363  002804  1790               	andwf	??___ftadd& (0+255),f,b
 14364  002806  B4D8               	btfsc	status,2,c
 14365  002808  D00A               	goto	l5912
 14366  00280A  D7E9               	goto	l5904
 14367                           
 14368                           ; BSR set to: 0
 14369                           
 14370                           ; BSR set to: 0
 14371  00280C  D008               	goto	l5912
 14372  00280E                     l5910:
 14373                           
 14374                           ; BSR set to: 0
 14375  00280E  0100               	movlb	0	; () banked
 14376  002810  90D8               	bcf	status,0,c
 14377  002812  338C               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 14378  002814  338B               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 14379  002816  338A               	rrcf	___ftadd@f1& (0+255),f,b
 14380  002818  0100               	movlb	0	; () banked
 14381  00281A  2B95               	incf	___ftadd@exp1& (0+255),f,b
 14382  00281C  D000               	goto	l5912
 14383  00281E                     l5912:
 14384                           
 14385                           ; BSR set to: 0
 14386  00281E  0100               	movlb	0	; () banked
 14387  002820  5194               	movf	___ftadd@exp2& (0+255),w,b
 14388  002822  0100               	movlb	0	; () banked
 14389  002824  1995               	xorwf	___ftadd@exp1& (0+255),w,b
 14390  002826  B4D8               	btfsc	status,2,c
 14391  002828  D030               	goto	l1318
 14392  00282A  D7F1               	goto	l5910
 14393                           
 14394                           ; BSR set to: 0
 14395  00282C  D02E               	goto	l1318
 14396  00282E                     l5914:
 14397                           
 14398                           ; BSR set to: 0
 14399  00282E  0100               	movlb	0	; () banked
 14400  002830  5195               	movf	___ftadd@exp1& (0+255),w,b
 14401  002832  0100               	movlb	0	; () banked
 14402  002834  5D94               	subwf	___ftadd@exp2& (0+255),w,b
 14403  002836  B0D8               	btfsc	status,0,c
 14404  002838  D028               	goto	l1318
 14405  00283A                     l5916:
 14406                           
 14407                           ; BSR set to: 0
 14408  00283A  0100               	movlb	0	; () banked
 14409  00283C  90D8               	bcf	status,0,c
 14410  00283E  378A               	rlcf	___ftadd@f1& (0+255),f,b
 14411  002840  378B               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 14412  002842  378C               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 14413  002844  0100               	movlb	0	; () banked
 14414  002846  0795               	decf	___ftadd@exp1& (0+255),f,b
 14415                           
 14416                           ; BSR set to: 0
 14417  002848  0100               	movlb	0	; () banked
 14418  00284A  5195               	movf	___ftadd@exp1& (0+255),w,b
 14419  00284C  0100               	movlb	0	; () banked
 14420  00284E  1994               	xorwf	___ftadd@exp2& (0+255),w,b
 14421  002850  B4D8               	btfsc	status,2,c
 14422  002852  D013               	goto	l5924
 14423                           
 14424                           ; BSR set to: 0
 14425  002854  0100               	movlb	0	; () banked
 14426  002856  0793               	decf	___ftadd@sign& (0+255),f,b
 14427  002858  C093  F090         	movff	___ftadd@sign,??___ftadd
 14428  00285C  0E07               	movlw	7
 14429  00285E  0100               	movlb	0	; () banked
 14430  002860  1790               	andwf	??___ftadd& (0+255),f,b
 14431  002862  B4D8               	btfsc	status,2,c
 14432  002864  D00A               	goto	l5924
 14433  002866  D7E9               	goto	l5916
 14434                           
 14435                           ; BSR set to: 0
 14436                           
 14437                           ; BSR set to: 0
 14438  002868  D008               	goto	l5924
 14439  00286A                     l5922:
 14440                           
 14441                           ; BSR set to: 0
 14442  00286A  0100               	movlb	0	; () banked
 14443  00286C  90D8               	bcf	status,0,c
 14444  00286E  338F               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 14445  002870  338E               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 14446  002872  338D               	rrcf	___ftadd@f2& (0+255),f,b
 14447  002874  0100               	movlb	0	; () banked
 14448  002876  2B94               	incf	___ftadd@exp2& (0+255),f,b
 14449  002878  D000               	goto	l5924
 14450  00287A                     l5924:
 14451                           
 14452                           ; BSR set to: 0
 14453  00287A  0100               	movlb	0	; () banked
 14454  00287C  5194               	movf	___ftadd@exp2& (0+255),w,b
 14455  00287E  0100               	movlb	0	; () banked
 14456  002880  1995               	xorwf	___ftadd@exp1& (0+255),w,b
 14457  002882  B4D8               	btfsc	status,2,c
 14458  002884  D002               	goto	l1318
 14459  002886  D7F1               	goto	l5922
 14460                           
 14461                           ; BSR set to: 0
 14462  002888  D000               	goto	l1318
 14463  00288A                     l1318:
 14464                           
 14465                           ; BSR set to: 0
 14466  00288A  0100               	movlb	0	; () banked
 14467  00288C  AF93               	btfss	___ftadd@sign& (0+255),7,b
 14468  00288E  D012               	goto	l1327
 14469                           
 14470                           ; BSR set to: 0
 14471  002890  0EFF               	movlw	255
 14472  002892  0100               	movlb	0	; () banked
 14473  002894  1B8A               	xorwf	___ftadd@f1& (0+255),f,b
 14474  002896  0EFF               	movlw	255
 14475  002898  0100               	movlb	0	; () banked
 14476  00289A  1B8B               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 14477  00289C  0EFF               	movlw	255
 14478  00289E  0100               	movlb	0	; () banked
 14479  0028A0  1B8C               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 14480  0028A2  0E01               	movlw	1
 14481  0028A4  0100               	movlb	0	; () banked
 14482  0028A6  278A               	addwf	___ftadd@f1& (0+255),f,b
 14483  0028A8  0E00               	movlw	0
 14484  0028AA  0100               	movlb	0	; () banked
 14485  0028AC  238B               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 14486  0028AE  0E00               	movlw	0
 14487  0028B0  0100               	movlb	0	; () banked
 14488  0028B2  238C               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 14489  0028B4                     l1327:
 14490                           
 14491                           ; BSR set to: 0
 14492  0028B4  0100               	movlb	0	; () banked
 14493  0028B6  AD93               	btfss	___ftadd@sign& (0+255),6,b
 14494  0028B8  D013               	goto	l5930
 14495                           
 14496                           ; BSR set to: 0
 14497  0028BA  0EFF               	movlw	255
 14498  0028BC  0100               	movlb	0	; () banked
 14499  0028BE  1B8D               	xorwf	___ftadd@f2& (0+255),f,b
 14500  0028C0  0EFF               	movlw	255
 14501  0028C2  0100               	movlb	0	; () banked
 14502  0028C4  1B8E               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14503  0028C6  0EFF               	movlw	255
 14504  0028C8  0100               	movlb	0	; () banked
 14505  0028CA  1B8F               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14506  0028CC  0E01               	movlw	1
 14507  0028CE  0100               	movlb	0	; () banked
 14508  0028D0  278D               	addwf	___ftadd@f2& (0+255),f,b
 14509  0028D2  0E00               	movlw	0
 14510  0028D4  0100               	movlb	0	; () banked
 14511  0028D6  238E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14512  0028D8  0E00               	movlw	0
 14513  0028DA  0100               	movlb	0	; () banked
 14514  0028DC  238F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14515  0028DE  D000               	goto	l5930
 14516  0028E0                     l5930:
 14517                           
 14518                           ; BSR set to: 0
 14519  0028E0  0E00               	movlw	0
 14520  0028E2  0100               	movlb	0	; () banked
 14521  0028E4  6F93               	movwf	___ftadd@sign& (0+255),b
 14522                           
 14523                           ; BSR set to: 0
 14524  0028E6  0100               	movlb	0	; () banked
 14525  0028E8  518A               	movf	___ftadd@f1& (0+255),w,b
 14526  0028EA  0100               	movlb	0	; () banked
 14527  0028EC  278D               	addwf	___ftadd@f2& (0+255),f,b
 14528  0028EE  0100               	movlb	0	; () banked
 14529  0028F0  518B               	movf	(___ftadd@f1+1)& (0+255),w,b
 14530  0028F2  0100               	movlb	0	; () banked
 14531  0028F4  238E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14532  0028F6  0100               	movlb	0	; () banked
 14533  0028F8  518C               	movf	(___ftadd@f1+2)& (0+255),w,b
 14534  0028FA  0100               	movlb	0	; () banked
 14535  0028FC  238F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14536                           
 14537                           ; BSR set to: 0
 14538  0028FE  0100               	movlb	0	; () banked
 14539  002900  AF8F               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14540  002902  D016               	goto	l5940
 14541                           
 14542                           ; BSR set to: 0
 14543  002904  0EFF               	movlw	255
 14544  002906  0100               	movlb	0	; () banked
 14545  002908  1B8D               	xorwf	___ftadd@f2& (0+255),f,b
 14546  00290A  0EFF               	movlw	255
 14547  00290C  0100               	movlb	0	; () banked
 14548  00290E  1B8E               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14549  002910  0EFF               	movlw	255
 14550  002912  0100               	movlb	0	; () banked
 14551  002914  1B8F               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14552  002916  0E01               	movlw	1
 14553  002918  0100               	movlb	0	; () banked
 14554  00291A  278D               	addwf	___ftadd@f2& (0+255),f,b
 14555  00291C  0E00               	movlw	0
 14556  00291E  0100               	movlb	0	; () banked
 14557  002920  238E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14558  002922  0E00               	movlw	0
 14559  002924  0100               	movlb	0	; () banked
 14560  002926  238F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14561                           
 14562                           ; BSR set to: 0
 14563  002928  0E01               	movlw	1
 14564  00292A  0100               	movlb	0	; () banked
 14565  00292C  6F93               	movwf	___ftadd@sign& (0+255),b
 14566  00292E  D000               	goto	l5940
 14567  002930                     l5940:
 14568                           
 14569                           ; BSR set to: 0
 14570  002930  C08D  F01B         	movff	___ftadd@f2,___ftpack@arg
 14571  002934  C08E  F01C         	movff	___ftadd@f2+1,___ftpack@arg+1
 14572  002938  C08F  F01D         	movff	___ftadd@f2+2,___ftpack@arg+2
 14573  00293C  C095  F01E         	movff	___ftadd@exp1,___ftpack@exp
 14574  002940  C093  F01F         	movff	___ftadd@sign,___ftpack@sign
 14575  002944  EC24  F021         	call	___ftpack	;wreg free
 14576  002948  C01B  F08A         	movff	?___ftpack,?___ftadd
 14577  00294C  C01C  F08B         	movff	?___ftpack+1,?___ftadd+1
 14578  002950  C01D  F08C         	movff	?___ftpack+2,?___ftadd+2
 14579  002954  0012               	return	
 14580  002956  0012               	return		;funcret
 14581  002958                     __end_of___ftadd:
 14582                           	opt stack 0
 14583                           tosu	equ	0xFFF
 14584                           tosh	equ	0xFFE
 14585                           tosl	equ	0xFFD
 14586                           pclath	equ	0xFFA
 14587                           tblptru	equ	0xFF8
 14588                           tblptrh	equ	0xFF7
 14589                           tblptrl	equ	0xFF6
 14590                           tablat	equ	0xFF5
 14591                           prodh	equ	0xFF4
 14592                           prodl	equ	0xFF3
 14593                           intcon	equ	0xFF2
 14594                           intcon2	equ	0xFF1
 14595                           postinc0	equ	0xFEE
 14596                           wreg	equ	0xFE8
 14597                           postinc1	equ	0xFE6
 14598                           postdec1	equ	0xFE5
 14599                           fsr1h	equ	0xFE2
 14600                           fsr1l	equ	0xFE1
 14601                           indf2	equ	0xFDF
 14602                           postinc2	equ	0xFDE
 14603                           postdec2	equ	0xFDD
 14604                           plusw2	equ	0xFDB
 14605                           fsr2h	equ	0xFDA
 14606                           fsr2l	equ	0xFD9
 14607                           status	equ	0xFD8
 14608                           
 14609 ;; *************** function ___ftpack *****************
 14610 ;; Defined at:
 14611 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 14612 ;; Parameters:    Size  Location     Type
 14613 ;;  arg             3   26[COMRAM] unsigned um
 14614 ;;  exp             1   29[COMRAM] unsigned char 
 14615 ;;  sign            1   30[COMRAM] unsigned char 
 14616 ;; Auto vars:     Size  Location     Type
 14617 ;;		None
 14618 ;; Return value:  Size  Location     Type
 14619 ;;                  3   26[COMRAM] float 
 14620 ;; Registers used:
 14621 ;;		wreg, status,2, status,0
 14622 ;; Tracked objects:
 14623 ;;		On entry : 0/0
 14624 ;;		On exit  : 0/0
 14625 ;;		Unchanged: 0/0
 14626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14627 ;;      Params:         5       0       0       0       0       0       0
 14628 ;;      Locals:         0       0       0       0       0       0       0
 14629 ;;      Temps:          3       0       0       0       0       0       0
 14630 ;;      Totals:         8       0       0       0       0       0       0
 14631 ;;Total ram usage:        8 bytes
 14632 ;; Hardware stack levels used:    1
 14633 ;; Hardware stack levels required when called:    4
 14634 ;; This function calls:
 14635 ;;		Nothing
 14636 ;; This function is called by:
 14637 ;;		___altoft
 14638 ;;		___awtoft
 14639 ;;		___ftadd
 14640 ;;		___ftdiv
 14641 ;;		___ftmul
 14642 ;;		___lltoft
 14643 ;; This function uses a non-reentrant model
 14644 ;;
 14645                           
 14646                           	psect	text61
 14647  004248                     __ptext61:
 14648                           	opt stack 0
 14649  004248                     ___ftpack:
 14650                           	opt stack 23
 14651                           
 14652                           ;incstack = 0
 14653  004248  501E               	movf	___ftpack@exp,w,c
 14654  00424A  B4D8               	btfsc	status,2,c
 14655  00424C  D005               	goto	l5740
 14656  00424E  501B               	movf	___ftpack@arg,w,c
 14657  004250  101C               	iorwf	___ftpack@arg+1,w,c
 14658  004252  101D               	iorwf	___ftpack@arg+2,w,c
 14659  004254  A4D8               	btfss	status,2,c
 14660  004256  D00E               	goto	l5746
 14661  004258                     l5740:
 14662  004258  0E00               	movlw	0
 14663  00425A  6E1B               	movwf	?___ftpack,c
 14664  00425C  0E00               	movlw	0
 14665  00425E  6E1C               	movwf	?___ftpack+1,c
 14666  004260  0E00               	movlw	0
 14667  004262  6E1D               	movwf	?___ftpack+2,c
 14668  004264  0012               	return	
 14669  004266  D006               	goto	l5746
 14670  004268                     l5744:
 14671  004268  2A1E               	incf	___ftpack@exp,f,c
 14672  00426A  90D8               	bcf	status,0,c
 14673  00426C  321D               	rrcf	___ftpack@arg+2,f,c
 14674  00426E  321C               	rrcf	___ftpack@arg+1,f,c
 14675  004270  321B               	rrcf	___ftpack@arg,f,c
 14676  004272  D000               	goto	l5746
 14677  004274                     l5746:
 14678  004274  0E00               	movlw	0
 14679  004276  141B               	andwf	___ftpack@arg,w,c
 14680  004278  6E20               	movwf	??___ftpack& (0+255),c
 14681  00427A  0E00               	movlw	0
 14682  00427C  141C               	andwf	___ftpack@arg+1,w,c
 14683  00427E  6E21               	movwf	(??___ftpack+1)& (0+255),c
 14684  004280  0EFE               	movlw	254
 14685  004282  141D               	andwf	___ftpack@arg+2,w,c
 14686  004284  6E22               	movwf	(??___ftpack+2)& (0+255),c
 14687  004286  5020               	movf	??___ftpack,w,c
 14688  004288  1021               	iorwf	??___ftpack+1,w,c
 14689  00428A  1022               	iorwf	??___ftpack+2,w,c
 14690  00428C  B4D8               	btfsc	status,2,c
 14691  00428E  D00E               	goto	l5752
 14692  004290  D7EB               	goto	l5744
 14693  004292  D00C               	goto	l5752
 14694  004294                     l5748:
 14695  004294  2A1E               	incf	___ftpack@exp,f,c
 14696  004296  0E01               	movlw	1
 14697  004298  261B               	addwf	___ftpack@arg,f,c
 14698  00429A  0E00               	movlw	0
 14699  00429C  221C               	addwfc	___ftpack@arg+1,f,c
 14700  00429E  0E00               	movlw	0
 14701  0042A0  221D               	addwfc	___ftpack@arg+2,f,c
 14702  0042A2  90D8               	bcf	status,0,c
 14703  0042A4  321D               	rrcf	___ftpack@arg+2,f,c
 14704  0042A6  321C               	rrcf	___ftpack@arg+1,f,c
 14705  0042A8  321B               	rrcf	___ftpack@arg,f,c
 14706  0042AA  D000               	goto	l5752
 14707  0042AC                     l5752:
 14708  0042AC  0E00               	movlw	0
 14709  0042AE  141B               	andwf	___ftpack@arg,w,c
 14710  0042B0  6E20               	movwf	??___ftpack& (0+255),c
 14711  0042B2  0E00               	movlw	0
 14712  0042B4  141C               	andwf	___ftpack@arg+1,w,c
 14713  0042B6  6E21               	movwf	(??___ftpack+1)& (0+255),c
 14714  0042B8  0EFF               	movlw	255
 14715  0042BA  141D               	andwf	___ftpack@arg+2,w,c
 14716  0042BC  6E22               	movwf	(??___ftpack+2)& (0+255),c
 14717  0042BE  5020               	movf	??___ftpack,w,c
 14718  0042C0  1021               	iorwf	??___ftpack+1,w,c
 14719  0042C2  1022               	iorwf	??___ftpack+2,w,c
 14720  0042C4  B4D8               	btfsc	status,2,c
 14721  0042C6  D008               	goto	l5756
 14722  0042C8  D7E5               	goto	l5748
 14723  0042CA  D006               	goto	l5756
 14724  0042CC                     l5754:
 14725  0042CC  061E               	decf	___ftpack@exp,f,c
 14726  0042CE  90D8               	bcf	status,0,c
 14727  0042D0  361B               	rlcf	___ftpack@arg,f,c
 14728  0042D2  361C               	rlcf	___ftpack@arg+1,f,c
 14729  0042D4  361D               	rlcf	___ftpack@arg+2,f,c
 14730  0042D6  D000               	goto	l5756
 14731  0042D8                     l5756:
 14732  0042D8  BE1C               	btfsc	___ftpack@arg+1,7,c
 14733  0042DA  D004               	goto	l1274
 14734  0042DC  0E02               	movlw	2
 14735  0042DE  601E               	cpfslt	___ftpack@exp,c
 14736  0042E0  D7F5               	goto	l5754
 14737  0042E2  D000               	goto	l1274
 14738  0042E4                     l1274:
 14739  0042E4  B01E               	btfsc	___ftpack@exp,0,c
 14740  0042E6  D002               	goto	l5762
 14741  0042E8  9E1C               	bcf	___ftpack@arg+1,7,c
 14742  0042EA  D000               	goto	l5762
 14743  0042EC                     l5762:
 14744  0042EC  90D8               	bcf	status,0,c
 14745  0042EE  321E               	rrcf	___ftpack@exp,f,c
 14746  0042F0  501E               	movf	___ftpack@exp,w,c
 14747  0042F2  121D               	iorwf	___ftpack@arg+2,f,c
 14748  0042F4  501F               	movf	___ftpack@sign,w,c
 14749  0042F6  B4D8               	btfsc	status,2,c
 14750  0042F8  D002               	goto	l5768
 14751  0042FA  8E1D               	bsf	___ftpack@arg+2,7,c
 14752  0042FC  D000               	goto	l5768
 14753  0042FE                     l5768:
 14754  0042FE  C01B  F01B         	movff	___ftpack@arg,?___ftpack
 14755  004302  C01C  F01C         	movff	___ftpack@arg+1,?___ftpack+1
 14756  004306  C01D  F01D         	movff	___ftpack@arg+2,?___ftpack+2
 14757  00430A  0012               	return	
 14758  00430C  0012               	return		;funcret
 14759  00430E                     __end_of___ftpack:
 14760                           	opt stack 0
 14761                           tosu	equ	0xFFF
 14762                           tosh	equ	0xFFE
 14763                           tosl	equ	0xFFD
 14764                           pclath	equ	0xFFA
 14765                           tblptru	equ	0xFF8
 14766                           tblptrh	equ	0xFF7
 14767                           tblptrl	equ	0xFF6
 14768                           tablat	equ	0xFF5
 14769                           prodh	equ	0xFF4
 14770                           prodl	equ	0xFF3
 14771                           intcon	equ	0xFF2
 14772                           intcon2	equ	0xFF1
 14773                           postinc0	equ	0xFEE
 14774                           wreg	equ	0xFE8
 14775                           postinc1	equ	0xFE6
 14776                           postdec1	equ	0xFE5
 14777                           fsr1h	equ	0xFE2
 14778                           fsr1l	equ	0xFE1
 14779                           indf2	equ	0xFDF
 14780                           postinc2	equ	0xFDE
 14781                           postdec2	equ	0xFDD
 14782                           plusw2	equ	0xFDB
 14783                           fsr2h	equ	0xFDA
 14784                           fsr2l	equ	0xFD9
 14785                           status	equ	0xFD8
 14786                           
 14787 ;; *************** function _INTERRUPT_InterruptManager *****************
 14788 ;; Defined at:
 14789 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
 14790 ;; Parameters:    Size  Location     Type
 14791 ;;		None
 14792 ;; Auto vars:     Size  Location     Type
 14793 ;;		None
 14794 ;; Return value:  Size  Location     Type
 14795 ;;		None               void
 14796 ;; Registers used:
 14797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14798 ;; Tracked objects:
 14799 ;;		On entry : 0/0
 14800 ;;		On exit  : 0/0
 14801 ;;		Unchanged: 0/0
 14802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14803 ;;      Params:         0       0       0       0       0       0       0
 14804 ;;      Locals:         0       0       0       0       0       0       0
 14805 ;;      Temps:         14       0       0       0       0       0       0
 14806 ;;      Totals:        14       0       0       0       0       0       0
 14807 ;;Total ram usage:       14 bytes
 14808 ;; Hardware stack levels used:    1
 14809 ;; Hardware stack levels required when called:    3
 14810 ;; This function calls:
 14811 ;;		_ADC_ISR
 14812 ;;		_EUSART1_Receive_ISR
 14813 ;;		_EUSART1_Transmit_ISR
 14814 ;;		_TMR1_ISR
 14815 ;; This function is called by:
 14816 ;;		Interrupt level 2
 14817 ;; This function uses a non-reentrant model
 14818 ;;
 14819                           
 14820                           	psect	intcode
 14821  000008                     __pintcode:
 14822                           	opt stack 0
 14823  000008                     _INTERRUPT_InterruptManager:
 14824                           	opt stack 21
 14825                           
 14826                           ;incstack = 0
 14827  000008  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
 14828  00000C  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 14829  000010  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 14830  000014  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 14831  000018  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 14832  00001C  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 14833  000020  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 14834  000024  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 14835  000028  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
 14836  00002C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
 14837  000030  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 14838  000034  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 14839  000038  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 14840  00003C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
 14841                           
 14842                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 14843  000040  BA9D               	btfsc	3997,5,c	;volatile
 14844  000042  AA9E               	btfss	3998,5,c	;volatile
 14845  000044  D003               	goto	i2l208
 14846                           
 14847                           ;interrupt_manager.c: 73: {
 14848                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
 14849  000046  ECD3  F026         	call	_EUSART1_Receive_ISR	;wreg free
 14850                           
 14851                           ;interrupt_manager.c: 75: }
 14852  00004A  D012               	goto	i2l216
 14853  00004C                     i2l208:
 14854                           
 14855                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 14856  00004C  BC9D               	btfsc	3997,6,c	;volatile
 14857  00004E  AC9E               	btfss	3998,6,c	;volatile
 14858  000050  D003               	goto	i2l210
 14859                           
 14860                           ;interrupt_manager.c: 77: {
 14861                           ;interrupt_manager.c: 78: ADC_ISR();
 14862  000052  EC0A  F00D         	call	_ADC_ISR	;wreg free
 14863                           
 14864                           ;interrupt_manager.c: 79: }
 14865  000056  D00C               	goto	i2l216
 14866  000058                     i2l210:
 14867                           
 14868                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 14869  000058  B09D               	btfsc	3997,0,c	;volatile
 14870  00005A  A09E               	btfss	3998,0,c	;volatile
 14871  00005C  D003               	goto	i2l212
 14872                           
 14873                           ;interrupt_manager.c: 81: {
 14874                           ;interrupt_manager.c: 82: TMR1_ISR();
 14875  00005E  EC52  F025         	call	_TMR1_ISR	;wreg free
 14876                           
 14877                           ;interrupt_manager.c: 83: }
 14878  000062  D006               	goto	i2l216
 14879  000064                     i2l212:
 14880                           
 14881                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 14882  000064  B89D               	btfsc	3997,4,c	;volatile
 14883  000066  A89E               	btfss	3998,4,c	;volatile
 14884  000068  D003               	goto	i2l216
 14885                           
 14886                           ;interrupt_manager.c: 85: {
 14887                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
 14888  00006A  EC08  F026         	call	_EUSART1_Transmit_ISR	;wreg free
 14889                           
 14890                           ;interrupt_manager.c: 88: else
 14891                           ;interrupt_manager.c: 89: {
 14892                           
 14893                           ;interrupt_manager.c: 87: }
 14894  00006E  D000               	goto	i2l216
 14895  000070                     i2l216:
 14896  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 14897  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 14898  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 14899  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 14900  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 14901  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 14902  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 14903  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 14904  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 14905  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 14906  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 14907  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 14908  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 14909  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 14910  0000A8  0011               	retfie		f
 14911  0000AA                     __end_of_INTERRUPT_InterruptManager:
 14912                           	opt stack 0
 14913                           tosu	equ	0xFFF
 14914                           tosh	equ	0xFFE
 14915                           tosl	equ	0xFFD
 14916                           pclatu	equ	0xFFB
 14917                           pclath	equ	0xFFA
 14918                           tblptru	equ	0xFF8
 14919                           tblptrh	equ	0xFF7
 14920                           tblptrl	equ	0xFF6
 14921                           tablat	equ	0xFF5
 14922                           prodh	equ	0xFF4
 14923                           prodl	equ	0xFF3
 14924                           intcon	equ	0xFF2
 14925                           intcon2	equ	0xFF1
 14926                           postinc0	equ	0xFEE
 14927                           fsr0h	equ	0xFEA
 14928                           fsr0l	equ	0xFE9
 14929                           wreg	equ	0xFE8
 14930                           postinc1	equ	0xFE6
 14931                           postdec1	equ	0xFE5
 14932                           fsr1h	equ	0xFE2
 14933                           fsr1l	equ	0xFE1
 14934                           indf2	equ	0xFDF
 14935                           postinc2	equ	0xFDE
 14936                           postdec2	equ	0xFDD
 14937                           plusw2	equ	0xFDB
 14938                           fsr2h	equ	0xFDA
 14939                           fsr2l	equ	0xFD9
 14940                           status	equ	0xFD8
 14941                           
 14942 ;; *************** function _TMR1_ISR *****************
 14943 ;; Defined at:
 14944 ;;		line 112 in file "mcc_generated_files/tmr1.c"
 14945 ;; Parameters:    Size  Location     Type
 14946 ;;		None
 14947 ;; Auto vars:     Size  Location     Type
 14948 ;;		None
 14949 ;; Return value:  Size  Location     Type
 14950 ;;		None               void
 14951 ;; Registers used:
 14952 ;;		wreg, status,2, status,0, cstack
 14953 ;; Tracked objects:
 14954 ;;		On entry : 0/0
 14955 ;;		On exit  : 0/0
 14956 ;;		Unchanged: 0/0
 14957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14958 ;;      Params:         0       0       0       0       0       0       0
 14959 ;;      Locals:         0       0       0       0       0       0       0
 14960 ;;      Temps:          0       0       0       0       0       0       0
 14961 ;;      Totals:         0       0       0       0       0       0       0
 14962 ;;Total ram usage:        0 bytes
 14963 ;; Hardware stack levels used:    1
 14964 ;; Hardware stack levels required when called:    2
 14965 ;; This function calls:
 14966 ;;		_Battery_Read
 14967 ;;		_Temp_Read
 14968 ;; This function is called by:
 14969 ;;		_INTERRUPT_InterruptManager
 14970 ;; This function uses a non-reentrant model
 14971 ;;
 14972                           
 14973                           	psect	text63
 14974  004AA4                     __ptext63:
 14975                           	opt stack 0
 14976  004AA4                     _TMR1_ISR:
 14977                           	opt stack 21
 14978                           
 14979                           ;tmr1.c: 116: PIR1bits.TMR1IF = 0;
 14980                           
 14981                           ;incstack = 0
 14982  004AA4  909E               	bcf	3998,0,c	;volatile
 14983                           
 14984                           ;tmr1.c: 119: TMR1H = (timer1ReloadVal >> 8);
 14985  004AA6  5038               	movf	_timer1ReloadVal+1,w,c	;volatile
 14986  004AA8  6ECF               	movwf	4047,c	;volatile
 14987                           
 14988                           ;tmr1.c: 120: TMR1L = (uint8_t) timer1ReloadVal;
 14989  004AAA  C037  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 14990                           
 14991                           ;tmr1.c: 123: if (++CountCallBack >= 4)
 14992  004AAE  4A2D               	infsnz	_CountCallBack,f,c
 14993  004AB0  2A2E               	incf	_CountCallBack+1,f,c
 14994  004AB2  BE2E               	btfsc	_CountCallBack+1,7,c
 14995  004AB4  D00D               	goto	i2l4918
 14996  004AB6  502E               	movf	_CountCallBack+1,w,c
 14997  004AB8  E104               	bnz	i2u522_40
 14998  004ABA  0E04               	movlw	4
 14999  004ABC  5C2D               	subwf	_CountCallBack,w,c
 15000  004ABE  A0D8               	btfss	status,0,c
 15001  004AC0  D007               	goto	i2l4918
 15002  004AC2                     i2u522_40:
 15003                           
 15004                           ;tmr1.c: 124: {
 15005                           ;tmr1.c: 126: do { LATA4 = ~LATA4; } while(0);
 15006  004AC2  7889               	btg	3977,4,c	;volatile
 15007  004AC4  D000               	goto	i2l4914
 15008  004AC6                     i2l4914:
 15009                           
 15010                           ;tmr1.c: 129: CountCallBack = 0;
 15011  004AC6  0E00               	movlw	0
 15012  004AC8  6E2E               	movwf	_CountCallBack+1,c
 15013  004ACA  0E00               	movlw	0
 15014  004ACC  6E2D               	movwf	_CountCallBack,c
 15015  004ACE  D000               	goto	i2l4918
 15016  004AD0                     i2l4918:
 15017                           
 15018                           ;tmr1.c: 134: }
 15019                           ;tmr1.c: 135: if(CountCallBack == 2)
 15020  004AD0  0E02               	movlw	2
 15021  004AD2  182D               	xorwf	_CountCallBack,w,c
 15022  004AD4  102E               	iorwf	_CountCallBack+1,w,c
 15023  004AD6  A4D8               	btfss	status,2,c
 15024  004AD8  D003               	goto	i2l4922
 15025                           
 15026                           ;tmr1.c: 136: {
 15027                           ;tmr1.c: 137: Battery_Read();
 15028  004ADA  EC1F  F027         	call	_Battery_Read	;wreg free
 15029  004ADE  D000               	goto	i2l4922
 15030  004AE0                     i2l4922:
 15031                           
 15032                           ;tmr1.c: 138: }
 15033                           ;tmr1.c: 139: if(CountCallBack == 3)
 15034  004AE0  0E03               	movlw	3
 15035  004AE2  182D               	xorwf	_CountCallBack,w,c
 15036  004AE4  102E               	iorwf	_CountCallBack+1,w,c
 15037  004AE6  A4D8               	btfss	status,2,c
 15038  004AE8  0012               	return	
 15039                           
 15040                           ;tmr1.c: 140: {
 15041                           ;tmr1.c: 141: Temp_Read();
 15042  004AEA  EC13  F027         	call	_Temp_Read	;wreg free
 15043  004AEE  0012               	return	
 15044  004AF0  0012               	return		;funcret
 15045  004AF2                     __end_of_TMR1_ISR:
 15046                           	opt stack 0
 15047                           tosu	equ	0xFFF
 15048                           tosh	equ	0xFFE
 15049                           tosl	equ	0xFFD
 15050                           pclatu	equ	0xFFB
 15051                           pclath	equ	0xFFA
 15052                           tblptru	equ	0xFF8
 15053                           tblptrh	equ	0xFF7
 15054                           tblptrl	equ	0xFF6
 15055                           tablat	equ	0xFF5
 15056                           prodh	equ	0xFF4
 15057                           prodl	equ	0xFF3
 15058                           intcon	equ	0xFF2
 15059                           intcon2	equ	0xFF1
 15060                           postinc0	equ	0xFEE
 15061                           fsr0h	equ	0xFEA
 15062                           fsr0l	equ	0xFE9
 15063                           wreg	equ	0xFE8
 15064                           postinc1	equ	0xFE6
 15065                           postdec1	equ	0xFE5
 15066                           fsr1h	equ	0xFE2
 15067                           fsr1l	equ	0xFE1
 15068                           indf2	equ	0xFDF
 15069                           postinc2	equ	0xFDE
 15070                           postdec2	equ	0xFDD
 15071                           plusw2	equ	0xFDB
 15072                           fsr2h	equ	0xFDA
 15073                           fsr2l	equ	0xFD9
 15074                           status	equ	0xFD8
 15075                           
 15076 ;; *************** function _Temp_Read *****************
 15077 ;; Defined at:
 15078 ;;		line 36 in file "Tempeture.c"
 15079 ;; Parameters:    Size  Location     Type
 15080 ;;		None
 15081 ;; Auto vars:     Size  Location     Type
 15082 ;;		None
 15083 ;; Return value:  Size  Location     Type
 15084 ;;		None               void
 15085 ;; Registers used:
 15086 ;;		wreg, status,2, status,0, cstack
 15087 ;; Tracked objects:
 15088 ;;		On entry : 0/0
 15089 ;;		On exit  : 0/0
 15090 ;;		Unchanged: 0/0
 15091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15092 ;;      Params:         0       0       0       0       0       0       0
 15093 ;;      Locals:         0       0       0       0       0       0       0
 15094 ;;      Temps:          0       0       0       0       0       0       0
 15095 ;;      Totals:         0       0       0       0       0       0       0
 15096 ;;Total ram usage:        0 bytes
 15097 ;; Hardware stack levels used:    1
 15098 ;; Hardware stack levels required when called:    1
 15099 ;; This function calls:
 15100 ;;		_ADC_StartConversion
 15101 ;; This function is called by:
 15102 ;;		_TMR1_ISR
 15103 ;; This function uses a non-reentrant model
 15104 ;;
 15105                           
 15106                           	psect	text64
 15107  004E26                     __ptext64:
 15108                           	opt stack 0
 15109  004E26                     _Temp_Read:
 15110                           	opt stack 21
 15111                           
 15112                           ;Tempeture.c: 39: ADC_Buffer_Point = 0;
 15113                           
 15114                           ;incstack = 0
 15115  004E26  0E00               	movlw	0
 15116  004E28  6E2C               	movwf	_ADC_Buffer_Point+1,c
 15117  004E2A  0E00               	movlw	0
 15118  004E2C  6E2B               	movwf	_ADC_Buffer_Point,c
 15119                           
 15120                           ;Tempeture.c: 40: Temp_Aquire = 1;
 15121  004E2E  0E01               	movlw	1
 15122  004E30  6E3A               	movwf	_Temp_Aquire,c
 15123                           
 15124                           ;Tempeture.c: 41: ADCON1 = 0x80;
 15125  004E32  0E80               	movlw	128
 15126  004E34  6EC1               	movwf	4033,c	;volatile
 15127                           
 15128                           ;Tempeture.c: 42: ADC_StartConversion(Temp1);
 15129  004E36  0E0E               	movlw	14
 15130  004E38  ECE2  F026         	call	_ADC_StartConversion
 15131  004E3C  0012               	return		;funcret
 15132  004E3E                     __end_of_Temp_Read:
 15133                           	opt stack 0
 15134                           tosu	equ	0xFFF
 15135                           tosh	equ	0xFFE
 15136                           tosl	equ	0xFFD
 15137                           pclatu	equ	0xFFB
 15138                           pclath	equ	0xFFA
 15139                           tblptru	equ	0xFF8
 15140                           tblptrh	equ	0xFF7
 15141                           tblptrl	equ	0xFF6
 15142                           tablat	equ	0xFF5
 15143                           prodh	equ	0xFF4
 15144                           prodl	equ	0xFF3
 15145                           intcon	equ	0xFF2
 15146                           intcon2	equ	0xFF1
 15147                           postinc0	equ	0xFEE
 15148                           fsr0h	equ	0xFEA
 15149                           fsr0l	equ	0xFE9
 15150                           wreg	equ	0xFE8
 15151                           postinc1	equ	0xFE6
 15152                           postdec1	equ	0xFE5
 15153                           fsr1h	equ	0xFE2
 15154                           fsr1l	equ	0xFE1
 15155                           indf2	equ	0xFDF
 15156                           postinc2	equ	0xFDE
 15157                           postdec2	equ	0xFDD
 15158                           plusw2	equ	0xFDB
 15159                           fsr2h	equ	0xFDA
 15160                           fsr2l	equ	0xFD9
 15161                           status	equ	0xFD8
 15162                           
 15163 ;; *************** function _Battery_Read *****************
 15164 ;; Defined at:
 15165 ;;		line 18 in file "Battery.c"
 15166 ;; Parameters:    Size  Location     Type
 15167 ;;		None
 15168 ;; Auto vars:     Size  Location     Type
 15169 ;;		None
 15170 ;; Return value:  Size  Location     Type
 15171 ;;		None               void
 15172 ;; Registers used:
 15173 ;;		wreg, status,2, status,0, cstack
 15174 ;; Tracked objects:
 15175 ;;		On entry : 0/0
 15176 ;;		On exit  : 0/0
 15177 ;;		Unchanged: 0/0
 15178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15179 ;;      Params:         0       0       0       0       0       0       0
 15180 ;;      Locals:         0       0       0       0       0       0       0
 15181 ;;      Temps:          0       0       0       0       0       0       0
 15182 ;;      Totals:         0       0       0       0       0       0       0
 15183 ;;Total ram usage:        0 bytes
 15184 ;; Hardware stack levels used:    1
 15185 ;; Hardware stack levels required when called:    1
 15186 ;; This function calls:
 15187 ;;		_ADC_StartConversion
 15188 ;; This function is called by:
 15189 ;;		_TMR1_ISR
 15190 ;; This function uses a non-reentrant model
 15191 ;;
 15192                           
 15193                           	psect	text65
 15194  004E3E                     __ptext65:
 15195                           	opt stack 0
 15196  004E3E                     _Battery_Read:
 15197                           	opt stack 21
 15198                           
 15199                           ;Battery.c: 21: ADC_Buffer_Point = 0;
 15200                           
 15201                           ;incstack = 0
 15202  004E3E  0E00               	movlw	0
 15203  004E40  6E2C               	movwf	_ADC_Buffer_Point+1,c
 15204  004E42  0E00               	movlw	0
 15205  004E44  6E2B               	movwf	_ADC_Buffer_Point,c
 15206                           
 15207                           ;Battery.c: 22: Volt_Aquire = 1;
 15208  004E46  0E01               	movlw	1
 15209  004E48  6E3B               	movwf	_Volt_Aquire,c
 15210                           
 15211                           ;Battery.c: 23: ADCON1 = 0x80;
 15212  004E4A  0E80               	movlw	128
 15213  004E4C  6EC1               	movwf	4033,c	;volatile
 15214                           
 15215                           ;Battery.c: 24: ADC_StartConversion(Battery1);
 15216  004E4E  0E01               	movlw	1
 15217  004E50  ECE2  F026         	call	_ADC_StartConversion
 15218  004E54  0012               	return		;funcret
 15219  004E56                     __end_of_Battery_Read:
 15220                           	opt stack 0
 15221                           tosu	equ	0xFFF
 15222                           tosh	equ	0xFFE
 15223                           tosl	equ	0xFFD
 15224                           pclatu	equ	0xFFB
 15225                           pclath	equ	0xFFA
 15226                           tblptru	equ	0xFF8
 15227                           tblptrh	equ	0xFF7
 15228                           tblptrl	equ	0xFF6
 15229                           tablat	equ	0xFF5
 15230                           prodh	equ	0xFF4
 15231                           prodl	equ	0xFF3
 15232                           intcon	equ	0xFF2
 15233                           intcon2	equ	0xFF1
 15234                           postinc0	equ	0xFEE
 15235                           fsr0h	equ	0xFEA
 15236                           fsr0l	equ	0xFE9
 15237                           wreg	equ	0xFE8
 15238                           postinc1	equ	0xFE6
 15239                           postdec1	equ	0xFE5
 15240                           fsr1h	equ	0xFE2
 15241                           fsr1l	equ	0xFE1
 15242                           indf2	equ	0xFDF
 15243                           postinc2	equ	0xFDE
 15244                           postdec2	equ	0xFDD
 15245                           plusw2	equ	0xFDB
 15246                           fsr2h	equ	0xFDA
 15247                           fsr2l	equ	0xFD9
 15248                           status	equ	0xFD8
 15249                           
 15250 ;; *************** function _EUSART1_Transmit_ISR *****************
 15251 ;; Defined at:
 15252 ;;		line 148 in file "UART.c"
 15253 ;; Parameters:    Size  Location     Type
 15254 ;;		None
 15255 ;; Auto vars:     Size  Location     Type
 15256 ;;		None
 15257 ;; Return value:  Size  Location     Type
 15258 ;;		None               void
 15259 ;; Registers used:
 15260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15261 ;; Tracked objects:
 15262 ;;		On entry : 0/0
 15263 ;;		On exit  : 0/0
 15264 ;;		Unchanged: 0/0
 15265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15266 ;;      Params:         0       0       0       0       0       0       0
 15267 ;;      Locals:         0       0       0       0       0       0       0
 15268 ;;      Temps:          0       0       0       0       0       0       0
 15269 ;;      Totals:         0       0       0       0       0       0       0
 15270 ;;Total ram usage:        0 bytes
 15271 ;; Hardware stack levels used:    1
 15272 ;; Hardware stack levels required when called:    2
 15273 ;; This function calls:
 15274 ;;		i2_UART_buff_get
 15275 ;;		i2_UART_buff_size
 15276 ;; This function is called by:
 15277 ;;		_INTERRUPT_InterruptManager
 15278 ;; This function uses a non-reentrant model
 15279 ;;
 15280                           
 15281                           	psect	text66
 15282  004C10                     __ptext66:
 15283                           	opt stack 0
 15284  004C10                     _EUSART1_Transmit_ISR:
 15285                           	opt stack 21
 15286                           
 15287                           ;UART.c: 150: if (UART_buff_size(&output_buffer) > 0) {
 15288                           
 15289                           ;incstack = 0
 15290  004C10  0E00               	movlw	low _output_buffer
 15291  004C12  6E01               	movwf	i2UART_buff_size@_this,c
 15292  004C14  0E05               	movlw	high _output_buffer
 15293  004C16  6E02               	movwf	i2UART_buff_size@_this+1,c
 15294  004C18  EC2B  F027         	call	i2_UART_buff_size	;wreg free
 15295  004C1C  BE02               	btfsc	?i2_UART_buff_size+1,7,c
 15296  004C1E  D00D               	goto	i2l5070
 15297  004C20  5002               	movf	?i2_UART_buff_size+1,w,c
 15298  004C22  E103               	bnz	i2u528_40
 15299  004C24  0401               	decf	?i2_UART_buff_size,w,c
 15300  004C26  A0D8               	btfss	status,0,c
 15301  004C28  D008               	goto	i2l5070
 15302  004C2A                     i2u528_40:
 15303                           
 15304                           ;UART.c: 151: TXREG1 = UART_buff_get(&output_buffer);
 15305  004C2A  0E00               	movlw	low _output_buffer
 15306  004C2C  6E07               	movwf	i2UART_buff_get@_this,c
 15307  004C2E  0E05               	movlw	high _output_buffer
 15308  004C30  6E08               	movwf	i2UART_buff_get@_this+1,c
 15309  004C32  EC6B  F022         	call	i2_UART_buff_get	;wreg free
 15310  004C36  6EAD               	movwf	4013,c	;volatile
 15311                           
 15312                           ;UART.c: 152: } else {
 15313  004C38  0012               	return	
 15314  004C3A                     i2l5070:
 15315                           
 15316                           ;UART.c: 153: Transmit_stall = 1;
 15317  004C3A  0E01               	movlw	1
 15318  004C3C  6E45               	movwf	_Transmit_stall,c
 15319  004C3E  0012               	return	
 15320  004C40  0012               	return		;funcret
 15321  004C42                     __end_of_EUSART1_Transmit_ISR:
 15322                           	opt stack 0
 15323                           tosu	equ	0xFFF
 15324                           tosh	equ	0xFFE
 15325                           tosl	equ	0xFFD
 15326                           pclatu	equ	0xFFB
 15327                           pclath	equ	0xFFA
 15328                           tblptru	equ	0xFF8
 15329                           tblptrh	equ	0xFF7
 15330                           tblptrl	equ	0xFF6
 15331                           tablat	equ	0xFF5
 15332                           prodh	equ	0xFF4
 15333                           prodl	equ	0xFF3
 15334                           intcon	equ	0xFF2
 15335                           intcon2	equ	0xFF1
 15336                           postinc0	equ	0xFEE
 15337                           fsr0h	equ	0xFEA
 15338                           fsr0l	equ	0xFE9
 15339                           wreg	equ	0xFE8
 15340                           postinc1	equ	0xFE6
 15341                           postdec1	equ	0xFE5
 15342                           fsr1h	equ	0xFE2
 15343                           fsr1l	equ	0xFE1
 15344                           indf2	equ	0xFDF
 15345                           postinc2	equ	0xFDE
 15346                           postdec2	equ	0xFDD
 15347                           plusw2	equ	0xFDB
 15348                           fsr2h	equ	0xFDA
 15349                           fsr2l	equ	0xFD9
 15350                           status	equ	0xFD8
 15351                           
 15352 ;; *************** function i2_UART_buff_size *****************
 15353 ;; Defined at:
 15354 ;;		line 100 in file "UART.c"
 15355 ;; Parameters:    Size  Location     Type
 15356 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
 15357 ;;		 -> output_buffer(206), input_buffer(206), 
 15358 ;; Auto vars:     Size  Location     Type
 15359 ;;		None
 15360 ;; Return value:  Size  Location     Type
 15361 ;;                  2    0[COMRAM] int 
 15362 ;; Registers used:
 15363 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15364 ;; Tracked objects:
 15365 ;;		On entry : 0/0
 15366 ;;		On exit  : 0/0
 15367 ;;		Unchanged: 0/0
 15368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15369 ;;      Params:         2       0       0       0       0       0       0
 15370 ;;      Locals:         0       0       0       0       0       0       0
 15371 ;;      Temps:          0       0       0       0       0       0       0
 15372 ;;      Totals:         2       0       0       0       0       0       0
 15373 ;;Total ram usage:        2 bytes
 15374 ;; Hardware stack levels used:    1
 15375 ;; This function calls:
 15376 ;;		Nothing
 15377 ;; This function is called by:
 15378 ;;		_EUSART1_Transmit_ISR
 15379 ;; This function uses a non-reentrant model
 15380 ;;
 15381                           
 15382                           	psect	text67
 15383  004E56                     __ptext67:
 15384                           	opt stack 0
 15385  004E56                     i2_UART_buff_size:
 15386                           	opt stack 22
 15387                           
 15388                           ;UART.c: 101: return (_this->count);
 15389                           
 15390                           ;incstack = 0
 15391  004E56  EE20 F0CC          	lfsr	2,204
 15392  004E5A  5001               	movf	i2UART_buff_size@_this,w,c
 15393  004E5C  26D9               	addwf	fsr2l,f,c
 15394  004E5E  5002               	movf	i2UART_buff_size@_this+1,w,c
 15395  004E60  22DA               	addwfc	fsr2h,f,c
 15396  004E62  CFDE F001          	movff	postinc2,?i2_UART_buff_size
 15397  004E66  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
 15398  004E6A  0012               	return	
 15399  004E6C  0012               	return		;funcret
 15400  004E6E                     __end_ofi2_UART_buff_size:
 15401                           	opt stack 0
 15402                           tosu	equ	0xFFF
 15403                           tosh	equ	0xFFE
 15404                           tosl	equ	0xFFD
 15405                           pclatu	equ	0xFFB
 15406                           pclath	equ	0xFFA
 15407                           tblptru	equ	0xFF8
 15408                           tblptrh	equ	0xFF7
 15409                           tblptrl	equ	0xFF6
 15410                           tablat	equ	0xFF5
 15411                           prodh	equ	0xFF4
 15412                           prodl	equ	0xFF3
 15413                           intcon	equ	0xFF2
 15414                           intcon2	equ	0xFF1
 15415                           postinc0	equ	0xFEE
 15416                           fsr0h	equ	0xFEA
 15417                           fsr0l	equ	0xFE9
 15418                           wreg	equ	0xFE8
 15419                           postinc1	equ	0xFE6
 15420                           postdec1	equ	0xFE5
 15421                           fsr1h	equ	0xFE2
 15422                           fsr1l	equ	0xFE1
 15423                           indf2	equ	0xFDF
 15424                           postinc2	equ	0xFDE
 15425                           postdec2	equ	0xFDD
 15426                           plusw2	equ	0xFDB
 15427                           fsr2h	equ	0xFDA
 15428                           fsr2l	equ	0xFD9
 15429                           status	equ	0xFD8
 15430                           
 15431 ;; *************** function i2_UART_buff_get *****************
 15432 ;; Defined at:
 15433 ;;		line 79 in file "UART.c"
 15434 ;; Parameters:    Size  Location     Type
 15435 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 15436 ;;		 -> output_buffer(206), input_buffer(206), 
 15437 ;; Auto vars:     Size  Location     Type
 15438 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 15439 ;; Return value:  Size  Location     Type
 15440 ;;                  1    wreg      unsigned char 
 15441 ;; Registers used:
 15442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15443 ;; Tracked objects:
 15444 ;;		On entry : 0/0
 15445 ;;		On exit  : 0/0
 15446 ;;		Unchanged: 0/0
 15447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15448 ;;      Params:         2       0       0       0       0       0       0
 15449 ;;      Locals:         1       0       0       0       0       0       0
 15450 ;;      Temps:          2       0       0       0       0       0       0
 15451 ;;      Totals:         5       0       0       0       0       0       0
 15452 ;;Total ram usage:        5 bytes
 15453 ;; Hardware stack levels used:    1
 15454 ;; Hardware stack levels required when called:    1
 15455 ;; This function calls:
 15456 ;;		i2_UART_buff_modulo_inc
 15457 ;; This function is called by:
 15458 ;;		_EUSART1_Transmit_ISR
 15459 ;; This function uses a non-reentrant model
 15460 ;;
 15461                           
 15462                           	psect	text68
 15463  0044D6                     __ptext68:
 15464                           	opt stack 0
 15465  0044D6                     i2_UART_buff_get:
 15466                           	opt stack 21
 15467                           
 15468                           ;UART.c: 80: unsigned char c;
 15469                           ;UART.c: 81: if (_this->count > 0) {
 15470                           
 15471                           ;incstack = 0
 15472  0044D6  EE20 F0CC          	lfsr	2,204
 15473  0044DA  5007               	movf	i2UART_buff_get@_this,w,c
 15474  0044DC  26D9               	addwf	fsr2l,f,c
 15475  0044DE  5008               	movf	i2UART_buff_get@_this+1,w,c
 15476  0044E0  22DA               	addwfc	fsr2h,f,c
 15477  0044E2  0E01               	movlw	1
 15478  0044E4  BEDB               	btfsc	plusw2,7,c
 15479  0044E6  D03C               	goto	i2l4898
 15480  0044E8  0E01               	movlw	1
 15481  0044EA  50DB               	movf	plusw2,w,c
 15482  0044EC  E103               	bnz	i2u521_40
 15483  0044EE  04DE               	decf	postinc2,w,c
 15484  0044F0  A0D8               	btfss	status,0,c
 15485  0044F2  D036               	goto	i2l4898
 15486  0044F4                     i2u521_40:
 15487                           
 15488                           ;UART.c: 82: c = _this->buf[_this->tail];
 15489  0044F4  EE20 F0CA          	lfsr	2,202
 15490  0044F8  5007               	movf	i2UART_buff_get@_this,w,c
 15491  0044FA  26D9               	addwf	fsr2l,f,c
 15492  0044FC  5008               	movf	i2UART_buff_get@_this+1,w,c
 15493  0044FE  22DA               	addwfc	fsr2h,f,c
 15494  004500  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 15495  004504  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 15496  004508  5009               	movf	??i2_UART_buff_get,w,c
 15497  00450A  2407               	addwf	i2UART_buff_get@_this,w,c
 15498  00450C  6ED9               	movwf	fsr2l,c
 15499  00450E  500A               	movf	??i2_UART_buff_get+1,w,c
 15500  004510  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 15501  004512  6EDA               	movwf	fsr2h,c
 15502  004514  50DF               	movf	indf2,w,c
 15503  004516  6E0B               	movwf	i2UART_buff_get@c,c
 15504                           
 15505                           ;UART.c: 83: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 15506  004518  EE20 F0CA          	lfsr	2,202
 15507  00451C  5007               	movf	i2UART_buff_get@_this,w,c
 15508  00451E  26D9               	addwf	fsr2l,f,c
 15509  004520  5008               	movf	i2UART_buff_get@_this+1,w,c
 15510  004522  22DA               	addwfc	fsr2h,f,c
 15511  004524  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 15512  004528  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 15513  00452C  0E00               	movlw	0
 15514  00452E  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 15515  004530  0EC8               	movlw	200
 15516  004532  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 15517  004534  EC66  F026         	call	i2_UART_buff_modulo_inc	;wreg free
 15518  004538  EE20 F0CA          	lfsr	2,202
 15519  00453C  5007               	movf	i2UART_buff_get@_this,w,c
 15520  00453E  26D9               	addwf	fsr2l,f,c
 15521  004540  5008               	movf	i2UART_buff_get@_this+1,w,c
 15522  004542  22DA               	addwfc	fsr2h,f,c
 15523  004544  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 15524  004548  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 15525                           
 15526                           ;UART.c: 84: --_this->count;
 15527  00454C  EE20 F0CC          	lfsr	2,204
 15528  004550  5007               	movf	i2UART_buff_get@_this,w,c
 15529  004552  26D9               	addwf	fsr2l,f,c
 15530  004554  5008               	movf	i2UART_buff_get@_this+1,w,c
 15531  004556  22DA               	addwfc	fsr2h,f,c
 15532  004558  06DE               	decf	postinc2,f,c
 15533  00455A  0E00               	movlw	0
 15534  00455C  5ADD               	subwfb	postdec2,f,c
 15535                           
 15536                           ;UART.c: 85: } else {
 15537  00455E  D002               	goto	i2l563
 15538  004560                     i2l4898:
 15539                           
 15540                           ;UART.c: 86: c = 0;
 15541  004560  0E00               	movlw	0
 15542  004562  6E0B               	movwf	i2UART_buff_get@c,c
 15543  004564                     i2l563:
 15544                           
 15545                           ;UART.c: 87: }
 15546                           ;UART.c: 88: return (c);
 15547  004564  500B               	movf	i2UART_buff_get@c,w,c
 15548  004566  0012               	return	
 15549  004568  0012               	return		;funcret
 15550  00456A                     __end_ofi2_UART_buff_get:
 15551                           	opt stack 0
 15552                           tosu	equ	0xFFF
 15553                           tosh	equ	0xFFE
 15554                           tosl	equ	0xFFD
 15555                           pclatu	equ	0xFFB
 15556                           pclath	equ	0xFFA
 15557                           tblptru	equ	0xFF8
 15558                           tblptrh	equ	0xFF7
 15559                           tblptrl	equ	0xFF6
 15560                           tablat	equ	0xFF5
 15561                           prodh	equ	0xFF4
 15562                           prodl	equ	0xFF3
 15563                           intcon	equ	0xFF2
 15564                           intcon2	equ	0xFF1
 15565                           postinc0	equ	0xFEE
 15566                           fsr0h	equ	0xFEA
 15567                           fsr0l	equ	0xFE9
 15568                           wreg	equ	0xFE8
 15569                           postinc1	equ	0xFE6
 15570                           postdec1	equ	0xFE5
 15571                           fsr1h	equ	0xFE2
 15572                           fsr1l	equ	0xFE1
 15573                           indf2	equ	0xFDF
 15574                           postinc2	equ	0xFDE
 15575                           postdec2	equ	0xFDD
 15576                           plusw2	equ	0xFDB
 15577                           fsr2h	equ	0xFDA
 15578                           fsr2l	equ	0xFD9
 15579                           status	equ	0xFD8
 15580                           
 15581 ;; *************** function _EUSART1_Receive_ISR *****************
 15582 ;; Defined at:
 15583 ;;		line 136 in file "UART.c"
 15584 ;; Parameters:    Size  Location     Type
 15585 ;;		None
 15586 ;; Auto vars:     Size  Location     Type
 15587 ;;  data            1   11[COMRAM] unsigned char 
 15588 ;; Return value:  Size  Location     Type
 15589 ;;		None               void
 15590 ;; Registers used:
 15591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15592 ;; Tracked objects:
 15593 ;;		On entry : 0/0
 15594 ;;		On exit  : 0/0
 15595 ;;		Unchanged: 0/0
 15596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15597 ;;      Params:         0       0       0       0       0       0       0
 15598 ;;      Locals:         1       0       0       0       0       0       0
 15599 ;;      Temps:          0       0       0       0       0       0       0
 15600 ;;      Totals:         1       0       0       0       0       0       0
 15601 ;;Total ram usage:        1 bytes
 15602 ;; Hardware stack levels used:    1
 15603 ;; Hardware stack levels required when called:    2
 15604 ;; This function calls:
 15605 ;;		i2_UART_buff_put
 15606 ;; This function is called by:
 15607 ;;		_INTERRUPT_InterruptManager
 15608 ;; This function uses a non-reentrant model
 15609 ;;
 15610                           
 15611                           	psect	text69
 15612  004DA6                     __ptext69:
 15613                           	opt stack 0
 15614  004DA6                     _EUSART1_Receive_ISR:
 15615                           	opt stack 21
 15616                           
 15617                           ;UART.c: 137: if(1 == RC1STAbits.OERR)
 15618                           
 15619                           ;incstack = 0
 15620  004DA6  A2AB               	btfss	4011,1,c	;volatile
 15621  004DA8  D002               	goto	i2l594
 15622                           
 15623                           ;UART.c: 138: {
 15624                           ;UART.c: 141: RC1STAbits.CREN = 0;
 15625  004DAA  98AB               	bcf	4011,4,c	;volatile
 15626                           
 15627                           ;UART.c: 142: RC1STAbits.CREN = 1;
 15628  004DAC  88AB               	bsf	4011,4,c	;volatile
 15629  004DAE                     i2l594:
 15630                           
 15631                           ;UART.c: 143: }
 15632                           ;UART.c: 144: unsigned char data = RCREG1;
 15633  004DAE  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 15634                           
 15635                           ;UART.c: 145: UART_buff_put(&input_buffer, data);
 15636  004DB2  0E00               	movlw	low _input_buffer
 15637  004DB4  6E07               	movwf	i2UART_buff_put@_this,c
 15638  004DB6  0E04               	movlw	high _input_buffer
 15639  004DB8  6E08               	movwf	i2UART_buff_put@_this+1,c
 15640  004DBA  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 15641  004DBE  EC82  F01C         	call	i2_UART_buff_put	;wreg free
 15642  004DC2  0012               	return		;funcret
 15643  004DC4                     __end_of_EUSART1_Receive_ISR:
 15644                           	opt stack 0
 15645                           tosu	equ	0xFFF
 15646                           tosh	equ	0xFFE
 15647                           tosl	equ	0xFFD
 15648                           pclatu	equ	0xFFB
 15649                           pclath	equ	0xFFA
 15650                           tblptru	equ	0xFF8
 15651                           tblptrh	equ	0xFF7
 15652                           tblptrl	equ	0xFF6
 15653                           tablat	equ	0xFF5
 15654                           prodh	equ	0xFF4
 15655                           prodl	equ	0xFF3
 15656                           intcon	equ	0xFF2
 15657                           intcon2	equ	0xFF1
 15658                           postinc0	equ	0xFEE
 15659                           fsr0h	equ	0xFEA
 15660                           fsr0l	equ	0xFE9
 15661                           wreg	equ	0xFE8
 15662                           postinc1	equ	0xFE6
 15663                           postdec1	equ	0xFE5
 15664                           fsr1h	equ	0xFE2
 15665                           fsr1l	equ	0xFE1
 15666                           indf2	equ	0xFDF
 15667                           postinc2	equ	0xFDE
 15668                           postdec2	equ	0xFDD
 15669                           plusw2	equ	0xFDB
 15670                           fsr2h	equ	0xFDA
 15671                           fsr2l	equ	0xFD9
 15672                           status	equ	0xFD8
 15673                           
 15674 ;; *************** function i2_UART_buff_put *****************
 15675 ;; Defined at:
 15676 ;;		line 66 in file "UART.c"
 15677 ;; Parameters:    Size  Location     Type
 15678 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 15679 ;;		 -> output_buffer(206), input_buffer(206), 
 15680 ;;  c               1    8[COMRAM] const unsigned char 
 15681 ;; Auto vars:     Size  Location     Type
 15682 ;;		None
 15683 ;; Return value:  Size  Location     Type
 15684 ;;		None               void
 15685 ;; Registers used:
 15686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15687 ;; Tracked objects:
 15688 ;;		On entry : 0/0
 15689 ;;		On exit  : 0/0
 15690 ;;		Unchanged: 0/0
 15691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15692 ;;      Params:         3       0       0       0       0       0       0
 15693 ;;      Locals:         0       0       0       0       0       0       0
 15694 ;;      Temps:          2       0       0       0       0       0       0
 15695 ;;      Totals:         5       0       0       0       0       0       0
 15696 ;;Total ram usage:        5 bytes
 15697 ;; Hardware stack levels used:    1
 15698 ;; Hardware stack levels required when called:    1
 15699 ;; This function calls:
 15700 ;;		i2_UART_buff_modulo_inc
 15701 ;; This function is called by:
 15702 ;;		_EUSART1_Receive_ISR
 15703 ;; This function uses a non-reentrant model
 15704 ;;
 15705                           
 15706                           	psect	text70
 15707  003904                     __ptext70:
 15708                           	opt stack 0
 15709  003904                     i2_UART_buff_put:
 15710                           	opt stack 21
 15711                           
 15712                           ;UART.c: 67: if (_this->count < 200) {
 15713                           
 15714                           ;incstack = 0
 15715  003904  EE20 F0CC          	lfsr	2,204
 15716  003908  5007               	movf	i2UART_buff_put@_this,w,c
 15717  00390A  26D9               	addwf	fsr2l,f,c
 15718  00390C  5008               	movf	i2UART_buff_put@_this+1,w,c
 15719  00390E  22DA               	addwfc	fsr2h,f,c
 15720  003910  0E01               	movlw	1
 15721  003912  BEDB               	btfsc	plusw2,7,c
 15722  003914  D007               	goto	i2l4878
 15723  003916  0E01               	movlw	1
 15724  003918  50DB               	movf	plusw2,w,c
 15725  00391A  E13A               	bnz	i2l4884
 15726  00391C  0EC8               	movlw	200
 15727  00391E  5CDE               	subwf	postinc2,w,c
 15728  003920  B0D8               	btfsc	status,0,c
 15729  003922  D036               	goto	i2l4884
 15730  003924                     i2l4878:
 15731                           
 15732                           ;UART.c: 68: _this->buf[_this->head] = c;
 15733  003924  EE20 F0C8          	lfsr	2,200
 15734  003928  5007               	movf	i2UART_buff_put@_this,w,c
 15735  00392A  26D9               	addwf	fsr2l,f,c
 15736  00392C  5008               	movf	i2UART_buff_put@_this+1,w,c
 15737  00392E  22DA               	addwfc	fsr2h,f,c
 15738  003930  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 15739  003934  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 15740  003938  500A               	movf	??i2_UART_buff_put,w,c
 15741  00393A  2407               	addwf	i2UART_buff_put@_this,w,c
 15742  00393C  6ED9               	movwf	fsr2l,c
 15743  00393E  500B               	movf	??i2_UART_buff_put+1,w,c
 15744  003940  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 15745  003942  6EDA               	movwf	fsr2h,c
 15746  003944  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 15747                           
 15748                           ;UART.c: 69: _this->head = UART_buff_modulo_inc(_this->head, 200);
 15749  003948  EE20 F0C8          	lfsr	2,200
 15750  00394C  5007               	movf	i2UART_buff_put@_this,w,c
 15751  00394E  26D9               	addwf	fsr2l,f,c
 15752  003950  5008               	movf	i2UART_buff_put@_this+1,w,c
 15753  003952  22DA               	addwfc	fsr2h,f,c
 15754  003954  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 15755  003958  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 15756  00395C  0E00               	movlw	0
 15757  00395E  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 15758  003960  0EC8               	movlw	200
 15759  003962  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 15760  003964  EC66  F026         	call	i2_UART_buff_modulo_inc	;wreg free
 15761  003968  EE20 F0C8          	lfsr	2,200
 15762  00396C  5007               	movf	i2UART_buff_put@_this,w,c
 15763  00396E  26D9               	addwf	fsr2l,f,c
 15764  003970  5008               	movf	i2UART_buff_put@_this+1,w,c
 15765  003972  22DA               	addwfc	fsr2h,f,c
 15766  003974  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 15767  003978  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 15768                           
 15769                           ;UART.c: 70: ++_this->count;
 15770  00397C  EE20 F0CC          	lfsr	2,204
 15771  003980  5007               	movf	i2UART_buff_put@_this,w,c
 15772  003982  26D9               	addwf	fsr2l,f,c
 15773  003984  5008               	movf	i2UART_buff_put@_this+1,w,c
 15774  003986  22DA               	addwfc	fsr2h,f,c
 15775  003988  2ADE               	incf	postinc2,f,c
 15776  00398A  0E00               	movlw	0
 15777  00398C  22DD               	addwfc	postdec2,f,c
 15778                           
 15779                           ;UART.c: 71: } else {
 15780  00398E  0012               	return	
 15781  003990                     i2l4884:
 15782                           
 15783                           ;UART.c: 72: _this->buf[_this->head] = c;
 15784  003990  EE20 F0C8          	lfsr	2,200
 15785  003994  5007               	movf	i2UART_buff_put@_this,w,c
 15786  003996  26D9               	addwf	fsr2l,f,c
 15787  003998  5008               	movf	i2UART_buff_put@_this+1,w,c
 15788  00399A  22DA               	addwfc	fsr2h,f,c
 15789  00399C  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 15790  0039A0  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 15791  0039A4  500A               	movf	??i2_UART_buff_put,w,c
 15792  0039A6  2407               	addwf	i2UART_buff_put@_this,w,c
 15793  0039A8  6ED9               	movwf	fsr2l,c
 15794  0039AA  500B               	movf	??i2_UART_buff_put+1,w,c
 15795  0039AC  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 15796  0039AE  6EDA               	movwf	fsr2h,c
 15797  0039B0  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 15798                           
 15799                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
 15800  0039B4  EE20 F0C8          	lfsr	2,200
 15801  0039B8  5007               	movf	i2UART_buff_put@_this,w,c
 15802  0039BA  26D9               	addwf	fsr2l,f,c
 15803  0039BC  5008               	movf	i2UART_buff_put@_this+1,w,c
 15804  0039BE  22DA               	addwfc	fsr2h,f,c
 15805  0039C0  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 15806  0039C4  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 15807  0039C8  0E00               	movlw	0
 15808  0039CA  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 15809  0039CC  0EC8               	movlw	200
 15810  0039CE  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 15811  0039D0  EC66  F026         	call	i2_UART_buff_modulo_inc	;wreg free
 15812  0039D4  EE20 F0C8          	lfsr	2,200
 15813  0039D8  5007               	movf	i2UART_buff_put@_this,w,c
 15814  0039DA  26D9               	addwf	fsr2l,f,c
 15815  0039DC  5008               	movf	i2UART_buff_put@_this+1,w,c
 15816  0039DE  22DA               	addwfc	fsr2h,f,c
 15817  0039E0  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 15818  0039E4  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 15819                           
 15820                           ;UART.c: 74: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 15821  0039E8  EE20 F0CA          	lfsr	2,202
 15822  0039EC  5007               	movf	i2UART_buff_put@_this,w,c
 15823  0039EE  26D9               	addwf	fsr2l,f,c
 15824  0039F0  5008               	movf	i2UART_buff_put@_this+1,w,c
 15825  0039F2  22DA               	addwfc	fsr2h,f,c
 15826  0039F4  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 15827  0039F8  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 15828  0039FC  0E00               	movlw	0
 15829  0039FE  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 15830  003A00  0EC8               	movlw	200
 15831  003A02  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 15832  003A04  EC66  F026         	call	i2_UART_buff_modulo_inc	;wreg free
 15833  003A08  EE20 F0CA          	lfsr	2,202
 15834  003A0C  5007               	movf	i2UART_buff_put@_this,w,c
 15835  003A0E  26D9               	addwf	fsr2l,f,c
 15836  003A10  5008               	movf	i2UART_buff_put@_this+1,w,c
 15837  003A12  22DA               	addwfc	fsr2h,f,c
 15838  003A14  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 15839  003A18  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 15840  003A1C  0012               	return	
 15841  003A1E  0012               	return		;funcret
 15842  003A20                     __end_ofi2_UART_buff_put:
 15843                           	opt stack 0
 15844                           tosu	equ	0xFFF
 15845                           tosh	equ	0xFFE
 15846                           tosl	equ	0xFFD
 15847                           pclatu	equ	0xFFB
 15848                           pclath	equ	0xFFA
 15849                           tblptru	equ	0xFF8
 15850                           tblptrh	equ	0xFF7
 15851                           tblptrl	equ	0xFF6
 15852                           tablat	equ	0xFF5
 15853                           prodh	equ	0xFF4
 15854                           prodl	equ	0xFF3
 15855                           intcon	equ	0xFF2
 15856                           intcon2	equ	0xFF1
 15857                           postinc0	equ	0xFEE
 15858                           fsr0h	equ	0xFEA
 15859                           fsr0l	equ	0xFE9
 15860                           wreg	equ	0xFE8
 15861                           postinc1	equ	0xFE6
 15862                           postdec1	equ	0xFE5
 15863                           fsr1h	equ	0xFE2
 15864                           fsr1l	equ	0xFE1
 15865                           indf2	equ	0xFDF
 15866                           postinc2	equ	0xFDE
 15867                           postdec2	equ	0xFDD
 15868                           plusw2	equ	0xFDB
 15869                           fsr2h	equ	0xFDA
 15870                           fsr2l	equ	0xFD9
 15871                           status	equ	0xFD8
 15872                           
 15873 ;; *************** function i2_UART_buff_modulo_inc *****************
 15874 ;; Defined at:
 15875 ;;		line 104 in file "UART.c"
 15876 ;; Parameters:    Size  Location     Type
 15877 ;;  value           2    0[COMRAM] const unsigned int 
 15878 ;;  modulus         2    2[COMRAM] const unsigned int 
 15879 ;; Auto vars:     Size  Location     Type
 15880 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 15881 ;; Return value:  Size  Location     Type
 15882 ;;                  2    0[COMRAM] unsigned int 
 15883 ;; Registers used:
 15884 ;;		wreg, status,2, status,0
 15885 ;; Tracked objects:
 15886 ;;		On entry : 0/0
 15887 ;;		On exit  : 0/0
 15888 ;;		Unchanged: 0/0
 15889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15890 ;;      Params:         4       0       0       0       0       0       0
 15891 ;;      Locals:         2       0       0       0       0       0       0
 15892 ;;      Temps:          0       0       0       0       0       0       0
 15893 ;;      Totals:         6       0       0       0       0       0       0
 15894 ;;Total ram usage:        6 bytes
 15895 ;; Hardware stack levels used:    1
 15896 ;; This function calls:
 15897 ;;		Nothing
 15898 ;; This function is called by:
 15899 ;;		i2_UART_buff_put
 15900 ;;		i2_UART_buff_get
 15901 ;; This function uses a non-reentrant model
 15902 ;;
 15903                           
 15904                           	psect	text71
 15905  004CCC                     __ptext71:
 15906                           	opt stack 0
 15907  004CCC                     i2_UART_buff_modulo_inc:
 15908                           	opt stack 21
 15909                           
 15910                           ;UART.c: 105: unsigned int my_value = value + 1;
 15911                           
 15912                           ;incstack = 0
 15913  004CCC  0E01               	movlw	1
 15914  004CCE  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 15915  004CD0  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 15916  004CD2  0E00               	movlw	0
 15917  004CD4  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 15918  004CD6  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 15919                           
 15920                           ;UART.c: 106: if (my_value >= modulus) {
 15921  004CD8  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 15922  004CDA  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 15923  004CDC  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 15924  004CDE  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 15925  004CE0  A0D8               	btfss	status,0,c
 15926  004CE2  D005               	goto	i2l4164
 15927                           
 15928                           ;UART.c: 107: my_value = 0;
 15929  004CE4  0E00               	movlw	0
 15930  004CE6  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 15931  004CE8  0E00               	movlw	0
 15932  004CEA  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 15933  004CEC  D000               	goto	i2l4164
 15934  004CEE                     i2l4164:
 15935                           
 15936                           ;UART.c: 108: }
 15937                           ;UART.c: 109: return (my_value);
 15938  004CEE  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 15939  004CF2  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 15940  004CF6  0012               	return	
 15941  004CF8  0012               	return		;funcret
 15942  004CFA                     __end_ofi2_UART_buff_modulo_inc:
 15943                           	opt stack 0
 15944                           tosu	equ	0xFFF
 15945                           tosh	equ	0xFFE
 15946                           tosl	equ	0xFFD
 15947                           pclatu	equ	0xFFB
 15948                           pclath	equ	0xFFA
 15949                           tblptru	equ	0xFF8
 15950                           tblptrh	equ	0xFF7
 15951                           tblptrl	equ	0xFF6
 15952                           tablat	equ	0xFF5
 15953                           prodh	equ	0xFF4
 15954                           prodl	equ	0xFF3
 15955                           intcon	equ	0xFF2
 15956                           intcon2	equ	0xFF1
 15957                           postinc0	equ	0xFEE
 15958                           fsr0h	equ	0xFEA
 15959                           fsr0l	equ	0xFE9
 15960                           wreg	equ	0xFE8
 15961                           postinc1	equ	0xFE6
 15962                           postdec1	equ	0xFE5
 15963                           fsr1h	equ	0xFE2
 15964                           fsr1l	equ	0xFE1
 15965                           indf2	equ	0xFDF
 15966                           postinc2	equ	0xFDE
 15967                           postdec2	equ	0xFDD
 15968                           plusw2	equ	0xFDB
 15969                           fsr2h	equ	0xFDA
 15970                           fsr2l	equ	0xFD9
 15971                           status	equ	0xFD8
 15972                           
 15973 ;; *************** function _ADC_ISR *****************
 15974 ;; Defined at:
 15975 ;;		line 82 in file "mcc_generated_files/adc.c"
 15976 ;; Parameters:    Size  Location     Type
 15977 ;;		None
 15978 ;; Auto vars:     Size  Location     Type
 15979 ;;  ADC_Result      2   10[COMRAM] int 
 15980 ;; Return value:  Size  Location     Type
 15981 ;;		None               void
 15982 ;; Registers used:
 15983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15984 ;; Tracked objects:
 15985 ;;		On entry : 0/0
 15986 ;;		On exit  : 0/0
 15987 ;;		Unchanged: 0/0
 15988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15989 ;;      Params:         0       0       0       0       0       0       0
 15990 ;;      Locals:         2       0       0       0       0       0       0
 15991 ;;      Temps:          6       0       0       0       0       0       0
 15992 ;;      Totals:         8       0       0       0       0       0       0
 15993 ;;Total ram usage:        8 bytes
 15994 ;; Hardware stack levels used:    1
 15995 ;; Hardware stack levels required when called:    1
 15996 ;; This function calls:
 15997 ;;		_ADC_GetConversionResult
 15998 ;;		_ADC_StartConversion
 15999 ;;		_Set_4051
 16000 ;; This function is called by:
 16001 ;;		_INTERRUPT_InterruptManager
 16002 ;; This function uses a non-reentrant model
 16003 ;;
 16004                           
 16005                           	psect	text72
 16006  001A14                     __ptext72:
 16007                           	opt stack 0
 16008  001A14                     _ADC_ISR:
 16009                           	opt stack 22
 16010                           
 16011                           ;adc.c: 85: PIR1bits.ADIF = 0;
 16012                           
 16013                           ;incstack = 0
 16014  001A14  9C9E               	bcf	3998,6,c	;volatile
 16015                           
 16016                           ;adc.c: 86: int ADC_Result = 0;
 16017  001A16  0E00               	movlw	0
 16018  001A18  6E0C               	movwf	ADC_ISR@ADC_Result+1,c
 16019  001A1A  0E00               	movlw	0
 16020  001A1C  6E0B               	movwf	ADC_ISR@ADC_Result,c
 16021                           
 16022                           ;adc.c: 87: if (Temp_Aquire){
 16023  001A1E  503A               	movf	_Temp_Aquire,w,c
 16024  001A20  B4D8               	btfsc	status,2,c
 16025  001A22  D123               	goto	i2l5000
 16026                           
 16027                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
 16028  001A24  EC37  F027         	call	_ADC_GetConversionResult	;wreg free
 16029  001A28  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 16030  001A2C  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 16031                           
 16032                           ;adc.c: 90: switch ( ADC_Buffer_Point )
 16033  001A30  D0EE               	goto	i2l4996
 16034  001A32                     i2l4932:
 16035                           
 16036                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 16037  001A32  90D8               	bcf	status,0,c
 16038  001A34  342B               	rlcf	_ADC_Buffer_Point,w,c
 16039  001A36  6ED9               	movwf	fsr2l,c
 16040  001A38  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16041  001A3A  6EDA               	movwf	fsr2h,c
 16042  001A3C  0EEA               	movlw	low _Temp_Adc
 16043  001A3E  26D9               	addwf	fsr2l,f,c
 16044  001A40  0E00               	movlw	high _Temp_Adc
 16045  001A42  22DA               	addwfc	fsr2h,f,c
 16046  001A44  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 16047  001A48  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 16048                           
 16049                           ;adc.c: 94: Set_4051(0);
 16050  001A4C  0E00               	movlw	0
 16051  001A4E  6E02               	movwf	Set_4051@Channel+1,c
 16052  001A50  0E00               	movlw	0
 16053  001A52  6E01               	movwf	Set_4051@Channel,c
 16054  001A54  ECB7  F025         	call	_Set_4051	;wreg free
 16055                           
 16056                           ;adc.c: 95: ADC_StartConversion(Temp1);
 16057  001A58  0E0E               	movlw	14
 16058  001A5A  ECE2  F026         	call	_ADC_StartConversion
 16059                           
 16060                           ;adc.c: 96: break;
 16061  001A5E  D102               	goto	i2l4998
 16062  001A60                     i2l4938:
 16063                           
 16064                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 16065  001A60  90D8               	bcf	status,0,c
 16066  001A62  342B               	rlcf	_ADC_Buffer_Point,w,c
 16067  001A64  6ED9               	movwf	fsr2l,c
 16068  001A66  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16069  001A68  6EDA               	movwf	fsr2h,c
 16070  001A6A  0EEA               	movlw	low _Temp_Adc
 16071  001A6C  26D9               	addwf	fsr2l,f,c
 16072  001A6E  0E00               	movlw	high _Temp_Adc
 16073  001A70  22DA               	addwfc	fsr2h,f,c
 16074  001A72  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 16075  001A76  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 16076                           
 16077                           ;adc.c: 99: Set_4051(1);
 16078  001A7A  0E00               	movlw	0
 16079  001A7C  6E02               	movwf	Set_4051@Channel+1,c
 16080  001A7E  0E01               	movlw	1
 16081  001A80  6E01               	movwf	Set_4051@Channel,c
 16082  001A82  ECB7  F025         	call	_Set_4051	;wreg free
 16083                           
 16084                           ;adc.c: 100: ADC_StartConversion(Temp1);
 16085  001A86  0E0E               	movlw	14
 16086  001A88  ECE2  F026         	call	_ADC_StartConversion
 16087                           
 16088                           ;adc.c: 101: break;
 16089  001A8C  D0EB               	goto	i2l4998
 16090  001A8E                     i2l4944:
 16091                           
 16092                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 16093  001A8E  90D8               	bcf	status,0,c
 16094  001A90  342B               	rlcf	_ADC_Buffer_Point,w,c
 16095  001A92  6ED9               	movwf	fsr2l,c
 16096  001A94  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16097  001A96  6EDA               	movwf	fsr2h,c
 16098  001A98  0EEA               	movlw	low _Temp_Adc
 16099  001A9A  26D9               	addwf	fsr2l,f,c
 16100  001A9C  0E00               	movlw	high _Temp_Adc
 16101  001A9E  22DA               	addwfc	fsr2h,f,c
 16102  001AA0  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 16103  001AA4  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 16104                           
 16105                           ;adc.c: 104: Set_4051(2);
 16106  001AA8  0E00               	movlw	0
 16107  001AAA  6E02               	movwf	Set_4051@Channel+1,c
 16108  001AAC  0E02               	movlw	2
 16109  001AAE  6E01               	movwf	Set_4051@Channel,c
 16110  001AB0  ECB7  F025         	call	_Set_4051	;wreg free
 16111                           
 16112                           ;adc.c: 105: ADC_StartConversion(Temp1);
 16113  001AB4  0E0E               	movlw	14
 16114  001AB6  ECE2  F026         	call	_ADC_StartConversion
 16115                           
 16116                           ;adc.c: 106: break;
 16117  001ABA  D0D4               	goto	i2l4998
 16118  001ABC                     i2l4950:
 16119                           
 16120                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 16121  001ABC  90D8               	bcf	status,0,c
 16122  001ABE  342B               	rlcf	_ADC_Buffer_Point,w,c
 16123  001AC0  6ED9               	movwf	fsr2l,c
 16124  001AC2  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16125  001AC4  6EDA               	movwf	fsr2h,c
 16126  001AC6  0EEA               	movlw	low _Temp_Adc
 16127  001AC8  26D9               	addwf	fsr2l,f,c
 16128  001ACA  0E00               	movlw	high _Temp_Adc
 16129  001ACC  22DA               	addwfc	fsr2h,f,c
 16130  001ACE  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 16131  001AD2  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 16132                           
 16133                           ;adc.c: 109: Set_4051(3);
 16134  001AD6  0E00               	movlw	0
 16135  001AD8  6E02               	movwf	Set_4051@Channel+1,c
 16136  001ADA  0E03               	movlw	3
 16137  001ADC  6E01               	movwf	Set_4051@Channel,c
 16138  001ADE  ECB7  F025         	call	_Set_4051	;wreg free
 16139                           
 16140                           ;adc.c: 110: ADC_StartConversion(Temp1);
 16141  001AE2  0E0E               	movlw	14
 16142  001AE4  ECE2  F026         	call	_ADC_StartConversion
 16143                           
 16144                           ;adc.c: 111: break;
 16145  001AE8  D0BD               	goto	i2l4998
 16146  001AEA                     i2l4956:
 16147                           
 16148                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 16149  001AEA  90D8               	bcf	status,0,c
 16150  001AEC  342B               	rlcf	_ADC_Buffer_Point,w,c
 16151  001AEE  6ED9               	movwf	fsr2l,c
 16152  001AF0  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16153  001AF2  6EDA               	movwf	fsr2h,c
 16154  001AF4  0EEA               	movlw	low _Temp_Adc
 16155  001AF6  26D9               	addwf	fsr2l,f,c
 16156  001AF8  0E00               	movlw	high _Temp_Adc
 16157  001AFA  22DA               	addwfc	fsr2h,f,c
 16158  001AFC  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 16159  001B00  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 16160                           
 16161                           ;adc.c: 114: Set_4051(4);
 16162  001B04  0E00               	movlw	0
 16163  001B06  6E02               	movwf	Set_4051@Channel+1,c
 16164  001B08  0E04               	movlw	4
 16165  001B0A  6E01               	movwf	Set_4051@Channel,c
 16166  001B0C  ECB7  F025         	call	_Set_4051	;wreg free
 16167                           
 16168                           ;adc.c: 115: ADC_StartConversion(Temp1);
 16169  001B10  0E0E               	movlw	14
 16170  001B12  ECE2  F026         	call	_ADC_StartConversion
 16171                           
 16172                           ;adc.c: 116: break;
 16173  001B16  D0A6               	goto	i2l4998
 16174  001B18                     i2l4962:
 16175                           
 16176                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 16177  001B18  90D8               	bcf	status,0,c
 16178  001B1A  342B               	rlcf	_ADC_Buffer_Point,w,c
 16179  001B1C  6ED9               	movwf	fsr2l,c
 16180  001B1E  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16181  001B20  6EDA               	movwf	fsr2h,c
 16182  001B22  0EEA               	movlw	low _Temp_Adc
 16183  001B24  26D9               	addwf	fsr2l,f,c
 16184  001B26  0E00               	movlw	high _Temp_Adc
 16185  001B28  22DA               	addwfc	fsr2h,f,c
 16186  001B2A  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 16187  001B2E  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 16188                           
 16189                           ;adc.c: 119: Set_4051(5);
 16190  001B32  0E00               	movlw	0
 16191  001B34  6E02               	movwf	Set_4051@Channel+1,c
 16192  001B36  0E05               	movlw	5
 16193  001B38  6E01               	movwf	Set_4051@Channel,c
 16194  001B3A  ECB7  F025         	call	_Set_4051	;wreg free
 16195                           
 16196                           ;adc.c: 120: ADC_StartConversion(Temp1);
 16197  001B3E  0E0E               	movlw	14
 16198  001B40  ECE2  F026         	call	_ADC_StartConversion
 16199                           
 16200                           ;adc.c: 121: break;
 16201  001B44  D08F               	goto	i2l4998
 16202  001B46                     i2l4968:
 16203                           
 16204                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 16205  001B46  90D8               	bcf	status,0,c
 16206  001B48  342B               	rlcf	_ADC_Buffer_Point,w,c
 16207  001B4A  6ED9               	movwf	fsr2l,c
 16208  001B4C  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16209  001B4E  6EDA               	movwf	fsr2h,c
 16210  001B50  0EEA               	movlw	low _Temp_Adc
 16211  001B52  26D9               	addwf	fsr2l,f,c
 16212  001B54  0E00               	movlw	high _Temp_Adc
 16213  001B56  22DA               	addwfc	fsr2h,f,c
 16214  001B58  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 16215  001B5C  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 16216                           
 16217                           ;adc.c: 124: Set_4051(6);
 16218  001B60  0E00               	movlw	0
 16219  001B62  6E02               	movwf	Set_4051@Channel+1,c
 16220  001B64  0E06               	movlw	6
 16221  001B66  6E01               	movwf	Set_4051@Channel,c
 16222  001B68  ECB7  F025         	call	_Set_4051	;wreg free
 16223                           
 16224                           ;adc.c: 125: ADC_StartConversion(Temp1);
 16225  001B6C  0E0E               	movlw	14
 16226  001B6E  ECE2  F026         	call	_ADC_StartConversion
 16227                           
 16228                           ;adc.c: 126: break;
 16229  001B72  D078               	goto	i2l4998
 16230  001B74                     i2l4974:
 16231                           
 16232                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 16233  001B74  90D8               	bcf	status,0,c
 16234  001B76  342B               	rlcf	_ADC_Buffer_Point,w,c
 16235  001B78  6ED9               	movwf	fsr2l,c
 16236  001B7A  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16237  001B7C  6EDA               	movwf	fsr2h,c
 16238  001B7E  0EEA               	movlw	low _Temp_Adc
 16239  001B80  26D9               	addwf	fsr2l,f,c
 16240  001B82  0E00               	movlw	high _Temp_Adc
 16241  001B84  22DA               	addwfc	fsr2h,f,c
 16242  001B86  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 16243  001B8A  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 16244                           
 16245                           ;adc.c: 129: Set_4051(7);
 16246  001B8E  0E00               	movlw	0
 16247  001B90  6E02               	movwf	Set_4051@Channel+1,c
 16248  001B92  0E07               	movlw	7
 16249  001B94  6E01               	movwf	Set_4051@Channel,c
 16250  001B96  ECB7  F025         	call	_Set_4051	;wreg free
 16251                           
 16252                           ;adc.c: 130: ADC_StartConversion(Temp1);
 16253  001B9A  0E0E               	movlw	14
 16254  001B9C  ECE2  F026         	call	_ADC_StartConversion
 16255                           
 16256                           ;adc.c: 131: break;
 16257  001BA0  D061               	goto	i2l4998
 16258  001BA2                     i2l4980:
 16259                           
 16260                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 16261  001BA2  90D8               	bcf	status,0,c
 16262  001BA4  342B               	rlcf	_ADC_Buffer_Point,w,c
 16263  001BA6  6ED9               	movwf	fsr2l,c
 16264  001BA8  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16265  001BAA  6EDA               	movwf	fsr2h,c
 16266  001BAC  0EEA               	movlw	low _Temp_Adc
 16267  001BAE  26D9               	addwf	fsr2l,f,c
 16268  001BB0  0E00               	movlw	high _Temp_Adc
 16269  001BB2  22DA               	addwfc	fsr2h,f,c
 16270  001BB4  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 16271  001BB8  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 16272                           
 16273                           ;adc.c: 134: Set_4051(0);
 16274  001BBC  0E00               	movlw	0
 16275  001BBE  6E02               	movwf	Set_4051@Channel+1,c
 16276  001BC0  0E00               	movlw	0
 16277  001BC2  6E01               	movwf	Set_4051@Channel,c
 16278  001BC4  ECB7  F025         	call	_Set_4051	;wreg free
 16279                           
 16280                           ;adc.c: 135: ADC_StartConversion(Temp2);
 16281  001BC8  0E14               	movlw	20
 16282  001BCA  ECE2  F026         	call	_ADC_StartConversion
 16283                           
 16284                           ;adc.c: 136: break;
 16285  001BCE  D04A               	goto	i2l4998
 16286  001BD0                     i2l4986:
 16287                           
 16288                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 16289  001BD0  90D8               	bcf	status,0,c
 16290  001BD2  342B               	rlcf	_ADC_Buffer_Point,w,c
 16291  001BD4  6ED9               	movwf	fsr2l,c
 16292  001BD6  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16293  001BD8  6EDA               	movwf	fsr2h,c
 16294  001BDA  0EEA               	movlw	low _Temp_Adc
 16295  001BDC  26D9               	addwf	fsr2l,f,c
 16296  001BDE  0E00               	movlw	high _Temp_Adc
 16297  001BE0  22DA               	addwfc	fsr2h,f,c
 16298  001BE2  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 16299  001BE6  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 16300                           
 16301                           ;adc.c: 139: Set_4051(1);
 16302  001BEA  0E00               	movlw	0
 16303  001BEC  6E02               	movwf	Set_4051@Channel+1,c
 16304  001BEE  0E01               	movlw	1
 16305  001BF0  6E01               	movwf	Set_4051@Channel,c
 16306  001BF2  ECB7  F025         	call	_Set_4051	;wreg free
 16307                           
 16308                           ;adc.c: 140: ADC_StartConversion(Temp2);
 16309  001BF6  0E14               	movlw	20
 16310  001BF8  ECE2  F026         	call	_ADC_StartConversion
 16311                           
 16312                           ;adc.c: 141: break;
 16313  001BFC  D033               	goto	i2l4998
 16314  001BFE                     i2l4992:
 16315                           
 16316                           ;adc.c: 143: Temp_Aquire = 0;
 16317  001BFE  0E00               	movlw	0
 16318  001C00  6E3A               	movwf	_Temp_Aquire,c
 16319                           
 16320                           ;adc.c: 144: Temp_Done = 1;
 16321  001C02  0E00               	movlw	0
 16322  001C04  0100               	movlb	0	; () banked
 16323  001C06  6FD9               	movwf	(_Temp_Done+1)& (0+255),b
 16324  001C08  0E01               	movlw	1
 16325  001C0A  6FD8               	movwf	_Temp_Done& (0+255),b
 16326                           
 16327                           ; BSR set to: 0
 16328                           ;adc.c: 146: }
 16329                           
 16330                           ;adc.c: 145: break;
 16331  001C0C  D02B               	goto	i2l4998
 16332  001C0E                     i2l4996:
 16333  001C0E  C02B  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 16334  001C12  C02C  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 16335                           
 16336                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16337                           ; Switch size 1, requested type "space"
 16338                           ; Number of cases is 1, Range of values is 0 to 0
 16339                           ; switch strategies available:
 16340                           ; Name         Instructions Cycles
 16341                           ; simple_byte            4     3 (average)
 16342                           ;	Chosen strategy is simple_byte
 16343  001C16  5006               	movf	??_ADC_ISR+1,w,c
 16344  001C18  0A00               	xorlw	0	; case 0
 16345  001C1A  A4D8               	btfss	status,2,c
 16346  001C1C  D023               	goto	i2l4998
 16347                           
 16348                           ; Switch size 1, requested type "space"
 16349                           ; Number of cases is 11, Range of values is 0 to 10
 16350                           ; switch strategies available:
 16351                           ; Name         Instructions Cycles
 16352                           ; simple_byte           34    18 (average)
 16353                           ;	Chosen strategy is simple_byte
 16354  001C1E  5005               	movf	??_ADC_ISR,w,c
 16355  001C20  0A00               	xorlw	0	; case 0
 16356  001C22  B4D8               	btfsc	status,2,c
 16357  001C24  D706               	goto	i2l4932
 16358  001C26  0A01               	xorlw	1	; case 1
 16359  001C28  B4D8               	btfsc	status,2,c
 16360  001C2A  D71A               	goto	i2l4938
 16361  001C2C  0A03               	xorlw	3	; case 2
 16362  001C2E  B4D8               	btfsc	status,2,c
 16363  001C30  D72E               	goto	i2l4944
 16364  001C32  0A01               	xorlw	1	; case 3
 16365  001C34  B4D8               	btfsc	status,2,c
 16366  001C36  D742               	goto	i2l4950
 16367  001C38  0A07               	xorlw	7	; case 4
 16368  001C3A  B4D8               	btfsc	status,2,c
 16369  001C3C  D756               	goto	i2l4956
 16370  001C3E  0A01               	xorlw	1	; case 5
 16371  001C40  B4D8               	btfsc	status,2,c
 16372  001C42  D76A               	goto	i2l4962
 16373  001C44  0A03               	xorlw	3	; case 6
 16374  001C46  B4D8               	btfsc	status,2,c
 16375  001C48  D77E               	goto	i2l4968
 16376  001C4A  0A01               	xorlw	1	; case 7
 16377  001C4C  B4D8               	btfsc	status,2,c
 16378  001C4E  D792               	goto	i2l4974
 16379  001C50  0A0F               	xorlw	15	; case 8
 16380  001C52  B4D8               	btfsc	status,2,c
 16381  001C54  D7A6               	goto	i2l4980
 16382  001C56  0A01               	xorlw	1	; case 9
 16383  001C58  B4D8               	btfsc	status,2,c
 16384  001C5A  D7BA               	goto	i2l4986
 16385  001C5C  0A03               	xorlw	3	; case 10
 16386  001C5E  B4D8               	btfsc	status,2,c
 16387  001C60  D7CE               	goto	i2l4992
 16388  001C62  D000               	goto	i2l4998
 16389  001C64                     i2l4998:
 16390                           
 16391                           ;adc.c: 147: ADC_Buffer_Point++;
 16392  001C64  4A2B               	infsnz	_ADC_Buffer_Point,f,c
 16393  001C66  2A2C               	incf	_ADC_Buffer_Point+1,f,c
 16394  001C68  D000               	goto	i2l5000
 16395  001C6A                     i2l5000:
 16396                           
 16397                           ;adc.c: 148: }
 16398                           ;adc.c: 149: if (Volt_Aquire){
 16399  001C6A  503B               	movf	_Volt_Aquire,w,c
 16400  001C6C  B4D8               	btfsc	status,2,c
 16401  001C6E  0012               	return	
 16402                           
 16403                           ;adc.c: 151: ADC_Result = ADC_GetConversionResult();
 16404  001C70  EC37  F027         	call	_ADC_GetConversionResult	;wreg free
 16405  001C74  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 16406  001C78  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 16407                           
 16408                           ;adc.c: 152: switch ( ADC_Buffer_Point )
 16409  001C7C  D17A               	goto	i2l5048
 16410  001C7E                     i2l5004:
 16411                           
 16412                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 16413  001C7E  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 16414  001C82  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 16415  001C86  0E00               	movlw	0
 16416  001C88  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 16417  001C8A  0EFF               	movlw	255
 16418  001C8C  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 16419  001C8E  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 16420  001C90  0EB0               	movlw	low _Battery_Adc
 16421  001C92  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 16422  001C94  0E00               	movlw	high _Battery_Adc
 16423  001C96  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 16424  001C98  90D8               	bcf	status,0,c
 16425  001C9A  342B               	rlcf	_ADC_Buffer_Point,w,c
 16426  001C9C  6ED9               	movwf	fsr2l,c
 16427  001C9E  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16428  001CA0  6EDA               	movwf	fsr2h,c
 16429  001CA2  90D8               	bcf	status,0,c
 16430  001CA4  36D9               	rlcf	fsr2l,f,c
 16431  001CA6  36DA               	rlcf	fsr2h,f,c
 16432  001CA8  5009               	movf	??_ADC_ISR+4,w,c
 16433  001CAA  26D9               	addwf	fsr2l,f,c
 16434  001CAC  500A               	movf	??_ADC_ISR+5,w,c
 16435  001CAE  22DA               	addwfc	fsr2h,f,c
 16436  001CB0  C005  FFDE         	movff	??_ADC_ISR,postinc2
 16437  001CB4  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 16438  001CB8  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 16439  001CBC  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 16440                           
 16441                           ;adc.c: 156: ADC_StartConversion(Battery1);
 16442  001CC0  0E01               	movlw	1
 16443  001CC2  ECE2  F026         	call	_ADC_StartConversion
 16444                           
 16445                           ;adc.c: 157: break;
 16446  001CC6  D180               	goto	i2l5050
 16447  001CC8                     i2l5008:
 16448                           
 16449                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 16450  001CC8  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 16451  001CCC  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 16452  001CD0  0E00               	movlw	0
 16453  001CD2  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 16454  001CD4  0EFF               	movlw	255
 16455  001CD6  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 16456  001CD8  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 16457  001CDA  0EB0               	movlw	low _Battery_Adc
 16458  001CDC  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 16459  001CDE  0E00               	movlw	high _Battery_Adc
 16460  001CE0  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 16461  001CE2  90D8               	bcf	status,0,c
 16462  001CE4  342B               	rlcf	_ADC_Buffer_Point,w,c
 16463  001CE6  6ED9               	movwf	fsr2l,c
 16464  001CE8  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16465  001CEA  6EDA               	movwf	fsr2h,c
 16466  001CEC  90D8               	bcf	status,0,c
 16467  001CEE  36D9               	rlcf	fsr2l,f,c
 16468  001CF0  36DA               	rlcf	fsr2h,f,c
 16469  001CF2  5009               	movf	??_ADC_ISR+4,w,c
 16470  001CF4  26D9               	addwf	fsr2l,f,c
 16471  001CF6  500A               	movf	??_ADC_ISR+5,w,c
 16472  001CF8  22DA               	addwfc	fsr2h,f,c
 16473  001CFA  C005  FFDE         	movff	??_ADC_ISR,postinc2
 16474  001CFE  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 16475  001D02  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 16476  001D06  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 16477                           
 16478                           ;adc.c: 160: ADC_StartConversion(Battery2);
 16479  001D0A  0E03               	movlw	3
 16480  001D0C  ECE2  F026         	call	_ADC_StartConversion
 16481                           
 16482                           ;adc.c: 161: break;
 16483  001D10  D15B               	goto	i2l5050
 16484  001D12                     i2l5012:
 16485                           
 16486                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 16487  001D12  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 16488  001D16  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 16489  001D1A  0E00               	movlw	0
 16490  001D1C  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 16491  001D1E  0EFF               	movlw	255
 16492  001D20  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 16493  001D22  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 16494  001D24  0EB0               	movlw	low _Battery_Adc
 16495  001D26  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 16496  001D28  0E00               	movlw	high _Battery_Adc
 16497  001D2A  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 16498  001D2C  90D8               	bcf	status,0,c
 16499  001D2E  342B               	rlcf	_ADC_Buffer_Point,w,c
 16500  001D30  6ED9               	movwf	fsr2l,c
 16501  001D32  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16502  001D34  6EDA               	movwf	fsr2h,c
 16503  001D36  90D8               	bcf	status,0,c
 16504  001D38  36D9               	rlcf	fsr2l,f,c
 16505  001D3A  36DA               	rlcf	fsr2h,f,c
 16506  001D3C  5009               	movf	??_ADC_ISR+4,w,c
 16507  001D3E  26D9               	addwf	fsr2l,f,c
 16508  001D40  500A               	movf	??_ADC_ISR+5,w,c
 16509  001D42  22DA               	addwfc	fsr2h,f,c
 16510  001D44  C005  FFDE         	movff	??_ADC_ISR,postinc2
 16511  001D48  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 16512  001D4C  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 16513  001D50  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 16514                           
 16515                           ;adc.c: 164: ADC_StartConversion(Battery3);
 16516  001D54  0E04               	movlw	4
 16517  001D56  ECE2  F026         	call	_ADC_StartConversion
 16518                           
 16519                           ;adc.c: 165: break;
 16520  001D5A  D136               	goto	i2l5050
 16521  001D5C                     i2l5016:
 16522                           
 16523                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 16524  001D5C  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 16525  001D60  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 16526  001D64  0E00               	movlw	0
 16527  001D66  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 16528  001D68  0EFF               	movlw	255
 16529  001D6A  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 16530  001D6C  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 16531  001D6E  0EB0               	movlw	low _Battery_Adc
 16532  001D70  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 16533  001D72  0E00               	movlw	high _Battery_Adc
 16534  001D74  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 16535  001D76  90D8               	bcf	status,0,c
 16536  001D78  342B               	rlcf	_ADC_Buffer_Point,w,c
 16537  001D7A  6ED9               	movwf	fsr2l,c
 16538  001D7C  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16539  001D7E  6EDA               	movwf	fsr2h,c
 16540  001D80  90D8               	bcf	status,0,c
 16541  001D82  36D9               	rlcf	fsr2l,f,c
 16542  001D84  36DA               	rlcf	fsr2h,f,c
 16543  001D86  5009               	movf	??_ADC_ISR+4,w,c
 16544  001D88  26D9               	addwf	fsr2l,f,c
 16545  001D8A  500A               	movf	??_ADC_ISR+5,w,c
 16546  001D8C  22DA               	addwfc	fsr2h,f,c
 16547  001D8E  C005  FFDE         	movff	??_ADC_ISR,postinc2
 16548  001D92  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 16549  001D96  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 16550  001D9A  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 16551                           
 16552                           ;adc.c: 168: ADC_StartConversion(Battery4);
 16553  001D9E  0E05               	movlw	5
 16554  001DA0  ECE2  F026         	call	_ADC_StartConversion
 16555                           
 16556                           ;adc.c: 169: break;
 16557  001DA4  D111               	goto	i2l5050
 16558  001DA6                     i2l5020:
 16559                           
 16560                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 16561  001DA6  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 16562  001DAA  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 16563  001DAE  0E00               	movlw	0
 16564  001DB0  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 16565  001DB2  0EFF               	movlw	255
 16566  001DB4  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 16567  001DB6  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 16568  001DB8  0EB0               	movlw	low _Battery_Adc
 16569  001DBA  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 16570  001DBC  0E00               	movlw	high _Battery_Adc
 16571  001DBE  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 16572  001DC0  90D8               	bcf	status,0,c
 16573  001DC2  342B               	rlcf	_ADC_Buffer_Point,w,c
 16574  001DC4  6ED9               	movwf	fsr2l,c
 16575  001DC6  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16576  001DC8  6EDA               	movwf	fsr2h,c
 16577  001DCA  90D8               	bcf	status,0,c
 16578  001DCC  36D9               	rlcf	fsr2l,f,c
 16579  001DCE  36DA               	rlcf	fsr2h,f,c
 16580  001DD0  5009               	movf	??_ADC_ISR+4,w,c
 16581  001DD2  26D9               	addwf	fsr2l,f,c
 16582  001DD4  500A               	movf	??_ADC_ISR+5,w,c
 16583  001DD6  22DA               	addwfc	fsr2h,f,c
 16584  001DD8  C005  FFDE         	movff	??_ADC_ISR,postinc2
 16585  001DDC  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 16586  001DE0  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 16587  001DE4  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 16588                           
 16589                           ;adc.c: 172: ADC_StartConversion(Battery5);
 16590  001DE8  0E18               	movlw	24
 16591  001DEA  ECE2  F026         	call	_ADC_StartConversion
 16592                           
 16593                           ;adc.c: 173: break;
 16594  001DEE  D0EC               	goto	i2l5050
 16595  001DF0                     i2l5024:
 16596                           
 16597                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 16598  001DF0  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 16599  001DF4  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 16600  001DF8  0E00               	movlw	0
 16601  001DFA  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 16602  001DFC  0EFF               	movlw	255
 16603  001DFE  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 16604  001E00  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 16605  001E02  0EB0               	movlw	low _Battery_Adc
 16606  001E04  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 16607  001E06  0E00               	movlw	high _Battery_Adc
 16608  001E08  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 16609  001E0A  90D8               	bcf	status,0,c
 16610  001E0C  342B               	rlcf	_ADC_Buffer_Point,w,c
 16611  001E0E  6ED9               	movwf	fsr2l,c
 16612  001E10  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16613  001E12  6EDA               	movwf	fsr2h,c
 16614  001E14  90D8               	bcf	status,0,c
 16615  001E16  36D9               	rlcf	fsr2l,f,c
 16616  001E18  36DA               	rlcf	fsr2h,f,c
 16617  001E1A  5009               	movf	??_ADC_ISR+4,w,c
 16618  001E1C  26D9               	addwf	fsr2l,f,c
 16619  001E1E  500A               	movf	??_ADC_ISR+5,w,c
 16620  001E20  22DA               	addwfc	fsr2h,f,c
 16621  001E22  C005  FFDE         	movff	??_ADC_ISR,postinc2
 16622  001E26  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 16623  001E2A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 16624  001E2E  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 16625                           
 16626                           ;adc.c: 176: ADC_StartConversion(Battery6);
 16627  001E32  0E1A               	movlw	26
 16628  001E34  ECE2  F026         	call	_ADC_StartConversion
 16629                           
 16630                           ;adc.c: 177: break;
 16631  001E38  D0C7               	goto	i2l5050
 16632  001E3A                     i2l5028:
 16633                           
 16634                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 16635  001E3A  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 16636  001E3E  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 16637  001E42  0E00               	movlw	0
 16638  001E44  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 16639  001E46  0EFF               	movlw	255
 16640  001E48  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 16641  001E4A  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 16642  001E4C  0EB0               	movlw	low _Battery_Adc
 16643  001E4E  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 16644  001E50  0E00               	movlw	high _Battery_Adc
 16645  001E52  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 16646  001E54  90D8               	bcf	status,0,c
 16647  001E56  342B               	rlcf	_ADC_Buffer_Point,w,c
 16648  001E58  6ED9               	movwf	fsr2l,c
 16649  001E5A  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16650  001E5C  6EDA               	movwf	fsr2h,c
 16651  001E5E  90D8               	bcf	status,0,c
 16652  001E60  36D9               	rlcf	fsr2l,f,c
 16653  001E62  36DA               	rlcf	fsr2h,f,c
 16654  001E64  5009               	movf	??_ADC_ISR+4,w,c
 16655  001E66  26D9               	addwf	fsr2l,f,c
 16656  001E68  500A               	movf	??_ADC_ISR+5,w,c
 16657  001E6A  22DA               	addwfc	fsr2h,f,c
 16658  001E6C  C005  FFDE         	movff	??_ADC_ISR,postinc2
 16659  001E70  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 16660  001E74  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 16661  001E78  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 16662                           
 16663                           ;adc.c: 180: ADC_StartConversion(Battery7);
 16664  001E7C  0E1B               	movlw	27
 16665  001E7E  ECE2  F026         	call	_ADC_StartConversion
 16666                           
 16667                           ;adc.c: 181: break;
 16668  001E82  D0A2               	goto	i2l5050
 16669  001E84                     i2l5032:
 16670                           
 16671                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 16672  001E84  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 16673  001E88  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 16674  001E8C  0E00               	movlw	0
 16675  001E8E  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 16676  001E90  0EFF               	movlw	255
 16677  001E92  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 16678  001E94  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 16679  001E96  0EB0               	movlw	low _Battery_Adc
 16680  001E98  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 16681  001E9A  0E00               	movlw	high _Battery_Adc
 16682  001E9C  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 16683  001E9E  90D8               	bcf	status,0,c
 16684  001EA0  342B               	rlcf	_ADC_Buffer_Point,w,c
 16685  001EA2  6ED9               	movwf	fsr2l,c
 16686  001EA4  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16687  001EA6  6EDA               	movwf	fsr2h,c
 16688  001EA8  90D8               	bcf	status,0,c
 16689  001EAA  36D9               	rlcf	fsr2l,f,c
 16690  001EAC  36DA               	rlcf	fsr2h,f,c
 16691  001EAE  5009               	movf	??_ADC_ISR+4,w,c
 16692  001EB0  26D9               	addwf	fsr2l,f,c
 16693  001EB2  500A               	movf	??_ADC_ISR+5,w,c
 16694  001EB4  22DA               	addwfc	fsr2h,f,c
 16695  001EB6  C005  FFDE         	movff	??_ADC_ISR,postinc2
 16696  001EBA  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 16697  001EBE  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 16698  001EC2  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 16699                           
 16700                           ;adc.c: 184: ADC_StartConversion(Battery8);
 16701  001EC6  0E08               	movlw	8
 16702  001EC8  ECE2  F026         	call	_ADC_StartConversion
 16703                           
 16704                           ;adc.c: 185: break;
 16705  001ECC  D07D               	goto	i2l5050
 16706  001ECE                     i2l5036:
 16707                           
 16708                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 16709  001ECE  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 16710  001ED2  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 16711  001ED6  0E00               	movlw	0
 16712  001ED8  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 16713  001EDA  0EFF               	movlw	255
 16714  001EDC  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 16715  001EDE  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 16716  001EE0  0EB0               	movlw	low _Battery_Adc
 16717  001EE2  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 16718  001EE4  0E00               	movlw	high _Battery_Adc
 16719  001EE6  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 16720  001EE8  90D8               	bcf	status,0,c
 16721  001EEA  342B               	rlcf	_ADC_Buffer_Point,w,c
 16722  001EEC  6ED9               	movwf	fsr2l,c
 16723  001EEE  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16724  001EF0  6EDA               	movwf	fsr2h,c
 16725  001EF2  90D8               	bcf	status,0,c
 16726  001EF4  36D9               	rlcf	fsr2l,f,c
 16727  001EF6  36DA               	rlcf	fsr2h,f,c
 16728  001EF8  5009               	movf	??_ADC_ISR+4,w,c
 16729  001EFA  26D9               	addwf	fsr2l,f,c
 16730  001EFC  500A               	movf	??_ADC_ISR+5,w,c
 16731  001EFE  22DA               	addwfc	fsr2h,f,c
 16732  001F00  C005  FFDE         	movff	??_ADC_ISR,postinc2
 16733  001F04  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 16734  001F08  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 16735  001F0C  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 16736                           
 16737                           ;adc.c: 188: ADC_StartConversion(Battery9);
 16738  001F10  0E0B               	movlw	11
 16739  001F12  ECE2  F026         	call	_ADC_StartConversion
 16740                           
 16741                           ;adc.c: 189: break;
 16742  001F16  D058               	goto	i2l5050
 16743  001F18                     i2l5040:
 16744                           
 16745                           ;adc.c: 191: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 16746  001F18  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 16747  001F1C  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 16748  001F20  0E00               	movlw	0
 16749  001F22  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 16750  001F24  0EFF               	movlw	255
 16751  001F26  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 16752  001F28  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 16753  001F2A  0EB0               	movlw	low _Battery_Adc
 16754  001F2C  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 16755  001F2E  0E00               	movlw	high _Battery_Adc
 16756  001F30  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 16757  001F32  90D8               	bcf	status,0,c
 16758  001F34  342B               	rlcf	_ADC_Buffer_Point,w,c
 16759  001F36  6ED9               	movwf	fsr2l,c
 16760  001F38  342C               	rlcf	_ADC_Buffer_Point+1,w,c
 16761  001F3A  6EDA               	movwf	fsr2h,c
 16762  001F3C  90D8               	bcf	status,0,c
 16763  001F3E  36D9               	rlcf	fsr2l,f,c
 16764  001F40  36DA               	rlcf	fsr2h,f,c
 16765  001F42  5009               	movf	??_ADC_ISR+4,w,c
 16766  001F44  26D9               	addwf	fsr2l,f,c
 16767  001F46  500A               	movf	??_ADC_ISR+5,w,c
 16768  001F48  22DA               	addwfc	fsr2h,f,c
 16769  001F4A  C005  FFDE         	movff	??_ADC_ISR,postinc2
 16770  001F4E  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 16771  001F52  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 16772  001F56  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 16773                           
 16774                           ;adc.c: 192: ADC_StartConversion(Battery10);
 16775  001F5A  0E0D               	movlw	13
 16776  001F5C  ECE2  F026         	call	_ADC_StartConversion
 16777                           
 16778                           ;adc.c: 193: break;
 16779  001F60  D033               	goto	i2l5050
 16780  001F62                     i2l5044:
 16781                           
 16782                           ;adc.c: 195: Volt_Aquire = 0;
 16783  001F62  0E00               	movlw	0
 16784  001F64  6E3B               	movwf	_Volt_Aquire,c
 16785                           
 16786                           ;adc.c: 196: Volt_Done = 1;
 16787  001F66  0E00               	movlw	0
 16788  001F68  0100               	movlb	0	; () banked
 16789  001F6A  6FDB               	movwf	(_Volt_Done+1)& (0+255),b
 16790  001F6C  0E01               	movlw	1
 16791  001F6E  6FDA               	movwf	_Volt_Done& (0+255),b
 16792                           
 16793                           ; BSR set to: 0
 16794                           ;adc.c: 198: }
 16795                           
 16796                           ;adc.c: 197: break;
 16797  001F70  D02B               	goto	i2l5050
 16798  001F72                     i2l5048:
 16799  001F72  C02B  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 16800  001F76  C02C  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 16801                           
 16802                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16803                           ; Switch size 1, requested type "space"
 16804                           ; Number of cases is 1, Range of values is 0 to 0
 16805                           ; switch strategies available:
 16806                           ; Name         Instructions Cycles
 16807                           ; simple_byte            4     3 (average)
 16808                           ;	Chosen strategy is simple_byte
 16809  001F7A  5006               	movf	??_ADC_ISR+1,w,c
 16810  001F7C  0A00               	xorlw	0	; case 0
 16811  001F7E  A4D8               	btfss	status,2,c
 16812  001F80  D023               	goto	i2l5050
 16813                           
 16814                           ; Switch size 1, requested type "space"
 16815                           ; Number of cases is 11, Range of values is 0 to 10
 16816                           ; switch strategies available:
 16817                           ; Name         Instructions Cycles
 16818                           ; simple_byte           34    18 (average)
 16819                           ;	Chosen strategy is simple_byte
 16820  001F82  5005               	movf	??_ADC_ISR,w,c
 16821  001F84  0A00               	xorlw	0	; case 0
 16822  001F86  B4D8               	btfsc	status,2,c
 16823  001F88  D67A               	goto	i2l5004
 16824  001F8A  0A01               	xorlw	1	; case 1
 16825  001F8C  B4D8               	btfsc	status,2,c
 16826  001F8E  D69C               	goto	i2l5008
 16827  001F90  0A03               	xorlw	3	; case 2
 16828  001F92  B4D8               	btfsc	status,2,c
 16829  001F94  D6BE               	goto	i2l5012
 16830  001F96  0A01               	xorlw	1	; case 3
 16831  001F98  B4D8               	btfsc	status,2,c
 16832  001F9A  D6E0               	goto	i2l5016
 16833  001F9C  0A07               	xorlw	7	; case 4
 16834  001F9E  B4D8               	btfsc	status,2,c
 16835  001FA0  D702               	goto	i2l5020
 16836  001FA2  0A01               	xorlw	1	; case 5
 16837  001FA4  B4D8               	btfsc	status,2,c
 16838  001FA6  D724               	goto	i2l5024
 16839  001FA8  0A03               	xorlw	3	; case 6
 16840  001FAA  B4D8               	btfsc	status,2,c
 16841  001FAC  D746               	goto	i2l5028
 16842  001FAE  0A01               	xorlw	1	; case 7
 16843  001FB0  B4D8               	btfsc	status,2,c
 16844  001FB2  D768               	goto	i2l5032
 16845  001FB4  0A0F               	xorlw	15	; case 8
 16846  001FB6  B4D8               	btfsc	status,2,c
 16847  001FB8  D78A               	goto	i2l5036
 16848  001FBA  0A01               	xorlw	1	; case 9
 16849  001FBC  B4D8               	btfsc	status,2,c
 16850  001FBE  D7AC               	goto	i2l5040
 16851  001FC0  0A03               	xorlw	3	; case 10
 16852  001FC2  B4D8               	btfsc	status,2,c
 16853  001FC4  D7CE               	goto	i2l5044
 16854  001FC6  D000               	goto	i2l5050
 16855  001FC8                     i2l5050:
 16856                           
 16857                           ;adc.c: 199: ADC_Buffer_Point++;
 16858  001FC8  4A2B               	infsnz	_ADC_Buffer_Point,f,c
 16859  001FCA  2A2C               	incf	_ADC_Buffer_Point+1,f,c
 16860  001FCC  0012               	return	
 16861  001FCE  0012               	return		;funcret
 16862  001FD0                     __end_of_ADC_ISR:
 16863                           	opt stack 0
 16864                           tosu	equ	0xFFF
 16865                           tosh	equ	0xFFE
 16866                           tosl	equ	0xFFD
 16867                           pclatu	equ	0xFFB
 16868                           pclath	equ	0xFFA
 16869                           tblptru	equ	0xFF8
 16870                           tblptrh	equ	0xFF7
 16871                           tblptrl	equ	0xFF6
 16872                           tablat	equ	0xFF5
 16873                           prodh	equ	0xFF4
 16874                           prodl	equ	0xFF3
 16875                           intcon	equ	0xFF2
 16876                           intcon2	equ	0xFF1
 16877                           postinc0	equ	0xFEE
 16878                           fsr0h	equ	0xFEA
 16879                           fsr0l	equ	0xFE9
 16880                           wreg	equ	0xFE8
 16881                           postinc1	equ	0xFE6
 16882                           postdec1	equ	0xFE5
 16883                           fsr1h	equ	0xFE2
 16884                           fsr1l	equ	0xFE1
 16885                           indf2	equ	0xFDF
 16886                           postinc2	equ	0xFDE
 16887                           postdec2	equ	0xFDD
 16888                           plusw2	equ	0xFDB
 16889                           fsr2h	equ	0xFDA
 16890                           fsr2l	equ	0xFD9
 16891                           status	equ	0xFD8
 16892                           
 16893 ;; *************** function _Set_4051 *****************
 16894 ;; Defined at:
 16895 ;;		line 15 in file "Functions.c"
 16896 ;; Parameters:    Size  Location     Type
 16897 ;;  Channel         2    0[COMRAM] int 
 16898 ;; Auto vars:     Size  Location     Type
 16899 ;;		None
 16900 ;; Return value:  Size  Location     Type
 16901 ;;		None               void
 16902 ;; Registers used:
 16903 ;;		wreg, status,2, status,0
 16904 ;; Tracked objects:
 16905 ;;		On entry : 0/0
 16906 ;;		On exit  : 0/0
 16907 ;;		Unchanged: 0/0
 16908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16909 ;;      Params:         2       0       0       0       0       0       0
 16910 ;;      Locals:         0       0       0       0       0       0       0
 16911 ;;      Temps:          2       0       0       0       0       0       0
 16912 ;;      Totals:         4       0       0       0       0       0       0
 16913 ;;Total ram usage:        4 bytes
 16914 ;; Hardware stack levels used:    1
 16915 ;; This function calls:
 16916 ;;		Nothing
 16917 ;; This function is called by:
 16918 ;;		_ADC_ISR
 16919 ;; This function uses a non-reentrant model
 16920 ;;
 16921                           
 16922                           	psect	text73
 16923  004B6E                     __ptext73:
 16924                           	opt stack 0
 16925  004B6E                     _Set_4051:
 16926                           	opt stack 22
 16927                           
 16928                           ;Functions.c: 17: if (Channel & 0x01)
 16929                           
 16930                           ;incstack = 0
 16931  004B6E  A001               	btfss	Set_4051@Channel,0,c
 16932  004B70  D002               	goto	i2l4196
 16933                           
 16934                           ;Functions.c: 18: {
 16935                           ;Functions.c: 19: do { LATA6 = ~LATA6; } while(0);
 16936  004B72  7C89               	btg	3977,6,c	;volatile
 16937  004B74  D000               	goto	i2l4196
 16938  004B76                     i2l4196:
 16939                           
 16940                           ;Functions.c: 20: }
 16941                           ;Functions.c: 21: if ((Channel>>1) & 0x01)
 16942  004B76  3402               	rlcf	Set_4051@Channel+1,w,c
 16943  004B78  3002               	rrcf	Set_4051@Channel+1,w,c
 16944  004B7A  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 16945  004B7C  3001               	rrcf	Set_4051@Channel,w,c
 16946  004B7E  6E03               	movwf	??_Set_4051& (0+255),c
 16947  004B80  A003               	btfss	??_Set_4051,0,c
 16948  004B82  D002               	goto	i2l4198
 16949                           
 16950                           ;Functions.c: 22: {
 16951                           ;Functions.c: 23: do { LATC0 = ~LATC0; } while(0);
 16952  004B84  708B               	btg	3979,0,c	;volatile
 16953  004B86  D000               	goto	i2l4198
 16954  004B88                     i2l4198:
 16955                           
 16956                           ;Functions.c: 24: }
 16957                           ;Functions.c: 25: if ((Channel>>2) & 0x01)
 16958  004B88  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 16959  004B8C  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 16960  004B90  3404               	rlcf	??_Set_4051+1,w,c
 16961  004B92  3204               	rrcf	??_Set_4051+1,f,c
 16962  004B94  3203               	rrcf	??_Set_4051,f,c
 16963  004B96  3404               	rlcf	??_Set_4051+1,w,c
 16964  004B98  3204               	rrcf	??_Set_4051+1,f,c
 16965  004B9A  3203               	rrcf	??_Set_4051,f,c
 16966  004B9C  A003               	btfss	??_Set_4051,0,c
 16967  004B9E  0012               	return	
 16968                           
 16969                           ;Functions.c: 26: {
 16970                           ;Functions.c: 27: do { LATC1 = ~LATC1; } while(0);
 16971  004BA0  728B               	btg	3979,1,c	;volatile
 16972  004BA2  0012               	return	
 16973  004BA4  0012               	return		;funcret
 16974  004BA6                     __end_of_Set_4051:
 16975                           	opt stack 0
 16976                           tosu	equ	0xFFF
 16977                           tosh	equ	0xFFE
 16978                           tosl	equ	0xFFD
 16979                           pclatu	equ	0xFFB
 16980                           pclath	equ	0xFFA
 16981                           tblptru	equ	0xFF8
 16982                           tblptrh	equ	0xFF7
 16983                           tblptrl	equ	0xFF6
 16984                           tablat	equ	0xFF5
 16985                           prodh	equ	0xFF4
 16986                           prodl	equ	0xFF3
 16987                           intcon	equ	0xFF2
 16988                           intcon2	equ	0xFF1
 16989                           postinc0	equ	0xFEE
 16990                           fsr0h	equ	0xFEA
 16991                           fsr0l	equ	0xFE9
 16992                           wreg	equ	0xFE8
 16993                           postinc1	equ	0xFE6
 16994                           postdec1	equ	0xFE5
 16995                           fsr1h	equ	0xFE2
 16996                           fsr1l	equ	0xFE1
 16997                           indf2	equ	0xFDF
 16998                           postinc2	equ	0xFDE
 16999                           postdec2	equ	0xFDD
 17000                           plusw2	equ	0xFDB
 17001                           fsr2h	equ	0xFDA
 17002                           fsr2l	equ	0xFD9
 17003                           status	equ	0xFD8
 17004                           
 17005 ;; *************** function _ADC_StartConversion *****************
 17006 ;; Defined at:
 17007 ;;		line 36 in file "mcc_generated_files/adc.c"
 17008 ;; Parameters:    Size  Location     Type
 17009 ;;  channel         1    wreg     enum E8837
 17010 ;; Auto vars:     Size  Location     Type
 17011 ;;  channel         1    1[COMRAM] enum E8837
 17012 ;; Return value:  Size  Location     Type
 17013 ;;		None               void
 17014 ;; Registers used:
 17015 ;;		wreg, status,2, status,0
 17016 ;; Tracked objects:
 17017 ;;		On entry : 0/0
 17018 ;;		On exit  : 0/0
 17019 ;;		Unchanged: 0/0
 17020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17021 ;;      Params:         0       0       0       0       0       0       0
 17022 ;;      Locals:         1       0       0       0       0       0       0
 17023 ;;      Temps:          1       0       0       0       0       0       0
 17024 ;;      Totals:         2       0       0       0       0       0       0
 17025 ;;Total ram usage:        2 bytes
 17026 ;; Hardware stack levels used:    1
 17027 ;; This function calls:
 17028 ;;		Nothing
 17029 ;; This function is called by:
 17030 ;;		_ADC_ISR
 17031 ;;		_Battery_Read
 17032 ;;		_Temp_Read
 17033 ;; This function uses a non-reentrant model
 17034 ;;
 17035                           
 17036                           	psect	text74
 17037  004DC4                     __ptext74:
 17038                           	opt stack 0
 17039  004DC4                     _ADC_StartConversion:
 17040                           	opt stack 21
 17041                           
 17042                           ;incstack = 0
 17043                           ;ADC_StartConversion@channel stored from wreg
 17044  004DC4  6E02               	movwf	ADC_StartConversion@channel,c
 17045                           
 17046                           ;adc.c: 39: ADCON0bits.CHS = channel;
 17047  004DC6  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 17048  004DCA  4601               	rlncf	??_ADC_StartConversion,f,c
 17049  004DCC  4601               	rlncf	??_ADC_StartConversion,f,c
 17050  004DCE  50C2               	movf	4034,w,c	;volatile
 17051  004DD0  1801               	xorwf	??_ADC_StartConversion,w,c
 17052  004DD2  0B83               	andlw	-125
 17053  004DD4  1801               	xorwf	??_ADC_StartConversion,w,c
 17054  004DD6  6EC2               	movwf	4034,c	;volatile
 17055                           
 17056                           ;adc.c: 42: ADCON0bits.ADON = 1;
 17057  004DD8  80C2               	bsf	4034,0,c	;volatile
 17058                           
 17059                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
 17060  004DDA  82C2               	bsf	4034,1,c	;volatile
 17061  004DDC  0012               	return		;funcret
 17062  004DDE                     __end_of_ADC_StartConversion:
 17063                           	opt stack 0
 17064                           tosu	equ	0xFFF
 17065                           tosh	equ	0xFFE
 17066                           tosl	equ	0xFFD
 17067                           pclatu	equ	0xFFB
 17068                           pclath	equ	0xFFA
 17069                           tblptru	equ	0xFF8
 17070                           tblptrh	equ	0xFF7
 17071                           tblptrl	equ	0xFF6
 17072                           tablat	equ	0xFF5
 17073                           prodh	equ	0xFF4
 17074                           prodl	equ	0xFF3
 17075                           intcon	equ	0xFF2
 17076                           intcon2	equ	0xFF1
 17077                           postinc0	equ	0xFEE
 17078                           fsr0h	equ	0xFEA
 17079                           fsr0l	equ	0xFE9
 17080                           wreg	equ	0xFE8
 17081                           postinc1	equ	0xFE6
 17082                           postdec1	equ	0xFE5
 17083                           fsr1h	equ	0xFE2
 17084                           fsr1l	equ	0xFE1
 17085                           indf2	equ	0xFDF
 17086                           postinc2	equ	0xFDE
 17087                           postdec2	equ	0xFDD
 17088                           plusw2	equ	0xFDB
 17089                           fsr2h	equ	0xFDA
 17090                           fsr2l	equ	0xFD9
 17091                           status	equ	0xFD8
 17092                           
 17093 ;; *************** function _ADC_GetConversionResult *****************
 17094 ;; Defined at:
 17095 ;;		line 55 in file "mcc_generated_files/adc.c"
 17096 ;; Parameters:    Size  Location     Type
 17097 ;;		None
 17098 ;; Auto vars:     Size  Location     Type
 17099 ;;		None
 17100 ;; Return value:  Size  Location     Type
 17101 ;;                  2    0[COMRAM] unsigned int 
 17102 ;; Registers used:
 17103 ;;		wreg, status,2, status,0
 17104 ;; Tracked objects:
 17105 ;;		On entry : 0/0
 17106 ;;		On exit  : 0/0
 17107 ;;		Unchanged: 0/0
 17108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17109 ;;      Params:         2       0       0       0       0       0       0
 17110 ;;      Locals:         0       0       0       0       0       0       0
 17111 ;;      Temps:          2       0       0       0       0       0       0
 17112 ;;      Totals:         4       0       0       0       0       0       0
 17113 ;;Total ram usage:        4 bytes
 17114 ;; Hardware stack levels used:    1
 17115 ;; This function calls:
 17116 ;;		Nothing
 17117 ;; This function is called by:
 17118 ;;		_ADC_ISR
 17119 ;; This function uses a non-reentrant model
 17120 ;;
 17121                           
 17122                           	psect	text75
 17123  004E6E                     __ptext75:
 17124                           	opt stack 0
 17125  004E6E                     _ADC_GetConversionResult:
 17126                           	opt stack 22
 17127                           
 17128                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
 17129                           
 17130                           ;incstack = 0
 17131  004E6E  50C4               	movf	4036,w,c	;volatile
 17132  004E70  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 17133  004E72  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 17134  004E74  50C3               	movf	4035,w,c	;volatile
 17135  004E76  2403               	addwf	??_ADC_GetConversionResult,w,c
 17136  004E78  6E01               	movwf	?_ADC_GetConversionResult,c
 17137  004E7A  0E00               	movlw	0
 17138  004E7C  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 17139  004E7E  6E02               	movwf	?_ADC_GetConversionResult+1,c
 17140  004E80  0012               	return	
 17141  004E82  0012               	return		;funcret
 17142  004E84                     __end_of_ADC_GetConversionResult:
 17143                           	opt stack 0
 17144                           tosu	equ	0xFFF
 17145                           tosh	equ	0xFFE
 17146                           tosl	equ	0xFFD
 17147                           pclatu	equ	0xFFB
 17148                           pclath	equ	0xFFA
 17149                           tblptru	equ	0xFF8
 17150                           tblptrh	equ	0xFF7
 17151                           tblptrl	equ	0xFF6
 17152                           tablat	equ	0xFF5
 17153                           prodh	equ	0xFF4
 17154                           prodl	equ	0xFF3
 17155                           intcon	equ	0xFF2
 17156                           intcon2	equ	0xFF1
 17157                           postinc0	equ	0xFEE
 17158                           fsr0h	equ	0xFEA
 17159                           fsr0l	equ	0xFE9
 17160                           wreg	equ	0xFE8
 17161                           postinc1	equ	0xFE6
 17162                           postdec1	equ	0xFE5
 17163                           fsr1h	equ	0xFE2
 17164                           fsr1l	equ	0xFE1
 17165                           indf2	equ	0xFDF
 17166                           postinc2	equ	0xFDE
 17167                           postdec2	equ	0xFDD
 17168                           plusw2	equ	0xFDB
 17169                           fsr2h	equ	0xFDA
 17170                           fsr2l	equ	0xFD9
 17171                           status	equ	0xFD8
 17172                           tosu	equ	0xFFF
 17173                           tosh	equ	0xFFE
 17174                           tosl	equ	0xFFD
 17175                           pclatu	equ	0xFFB
 17176                           pclath	equ	0xFFA
 17177                           tblptru	equ	0xFF8
 17178                           tblptrh	equ	0xFF7
 17179                           tblptrl	equ	0xFF6
 17180                           tablat	equ	0xFF5
 17181                           prodh	equ	0xFF4
 17182                           prodl	equ	0xFF3
 17183                           intcon	equ	0xFF2
 17184                           intcon2	equ	0xFF1
 17185                           postinc0	equ	0xFEE
 17186                           fsr0h	equ	0xFEA
 17187                           fsr0l	equ	0xFE9
 17188                           wreg	equ	0xFE8
 17189                           postinc1	equ	0xFE6
 17190                           postdec1	equ	0xFE5
 17191                           fsr1h	equ	0xFE2
 17192                           fsr1l	equ	0xFE1
 17193                           indf2	equ	0xFDF
 17194                           postinc2	equ	0xFDE
 17195                           postdec2	equ	0xFDD
 17196                           plusw2	equ	0xFDB
 17197                           fsr2h	equ	0xFDA
 17198                           fsr2l	equ	0xFD9
 17199                           status	equ	0xFD8
 17200                           
 17201                           	psect	text76
 17202  000000                     __ptext76:
 17203                           	opt stack 0
 17204                           tosu	equ	0xFFF
 17205                           tosh	equ	0xFFE
 17206                           tosl	equ	0xFFD
 17207                           pclatu	equ	0xFFB
 17208                           pclath	equ	0xFFA
 17209                           tblptru	equ	0xFF8
 17210                           tblptrh	equ	0xFF7
 17211                           tblptrl	equ	0xFF6
 17212                           tablat	equ	0xFF5
 17213                           prodh	equ	0xFF4
 17214                           prodl	equ	0xFF3
 17215                           intcon	equ	0xFF2
 17216                           intcon2	equ	0xFF1
 17217                           postinc0	equ	0xFEE
 17218                           fsr0h	equ	0xFEA
 17219                           fsr0l	equ	0xFE9
 17220                           wreg	equ	0xFE8
 17221                           postinc1	equ	0xFE6
 17222                           postdec1	equ	0xFE5
 17223                           fsr1h	equ	0xFE2
 17224                           fsr1l	equ	0xFE1
 17225                           indf2	equ	0xFDF
 17226                           postinc2	equ	0xFDE
 17227                           postdec2	equ	0xFDD
 17228                           plusw2	equ	0xFDB
 17229                           fsr2h	equ	0xFDA
 17230                           fsr2l	equ	0xFD9
 17231                           status	equ	0xFD8
 17232                           
 17233                           	psect	rparam
 17234  0000                     tosu	equ	0xFFF
 17235                           tosh	equ	0xFFE
 17236                           tosl	equ	0xFFD
 17237                           pclatu	equ	0xFFB
 17238                           pclath	equ	0xFFA
 17239                           tblptru	equ	0xFF8
 17240                           tblptrh	equ	0xFF7
 17241                           tblptrl	equ	0xFF6
 17242                           tablat	equ	0xFF5
 17243                           prodh	equ	0xFF4
 17244                           prodl	equ	0xFF3
 17245                           intcon	equ	0xFF2
 17246                           intcon2	equ	0xFF1
 17247                           postinc0	equ	0xFEE
 17248                           fsr0h	equ	0xFEA
 17249                           fsr0l	equ	0xFE9
 17250                           wreg	equ	0xFE8
 17251                           postinc1	equ	0xFE6
 17252                           postdec1	equ	0xFE5
 17253                           fsr1h	equ	0xFE2
 17254                           fsr1l	equ	0xFE1
 17255                           indf2	equ	0xFDF
 17256                           postinc2	equ	0xFDE
 17257                           postdec2	equ	0xFDD
 17258                           plusw2	equ	0xFDB
 17259                           fsr2h	equ	0xFDA
 17260                           fsr2l	equ	0xFD9
 17261                           status	equ	0xFD8


Data Sizes:
    Strings     31
    Constant    145
    Data        1
    BSS         1159
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      69
    BANK0           160     80     158
    BANK1           256      9     246
    BANK2           256     25     231
    BANK3           256      0     200
    BANK4           256      0     206
    BANK5           256      0     206

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_2(CODE[23]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK1[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK1[17]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1240(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK3[200]), ring_buffer(BANK2[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK2[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK1[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK1[40]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK4[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 


Critical Paths under _main in COMRAM

    _receiveData->_Send_put
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _Receive_available->_UART_buff_size
    _printf->___lltoft
    _printf->___wmul
    _scale->___wmul
    _putch->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _fround->___wmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _Temp_Fault->___wmul
    _Temp_Convert->___wmul
    _eval_poly->___wmul
    ___awtoft->___awdiv
    ___ftsub->___lltoft
    _Temp_Filter->___wmul
    _begin->___awdiv
    ___awdiv->___awmod
    _UART_init->_UART_buff_init
    _UART_buff_init->_memset
    _Battery_Get->___wmul
    _Battery_Fault->___wmul
    ___ftge->___wmul
    _Battery_Convert->___altoft
    _Battery_Convert->___wmul
    ___ftdiv->___altoft
    ___altoft->___ftpack
    _Battery_Filter->___wmul
    ___wmul->___awdiv
    ___ftmul->___altoft
    ___ftmul->___wmul
    ___ftadd->___altoft
    ___ftadd->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _Temp_Read->_ADC_StartConversion
    _Battery_Read->_ADC_StartConversion
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Temp_Convert
    _updateComms->_receiveData
    _receiveData->_CRCcheck
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    _Temp_Fault->___ftge
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _SYSTEM_Initialize->_begin
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->_Battery_Filter
    ___ftdiv->___altoft
    _Battery_Filter->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5  252152
                                              0 BANK1      9     4      5
                    _Battery_Convert
                      _Battery_Fault
                        _Battery_Get
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                             _printf
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   10715
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              7 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              0 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              44    37      7   76908
                                             60 BANK0     13     6      7
                                              0 BANK2     25    25      0
                        _Battery_Get (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   17889
                                             32 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2645
                                             38 COMRAM     1     1      0
                           _Send_put
 ---------------------------------------------------------------------------------
 (3) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (4) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             26 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   17610
                                             32 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1819
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     608
                                             26 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     827
                                             26 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2763
                                             34 COMRAM     8     4      4
                                              0 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     848
                                             39 COMRAM     1     1      0
                                              0 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     703
                                             26 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     602
                                             39 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                             26 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    7472
                                             13 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                         9     9      0   86986
                                             71 BANK0      9     9      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   34756
                                             66 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     476
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   18720
                                             54 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2871
                                             40 COMRAM     1     1      0
                                              0 BANK0      3     0      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5981
                                             54 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   18526
                                             54 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4480
                     _ADC_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                          _UART_init
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    3465
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2601
                                             32 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    8439
                                             13 BANK0      7     7      0
                        _Battery_Get
                          _SetBypass
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypass                                            6     2      4     649
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    6115
                                              4 BANK0      3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    7503
                                             13 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1430
                                              4 BANK0      9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   43336
                                             56 BANK0      4     4      0
                     _Battery_Filter
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3580
                                              2 BANK0     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2865
                                             34 COMRAM     8     4      4
                                              0 BANK0      2     2      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   18526
                                             54 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    5930
                                             40 COMRAM     2     2      0
                                              0 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6842
                                             17 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5463
                                             42 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                             26 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    2424
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0      44
                       _Battery_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (9) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (9) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              8     8      0    1171
                                              4 COMRAM     8     8      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (9) _Set_4051                                             4     2      2     706
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _ADC_StartConversion                                 2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Get
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _RunBypas
     _Battery_Get
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _SetBypass
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _UART_init
       _UART_buff_init
         _memset
     _begin
       ___awdiv
         ___awmod (ARG)
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _log
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _printf
     _Battery_Get (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _Send_put
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _updateComms
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0      CE      15       80.5%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100     19      E7       8       90.2%
BITBANK1           100      0       0       5        0.0%
BANK1              100      9      F6       6       96.1%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     50      9E       4       98.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     524       9        0.0%
DATA                 0      0     524      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun May 31 21:54:24 2015

             i2_UART_buff_modulo_inc 4CCC                         ___altoft@exp 0060  
                       _rx_array_inx 0041                        ___altoft@sign 0061  
                       ___awdiv@sign 0026                  ___wmul@multiplicand 0062  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                       ___ftadd@exp1 0095                         ___ftadd@exp2 0094  
                       ___ftadd@sign 0093                                  l502 3CAE  
                                l334 4712                                  l344 2D0C  
                                l291 4178                                  l460 3C4E  
                                l285 2EAC                                  l509 3CBE  
                                l453 3C3E                                  l445 3C2E  
                                l518 3C1E                                  l481 3C7E  
                                l474 3C6E                                  l467 3C5E  
                                l563 44D0                                  l495 3C9E  
                                l488 3C8E                                  l676 49E6  
                                l790 301A                                  l898 0E64  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0037                                  _log 342C  
                    __end_of_ADC_ISR 1FD0                         ___awmod@sign 0020  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8        i2UART_buff_modulo_inc@modulus 0003  
                       __CFG_LVP$OFF 000000                      ?_Battery_Filter 0001  
                       ___ftdiv@cntr 006B                         ___ftdiv@sign 0070  
                               l1303 2742                                 l1231 37D6  
                               l1307 277C                                 l1309 27A6  
                               l1318 288A                                 l1327 28B4  
                               l1432 4676                                 l1352 36A2  
                               l1345 360C                                 l1274 42E4  
                               l1338 33F2                                 l1442 439A  
                               l1346 3634                                 l1377 4D36  
                               l6010 2EB0                                 l6100 47BC  
                               l6020 2F76                                 l6012 2EDC  
                               l6120 480E                                 l6112 47F2  
                               l6104 47CA                                 l6024 2F90  
                               l6106 47D4                                 l6034 2FE6  
                               l6042 3012                                 l6220 2E30  
                               l6212 2D32                                 l6300 3CB2  
                               l6052 43C2                                 l6132 4B0C  
                               l6108 47DC                                 l6116 47FE  
                               l7100 0D46                                 l7020 099A  
                               l7004 08E8                                 l7102 0D5A  
                               l6038 3008                                 l6224 2E4A  
                               l6304 3CC2                                 l6064 43EA  
                               l6080 4426                                 l6240 2B92  
                               l6160 3DE8                                 l6144 4592  
                               l7200 117A                                 l7120 0E46  
                               l7112 0E12                                 l7032 0A3A  
                               l6218 2E26                                 l6066 43F4  
                               l6058 43D4                                 l7202 1186  
                               l7130 0E90                                 l7114 0E22  
                               l7106 0D82                                 l7050 0B20  
                               l7034 0A50                                 l6410 1768  
                               l6322 139E                                 l6084 4436  
                               l6076 441A                                 l6068 43FC  
                               l6252 2CAA                                 l7220 1222  
                               l7124 0E6A                                 l7044 0AE6  
                               l7036 0A82                                 l7028 0A0A  
                               l6420 17EA                                 l6412 1782  
                               l6340 1460                                 l7300 3F68  
                               l6246 2C86                                 l6158 3D5E  
                               l6270 347E                                 l6510 212E  
                               l7230 1274                                 l7222 122E  
                               l7214 11F8                                 l7206 11BE  
                               l7134 0EE2                                 l7142 0FC0  
                               l7118 0E32                                 l7062 0C0E  
                               l7054 0B64                                 l7038 0A98  
                               l7150 0FF0                                 l6422 1804  
                               l6414 179C                                 l6342 1468  
                               l6318 1370                                 l6326 13A4  
                               l6350 14A4                                 l7310 3FBC  
                               l7240 3B5C                                 l6248 2C90  
                               l6264 3450                                 l6096 47AE  
                               l6520 2212                                 l7216 1204  
                               l7208 11CA                                 l7160 1036  
                               l7144 0FD0                                 l7080 0CB4  
                               l7072 0C5C                                 l7064 0C14  
                               l7056 0B92                                 l7048 0B14  
                               l6424 1852                                 l6416 17B6  
                               l7304 3F82                 receiveData@crcHolder 0073  
                               l6290 3C62                                 l6282 3C22  
                               l6602 368E                                 l7226 124C  
                               l7234 1300                                 l7090 0D0C  
                               l7058 0BA6                                 l6450 18FA  
                               l6418 17D0                                 l6426 186E  
                               l6370 1510                                 l6338 1448  
                               l5740 4258                                 l6292 3C72  
                               l6284 3C32                                 l7252 3BD6  
                               l7244 3B76                                 l6612 36D2  
                               l6604 369C                                 l5716 4C92  
                               l6516 21EC                                 l7180 10B2  
                               l7172 1072                                 l7148 0FE0  
                               l7084 0CDE                                 l7076 0C62  
                               l7068 0C22                                 l7236 131A  
                               l6460 197C                                 l6452 1914  
                               l6436 187C                                 l6356 14B4  
                               ?_log 00A2                                 l5910 280E  
                               l6294 3C82                                 l6286 3C42  
                               l6534 2420                                 l7166 105E  
                               l7094 0D1C                                 l5814 49D0  
                               l5822 49EE                                 l6462 1996  
                               l6454 192E                                 l6358 14DE  
                               l6374 1544                                 l5752 42AC  
                               l5744 4268                                 l5912 281E  
                               l5904 27DE                                 l6296 3C92  
                               l6288 3C52                                 l7256 3C14  
                               l6800 32C6                                 l6640 3766  
                               l6632 3734                                 l5728 44CC  
                               l6528 2362                                 l7184 10DA  
                               l7176 10AC                                 l7168 1064  
                               l7096 0D36                                 l5808 49BA  
                               l5824 49F8                                 l6464 19E4  
                               l6456 1948                                 l6392 16AA  
                               l5762 42EC                                 l5754 42CC  
                               l5746 4274                                 l5930 28E0  
                               l5922 286A                                 l5914 282E  
                               l6714 33B0                                 l6298 3CA2  
                               l6810 461E                                 l6618 36F0  
                               l6562 35D2                                 l6546 4D5C  
                               l7194 1142                                 l5850 3E9E  
                               l5834 3E0E                                 l6458 1962  
                               l6466 1A00                                 l6394 16B2  
                               l6386 160C                                 l6378 1570  
                               l6474 1A0E                                 l7282 3F22  
                               l7290 3F46                                 l7274 3F04  
                               l5756 42D8                                 l5748 4294  
                               l5940 2930                                 l5924 287A  
                               l5916 283A                                 l6724 3404  
                               l6740 41BC                                 l6732 4A2A  
                               l6900 46B2                                 l6812 462C  
                               l6652 3798                                 l6644 3776  
                               l6556 35A6                                 l7188 110C  
                               l6396 16C8                                 l5950 3056  
                               l6750 4242                                 l5774 4CA8  
                               l6822 4666                                 l6814 4634  
                               l6830 4328                                 l6662 37C2  
                               l5782 3808                                 l5838 3E1A  
                               l7286 3F3C                                 l5768 42FE  
                               l6744 41FE                                 l6904 4708  
                               l6832 4338                                 l6664 37D0  
                               l6656 37A8                                 l6592 3664  
                               l6584 3642                                 l6496 2690  
                               l6488 25B4                                 l5882 2750  
                               l5970 30E0                                 l6674 473C  
                               l5778 4CBA                                 l6914 297C  
                               l6834 4342                                 l5866 4058  
                               l5858 3FD2                                 l5980 3124  
                               l5956 3090                                 l6676 474C  
                               l6764 31C2                                 l6844 48FE  
                               l6596 3674                                 l5788 3874  
                               l5894 279C                                 l5974 3100  
                               l6694 334E                                 l6870 3A44  
                               l6782 3256                                 l6838 4388  
                               l6846 490E                                 l6942 06C2  
                               l5888 278A                                 l5984 3144  
                               l6688 3314                                 l6880 40B0  
                               l6792 3288                                 l6952 06FC  
                               l5978 311C                                 l6866 3A2A  
                               l6890 416E                                 l6938 2B68  
                               l6794 329A                                 l6786 326A  
                               l6954 0712                                 l6946 06D8  
                               l5988 3160                                 l6876 3B26  
                               l6884 40CA                                 l6796 32A8  
                               l6972 07D4                                 l6948 06EE  
                               l6982 0846                                 l6958 0732  
                               l6966 07AC                                 l6896 4698  
                               l6976 081C                                 l6994 08A0  
                               l6986 0852                                 l6978 0834  
                               l6988 0884                                 STR_1 06A9  
                               STR_2 0692                                 _CRC8 49B4  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                         printf@tmpval 02D3  
                               u7130 2B90                                 u6330 4460  
                               u7070 45BA                                 u6521 26F0  
                               u7090 2D30                                 u6531 270E  
                               u8051 32F0                                 u7308 1348  
                               u7309 135C                                 u7078 45BC  
                               u8071 332A                                 u8151 319E  
                               u7408 1418                                 u7328 137A  
                               u7409 142C                                 u7329 138E  
                               u8170 31E8                                 u6731 3032  
                               u8500 092E                                 u7508 1514  
                               u7428 144C                                 u7348 13A8  
                               u7541 15B0                                 u7509 1528  
                               u7349 13BC                                 u7518 1548  
                               u6751 306C                                 u8175 31DE  
                               u7519 155C                                 u6808 2EB4  
                               u7608 176C                                 u7368 13C6  
                               u8505 0922                                 u6809 2EC8  
                               u7369 13DA                                 u7618 1786  
                               u6828 2EE0                                 u7708 18FE  
                               u7628 17A0                                 u7468 14B8  
                               u7388 13E4                                 u6829 2EF4  
                               u7469 14CC                                 u7389 13F8  
                               u8390 297A                                 u6838 2EFC  
                               u7718 1918                                 u7638 17BA  
                               u7398 13FE                                 u6839 2F10  
                               u7399 1412                                 u8720 0E5C  
                               u6848 2F18                                 u7728 1932  
                               u7648 17D4                                 u7488 14E2  
                               u6849 2F2C                                 u7489 14F8  
                               u6858 2F34                                 u7738 194C  
                               u7658 17EE                                 u6859 2F48  
                               u7748 1966                                 u7668 1808  
                               u7758 1980                                 u7678 1856  
                               u7598 1752                                 u7871 358A  
                               u7768 199A                                 u7778 19E8  
                               u7698 18E4                                 u7891 35B6  
                               _TMR1 000FCE                                 _WPUB 000F61  
                               _main 3EEA                         ___ftpack@arg 001B  
                       ___ftpack@exp 001E                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                      __CFG_BORV$190 000000                                 log@x 00A2  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 00AA  
                      __CFG_IESO$OFF 000000                         ___ftmul@cntr 007E  
                       ___param_bank 000010                         ___ftmul@sign 007F  
     i2UART_buff_modulo_inc@my_value 0005                    ADC_ISR@ADC_Result 000B  
                       ___fttol@exp1 0095                                ??_log 002B  
                       ___fttol@lval 0091                                ?_CRC8 001B  
                   __end_of_CRCcheck 301C                     ?_Battery_Convert 0001  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 4EB2  
                              ?_main 01ED                      __end_of___awdiv 4442  
                    __end_of___ftadd 2958                      __end_of___awmod 481A  
                    __end_of___ftdiv 342C                      _TMR1_StartTimer 4ED0  
                    __end_of___ftneg 4D44                      __end_of___lldiv 4688  
                    __end_of___ftmul 3188                      ___awdiv@divisor 0023  
                              _T1CON 000FCD                      __end_of___llmod 43AC  
                    __end_of___ftsub 4A56                      __end_of___fttol 32DA  
                              _LATA0 007C48                                _LATB0 007C50  
                              _LATB1 007C51                                _LATC0 007C58  
                              _LATA4 007C4C                                _LATC1 007C59  
                              _LATB3 007C53                                _LATA6 007C4E  
                              _LATD1 007C61                                _LATD2 007C62  
                              _LATC4 007C5C                                _LATD3 007C63  
                              _LATC5 007C5D                                _LATD5 007C65  
                     __CFG_DEBUG$OFF 000000                                i2l210 0058  
                              i2l212 0064                                i2l216 0070  
                              i2l208 004C                                i2l563 4564  
                              i2l594 4DAE                      ___awdiv@counter 0025  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96     __size_of_ADC_GetConversionResult 0016  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                       ___lltoft@exp 0060                 _EUSART1_Transmit_ISR 4C10  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     __end_of_TMR1_ISR 4AF2  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                                _begin 495A  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 0029  
                 __size_of_UART_init 003C                      __end_of_dpowers 0629  
                              _frexp 456A                                _errno 00E4  
                              _scale 1FD0                      __end_of_isdigit 4D66  
                              _group 0043                   __CFG_MCLRE$EXTMCLR 000000  
                      ___ftpack@sign 001F                                _putch 4EBE  
                              main@x 01F2                       SetBypass@state 001D  
            __end_of_TMR1_Initialize 4D88                                pclath 000FFA  
                        _Battery_Adc 00B0                                tablat 000FF5  
                        _Battery_Get 4BA6                        ??_Receive_get 0026  
               __size_of_crcBufS_get 00E8                                plusw2 000FDB  
                     begin@stuffpeek 006B                                status 000FD8  
                     __CFG_HFOFST$ON 000000                         ?_receiveData 0001  
                    RunBypas@cellbyp 006D                      RunBypas@batvolt 006F  
                     __CFG_PBADEN$ON 000000                         __end_of_CRC8 4A06  
                    CRCcheck@SentCRC 0060                      __initialization 481A  
                        log@exponent 00A5                         __end_of_main 3FC6  
                             ??_CRC8 001E                     __end_of_Set_4051 4BA6  
                          ??_ADC_ISR 0005          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 002B                        ___fttol@sign1 0090  
                      __activetblptr 000002                     __end_of_Send_put 4C70  
         ADC_StartConversion@channel 0002                 __size_of__tdiv_to_l_ 013A  
          __size_ofi2_UART_buff_size 0018                ?_EUSART1_Transmit_ISR 0001  
                   __end_of_RunBypas 3C20                        ?_Receive_peek 0001  
                             ?_begin 0060                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             ?_frexp 001B                     __end_of___altoft 4798  
                   ___llmod@dividend 0060                               ?_scale 0080  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                   ___awdiv@dividend 0021                     __end_of___awtoft 4B32  
                             _ANSELA 000F38                               ?_putch 0001  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                   __end_of___ftpack 430E                               _T1GCON 000FCC  
                    i2_UART_buff_get 44D6                               _RC1STA 000FAB  
                   __end_of___lltoft 495A                __size_of_Battery_Read 0018  
                    i2_UART_buff_put 3904                               i2l5000 1C6A  
                             i2l5020 1DA6                               i2l5012 1D12  
                             i2l5004 1C7E                       __CFG_WDTEN$OFF 000000  
                             i2l5040 1F18                               i2l5032 1E84  
                             i2l5024 1DF0                               i2l5016 1D5C  
                             i2l5008 1CC8                               i2l5050 1FC8  
                             i2l5044 1F62                               i2l5036 1ECE  
                             i2l5028 1E3A                               i2l4164 4CEE  
                             i2l5070 4C3A                               i2l5048 1F72  
        UART_buff_modulo_inc@modulus 001D                               i2l4196 4B76  
                             i2l4198 4B88                               i2l4922 4AE0  
                             i2l4914 4AC6                               i2l4932 1A32  
                             i2l4950 1ABC                               i2l4918 4AD0  
                             i2l4944 1A8E                               i2l4962 1B18  
                             i2l4938 1A60                               i2l4980 1BA2  
                             i2l4956 1AEA                               i2l4884 3990  
                             i2l4974 1B74                               i2l4878 3924  
                             i2l4992 1BFE                               i2l4968 1B46  
                             i2l4986 1BD0                               i2l4898 4560  
                             i2l4996 1C0E                               i2l4998 1C64  
                             _RCREG1 000FAE                        ??_Temp_Filter 002B  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                         _Temp_Fault 4688                       __CFG_XINST$OFF 000000  
                   __end_of__powers_ 0677                  __end_of_Receive_get 4EA4  
                   crcBufS_get@_this 001B                               ___ftge 417A  
                      _output_buffer 0500                     crcBufS_get@space 001E  
            __end_of_TMR1_StartTimer 4ED4                   __size_of_SetBypass 00F4  
                             ___wmul 4BDC                    __end_of_UART_init 4B6E  
                          ??___awdiv 0025                            CRC8@tempI 0020  
                          ??___ftadd 0090                       __CFG_STVREN$ON 000000  
                          ??___awmod 001F                            ??___ftdiv 0068  
                          ??___ftneg 001E                            ??___lldiv 0023  
                          ??___ftmul 0077                            ??___llmod 0028  
                          ??___ftsub 002B                            ??___fttol 008B  
                             _memset 4C9E                               _fround 2448  
                             clear_0 4820                               clear_1 482C  
                             clear_2 4838                               clear_3 4844  
                             clear_4 4850                               clear_5 485C  
                             clear_6 4868                     ___awdiv@quotient 0027  
                 __size_of_Temp_Read 0018                      ___awmod@divisor 001D  
                    ___awmod@counter 001F                               _printf 06B2  
                             _rx_len 0042                ___ftmul@f3_as_product 007B  
                       __pdataCOMRAM 0045                            ??_isdigit 001B  
                       _Battery_Read 4E3E                        Send_put@_data 0026  
                       _Battery_Volt 0100                         __mediumconst 0000  
                     ??_Receive_peek 001F                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
       __end_of_UART_buff_modulo_inc 4C9E        __size_of_INTERRUPT_Initialize 000C  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 488A  
                   __end_oflog@coeff 0692                           __accesstop 0060  
            __end_of__initialization 4880                           ___altoft@c 0023  
                          ?_CRCcheck 0001                           ___ftadd@f1 008A  
                         ___ftadd@f2 008D                           ___ftge@ff1 0064  
                         ___ftge@ff2 0067                   ?_SYSTEM_Initialize 0001  
                       eval_poly@res 009F                        ___rparam_used 000001  
                         ___ftdiv@f1 0062                           ___ftdiv@f2 0065  
                         ___ftdiv@f3 006C              ?i2_UART_buff_modulo_inc 0001  
                         ___ftneg@f1 001B                         ?_updateComms 0001  
                         ___awtoft@c 0060                           ___ftmul@f1 0071  
                         ___ftmul@f2 0074                           ___ftsub@f1 0096  
                         ___ftsub@f2 0099                  __end_of_Temp_Filter 2D0E  
                         ___fttol@f1 0087         __size_of_ADC_StartConversion 001A  
                     __pcstackCOMRAM 0001                   _crcBufS_status_put 3FC6  
                ??_SYSTEM_Initialize 0029                        __end_of_begin 49B4  
                          ?_TMR1_ISR 0001                           ___lltoft@c 0023  
                      __end_of_frexp 45FC                        __end_of_scale 2448  
                      __end_of_putch 4EC8                   UART_buff_get@_this 0021  
                ?_crcBufS_status_put 001B                Battery_Get@channelnum 0064  
              __end_of_UART_buff_get 44D6               ??_EUSART1_Transmit_ISR 000C  
            _ADC_GetConversionResult 4E6E                __end_of_UART_buff_put 3904  
                         __div_to_l_ 36B4                     ??_Battery_Filter 002B  
            __end_ofi2_UART_buff_get 456A              __end_ofi2_UART_buff_put 3A20  
        __end_of_EUSART1_Receive_ISR 4DC4                              CRC8@crc 0021  
                            CRC8@len 001D                              CRC8@sum 001E  
                            ??_begin 0029                        ?_Temp_Convert 0001  
                    __div_to_l_@exp1 0026                      __div_to_l_@cntr 0025  
                            ??_frexp 0020                              ??_scale 002B  
          __end_of_SYSTEM_Initialize 48F6               receiveData@holder_1240 0070  
                  __end_of_SetBypass 3D14                      __div_to_l_@quot 0021  
                            ??_putch 0027                  _addressErrorCounter 00DC  
                         __pbssBANK0 00B0                           __pbssBANK1 0100  
                         __pbssBANK2 0200                           __pbssBANK3 0300  
                         __pbssBANK4 0400                           __pbssBANK5 0500  
                 __size_of_eval_poly 00EE                      __CFG_PLLCFG$OFF 000000  
                  __end_of_Temp_Read 4E3E                          _Receive_get 4E94  
                          ?_Set_4051 0001                           ??_CRCcheck 0027  
               ??_crcBufS_status_put 001F       __end_ofi2_UART_buff_modulo_inc 4CFA  
                  begin@givenAddress 0063                Temp_Convert@steinhart 00AD  
            __size_of_UART_buff_init 001E              __size_of_UART_buff_peek 0026  
                        ?_Temp_Fault 0001              __size_of_UART_buff_size 0018  
                      __div_to_l_@f1 001B                        __div_to_l_@f2 001E  
                          ?_Send_put 0001                 __size_of_receiveData 06D6  
                 __CFG_CCP2MX$PORTC1 000000                          Temp_Fault@i 006E  
                            ?___ftge 0064                            ?_RunBypas 0001  
                            ?___wmul 0060                     ?_TMR1_StartTimer 0001  
                         ??_TMR1_ISR 0003                   __CFG_CCP3MX$PORTB5 000000  
                          ?___altoft 0023                              _ADC_ISR 1A14  
                            ?_memset 001B                              ?_fround 0080  
                         _crc_buffer 01DC                            ?___awtoft 0060  
                          ?___ftpack 001B                              ?_printf 009C  
                          ?___lltoft 0023              __size_of_ADC_Initialize 0018  
                      Temp_Convert@x 00AB               __size_of_Battery_Fault 00DA  
                    Temp_Fault@fault 006D                   UART_buff_put@_this 0021  
                   i2_UART_buff_size 4E56          i2UART_buff_modulo_inc@value 0001  
                     Battery_Fault@i 006E                              _OSCCON2 000FD2  
                     ??_Temp_Convert 002B                    _Receive_available 4DDE  
       UART_buff_modulo_inc@my_value 001F                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                _receiveArrayAddress 00E6                   ?_Receive_available 001D  
                         begin@error 0064                         ?_Battery_Get 0064  
                         ??_Set_4051 0003                          _Temp_Filter 2B6E  
                        _Temp_Aquire 003A                  ??_Receive_available 001F  
                  _alignErrorCounter 00DE                      __CFG_PWRTEN$OFF 000000  
                  __end_of__npowers_ 0650                           ??_Send_put 0026  
                            __Hparam 0000                           _scale$2055 0083  
                            __Lparam 0000                 __end_of_Receive_peek 4E94  
                          _AKNAKsend 0039                           ??_RunBypas 002B  
                    __size_of___ftge 00CE                              ___awdiv 43AC  
                            ___ftadd 26DA                 _UART_buff_modulo_inc 4C70  
                            ___awmod 4798                              ___ftdiv 32DA  
                            ___ftneg 4D20                              ___lldiv 45FC  
                    __size_of___wmul 0034                              ___ftmul 301C  
                            ___llmod 430E                              ___ftsub 4A06  
                            ___fttol 3188                              _calc_CS 003C  
                       __psmallconst 0600                           ??___altoft 0027  
          ??_ADC_GetConversionResult 0003                              __pcinit 481A  
                         ??___awtoft 0029                           ??___ftpack 0020  
                  __end_of_eval_poly 3E02                      __size_of_memset 002E  
                    __size_of_fround 0292                              __ramtop 0600  
                   i2UART_buff_get@c 000B                           ??___lltoft 0027  
                            __ptext0 3EEA                              __ptext1 4EC8  
                            __ptext2 133E                              __ptext3 4E84  
                            __ptext4 4CFA                              __ptext5 2EAE  
                            __ptext6 3FC6                              __ptext7 3E02  
                            __ptext8 4E94                              __ptext9 4DDE  
                    __size_of_printf 0C8C                     i2UART_buff_put@c 0009  
                          _T1CONbits 000FCD                          ?__div_to_l_ 001B  
                            _dpowers 0601                _OSCILLATOR_Initialize 4EA4  
          __end_of_Receive_available 4DF6                         __size_of_log 014E  
                            _isdigit 4D44                     ___awmod@dividend 001B  
                __size_of_Temp_Fault 008C                CRCcheck@calculatedCRC 0061  
                   ?i2_UART_buff_get 0007             ??_PIN_MANAGER_Initialize 001B  
                   ?i2_UART_buff_put 0007         crcBufS_status_put@wantedTime 0023  
           __size_of_Battery_Convert 010C                        ??_crcBufS_get 001F  
         __size_of_SYSTEM_Initialize 006C                 end_of_initialization 4880  
                            memset@c 001D                              memset@n 001F  
                            memset@p 0021                        __Lmediumconst 0000  
                      _Battery_Fault 40A0                      ___lldiv@divisor 001F  
                    ___lldiv@counter 0027                              printf@c 02E6  
                            printf@f 009C                ?_UART_buff_modulo_inc 001B  
               __size_of_updateComms 0008                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                   Battery_Convert@x 009A                       __tdiv_to_l_@f1 001B  
                   begin@stufftosend 0065                       __tdiv_to_l_@f2 001E  
                CRCcheck@arrayHolder 0062                        ??__tdiv_to_l_ 0021  
                          _UART_init 4B32               _dataAdressErrorCounter 00E2  
                         _rx_address 0040                  _ADC_StartConversion 4DC4  
                        _Volt_Aquire 003B                         begin@maxSize 0062  
                     ?_Battery_Fault 0001                          ___ftdiv@exp 006F  
              i2UART_buff_size@_this 0001                       _UART_buff_init 4D88  
                     _UART_buff_peek 4CFA                          printf@width 02DF  
                     _UART_buff_size 4DF6                  __end_of_crcBufS_get 3EEA  
                       SetBypass@pin 001B                    __size_of_CRCcheck 016E  
                __size_of__div_to_l_ 0134                          ___ftmul@exp 007A  
               ?_ADC_StartConversion 0001                        _moduleAddress 003E  
               __end_of_Temp_Convert 2B6E                           CRCcheck@rt 0065  
       __end_of_INTERRUPT_Initialize 4EBE                       __end_of___ftge 4248  
                    _crcErrorCounter 00E0                       __end_of___wmul 4C10  
                      __pidataCOMRAM 4ED4                    __size_of_TMR1_ISR 004E  
                     _ADC_Initialize 4E0E                           ?_UART_init 0001  
             ?_OSCILLATOR_Initialize 0001                       __end_of_memset 4CCC  
                     __end_of_fround 26DA                       __end_of_printf 133E  
                       receiveData@r 0077           __size_of_Receive_available 0018  
                       receiveData@u 0075                  start_initialization 481A  
                         eval_poly@d 0099                           eval_poly@n 009B  
                         eval_poly@x 0096      __size_of_PIN_MANAGER_Initialize 004E  
                __end_of__tdiv_to_l_ 36B4                crcBufS_get@wantedTime 0025  
                        __end_of_log 357A                          putch@txData 0027  
             __end_of_UART_buff_init 4DA6               __end_of_UART_buff_peek 4D20  
                     UART_buff_get@c 0025               __end_of_UART_buff_size 4E0E  
                         frexp@value 001B                         ?_Receive_get 0001  
                  ??_Battery_Convert 0098                       UART_buff_put@c 0023  
                          _SetBypass 3C20                __size_of_Receive_peek 0010  
                    ___llmod@divisor 0064                 __size_of_Battery_Get 0036  
                    ___llmod@counter 0028                         ??_Temp_Fault 002B  
           __end_ofi2_UART_buff_size 4E6E                    __size_of_Set_4051 0038  
                          _Temp_DegF 015A                     _PrevBattery_Volt 011E  
                          _Temp_Done 00D8                            _Temp_Read 4E26  
              ??_ADC_StartConversion 0001               ??_UART_buff_modulo_inc 001F  
           __size_of_TMR1_Initialize 0022                             CRC8@data 001B  
                    crcBufS_get@time 001D                             ??___ftge 006A  
                  __size_of_Send_put 002E                             ??___wmul 0029  
             __end_of_ADC_Initialize 4E26                            RunBypas@i 0072  
                           ?_ADC_ISR 0001                             ??_memset 0021  
                           ??_fround 002B                    __size_of_RunBypas 00F4  
                           ??_printf 00A3                    __size_of___altoft 0084  
                         fround@prec 0089                    __size_of___awtoft 0040  
                  __size_of___ftpack 00C6                            _Volt_Done 00DA  
                  __size_of___lltoft 0064                          __pbssCOMRAM 002B  
      __size_of_EUSART1_Transmit_ISR 0032                        __pcstackBANK0 0060  
                      __pcstackBANK1 01ED                        __pcstackBANK2 02CE  
                 __end_of_Temp_Fault 4714                         _Receive_peek 4E84  
                       _isdigit$1644 001C                  UART_buff_init@_this 0023  
                      _PrevTemp_DegF 013C                          _crcBufS_get 3E02  
                UART_buff_peek@_this 001B                      ??_Battery_Fault 002B  
                    ?_UART_buff_init 0023                      ?_UART_buff_peek 001B  
                    ?_UART_buff_size 001B         __size_of_EUSART1_Receive_ISR 001E  
                       ?_Temp_Filter 0001                        ??_receiveData 0067  
                         ?_SetBypass 001B          __size_of_crcBufS_status_put 00DA  
             __size_of_UART_buff_get 0094               __size_of_UART_buff_put 011C  
                         ?_Temp_Read 0001               _PIN_MANAGER_Initialize 4A56  
                  _Temp_Convert$2051 00A7                            __pintcode 0008  
                  _Temp_Convert$2052 00A9                             ?___awdiv 0021  
                           ?___ftadd 008A                             ?___awmod 001B  
                           ?___ftdiv 0062                             ?___ftneg 001B  
                           ?___lldiv 001B                             ?___ftmul 0071  
                           ?___llmod 0060                             ?___ftsub 0096  
                          __npowers_ 0629                             ?___fttol 0087  
                       Temp_Filter@x 0096                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 000D                          __tdiv_to_l_ 357A  
                        ??_UART_init 0025                 i2UART_buff_get@_this 0007  
                       ??__div_to_l_ 0021                             _BAUD1CON 000FB8  
                        __smallconst 0600             __size_of_TMR1_StartTimer 0004  
                           ?_isdigit 0001                            _eval_poly 3D14  
                     __size_of_begin 005A                       __size_of_frexp 0092  
                     __size_of_scale 0478                       __size_of_putch 000A  
               _INTERRUPT_Initialize 4EB2                         _receiveArray 0178  
            __size_of_Battery_Filter 01A0                             _CRCcheck 2EAE  
                     ___wmul@product 0029                __size_of_Temp_Convert 0216  
                UART_buff_size@_this 001B                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 00A2  
                           i2u521_40 44F4                             _PIR1bits 000F9E  
                 __end_of__div_to_l_ 37E8                             i2u522_40 4AC2  
                           i2u528_40 4C2A                      Battery_Filter@x 0096  
                begin@stuffavailable 0069                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                  __end_of_receiveData 1A14  
                           _TMR1_ISR 4AA4                         _input_buffer 0400  
                          _rx_buffer 0300                    ??_TMR1_Initialize 001B  
                   __size_of_ADC_ISR 05BC                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 0060                 i2UART_buff_put@_this 0007  
                          main@x_890 01F4                           printf@flag 02DD  
                         printf@fval 02E1                        _UART_buff_get 4442  
                         printf@prec 02E4                        ?_Battery_Read 0001  
                      _UART_buff_put 37E8                           ?_eval_poly 0096  
           ??i2_UART_buff_modulo_inc 0005                         _Temp_Convert 2958  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0001  
                  _sendStructAddress 002F             __size_ofi2_UART_buff_get 0094  
                           _Set_4051 4B6E             __size_ofi2_UART_buff_put 011C  
                        ??_SetBypass 001F                            frexp@eptr 001E  
                      ??_updateComms 0027                 __size_of_Receive_get 0010  
                           __Hrparam 0000                          ??_Temp_Read 0003  
                           _Send_put 4C42                             _Temp_Adc 00EA  
                           __Lrparam 0000             ?_ADC_GetConversionResult 0001  
                 __CFG_BOREN$SBORDIS 000000                             _RunBypas 3B2C  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 001B  
                   __size_of___awdiv 0096                     __size_of___ftadd 027E  
                   __size_of___awmod 0082                     __size_of___ftdiv 0152  
                   __size_of___ftneg 0024                     __size_of___lldiv 008C  
                           ___altoft 4714                     __size_of___ftmul 016C  
                   __size_of___llmod 009E                     __size_of___ftsub 0050  
                   __size_of___fttol 0152                  begin@stufftoreceive 0067  
                           ___awtoft 4AF2                             ___ftpack 4248  
                        _fround$2053 0086                          _fround$2054 0083  
                           ___lltoft 48F6                       ?_UART_buff_get 0021  
                     ??_Battery_Read 0003                       ?_UART_buff_put 0021  
                        CRC8@extract 001F                      _Battery_Convert 3A20  
                 Battery_Fault@fault 006D                     __size_of_isdigit 0022  
           crcBufS_status_put@status 001E                             __ptext10 4DF6  
                           __ptext11 49B4                             __ptext20 2448  
                           __ptext12 06B2                             __ptext21 4798  
                           __ptext13 1FD0                           _T1GCONbits 000FCC  
                           __ptext30 2958                             __ptext22 357A  
                           __ptext14 4EBE                             __ptext31 342C  
                           __ptext23 36B4                             __ptext15 4C42  
                           __ptext40 4B32                             __ptext32 456A  
                           __ptext24 48F6                             __ptext16 37E8  
                           __ptext41 4D88                             __ptext33 3D14  
                           __ptext25 430E                             __ptext17 4442  
                           __ptext50 3C20                             __ptext42 4C9E  
                           __ptext34 4AF2                             __ptext26 45FC  
                           __ptext18 4C70                             __ptext51 4BA6  
                           __ptext43 4D66                             __ptext35 4A06  
                           __ptext27 3188                             __ptext19 4D44  
                           __ptext60 26DA                             __ptext52 40A0  
                           __ptext44 4ED0                             __ptext36 2B6E  
                           __ptext28 4D20                             __ptext61 4248  
                           __ptext53 417A                             __ptext45 4A56  
                           __ptext37 488A                             __ptext29 4688  
                           __ptext70 3904                             __ptext54 3A20  
                           __ptext46 4EA4                             __ptext38 495A  
                           __ptext71 4CCC                             __ptext63 4AA4  
                           __ptext55 32DA                             __ptext47 4EB2  
                           __ptext39 43AC                             __ptext72 1A14  
                           __ptext64 4E26                             __ptext56 4714  
                           __ptext48 4E0E                             __ptext73 4B6E  
                           __ptext65 4E3E                             __ptext57 2D0E  
                           __ptext49 3B2C                             __ptext74 4DC4  
                           __ptext66 4C10                             __ptext58 4BDC  
                           __ptext75 4E6E                             __ptext67 4E56  
                           __ptext59 301C                             __ptext76 0000  
                           __ptext68 44D6                             __ptext69 4DA6  
                           __powers_ 0650                    ??_TMR1_StartTimer 001B  
                      __size_of_CRC8 0052                             begin@ptr 0060  
            EUSART1_Receive_ISR@data 000C                        _returnAddress 003F  
                      __size_of_main 00DC                          _receiveData 133E  
                     _Transmit_stall 0045                         _TmpTemp_DegF 01BE  
               __size_of_Temp_Filter 01A0                    ?i2_UART_buff_size 0001  
                         _RC1STAbits 000FAB                   ??i2_UART_buff_size 0003  
                       _serial_write 0035                  __end_of_updateComms 4ED0  
 __end_of_INTERRUPT_InterruptManager 00AA           _INTERRUPT_InterruptManager 0008  
                           main@argc 01ED                            printf@exp 02DB  
                           main@argv 01EF                            printf@val 02D7  
                _EUSART1_Receive_ISR 4DA6                    receiveData@holder 006D  
                           log@coeff 0677                           _INTCONbits 000FF2  
                        ??_eval_poly 009D            UART_buff_modulo_inc@value 001B  
                   ??_UART_buff_init 0025                     ??_UART_buff_peek 001D  
                   ??_UART_buff_size 001D                             isdigit@c 001D  
             ??_INTERRUPT_Initialize 001B                             memset@p1 001B  
                   _serial_available 0031                             scale@scl 0086  
    __size_ofi2_UART_buff_modulo_inc 002E                         ?_crcBufS_get 001B  
                      ??_Battery_Get 002B                             intlevel2 0000  
            crcBufS_status_put@_this 001B                     __tdiv_to_l_@exp1 0029  
                   __tdiv_to_l_@cntr 0028                       _Battery_Filter 2D0E  
                      _CountCallBack 002D                     __tdiv_to_l_@quot 0024  
               ?_EUSART1_Receive_ISR 0001          __end_of_ADC_StartConversion 4DDE  
                   _TempBattery_Volt 01A0                     ___lldiv@dividend 001B  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 4E84  
       __end_of_EUSART1_Transmit_ISR 4C42                          _ring_buffer 0200  
                   ??_ADC_Initialize 001B                    ??i2_UART_buff_get 0009  
                        _serial_peek 00E8                          _serial_read 0033  
                  ??i2_UART_buff_put 000A                             printf@ap 02D1  
      __size_of_UART_buff_modulo_inc 002E              __end_of_Battery_Convert 3B2C  
                    ??_UART_buff_get 0023                      ??_UART_buff_put 0024  
                       ?__tdiv_to_l_ 001B                          _printf$2056 02CE  
             crcBufS_status_put@time 001D                     ___lldiv@quotient 0023  
          receiveData@crcHolder_1241 0074                    __CFG_T3CMX$PORTC0 000000  
                     _maxDataAddress 003D               __end_of_Battery_Filter 2EAE  
         __end_of_crcBufS_status_put 40A0                ??_EUSART1_Receive_ISR 000C  
     __end_of_PIN_MANAGER_Initialize 4AA4                __end_of_Battery_Fault 417A  
                  __CFG_FOSC$INTIO67 000000                 __end_of_Battery_Read 4E56  
                    _TMR1_Initialize 4D66                          _updateComms 4EC8  
                   _ADC_Buffer_Point 002B                  __end_of_Battery_Get 4BDC  
                    Set_4051@Channel 0001  
