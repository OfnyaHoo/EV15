

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Apr 30 03:52:45 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           	psect	smallconst
    56  000600                     __psmallconst:
    57                           	opt stack 0
    58  000600  00                 	db	0
    59  000601                     log@coeff:
    60                           	opt stack 0
    61  000601  00                 	db	0
    62  000602  00                 	db	0
    63  000603  00                 	db	0
    64  000604  00                 	db	0
    65  000605  80                 	db	128
    66  000606  3F                 	db	63
    67  000607  F0                 	db	240
    68  000608  FF                 	db	255
    69  000609  BE                 	db	190
    70  00060A  E2                 	db	226
    71  00060B  A9                 	db	169
    72  00060C  3E                 	db	62
    73  00060D  83                 	db	131
    74  00060E  76                 	db	118
    75  00060F  BE                 	db	190
    76  000610  AE                 	db	174
    77  000611  2B                 	db	43
    78  000612  3E                 	db	62
    79  000613  3C                 	db	60
    80  000614  C3                 	db	195
    81  000615  BD                 	db	189
    82  000616  D2                 	db	210
    83  000617  13                 	db	19
    84  000618  3D                 	db	61
    85  000619  78                 	db	120
    86  00061A  D3                 	db	211
    87  00061B  BB                 	db	187
    88  00061C                     __end_oflog@coeff:
    89                           	opt stack 0
    90  0000                     _TMR1	set	4046
    91  0000                     _ADCON0	set	4034
    92  0000                     _ADCON0bits	set	4034
    93  0000                     _ADCON1	set	4033
    94  0000                     _ADCON2	set	4032
    95  0000                     _ADRESH	set	4036
    96  0000                     _ADRESL	set	4035
    97  0000                     _ANSELA	set	3896
    98  0000                     _ANSELB	set	3897
    99  0000                     _ANSELC	set	3898
   100  0000                     _ANSELD	set	3899
   101  0000                     _ANSELE	set	3900
   102  0000                     _BAUD1CON	set	4024
   103  0000                     _INTCON2bits	set	4081
   104  0000                     _INTCONbits	set	4082
   105  0000                     _IPR1bits	set	3999
   106  0000                     _LATA	set	3977
   107  0000                     _LATB	set	3978
   108  0000                     _LATC	set	3979
   109  0000                     _LATD	set	3980
   110  0000                     _LATE	set	3981
   111  0000                     _OSCCON	set	4051
   112  0000                     _OSCCON2	set	4050
   113  0000                     _OSCTUNE	set	3995
   114  0000                     _PIE1bits	set	3997
   115  0000                     _PIR1bits	set	3998
   116  0000                     _RC1REG	set	4014
   117  0000                     _RC1STA	set	4011
   118  0000                     _RC1STAbits	set	4011
   119  0000                     _RCONbits	set	4048
   120  0000                     _RCREG1	set	4014
   121  0000                     _SPBRG1	set	4015
   122  0000                     _SPBRGH1	set	4016
   123  0000                     _T1CON	set	4045
   124  0000                     _T1CONbits	set	4045
   125  0000                     _T1GCON	set	4044
   126  0000                     _T1GCONbits	set	4044
   127  0000                     _TMR1H	set	4047
   128  0000                     _TMR1L	set	4046
   129  0000                     _TRISA	set	3986
   130  0000                     _TRISB	set	3987
   131  0000                     _TRISC	set	3988
   132  0000                     _TRISD	set	3989
   133  0000                     _TRISE	set	3990
   134  0000                     _TX1REG	set	4013
   135  0000                     _TX1STA	set	4012
   136  0000                     _TXREG1	set	4013
   137  0000                     _WPUB	set	3937
   138  0000                     _LATA0	set	31816
   139  0000                     _LATA4	set	31820
   140  0000                     _LATA6	set	31822
   141  0000                     _LATB0	set	31824
   142  0000                     _LATB1	set	31825
   143  0000                     _LATB3	set	31827
   144  0000                     _LATC0	set	31832
   145  0000                     _LATC1	set	31833
   146  0000                     _LATC4	set	31836
   147  0000                     _LATC5	set	31837
   148  0000                     _LATD1	set	31841
   149  0000                     _LATD2	set	31842
   150  0000                     _LATD3	set	31843
   151  0000                     _LATD5	set	31845
   152  00061C  00                 	db	0	; dummy byte at the end
   153  0000                     
   154                           	psect	nvCOMRAM
   155  000046                     __pnvCOMRAM:
   156                           	opt stack 0
   157  000046                     _timer1ReloadVal:
   158                           	opt stack 0
   159  000046                     	ds	2
   160  000048                     _eusart1TxBufferRemaining:
   161                           	opt stack 0
   162  000048                     	ds	1
   163                           
   164                           ; #config settings
   165  0000                     
   166                           	psect	cinit
   167  001E74                     __pcinit:
   168                           	opt stack 0
   169  001E74                     start_initialization:
   170                           	opt stack 0
   171  001E74                     __initialization:
   172                           	opt stack 0
   173                           
   174                           ; Clear objects allocated to BANK1 (170 bytes)
   175  001E74  EE01  F000         	lfsr	0,__pbssBANK1
   176  001E78  0EAA               	movlw	170
   177  001E7A                     clear_0:
   178  001E7A  6AEE               	clrf	postinc0,c
   179  001E7C  06E8               	decf	wreg,f,c
   180  001E7E  E1FD               	bnz	clear_0
   181                           
   182                           ; Clear objects allocated to BANK0 (106 bytes)
   183  001E80  EE00  F060         	lfsr	0,__pbssBANK0
   184  001E84  0E6A               	movlw	106
   185  001E86                     clear_1:
   186  001E86  6AEE               	clrf	postinc0,c
   187  001E88  06E8               	decf	wreg,f,c
   188  001E8A  E1FD               	bnz	clear_1
   189                           
   190                           ; Clear objects allocated to COMRAM (17 bytes)
   191  001E8C  EE00  F035         	lfsr	0,__pbssCOMRAM
   192  001E90  0E11               	movlw	17
   193  001E92                     clear_2:
   194  001E92  6AEE               	clrf	postinc0,c
   195  001E94  06E8               	decf	wreg,f,c
   196  001E96  E1FD               	bnz	clear_2
   197  001E98                     end_of_initialization:
   198                           	opt stack 0
   199  001E98                     __end_of__initialization:
   200                           	opt stack 0
   201  001E98  0E00               	movlw	low (__Lmediumconst shr (0+16))
   202  001E9A  6EF8               	movwf	tblptru,c
   203  001E9C  0100               	movlb	0
   204  001E9E  EFD8  F00E         	goto	_main	;jump to C main() function
   205                           tblptru	equ	0xFF8
   206                           postinc0	equ	0xFEE
   207                           wreg	equ	0xFE8
   208                           
   209                           	psect	bssCOMRAM
   210  000035                     __pbssCOMRAM:
   211                           	opt stack 0
   212  000035                     _eusart1TxBuffer:
   213                           	opt stack 0
   214  000035                     	ds	8
   215  00003D                     _ADC_Buffer_Point:
   216                           	opt stack 0
   217  00003D                     	ds	2
   218  00003F                     _Temp_Aquire:
   219                           	opt stack 0
   220  00003F                     	ds	1
   221  000040                     _Volt_Aquire:
   222                           	opt stack 0
   223  000040                     	ds	1
   224  000041                     _eusart1RxCount:
   225                           	opt stack 0
   226  000041                     	ds	1
   227  000042                     _eusart1RxHead:
   228                           	opt stack 0
   229  000042                     	ds	1
   230  000043                     _eusart1RxTail:
   231                           	opt stack 0
   232  000043                     	ds	1
   233  000044                     _eusart1TxHead:
   234                           	opt stack 0
   235  000044                     	ds	1
   236  000045                     _eusart1TxTail:
   237                           	opt stack 0
   238  000045                     	ds	1
   239                           tblptru	equ	0xFF8
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           
   243                           	psect	bssBANK0
   244  000060                     __pbssBANK0:
   245                           	opt stack 0
   246  000060                     _Battery_Volt:
   247                           	opt stack 0
   248  000060                     	ds	30
   249  00007E                     _Temp_DegF:
   250                           	opt stack 0
   251  00007E                     	ds	30
   252  00009C                     _Battery_Adc:
   253                           	opt stack 0
   254  00009C                     	ds	20
   255  0000B0                     _Temp_Done:
   256                           	opt stack 0
   257  0000B0                     	ds	2
   258  0000B2                     _Volt_Done:
   259                           	opt stack 0
   260  0000B2                     	ds	2
   261  0000B4                     _errno:
   262                           	opt stack 0
   263  0000B4                     	ds	2
   264  0000B6                     _Temp_Adc:
   265                           	opt stack 0
   266  0000B6                     	ds	20
   267                           tblptru	equ	0xFF8
   268                           postinc0	equ	0xFEE
   269                           wreg	equ	0xFE8
   270                           
   271                           	psect	bssBANK1
   272  000100                     __pbssBANK1:
   273                           	opt stack 0
   274  000100                     _eusart1RxBuffer:
   275                           	opt stack 0
   276  000100                     	ds	50
   277  000132                     _PrevBattery_Volt:
   278                           	opt stack 0
   279  000132                     	ds	30
   280  000150                     _PrevTemp_DegF:
   281                           	opt stack 0
   282  000150                     	ds	30
   283  00016E                     _TempBattery_Volt:
   284                           	opt stack 0
   285  00016E                     	ds	30
   286  00018C                     _TmpTemp_DegF:
   287                           	opt stack 0
   288  00018C                     	ds	30
   289                           tblptru	equ	0xFF8
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           
   293                           	psect	cstackBANK0
   294  0000CA                     __pcstackBANK0:
   295                           	opt stack 0
   296  0000CA                     ___ftmul@exp:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x0
   300  0000CA                     	ds	1
   301  0000CB                     ___ftmul@f3_as_product:
   302                           	opt stack 0
   303                           
   304                           ; 3 bytes @ 0x1
   305  0000CB                     	ds	3
   306  0000CE                     ___ftmul@cntr:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0x4
   310  0000CE                     	ds	1
   311  0000CF                     ___ftmul@sign:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x5
   315  0000CF                     	ds	1
   316  0000D0                     ?___ftadd:
   317                           	opt stack 0
   318  0000D0                     ___ftadd@f1:
   319                           	opt stack 0
   320                           
   321                           ; 3 bytes @ 0x6
   322  0000D0                     	ds	3
   323  0000D3                     ___ftadd@f2:
   324                           	opt stack 0
   325                           
   326                           ; 3 bytes @ 0x9
   327  0000D3                     	ds	3
   328  0000D6                     ___ftadd@sign:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0xC
   332  0000D6                     	ds	1
   333  0000D7                     ___ftadd@exp2:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0xD
   337  0000D7                     	ds	1
   338  0000D8                     ___ftadd@exp1:
   339                           	opt stack 0
   340                           
   341                           ; 1 bytes @ 0xE
   342  0000D8                     	ds	1
   343  0000D9                     ?___ftsub:
   344                           	opt stack 0
   345  0000D9                     ?_eval_poly:
   346                           	opt stack 0
   347  0000D9                     Battery_Filter@x:
   348                           	opt stack 0
   349  0000D9                     Temp_Filter@x:
   350                           	opt stack 0
   351  0000D9                     ___ftsub@f1:
   352                           	opt stack 0
   353  0000D9                     eval_poly@x:
   354                           	opt stack 0
   355                           
   356                           ; 3 bytes @ 0xF
   357  0000D9                     	ds	2
   358  0000DB                     ??_Battery_Convert:
   359                           
   360                           ; 0 bytes @ 0x11
   361  0000DB                     	ds	1
   362  0000DC                     eval_poly@d:
   363                           	opt stack 0
   364  0000DC                     ___ftsub@f2:
   365                           	opt stack 0
   366                           
   367                           ; 3 bytes @ 0x12
   368  0000DC                     	ds	1
   369  0000DD                     Battery_Convert@x:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x13
   373  0000DD                     	ds	1
   374  0000DE                     eval_poly@n:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x14
   378  0000DE                     	ds	2
   379  0000E0                     ??_eval_poly:
   380                           
   381                           ; 0 bytes @ 0x16
   382  0000E0                     	ds	2
   383  0000E2                     eval_poly@res:
   384                           	opt stack 0
   385                           
   386                           ; 3 bytes @ 0x18
   387  0000E2                     	ds	3
   388  0000E5                     ?_log:
   389                           	opt stack 0
   390  0000E5                     log@x:
   391                           	opt stack 0
   392                           
   393                           ; 3 bytes @ 0x1B
   394  0000E5                     	ds	3
   395  0000E8                     log@exponent:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x1E
   399  0000E8                     	ds	2
   400  0000EA                     ??_Temp_Convert:
   401                           
   402                           ; 0 bytes @ 0x20
   403  0000EA                     	ds	2
   404  0000EC                     _Temp_Convert$1594:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x22
   408  0000EC                     	ds	2
   409  0000EE                     _Temp_Convert$1595:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x24
   413  0000EE                     	ds	2
   414  0000F0                     Temp_Convert@x:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x26
   418  0000F0                     	ds	2
   419  0000F2                     Temp_Convert@steinhart:
   420                           	opt stack 0
   421                           
   422                           ; 3 bytes @ 0x28
   423  0000F2                     	ds	3
   424  0000F5                     
   425                           ; 2 bytes @ 0x2B
   426  0000F5                     	ds	2
   427  0000F7                     
   428                           ; 3 bytes @ 0x2D
   429  0000F7                     	ds	3
   430                           tblptru	equ	0xFF8
   431                           postinc0	equ	0xFEE
   432                           wreg	equ	0xFE8
   433                           
   434                           	psect	cstackCOMRAM
   435  000001                     __pcstackCOMRAM:
   436                           	opt stack 0
   437  000001                     ??_TMR1_ISR:
   438  000001                     ??_ADC_StartConversion:
   439  000001                     ?_ADC_GetConversionResult:
   440                           	opt stack 0
   441  000001                     Set_4051@Channel:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x0
   445  000001                     	ds	1
   446  000002                     ADC_StartConversion@channel:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x1
   450  000002                     	ds	1
   451  000003                     ??_Set_4051:
   452  000003                     ??_ADC_GetConversionResult:
   453                           
   454                           ; 0 bytes @ 0x2
   455  000003                     	ds	2
   456  000005                     ??_ADC_ISR:
   457                           
   458                           ; 0 bytes @ 0x4
   459  000005                     	ds	2
   460  000007                     ADC_ISR@ADC_Result:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x6
   464  000007                     	ds	2
   465  000009                     ??_INTERRUPT_InterruptManager:
   466                           
   467                           ; 0 bytes @ 0x8
   468  000009                     	ds	14
   469  000017                     ?___awdiv:
   470                           	opt stack 0
   471  000017                     ?___ftpack:
   472                           	opt stack 0
   473  000017                     ?_frexp:
   474                           	opt stack 0
   475  000017                     SetBypas@pin:
   476                           	opt stack 0
   477  000017                     ___awdiv@dividend:
   478                           	opt stack 0
   479  000017                     ___ftpack@arg:
   480                           	opt stack 0
   481  000017                     frexp@value:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x16
   485  000017                     	ds	2
   486  000019                     SetBypas@state:
   487                           	opt stack 0
   488  000019                     ___awdiv@divisor:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x18
   492  000019                     	ds	1
   493  00001A                     ___ftpack@exp:
   494                           	opt stack 0
   495  00001A                     frexp@eptr:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x19
   499  00001A                     	ds	1
   500  00001B                     ??_SetBypas:
   501  00001B                     ___awdiv@counter:
   502                           	opt stack 0
   503  00001B                     ___ftpack@sign:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x1A
   507  00001B                     	ds	1
   508  00001C                     ??___ftpack:
   509  00001C                     ??_frexp:
   510  00001C                     ___awdiv@sign:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x1B
   514  00001C                     	ds	1
   515  00001D                     ___awdiv@quotient:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x1C
   519  00001D                     	ds	2
   520  00001F                     ?___wmul:
   521                           	opt stack 0
   522  00001F                     ?___ftdiv:
   523                           	opt stack 0
   524  00001F                     ___wmul@multiplier:
   525                           	opt stack 0
   526  00001F                     ___ftdiv@f1:
   527                           	opt stack 0
   528                           
   529                           ; 3 bytes @ 0x1E
   530  00001F                     	ds	2
   531  000021                     ___wmul@multiplicand:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x20
   535  000021                     	ds	1
   536  000022                     ___ftdiv@f2:
   537                           	opt stack 0
   538                           
   539                           ; 3 bytes @ 0x21
   540  000022                     	ds	1
   541  000023                     ___wmul@product:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x22
   545  000023                     	ds	2
   546  000025                     ??___ftdiv:
   547  000025                     ?_Battery_Get:
   548                           	opt stack 0
   549  000025                     ?___awtoft:
   550                           	opt stack 0
   551  000025                     Battery_Get@channelnum:
   552                           	opt stack 0
   553  000025                     ___awtoft@c:
   554                           	opt stack 0
   555  000025                     ___ftge@ff1:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x24
   559  000025                     	ds	3
   560  000028                     ___awtoft@sign:
   561                           	opt stack 0
   562  000028                     ___ftdiv@cntr:
   563                           	opt stack 0
   564  000028                     ___ftge@ff2:
   565                           	opt stack 0
   566                           
   567                           ; 3 bytes @ 0x27
   568  000028                     	ds	1
   569  000029                     ?___ftmul:
   570                           	opt stack 0
   571  000029                     ___ftdiv@f3:
   572                           	opt stack 0
   573  000029                     ___ftmul@f1:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x28
   577  000029                     	ds	2
   578  00002B                     ??___ftge:
   579                           
   580                           ; 0 bytes @ 0x2A
   581  00002B                     	ds	1
   582  00002C                     ___ftdiv@exp:
   583                           	opt stack 0
   584  00002C                     ___ftmul@f2:
   585                           	opt stack 0
   586                           
   587                           ; 3 bytes @ 0x2B
   588  00002C                     	ds	1
   589  00002D                     ___ftdiv@sign:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x2C
   593  00002D                     	ds	1
   594  00002E                     Battery_Fault@fault:
   595                           	opt stack 0
   596  00002E                     Temp_Fault@fault:
   597                           	opt stack 0
   598  00002E                     RunBypas@cellbyp:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x2D
   602  00002E                     	ds	1
   603  00002F                     ??___ftmul:
   604  00002F                     Battery_Fault@i:
   605                           	opt stack 0
   606  00002F                     Temp_Fault@i:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x2E
   610  00002F                     	ds	1
   611  000030                     RunBypas@batvolt:
   612                           	opt stack 0
   613                           
   614                           ; 3 bytes @ 0x2F
   615  000030                     	ds	2
   616  000032                     ??___ftadd:
   617                           
   618                           ; 0 bytes @ 0x31
   619  000032                     	ds	1
   620  000033                     RunBypas@i:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x32
   624  000033                     	ds	2
   625  000035                     tblptru	equ	0xFF8
   626                           postinc0	equ	0xFEE
   627                           wreg	equ	0xFE8
   628                           
   629                           ; 0 bytes @ 0x34
   630 ;;
   631 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   632 ;;
   633 ;; *************** function _main *****************
   634 ;; Defined at:
   635 ;;		line 31 in file "Main.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;  argc            2   43[BANK0 ] int 
   638 ;;  argv            3   45[BANK0 ] PTR PTR unsigned char 
   639 ;; Auto vars:     Size  Location     Type
   640 ;;		None
   641 ;; Return value:  Size  Location     Type
   642 ;;                  2   43[BANK0 ] int 
   643 ;; Registers used:
   644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   650 ;;      Params:         0       5       0       0       0       0       0
   651 ;;      Locals:         0       0       0       0       0       0       0
   652 ;;      Temps:          0       0       0       0       0       0       0
   653 ;;      Totals:         0       5       0       0       0       0       0
   654 ;;Total ram usage:        5 bytes
   655 ;; Hardware stack levels required when called:    8
   656 ;; This function calls:
   657 ;;		_Battery_Convert
   658 ;;		_Battery_Fault
   659 ;;		_RunBypas
   660 ;;		_SYSTEM_Initialize
   661 ;;		_Temp_Convert
   662 ;;		_Temp_Fault
   663 ;; This function is called by:
   664 ;;		Startup code after reset
   665 ;; This function uses a non-reentrant model
   666 ;;
   667                           
   668                           	psect	text0
   669  001DB0                     __ptext0:
   670                           	opt stack 0
   671  001DB0                     _main:
   672                           	opt stack 23
   673                           
   674                           ;Main.c: 33: SYSTEM_Initialize();
   675                           
   676                           ;incstack = 0
   677  001DB0  EC8C  F00F         	call	_SYSTEM_Initialize	;wreg free
   678                           
   679                           ;Main.c: 52: (INTCONbits.GIE = 1);
   680  001DB4  8EF2               	bsf	intcon,7,c	;volatile
   681                           
   682                           ;Main.c: 55: (INTCONbits.PEIE = 1);
   683  001DB6  8CF2               	bsf	intcon,6,c	;volatile
   684  001DB8                     l3444:
   685                           
   686                           ;Main.c: 65: {
   687                           ;Main.c: 66: if (Temp_Done)
   688  001DB8  0100               	movlb	0	; () banked
   689  001DBA  51B1               	movf	(_Temp_Done+1)& (0+255),w,b
   690  001DBC  11B0               	iorwf	_Temp_Done& (0+255),w,b
   691  001DBE  B4D8               	btfsc	status,2,c
   692  001DC0  D004               	goto	l3450
   693                           
   694                           ; BSR set to: 0
   695                           ;Main.c: 67: {
   696                           ;Main.c: 68: Temp_Convert();
   697  001DC2  ECA7  F006         	call	_Temp_Convert	;wreg free
   698                           
   699                           ;Main.c: 69: Temp_Fault();
   700  001DC6  EC1C  F00E         	call	_Temp_Fault	;wreg free
   701  001DCA                     l3450:
   702                           
   703                           ;Main.c: 70: }
   704                           ;Main.c: 71: if (Volt_Done)
   705  001DCA  0100               	movlb	0	; () banked
   706  001DCC  51B3               	movf	(_Volt_Done+1)& (0+255),w,b
   707  001DCE  11B2               	iorwf	_Volt_Done& (0+255),w,b
   708  001DD0  B4D8               	btfsc	status,2,c
   709  001DD2  D7F2               	goto	l3444
   710                           
   711                           ; BSR set to: 0
   712                           ;Main.c: 72: {
   713                           ;Main.c: 73: Battery_Convert();
   714  001DD4  ECBD  F00B         	call	_Battery_Convert	;wreg free
   715                           
   716                           ;Main.c: 74: Battery_Fault();
   717  001DD8  EC8E  F00C         	call	_Battery_Fault	;wreg free
   718                           
   719                           ;Main.c: 75: RunBypas();
   720  001DDC  EC29  F00C         	call	_RunBypas	;wreg free
   721  001DE0  D7EB               	goto	l3444
   722  001DE2                     __end_of_main:
   723                           	opt stack 0
   724                           tblptru	equ	0xFF8
   725                           intcon	equ	0xFF2
   726                           postinc0	equ	0xFEE
   727                           wreg	equ	0xFE8
   728                           status	equ	0xFD8
   729                           
   730 ;; *************** function _Temp_Fault *****************
   731 ;; Defined at:
   732 ;;		line 12 in file "Tempeture.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;		None
   735 ;; Auto vars:     Size  Location     Type
   736 ;;  i               2   46[COMRAM] int 
   737 ;;  fault           1   45[COMRAM] unsigned char 
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      unsigned char 
   740 ;; Registers used:
   741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   747 ;;      Params:         0       0       0       0       0       0       0
   748 ;;      Locals:         3       0       0       0       0       0       0
   749 ;;      Temps:          0       0       0       0       0       0       0
   750 ;;      Totals:         3       0       0       0       0       0       0
   751 ;;Total ram usage:        3 bytes
   752 ;; Hardware stack levels used:    1
   753 ;; Hardware stack levels required when called:    4
   754 ;; This function calls:
   755 ;;		___ftge
   756 ;;		___wmul
   757 ;; This function is called by:
   758 ;;		_main
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text1
   763  001C38                     __ptext1:
   764                           	opt stack 0
   765  001C38                     _Temp_Fault:
   766                           	opt stack 26
   767                           
   768                           ;Tempeture.c: 15: char fault = 0;
   769                           
   770                           ;incstack = 0
   771  001C38  0E00               	movlw	0
   772  001C3A  6E2E               	movwf	Temp_Fault@fault,c
   773                           
   774                           ;Tempeture.c: 16: for(int i = 0;i<9;i++)
   775  001C3C  0E00               	movlw	0
   776  001C3E  6E30               	movwf	Temp_Fault@i+1,c
   777  001C40  0E00               	movlw	0
   778  001C42  6E2F               	movwf	Temp_Fault@i,c
   779  001C44  5030               	movf	Temp_Fault@i+1,w,c
   780  001C46  0A80               	xorlw	128
   781  001C48  0F80               	addlw	-128
   782  001C4A  0E09               	movlw	9
   783  001C4C  B4D8               	btfsc	status,2,c
   784  001C4E  5C2F               	subwf	Temp_Fault@i,w,c
   785  001C50  B0D8               	btfsc	status,0,c
   786  001C52  0012               	return	
   787                           
   788                           ;Tempeture.c: 17: {
   789                           ;Tempeture.c: 18: if (60.5 > Temp_DegF[i])
   790  001C54  C02F  F01F         	movff	Temp_Fault@i,___wmul@multiplier
   791  001C58  C030  F020         	movff	Temp_Fault@i+1,___wmul@multiplier+1
   792  001C5C  0E00               	movlw	0
   793  001C5E  6E22               	movwf	___wmul@multiplicand+1,c
   794  001C60  0E03               	movlw	3
   795  001C62  6E21               	movwf	___wmul@multiplicand,c
   796  001C64  EC68  F00F         	call	___wmul	;wreg free
   797  001C68  0100               	movlb	0	; () banked
   798  001C6A  0E7E               	movlw	low _Temp_DegF
   799  001C6C  241F               	addwf	?___wmul,w,c
   800  001C6E  6ED9               	movwf	fsr2l,c
   801  001C70  0100               	movlb	0	; () banked
   802  001C72  0E00               	movlw	high _Temp_DegF
   803  001C74  2020               	addwfc	?___wmul+1,w,c
   804  001C76  6EDA               	movwf	fsr2h,c
   805  001C78  CFDE F025          	movff	postinc2,___ftge@ff1
   806  001C7C  CFDE F026          	movff	postinc2,___ftge@ff1+1
   807  001C80  CFDD F027          	movff	postdec2,___ftge@ff1+2
   808  001C84  0E00               	movlw	0
   809  001C86  6E28               	movwf	___ftge@ff2,c
   810  001C88  0E72               	movlw	114
   811  001C8A  6E29               	movwf	___ftge@ff2+1,c
   812  001C8C  0E42               	movlw	66
   813  001C8E  6E2A               	movwf	___ftge@ff2+2,c
   814  001C90  ECD4  F00D         	call	___ftge	;wreg free
   815  001C94  B0D8               	btfsc	status,0,c
   816  001C96  D002               	goto	l3374
   817                           
   818                           ;Tempeture.c: 19: {
   819                           ;Tempeture.c: 20: fault = 1;
   820  001C98  0E01               	movlw	1
   821  001C9A  6E2E               	movwf	Temp_Fault@fault,c
   822  001C9C                     l3374:
   823  001C9C  4A2F               	infsnz	Temp_Fault@i,f,c
   824  001C9E  2A30               	incf	Temp_Fault@i+1,f,c
   825  001CA0  D7D1               	goto	L1
   826  001CA2                     __end_of_Temp_Fault:
   827                           	opt stack 0
   828                           tblptru	equ	0xFF8
   829                           intcon	equ	0xFF2
   830                           postinc0	equ	0xFEE
   831                           wreg	equ	0xFE8
   832                           postinc2	equ	0xFDE
   833                           postdec2	equ	0xFDD
   834                           fsr2h	equ	0xFDA
   835                           fsr2l	equ	0xFD9
   836                           status	equ	0xFD8
   837                           
   838 ;; *************** function _Temp_Convert *****************
   839 ;; Defined at:
   840 ;;		line 50 in file "Tempeture.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;		None
   843 ;; Auto vars:     Size  Location     Type
   844 ;;  steinhart       3   40[BANK0 ] float 
   845 ;;  x               2   38[BANK0 ] int 
   846 ;; Return value:  Size  Location     Type
   847 ;;		None               void
   848 ;; Registers used:
   849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   855 ;;      Params:         0       0       0       0       0       0       0
   856 ;;      Locals:         0       9       0       0       0       0       0
   857 ;;      Temps:          0       2       0       0       0       0       0
   858 ;;      Totals:         0      11       0       0       0       0       0
   859 ;;Total ram usage:       11 bytes
   860 ;; Hardware stack levels used:    1
   861 ;; Hardware stack levels required when called:    7
   862 ;; This function calls:
   863 ;;		_Temp_Filter
   864 ;;		___awdiv
   865 ;;		___awtoft
   866 ;;		___ftadd
   867 ;;		___ftdiv
   868 ;;		___ftmul
   869 ;;		___ftsub
   870 ;;		___wmul
   871 ;;		_log
   872 ;; This function is called by:
   873 ;;		_main
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text2
   878  000D4E                     __ptext2:
   879                           	opt stack 0
   880  000D4E                     _Temp_Convert:
   881                           	opt stack 23
   882                           
   883                           ;Tempeture.c: 52: int x;
   884                           ;Tempeture.c: 53: float steinhart;
   885                           ;Tempeture.c: 54: for(x = 0; x < 10; x++)
   886                           
   887                           ;incstack = 0
   888  000D4E  0E00               	movlw	0
   889  000D50  0100               	movlb	0	; () banked
   890  000D52  6FF1               	movwf	(Temp_Convert@x+1)& (0+255),b
   891  000D54  0E00               	movlw	0
   892  000D56  0100               	movlb	0	; () banked
   893  000D58  6FF0               	movwf	Temp_Convert@x& (0+255),b
   894  000D5A                     
   895                           ; BSR set to: 0
   896  000D5A  0100               	movlb	0	; () banked
   897  000D5C  51F1               	movf	(Temp_Convert@x+1)& (0+255),w,b
   898  000D5E  0A80               	xorlw	128
   899  000D60  0F80               	addlw	-128
   900  000D62  0E0A               	movlw	10
   901  000D64  B4D8               	btfsc	status,2,c
   902  000D66  5DF0               	subwf	Temp_Convert@x& (0+255),w,b
   903  000D68  B0D8               	btfsc	status,0,c
   904  000D6A  D0EF               	goto	l3408
   905                           
   906                           ; BSR set to: 0
   907                           ;Tempeture.c: 55: {
   908                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
   909                           
   910                           ; BSR set to: 0
   911                           
   912                           ; BSR set to: 0
   913  000D6C  0EB6               	movlw	low _Temp_Adc
   914  000D6E  0100               	movlb	0	; () banked
   915  000D70  6FEA               	movwf	??_Temp_Convert& (0+255),b
   916  000D72  0E00               	movlw	high _Temp_Adc
   917  000D74  6FEB               	movwf	(??_Temp_Convert+1)& (0+255),b
   918  000D76  90D8               	bcf	status,0,c
   919  000D78  0100               	movlb	0	; () banked
   920  000D7A  35F0               	rlcf	Temp_Convert@x& (0+255),w,b
   921  000D7C  6ED9               	movwf	fsr2l,c
   922  000D7E  0100               	movlb	0	; () banked
   923  000D80  35F1               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
   924  000D82  6EDA               	movwf	fsr2h,c
   925  000D84  0100               	movlb	0	; () banked
   926  000D86  51EA               	movf	??_Temp_Convert& (0+255),w,b
   927  000D88  26D9               	addwf	fsr2l,f,c
   928  000D8A  0100               	movlb	0	; () banked
   929  000D8C  51EB               	movf	(??_Temp_Convert+1)& (0+255),w,b
   930  000D8E  22DA               	addwfc	fsr2h,f,c
   931  000D90  CFDE F019          	movff	postinc2,___awdiv@divisor
   932  000D94  CFDD F01A          	movff	postdec2,___awdiv@divisor+1
   933  000D98  0E03               	movlw	3
   934  000D9A  6E18               	movwf	___awdiv@dividend+1,c
   935  000D9C  6817               	setf	___awdiv@dividend,c
   936  000D9E  EC39  F00D         	call	___awdiv	;wreg free
   937  000DA2  0EFF               	movlw	255
   938  000DA4  2417               	addwf	?___awdiv,w,c
   939  000DA6  0100               	movlb	0	; () banked
   940  000DA8  6FEC               	movwf	_Temp_Convert$1594& (0+255),b
   941  000DAA  0EFF               	movlw	255
   942  000DAC  2018               	addwfc	?___awdiv+1,w,c
   943  000DAE  0100               	movlb	0	; () banked
   944  000DB0  6FED               	movwf	(_Temp_Convert$1594+1)& (0+255),b
   945                           
   946                           ; BSR set to: 0
   947                           ;Tempeture.c: 55: {
   948                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
   949  000DB2  C0EC  F019         	movff	_Temp_Convert$1594,___awdiv@divisor
   950  000DB6  C0ED  F01A         	movff	_Temp_Convert$1594+1,___awdiv@divisor+1
   951  000DBA  0E27               	movlw	39
   952  000DBC  6E18               	movwf	___awdiv@dividend+1,c
   953  000DBE  0E10               	movlw	16
   954  000DC0  6E17               	movwf	___awdiv@dividend,c
   955  000DC2  EC39  F00D         	call	___awdiv	;wreg free
   956  000DC6  C017  F0EE         	movff	?___awdiv,_Temp_Convert$1595
   957  000DCA  C018  F0EF         	movff	?___awdiv+1,_Temp_Convert$1595+1
   958                           
   959                           ;Tempeture.c: 55: {
   960                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
   961  000DCE  0E27               	movlw	39
   962  000DD0  6E1A               	movwf	___awdiv@divisor+1,c
   963  000DD2  0E10               	movlw	16
   964  000DD4  6E19               	movwf	___awdiv@divisor,c
   965  000DD6  C0EE  F017         	movff	_Temp_Convert$1595,___awdiv@dividend
   966  000DDA  C0EF  F018         	movff	_Temp_Convert$1595+1,___awdiv@dividend+1
   967  000DDE  EC39  F00D         	call	___awdiv	;wreg free
   968  000DE2  C017  F025         	movff	?___awdiv,___awtoft@c
   969  000DE6  C018  F026         	movff	?___awdiv+1,___awtoft@c+1
   970  000DEA  EC78  F00E         	call	___awtoft	;wreg free
   971  000DEE  C025  F0F2         	movff	?___awtoft,Temp_Convert@steinhart
   972  000DF2  C026  F0F3         	movff	?___awtoft+1,Temp_Convert@steinhart+1
   973  000DF6  C027  F0F4         	movff	?___awtoft+2,Temp_Convert@steinhart+2
   974                           
   975                           ;Tempeture.c: 57: steinhart = log(steinhart);
   976  000DFA  C0F2  F0E5         	movff	Temp_Convert@steinhart,log@x
   977  000DFE  C0F3  F0E6         	movff	Temp_Convert@steinhart+1,log@x+1
   978  000E02  C0F4  F0E7         	movff	Temp_Convert@steinhart+2,log@x+2
   979  000E06  EC18  F009         	call	_log	;wreg free
   980  000E0A  C0E5  F0F2         	movff	?_log,Temp_Convert@steinhart
   981  000E0E  C0E6  F0F3         	movff	?_log+1,Temp_Convert@steinhart+1
   982  000E12  C0E7  F0F4         	movff	?_log+2,Temp_Convert@steinhart+2
   983                           
   984                           ;Tempeture.c: 58: steinhart /= 3950;
   985  000E16  C0F2  F01F         	movff	Temp_Convert@steinhart,___ftdiv@f1
   986  000E1A  C0F3  F020         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
   987  000E1E  C0F4  F021         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
   988  000E22  0EE0               	movlw	224
   989  000E24  6E22               	movwf	___ftdiv@f2,c
   990  000E26  0E76               	movlw	118
   991  000E28  6E23               	movwf	___ftdiv@f2+1,c
   992  000E2A  0E45               	movlw	69
   993  000E2C  6E24               	movwf	___ftdiv@f2+2,c
   994  000E2E  EC4C  F00B         	call	___ftdiv	;wreg free
   995  000E32  C01F  F0F2         	movff	?___ftdiv,Temp_Convert@steinhart
   996  000E36  C020  F0F3         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
   997  000E3A  C021  F0F4         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
   998                           
   999                           ;Tempeture.c: 59: steinhart += 1.0 / (25 + 273.15);
  1000  000E3E  C0F2  F0D0         	movff	Temp_Convert@steinhart,___ftadd@f1
  1001  000E42  C0F3  F0D1         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  1002  000E46  C0F4  F0D2         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  1003  000E4A  0ECF               	movlw	207
  1004  000E4C  0100               	movlb	0	; () banked
  1005  000E4E  6FD3               	movwf	___ftadd@f2& (0+255),b
  1006  000E50  0E5B               	movlw	91
  1007  000E52  0100               	movlb	0	; () banked
  1008  000E54  6FD4               	movwf	(___ftadd@f2+1)& (0+255),b
  1009  000E56  0E3B               	movlw	59
  1010  000E58  0100               	movlb	0	; () banked
  1011  000E5A  6FD5               	movwf	(___ftadd@f2+2)& (0+255),b
  1012  000E5C  EC73  F005         	call	___ftadd	;wreg free
  1013  000E60  C0D0  F0F2         	movff	?___ftadd,Temp_Convert@steinhart
  1014  000E64  C0D1  F0F3         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  1015  000E68  C0D2  F0F4         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  1016                           
  1017                           ;Tempeture.c: 60: steinhart = 1.0 / steinhart;
  1018  000E6C  0E00               	movlw	0
  1019  000E6E  6E1F               	movwf	___ftdiv@f1,c
  1020  000E70  0E80               	movlw	128
  1021  000E72  6E20               	movwf	___ftdiv@f1+1,c
  1022  000E74  0E3F               	movlw	63
  1023  000E76  6E21               	movwf	___ftdiv@f1+2,c
  1024  000E78  C0F2  F022         	movff	Temp_Convert@steinhart,___ftdiv@f2
  1025  000E7C  C0F3  F023         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  1026  000E80  C0F4  F024         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  1027  000E84  EC4C  F00B         	call	___ftdiv	;wreg free
  1028  000E88  C01F  F0F2         	movff	?___ftdiv,Temp_Convert@steinhart
  1029  000E8C  C020  F0F3         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  1030  000E90  C021  F0F4         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  1031                           
  1032                           ;Tempeture.c: 61: steinhart -= 273.15;
  1033  000E94  C0F2  F0D9         	movff	Temp_Convert@steinhart,___ftsub@f1
  1034  000E98  C0F3  F0DA         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  1035  000E9C  C0F4  F0DB         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  1036  000EA0  0E93               	movlw	147
  1037  000EA2  0100               	movlb	0	; () banked
  1038  000EA4  6FDC               	movwf	___ftsub@f2& (0+255),b
  1039  000EA6  0E88               	movlw	136
  1040  000EA8  0100               	movlb	0	; () banked
  1041  000EAA  6FDD               	movwf	(___ftsub@f2+1)& (0+255),b
  1042  000EAC  0E43               	movlw	67
  1043  000EAE  0100               	movlb	0	; () banked
  1044  000EB0  6FDE               	movwf	(___ftsub@f2+2)& (0+255),b
  1045  000EB2  EC9C  F00E         	call	___ftsub	;wreg free
  1046  000EB6  C0D9  F0F2         	movff	?___ftsub,Temp_Convert@steinhart
  1047  000EBA  C0DA  F0F3         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  1048  000EBE  C0DB  F0F4         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  1049                           
  1050                           ;Tempeture.c: 62: steinhart = (steinhart*1.800) + 32.00;
  1051  000EC2  0E66               	movlw	102
  1052  000EC4  6E2C               	movwf	___ftmul@f2,c
  1053  000EC6  0EE6               	movlw	230
  1054  000EC8  6E2D               	movwf	___ftmul@f2+1,c
  1055  000ECA  0E3F               	movlw	63
  1056  000ECC  6E2E               	movwf	___ftmul@f2+2,c
  1057  000ECE  C0F2  F029         	movff	Temp_Convert@steinhart,___ftmul@f1
  1058  000ED2  C0F3  F02A         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  1059  000ED6  C0F4  F02B         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  1060  000EDA  ECC9  F009         	call	___ftmul	;wreg free
  1061  000EDE  C029  F0D0         	movff	?___ftmul,___ftadd@f1
  1062  000EE2  C02A  F0D1         	movff	?___ftmul+1,___ftadd@f1+1
  1063  000EE6  C02B  F0D2         	movff	?___ftmul+2,___ftadd@f1+2
  1064  000EEA  0E00               	movlw	0
  1065  000EEC  0100               	movlb	0	; () banked
  1066  000EEE  6FD3               	movwf	___ftadd@f2& (0+255),b
  1067  000EF0  0E00               	movlw	0
  1068  000EF2  0100               	movlb	0	; () banked
  1069  000EF4  6FD4               	movwf	(___ftadd@f2+1)& (0+255),b
  1070  000EF6  0E42               	movlw	66
  1071  000EF8  0100               	movlb	0	; () banked
  1072  000EFA  6FD5               	movwf	(___ftadd@f2+2)& (0+255),b
  1073  000EFC  EC73  F005         	call	___ftadd	;wreg free
  1074  000F00  C0D0  F0F2         	movff	?___ftadd,Temp_Convert@steinhart
  1075  000F04  C0D1  F0F3         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  1076  000F08  C0D2  F0F4         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  1077                           
  1078                           ;Tempeture.c: 63: TmpTemp_DegF[x] = steinhart;
  1079  000F0C  C0F0  F01F         	movff	Temp_Convert@x,___wmul@multiplier
  1080  000F10  C0F1  F020         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  1081  000F14  0E00               	movlw	0
  1082  000F16  6E22               	movwf	___wmul@multiplicand+1,c
  1083  000F18  0E03               	movlw	3
  1084  000F1A  6E21               	movwf	___wmul@multiplicand,c
  1085  000F1C  EC68  F00F         	call	___wmul	;wreg free
  1086  000F20  0101               	movlb	1	; () banked
  1087  000F22  0E8C               	movlw	low _TmpTemp_DegF
  1088  000F24  241F               	addwf	?___wmul,w,c
  1089  000F26  6ED9               	movwf	fsr2l,c
  1090  000F28  0101               	movlb	1	; () banked
  1091  000F2A  0E01               	movlw	high _TmpTemp_DegF
  1092  000F2C  2020               	addwfc	?___wmul+1,w,c
  1093  000F2E  6EDA               	movwf	fsr2h,c
  1094  000F30  0100               	movlb	0	; () banked
  1095  000F32  C0F2  FFDE         	movff	Temp_Convert@steinhart,postinc2
  1096  000F36  0100               	movlb	0	; () banked
  1097  000F38  C0F3  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  1098  000F3C  0100               	movlb	0	; () banked
  1099  000F3E  C0F4  FFDD         	movff	Temp_Convert@steinhart+2,postdec2
  1100                           
  1101                           ; BSR set to: 0
  1102  000F42  0100               	movlb	0	; () banked
  1103  000F44  4BF0               	infsnz	Temp_Convert@x& (0+255),f,b
  1104  000F46  2BF1               	incf	(Temp_Convert@x+1)& (0+255),f,b
  1105  000F48  D708               	goto	L2
  1106  000F4A                     l3408:
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;Tempeture.c: 64: }
  1110                           ;Tempeture.c: 65: Temp_Filter();
  1111  000F4A  ECA8  F007         	call	_Temp_Filter	;wreg free
  1112  000F4E  0012               	return	
  1113  000F50                     __end_of_Temp_Convert:
  1114                           	opt stack 0
  1115                           tblptru	equ	0xFF8
  1116                           intcon	equ	0xFF2
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postinc2	equ	0xFDE
  1120                           postdec2	equ	0xFDD
  1121                           fsr2h	equ	0xFDA
  1122                           fsr2l	equ	0xFD9
  1123                           status	equ	0xFD8
  1124                           
  1125 ;; *************** function _log *****************
  1126 ;; Defined at:
  1127 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\log.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  x               3   27[BANK0 ] int 
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;  exponent        2   30[BANK0 ] int 
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  3   27[BANK0 ] int 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1141 ;;      Params:         0       3       0       0       0       0       0
  1142 ;;      Locals:         0       2       0       0       0       0       0
  1143 ;;      Temps:          0       0       0       0       0       0       0
  1144 ;;      Totals:         0       5       0       0       0       0       0
  1145 ;;Total ram usage:        5 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; Hardware stack levels required when called:    6
  1148 ;; This function calls:
  1149 ;;		___awtoft
  1150 ;;		___ftadd
  1151 ;;		___ftmul
  1152 ;;		_eval_poly
  1153 ;;		_frexp
  1154 ;; This function is called by:
  1155 ;;		_Temp_Convert
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text3
  1160  001230                     __ptext3:
  1161                           	opt stack 0
  1162  001230                     _log:
  1163                           	opt stack 23
  1164                           
  1165                           ;incstack = 0
  1166  001230  0100               	movlb	0	; () banked
  1167  001232  51E7               	movf	(log@x+2)& (0+255),w,b
  1168  001234  0A80               	xorlw	128
  1169  001236  0F80               	addlw	128
  1170  001238  E107               	bnz	u2645
  1171  00123A  0E00               	movlw	0
  1172  00123C  0100               	movlb	0	; () banked
  1173  00123E  5DE6               	subwf	(log@x+1)& (0+255),w,b
  1174  001240  E103               	bnz	u2645
  1175  001242  0E00               	movlw	0
  1176  001244  0100               	movlb	0	; () banked
  1177  001246  5DE5               	subwf	log@x& (0+255),w,b
  1178  001248                     u2645:
  1179  001248  B0D8               	btfsc	status,0,c
  1180  00124A  D010               	goto	l3222
  1181                           
  1182                           ; BSR set to: 0
  1183  00124C  0E00               	movlw	0
  1184  00124E  0100               	movlb	0	; () banked
  1185  001250  6FB5               	movwf	(_errno+1)& (0+255),b
  1186  001252  0E21               	movlw	33
  1187  001254  0100               	movlb	0	; () banked
  1188  001256  6FB4               	movwf	_errno& (0+255),b
  1189  001258  0E00               	movlw	0
  1190  00125A  0100               	movlb	0	; () banked
  1191  00125C  6FE5               	movwf	?_log& (0+255),b
  1192  00125E  0E00               	movlw	0
  1193  001260  0100               	movlb	0	; () banked
  1194  001262  6FE6               	movwf	(?_log+1)& (0+255),b
  1195  001264  0E00               	movlw	0
  1196  001266  0100               	movlb	0	; () banked
  1197  001268  6FE7               	movwf	(?_log+2)& (0+255),b
  1198  00126A  0012               	return	
  1199  00126C                     l3222:
  1200                           
  1201                           ; BSR set to: 0
  1202  00126C  0E7F               	movlw	127
  1203  00126E  0100               	movlb	0	; () banked
  1204  001270  15E7               	andwf	(log@x+2)& (0+255),w,b
  1205  001272  0100               	movlb	0	; () banked
  1206  001274  11E6               	iorwf	(log@x+1)& (0+255),w,b
  1207  001276  0100               	movlb	0	; () banked
  1208  001278  11E5               	iorwf	log@x& (0+255),w,b
  1209  00127A  A4D8               	btfss	status,2,c
  1210  00127C  D010               	goto	l3228
  1211                           
  1212                           ; BSR set to: 0
  1213  00127E  0E00               	movlw	0
  1214  001280  0100               	movlb	0	; () banked
  1215  001282  6FB5               	movwf	(_errno+1)& (0+255),b
  1216  001284  0E22               	movlw	34
  1217  001286  0100               	movlb	0	; () banked
  1218  001288  6FB4               	movwf	_errno& (0+255),b
  1219  00128A  0E00               	movlw	0
  1220  00128C  0100               	movlb	0	; () banked
  1221  00128E  6FE5               	movwf	?_log& (0+255),b
  1222  001290  0E00               	movlw	0
  1223  001292  0100               	movlb	0	; () banked
  1224  001294  6FE6               	movwf	(?_log+1)& (0+255),b
  1225  001296  0E00               	movlw	0
  1226  001298  0100               	movlb	0	; () banked
  1227  00129A  6FE7               	movwf	(?_log+2)& (0+255),b
  1228  00129C  0012               	return	
  1229  00129E                     l3228:
  1230                           
  1231                           ; BSR set to: 0
  1232  00129E  0E00               	movlw	0
  1233  0012A0  6E2C               	movwf	___ftmul@f2,c
  1234  0012A2  0E00               	movlw	0
  1235  0012A4  6E2D               	movwf	___ftmul@f2+1,c
  1236  0012A6  0E40               	movlw	64
  1237  0012A8  6E2E               	movwf	___ftmul@f2+2,c
  1238  0012AA  0100               	movlb	0	; () banked
  1239  0012AC  0E00               	movlw	high log@exponent
  1240  0012AE  6E1B               	movwf	frexp@eptr+1,c
  1241  0012B0  0100               	movlb	0	; () banked
  1242  0012B2  0EE8               	movlw	low log@exponent
  1243  0012B4  6E1A               	movwf	frexp@eptr,c
  1244  0012B6  C0E5  F017         	movff	log@x,frexp@value
  1245  0012BA  C0E6  F018         	movff	log@x+1,frexp@value+1
  1246  0012BE  C0E7  F019         	movff	log@x+2,frexp@value+2
  1247  0012C2  EC8B  F00D         	call	_frexp	;wreg free
  1248  0012C6  C017  F029         	movff	?_frexp,___ftmul@f1
  1249  0012CA  C018  F02A         	movff	?_frexp+1,___ftmul@f1+1
  1250  0012CE  C019  F02B         	movff	?_frexp+2,___ftmul@f1+2
  1251  0012D2  ECC9  F009         	call	___ftmul	;wreg free
  1252  0012D6  C029  F0D0         	movff	?___ftmul,___ftadd@f1
  1253  0012DA  C02A  F0D1         	movff	?___ftmul+1,___ftadd@f1+1
  1254  0012DE  C02B  F0D2         	movff	?___ftmul+2,___ftadd@f1+2
  1255  0012E2  0E00               	movlw	0
  1256  0012E4  0100               	movlb	0	; () banked
  1257  0012E6  6FD3               	movwf	___ftadd@f2& (0+255),b
  1258  0012E8  0E80               	movlw	128
  1259  0012EA  0100               	movlb	0	; () banked
  1260  0012EC  6FD4               	movwf	(___ftadd@f2+1)& (0+255),b
  1261  0012EE  0EBF               	movlw	191
  1262  0012F0  0100               	movlb	0	; () banked
  1263  0012F2  6FD5               	movwf	(___ftadd@f2+2)& (0+255),b
  1264  0012F4  EC73  F005         	call	___ftadd	;wreg free
  1265  0012F8  C0D0  F0E5         	movff	?___ftadd,log@x
  1266  0012FC  C0D1  F0E6         	movff	?___ftadd+1,log@x+1
  1267  001300  C0D2  F0E7         	movff	?___ftadd+2,log@x+2
  1268  001304  0100               	movlb	0	; () banked
  1269  001306  07E8               	decf	log@exponent& (0+255),f,b
  1270  001308  A0D8               	btfss	status,0,c
  1271  00130A  07E9               	decf	(log@exponent+1)& (0+255),f,b
  1272                           
  1273                           ; BSR set to: 0
  1274  00130C  C0E5  F0D9         	movff	log@x,eval_poly@x
  1275  001310  C0E6  F0DA         	movff	log@x+1,eval_poly@x+1
  1276  001314  C0E7  F0DB         	movff	log@x+2,eval_poly@x+2
  1277  001318  0E06               	movlw	high log@coeff
  1278  00131A  0100               	movlb	0	; () banked
  1279  00131C  6FDD               	movwf	(eval_poly@d+1)& (0+255),b
  1280  00131E  0E01               	movlw	low log@coeff
  1281  001320  0100               	movlb	0	; () banked
  1282  001322  6FDC               	movwf	eval_poly@d& (0+255),b
  1283  001324  0E00               	movlw	0
  1284  001326  0100               	movlb	0	; () banked
  1285  001328  6FDF               	movwf	(eval_poly@n+1)& (0+255),b
  1286  00132A  0E08               	movlw	8
  1287  00132C  0100               	movlb	0	; () banked
  1288  00132E  6FDE               	movwf	eval_poly@n& (0+255),b
  1289  001330  EC5A  F00A         	call	_eval_poly	;wreg free
  1290  001334  C0D9  F0E5         	movff	?_eval_poly,log@x
  1291  001338  C0DA  F0E6         	movff	?_eval_poly+1,log@x+1
  1292  00133C  C0DB  F0E7         	movff	?_eval_poly+2,log@x+2
  1293  001340  0E72               	movlw	114
  1294  001342  6E2C               	movwf	___ftmul@f2,c
  1295  001344  0E31               	movlw	49
  1296  001346  6E2D               	movwf	___ftmul@f2+1,c
  1297  001348  0E3F               	movlw	63
  1298  00134A  6E2E               	movwf	___ftmul@f2+2,c
  1299  00134C  C0E8  F025         	movff	log@exponent,___awtoft@c
  1300  001350  C0E9  F026         	movff	log@exponent+1,___awtoft@c+1
  1301  001354  EC78  F00E         	call	___awtoft	;wreg free
  1302  001358  C025  F029         	movff	?___awtoft,___ftmul@f1
  1303  00135C  C026  F02A         	movff	?___awtoft+1,___ftmul@f1+1
  1304  001360  C027  F02B         	movff	?___awtoft+2,___ftmul@f1+2
  1305  001364  ECC9  F009         	call	___ftmul	;wreg free
  1306  001368  C029  F0D0         	movff	?___ftmul,___ftadd@f1
  1307  00136C  C02A  F0D1         	movff	?___ftmul+1,___ftadd@f1+1
  1308  001370  C02B  F0D2         	movff	?___ftmul+2,___ftadd@f1+2
  1309  001374  C0E5  F0D3         	movff	log@x,___ftadd@f2
  1310  001378  C0E6  F0D4         	movff	log@x+1,___ftadd@f2+1
  1311  00137C  C0E7  F0D5         	movff	log@x+2,___ftadd@f2+2
  1312  001380  EC73  F005         	call	___ftadd	;wreg free
  1313  001384  C0D0  F0E5         	movff	?___ftadd,?_log
  1314  001388  C0D1  F0E6         	movff	?___ftadd+1,?_log+1
  1315  00138C  C0D2  F0E7         	movff	?___ftadd+2,?_log+2
  1316  001390  0012               	return	
  1317  001392                     __end_of_log:
  1318                           	opt stack 0
  1319                           tblptru	equ	0xFF8
  1320                           intcon	equ	0xFF2
  1321                           postinc0	equ	0xFEE
  1322                           wreg	equ	0xFE8
  1323                           postinc2	equ	0xFDE
  1324                           postdec2	equ	0xFDD
  1325                           fsr2h	equ	0xFDA
  1326                           fsr2l	equ	0xFD9
  1327                           status	equ	0xFD8
  1328                           
  1329 ;; *************** function _frexp *****************
  1330 ;; Defined at:
  1331 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;  value           3   22[COMRAM] int 
  1334 ;;  eptr            2   25[COMRAM] PTR int 
  1335 ;;		 -> log@exponent(2), 
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;		None
  1338 ;; Return value:  Size  Location     Type
  1339 ;;                  3   22[COMRAM] PTR int 
  1340 ;; Registers used:
  1341 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1342 ;; Tracked objects:
  1343 ;;		On entry : 0/0
  1344 ;;		On exit  : 0/0
  1345 ;;		Unchanged: 0/0
  1346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1347 ;;      Params:         5       0       0       0       0       0       0
  1348 ;;      Locals:         0       0       0       0       0       0       0
  1349 ;;      Temps:          2       0       0       0       0       0       0
  1350 ;;      Totals:         7       0       0       0       0       0       0
  1351 ;;Total ram usage:        7 bytes
  1352 ;; Hardware stack levels used:    1
  1353 ;; Hardware stack levels required when called:    3
  1354 ;; This function calls:
  1355 ;;		Nothing
  1356 ;; This function is called by:
  1357 ;;		_log
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           	psect	text4
  1362  001B16                     __ptext4:
  1363                           	opt stack 0
  1364  001B16                     _frexp:
  1365                           	opt stack 25
  1366                           
  1367                           ;incstack = 0
  1368  001B16  0E7F               	movlw	127
  1369  001B18  1419               	andwf	frexp@value+2,w,c
  1370  001B1A  1018               	iorwf	frexp@value+1,w,c
  1371  001B1C  1017               	iorwf	frexp@value,w,c
  1372  001B1E  A4D8               	btfss	status,2,c
  1373  001B20  D00F               	goto	l2316
  1374  001B22  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1375  001B26  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1376  001B2A  0E00               	movlw	0
  1377  001B2C  6EDE               	movwf	postinc2,c
  1378  001B2E  0E00               	movlw	0
  1379  001B30  6EDD               	movwf	postdec2,c
  1380  001B32  0E00               	movlw	0
  1381  001B34  6E17               	movwf	?_frexp,c
  1382  001B36  0E00               	movlw	0
  1383  001B38  6E18               	movwf	?_frexp+1,c
  1384  001B3A  0E00               	movlw	0
  1385  001B3C  6E19               	movwf	?_frexp+2,c
  1386  001B3E  0012               	return	
  1387  001B40                     l2316:
  1388  001B40  5019               	movf	frexp@value+2,w,c
  1389  001B42  0B7F               	andlw	127
  1390  001B44  6E1C               	movwf	??_frexp& (0+255),c
  1391  001B46  6A1D               	clrf	(??_frexp+1)& (0+255),c
  1392  001B48  90D8               	bcf	status,0,c
  1393  001B4A  361C               	rlcf	??_frexp,f,c
  1394  001B4C  361D               	rlcf	??_frexp+1,f,c
  1395  001B4E  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1396  001B52  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1397  001B56  C01C  FFDE         	movff	??_frexp,postinc2
  1398  001B5A  C01D  FFDD         	movff	??_frexp+1,postdec2
  1399  001B5E  AE18               	btfss	frexp@value+1,7,c
  1400  001B60  D003               	goto	u1500
  1401  001B62  6A1C               	clrf	??_frexp& (0+255),c
  1402  001B64  2A1C               	incf	??_frexp& (0+255),f,c
  1403  001B66  D001               	goto	u1508
  1404  001B68                     u1500:
  1405  001B68  6A1C               	clrf	??_frexp& (0+255),c
  1406  001B6A                     u1508:
  1407  001B6A  501C               	movf	??_frexp,w,c
  1408  001B6C  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1409  001B70  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1410  001B74  12DE               	iorwf	postinc2,f,c
  1411  001B76  0E00               	movlw	0
  1412  001B78  12DD               	iorwf	postdec2,f,c
  1413  001B7A  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1414  001B7E  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1415  001B82  0E82               	movlw	130
  1416  001B84  26DE               	addwf	postinc2,f,c
  1417  001B86  0EFF               	movlw	255
  1418  001B88  22DD               	addwfc	postdec2,f,c
  1419  001B8A  8019               	bsf	frexp@value+2,0,c
  1420  001B8C  8219               	bsf	frexp@value+2,1,c
  1421  001B8E  8419               	bsf	frexp@value+2,2,c
  1422  001B90  8619               	bsf	frexp@value+2,3,c
  1423  001B92  8819               	bsf	frexp@value+2,4,c
  1424  001B94  8A19               	bsf	frexp@value+2,5,c
  1425  001B96  9C19               	bcf	frexp@value+2,6,c
  1426  001B98  9E18               	bcf	frexp@value+1,7,c
  1427  001B9A  C017  F017         	movff	frexp@value,?_frexp
  1428  001B9E  C018  F018         	movff	frexp@value+1,?_frexp+1
  1429  001BA2  C019  F019         	movff	frexp@value+2,?_frexp+2
  1430  001BA6  0012               	return	
  1431  001BA8                     __end_of_frexp:
  1432                           	opt stack 0
  1433                           tblptru	equ	0xFF8
  1434                           intcon	equ	0xFF2
  1435                           postinc0	equ	0xFEE
  1436                           wreg	equ	0xFE8
  1437                           postinc2	equ	0xFDE
  1438                           postdec2	equ	0xFDD
  1439                           fsr2h	equ	0xFDA
  1440                           fsr2l	equ	0xFD9
  1441                           status	equ	0xFD8
  1442                           
  1443 ;; *************** function _eval_poly *****************
  1444 ;; Defined at:
  1445 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\evalpoly.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;  x               3   15[BANK0 ] PTR int 
  1448 ;;  d               2   18[BANK0 ] PTR const 
  1449 ;;		 -> log@coeff(27), 
  1450 ;;  n               2   20[BANK0 ] int 
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;  res             3   24[BANK0 ] int 
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  3   15[BANK0 ] int 
  1455 ;; Registers used:
  1456 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1462 ;;      Params:         0       7       0       0       0       0       0
  1463 ;;      Locals:         0       3       0       0       0       0       0
  1464 ;;      Temps:          0       2       0       0       0       0       0
  1465 ;;      Totals:         0      12       0       0       0       0       0
  1466 ;;Total ram usage:       12 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; Hardware stack levels required when called:    5
  1469 ;; This function calls:
  1470 ;;		___ftadd
  1471 ;;		___ftmul
  1472 ;;		___wmul
  1473 ;; This function is called by:
  1474 ;;		_log
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           	psect	text5
  1479  0014B4                     __ptext5:
  1480                           	opt stack 0
  1481  0014B4                     _eval_poly:
  1482                           	opt stack 23
  1483                           
  1484                           ;incstack = 0
  1485  0014B4  C0DE  F01F         	movff	eval_poly@n,___wmul@multiplier
  1486  0014B8  C0DF  F020         	movff	eval_poly@n+1,___wmul@multiplier+1
  1487  0014BC  0E00               	movlw	0
  1488  0014BE  6E22               	movwf	___wmul@multiplicand+1,c
  1489  0014C0  0E03               	movlw	3
  1490  0014C2  6E21               	movwf	___wmul@multiplicand,c
  1491  0014C4  EC68  F00F         	call	___wmul	;wreg free
  1492  0014C8  0100               	movlb	0	; () banked
  1493  0014CA  C0DC  F0E0         	movff	eval_poly@d,??_eval_poly
  1494  0014CE  0100               	movlb	0	; () banked
  1495  0014D0  C0DD  F0E1         	movff	eval_poly@d+1,??_eval_poly+1
  1496  0014D4  501F               	movf	?___wmul,w,c
  1497  0014D6  0100               	movlb	0	; () banked
  1498  0014D8  27E0               	addwf	??_eval_poly& (0+255),f,b
  1499  0014DA  5020               	movf	?___wmul+1,w,c
  1500  0014DC  0100               	movlb	0	; () banked
  1501  0014DE  23E1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  1502  0014E0  C0E0  FFF6         	movff	??_eval_poly,tblptrl
  1503  0014E4  C0E1  FFF7         	movff	??_eval_poly+1,tblptrh
  1504  0014E8                     	if	0	;tblptru may be non-zero
  1505  0014E8                     	endif
  1506  0014E8                     	if	0	;tblptru may be non-zero
  1507  0014E8                     	endif
  1508  0014E8  0009               	tblrd		*+
  1509  0014EA  0100               	movlb	0	; () banked
  1510  0014EC  CFF5 F0E2          	movff	tablat,eval_poly@res
  1511  0014F0  0009               	tblrd		*+
  1512  0014F2  0100               	movlb	0	; () banked
  1513  0014F4  CFF5 F0E3          	movff	tablat,eval_poly@res+1
  1514  0014F8  000A               	tblrd		*-
  1515  0014FA  0100               	movlb	0	; () banked
  1516  0014FC  CFF5 F0E4          	movff	tablat,eval_poly@res+2
  1517  001500  D046               	goto	l3162
  1518  001502                     l3160:
  1519                           
  1520                           ; BSR set to: 0
  1521  001502  C0E2  F02C         	movff	eval_poly@res,___ftmul@f2
  1522  001506  C0E3  F02D         	movff	eval_poly@res+1,___ftmul@f2+1
  1523  00150A  C0E4  F02E         	movff	eval_poly@res+2,___ftmul@f2+2
  1524  00150E  C0D9  F029         	movff	eval_poly@x,___ftmul@f1
  1525  001512  C0DA  F02A         	movff	eval_poly@x+1,___ftmul@f1+1
  1526  001516  C0DB  F02B         	movff	eval_poly@x+2,___ftmul@f1+2
  1527  00151A  ECC9  F009         	call	___ftmul	;wreg free
  1528  00151E  C029  F0D0         	movff	?___ftmul,___ftadd@f1
  1529  001522  C02A  F0D1         	movff	?___ftmul+1,___ftadd@f1+1
  1530  001526  C02B  F0D2         	movff	?___ftmul+2,___ftadd@f1+2
  1531  00152A  0E00               	movlw	0
  1532  00152C  6E22               	movwf	___wmul@multiplicand+1,c
  1533  00152E  0E03               	movlw	3
  1534  001530  6E21               	movwf	___wmul@multiplicand,c
  1535  001532  0100               	movlb	0	; () banked
  1536  001534  07DE               	decf	eval_poly@n& (0+255),f,b
  1537  001536  A0D8               	btfss	status,0,c
  1538  001538  07DF               	decf	(eval_poly@n+1)& (0+255),f,b
  1539  00153A  C0DE  F01F         	movff	eval_poly@n,___wmul@multiplier
  1540  00153E  C0DF  F020         	movff	eval_poly@n+1,___wmul@multiplier+1
  1541  001542  EC68  F00F         	call	___wmul	;wreg free
  1542  001546  0100               	movlb	0	; () banked
  1543  001548  C0DC  F0E0         	movff	eval_poly@d,??_eval_poly
  1544  00154C  0100               	movlb	0	; () banked
  1545  00154E  C0DD  F0E1         	movff	eval_poly@d+1,??_eval_poly+1
  1546  001552  501F               	movf	?___wmul,w,c
  1547  001554  0100               	movlb	0	; () banked
  1548  001556  27E0               	addwf	??_eval_poly& (0+255),f,b
  1549  001558  5020               	movf	?___wmul+1,w,c
  1550  00155A  0100               	movlb	0	; () banked
  1551  00155C  23E1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  1552  00155E  C0E0  FFF6         	movff	??_eval_poly,tblptrl
  1553  001562  C0E1  FFF7         	movff	??_eval_poly+1,tblptrh
  1554  001566                     	if	0	;tblptru may be non-zero
  1555  001566                     	endif
  1556  001566                     	if	0	;tblptru may be non-zero
  1557  001566                     	endif
  1558  001566  0009               	tblrd		*+
  1559  001568  0100               	movlb	0	; () banked
  1560  00156A  CFF5 F0D3          	movff	tablat,___ftadd@f2
  1561  00156E  0009               	tblrd		*+
  1562  001570  0100               	movlb	0	; () banked
  1563  001572  CFF5 F0D4          	movff	tablat,___ftadd@f2+1
  1564  001576  000A               	tblrd		*-
  1565  001578  0100               	movlb	0	; () banked
  1566  00157A  CFF5 F0D5          	movff	tablat,___ftadd@f2+2
  1567  00157E  EC73  F005         	call	___ftadd	;wreg free
  1568  001582  C0D0  F0E2         	movff	?___ftadd,eval_poly@res
  1569  001586  C0D1  F0E3         	movff	?___ftadd+1,eval_poly@res+1
  1570  00158A  C0D2  F0E4         	movff	?___ftadd+2,eval_poly@res+2
  1571  00158E                     l3162:
  1572  00158E  0100               	movlb	0	; () banked
  1573  001590  51DF               	movf	(eval_poly@n+1)& (0+255),w,b
  1574  001592  11DE               	iorwf	eval_poly@n& (0+255),w,b
  1575  001594  A4D8               	btfss	status,2,c
  1576  001596  D7B5               	goto	l3160
  1577                           
  1578                           ; BSR set to: 0
  1579  001598  C0E2  F0D9         	movff	eval_poly@res,?_eval_poly
  1580  00159C  C0E3  F0DA         	movff	eval_poly@res+1,?_eval_poly+1
  1581  0015A0  C0E4  F0DB         	movff	eval_poly@res+2,?_eval_poly+2
  1582                           
  1583                           ; BSR set to: 0
  1584  0015A4  0012               	return	
  1585  0015A6                     __end_of_eval_poly:
  1586                           	opt stack 0
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           intcon	equ	0xFF2
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postinc2	equ	0xFDE
  1595                           postdec2	equ	0xFDD
  1596                           fsr2h	equ	0xFDA
  1597                           fsr2l	equ	0xFD9
  1598                           status	equ	0xFD8
  1599                           
  1600 ;; *************** function ___ftsub *****************
  1601 ;; Defined at:
  1602 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  f1              3   15[BANK0 ] float 
  1605 ;;  f2              3   18[BANK0 ] float 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  3   15[BANK0 ] float 
  1610 ;; Registers used:
  1611 ;;		wreg, status,2, status,0, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1617 ;;      Params:         0       6       0       0       0       0       0
  1618 ;;      Locals:         0       0       0       0       0       0       0
  1619 ;;      Temps:          0       0       0       0       0       0       0
  1620 ;;      Totals:         0       6       0       0       0       0       0
  1621 ;;Total ram usage:        6 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; Hardware stack levels required when called:    5
  1624 ;; This function calls:
  1625 ;;		___ftadd
  1626 ;; This function is called by:
  1627 ;;		_Temp_Convert
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text6
  1632  001D38                     __ptext6:
  1633                           	opt stack 0
  1634  001D38                     ___ftsub:
  1635                           	opt stack 24
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;incstack = 0
  1639  001D38  0E00               	movlw	0
  1640  001D3A  0100               	movlb	0	; () banked
  1641  001D3C  1BDC               	xorwf	___ftsub@f2& (0+255),f,b
  1642  001D3E  0E00               	movlw	0
  1643  001D40  0100               	movlb	0	; () banked
  1644  001D42  1BDD               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  1645  001D44  0E80               	movlw	128
  1646  001D46  0100               	movlb	0	; () banked
  1647  001D48  1BDE               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  1648                           
  1649                           ; BSR set to: 0
  1650  001D4A  C0D9  F0D0         	movff	___ftsub@f1,___ftadd@f1
  1651  001D4E  C0DA  F0D1         	movff	___ftsub@f1+1,___ftadd@f1+1
  1652  001D52  C0DB  F0D2         	movff	___ftsub@f1+2,___ftadd@f1+2
  1653  001D56  C0DC  F0D3         	movff	___ftsub@f2,___ftadd@f2
  1654  001D5A  C0DD  F0D4         	movff	___ftsub@f2+1,___ftadd@f2+1
  1655  001D5E  C0DE  F0D5         	movff	___ftsub@f2+2,___ftadd@f2+2
  1656  001D62  EC73  F005         	call	___ftadd	;wreg free
  1657  001D66  C0D0  F0D9         	movff	?___ftadd,?___ftsub
  1658  001D6A  C0D1  F0DA         	movff	?___ftadd+1,?___ftsub+1
  1659  001D6E  C0D2  F0DB         	movff	?___ftadd+2,?___ftsub+2
  1660  001D72  0012               	return	
  1661  001D74                     __end_of___ftsub:
  1662                           	opt stack 0
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           intcon	equ	0xFF2
  1668                           postinc0	equ	0xFEE
  1669                           wreg	equ	0xFE8
  1670                           postinc2	equ	0xFDE
  1671                           postdec2	equ	0xFDD
  1672                           fsr2h	equ	0xFDA
  1673                           fsr2l	equ	0xFD9
  1674                           status	equ	0xFD8
  1675                           
  1676 ;; *************** function ___ftdiv *****************
  1677 ;; Defined at:
  1678 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;  f1              3   30[COMRAM] float 
  1681 ;;  f2              3   33[COMRAM] float 
  1682 ;; Auto vars:     Size  Location     Type
  1683 ;;  f3              3   40[COMRAM] float 
  1684 ;;  sign            1   44[COMRAM] unsigned char 
  1685 ;;  exp             1   43[COMRAM] unsigned char 
  1686 ;;  cntr            1   39[COMRAM] unsigned char 
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  3   30[COMRAM] float 
  1689 ;; Registers used:
  1690 ;;		wreg, status,2, status,0, cstack
  1691 ;; Tracked objects:
  1692 ;;		On entry : 0/0
  1693 ;;		On exit  : 0/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1696 ;;      Params:         6       0       0       0       0       0       0
  1697 ;;      Locals:         6       0       0       0       0       0       0
  1698 ;;      Temps:          3       0       0       0       0       0       0
  1699 ;;      Totals:        15       0       0       0       0       0       0
  1700 ;;Total ram usage:       15 bytes
  1701 ;; Hardware stack levels used:    1
  1702 ;; Hardware stack levels required when called:    4
  1703 ;; This function calls:
  1704 ;;		___ftpack
  1705 ;; This function is called by:
  1706 ;;		_Temp_Convert
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           	psect	text7
  1711  001698                     __ptext7:
  1712                           	opt stack 0
  1713  001698                     ___ftdiv:
  1714                           	opt stack 25
  1715                           
  1716                           ;incstack = 0
  1717  001698  C021  F025         	movff	___ftdiv@f1+2,??___ftdiv
  1718  00169C  6A26               	clrf	(??___ftdiv+1)& (0+255),c
  1719  00169E  6A27               	clrf	(??___ftdiv+2)& (0+255),c
  1720  0016A0  3420               	rlcf	___ftdiv@f1+1,w,c
  1721  0016A2  3625               	rlcf	??___ftdiv& (0+255),f,c
  1722  0016A4  E301               	bnc	u2661
  1723  0016A6  8026               	bsf	(??___ftdiv+1)& (0+255),0,c
  1724  0016A8                     u2661:
  1725  0016A8  5025               	movf	??___ftdiv,w,c
  1726  0016AA  6E2C               	movwf	___ftdiv@exp,c
  1727  0016AC  662C               	tstfsz	___ftdiv@exp& (0+255),c
  1728  0016AE  D007               	goto	l3244
  1729  0016B0  0E00               	movlw	0
  1730  0016B2  6E1F               	movwf	?___ftdiv,c
  1731  0016B4  0E00               	movlw	0
  1732  0016B6  6E20               	movwf	?___ftdiv+1,c
  1733  0016B8  0E00               	movlw	0
  1734  0016BA  6E21               	movwf	?___ftdiv+2,c
  1735  0016BC  0012               	return	
  1736  0016BE                     l3244:
  1737  0016BE  C024  F025         	movff	___ftdiv@f2+2,??___ftdiv
  1738  0016C2  6A26               	clrf	(??___ftdiv+1)& (0+255),c
  1739  0016C4  6A27               	clrf	(??___ftdiv+2)& (0+255),c
  1740  0016C6  3423               	rlcf	___ftdiv@f2+1,w,c
  1741  0016C8  3625               	rlcf	??___ftdiv& (0+255),f,c
  1742  0016CA  E301               	bnc	u2681
  1743  0016CC  8026               	bsf	(??___ftdiv+1)& (0+255),0,c
  1744  0016CE                     u2681:
  1745  0016CE  5025               	movf	??___ftdiv,w,c
  1746  0016D0  6E2D               	movwf	___ftdiv@sign,c
  1747  0016D2  662D               	tstfsz	___ftdiv@sign& (0+255),c
  1748  0016D4  D007               	goto	l3250
  1749  0016D6  0E00               	movlw	0
  1750  0016D8  6E1F               	movwf	?___ftdiv,c
  1751  0016DA  0E00               	movlw	0
  1752  0016DC  6E20               	movwf	?___ftdiv+1,c
  1753  0016DE  0E00               	movlw	0
  1754  0016E0  6E21               	movwf	?___ftdiv+2,c
  1755  0016E2  0012               	return	
  1756  0016E4                     l3250:
  1757  0016E4  0E00               	movlw	0
  1758  0016E6  6E29               	movwf	___ftdiv@f3,c
  1759  0016E8  0E00               	movlw	0
  1760  0016EA  6E2A               	movwf	___ftdiv@f3+1,c
  1761  0016EC  0E00               	movlw	0
  1762  0016EE  6E2B               	movwf	___ftdiv@f3+2,c
  1763  0016F0  502D               	movf	___ftdiv@sign,w,c
  1764  0016F2  0F89               	addlw	137
  1765  0016F4  5E2C               	subwf	___ftdiv@exp,f,c
  1766  0016F6  C021  F02D         	movff	___ftdiv@f1+2,___ftdiv@sign
  1767  0016FA  5024               	movf	___ftdiv@f2+2,w,c
  1768  0016FC  1A2D               	xorwf	___ftdiv@sign,f,c
  1769  0016FE  0E80               	movlw	128
  1770  001700  162D               	andwf	___ftdiv@sign,f,c
  1771  001702  8E20               	bsf	___ftdiv@f1+1,7,c
  1772  001704  0EFF               	movlw	255
  1773  001706  161F               	andwf	___ftdiv@f1,f,c
  1774  001708  0EFF               	movlw	255
  1775  00170A  1620               	andwf	___ftdiv@f1+1,f,c
  1776  00170C  0E00               	movlw	0
  1777  00170E  1621               	andwf	___ftdiv@f1+2,f,c
  1778  001710  8E23               	bsf	___ftdiv@f2+1,7,c
  1779  001712  0EFF               	movlw	255
  1780  001714  1622               	andwf	___ftdiv@f2,f,c
  1781  001716  0EFF               	movlw	255
  1782  001718  1623               	andwf	___ftdiv@f2+1,f,c
  1783  00171A  0E00               	movlw	0
  1784  00171C  1624               	andwf	___ftdiv@f2+2,f,c
  1785  00171E  0E18               	movlw	24
  1786  001720  6E28               	movwf	___ftdiv@cntr,c
  1787  001722                     l3270:
  1788  001722  90D8               	bcf	status,0,c
  1789  001724  3629               	rlcf	___ftdiv@f3,f,c
  1790  001726  362A               	rlcf	___ftdiv@f3+1,f,c
  1791  001728  362B               	rlcf	___ftdiv@f3+2,f,c
  1792  00172A  5022               	movf	___ftdiv@f2,w,c
  1793  00172C  5C1F               	subwf	___ftdiv@f1,w,c
  1794  00172E  5023               	movf	___ftdiv@f2+1,w,c
  1795  001730  5820               	subwfb	___ftdiv@f1+1,w,c
  1796  001732  5024               	movf	___ftdiv@f2+2,w,c
  1797  001734  5821               	subwfb	___ftdiv@f1+2,w,c
  1798  001736  A0D8               	btfss	status,0,c
  1799  001738  D007               	goto	l931
  1800  00173A  5022               	movf	___ftdiv@f2,w,c
  1801  00173C  5E1F               	subwf	___ftdiv@f1,f,c
  1802  00173E  5023               	movf	___ftdiv@f2+1,w,c
  1803  001740  5A20               	subwfb	___ftdiv@f1+1,f,c
  1804  001742  5024               	movf	___ftdiv@f2+2,w,c
  1805  001744  5A21               	subwfb	___ftdiv@f1+2,f,c
  1806  001746  8029               	bsf	___ftdiv@f3,0,c
  1807  001748                     l931:
  1808  001748  90D8               	bcf	status,0,c
  1809  00174A  361F               	rlcf	___ftdiv@f1,f,c
  1810  00174C  3620               	rlcf	___ftdiv@f1+1,f,c
  1811  00174E  3621               	rlcf	___ftdiv@f1+2,f,c
  1812  001750  2E28               	decfsz	___ftdiv@cntr,f,c
  1813  001752  D7E7               	goto	l3270
  1814  001754  C029  F017         	movff	___ftdiv@f3,___ftpack@arg
  1815  001758  C02A  F018         	movff	___ftdiv@f3+1,___ftpack@arg+1
  1816  00175C  C02B  F019         	movff	___ftdiv@f3+2,___ftpack@arg+2
  1817  001760  C02C  F01A         	movff	___ftdiv@exp,___ftpack@exp
  1818  001764  C02D  F01B         	movff	___ftdiv@sign,___ftpack@sign
  1819  001768  ECE5  F00C         	call	___ftpack	;wreg free
  1820  00176C  C017  F01F         	movff	?___ftpack,?___ftdiv
  1821  001770  C018  F020         	movff	?___ftpack+1,?___ftdiv+1
  1822  001774  C019  F021         	movff	?___ftpack+2,?___ftdiv+2
  1823  001778  0012               	return	
  1824  00177A                     __end_of___ftdiv:
  1825                           	opt stack 0
  1826                           tblptru	equ	0xFF8
  1827                           tblptrh	equ	0xFF7
  1828                           tblptrl	equ	0xFF6
  1829                           tablat	equ	0xFF5
  1830                           intcon	equ	0xFF2
  1831                           postinc0	equ	0xFEE
  1832                           wreg	equ	0xFE8
  1833                           postinc2	equ	0xFDE
  1834                           postdec2	equ	0xFDD
  1835                           fsr2h	equ	0xFDA
  1836                           fsr2l	equ	0xFD9
  1837                           status	equ	0xFD8
  1838                           
  1839 ;; *************** function _Temp_Filter *****************
  1840 ;; Defined at:
  1841 ;;		line 36 in file "Tempeture.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;		None
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;  x               2   15[BANK0 ] int 
  1846 ;; Return value:  Size  Location     Type
  1847 ;;		None               void
  1848 ;; Registers used:
  1849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1855 ;;      Params:         0       0       0       0       0       0       0
  1856 ;;      Locals:         0       2       0       0       0       0       0
  1857 ;;      Temps:          0       0       0       0       0       0       0
  1858 ;;      Totals:         0       2       0       0       0       0       0
  1859 ;;Total ram usage:        2 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; Hardware stack levels required when called:    5
  1862 ;; This function calls:
  1863 ;;		___ftadd
  1864 ;;		___ftmul
  1865 ;;		___wmul
  1866 ;; This function is called by:
  1867 ;;		_Temp_Convert
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           	psect	text8
  1872  000F50                     __ptext8:
  1873                           	opt stack 0
  1874  000F50                     _Temp_Filter:
  1875                           	opt stack 24
  1876                           
  1877                           ;Tempeture.c: 39: int x;
  1878                           ;Tempeture.c: 40: for(x = 0; x < 10; x++)
  1879                           
  1880                           ;incstack = 0
  1881  000F50  0E00               	movlw	0
  1882  000F52  0100               	movlb	0	; () banked
  1883  000F54  6FDA               	movwf	(Temp_Filter@x+1)& (0+255),b
  1884  000F56  0E00               	movlw	0
  1885  000F58  0100               	movlb	0	; () banked
  1886  000F5A  6FD9               	movwf	Temp_Filter@x& (0+255),b
  1887  000F5C                     
  1888                           ; BSR set to: 0
  1889  000F5C  0100               	movlb	0	; () banked
  1890  000F5E  51DA               	movf	(Temp_Filter@x+1)& (0+255),w,b
  1891  000F60  0A80               	xorlw	128
  1892  000F62  0F80               	addlw	-128
  1893  000F64  0E0A               	movlw	10
  1894  000F66  B4D8               	btfsc	status,2,c
  1895  000F68  5DD9               	subwf	Temp_Filter@x& (0+255),w,b
  1896  000F6A  B0D8               	btfsc	status,0,c
  1897  000F6C  D06B               	goto	l3204
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;Tempeture.c: 41: {
  1901                           ;Tempeture.c: 42: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  1902                           
  1903                           ; BSR set to: 0
  1904                           
  1905                           ; BSR set to: 0
  1906  000F6E  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  1907  000F72  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1908  000F76  0E00               	movlw	0
  1909  000F78  6E22               	movwf	___wmul@multiplicand+1,c
  1910  000F7A  0E03               	movlw	3
  1911  000F7C  6E21               	movwf	___wmul@multiplicand,c
  1912  000F7E  EC68  F00F         	call	___wmul	;wreg free
  1913  000F82  0100               	movlb	0	; () banked
  1914  000F84  0E7E               	movlw	low _Temp_DegF
  1915  000F86  241F               	addwf	?___wmul,w,c
  1916  000F88  6ED9               	movwf	fsr2l,c
  1917  000F8A  0100               	movlb	0	; () banked
  1918  000F8C  0E00               	movlw	high _Temp_DegF
  1919  000F8E  2020               	addwfc	?___wmul+1,w,c
  1920  000F90  6EDA               	movwf	fsr2h,c
  1921  000F92  0E48               	movlw	72
  1922  000F94  6E2C               	movwf	___ftmul@f2,c
  1923  000F96  0E61               	movlw	97
  1924  000F98  6E2D               	movwf	___ftmul@f2+1,c
  1925  000F9A  0E3F               	movlw	63
  1926  000F9C  6E2E               	movwf	___ftmul@f2+2,c
  1927  000F9E  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  1928  000FA2  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1929  000FA6  0E00               	movlw	0
  1930  000FA8  6E22               	movwf	___wmul@multiplicand+1,c
  1931  000FAA  0E03               	movlw	3
  1932  000FAC  6E21               	movwf	___wmul@multiplicand,c
  1933  000FAE  EC68  F00F         	call	___wmul	;wreg free
  1934  000FB2  0101               	movlb	1	; () banked
  1935  000FB4  0E8C               	movlw	low _TmpTemp_DegF
  1936  000FB6  241F               	addwf	?___wmul,w,c
  1937  000FB8  6EE1               	movwf	fsr1l,c
  1938  000FBA  0101               	movlb	1	; () banked
  1939  000FBC  0E01               	movlw	high _TmpTemp_DegF
  1940  000FBE  2020               	addwfc	?___wmul+1,w,c
  1941  000FC0  6EE2               	movwf	fsr1h,c
  1942  000FC2  CFE6 F029          	movff	postinc1,___ftmul@f1
  1943  000FC6  CFE6 F02A          	movff	postinc1,___ftmul@f1+1
  1944  000FCA  CFE5 F02B          	movff	postdec1,___ftmul@f1+2
  1945  000FCE  ECC9  F009         	call	___ftmul	;wreg free
  1946  000FD2  C029  F0D0         	movff	?___ftmul,___ftadd@f1
  1947  000FD6  C02A  F0D1         	movff	?___ftmul+1,___ftadd@f1+1
  1948  000FDA  C02B  F0D2         	movff	?___ftmul+2,___ftadd@f1+2
  1949  000FDE  0EC3               	movlw	195
  1950  000FE0  6E2C               	movwf	___ftmul@f2,c
  1951  000FE2  0EF5               	movlw	245
  1952  000FE4  6E2D               	movwf	___ftmul@f2+1,c
  1953  000FE6  0E3D               	movlw	61
  1954  000FE8  6E2E               	movwf	___ftmul@f2+2,c
  1955  000FEA  0E00               	movlw	0
  1956  000FEC  6E22               	movwf	___wmul@multiplicand+1,c
  1957  000FEE  0E03               	movlw	3
  1958  000FF0  6E21               	movwf	___wmul@multiplicand,c
  1959  000FF2  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  1960  000FF6  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1961  000FFA  EC68  F00F         	call	___wmul	;wreg free
  1962  000FFE  0101               	movlb	1	; () banked
  1963  001000  0E50               	movlw	low _PrevTemp_DegF
  1964  001002  241F               	addwf	?___wmul,w,c
  1965  001004  6EE1               	movwf	fsr1l,c
  1966  001006  0101               	movlb	1	; () banked
  1967  001008  0E01               	movlw	high _PrevTemp_DegF
  1968  00100A  2020               	addwfc	?___wmul+1,w,c
  1969  00100C  6EE2               	movwf	fsr1h,c
  1970  00100E  CFE6 F029          	movff	postinc1,___ftmul@f1
  1971  001012  CFE6 F02A          	movff	postinc1,___ftmul@f1+1
  1972  001016  CFE5 F02B          	movff	postdec1,___ftmul@f1+2
  1973  00101A  ECC9  F009         	call	___ftmul	;wreg free
  1974  00101E  C029  F0D3         	movff	?___ftmul,___ftadd@f2
  1975  001022  C02A  F0D4         	movff	?___ftmul+1,___ftadd@f2+1
  1976  001026  C02B  F0D5         	movff	?___ftmul+2,___ftadd@f2+2
  1977  00102A  EC73  F005         	call	___ftadd	;wreg free
  1978  00102E  C0D0  FFDE         	movff	?___ftadd,postinc2
  1979  001032  C0D1  FFDE         	movff	?___ftadd+1,postinc2
  1980  001036  C0D2  FFDD         	movff	?___ftadd+2,postdec2
  1981  00103A  52DD               	movf	postdec2,f,c
  1982  00103C  0100               	movlb	0	; () banked
  1983  00103E  4BD9               	infsnz	Temp_Filter@x& (0+255),f,b
  1984  001040  2BDA               	incf	(Temp_Filter@x+1)& (0+255),f,b
  1985  001042  D78C               	goto	L3
  1986  001044                     l3204:
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;Tempeture.c: 43: }
  1990                           ;Tempeture.c: 44: for(x = 0; x < 10; x++)
  1991  001044  0E00               	movlw	0
  1992  001046  0100               	movlb	0	; () banked
  1993  001048  6FDA               	movwf	(Temp_Filter@x+1)& (0+255),b
  1994  00104A  0E00               	movlw	0
  1995  00104C  0100               	movlb	0	; () banked
  1996  00104E  6FD9               	movwf	Temp_Filter@x& (0+255),b
  1997  001050                     
  1998                           ; BSR set to: 0
  1999  001050  0100               	movlb	0	; () banked
  2000  001052  51DA               	movf	(Temp_Filter@x+1)& (0+255),w,b
  2001  001054  0A80               	xorlw	128
  2002  001056  0F80               	addlw	-128
  2003  001058  0E0A               	movlw	10
  2004  00105A  B4D8               	btfsc	status,2,c
  2005  00105C  5DD9               	subwf	Temp_Filter@x& (0+255),w,b
  2006  00105E  B0D8               	btfsc	status,0,c
  2007  001060  0012               	return	
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;Tempeture.c: 45: {
  2011                           ;Tempeture.c: 46: PrevTemp_DegF[x] = Temp_DegF[x];
  2012                           
  2013                           ; BSR set to: 0
  2014                           
  2015                           ; BSR set to: 0
  2016  001062  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  2017  001066  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2018  00106A  0E00               	movlw	0
  2019  00106C  6E22               	movwf	___wmul@multiplicand+1,c
  2020  00106E  0E03               	movlw	3
  2021  001070  6E21               	movwf	___wmul@multiplicand,c
  2022  001072  EC68  F00F         	call	___wmul	;wreg free
  2023  001076  0100               	movlb	0	; () banked
  2024  001078  0E7E               	movlw	low _Temp_DegF
  2025  00107A  241F               	addwf	?___wmul,w,c
  2026  00107C  6ED9               	movwf	fsr2l,c
  2027  00107E  0100               	movlb	0	; () banked
  2028  001080  0E00               	movlw	high _Temp_DegF
  2029  001082  2020               	addwfc	?___wmul+1,w,c
  2030  001084  6EDA               	movwf	fsr2h,c
  2031  001086  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  2032  00108A  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2033  00108E  0E00               	movlw	0
  2034  001090  6E22               	movwf	___wmul@multiplicand+1,c
  2035  001092  0E03               	movlw	3
  2036  001094  6E21               	movwf	___wmul@multiplicand,c
  2037  001096  EC68  F00F         	call	___wmul	;wreg free
  2038  00109A  0101               	movlb	1	; () banked
  2039  00109C  0E50               	movlw	low _PrevTemp_DegF
  2040  00109E  241F               	addwf	?___wmul,w,c
  2041  0010A0  6EE1               	movwf	fsr1l,c
  2042  0010A2  0101               	movlb	1	; () banked
  2043  0010A4  0E01               	movlw	high _PrevTemp_DegF
  2044  0010A6  2020               	addwfc	?___wmul+1,w,c
  2045  0010A8  6EE2               	movwf	fsr1h,c
  2046  0010AA  CFDE FFE6          	movff	postinc2,postinc1
  2047  0010AE  CFDE FFE6          	movff	postinc2,postinc1
  2048  0010B2  CFDE FFE5          	movff	postinc2,postdec1
  2049  0010B6  52E5               	movf	postdec1,f,c
  2050                           
  2051                           ; BSR set to: 1
  2052  0010B8  0100               	movlb	0	; () banked
  2053  0010BA  4BD9               	infsnz	Temp_Filter@x& (0+255),f,b
  2054  0010BC  2BDA               	incf	(Temp_Filter@x+1)& (0+255),f,b
  2055  0010BE  D7C8               	goto	L4
  2056  0010C0                     __end_of_Temp_Filter:
  2057                           	opt stack 0
  2058                           tblptru	equ	0xFF8
  2059                           tblptrh	equ	0xFF7
  2060                           tblptrl	equ	0xFF6
  2061                           tablat	equ	0xFF5
  2062                           intcon	equ	0xFF2
  2063                           postinc0	equ	0xFEE
  2064                           wreg	equ	0xFE8
  2065                           postinc1	equ	0xFE6
  2066                           postdec1	equ	0xFE5
  2067                           fsr1h	equ	0xFE2
  2068                           fsr1l	equ	0xFE1
  2069                           postinc2	equ	0xFDE
  2070                           postdec2	equ	0xFDD
  2071                           fsr2h	equ	0xFDA
  2072                           fsr2l	equ	0xFD9
  2073                           status	equ	0xFD8
  2074                           
  2075 ;; *************** function _SYSTEM_Initialize *****************
  2076 ;; Defined at:
  2077 ;;		line 112 in file "mcc_generated_files/mcc.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;		None
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;		None
  2082 ;; Return value:  Size  Location     Type
  2083 ;;		None               void
  2084 ;; Registers used:
  2085 ;;		wreg, status,2, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2091 ;;      Params:         0       0       0       0       0       0       0
  2092 ;;      Locals:         0       0       0       0       0       0       0
  2093 ;;      Temps:          0       0       0       0       0       0       0
  2094 ;;      Totals:         0       0       0       0       0       0       0
  2095 ;;Total ram usage:        0 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    5
  2098 ;; This function calls:
  2099 ;;		_ADC_Initialize
  2100 ;;		_EUSART1_Initialize
  2101 ;;		_INTERRUPT_Initialize
  2102 ;;		_OSCILLATOR_Initialize
  2103 ;;		_PIN_MANAGER_Initialize
  2104 ;;		_TMR1_Initialize
  2105 ;; This function is called by:
  2106 ;;		_main
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           	psect	text9
  2111  001F18                     __ptext9:
  2112                           	opt stack 0
  2113  001F18                     _SYSTEM_Initialize:
  2114                           	opt stack 25
  2115                           
  2116                           ;mcc.c: 114: OSCILLATOR_Initialize();
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;incstack = 0
  2120  001F18  ECC9  F00F         	call	_OSCILLATOR_Initialize	;wreg free
  2121                           
  2122                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  2123  001F1C  EC51  F00E         	call	_PIN_MANAGER_Initialize	;wreg free
  2124                           
  2125                           ;mcc.c: 116: INTERRUPT_Initialize();
  2126  001F20  ECD0  F00F         	call	_INTERRUPT_Initialize	;wreg free
  2127                           
  2128                           ;mcc.c: 117: ADC_Initialize();
  2129  001F24  ECB3  F00F         	call	_ADC_Initialize	;wreg free
  2130                           
  2131                           ;mcc.c: 118: EUSART1_Initialize();
  2132  001F28  ECBA  F00E         	call	_EUSART1_Initialize	;wreg free
  2133                           
  2134                           ;mcc.c: 119: TMR1_Initialize();
  2135  001F2C  EC7B  F00F         	call	_TMR1_Initialize	;wreg free
  2136  001F30  0012               	return	
  2137  001F32                     __end_of_SYSTEM_Initialize:
  2138                           	opt stack 0
  2139                           tblptru	equ	0xFF8
  2140                           tblptrh	equ	0xFF7
  2141                           tblptrl	equ	0xFF6
  2142                           tablat	equ	0xFF5
  2143                           intcon	equ	0xFF2
  2144                           postinc0	equ	0xFEE
  2145                           wreg	equ	0xFE8
  2146                           postinc1	equ	0xFE6
  2147                           postdec1	equ	0xFE5
  2148                           fsr1h	equ	0xFE2
  2149                           fsr1l	equ	0xFE1
  2150                           postinc2	equ	0xFDE
  2151                           postdec2	equ	0xFDD
  2152                           fsr2h	equ	0xFDA
  2153                           fsr2l	equ	0xFD9
  2154                           status	equ	0xFD8
  2155                           
  2156 ;; *************** function _TMR1_Initialize *****************
  2157 ;; Defined at:
  2158 ;;		line 15 in file "mcc_generated_files/tmr1.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;		None
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;		None
  2163 ;; Return value:  Size  Location     Type
  2164 ;;		None               void
  2165 ;; Registers used:
  2166 ;;		wreg, status,2, cstack
  2167 ;; Tracked objects:
  2168 ;;		On entry : 0/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2172 ;;      Params:         0       0       0       0       0       0       0
  2173 ;;      Locals:         0       0       0       0       0       0       0
  2174 ;;      Temps:          0       0       0       0       0       0       0
  2175 ;;      Totals:         0       0       0       0       0       0       0
  2176 ;;Total ram usage:        0 bytes
  2177 ;; Hardware stack levels used:    1
  2178 ;; Hardware stack levels required when called:    4
  2179 ;; This function calls:
  2180 ;;		_TMR1_StartTimer
  2181 ;; This function is called by:
  2182 ;;		_SYSTEM_Initialize
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           	psect	text10
  2187  001EF6                     __ptext10:
  2188                           	opt stack 0
  2189  001EF6                     _TMR1_Initialize:
  2190                           	opt stack 25
  2191                           
  2192                           ;tmr1.c: 20: T1CON = 0x00;
  2193                           
  2194                           ;incstack = 0
  2195  001EF6  0E00               	movlw	0
  2196  001EF8  6ECD               	movwf	4045,c	;volatile
  2197                           
  2198                           ;tmr1.c: 23: T1GCON = 0x00;
  2199  001EFA  0E00               	movlw	0
  2200  001EFC  6ECC               	movwf	4044,c	;volatile
  2201                           
  2202                           ;tmr1.c: 26: TMR1H = 0xB1;
  2203  001EFE  0EB1               	movlw	177
  2204  001F00  6ECF               	movwf	4047,c	;volatile
  2205                           
  2206                           ;tmr1.c: 29: TMR1L = 0xE0;
  2207  001F02  0EE0               	movlw	224
  2208  001F04  6ECE               	movwf	4046,c	;volatile
  2209                           
  2210                           ;tmr1.c: 32: timer1ReloadVal=TMR1;
  2211  001F06  CFCE F046          	movff	4046,_timer1ReloadVal	;volatile
  2212  001F0A  CFCF F047          	movff	4047,_timer1ReloadVal+1	;volatile
  2213                           
  2214                           ;tmr1.c: 35: PIR1bits.TMR1IF = 0;
  2215  001F0E  909E               	bcf	3998,0,c	;volatile
  2216                           
  2217                           ;tmr1.c: 38: PIE1bits.TMR1IE = 1;
  2218  001F10  809D               	bsf	3997,0,c	;volatile
  2219                           
  2220                           ;tmr1.c: 41: TMR1_StartTimer();
  2221  001F12  ECD6  F00F         	call	_TMR1_StartTimer	;wreg free
  2222  001F16  0012               	return	
  2223  001F18                     __end_of_TMR1_Initialize:
  2224                           	opt stack 0
  2225                           tblptru	equ	0xFF8
  2226                           tblptrh	equ	0xFF7
  2227                           tblptrl	equ	0xFF6
  2228                           tablat	equ	0xFF5
  2229                           intcon	equ	0xFF2
  2230                           postinc0	equ	0xFEE
  2231                           wreg	equ	0xFE8
  2232                           postinc1	equ	0xFE6
  2233                           postdec1	equ	0xFE5
  2234                           fsr1h	equ	0xFE2
  2235                           fsr1l	equ	0xFE1
  2236                           postinc2	equ	0xFDE
  2237                           postdec2	equ	0xFDD
  2238                           fsr2h	equ	0xFDA
  2239                           fsr2l	equ	0xFD9
  2240                           status	equ	0xFD8
  2241                           
  2242 ;; *************** function _TMR1_StartTimer *****************
  2243 ;; Defined at:
  2244 ;;		line 44 in file "mcc_generated_files/tmr1.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;		None
  2249 ;; Return value:  Size  Location     Type
  2250 ;;		None               void
  2251 ;; Registers used:
  2252 ;;		None
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2258 ;;      Params:         0       0       0       0       0       0       0
  2259 ;;      Locals:         0       0       0       0       0       0       0
  2260 ;;      Temps:          0       0       0       0       0       0       0
  2261 ;;      Totals:         0       0       0       0       0       0       0
  2262 ;;Total ram usage:        0 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    3
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_TMR1_Initialize
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           	psect	text11
  2273  001FAC                     __ptext11:
  2274                           	opt stack 0
  2275  001FAC                     _TMR1_StartTimer:
  2276                           	opt stack 25
  2277                           
  2278                           ;tmr1.c: 47: T1CONbits.TMR1ON = 1;
  2279                           
  2280                           ;incstack = 0
  2281  001FAC  80CD               	bsf	4045,0,c	;volatile
  2282  001FAE  0012               	return	
  2283  001FB0                     __end_of_TMR1_StartTimer:
  2284                           	opt stack 0
  2285                           tblptru	equ	0xFF8
  2286                           tblptrh	equ	0xFF7
  2287                           tblptrl	equ	0xFF6
  2288                           tablat	equ	0xFF5
  2289                           intcon	equ	0xFF2
  2290                           postinc0	equ	0xFEE
  2291                           wreg	equ	0xFE8
  2292                           postinc1	equ	0xFE6
  2293                           postdec1	equ	0xFE5
  2294                           fsr1h	equ	0xFE2
  2295                           fsr1l	equ	0xFE1
  2296                           postinc2	equ	0xFDE
  2297                           postdec2	equ	0xFDD
  2298                           fsr2h	equ	0xFDA
  2299                           fsr2l	equ	0xFD9
  2300                           status	equ	0xFD8
  2301                           
  2302 ;; *************** function _PIN_MANAGER_Initialize *****************
  2303 ;; Defined at:
  2304 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;		None
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;		None
  2309 ;; Return value:  Size  Location     Type
  2310 ;;		None               void
  2311 ;; Registers used:
  2312 ;;		wreg, status,2
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2318 ;;      Params:         0       0       0       0       0       0       0
  2319 ;;      Locals:         0       0       0       0       0       0       0
  2320 ;;      Temps:          0       0       0       0       0       0       0
  2321 ;;      Totals:         0       0       0       0       0       0       0
  2322 ;;Total ram usage:        0 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:    3
  2325 ;; This function calls:
  2326 ;;		Nothing
  2327 ;; This function is called by:
  2328 ;;		_SYSTEM_Initialize
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331                           
  2332                           	psect	text12
  2333  001CA2                     __ptext12:
  2334                           	opt stack 0
  2335  001CA2                     _PIN_MANAGER_Initialize:
  2336                           	opt stack 26
  2337                           
  2338                           ;pin_manager.c: 52: LATA = 0x00;
  2339                           
  2340                           ;incstack = 0
  2341  001CA2  0E00               	movlw	0
  2342  001CA4  6E89               	movwf	3977,c	;volatile
  2343                           
  2344                           ;pin_manager.c: 53: TRISA = 0xAE;
  2345  001CA6  0EAE               	movlw	174
  2346  001CA8  6E92               	movwf	3986,c	;volatile
  2347                           
  2348                           ;pin_manager.c: 54: ANSELA = 0x2E;
  2349  001CAA  0E2E               	movlw	46
  2350  001CAC  010F               	movlb	15	; () banked
  2351  001CAE  6F38               	movwf	56,b	;volatile
  2352                           
  2353                           ;pin_manager.c: 56: LATB = 0x00;
  2354  001CB0  0E00               	movlw	0
  2355  001CB2  6E8A               	movwf	3978,c	;volatile
  2356                           
  2357                           ;pin_manager.c: 57: TRISB = 0xF4;
  2358  001CB4  0EF4               	movlw	244
  2359  001CB6  6E93               	movwf	3987,c	;volatile
  2360                           
  2361                           ;pin_manager.c: 58: ANSELB = 0x34;
  2362  001CB8  0E34               	movlw	52
  2363  001CBA  010F               	movlb	15	; () banked
  2364  001CBC  6F39               	movwf	57,b	;volatile
  2365                           
  2366                           ;pin_manager.c: 59: WPUB = 0x00;
  2367  001CBE  0E00               	movlw	0
  2368  001CC0  6E61               	movwf	3937,c	;volatile
  2369                           
  2370                           ;pin_manager.c: 61: LATC = 0x08;
  2371  001CC2  0E08               	movlw	8
  2372  001CC4  6E8B               	movwf	3979,c	;volatile
  2373                           
  2374                           ;pin_manager.c: 62: TRISC = 0xC4;
  2375  001CC6  0EC4               	movlw	196
  2376  001CC8  6E94               	movwf	3988,c	;volatile
  2377                           
  2378                           ;pin_manager.c: 63: ANSELC = 0x04;
  2379  001CCA  0E04               	movlw	4
  2380  001CCC  010F               	movlb	15	; () banked
  2381  001CCE  6F3A               	movwf	58,b	;volatile
  2382                           
  2383                           ;pin_manager.c: 65: LATD = 0x00;
  2384  001CD0  0E00               	movlw	0
  2385  001CD2  6E8C               	movwf	3980,c	;volatile
  2386                           
  2387                           ;pin_manager.c: 66: TRISD = 0xD1;
  2388  001CD4  0ED1               	movlw	209
  2389  001CD6  6E95               	movwf	3989,c	;volatile
  2390                           
  2391                           ;pin_manager.c: 67: ANSELD = 0xD1;
  2392  001CD8  0ED1               	movlw	209
  2393  001CDA  010F               	movlb	15	; () banked
  2394  001CDC  6F3B               	movwf	59,b	;volatile
  2395                           
  2396                           ;pin_manager.c: 69: LATE = 0x00;
  2397  001CDE  0E00               	movlw	0
  2398  001CE0  6E8D               	movwf	3981,c	;volatile
  2399                           
  2400                           ;pin_manager.c: 70: TRISE = 0x05;
  2401  001CE2  0E05               	movlw	5
  2402  001CE4  6E96               	movwf	3990,c	;volatile
  2403                           
  2404                           ;pin_manager.c: 71: ANSELE = 0x05;
  2405  001CE6  0E05               	movlw	5
  2406  001CE8  010F               	movlb	15	; () banked
  2407  001CEA  6F3C               	movwf	60,b	;volatile
  2408                           
  2409                           ; BSR set to: 15
  2410                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
  2411  001CEC  8EF1               	bsf	intcon2,7,c	;volatile
  2412                           
  2413                           ; BSR set to: 15
  2414  001CEE  0012               	return	
  2415  001CF0                     __end_of_PIN_MANAGER_Initialize:
  2416                           	opt stack 0
  2417                           tblptru	equ	0xFF8
  2418                           tblptrh	equ	0xFF7
  2419                           tblptrl	equ	0xFF6
  2420                           tablat	equ	0xFF5
  2421                           intcon	equ	0xFF2
  2422                           intcon2	equ	0xFF1
  2423                           postinc0	equ	0xFEE
  2424                           wreg	equ	0xFE8
  2425                           postinc1	equ	0xFE6
  2426                           postdec1	equ	0xFE5
  2427                           fsr1h	equ	0xFE2
  2428                           fsr1l	equ	0xFE1
  2429                           postinc2	equ	0xFDE
  2430                           postdec2	equ	0xFDD
  2431                           fsr2h	equ	0xFDA
  2432                           fsr2l	equ	0xFD9
  2433                           status	equ	0xFD8
  2434                           
  2435 ;; *************** function _OSCILLATOR_Initialize *****************
  2436 ;; Defined at:
  2437 ;;		line 122 in file "mcc_generated_files/mcc.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;		None
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;		None
  2442 ;; Return value:  Size  Location     Type
  2443 ;;		None               void
  2444 ;; Registers used:
  2445 ;;		wreg, status,2
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2451 ;;      Params:         0       0       0       0       0       0       0
  2452 ;;      Locals:         0       0       0       0       0       0       0
  2453 ;;      Temps:          0       0       0       0       0       0       0
  2454 ;;      Totals:         0       0       0       0       0       0       0
  2455 ;;Total ram usage:        0 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    3
  2458 ;; This function calls:
  2459 ;;		Nothing
  2460 ;; This function is called by:
  2461 ;;		_SYSTEM_Initialize
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           	psect	text13
  2466  001F92                     __ptext13:
  2467                           	opt stack 0
  2468  001F92                     _OSCILLATOR_Initialize:
  2469                           	opt stack 26
  2470                           
  2471                           ;mcc.c: 125: OSCCON = 0x62;
  2472                           
  2473                           ; BSR set to: 15
  2474                           ;incstack = 0
  2475  001F92  0E62               	movlw	98
  2476  001F94  6ED3               	movwf	4051,c	;volatile
  2477                           
  2478                           ;mcc.c: 127: OSCCON2 = 0x04;
  2479  001F96  0E04               	movlw	4
  2480  001F98  6ED2               	movwf	4050,c	;volatile
  2481                           
  2482                           ;mcc.c: 129: OSCTUNE = 0x00;
  2483  001F9A  0E00               	movlw	0
  2484  001F9C  6E9B               	movwf	3995,c	;volatile
  2485  001F9E  0012               	return	
  2486  001FA0                     __end_of_OSCILLATOR_Initialize:
  2487                           	opt stack 0
  2488                           tblptru	equ	0xFF8
  2489                           tblptrh	equ	0xFF7
  2490                           tblptrl	equ	0xFF6
  2491                           tablat	equ	0xFF5
  2492                           intcon	equ	0xFF2
  2493                           intcon2	equ	0xFF1
  2494                           postinc0	equ	0xFEE
  2495                           wreg	equ	0xFE8
  2496                           postinc1	equ	0xFE6
  2497                           postdec1	equ	0xFE5
  2498                           fsr1h	equ	0xFE2
  2499                           fsr1l	equ	0xFE1
  2500                           postinc2	equ	0xFDE
  2501                           postdec2	equ	0xFDD
  2502                           fsr2h	equ	0xFDA
  2503                           fsr2l	equ	0xFD9
  2504                           status	equ	0xFD8
  2505                           
  2506 ;; *************** function _INTERRUPT_Initialize *****************
  2507 ;; Defined at:
  2508 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;		None
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;		None
  2513 ;; Return value:  Size  Location     Type
  2514 ;;		None               void
  2515 ;; Registers used:
  2516 ;;		None
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2522 ;;      Params:         0       0       0       0       0       0       0
  2523 ;;      Locals:         0       0       0       0       0       0       0
  2524 ;;      Temps:          0       0       0       0       0       0       0
  2525 ;;      Totals:         0       0       0       0       0       0       0
  2526 ;;Total ram usage:        0 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    3
  2529 ;; This function calls:
  2530 ;;		Nothing
  2531 ;; This function is called by:
  2532 ;;		_SYSTEM_Initialize
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text14
  2537  001FA0                     __ptext14:
  2538                           	opt stack 0
  2539  001FA0                     _INTERRUPT_Initialize:
  2540                           	opt stack 26
  2541                           
  2542                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  2543                           
  2544                           ;incstack = 0
  2545  001FA0  9ED0               	bcf	4048,7,c	;volatile
  2546                           
  2547                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  2548  001FA2  9A9F               	bcf	3999,5,c	;volatile
  2549                           
  2550                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  2551  001FA4  9C9F               	bcf	3999,6,c	;volatile
  2552                           
  2553                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  2554  001FA6  909F               	bcf	3999,0,c	;volatile
  2555                           
  2556                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  2557  001FA8  989F               	bcf	3999,4,c	;volatile
  2558  001FAA  0012               	return	
  2559  001FAC                     __end_of_INTERRUPT_Initialize:
  2560                           	opt stack 0
  2561                           tblptru	equ	0xFF8
  2562                           tblptrh	equ	0xFF7
  2563                           tblptrl	equ	0xFF6
  2564                           tablat	equ	0xFF5
  2565                           intcon	equ	0xFF2
  2566                           intcon2	equ	0xFF1
  2567                           postinc0	equ	0xFEE
  2568                           wreg	equ	0xFE8
  2569                           postinc1	equ	0xFE6
  2570                           postdec1	equ	0xFE5
  2571                           fsr1h	equ	0xFE2
  2572                           fsr1l	equ	0xFE1
  2573                           postinc2	equ	0xFDE
  2574                           postdec2	equ	0xFDD
  2575                           fsr2h	equ	0xFDA
  2576                           fsr2l	equ	0xFD9
  2577                           status	equ	0xFD8
  2578                           
  2579 ;; *************** function _EUSART1_Initialize *****************
  2580 ;; Defined at:
  2581 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;		None               void
  2588 ;; Registers used:
  2589 ;;		wreg, status,2
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2595 ;;      Params:         0       0       0       0       0       0       0
  2596 ;;      Locals:         0       0       0       0       0       0       0
  2597 ;;      Temps:          0       0       0       0       0       0       0
  2598 ;;      Totals:         0       0       0       0       0       0       0
  2599 ;;Total ram usage:        0 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    3
  2602 ;; This function calls:
  2603 ;;		Nothing
  2604 ;; This function is called by:
  2605 ;;		_SYSTEM_Initialize
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text15
  2610  001D74                     __ptext15:
  2611                           	opt stack 0
  2612  001D74                     _EUSART1_Initialize:
  2613                           	opt stack 26
  2614                           
  2615                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  2616                           
  2617                           ;incstack = 0
  2618  001D74  9A9D               	bcf	3997,5,c	;volatile
  2619                           
  2620                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  2621  001D76  989D               	bcf	3997,4,c	;volatile
  2622                           
  2623                           ;eusart1.c: 85: BAUD1CON = 0x48;
  2624  001D78  0E48               	movlw	72
  2625  001D7A  6EB8               	movwf	4024,c	;volatile
  2626                           
  2627                           ;eusart1.c: 88: RC1STA = 0x98;
  2628  001D7C  0E98               	movlw	152
  2629  001D7E  6EAB               	movwf	4011,c	;volatile
  2630                           
  2631                           ;eusart1.c: 91: TX1STA = 0x26;
  2632  001D80  0E26               	movlw	38
  2633  001D82  6EAC               	movwf	4012,c	;volatile
  2634                           
  2635                           ;eusart1.c: 94: SPBRG1 = 0x22;
  2636  001D84  0E22               	movlw	34
  2637  001D86  6EAF               	movwf	4015,c	;volatile
  2638                           
  2639                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  2640  001D88  0E00               	movlw	0
  2641  001D8A  6EB0               	movwf	4016,c	;volatile
  2642                           
  2643                           ;eusart1.c: 100: TXREG1 = 0x00;
  2644  001D8C  0E00               	movlw	0
  2645  001D8E  6EAD               	movwf	4013,c	;volatile
  2646                           
  2647                           ;eusart1.c: 103: RCREG1 = 0x00;
  2648  001D90  0E00               	movlw	0
  2649  001D92  6EAE               	movwf	4014,c	;volatile
  2650                           
  2651                           ;eusart1.c: 107: eusart1TxHead = 0;
  2652  001D94  0E00               	movlw	0
  2653  001D96  6E44               	movwf	_eusart1TxHead,c
  2654                           
  2655                           ;eusart1.c: 108: eusart1TxTail = 0;
  2656  001D98  0E00               	movlw	0
  2657  001D9A  6E45               	movwf	_eusart1TxTail,c
  2658                           
  2659                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  2660  001D9C  0E08               	movlw	8
  2661  001D9E  6E48               	movwf	_eusart1TxBufferRemaining,c	;volatile
  2662                           
  2663                           ;eusart1.c: 111: eusart1RxHead = 0;
  2664  001DA0  0E00               	movlw	0
  2665  001DA2  6E42               	movwf	_eusart1RxHead,c
  2666                           
  2667                           ;eusart1.c: 112: eusart1RxTail = 0;
  2668  001DA4  0E00               	movlw	0
  2669  001DA6  6E43               	movwf	_eusart1RxTail,c
  2670                           
  2671                           ;eusart1.c: 113: eusart1RxCount = 0;
  2672  001DA8  0E00               	movlw	0
  2673  001DAA  6E41               	movwf	_eusart1RxCount,c	;volatile
  2674                           
  2675                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  2676  001DAC  8A9D               	bsf	3997,5,c	;volatile
  2677  001DAE  0012               	return	
  2678  001DB0                     __end_of_EUSART1_Initialize:
  2679                           	opt stack 0
  2680                           tblptru	equ	0xFF8
  2681                           tblptrh	equ	0xFF7
  2682                           tblptrl	equ	0xFF6
  2683                           tablat	equ	0xFF5
  2684                           intcon	equ	0xFF2
  2685                           intcon2	equ	0xFF1
  2686                           postinc0	equ	0xFEE
  2687                           wreg	equ	0xFE8
  2688                           postinc1	equ	0xFE6
  2689                           postdec1	equ	0xFE5
  2690                           fsr1h	equ	0xFE2
  2691                           fsr1l	equ	0xFE1
  2692                           postinc2	equ	0xFDE
  2693                           postdec2	equ	0xFDD
  2694                           fsr2h	equ	0xFDA
  2695                           fsr2l	equ	0xFD9
  2696                           status	equ	0xFD8
  2697                           
  2698 ;; *************** function _ADC_Initialize *****************
  2699 ;; Defined at:
  2700 ;;		line 13 in file "mcc_generated_files/adc.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;		None
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;		None
  2705 ;; Return value:  Size  Location     Type
  2706 ;;		None               void
  2707 ;; Registers used:
  2708 ;;		wreg, status,2
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2714 ;;      Params:         0       0       0       0       0       0       0
  2715 ;;      Locals:         0       0       0       0       0       0       0
  2716 ;;      Temps:          0       0       0       0       0       0       0
  2717 ;;      Totals:         0       0       0       0       0       0       0
  2718 ;;Total ram usage:        0 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    3
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_SYSTEM_Initialize
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text16
  2729  001F66                     __ptext16:
  2730                           	opt stack 0
  2731  001F66                     _ADC_Initialize:
  2732                           	opt stack 26
  2733                           
  2734                           ;adc.c: 18: ADCON0 = 0x01;
  2735                           
  2736                           ;incstack = 0
  2737  001F66  0E01               	movlw	1
  2738  001F68  6EC2               	movwf	4034,c	;volatile
  2739                           
  2740                           ;adc.c: 21: ADCON1 = 0x80;
  2741  001F6A  0E80               	movlw	128
  2742  001F6C  6EC1               	movwf	4033,c	;volatile
  2743                           
  2744                           ;adc.c: 24: ADCON2 = 0x0A;
  2745  001F6E  0E0A               	movlw	10
  2746  001F70  6EC0               	movwf	4032,c	;volatile
  2747                           
  2748                           ;adc.c: 27: ADRESL = 0x00;
  2749  001F72  0E00               	movlw	0
  2750  001F74  6EC3               	movwf	4035,c	;volatile
  2751                           
  2752                           ;adc.c: 30: ADRESH = 0x00;
  2753  001F76  0E00               	movlw	0
  2754  001F78  6EC4               	movwf	4036,c	;volatile
  2755                           
  2756                           ;adc.c: 33: PIE1bits.ADIE = 1;
  2757  001F7A  8C9D               	bsf	3997,6,c	;volatile
  2758  001F7C  0012               	return	
  2759  001F7E                     __end_of_ADC_Initialize:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           intcon	equ	0xFF2
  2766                           intcon2	equ	0xFF1
  2767                           postinc0	equ	0xFEE
  2768                           wreg	equ	0xFE8
  2769                           postinc1	equ	0xFE6
  2770                           postdec1	equ	0xFE5
  2771                           fsr1h	equ	0xFE2
  2772                           fsr1l	equ	0xFE1
  2773                           postinc2	equ	0xFDE
  2774                           postdec2	equ	0xFDD
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _RunBypas *****************
  2780 ;; Defined at:
  2781 ;;		line 114 in file "Bypass.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;		None
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  batvolt         3   47[COMRAM] float 
  2786 ;;  i               2   50[COMRAM] int 
  2787 ;;  cellbyp         2   45[COMRAM] int 
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  2  438[COMRAM] int 
  2790 ;; Registers used:
  2791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2797 ;;      Params:         0       0       0       0       0       0       0
  2798 ;;      Locals:         7       0       0       0       0       0       0
  2799 ;;      Temps:          0       0       0       0       0       0       0
  2800 ;;      Totals:         7       0       0       0       0       0       0
  2801 ;;Total ram usage:        7 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    5
  2804 ;; This function calls:
  2805 ;;		_Battery_Get
  2806 ;;		_SetBypas
  2807 ;;		___ftge
  2808 ;; This function is called by:
  2809 ;;		_main
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text17
  2814  001852                     __ptext17:
  2815                           	opt stack 0
  2816  001852                     _RunBypas:
  2817                           	opt stack 25
  2818                           
  2819                           ;Bypass.c: 116: int cellbyp = 0;
  2820                           
  2821                           ;incstack = 0
  2822  001852  0E00               	movlw	0
  2823  001854  6E2F               	movwf	RunBypas@cellbyp+1,c
  2824  001856  0E00               	movlw	0
  2825  001858  6E2E               	movwf	RunBypas@cellbyp,c
  2826                           
  2827                           ;Bypass.c: 117: int i = 0;
  2828  00185A  0E00               	movlw	0
  2829  00185C  6E34               	movwf	RunBypas@i+1,c
  2830  00185E  0E00               	movlw	0
  2831  001860  6E33               	movwf	RunBypas@i,c
  2832                           
  2833                           ;Bypass.c: 118: float batvolt = 0;
  2834  001862  0E00               	movlw	0
  2835  001864  6E30               	movwf	RunBypas@batvolt,c
  2836  001866  0E00               	movlw	0
  2837  001868  6E31               	movwf	RunBypas@batvolt+1,c
  2838  00186A  0E00               	movlw	0
  2839  00186C  6E32               	movwf	RunBypas@batvolt+2,c
  2840                           
  2841                           ;Bypass.c: 120: for(i = 0; i<9;i++)
  2842  00186E  0E00               	movlw	0
  2843  001870  6E34               	movwf	RunBypas@i+1,c
  2844  001872  0E00               	movlw	0
  2845  001874  6E33               	movwf	RunBypas@i,c
  2846  001876  5034               	movf	RunBypas@i+1,w,c
  2847  001878  0A80               	xorlw	128
  2848  00187A  0F80               	addlw	-128
  2849  00187C  0E09               	movlw	9
  2850  00187E  B4D8               	btfsc	status,2,c
  2851  001880  5C33               	subwf	RunBypas@i,w,c
  2852  001882  B0D8               	btfsc	status,0,c
  2853  001884  0012               	return	
  2854                           
  2855                           ;Bypass.c: 121: {
  2856                           ;Bypass.c: 122: batvolt = Battery_Get(i);
  2857  001886  C033  F025         	movff	RunBypas@i,Battery_Get@channelnum
  2858  00188A  C034  F026         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  2859  00188E  ECF1  F00E         	call	_Battery_Get	;wreg free
  2860  001892  C025  F030         	movff	?_Battery_Get,RunBypas@batvolt
  2861  001896  C026  F031         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  2862  00189A  C027  F032         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  2863                           
  2864                           ;Bypass.c: 124: if(batvolt >= 4.18)
  2865  00189E  C030  F025         	movff	RunBypas@batvolt,___ftge@ff1
  2866  0018A2  C031  F026         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  2867  0018A6  C032  F027         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  2868  0018AA  0EC3               	movlw	195
  2869  0018AC  6E28               	movwf	___ftge@ff2,c
  2870  0018AE  0E85               	movlw	133
  2871  0018B0  6E29               	movwf	___ftge@ff2+1,c
  2872  0018B2  0E40               	movlw	64
  2873  0018B4  6E2A               	movwf	___ftge@ff2+2,c
  2874  0018B6  ECD4  F00D         	call	___ftge	;wreg free
  2875  0018BA  A0D8               	btfss	status,0,c
  2876  0018BC  D00E               	goto	l3424
  2877                           
  2878                           ;Bypass.c: 125: {
  2879                           ;Bypass.c: 126: SetBypas(i,1);
  2880  0018BE  C033  F017         	movff	RunBypas@i,SetBypas@pin
  2881  0018C2  C034  F018         	movff	RunBypas@i+1,SetBypas@pin+1
  2882  0018C6  0E00               	movlw	0
  2883  0018C8  6E1A               	movwf	SetBypas@state+1,c
  2884  0018CA  0E01               	movlw	1
  2885  0018CC  6E19               	movwf	SetBypas@state,c
  2886  0018CE  ECD3  F00A         	call	_SetBypas	;wreg free
  2887                           
  2888                           ;Bypass.c: 127: cellbyp = 1;
  2889  0018D2  0E00               	movlw	0
  2890  0018D4  6E2F               	movwf	RunBypas@cellbyp+1,c
  2891  0018D6  0E01               	movlw	1
  2892  0018D8  6E2E               	movwf	RunBypas@cellbyp,c
  2893  0018DA                     l3424:
  2894                           
  2895                           ;Bypass.c: 128: }
  2896                           ;Bypass.c: 129: if(batvolt <= 4.15)
  2897  0018DA  0ECD               	movlw	205
  2898  0018DC  6E25               	movwf	___ftge@ff1,c
  2899  0018DE  0E84               	movlw	132
  2900  0018E0  6E26               	movwf	___ftge@ff1+1,c
  2901  0018E2  0E40               	movlw	64
  2902  0018E4  6E27               	movwf	___ftge@ff1+2,c
  2903  0018E6  C030  F028         	movff	RunBypas@batvolt,___ftge@ff2
  2904  0018EA  C031  F029         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  2905  0018EE  C032  F02A         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  2906  0018F2  ECD4  F00D         	call	___ftge	;wreg free
  2907  0018F6  A0D8               	btfss	status,0,c
  2908  0018F8  D00E               	goto	l3430
  2909                           
  2910                           ;Bypass.c: 130: {
  2911                           ;Bypass.c: 131: SetBypas(i,0);
  2912  0018FA  C033  F017         	movff	RunBypas@i,SetBypas@pin
  2913  0018FE  C034  F018         	movff	RunBypas@i+1,SetBypas@pin+1
  2914  001902  0E00               	movlw	0
  2915  001904  6E1A               	movwf	SetBypas@state+1,c
  2916  001906  0E00               	movlw	0
  2917  001908  6E19               	movwf	SetBypas@state,c
  2918  00190A  ECD3  F00A         	call	_SetBypas	;wreg free
  2919                           
  2920                           ;Bypass.c: 132: cellbyp = 1;
  2921  00190E  0E00               	movlw	0
  2922  001910  6E2F               	movwf	RunBypas@cellbyp+1,c
  2923  001912  0E01               	movlw	1
  2924  001914  6E2E               	movwf	RunBypas@cellbyp,c
  2925  001916                     l3430:
  2926  001916  4A33               	infsnz	RunBypas@i,f,c
  2927  001918  2A34               	incf	RunBypas@i+1,f,c
  2928  00191A  D7AD               	goto	L5
  2929  00191C                     __end_of_RunBypas:
  2930                           	opt stack 0
  2931                           tblptru	equ	0xFF8
  2932                           tblptrh	equ	0xFF7
  2933                           tblptrl	equ	0xFF6
  2934                           tablat	equ	0xFF5
  2935                           intcon	equ	0xFF2
  2936                           intcon2	equ	0xFF1
  2937                           postinc0	equ	0xFEE
  2938                           wreg	equ	0xFE8
  2939                           postinc1	equ	0xFE6
  2940                           postdec1	equ	0xFE5
  2941                           fsr1h	equ	0xFE2
  2942                           fsr1l	equ	0xFE1
  2943                           postinc2	equ	0xFDE
  2944                           postdec2	equ	0xFDD
  2945                           fsr2h	equ	0xFDA
  2946                           fsr2l	equ	0xFD9
  2947                           status	equ	0xFD8
  2948                           
  2949 ;; *************** function _SetBypas *****************
  2950 ;; Defined at:
  2951 ;;		line 8 in file "Bypass.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  pin             2   22[COMRAM] int 
  2954 ;;  state           2   24[COMRAM] int 
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;		None
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  2   22[COMRAM] int 
  2959 ;; Registers used:
  2960 ;;		wreg, status,2, status,0
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2966 ;;      Params:         4       0       0       0       0       0       0
  2967 ;;      Locals:         0       0       0       0       0       0       0
  2968 ;;      Temps:          2       0       0       0       0       0       0
  2969 ;;      Totals:         6       0       0       0       0       0       0
  2970 ;;Total ram usage:        6 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:    3
  2973 ;; This function calls:
  2974 ;;		Nothing
  2975 ;; This function is called by:
  2976 ;;		_RunBypas
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text18
  2981  0015A6                     __ptext18:
  2982                           	opt stack 0
  2983  0015A6                     _SetBypas:
  2984                           	opt stack 26
  2985                           
  2986                           ;Bypass.c: 10: switch (pin) {
  2987                           
  2988                           ;incstack = 0
  2989  0015A6  D050               	goto	l2476
  2990  0015A8                     l2454:
  2991                           
  2992                           ;Bypass.c: 12: if (state)
  2993  0015A8  501A               	movf	SetBypas@state+1,w,c
  2994  0015AA  1019               	iorwf	SetBypas@state,w,c
  2995  0015AC  B4D8               	btfsc	status,2,c
  2996  0015AE  D002               	goto	l477
  2997                           
  2998                           ;Bypass.c: 13: {
  2999                           ;Bypass.c: 14: do { LATC5 = 1; } while(0);
  3000  0015B0  8A8B               	bsf	3979,5,c	;volatile
  3001  0015B2  0012               	return	
  3002  0015B4                     l477:
  3003  0015B4  9A8B               	bcf	3979,5,c	;volatile
  3004  0015B6  0012               	return	
  3005  0015B8                     l2456:
  3006                           
  3007                           ;Bypass.c: 22: if (state)
  3008  0015B8  501A               	movf	SetBypas@state+1,w,c
  3009  0015BA  1019               	iorwf	SetBypas@state,w,c
  3010  0015BC  B4D8               	btfsc	status,2,c
  3011  0015BE  D002               	goto	l485
  3012                           
  3013                           ;Bypass.c: 23: {
  3014                           ;Bypass.c: 24: do { LATC4 = 1; } while(0);
  3015  0015C0  888B               	bsf	3979,4,c	;volatile
  3016  0015C2  0012               	return	
  3017  0015C4                     l485:
  3018  0015C4  988B               	bcf	3979,4,c	;volatile
  3019  0015C6  0012               	return	
  3020  0015C8                     l2458:
  3021                           
  3022                           ;Bypass.c: 32: if (state)
  3023  0015C8  501A               	movf	SetBypas@state+1,w,c
  3024  0015CA  1019               	iorwf	SetBypas@state,w,c
  3025  0015CC  B4D8               	btfsc	status,2,c
  3026  0015CE  D002               	goto	l492
  3027                           
  3028                           ;Bypass.c: 33: {
  3029                           ;Bypass.c: 34: do { LATD3 = 1; } while(0);
  3030  0015D0  868C               	bsf	3980,3,c	;volatile
  3031  0015D2  0012               	return	
  3032  0015D4                     l492:
  3033  0015D4  968C               	bcf	3980,3,c	;volatile
  3034  0015D6  0012               	return	
  3035  0015D8                     l2460:
  3036                           
  3037                           ;Bypass.c: 42: if (state)
  3038  0015D8  501A               	movf	SetBypas@state+1,w,c
  3039  0015DA  1019               	iorwf	SetBypas@state,w,c
  3040  0015DC  B4D8               	btfsc	status,2,c
  3041  0015DE  D002               	goto	l499
  3042                           
  3043                           ;Bypass.c: 43: {
  3044                           ;Bypass.c: 44: do { LATD2 = 1; } while(0);
  3045  0015E0  848C               	bsf	3980,2,c	;volatile
  3046  0015E2  0012               	return	
  3047  0015E4                     l499:
  3048  0015E4  948C               	bcf	3980,2,c	;volatile
  3049  0015E6  0012               	return	
  3050  0015E8                     l2462:
  3051                           
  3052                           ;Bypass.c: 52: if (state)
  3053  0015E8  501A               	movf	SetBypas@state+1,w,c
  3054  0015EA  1019               	iorwf	SetBypas@state,w,c
  3055  0015EC  B4D8               	btfsc	status,2,c
  3056  0015EE  D002               	goto	l506
  3057                           
  3058                           ;Bypass.c: 53: {
  3059                           ;Bypass.c: 54: do { LATD1 = 1; } while(0);
  3060  0015F0  828C               	bsf	3980,1,c	;volatile
  3061  0015F2  0012               	return	
  3062  0015F4                     l506:
  3063  0015F4  928C               	bcf	3980,1,c	;volatile
  3064  0015F6  0012               	return	
  3065  0015F8                     l2464:
  3066                           
  3067                           ;Bypass.c: 62: if (state)
  3068  0015F8  501A               	movf	SetBypas@state+1,w,c
  3069  0015FA  1019               	iorwf	SetBypas@state,w,c
  3070  0015FC  B4D8               	btfsc	status,2,c
  3071  0015FE  D002               	goto	l513
  3072                           
  3073                           ;Bypass.c: 63: {
  3074                           ;Bypass.c: 64: do { LATD5 = 1; } while(0);
  3075  001600  8A8C               	bsf	3980,5,c	;volatile
  3076  001602  0012               	return	
  3077  001604                     l513:
  3078  001604  9A8C               	bcf	3980,5,c	;volatile
  3079  001606  0012               	return	
  3080  001608                     l2466:
  3081                           
  3082                           ;Bypass.c: 72: if (state)
  3083  001608  501A               	movf	SetBypas@state+1,w,c
  3084  00160A  1019               	iorwf	SetBypas@state,w,c
  3085  00160C  B4D8               	btfsc	status,2,c
  3086  00160E  D002               	goto	l520
  3087                           
  3088                           ;Bypass.c: 73: {
  3089                           ;Bypass.c: 74: do { LATB0 = 1; } while(0);
  3090  001610  808A               	bsf	3978,0,c	;volatile
  3091  001612  0012               	return	
  3092  001614                     l520:
  3093  001614  908A               	bcf	3978,0,c	;volatile
  3094  001616  0012               	return	
  3095  001618                     l2468:
  3096                           
  3097                           ;Bypass.c: 82: if (state)
  3098  001618  501A               	movf	SetBypas@state+1,w,c
  3099  00161A  1019               	iorwf	SetBypas@state,w,c
  3100  00161C  B4D8               	btfsc	status,2,c
  3101  00161E  D002               	goto	l527
  3102                           
  3103                           ;Bypass.c: 83: {
  3104                           ;Bypass.c: 84: do { LATB1 = 1; } while(0);
  3105  001620  828A               	bsf	3978,1,c	;volatile
  3106  001622  0012               	return	
  3107  001624                     l527:
  3108  001624  928A               	bcf	3978,1,c	;volatile
  3109  001626  0012               	return	
  3110  001628                     l2470:
  3111                           
  3112                           ;Bypass.c: 92: if (state)
  3113  001628  501A               	movf	SetBypas@state+1,w,c
  3114  00162A  1019               	iorwf	SetBypas@state,w,c
  3115  00162C  B4D8               	btfsc	status,2,c
  3116  00162E  D002               	goto	l534
  3117                           
  3118                           ;Bypass.c: 93: {
  3119                           ;Bypass.c: 94: do { LATB3 = 1; } while(0);
  3120  001630  868A               	bsf	3978,3,c	;volatile
  3121  001632  0012               	return	
  3122  001634                     l534:
  3123  001634  968A               	bcf	3978,3,c	;volatile
  3124  001636  0012               	return	
  3125  001638                     l2472:
  3126                           
  3127                           ;Bypass.c: 102: if (state)
  3128  001638  501A               	movf	SetBypas@state+1,w,c
  3129  00163A  1019               	iorwf	SetBypas@state,w,c
  3130  00163C  B4D8               	btfsc	status,2,c
  3131  00163E  D002               	goto	l541
  3132                           
  3133                           ;Bypass.c: 103: {
  3134                           ;Bypass.c: 104: do { LATA0 = 1; } while(0);
  3135  001640  8089               	bsf	3977,0,c	;volatile
  3136  001642  0012               	return	
  3137  001644                     l541:
  3138  001644  9089               	bcf	3977,0,c	;volatile
  3139  001646  0012               	return	
  3140  001648                     l2476:
  3141  001648  C017  F01B         	movff	SetBypas@pin,??_SetBypas
  3142  00164C  C018  F01C         	movff	SetBypas@pin+1,??_SetBypas+1
  3143                           
  3144                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3145                           ; Switch size 1, requested type "space"
  3146                           ; Number of cases is 1, Range of values is 0 to 0
  3147                           ; switch strategies available:
  3148                           ; Name         Instructions Cycles
  3149                           ; simple_byte            4     3 (average)
  3150                           ;	Chosen strategy is simple_byte
  3151  001650  501C               	movf	??_SetBypas+1,w,c
  3152  001652  0A00               	xorlw	0	; case 0
  3153  001654  A4D8               	btfss	status,2,c
  3154  001656  0012               	return	
  3155                           
  3156                           ; Switch size 1, requested type "space"
  3157                           ; Number of cases is 10, Range of values is 0 to 9
  3158                           ; switch strategies available:
  3159                           ; Name         Instructions Cycles
  3160                           ; simple_byte           31    16 (average)
  3161                           ;	Chosen strategy is simple_byte
  3162  001658  501B               	movf	??_SetBypas,w,c
  3163  00165A  0A00               	xorlw	0	; case 0
  3164  00165C  B4D8               	btfsc	status,2,c
  3165  00165E  D7A4               	goto	l2454
  3166  001660  0A01               	xorlw	1	; case 1
  3167  001662  B4D8               	btfsc	status,2,c
  3168  001664  D7A9               	goto	l2456
  3169  001666  0A03               	xorlw	3	; case 2
  3170  001668  B4D8               	btfsc	status,2,c
  3171  00166A  D7AE               	goto	l2458
  3172  00166C  0A01               	xorlw	1	; case 3
  3173  00166E  B4D8               	btfsc	status,2,c
  3174  001670  D7B3               	goto	l2460
  3175  001672  0A07               	xorlw	7	; case 4
  3176  001674  B4D8               	btfsc	status,2,c
  3177  001676  D7B8               	goto	l2462
  3178  001678  0A01               	xorlw	1	; case 5
  3179  00167A  B4D8               	btfsc	status,2,c
  3180  00167C  D7BD               	goto	l2464
  3181  00167E  0A03               	xorlw	3	; case 6
  3182  001680  B4D8               	btfsc	status,2,c
  3183  001682  D7C2               	goto	l2466
  3184  001684  0A01               	xorlw	1	; case 7
  3185  001686  B4D8               	btfsc	status,2,c
  3186  001688  D7C7               	goto	l2468
  3187  00168A  0A0F               	xorlw	15	; case 8
  3188  00168C  B4D8               	btfsc	status,2,c
  3189  00168E  D7CC               	goto	l2470
  3190  001690  0A01               	xorlw	1	; case 9
  3191  001692  A4D8               	btfss	status,2,c
  3192  001694  0012               	return	
  3193  001696  D7D0               	goto	l2472
  3194  001698                     __end_of_SetBypas:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           tblptrl	equ	0xFF6
  3199                           tablat	equ	0xFF5
  3200                           intcon	equ	0xFF2
  3201                           intcon2	equ	0xFF1
  3202                           postinc0	equ	0xFEE
  3203                           wreg	equ	0xFE8
  3204                           postinc1	equ	0xFE6
  3205                           postdec1	equ	0xFE5
  3206                           fsr1h	equ	0xFE2
  3207                           fsr1l	equ	0xFE1
  3208                           postinc2	equ	0xFDE
  3209                           postdec2	equ	0xFDD
  3210                           fsr2h	equ	0xFDA
  3211                           fsr2l	equ	0xFD9
  3212                           status	equ	0xFD8
  3213                           
  3214 ;; *************** function _Battery_Get *****************
  3215 ;; Defined at:
  3216 ;;		line 57 in file "Battery.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;  channelnum      2   36[COMRAM] int 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;		None
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  3   36[COMRAM] float 
  3223 ;; Registers used:
  3224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3230 ;;      Params:         3       0       0       0       0       0       0
  3231 ;;      Locals:         0       0       0       0       0       0       0
  3232 ;;      Temps:          0       0       0       0       0       0       0
  3233 ;;      Totals:         3       0       0       0       0       0       0
  3234 ;;Total ram usage:        3 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    4
  3237 ;; This function calls:
  3238 ;;		___wmul
  3239 ;; This function is called by:
  3240 ;;		_RunBypas
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text19
  3245  001DE2                     __ptext19:
  3246                           	opt stack 0
  3247  001DE2                     _Battery_Get:
  3248                           	opt stack 25
  3249                           
  3250                           ;Battery.c: 59: return Battery_Volt[channelnum];
  3251                           
  3252                           ;incstack = 0
  3253  001DE2  C025  F01F         	movff	Battery_Get@channelnum,___wmul@multiplier
  3254  001DE6  C026  F020         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  3255  001DEA  0E00               	movlw	0
  3256  001DEC  6E22               	movwf	___wmul@multiplicand+1,c
  3257  001DEE  0E03               	movlw	3
  3258  001DF0  6E21               	movwf	___wmul@multiplicand,c
  3259  001DF2  EC68  F00F         	call	___wmul	;wreg free
  3260  001DF6  0100               	movlb	0	; () banked
  3261  001DF8  0E60               	movlw	low _Battery_Volt
  3262  001DFA  241F               	addwf	?___wmul,w,c
  3263  001DFC  6ED9               	movwf	fsr2l,c
  3264  001DFE  0100               	movlb	0	; () banked
  3265  001E00  0E00               	movlw	high _Battery_Volt
  3266  001E02  2020               	addwfc	?___wmul+1,w,c
  3267  001E04  6EDA               	movwf	fsr2h,c
  3268  001E06  CFDE F025          	movff	postinc2,?_Battery_Get
  3269  001E0A  CFDE F026          	movff	postinc2,?_Battery_Get+1
  3270  001E0E  CFDD F027          	movff	postdec2,?_Battery_Get+2
  3271  001E12  0012               	return	
  3272  001E14                     __end_of_Battery_Get:
  3273                           	opt stack 0
  3274                           tblptru	equ	0xFF8
  3275                           tblptrh	equ	0xFF7
  3276                           tblptrl	equ	0xFF6
  3277                           tablat	equ	0xFF5
  3278                           intcon	equ	0xFF2
  3279                           intcon2	equ	0xFF1
  3280                           postinc0	equ	0xFEE
  3281                           wreg	equ	0xFE8
  3282                           postinc1	equ	0xFE6
  3283                           postdec1	equ	0xFE5
  3284                           fsr1h	equ	0xFE2
  3285                           fsr1l	equ	0xFE1
  3286                           postinc2	equ	0xFDE
  3287                           postdec2	equ	0xFDD
  3288                           fsr2h	equ	0xFDA
  3289                           fsr2l	equ	0xFD9
  3290                           status	equ	0xFD8
  3291                           
  3292 ;; *************** function _Battery_Fault *****************
  3293 ;; Defined at:
  3294 ;;		line 11 in file "Battery.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;		None
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;  i               2   46[COMRAM] int 
  3299 ;;  fault           1   45[COMRAM] unsigned char 
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  1    wreg      unsigned char 
  3302 ;; Registers used:
  3303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3309 ;;      Params:         0       0       0       0       0       0       0
  3310 ;;      Locals:         3       0       0       0       0       0       0
  3311 ;;      Temps:          0       0       0       0       0       0       0
  3312 ;;      Totals:         3       0       0       0       0       0       0
  3313 ;;Total ram usage:        3 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:    4
  3316 ;; This function calls:
  3317 ;;		___ftge
  3318 ;;		___wmul
  3319 ;; This function is called by:
  3320 ;;		_main
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           	psect	text20
  3325  00191C                     __ptext20:
  3326                           	opt stack 0
  3327  00191C                     _Battery_Fault:
  3328                           	opt stack 26
  3329                           
  3330                           ;Battery.c: 13: char fault = 0;
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;incstack = 0
  3334  00191C  0E00               	movlw	0
  3335  00191E  6E2E               	movwf	Battery_Fault@fault,c
  3336                           
  3337                           ;Battery.c: 14: for(int i = 0;i<9;i++)
  3338  001920  0E00               	movlw	0
  3339  001922  6E30               	movwf	Battery_Fault@i+1,c
  3340  001924  0E00               	movlw	0
  3341  001926  6E2F               	movwf	Battery_Fault@i,c
  3342  001928  5030               	movf	Battery_Fault@i+1,w,c
  3343  00192A  0A80               	xorlw	128
  3344  00192C  0F80               	addlw	-128
  3345  00192E  0E09               	movlw	9
  3346  001930  B4D8               	btfsc	status,2,c
  3347  001932  5C2F               	subwf	Battery_Fault@i,w,c
  3348  001934  B0D8               	btfsc	status,0,c
  3349  001936  0012               	return	
  3350                           
  3351                           ;Battery.c: 15: {
  3352                           ;Battery.c: 16: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  3353  001938  0E00               	movlw	0
  3354  00193A  6E25               	movwf	___ftge@ff1,c
  3355  00193C  0E40               	movlw	64
  3356  00193E  6E26               	movwf	___ftge@ff1+1,c
  3357  001940  0E40               	movlw	64
  3358  001942  6E27               	movwf	___ftge@ff1+2,c
  3359  001944  C02F  F01F         	movff	Battery_Fault@i,___wmul@multiplier
  3360  001948  C030  F020         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  3361  00194C  0E00               	movlw	0
  3362  00194E  6E22               	movwf	___wmul@multiplicand+1,c
  3363  001950  0E03               	movlw	3
  3364  001952  6E21               	movwf	___wmul@multiplicand,c
  3365  001954  EC68  F00F         	call	___wmul	;wreg free
  3366  001958  0100               	movlb	0	; () banked
  3367  00195A  0E60               	movlw	low _Battery_Volt
  3368  00195C  241F               	addwf	?___wmul,w,c
  3369  00195E  6ED9               	movwf	fsr2l,c
  3370  001960  0100               	movlb	0	; () banked
  3371  001962  0E00               	movlw	high _Battery_Volt
  3372  001964  2020               	addwfc	?___wmul+1,w,c
  3373  001966  6EDA               	movwf	fsr2h,c
  3374  001968  CFDE F028          	movff	postinc2,___ftge@ff2
  3375  00196C  CFDE F029          	movff	postinc2,___ftge@ff2+1
  3376  001970  CFDD F02A          	movff	postdec2,___ftge@ff2+2
  3377  001974  ECD4  F00D         	call	___ftge	;wreg free
  3378  001978  B0D8               	btfsc	status,0,c
  3379  00197A  D024               	goto	l3346
  3380  00197C  C02F  F01F         	movff	Battery_Fault@i,___wmul@multiplier
  3381  001980  C030  F020         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  3382  001984  0E00               	movlw	0
  3383  001986  6E22               	movwf	___wmul@multiplicand+1,c
  3384  001988  0E03               	movlw	3
  3385  00198A  6E21               	movwf	___wmul@multiplicand,c
  3386  00198C  EC68  F00F         	call	___wmul	;wreg free
  3387  001990  0100               	movlb	0	; () banked
  3388  001992  0E60               	movlw	low _Battery_Volt
  3389  001994  241F               	addwf	?___wmul,w,c
  3390  001996  6ED9               	movwf	fsr2l,c
  3391  001998  0100               	movlb	0	; () banked
  3392  00199A  0E00               	movlw	high _Battery_Volt
  3393  00199C  2020               	addwfc	?___wmul+1,w,c
  3394  00199E  6EDA               	movwf	fsr2h,c
  3395  0019A0  CFDE F025          	movff	postinc2,___ftge@ff1
  3396  0019A4  CFDE F026          	movff	postinc2,___ftge@ff1+1
  3397  0019A8  CFDD F027          	movff	postdec2,___ftge@ff1+2
  3398  0019AC  0EB8               	movlw	184
  3399  0019AE  6E28               	movwf	___ftge@ff2,c
  3400  0019B0  0E86               	movlw	134
  3401  0019B2  6E29               	movwf	___ftge@ff2+1,c
  3402  0019B4  0E40               	movlw	64
  3403  0019B6  6E2A               	movwf	___ftge@ff2+2,c
  3404  0019B8  ECD4  F00D         	call	___ftge	;wreg free
  3405  0019BC  B0D8               	btfsc	status,0,c
  3406  0019BE  D002               	goto	l3346
  3407                           
  3408                           ;Battery.c: 17: {
  3409                           ;Battery.c: 18: fault = 1;
  3410  0019C0  0E01               	movlw	1
  3411  0019C2  6E2E               	movwf	Battery_Fault@fault,c
  3412  0019C4                     l3346:
  3413  0019C4  4A2F               	infsnz	Battery_Fault@i,f,c
  3414  0019C6  2A30               	incf	Battery_Fault@i+1,f,c
  3415  0019C8  D7AF               	goto	L6
  3416  0019CA                     __end_of_Battery_Fault:
  3417                           	opt stack 0
  3418                           tblptru	equ	0xFF8
  3419                           tblptrh	equ	0xFF7
  3420                           tblptrl	equ	0xFF6
  3421                           tablat	equ	0xFF5
  3422                           intcon	equ	0xFF2
  3423                           intcon2	equ	0xFF1
  3424                           postinc0	equ	0xFEE
  3425                           wreg	equ	0xFE8
  3426                           postinc1	equ	0xFE6
  3427                           postdec1	equ	0xFE5
  3428                           fsr1h	equ	0xFE2
  3429                           fsr1l	equ	0xFE1
  3430                           postinc2	equ	0xFDE
  3431                           postdec2	equ	0xFDD
  3432                           fsr2h	equ	0xFDA
  3433                           fsr2l	equ	0xFD9
  3434                           status	equ	0xFD8
  3435                           
  3436 ;; *************** function ___ftge *****************
  3437 ;; Defined at:
  3438 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;  ff1             3   36[COMRAM] float 
  3441 ;;  ff2             3   39[COMRAM] float 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;		None
  3444 ;; Return value:  Size  Location     Type
  3445 ;;		None               void
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3453 ;;      Params:         6       0       0       0       0       0       0
  3454 ;;      Locals:         0       0       0       0       0       0       0
  3455 ;;      Temps:          3       0       0       0       0       0       0
  3456 ;;      Totals:         9       0       0       0       0       0       0
  3457 ;;Total ram usage:        9 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    3
  3460 ;; This function calls:
  3461 ;;		Nothing
  3462 ;; This function is called by:
  3463 ;;		_Battery_Fault
  3464 ;;		_Temp_Fault
  3465 ;;		_RunBypas
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text21
  3470  001BA8                     __ptext21:
  3471                           	opt stack 0
  3472  001BA8                     ___ftge:
  3473                           	opt stack 26
  3474                           
  3475                           ;incstack = 0
  3476  001BA8  AE27               	btfss	___ftge@ff1+2,7,c
  3477  001BAA  D016               	goto	l2582
  3478  001BAC  C025  F02B         	movff	___ftge@ff1,??___ftge
  3479  001BB0  C026  F02C         	movff	___ftge@ff1+1,??___ftge+1
  3480  001BB4  C027  F02D         	movff	___ftge@ff1+2,??___ftge+2
  3481  001BB8  1E2B               	comf	??___ftge,f,c
  3482  001BBA  1E2C               	comf	??___ftge+1,f,c
  3483  001BBC  1E2D               	comf	??___ftge+2,f,c
  3484  001BBE  2A2B               	incf	??___ftge,f,c
  3485  001BC0  0E00               	movlw	0
  3486  001BC2  222C               	addwfc	??___ftge+1,f,c
  3487  001BC4  222D               	addwfc	??___ftge+2,f,c
  3488  001BC6  0E00               	movlw	0
  3489  001BC8  242B               	addwf	??___ftge,w,c
  3490  001BCA  6E25               	movwf	___ftge@ff1,c
  3491  001BCC  0E00               	movlw	0
  3492  001BCE  202C               	addwfc	??___ftge+1,w,c
  3493  001BD0  6E26               	movwf	___ftge@ff1+1,c
  3494  001BD2  0E80               	movlw	128
  3495  001BD4  202D               	addwfc	??___ftge+2,w,c
  3496  001BD6  6E27               	movwf	___ftge@ff1+2,c
  3497  001BD8                     l2582:
  3498  001BD8  AE2A               	btfss	___ftge@ff2+2,7,c
  3499  001BDA  D016               	goto	l2586
  3500  001BDC  C028  F02B         	movff	___ftge@ff2,??___ftge
  3501  001BE0  C029  F02C         	movff	___ftge@ff2+1,??___ftge+1
  3502  001BE4  C02A  F02D         	movff	___ftge@ff2+2,??___ftge+2
  3503  001BE8  1E2B               	comf	??___ftge,f,c
  3504  001BEA  1E2C               	comf	??___ftge+1,f,c
  3505  001BEC  1E2D               	comf	??___ftge+2,f,c
  3506  001BEE  2A2B               	incf	??___ftge,f,c
  3507  001BF0  0E00               	movlw	0
  3508  001BF2  222C               	addwfc	??___ftge+1,f,c
  3509  001BF4  222D               	addwfc	??___ftge+2,f,c
  3510  001BF6  0E00               	movlw	0
  3511  001BF8  242B               	addwf	??___ftge,w,c
  3512  001BFA  6E28               	movwf	___ftge@ff2,c
  3513  001BFC  0E00               	movlw	0
  3514  001BFE  202C               	addwfc	??___ftge+1,w,c
  3515  001C00  6E29               	movwf	___ftge@ff2+1,c
  3516  001C02  0E80               	movlw	128
  3517  001C04  202D               	addwfc	??___ftge+2,w,c
  3518  001C06  6E2A               	movwf	___ftge@ff2+2,c
  3519  001C08                     l2586:
  3520  001C08  0E00               	movlw	0
  3521  001C0A  1A25               	xorwf	___ftge@ff1,f,c
  3522  001C0C  0E00               	movlw	0
  3523  001C0E  1A26               	xorwf	___ftge@ff1+1,f,c
  3524  001C10  0E80               	movlw	128
  3525  001C12  1A27               	xorwf	___ftge@ff1+2,f,c
  3526  001C14  0E00               	movlw	0
  3527  001C16  1A28               	xorwf	___ftge@ff2,f,c
  3528  001C18  0E00               	movlw	0
  3529  001C1A  1A29               	xorwf	___ftge@ff2+1,f,c
  3530  001C1C  0E80               	movlw	128
  3531  001C1E  1A2A               	xorwf	___ftge@ff2+2,f,c
  3532  001C20  5028               	movf	___ftge@ff2,w,c
  3533  001C22  5C25               	subwf	___ftge@ff1,w,c
  3534  001C24  5029               	movf	___ftge@ff2+1,w,c
  3535  001C26  5826               	subwfb	___ftge@ff1+1,w,c
  3536  001C28  502A               	movf	___ftge@ff2+2,w,c
  3537  001C2A  5827               	subwfb	___ftge@ff1+2,w,c
  3538  001C2C  B0D8               	btfsc	status,0,c
  3539  001C2E  D002               	goto	l2592
  3540  001C30  90D8               	bcf	status,0,c
  3541  001C32  0012               	return	
  3542  001C34                     l2592:
  3543  001C34  80D8               	bsf	status,0,c
  3544  001C36  0012               	return	
  3545  001C38                     __end_of___ftge:
  3546                           	opt stack 0
  3547                           tblptru	equ	0xFF8
  3548                           tblptrh	equ	0xFF7
  3549                           tblptrl	equ	0xFF6
  3550                           tablat	equ	0xFF5
  3551                           intcon	equ	0xFF2
  3552                           intcon2	equ	0xFF1
  3553                           postinc0	equ	0xFEE
  3554                           wreg	equ	0xFE8
  3555                           postinc1	equ	0xFE6
  3556                           postdec1	equ	0xFE5
  3557                           fsr1h	equ	0xFE2
  3558                           fsr1l	equ	0xFE1
  3559                           postinc2	equ	0xFDE
  3560                           postdec2	equ	0xFDD
  3561                           fsr2h	equ	0xFDA
  3562                           fsr2l	equ	0xFD9
  3563                           status	equ	0xFD8
  3564                           
  3565 ;; *************** function _Battery_Convert *****************
  3566 ;; Defined at:
  3567 ;;		line 47 in file "Battery.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;		None
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;  x               2   19[BANK0 ] int 
  3572 ;; Return value:  Size  Location     Type
  3573 ;;		None               void
  3574 ;; Registers used:
  3575 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3576 ;; Tracked objects:
  3577 ;;		On entry : 0/0
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3581 ;;      Params:         0       0       0       0       0       0       0
  3582 ;;      Locals:         0       2       0       0       0       0       0
  3583 ;;      Temps:          0       2       0       0       0       0       0
  3584 ;;      Totals:         0       4       0       0       0       0       0
  3585 ;;Total ram usage:        4 bytes
  3586 ;; Hardware stack levels used:    1
  3587 ;; Hardware stack levels required when called:    6
  3588 ;; This function calls:
  3589 ;;		_Battery_Filter
  3590 ;;		___awdiv
  3591 ;;		___awtoft
  3592 ;;		___ftadd
  3593 ;;		___wmul
  3594 ;; This function is called by:
  3595 ;;		_main
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text22
  3600  00177A                     __ptext22:
  3601                           	opt stack 0
  3602  00177A                     _Battery_Convert:
  3603                           	opt stack 24
  3604                           
  3605                           ;Battery.c: 49: int x;
  3606                           ;Battery.c: 50: for(x = 0; x < 10; x++)
  3607                           
  3608                           ;incstack = 0
  3609  00177A  0E00               	movlw	0
  3610  00177C  0100               	movlb	0	; () banked
  3611  00177E  6FDE               	movwf	(Battery_Convert@x+1)& (0+255),b
  3612  001780  0E00               	movlw	0
  3613  001782  0100               	movlb	0	; () banked
  3614  001784  6FDD               	movwf	Battery_Convert@x& (0+255),b
  3615  001786                     
  3616                           ; BSR set to: 0
  3617  001786  0100               	movlb	0	; () banked
  3618  001788  51DE               	movf	(Battery_Convert@x+1)& (0+255),w,b
  3619  00178A  0A80               	xorlw	128
  3620  00178C  0F80               	addlw	-128
  3621  00178E  0E0A               	movlw	10
  3622  001790  B4D8               	btfsc	status,2,c
  3623  001792  5DDD               	subwf	Battery_Convert@x& (0+255),w,b
  3624  001794  B0D8               	btfsc	status,0,c
  3625  001796  D05A               	goto	l3362
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;Battery.c: 51: {
  3629                           ;Battery.c: 52: TempBattery_Volt[x] = ((Battery_Adc[x]/1024)*5) + 2.5;
  3630                           
  3631                           ; BSR set to: 0
  3632                           
  3633                           ; BSR set to: 0
  3634  001798  C0DD  F01F         	movff	Battery_Convert@x,___wmul@multiplier
  3635  00179C  C0DE  F020         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  3636  0017A0  0E00               	movlw	0
  3637  0017A2  6E22               	movwf	___wmul@multiplicand+1,c
  3638  0017A4  0E03               	movlw	3
  3639  0017A6  6E21               	movwf	___wmul@multiplicand,c
  3640  0017A8  EC68  F00F         	call	___wmul	;wreg free
  3641  0017AC  0101               	movlb	1	; () banked
  3642  0017AE  0E6E               	movlw	low _TempBattery_Volt
  3643  0017B0  241F               	addwf	?___wmul,w,c
  3644  0017B2  6ED9               	movwf	fsr2l,c
  3645  0017B4  0101               	movlb	1	; () banked
  3646  0017B6  0E01               	movlw	high _TempBattery_Volt
  3647  0017B8  2020               	addwfc	?___wmul+1,w,c
  3648  0017BA  6EDA               	movwf	fsr2h,c
  3649  0017BC  0E04               	movlw	4
  3650  0017BE  6E1A               	movwf	___awdiv@divisor+1,c
  3651  0017C0  0E00               	movlw	0
  3652  0017C2  6E19               	movwf	___awdiv@divisor,c
  3653  0017C4  0E9C               	movlw	low _Battery_Adc
  3654  0017C6  0100               	movlb	0	; () banked
  3655  0017C8  6FDB               	movwf	??_Battery_Convert& (0+255),b
  3656  0017CA  0E00               	movlw	high _Battery_Adc
  3657  0017CC  6FDC               	movwf	(??_Battery_Convert+1)& (0+255),b
  3658  0017CE  90D8               	bcf	status,0,c
  3659  0017D0  0100               	movlb	0	; () banked
  3660  0017D2  35DD               	rlcf	Battery_Convert@x& (0+255),w,b
  3661  0017D4  6EE1               	movwf	fsr1l,c
  3662  0017D6  0100               	movlb	0	; () banked
  3663  0017D8  35DE               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  3664  0017DA  6EE2               	movwf	fsr1h,c
  3665  0017DC  0100               	movlb	0	; () banked
  3666  0017DE  51DB               	movf	??_Battery_Convert& (0+255),w,b
  3667  0017E0  26E1               	addwf	fsr1l,f,c
  3668  0017E2  0100               	movlb	0	; () banked
  3669  0017E4  51DC               	movf	(??_Battery_Convert+1)& (0+255),w,b
  3670  0017E6  22E2               	addwfc	fsr1h,f,c
  3671  0017E8  CFE6 F017          	movff	postinc1,___awdiv@dividend
  3672  0017EC  CFE5 F018          	movff	postdec1,___awdiv@dividend+1
  3673  0017F0  EC39  F00D         	call	___awdiv	;wreg free
  3674  0017F4  C017  F01F         	movff	?___awdiv,___wmul@multiplier
  3675  0017F8  C018  F020         	movff	?___awdiv+1,___wmul@multiplier+1
  3676  0017FC  0E00               	movlw	0
  3677  0017FE  6E22               	movwf	___wmul@multiplicand+1,c
  3678  001800  0E05               	movlw	5
  3679  001802  6E21               	movwf	___wmul@multiplicand,c
  3680  001804  EC68  F00F         	call	___wmul	;wreg free
  3681  001808  C01F  F025         	movff	?___wmul,___awtoft@c
  3682  00180C  C020  F026         	movff	?___wmul+1,___awtoft@c+1
  3683  001810  EC78  F00E         	call	___awtoft	;wreg free
  3684  001814  C025  F0D0         	movff	?___awtoft,___ftadd@f1
  3685  001818  C026  F0D1         	movff	?___awtoft+1,___ftadd@f1+1
  3686  00181C  C027  F0D2         	movff	?___awtoft+2,___ftadd@f1+2
  3687  001820  0E00               	movlw	0
  3688  001822  0100               	movlb	0	; () banked
  3689  001824  6FD3               	movwf	___ftadd@f2& (0+255),b
  3690  001826  0E20               	movlw	32
  3691  001828  0100               	movlb	0	; () banked
  3692  00182A  6FD4               	movwf	(___ftadd@f2+1)& (0+255),b
  3693  00182C  0E40               	movlw	64
  3694  00182E  0100               	movlb	0	; () banked
  3695  001830  6FD5               	movwf	(___ftadd@f2+2)& (0+255),b
  3696  001832  EC73  F005         	call	___ftadd	;wreg free
  3697  001836  C0D0  FFDE         	movff	?___ftadd,postinc2
  3698  00183A  C0D1  FFDE         	movff	?___ftadd+1,postinc2
  3699  00183E  C0D2  FFDD         	movff	?___ftadd+2,postdec2
  3700  001842  52DD               	movf	postdec2,f,c
  3701  001844  0100               	movlb	0	; () banked
  3702  001846  4BDD               	infsnz	Battery_Convert@x& (0+255),f,b
  3703  001848  2BDE               	incf	(Battery_Convert@x+1)& (0+255),f,b
  3704  00184A  D79D               	goto	L7
  3705  00184C                     l3362:
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;Battery.c: 53: }
  3709                           ;Battery.c: 54: Battery_Filter();
  3710  00184C  EC60  F008         	call	_Battery_Filter	;wreg free
  3711  001850  0012               	return	
  3712  001852                     __end_of_Battery_Convert:
  3713                           	opt stack 0
  3714                           tblptru	equ	0xFF8
  3715                           tblptrh	equ	0xFF7
  3716                           tblptrl	equ	0xFF6
  3717                           tablat	equ	0xFF5
  3718                           intcon	equ	0xFF2
  3719                           intcon2	equ	0xFF1
  3720                           postinc0	equ	0xFEE
  3721                           wreg	equ	0xFE8
  3722                           postinc1	equ	0xFE6
  3723                           postdec1	equ	0xFE5
  3724                           fsr1h	equ	0xFE2
  3725                           fsr1l	equ	0xFE1
  3726                           postinc2	equ	0xFDE
  3727                           postdec2	equ	0xFDD
  3728                           fsr2h	equ	0xFDA
  3729                           fsr2l	equ	0xFD9
  3730                           status	equ	0xFD8
  3731                           
  3732 ;; *************** function ___awtoft *****************
  3733 ;; Defined at:
  3734 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;  c               2   36[COMRAM] int 
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;  sign            1   39[COMRAM] unsigned char 
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  3   36[COMRAM] float 
  3741 ;; Registers used:
  3742 ;;		wreg, status,2, status,0, prodl, cstack
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3748 ;;      Params:         3       0       0       0       0       0       0
  3749 ;;      Locals:         1       0       0       0       0       0       0
  3750 ;;      Temps:          0       0       0       0       0       0       0
  3751 ;;      Totals:         4       0       0       0       0       0       0
  3752 ;;Total ram usage:        4 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; Hardware stack levels required when called:    4
  3755 ;; This function calls:
  3756 ;;		___ftpack
  3757 ;; This function is called by:
  3758 ;;		_Battery_Convert
  3759 ;;		_Temp_Convert
  3760 ;;		_log
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           	psect	text23
  3765  001CF0                     __ptext23:
  3766                           	opt stack 0
  3767  001CF0                     ___awtoft:
  3768                           	opt stack 24
  3769                           
  3770                           ;incstack = 0
  3771  001CF0  0E00               	movlw	0
  3772  001CF2  6E28               	movwf	___awtoft@sign,c
  3773  001CF4  5026               	movf	___awtoft@c+1,w,c
  3774  001CF6  0A80               	xorlw	128
  3775  001CF8  6EF3               	movwf	prodl,c
  3776  001CFA  0E80               	movlw	128
  3777  001CFC  5CF3               	subwf	prodl,w,c
  3778  001CFE  0E00               	movlw	0
  3779  001D00  B4D8               	btfsc	status,2,c
  3780  001D02  5C25               	subwf	___awtoft@c,w,c
  3781  001D04  B0D8               	btfsc	status,0,c
  3782  001D06  D006               	goto	l3154
  3783  001D08  6C25               	negf	___awtoft@c,c
  3784  001D0A  1E26               	comf	___awtoft@c+1,f,c
  3785  001D0C  B0D8               	btfsc	status,0,c
  3786  001D0E  2A26               	incf	___awtoft@c+1,f,c
  3787  001D10  0E01               	movlw	1
  3788  001D12  6E28               	movwf	___awtoft@sign,c
  3789  001D14                     l3154:
  3790  001D14  C025  F017         	movff	___awtoft@c,___ftpack@arg
  3791  001D18  C026  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  3792  001D1C  6A19               	clrf	___ftpack@arg+2,c
  3793  001D1E  0E8E               	movlw	142
  3794  001D20  6E1A               	movwf	___ftpack@exp,c
  3795  001D22  C028  F01B         	movff	___awtoft@sign,___ftpack@sign
  3796  001D26  ECE5  F00C         	call	___ftpack	;wreg free
  3797  001D2A  C017  F025         	movff	?___ftpack,?___awtoft
  3798  001D2E  C018  F026         	movff	?___ftpack+1,?___awtoft+1
  3799  001D32  C019  F027         	movff	?___ftpack+2,?___awtoft+2
  3800  001D36  0012               	return	
  3801  001D38                     __end_of___awtoft:
  3802                           	opt stack 0
  3803                           tblptru	equ	0xFF8
  3804                           tblptrh	equ	0xFF7
  3805                           tblptrl	equ	0xFF6
  3806                           tablat	equ	0xFF5
  3807                           prodl	equ	0xFF3
  3808                           intcon	equ	0xFF2
  3809                           intcon2	equ	0xFF1
  3810                           postinc0	equ	0xFEE
  3811                           wreg	equ	0xFE8
  3812                           postinc1	equ	0xFE6
  3813                           postdec1	equ	0xFE5
  3814                           fsr1h	equ	0xFE2
  3815                           fsr1l	equ	0xFE1
  3816                           postinc2	equ	0xFDE
  3817                           postdec2	equ	0xFDD
  3818                           fsr2h	equ	0xFDA
  3819                           fsr2l	equ	0xFD9
  3820                           status	equ	0xFD8
  3821                           
  3822 ;; *************** function ___awdiv *****************
  3823 ;; Defined at:
  3824 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;  dividend        2   22[COMRAM] int 
  3827 ;;  divisor         2   24[COMRAM] int 
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;  quotient        2   28[COMRAM] int 
  3830 ;;  sign            1   27[COMRAM] unsigned char 
  3831 ;;  counter         1   26[COMRAM] unsigned char 
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  2   22[COMRAM] int 
  3834 ;; Registers used:
  3835 ;;		wreg, status,2, status,0, prodl
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3841 ;;      Params:         4       0       0       0       0       0       0
  3842 ;;      Locals:         4       0       0       0       0       0       0
  3843 ;;      Temps:          0       0       0       0       0       0       0
  3844 ;;      Totals:         8       0       0       0       0       0       0
  3845 ;;Total ram usage:        8 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; Hardware stack levels required when called:    3
  3848 ;; This function calls:
  3849 ;;		Nothing
  3850 ;; This function is called by:
  3851 ;;		_Battery_Convert
  3852 ;;		_Temp_Convert
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           	psect	text24
  3857  001A72                     __ptext24:
  3858                           	opt stack 0
  3859  001A72                     ___awdiv:
  3860                           	opt stack 26
  3861                           
  3862                           ;incstack = 0
  3863  001A72  0E00               	movlw	0
  3864  001A74  6E1C               	movwf	___awdiv@sign,c
  3865  001A76  501A               	movf	___awdiv@divisor+1,w,c
  3866  001A78  0A80               	xorlw	128
  3867  001A7A  6EF3               	movwf	prodl,c
  3868  001A7C  0E80               	movlw	128
  3869  001A7E  5CF3               	subwf	prodl,w,c
  3870  001A80  0E00               	movlw	0
  3871  001A82  B4D8               	btfsc	status,2,c
  3872  001A84  5C19               	subwf	___awdiv@divisor,w,c
  3873  001A86  B0D8               	btfsc	status,0,c
  3874  001A88  D006               	goto	l3298
  3875  001A8A  6C19               	negf	___awdiv@divisor,c
  3876  001A8C  1E1A               	comf	___awdiv@divisor+1,f,c
  3877  001A8E  B0D8               	btfsc	status,0,c
  3878  001A90  2A1A               	incf	___awdiv@divisor+1,f,c
  3879  001A92  0E01               	movlw	1
  3880  001A94  6E1C               	movwf	___awdiv@sign,c
  3881  001A96                     l3298:
  3882  001A96  5018               	movf	___awdiv@dividend+1,w,c
  3883  001A98  0A80               	xorlw	128
  3884  001A9A  6EF3               	movwf	prodl,c
  3885  001A9C  0E80               	movlw	128
  3886  001A9E  5CF3               	subwf	prodl,w,c
  3887  001AA0  0E00               	movlw	0
  3888  001AA2  B4D8               	btfsc	status,2,c
  3889  001AA4  5C17               	subwf	___awdiv@dividend,w,c
  3890  001AA6  B0D8               	btfsc	status,0,c
  3891  001AA8  D006               	goto	l3304
  3892  001AAA  6C17               	negf	___awdiv@dividend,c
  3893  001AAC  1E18               	comf	___awdiv@dividend+1,f,c
  3894  001AAE  B0D8               	btfsc	status,0,c
  3895  001AB0  2A18               	incf	___awdiv@dividend+1,f,c
  3896  001AB2  0E01               	movlw	1
  3897  001AB4  1A1C               	xorwf	___awdiv@sign,f,c
  3898  001AB6                     l3304:
  3899  001AB6  0E00               	movlw	0
  3900  001AB8  6E1E               	movwf	___awdiv@quotient+1,c
  3901  001ABA  0E00               	movlw	0
  3902  001ABC  6E1D               	movwf	___awdiv@quotient,c
  3903  001ABE  501A               	movf	___awdiv@divisor+1,w,c
  3904  001AC0  1019               	iorwf	___awdiv@divisor,w,c
  3905  001AC2  B4D8               	btfsc	status,2,c
  3906  001AC4  D01C               	goto	l3326
  3907  001AC6  0E01               	movlw	1
  3908  001AC8  6E1B               	movwf	___awdiv@counter,c
  3909  001ACA  D004               	goto	l3312
  3910  001ACC                     l3310:
  3911  001ACC  90D8               	bcf	status,0,c
  3912  001ACE  3619               	rlcf	___awdiv@divisor,f,c
  3913  001AD0  361A               	rlcf	___awdiv@divisor+1,f,c
  3914  001AD2  2A1B               	incf	___awdiv@counter,f,c
  3915  001AD4                     l3312:
  3916  001AD4  AE1A               	btfss	___awdiv@divisor+1,7,c
  3917  001AD6  D7FA               	goto	l3310
  3918  001AD8                     l3314:
  3919  001AD8  90D8               	bcf	status,0,c
  3920  001ADA  361D               	rlcf	___awdiv@quotient,f,c
  3921  001ADC  361E               	rlcf	___awdiv@quotient+1,f,c
  3922  001ADE  5019               	movf	___awdiv@divisor,w,c
  3923  001AE0  5C17               	subwf	___awdiv@dividend,w,c
  3924  001AE2  501A               	movf	___awdiv@divisor+1,w,c
  3925  001AE4  5818               	subwfb	___awdiv@dividend+1,w,c
  3926  001AE6  A0D8               	btfss	status,0,c
  3927  001AE8  D005               	goto	l3322
  3928  001AEA  5019               	movf	___awdiv@divisor,w,c
  3929  001AEC  5E17               	subwf	___awdiv@dividend,f,c
  3930  001AEE  501A               	movf	___awdiv@divisor+1,w,c
  3931  001AF0  5A18               	subwfb	___awdiv@dividend+1,f,c
  3932  001AF2  801D               	bsf	___awdiv@quotient,0,c
  3933  001AF4                     l3322:
  3934  001AF4  90D8               	bcf	status,0,c
  3935  001AF6  321A               	rrcf	___awdiv@divisor+1,f,c
  3936  001AF8  3219               	rrcf	___awdiv@divisor,f,c
  3937  001AFA  2E1B               	decfsz	___awdiv@counter,f,c
  3938  001AFC  D7ED               	goto	l3314
  3939  001AFE                     l3326:
  3940  001AFE  501C               	movf	___awdiv@sign,w,c
  3941  001B00  B4D8               	btfsc	status,2,c
  3942  001B02  D004               	goto	l3330
  3943  001B04  6C1D               	negf	___awdiv@quotient,c
  3944  001B06  1E1E               	comf	___awdiv@quotient+1,f,c
  3945  001B08  B0D8               	btfsc	status,0,c
  3946  001B0A  2A1E               	incf	___awdiv@quotient+1,f,c
  3947  001B0C                     l3330:
  3948  001B0C  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  3949  001B10  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  3950  001B14  0012               	return	
  3951  001B16                     __end_of___awdiv:
  3952                           	opt stack 0
  3953                           tblptru	equ	0xFF8
  3954                           tblptrh	equ	0xFF7
  3955                           tblptrl	equ	0xFF6
  3956                           tablat	equ	0xFF5
  3957                           prodl	equ	0xFF3
  3958                           intcon	equ	0xFF2
  3959                           intcon2	equ	0xFF1
  3960                           postinc0	equ	0xFEE
  3961                           wreg	equ	0xFE8
  3962                           postinc1	equ	0xFE6
  3963                           postdec1	equ	0xFE5
  3964                           fsr1h	equ	0xFE2
  3965                           fsr1l	equ	0xFE1
  3966                           postinc2	equ	0xFDE
  3967                           postdec2	equ	0xFDD
  3968                           fsr2h	equ	0xFDA
  3969                           fsr2l	equ	0xFD9
  3970                           status	equ	0xFD8
  3971                           
  3972 ;; *************** function _Battery_Filter *****************
  3973 ;; Defined at:
  3974 ;;		line 33 in file "Battery.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;  x               2   15[BANK0 ] int 
  3979 ;; Return value:  Size  Location     Type
  3980 ;;		None               void
  3981 ;; Registers used:
  3982 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3988 ;;      Params:         0       0       0       0       0       0       0
  3989 ;;      Locals:         0       2       0       0       0       0       0
  3990 ;;      Temps:          0       0       0       0       0       0       0
  3991 ;;      Totals:         0       2       0       0       0       0       0
  3992 ;;Total ram usage:        2 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    5
  3995 ;; This function calls:
  3996 ;;		___ftadd
  3997 ;;		___ftmul
  3998 ;;		___wmul
  3999 ;; This function is called by:
  4000 ;;		_Battery_Convert
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           	psect	text25
  4005  0010C0                     __ptext25:
  4006                           	opt stack 0
  4007  0010C0                     _Battery_Filter:
  4008                           	opt stack 24
  4009                           
  4010                           ;Battery.c: 36: int x;
  4011                           ;Battery.c: 37: for(x = 0; x < 10; x++)
  4012                           
  4013                           ;incstack = 0
  4014  0010C0  0E00               	movlw	0
  4015  0010C2  0100               	movlb	0	; () banked
  4016  0010C4  6FDA               	movwf	(Battery_Filter@x+1)& (0+255),b
  4017  0010C6  0E00               	movlw	0
  4018  0010C8  0100               	movlb	0	; () banked
  4019  0010CA  6FD9               	movwf	Battery_Filter@x& (0+255),b
  4020  0010CC                     
  4021                           ; BSR set to: 0
  4022  0010CC  0100               	movlb	0	; () banked
  4023  0010CE  51DA               	movf	(Battery_Filter@x+1)& (0+255),w,b
  4024  0010D0  0A80               	xorlw	128
  4025  0010D2  0F80               	addlw	-128
  4026  0010D4  0E0A               	movlw	10
  4027  0010D6  B4D8               	btfsc	status,2,c
  4028  0010D8  5DD9               	subwf	Battery_Filter@x& (0+255),w,b
  4029  0010DA  B0D8               	btfsc	status,0,c
  4030  0010DC  D06B               	goto	l3176
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;Battery.c: 38: {
  4034                           ;Battery.c: 39: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
  4035                           
  4036                           ; BSR set to: 0
  4037                           
  4038                           ; BSR set to: 0
  4039  0010DE  C0D9  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  4040  0010E2  C0DA  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  4041  0010E6  0E00               	movlw	0
  4042  0010E8  6E22               	movwf	___wmul@multiplicand+1,c
  4043  0010EA  0E03               	movlw	3
  4044  0010EC  6E21               	movwf	___wmul@multiplicand,c
  4045  0010EE  EC68  F00F         	call	___wmul	;wreg free
  4046  0010F2  0100               	movlb	0	; () banked
  4047  0010F4  0E60               	movlw	low _Battery_Volt
  4048  0010F6  241F               	addwf	?___wmul,w,c
  4049  0010F8  6ED9               	movwf	fsr2l,c
  4050  0010FA  0100               	movlb	0	; () banked
  4051  0010FC  0E00               	movlw	high _Battery_Volt
  4052  0010FE  2020               	addwfc	?___wmul+1,w,c
  4053  001100  6EDA               	movwf	fsr2h,c
  4054  001102  0E48               	movlw	72
  4055  001104  6E2C               	movwf	___ftmul@f2,c
  4056  001106  0E61               	movlw	97
  4057  001108  6E2D               	movwf	___ftmul@f2+1,c
  4058  00110A  0E3F               	movlw	63
  4059  00110C  6E2E               	movwf	___ftmul@f2+2,c
  4060  00110E  C0D9  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  4061  001112  C0DA  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  4062  001116  0E00               	movlw	0
  4063  001118  6E22               	movwf	___wmul@multiplicand+1,c
  4064  00111A  0E03               	movlw	3
  4065  00111C  6E21               	movwf	___wmul@multiplicand,c
  4066  00111E  EC68  F00F         	call	___wmul	;wreg free
  4067  001122  0101               	movlb	1	; () banked
  4068  001124  0E6E               	movlw	low _TempBattery_Volt
  4069  001126  241F               	addwf	?___wmul,w,c
  4070  001128  6EE1               	movwf	fsr1l,c
  4071  00112A  0101               	movlb	1	; () banked
  4072  00112C  0E01               	movlw	high _TempBattery_Volt
  4073  00112E  2020               	addwfc	?___wmul+1,w,c
  4074  001130  6EE2               	movwf	fsr1h,c
  4075  001132  CFE6 F029          	movff	postinc1,___ftmul@f1
  4076  001136  CFE6 F02A          	movff	postinc1,___ftmul@f1+1
  4077  00113A  CFE5 F02B          	movff	postdec1,___ftmul@f1+2
  4078  00113E  ECC9  F009         	call	___ftmul	;wreg free
  4079  001142  C029  F0D0         	movff	?___ftmul,___ftadd@f1
  4080  001146  C02A  F0D1         	movff	?___ftmul+1,___ftadd@f1+1
  4081  00114A  C02B  F0D2         	movff	?___ftmul+2,___ftadd@f1+2
  4082  00114E  0EC3               	movlw	195
  4083  001150  6E2C               	movwf	___ftmul@f2,c
  4084  001152  0EF5               	movlw	245
  4085  001154  6E2D               	movwf	___ftmul@f2+1,c
  4086  001156  0E3D               	movlw	61
  4087  001158  6E2E               	movwf	___ftmul@f2+2,c
  4088  00115A  0E00               	movlw	0
  4089  00115C  6E22               	movwf	___wmul@multiplicand+1,c
  4090  00115E  0E03               	movlw	3
  4091  001160  6E21               	movwf	___wmul@multiplicand,c
  4092  001162  C0D9  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  4093  001166  C0DA  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  4094  00116A  EC68  F00F         	call	___wmul	;wreg free
  4095  00116E  0101               	movlb	1	; () banked
  4096  001170  0E32               	movlw	low _PrevBattery_Volt
  4097  001172  241F               	addwf	?___wmul,w,c
  4098  001174  6EE1               	movwf	fsr1l,c
  4099  001176  0101               	movlb	1	; () banked
  4100  001178  0E01               	movlw	high _PrevBattery_Volt
  4101  00117A  2020               	addwfc	?___wmul+1,w,c
  4102  00117C  6EE2               	movwf	fsr1h,c
  4103  00117E  CFE6 F029          	movff	postinc1,___ftmul@f1
  4104  001182  CFE6 F02A          	movff	postinc1,___ftmul@f1+1
  4105  001186  CFE5 F02B          	movff	postdec1,___ftmul@f1+2
  4106  00118A  ECC9  F009         	call	___ftmul	;wreg free
  4107  00118E  C029  F0D3         	movff	?___ftmul,___ftadd@f2
  4108  001192  C02A  F0D4         	movff	?___ftmul+1,___ftadd@f2+1
  4109  001196  C02B  F0D5         	movff	?___ftmul+2,___ftadd@f2+2
  4110  00119A  EC73  F005         	call	___ftadd	;wreg free
  4111  00119E  C0D0  FFDE         	movff	?___ftadd,postinc2
  4112  0011A2  C0D1  FFDE         	movff	?___ftadd+1,postinc2
  4113  0011A6  C0D2  FFDD         	movff	?___ftadd+2,postdec2
  4114  0011AA  52DD               	movf	postdec2,f,c
  4115  0011AC  0100               	movlb	0	; () banked
  4116  0011AE  4BD9               	infsnz	Battery_Filter@x& (0+255),f,b
  4117  0011B0  2BDA               	incf	(Battery_Filter@x+1)& (0+255),f,b
  4118  0011B2  D78C               	goto	L8
  4119  0011B4                     l3176:
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;Battery.c: 40: }
  4123                           ;Battery.c: 41: for(x = 0; x < 10; x++)
  4124  0011B4  0E00               	movlw	0
  4125  0011B6  0100               	movlb	0	; () banked
  4126  0011B8  6FDA               	movwf	(Battery_Filter@x+1)& (0+255),b
  4127  0011BA  0E00               	movlw	0
  4128  0011BC  0100               	movlb	0	; () banked
  4129  0011BE  6FD9               	movwf	Battery_Filter@x& (0+255),b
  4130  0011C0                     
  4131                           ; BSR set to: 0
  4132  0011C0  0100               	movlb	0	; () banked
  4133  0011C2  51DA               	movf	(Battery_Filter@x+1)& (0+255),w,b
  4134  0011C4  0A80               	xorlw	128
  4135  0011C6  0F80               	addlw	-128
  4136  0011C8  0E0A               	movlw	10
  4137  0011CA  B4D8               	btfsc	status,2,c
  4138  0011CC  5DD9               	subwf	Battery_Filter@x& (0+255),w,b
  4139  0011CE  B0D8               	btfsc	status,0,c
  4140  0011D0  0012               	return	
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;Battery.c: 42: {
  4144                           ;Battery.c: 43: PrevBattery_Volt[x] = Battery_Volt[x];
  4145                           
  4146                           ; BSR set to: 0
  4147                           
  4148                           ; BSR set to: 0
  4149  0011D2  C0D9  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  4150  0011D6  C0DA  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  4151  0011DA  0E00               	movlw	0
  4152  0011DC  6E22               	movwf	___wmul@multiplicand+1,c
  4153  0011DE  0E03               	movlw	3
  4154  0011E0  6E21               	movwf	___wmul@multiplicand,c
  4155  0011E2  EC68  F00F         	call	___wmul	;wreg free
  4156  0011E6  0100               	movlb	0	; () banked
  4157  0011E8  0E60               	movlw	low _Battery_Volt
  4158  0011EA  241F               	addwf	?___wmul,w,c
  4159  0011EC  6ED9               	movwf	fsr2l,c
  4160  0011EE  0100               	movlb	0	; () banked
  4161  0011F0  0E00               	movlw	high _Battery_Volt
  4162  0011F2  2020               	addwfc	?___wmul+1,w,c
  4163  0011F4  6EDA               	movwf	fsr2h,c
  4164  0011F6  C0D9  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  4165  0011FA  C0DA  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  4166  0011FE  0E00               	movlw	0
  4167  001200  6E22               	movwf	___wmul@multiplicand+1,c
  4168  001202  0E03               	movlw	3
  4169  001204  6E21               	movwf	___wmul@multiplicand,c
  4170  001206  EC68  F00F         	call	___wmul	;wreg free
  4171  00120A  0101               	movlb	1	; () banked
  4172  00120C  0E32               	movlw	low _PrevBattery_Volt
  4173  00120E  241F               	addwf	?___wmul,w,c
  4174  001210  6EE1               	movwf	fsr1l,c
  4175  001212  0101               	movlb	1	; () banked
  4176  001214  0E01               	movlw	high _PrevBattery_Volt
  4177  001216  2020               	addwfc	?___wmul+1,w,c
  4178  001218  6EE2               	movwf	fsr1h,c
  4179  00121A  CFDE FFE6          	movff	postinc2,postinc1
  4180  00121E  CFDE FFE6          	movff	postinc2,postinc1
  4181  001222  CFDE FFE5          	movff	postinc2,postdec1
  4182  001226  52E5               	movf	postdec1,f,c
  4183                           
  4184                           ; BSR set to: 1
  4185  001228  0100               	movlb	0	; () banked
  4186  00122A  4BD9               	infsnz	Battery_Filter@x& (0+255),f,b
  4187  00122C  2BDA               	incf	(Battery_Filter@x+1)& (0+255),f,b
  4188  00122E  D7C8               	goto	L9
  4189  001230                     __end_of_Battery_Filter:
  4190                           	opt stack 0
  4191                           tblptru	equ	0xFF8
  4192                           tblptrh	equ	0xFF7
  4193                           tblptrl	equ	0xFF6
  4194                           tablat	equ	0xFF5
  4195                           prodl	equ	0xFF3
  4196                           intcon	equ	0xFF2
  4197                           intcon2	equ	0xFF1
  4198                           postinc0	equ	0xFEE
  4199                           wreg	equ	0xFE8
  4200                           postinc1	equ	0xFE6
  4201                           postdec1	equ	0xFE5
  4202                           fsr1h	equ	0xFE2
  4203                           fsr1l	equ	0xFE1
  4204                           postinc2	equ	0xFDE
  4205                           postdec2	equ	0xFDD
  4206                           fsr2h	equ	0xFDA
  4207                           fsr2l	equ	0xFD9
  4208                           status	equ	0xFD8
  4209                           
  4210 ;; *************** function ___wmul *****************
  4211 ;; Defined at:
  4212 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;  multiplier      2   30[COMRAM] unsigned int 
  4215 ;;  multiplicand    2   32[COMRAM] unsigned int 
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;  product         2   34[COMRAM] unsigned int 
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  2   30[COMRAM] unsigned int 
  4220 ;; Registers used:
  4221 ;;		wreg, status,2, status,0, prodl, prodh
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4227 ;;      Params:         4       0       0       0       0       0       0
  4228 ;;      Locals:         2       0       0       0       0       0       0
  4229 ;;      Temps:          0       0       0       0       0       0       0
  4230 ;;      Totals:         6       0       0       0       0       0       0
  4231 ;;Total ram usage:        6 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    3
  4234 ;; This function calls:
  4235 ;;		Nothing
  4236 ;; This function is called by:
  4237 ;;		_Battery_Fault
  4238 ;;		_Battery_Filter
  4239 ;;		_Battery_Convert
  4240 ;;		_Battery_Get
  4241 ;;		_Temp_Fault
  4242 ;;		_Temp_Filter
  4243 ;;		_Temp_Convert
  4244 ;;		_eval_poly
  4245 ;;		_Tempeture_Get
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249                           	psect	text26
  4250  001ED0                     __ptext26:
  4251                           	opt stack 0
  4252  001ED0                     ___wmul:
  4253                           	opt stack 26
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;incstack = 0
  4257  001ED0  501F               	movf	___wmul@multiplier,w,c
  4258  001ED2  0221               	mulwf	___wmul@multiplicand,c
  4259  001ED4  CFF3 F023          	movff	prodl,___wmul@product
  4260  001ED8  CFF4 F024          	movff	prodh,___wmul@product+1
  4261  001EDC  501F               	movf	___wmul@multiplier,w,c
  4262  001EDE  0222               	mulwf	___wmul@multiplicand+1,c
  4263  001EE0  50F3               	movf	prodl,w,c
  4264  001EE2  2624               	addwf	___wmul@product+1,f,c
  4265  001EE4  5020               	movf	___wmul@multiplier+1,w,c
  4266  001EE6  0221               	mulwf	___wmul@multiplicand,c
  4267  001EE8  50F3               	movf	prodl,w,c
  4268  001EEA  2624               	addwf	___wmul@product+1,f,c
  4269  001EEC  C023  F01F         	movff	___wmul@product,?___wmul
  4270  001EF0  C024  F020         	movff	___wmul@product+1,?___wmul+1
  4271  001EF4  0012               	return	
  4272  001EF6                     __end_of___wmul:
  4273                           	opt stack 0
  4274                           tblptru	equ	0xFF8
  4275                           tblptrh	equ	0xFF7
  4276                           tblptrl	equ	0xFF6
  4277                           tablat	equ	0xFF5
  4278                           prodh	equ	0xFF4
  4279                           prodl	equ	0xFF3
  4280                           intcon	equ	0xFF2
  4281                           intcon2	equ	0xFF1
  4282                           postinc0	equ	0xFEE
  4283                           wreg	equ	0xFE8
  4284                           postinc1	equ	0xFE6
  4285                           postdec1	equ	0xFE5
  4286                           fsr1h	equ	0xFE2
  4287                           fsr1l	equ	0xFE1
  4288                           postinc2	equ	0xFDE
  4289                           postdec2	equ	0xFDD
  4290                           fsr2h	equ	0xFDA
  4291                           fsr2l	equ	0xFD9
  4292                           status	equ	0xFD8
  4293                           
  4294 ;; *************** function ___ftmul *****************
  4295 ;; Defined at:
  4296 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;  f1              3   40[COMRAM] float 
  4299 ;;  f2              3   43[COMRAM] float 
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  4302 ;;  sign            1    5[BANK0 ] unsigned char 
  4303 ;;  cntr            1    4[BANK0 ] unsigned char 
  4304 ;;  exp             1    0[BANK0 ] unsigned char 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  3   40[COMRAM] float 
  4307 ;; Registers used:
  4308 ;;		wreg, status,2, status,0, cstack
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4314 ;;      Params:         6       0       0       0       0       0       0
  4315 ;;      Locals:         0       6       0       0       0       0       0
  4316 ;;      Temps:          3       0       0       0       0       0       0
  4317 ;;      Totals:         9       6       0       0       0       0       0
  4318 ;;Total ram usage:       15 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    4
  4321 ;; This function calls:
  4322 ;;		___ftpack
  4323 ;; This function is called by:
  4324 ;;		_Battery_Filter
  4325 ;;		_Temp_Filter
  4326 ;;		_Temp_Convert
  4327 ;;		_log
  4328 ;;		_eval_poly
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           	psect	text27
  4333  001392                     __ptext27:
  4334                           	opt stack 0
  4335  001392                     ___ftmul:
  4336                           	opt stack 23
  4337                           
  4338                           ;incstack = 0
  4339  001392  C02B  F02F         	movff	___ftmul@f1+2,??___ftmul
  4340  001396  6A30               	clrf	(??___ftmul+1)& (0+255),c
  4341  001398  6A31               	clrf	(??___ftmul+2)& (0+255),c
  4342  00139A  342A               	rlcf	___ftmul@f1+1,w,c
  4343  00139C  362F               	rlcf	??___ftmul& (0+255),f,c
  4344  00139E  E301               	bnc	u2481
  4345  0013A0  8030               	bsf	(??___ftmul+1)& (0+255),0,c
  4346  0013A2                     u2481:
  4347  0013A2  502F               	movf	??___ftmul,w,c
  4348  0013A4  0100               	movlb	0	; () banked
  4349  0013A6  6FCA               	movwf	___ftmul@exp& (0+255),b
  4350  0013A8  0100               	movlb	0	; () banked
  4351  0013AA  67CA               	tstfsz	___ftmul@exp& (0+255),b
  4352  0013AC  D007               	goto	l3104
  4353                           
  4354                           ; BSR set to: 0
  4355  0013AE  0E00               	movlw	0
  4356  0013B0  6E29               	movwf	?___ftmul,c
  4357  0013B2  0E00               	movlw	0
  4358  0013B4  6E2A               	movwf	?___ftmul+1,c
  4359  0013B6  0E00               	movlw	0
  4360  0013B8  6E2B               	movwf	?___ftmul+2,c
  4361  0013BA  0012               	return	
  4362  0013BC                     l3104:
  4363                           
  4364                           ; BSR set to: 0
  4365  0013BC  C02E  F02F         	movff	___ftmul@f2+2,??___ftmul
  4366  0013C0  6A30               	clrf	(??___ftmul+1)& (0+255),c
  4367  0013C2  6A31               	clrf	(??___ftmul+2)& (0+255),c
  4368  0013C4  342D               	rlcf	___ftmul@f2+1,w,c
  4369  0013C6  362F               	rlcf	??___ftmul& (0+255),f,c
  4370  0013C8  E301               	bnc	u2501
  4371  0013CA  8030               	bsf	(??___ftmul+1)& (0+255),0,c
  4372  0013CC                     u2501:
  4373  0013CC  502F               	movf	??___ftmul,w,c
  4374  0013CE  0100               	movlb	0	; () banked
  4375  0013D0  6FCF               	movwf	___ftmul@sign& (0+255),b
  4376  0013D2  0100               	movlb	0	; () banked
  4377  0013D4  67CF               	tstfsz	___ftmul@sign& (0+255),b
  4378  0013D6  D007               	goto	l3110
  4379                           
  4380                           ; BSR set to: 0
  4381  0013D8  0E00               	movlw	0
  4382  0013DA  6E29               	movwf	?___ftmul,c
  4383  0013DC  0E00               	movlw	0
  4384  0013DE  6E2A               	movwf	?___ftmul+1,c
  4385  0013E0  0E00               	movlw	0
  4386  0013E2  6E2B               	movwf	?___ftmul+2,c
  4387  0013E4  0012               	return	
  4388  0013E6                     l3110:
  4389                           
  4390                           ; BSR set to: 0
  4391  0013E6  0100               	movlb	0	; () banked
  4392  0013E8  51CF               	movf	___ftmul@sign& (0+255),w,b
  4393  0013EA  0F7B               	addlw	123
  4394  0013EC  0100               	movlb	0	; () banked
  4395  0013EE  27CA               	addwf	___ftmul@exp& (0+255),f,b
  4396                           
  4397                           ; BSR set to: 0
  4398  0013F0  C02B  F0CF         	movff	___ftmul@f1+2,___ftmul@sign
  4399  0013F4  502E               	movf	___ftmul@f2+2,w,c
  4400  0013F6  0100               	movlb	0	; () banked
  4401  0013F8  1BCF               	xorwf	___ftmul@sign& (0+255),f,b
  4402  0013FA  0E80               	movlw	128
  4403  0013FC  0100               	movlb	0	; () banked
  4404  0013FE  17CF               	andwf	___ftmul@sign& (0+255),f,b
  4405                           
  4406                           ; BSR set to: 0
  4407  001400  8E2A               	bsf	___ftmul@f1+1,7,c
  4408                           
  4409                           ; BSR set to: 0
  4410  001402  8E2D               	bsf	___ftmul@f2+1,7,c
  4411                           
  4412                           ; BSR set to: 0
  4413  001404  0EFF               	movlw	255
  4414  001406  162C               	andwf	___ftmul@f2,f,c
  4415  001408  0EFF               	movlw	255
  4416  00140A  162D               	andwf	___ftmul@f2+1,f,c
  4417  00140C  0E00               	movlw	0
  4418  00140E  162E               	andwf	___ftmul@f2+2,f,c
  4419                           
  4420                           ; BSR set to: 0
  4421  001410  0E00               	movlw	0
  4422  001412  0100               	movlb	0	; () banked
  4423  001414  6FCB               	movwf	___ftmul@f3_as_product& (0+255),b
  4424  001416  0E00               	movlw	0
  4425  001418  0100               	movlb	0	; () banked
  4426  00141A  6FCC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4427  00141C  0E00               	movlw	0
  4428  00141E  0100               	movlb	0	; () banked
  4429  001420  6FCD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4430                           
  4431                           ; BSR set to: 0
  4432  001422  0E07               	movlw	7
  4433  001424  0100               	movlb	0	; () banked
  4434  001426  6FCE               	movwf	___ftmul@cntr& (0+255),b
  4435  001428                     l3124:
  4436                           
  4437                           ; BSR set to: 0
  4438  001428  A029               	btfss	___ftmul@f1,0,c
  4439  00142A  D009               	goto	l3128
  4440                           
  4441                           ; BSR set to: 0
  4442  00142C  502C               	movf	___ftmul@f2,w,c
  4443  00142E  0100               	movlb	0	; () banked
  4444  001430  27CB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4445  001432  502D               	movf	___ftmul@f2+1,w,c
  4446  001434  0100               	movlb	0	; () banked
  4447  001436  23CC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4448  001438  502E               	movf	___ftmul@f2+2,w,c
  4449  00143A  0100               	movlb	0	; () banked
  4450  00143C  23CD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4451  00143E                     l3128:
  4452                           
  4453                           ; BSR set to: 0
  4454  00143E  90D8               	bcf	status,0,c
  4455  001440  322B               	rrcf	___ftmul@f1+2,f,c
  4456  001442  322A               	rrcf	___ftmul@f1+1,f,c
  4457  001444  3229               	rrcf	___ftmul@f1,f,c
  4458  001446  90D8               	bcf	status,0,c
  4459  001448  362C               	rlcf	___ftmul@f2,f,c
  4460  00144A  362D               	rlcf	___ftmul@f2+1,f,c
  4461  00144C  362E               	rlcf	___ftmul@f2+2,f,c
  4462                           
  4463                           ; BSR set to: 0
  4464  00144E  0100               	movlb	0	; () banked
  4465  001450  2FCE               	decfsz	___ftmul@cntr& (0+255),f,b
  4466  001452  D7EA               	goto	l3124
  4467                           
  4468                           ; BSR set to: 0
  4469                           
  4470                           ; BSR set to: 0
  4471  001454  0E09               	movlw	9
  4472  001456  0100               	movlb	0	; () banked
  4473  001458  6FCE               	movwf	___ftmul@cntr& (0+255),b
  4474  00145A                     l3134:
  4475                           
  4476                           ; BSR set to: 0
  4477  00145A  A029               	btfss	___ftmul@f1,0,c
  4478  00145C  D009               	goto	l3138
  4479                           
  4480                           ; BSR set to: 0
  4481  00145E  502C               	movf	___ftmul@f2,w,c
  4482  001460  0100               	movlb	0	; () banked
  4483  001462  27CB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4484  001464  502D               	movf	___ftmul@f2+1,w,c
  4485  001466  0100               	movlb	0	; () banked
  4486  001468  23CC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4487  00146A  502E               	movf	___ftmul@f2+2,w,c
  4488  00146C  0100               	movlb	0	; () banked
  4489  00146E  23CD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4490  001470                     l3138:
  4491                           
  4492                           ; BSR set to: 0
  4493  001470  90D8               	bcf	status,0,c
  4494  001472  322B               	rrcf	___ftmul@f1+2,f,c
  4495  001474  322A               	rrcf	___ftmul@f1+1,f,c
  4496  001476  3229               	rrcf	___ftmul@f1,f,c
  4497  001478  0100               	movlb	0	; () banked
  4498  00147A  90D8               	bcf	status,0,c
  4499  00147C  0100               	movlb	0	; () banked
  4500  00147E  33CD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4501  001480  0100               	movlb	0	; () banked
  4502  001482  33CC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4503  001484  0100               	movlb	0	; () banked
  4504  001486  33CB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4505                           
  4506                           ; BSR set to: 0
  4507  001488  0100               	movlb	0	; () banked
  4508  00148A  2FCE               	decfsz	___ftmul@cntr& (0+255),f,b
  4509  00148C  D7E6               	goto	l3134
  4510                           
  4511                           ; BSR set to: 0
  4512                           
  4513                           ; BSR set to: 0
  4514  00148E  C0CB  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  4515  001492  C0CC  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4516  001496  C0CD  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4517  00149A  C0CA  F01A         	movff	___ftmul@exp,___ftpack@exp
  4518  00149E  C0CF  F01B         	movff	___ftmul@sign,___ftpack@sign
  4519  0014A2  ECE5  F00C         	call	___ftpack	;wreg free
  4520  0014A6  C017  F029         	movff	?___ftpack,?___ftmul
  4521  0014AA  C018  F02A         	movff	?___ftpack+1,?___ftmul+1
  4522  0014AE  C019  F02B         	movff	?___ftpack+2,?___ftmul+2
  4523  0014B2  0012               	return	
  4524  0014B4                     __end_of___ftmul:
  4525                           	opt stack 0
  4526                           tblptru	equ	0xFF8
  4527                           tblptrh	equ	0xFF7
  4528                           tblptrl	equ	0xFF6
  4529                           tablat	equ	0xFF5
  4530                           prodh	equ	0xFF4
  4531                           prodl	equ	0xFF3
  4532                           intcon	equ	0xFF2
  4533                           intcon2	equ	0xFF1
  4534                           postinc0	equ	0xFEE
  4535                           wreg	equ	0xFE8
  4536                           postinc1	equ	0xFE6
  4537                           postdec1	equ	0xFE5
  4538                           fsr1h	equ	0xFE2
  4539                           fsr1l	equ	0xFE1
  4540                           postinc2	equ	0xFDE
  4541                           postdec2	equ	0xFDD
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function ___ftadd *****************
  4547 ;; Defined at:
  4548 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;  f1              3    6[BANK0 ] float 
  4551 ;;  f2              3    9[BANK0 ] float 
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;  exp1            1   14[BANK0 ] unsigned char 
  4554 ;;  exp2            1   13[BANK0 ] unsigned char 
  4555 ;;  sign            1   12[BANK0 ] unsigned char 
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  3    6[BANK0 ] float 
  4558 ;; Registers used:
  4559 ;;		wreg, status,2, status,0, cstack
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4565 ;;      Params:         0       6       0       0       0       0       0
  4566 ;;      Locals:         0       3       0       0       0       0       0
  4567 ;;      Temps:          3       0       0       0       0       0       0
  4568 ;;      Totals:         3       9       0       0       0       0       0
  4569 ;;Total ram usage:       12 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    4
  4572 ;; This function calls:
  4573 ;;		___ftpack
  4574 ;; This function is called by:
  4575 ;;		_Battery_Filter
  4576 ;;		_Battery_Convert
  4577 ;;		_Temp_Filter
  4578 ;;		_Temp_Convert
  4579 ;;		___ftsub
  4580 ;;		_log
  4581 ;;		_eval_poly
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text28
  4586  000AE6                     __ptext28:
  4587                           	opt stack 0
  4588  000AE6                     ___ftadd:
  4589                           	opt stack 23
  4590                           
  4591                           ;incstack = 0
  4592  000AE6  0100               	movlb	0	; () banked
  4593  000AE8  C0D2  F032         	movff	___ftadd@f1+2,??___ftadd
  4594  000AEC  6A33               	clrf	(??___ftadd+1)& (0+255),c
  4595  000AEE  6A34               	clrf	(??___ftadd+2)& (0+255),c
  4596  000AF0  0100               	movlb	0	; () banked
  4597  000AF2  35D1               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4598  000AF4  3632               	rlcf	??___ftadd& (0+255),f,c
  4599  000AF6  E301               	bnc	u2271
  4600  000AF8  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  4601  000AFA                     u2271:
  4602  000AFA  5032               	movf	??___ftadd,w,c
  4603  000AFC  0100               	movlb	0	; () banked
  4604  000AFE  6FD8               	movwf	___ftadd@exp1& (0+255),b
  4605  000B00  0100               	movlb	0	; () banked
  4606  000B02  C0D5  F032         	movff	___ftadd@f2+2,??___ftadd
  4607  000B06  6A33               	clrf	(??___ftadd+1)& (0+255),c
  4608  000B08  6A34               	clrf	(??___ftadd+2)& (0+255),c
  4609  000B0A  0100               	movlb	0	; () banked
  4610  000B0C  35D4               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4611  000B0E  3632               	rlcf	??___ftadd& (0+255),f,c
  4612  000B10  E301               	bnc	u2281
  4613  000B12  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  4614  000B14                     u2281:
  4615  000B14  5032               	movf	??___ftadd,w,c
  4616  000B16  0100               	movlb	0	; () banked
  4617  000B18  6FD7               	movwf	___ftadd@exp2& (0+255),b
  4618                           
  4619                           ; BSR set to: 0
  4620  000B1A  0100               	movlb	0	; () banked
  4621  000B1C  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4622  000B1E  B4D8               	btfsc	status,2,c
  4623  000B20  D010               	goto	l896
  4624                           
  4625                           ; BSR set to: 0
  4626  000B22  0100               	movlb	0	; () banked
  4627  000B24  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4628  000B26  0100               	movlb	0	; () banked
  4629  000B28  5DD8               	subwf	___ftadd@exp1& (0+255),w,b
  4630  000B2A  B0D8               	btfsc	status,0,c
  4631  000B2C  D011               	goto	l3036
  4632                           
  4633                           ; BSR set to: 0
  4634  000B2E  0100               	movlb	0	; () banked
  4635  000B30  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4636  000B32  0800               	sublw	0
  4637  000B34  0100               	movlb	0	; () banked
  4638  000B36  25D7               	addwf	___ftadd@exp2& (0+255),w,b
  4639  000B38  6E32               	movwf	??___ftadd& (0+255),c
  4640  000B3A  0E19               	movlw	25
  4641  000B3C  5C32               	subwf	??___ftadd,w,c
  4642  000B3E  A0D8               	btfss	status,0,c
  4643  000B40  D007               	goto	l3036
  4644  000B42                     l896:
  4645                           
  4646                           ; BSR set to: 0
  4647  000B42  C0D3  F0D0         	movff	___ftadd@f2,?___ftadd
  4648  000B46  C0D4  F0D1         	movff	___ftadd@f2+1,?___ftadd+1
  4649  000B4A  C0D5  F0D2         	movff	___ftadd@f2+2,?___ftadd+2
  4650  000B4E  0012               	return	
  4651  000B50                     l3036:
  4652                           
  4653                           ; BSR set to: 0
  4654  000B50  0100               	movlb	0	; () banked
  4655  000B52  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4656  000B54  B4D8               	btfsc	status,2,c
  4657  000B56  D010               	goto	l900
  4658                           
  4659                           ; BSR set to: 0
  4660  000B58  0100               	movlb	0	; () banked
  4661  000B5A  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4662  000B5C  0100               	movlb	0	; () banked
  4663  000B5E  5DD7               	subwf	___ftadd@exp2& (0+255),w,b
  4664  000B60  B0D8               	btfsc	status,0,c
  4665  000B62  D011               	goto	l3042
  4666                           
  4667                           ; BSR set to: 0
  4668  000B64  0100               	movlb	0	; () banked
  4669  000B66  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4670  000B68  0800               	sublw	0
  4671  000B6A  0100               	movlb	0	; () banked
  4672  000B6C  25D8               	addwf	___ftadd@exp1& (0+255),w,b
  4673  000B6E  6E32               	movwf	??___ftadd& (0+255),c
  4674  000B70  0E19               	movlw	25
  4675  000B72  5C32               	subwf	??___ftadd,w,c
  4676  000B74  A0D8               	btfss	status,0,c
  4677  000B76  D007               	goto	l3042
  4678  000B78                     l900:
  4679                           
  4680                           ; BSR set to: 0
  4681  000B78  C0D0  F0D0         	movff	___ftadd@f1,?___ftadd
  4682  000B7C  C0D1  F0D1         	movff	___ftadd@f1+1,?___ftadd+1
  4683  000B80  C0D2  F0D2         	movff	___ftadd@f1+2,?___ftadd+2
  4684  000B84  0012               	return	
  4685  000B86                     l3042:
  4686                           
  4687                           ; BSR set to: 0
  4688  000B86  0E06               	movlw	6
  4689  000B88  0100               	movlb	0	; () banked
  4690  000B8A  6FD6               	movwf	___ftadd@sign& (0+255),b
  4691                           
  4692                           ; BSR set to: 0
  4693  000B8C  0100               	movlb	0	; () banked
  4694  000B8E  AFD2               	btfss	(___ftadd@f1+2)& (0+255),7,b
  4695  000B90  D002               	goto	l3048
  4696                           
  4697                           ; BSR set to: 0
  4698  000B92  0100               	movlb	0	; () banked
  4699  000B94  8FD6               	bsf	___ftadd@sign& (0+255),7,b
  4700  000B96                     l3048:
  4701                           
  4702                           ; BSR set to: 0
  4703  000B96  0100               	movlb	0	; () banked
  4704  000B98  AFD5               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4705  000B9A  D002               	goto	l902
  4706                           
  4707                           ; BSR set to: 0
  4708  000B9C  0100               	movlb	0	; () banked
  4709  000B9E  8DD6               	bsf	___ftadd@sign& (0+255),6,b
  4710  000BA0                     l902:
  4711                           
  4712                           ; BSR set to: 0
  4713  000BA0  0100               	movlb	0	; () banked
  4714  000BA2  8FD1               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4715                           
  4716                           ; BSR set to: 0
  4717  000BA4  0EFF               	movlw	255
  4718  000BA6  0100               	movlb	0	; () banked
  4719  000BA8  17D0               	andwf	___ftadd@f1& (0+255),f,b
  4720  000BAA  0EFF               	movlw	255
  4721  000BAC  0100               	movlb	0	; () banked
  4722  000BAE  17D1               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4723  000BB0  0E00               	movlw	0
  4724  000BB2  0100               	movlb	0	; () banked
  4725  000BB4  17D2               	andwf	(___ftadd@f1+2)& (0+255),f,b
  4726  000BB6  0100               	movlb	0	; () banked
  4727  000BB8  8FD4               	bsf	(___ftadd@f2+1)& (0+255),7,b
  4728                           
  4729                           ; BSR set to: 0
  4730  000BBA  0EFF               	movlw	255
  4731  000BBC  0100               	movlb	0	; () banked
  4732  000BBE  17D3               	andwf	___ftadd@f2& (0+255),f,b
  4733  000BC0  0EFF               	movlw	255
  4734  000BC2  0100               	movlb	0	; () banked
  4735  000BC4  17D4               	andwf	(___ftadd@f2+1)& (0+255),f,b
  4736  000BC6  0E00               	movlw	0
  4737  000BC8  0100               	movlb	0	; () banked
  4738  000BCA  17D5               	andwf	(___ftadd@f2+2)& (0+255),f,b
  4739                           
  4740                           ; BSR set to: 0
  4741  000BCC  0100               	movlb	0	; () banked
  4742  000BCE  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4743  000BD0  0100               	movlb	0	; () banked
  4744  000BD2  5DD8               	subwf	___ftadd@exp1& (0+255),w,b
  4745  000BD4  B0D8               	btfsc	status,0,c
  4746  000BD6  D029               	goto	l3068
  4747  000BD8                     l3058:
  4748                           
  4749                           ; BSR set to: 0
  4750  000BD8  0100               	movlb	0	; () banked
  4751  000BDA  90D8               	bcf	status,0,c
  4752  000BDC  0100               	movlb	0	; () banked
  4753  000BDE  37D3               	rlcf	___ftadd@f2& (0+255),f,b
  4754  000BE0  0100               	movlb	0	; () banked
  4755  000BE2  37D4               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  4756  000BE4  0100               	movlb	0	; () banked
  4757  000BE6  37D5               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  4758  000BE8  0100               	movlb	0	; () banked
  4759  000BEA  07D7               	decf	___ftadd@exp2& (0+255),f,b
  4760                           
  4761                           ; BSR set to: 0
  4762  000BEC  0100               	movlb	0	; () banked
  4763  000BEE  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4764  000BF0  0100               	movlb	0	; () banked
  4765  000BF2  19D8               	xorwf	___ftadd@exp1& (0+255),w,b
  4766  000BF4  B4D8               	btfsc	status,2,c
  4767  000BF6  D013               	goto	l3066
  4768                           
  4769                           ; BSR set to: 0
  4770  000BF8  0100               	movlb	0	; () banked
  4771  000BFA  07D6               	decf	___ftadd@sign& (0+255),f,b
  4772  000BFC  C0D6  F032         	movff	___ftadd@sign,??___ftadd
  4773  000C00  0E07               	movlw	7
  4774  000C02  1632               	andwf	??___ftadd,f,c
  4775  000C04  B4D8               	btfsc	status,2,c
  4776  000C06  D00B               	goto	l3066
  4777  000C08  D7E7               	goto	l3058
  4778  000C0A                     l3064:
  4779                           
  4780                           ; BSR set to: 0
  4781  000C0A  0100               	movlb	0	; () banked
  4782  000C0C  90D8               	bcf	status,0,c
  4783  000C0E  0100               	movlb	0	; () banked
  4784  000C10  33D2               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  4785  000C12  0100               	movlb	0	; () banked
  4786  000C14  33D1               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  4787  000C16  0100               	movlb	0	; () banked
  4788  000C18  33D0               	rrcf	___ftadd@f1& (0+255),f,b
  4789  000C1A  0100               	movlb	0	; () banked
  4790  000C1C  2BD8               	incf	___ftadd@exp1& (0+255),f,b
  4791  000C1E                     l3066:
  4792                           
  4793                           ; BSR set to: 0
  4794  000C1E  0100               	movlb	0	; () banked
  4795  000C20  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4796  000C22  0100               	movlb	0	; () banked
  4797  000C24  63D8               	cpfseq	___ftadd@exp1& (0+255),b
  4798  000C26  D7F1               	goto	l3064
  4799  000C28  D02E               	goto	l911
  4800  000C2A                     l3068:
  4801                           
  4802                           ; BSR set to: 0
  4803  000C2A  0100               	movlb	0	; () banked
  4804  000C2C  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4805  000C2E  0100               	movlb	0	; () banked
  4806  000C30  5DD7               	subwf	___ftadd@exp2& (0+255),w,b
  4807  000C32  B0D8               	btfsc	status,0,c
  4808  000C34  D028               	goto	l911
  4809  000C36                     l3070:
  4810                           
  4811                           ; BSR set to: 0
  4812  000C36  0100               	movlb	0	; () banked
  4813  000C38  90D8               	bcf	status,0,c
  4814  000C3A  0100               	movlb	0	; () banked
  4815  000C3C  37D0               	rlcf	___ftadd@f1& (0+255),f,b
  4816  000C3E  0100               	movlb	0	; () banked
  4817  000C40  37D1               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  4818  000C42  0100               	movlb	0	; () banked
  4819  000C44  37D2               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  4820  000C46  0100               	movlb	0	; () banked
  4821  000C48  07D8               	decf	___ftadd@exp1& (0+255),f,b
  4822                           
  4823                           ; BSR set to: 0
  4824  000C4A  0100               	movlb	0	; () banked
  4825  000C4C  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4826  000C4E  0100               	movlb	0	; () banked
  4827  000C50  19D8               	xorwf	___ftadd@exp1& (0+255),w,b
  4828  000C52  B4D8               	btfsc	status,2,c
  4829  000C54  D013               	goto	l3078
  4830                           
  4831                           ; BSR set to: 0
  4832  000C56  0100               	movlb	0	; () banked
  4833  000C58  07D6               	decf	___ftadd@sign& (0+255),f,b
  4834  000C5A  C0D6  F032         	movff	___ftadd@sign,??___ftadd
  4835  000C5E  0E07               	movlw	7
  4836  000C60  1632               	andwf	??___ftadd,f,c
  4837  000C62  B4D8               	btfsc	status,2,c
  4838  000C64  D00B               	goto	l3078
  4839  000C66  D7E7               	goto	l3070
  4840  000C68                     l3076:
  4841                           
  4842                           ; BSR set to: 0
  4843  000C68  0100               	movlb	0	; () banked
  4844  000C6A  90D8               	bcf	status,0,c
  4845  000C6C  0100               	movlb	0	; () banked
  4846  000C6E  33D5               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  4847  000C70  0100               	movlb	0	; () banked
  4848  000C72  33D4               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  4849  000C74  0100               	movlb	0	; () banked
  4850  000C76  33D3               	rrcf	___ftadd@f2& (0+255),f,b
  4851  000C78  0100               	movlb	0	; () banked
  4852  000C7A  2BD7               	incf	___ftadd@exp2& (0+255),f,b
  4853  000C7C                     l3078:
  4854                           
  4855                           ; BSR set to: 0
  4856  000C7C  0100               	movlb	0	; () banked
  4857  000C7E  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4858  000C80  0100               	movlb	0	; () banked
  4859  000C82  63D8               	cpfseq	___ftadd@exp1& (0+255),b
  4860  000C84  D7F1               	goto	l3076
  4861  000C86                     l911:
  4862                           
  4863                           ; BSR set to: 0
  4864  000C86  0100               	movlb	0	; () banked
  4865  000C88  AFD6               	btfss	___ftadd@sign& (0+255),7,b
  4866  000C8A  D012               	goto	l920
  4867                           
  4868                           ; BSR set to: 0
  4869  000C8C  0EFF               	movlw	255
  4870  000C8E  0100               	movlb	0	; () banked
  4871  000C90  1BD0               	xorwf	___ftadd@f1& (0+255),f,b
  4872  000C92  0EFF               	movlw	255
  4873  000C94  0100               	movlb	0	; () banked
  4874  000C96  1BD1               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  4875  000C98  0EFF               	movlw	255
  4876  000C9A  0100               	movlb	0	; () banked
  4877  000C9C  1BD2               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  4878  000C9E  0E01               	movlw	1
  4879  000CA0  0100               	movlb	0	; () banked
  4880  000CA2  27D0               	addwf	___ftadd@f1& (0+255),f,b
  4881  000CA4  0E00               	movlw	0
  4882  000CA6  0100               	movlb	0	; () banked
  4883  000CA8  23D1               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  4884  000CAA  0E00               	movlw	0
  4885  000CAC  0100               	movlb	0	; () banked
  4886  000CAE  23D2               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  4887  000CB0                     l920:
  4888                           
  4889                           ; BSR set to: 0
  4890  000CB0  0100               	movlb	0	; () banked
  4891  000CB2  ADD6               	btfss	___ftadd@sign& (0+255),6,b
  4892  000CB4  D012               	goto	l3084
  4893                           
  4894                           ; BSR set to: 0
  4895  000CB6  0EFF               	movlw	255
  4896  000CB8  0100               	movlb	0	; () banked
  4897  000CBA  1BD3               	xorwf	___ftadd@f2& (0+255),f,b
  4898  000CBC  0EFF               	movlw	255
  4899  000CBE  0100               	movlb	0	; () banked
  4900  000CC0  1BD4               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4901  000CC2  0EFF               	movlw	255
  4902  000CC4  0100               	movlb	0	; () banked
  4903  000CC6  1BD5               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4904  000CC8  0E01               	movlw	1
  4905  000CCA  0100               	movlb	0	; () banked
  4906  000CCC  27D3               	addwf	___ftadd@f2& (0+255),f,b
  4907  000CCE  0E00               	movlw	0
  4908  000CD0  0100               	movlb	0	; () banked
  4909  000CD2  23D4               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4910  000CD4  0E00               	movlw	0
  4911  000CD6  0100               	movlb	0	; () banked
  4912  000CD8  23D5               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4913  000CDA                     l3084:
  4914                           
  4915                           ; BSR set to: 0
  4916  000CDA  0E00               	movlw	0
  4917  000CDC  0100               	movlb	0	; () banked
  4918  000CDE  6FD6               	movwf	___ftadd@sign& (0+255),b
  4919                           
  4920                           ; BSR set to: 0
  4921  000CE0  0100               	movlb	0	; () banked
  4922  000CE2  51D0               	movf	___ftadd@f1& (0+255),w,b
  4923  000CE4  0100               	movlb	0	; () banked
  4924  000CE6  27D3               	addwf	___ftadd@f2& (0+255),f,b
  4925  000CE8  0100               	movlb	0	; () banked
  4926  000CEA  51D1               	movf	(___ftadd@f1+1)& (0+255),w,b
  4927  000CEC  0100               	movlb	0	; () banked
  4928  000CEE  23D4               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4929  000CF0  0100               	movlb	0	; () banked
  4930  000CF2  51D2               	movf	(___ftadd@f1+2)& (0+255),w,b
  4931  000CF4  0100               	movlb	0	; () banked
  4932  000CF6  23D5               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4933                           
  4934                           ; BSR set to: 0
  4935  000CF8  0100               	movlb	0	; () banked
  4936  000CFA  AFD5               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4937  000CFC  D015               	goto	l3094
  4938                           
  4939                           ; BSR set to: 0
  4940  000CFE  0EFF               	movlw	255
  4941  000D00  0100               	movlb	0	; () banked
  4942  000D02  1BD3               	xorwf	___ftadd@f2& (0+255),f,b
  4943  000D04  0EFF               	movlw	255
  4944  000D06  0100               	movlb	0	; () banked
  4945  000D08  1BD4               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4946  000D0A  0EFF               	movlw	255
  4947  000D0C  0100               	movlb	0	; () banked
  4948  000D0E  1BD5               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4949  000D10  0E01               	movlw	1
  4950  000D12  0100               	movlb	0	; () banked
  4951  000D14  27D3               	addwf	___ftadd@f2& (0+255),f,b
  4952  000D16  0E00               	movlw	0
  4953  000D18  0100               	movlb	0	; () banked
  4954  000D1A  23D4               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4955  000D1C  0E00               	movlw	0
  4956  000D1E  0100               	movlb	0	; () banked
  4957  000D20  23D5               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4958                           
  4959                           ; BSR set to: 0
  4960  000D22  0E01               	movlw	1
  4961  000D24  0100               	movlb	0	; () banked
  4962  000D26  6FD6               	movwf	___ftadd@sign& (0+255),b
  4963  000D28                     l3094:
  4964                           
  4965                           ; BSR set to: 0
  4966  000D28  C0D3  F017         	movff	___ftadd@f2,___ftpack@arg
  4967  000D2C  C0D4  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  4968  000D30  C0D5  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  4969  000D34  C0D8  F01A         	movff	___ftadd@exp1,___ftpack@exp
  4970  000D38  C0D6  F01B         	movff	___ftadd@sign,___ftpack@sign
  4971  000D3C  ECE5  F00C         	call	___ftpack	;wreg free
  4972  000D40  C017  F0D0         	movff	?___ftpack,?___ftadd
  4973  000D44  C018  F0D1         	movff	?___ftpack+1,?___ftadd+1
  4974  000D48  C019  F0D2         	movff	?___ftpack+2,?___ftadd+2
  4975  000D4C  0012               	return	
  4976  000D4E                     __end_of___ftadd:
  4977                           	opt stack 0
  4978                           tblptru	equ	0xFF8
  4979                           tblptrh	equ	0xFF7
  4980                           tblptrl	equ	0xFF6
  4981                           tablat	equ	0xFF5
  4982                           prodh	equ	0xFF4
  4983                           prodl	equ	0xFF3
  4984                           intcon	equ	0xFF2
  4985                           intcon2	equ	0xFF1
  4986                           postinc0	equ	0xFEE
  4987                           wreg	equ	0xFE8
  4988                           postinc1	equ	0xFE6
  4989                           postdec1	equ	0xFE5
  4990                           fsr1h	equ	0xFE2
  4991                           fsr1l	equ	0xFE1
  4992                           postinc2	equ	0xFDE
  4993                           postdec2	equ	0xFDD
  4994                           fsr2h	equ	0xFDA
  4995                           fsr2l	equ	0xFD9
  4996                           status	equ	0xFD8
  4997                           
  4998 ;; *************** function ___ftpack *****************
  4999 ;; Defined at:
  5000 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;  arg             3   22[COMRAM] unsigned um
  5003 ;;  exp             1   25[COMRAM] unsigned char 
  5004 ;;  sign            1   26[COMRAM] unsigned char 
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;		None
  5007 ;; Return value:  Size  Location     Type
  5008 ;;                  3   22[COMRAM] float 
  5009 ;; Registers used:
  5010 ;;		wreg, status,2, status,0
  5011 ;; Tracked objects:
  5012 ;;		On entry : 0/0
  5013 ;;		On exit  : 0/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5016 ;;      Params:         5       0       0       0       0       0       0
  5017 ;;      Locals:         0       0       0       0       0       0       0
  5018 ;;      Temps:          3       0       0       0       0       0       0
  5019 ;;      Totals:         8       0       0       0       0       0       0
  5020 ;;Total ram usage:        8 bytes
  5021 ;; Hardware stack levels used:    1
  5022 ;; Hardware stack levels required when called:    3
  5023 ;; This function calls:
  5024 ;;		Nothing
  5025 ;; This function is called by:
  5026 ;;		___awtoft
  5027 ;;		___ftadd
  5028 ;;		___ftdiv
  5029 ;;		___ftmul
  5030 ;; This function uses a non-reentrant model
  5031 ;;
  5032                           
  5033                           	psect	text29
  5034  0019CA                     __ptext29:
  5035                           	opt stack 0
  5036  0019CA                     ___ftpack:
  5037                           	opt stack 23
  5038                           
  5039                           ;incstack = 0
  5040  0019CA  501A               	movf	___ftpack@exp,w,c
  5041  0019CC  B4D8               	btfsc	status,2,c
  5042  0019CE  D005               	goto	l2992
  5043  0019D0  5017               	movf	___ftpack@arg,w,c
  5044  0019D2  1018               	iorwf	___ftpack@arg+1,w,c
  5045  0019D4  1019               	iorwf	___ftpack@arg+2,w,c
  5046  0019D6  A4D8               	btfss	status,2,c
  5047  0019D8  D00C               	goto	l2998
  5048  0019DA                     l2992:
  5049  0019DA  0E00               	movlw	0
  5050  0019DC  6E17               	movwf	?___ftpack,c
  5051  0019DE  0E00               	movlw	0
  5052  0019E0  6E18               	movwf	?___ftpack+1,c
  5053  0019E2  0E00               	movlw	0
  5054  0019E4  6E19               	movwf	?___ftpack+2,c
  5055  0019E6  0012               	return	
  5056  0019E8                     l2996:
  5057  0019E8  2A1A               	incf	___ftpack@exp,f,c
  5058  0019EA  90D8               	bcf	status,0,c
  5059  0019EC  3219               	rrcf	___ftpack@arg+2,f,c
  5060  0019EE  3218               	rrcf	___ftpack@arg+1,f,c
  5061  0019F0  3217               	rrcf	___ftpack@arg,f,c
  5062  0019F2                     l2998:
  5063  0019F2  0E00               	movlw	0
  5064  0019F4  1417               	andwf	___ftpack@arg,w,c
  5065  0019F6  6E1C               	movwf	??___ftpack& (0+255),c
  5066  0019F8  0E00               	movlw	0
  5067  0019FA  1418               	andwf	___ftpack@arg+1,w,c
  5068  0019FC  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  5069  0019FE  0EFE               	movlw	254
  5070  001A00  1419               	andwf	___ftpack@arg+2,w,c
  5071  001A02  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  5072  001A04  501C               	movf	??___ftpack,w,c
  5073  001A06  101D               	iorwf	??___ftpack+1,w,c
  5074  001A08  101E               	iorwf	??___ftpack+2,w,c
  5075  001A0A  B4D8               	btfsc	status,2,c
  5076  001A0C  D00C               	goto	l3004
  5077  001A0E  D7EC               	goto	l2996
  5078  001A10                     l3000:
  5079  001A10  2A1A               	incf	___ftpack@exp,f,c
  5080  001A12  0E01               	movlw	1
  5081  001A14  2617               	addwf	___ftpack@arg,f,c
  5082  001A16  0E00               	movlw	0
  5083  001A18  2218               	addwfc	___ftpack@arg+1,f,c
  5084  001A1A  0E00               	movlw	0
  5085  001A1C  2219               	addwfc	___ftpack@arg+2,f,c
  5086  001A1E  90D8               	bcf	status,0,c
  5087  001A20  3219               	rrcf	___ftpack@arg+2,f,c
  5088  001A22  3218               	rrcf	___ftpack@arg+1,f,c
  5089  001A24  3217               	rrcf	___ftpack@arg,f,c
  5090  001A26                     l3004:
  5091  001A26  0E00               	movlw	0
  5092  001A28  1417               	andwf	___ftpack@arg,w,c
  5093  001A2A  6E1C               	movwf	??___ftpack& (0+255),c
  5094  001A2C  0E00               	movlw	0
  5095  001A2E  1418               	andwf	___ftpack@arg+1,w,c
  5096  001A30  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  5097  001A32  0EFF               	movlw	255
  5098  001A34  1419               	andwf	___ftpack@arg+2,w,c
  5099  001A36  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  5100  001A38  501C               	movf	??___ftpack,w,c
  5101  001A3A  101D               	iorwf	??___ftpack+1,w,c
  5102  001A3C  101E               	iorwf	??___ftpack+2,w,c
  5103  001A3E  B4D8               	btfsc	status,2,c
  5104  001A40  D006               	goto	l3008
  5105  001A42  D7E6               	goto	l3000
  5106  001A44                     l3006:
  5107  001A44  061A               	decf	___ftpack@exp,f,c
  5108  001A46  90D8               	bcf	status,0,c
  5109  001A48  3617               	rlcf	___ftpack@arg,f,c
  5110  001A4A  3618               	rlcf	___ftpack@arg+1,f,c
  5111  001A4C  3619               	rlcf	___ftpack@arg+2,f,c
  5112  001A4E                     l3008:
  5113  001A4E  AE18               	btfss	___ftpack@arg+1,7,c
  5114  001A50  D7F9               	goto	l3006
  5115  001A52  A01A               	btfss	___ftpack@exp,0,c
  5116  001A54  9E18               	bcf	___ftpack@arg+1,7,c
  5117  001A56  90D8               	bcf	status,0,c
  5118  001A58  321A               	rrcf	___ftpack@exp,f,c
  5119  001A5A  501A               	movf	___ftpack@exp,w,c
  5120  001A5C  1219               	iorwf	___ftpack@arg+2,f,c
  5121  001A5E  501B               	movf	___ftpack@sign,w,c
  5122  001A60  A4D8               	btfss	status,2,c
  5123  001A62  8E19               	bsf	___ftpack@arg+2,7,c
  5124  001A64  C017  F017         	movff	___ftpack@arg,?___ftpack
  5125  001A68  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  5126  001A6C  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  5127  001A70  0012               	return	
  5128  001A72                     __end_of___ftpack:
  5129                           	opt stack 0
  5130                           tblptru	equ	0xFF8
  5131                           tblptrh	equ	0xFF7
  5132                           tblptrl	equ	0xFF6
  5133                           tablat	equ	0xFF5
  5134                           prodh	equ	0xFF4
  5135                           prodl	equ	0xFF3
  5136                           intcon	equ	0xFF2
  5137                           intcon2	equ	0xFF1
  5138                           postinc0	equ	0xFEE
  5139                           wreg	equ	0xFE8
  5140                           postinc1	equ	0xFE6
  5141                           postdec1	equ	0xFE5
  5142                           fsr1h	equ	0xFE2
  5143                           fsr1l	equ	0xFE1
  5144                           postinc2	equ	0xFDE
  5145                           postdec2	equ	0xFDD
  5146                           fsr2h	equ	0xFDA
  5147                           fsr2l	equ	0xFD9
  5148                           status	equ	0xFD8
  5149                           
  5150 ;; *************** function _INTERRUPT_InterruptManager *****************
  5151 ;; Defined at:
  5152 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  5153 ;; Parameters:    Size  Location     Type
  5154 ;;		None
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;		None
  5157 ;; Return value:  Size  Location     Type
  5158 ;;		None               void
  5159 ;; Registers used:
  5160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5161 ;; Tracked objects:
  5162 ;;		On entry : 0/0
  5163 ;;		On exit  : 0/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5166 ;;      Params:         0       0       0       0       0       0       0
  5167 ;;      Locals:         0       0       0       0       0       0       0
  5168 ;;      Temps:         14       0       0       0       0       0       0
  5169 ;;      Totals:        14       0       0       0       0       0       0
  5170 ;;Total ram usage:       14 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:    2
  5173 ;; This function calls:
  5174 ;;		_ADC_ISR
  5175 ;;		_EUSART1_Receive_ISR
  5176 ;;		_EUSART1_Transmit_ISR
  5177 ;;		_TMR1_ISR
  5178 ;; This function is called by:
  5179 ;;		Interrupt level 2
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	intcode
  5184  000008                     __pintcode:
  5185                           	opt stack 0
  5186  000008                     _INTERRUPT_InterruptManager:
  5187                           	opt stack 23
  5188                           
  5189                           ;incstack = 0
  5190  000008  CFFA F009          	movff	pclath,??_INTERRUPT_InterruptManager
  5191  00000C  CFFB F00A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  5192  000010  CFE9 F00B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  5193  000014  CFEA F00C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  5194  000018  CFE1 F00D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  5195  00001C  CFE2 F00E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  5196  000020  CFD9 F00F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  5197  000024  CFDA F010          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  5198  000028  CFF3 F011          	movff	prodl,??_INTERRUPT_InterruptManager+8
  5199  00002C  CFF4 F012          	movff	prodh,??_INTERRUPT_InterruptManager+9
  5200  000030  CFF6 F013          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  5201  000034  CFF7 F014          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  5202  000038  CFF8 F015          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  5203  00003C  CFF5 F016          	movff	tablat,??_INTERRUPT_InterruptManager+13
  5204                           
  5205                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  5206  000040  BA9D               	btfsc	3997,5,c	;volatile
  5207  000042  AA9E               	btfss	3998,5,c	;volatile
  5208  000044  D003               	goto	i2l274
  5209                           
  5210                           ;interrupt_manager.c: 73: {
  5211                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
  5212  000046  EC22  F00F         	call	_EUSART1_Receive_ISR	;wreg free
  5213                           
  5214                           ;interrupt_manager.c: 75: }
  5215  00004A  D011               	goto	i2l282
  5216  00004C                     i2l274:
  5217                           
  5218                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  5219  00004C  BC9D               	btfsc	3997,6,c	;volatile
  5220  00004E  AC9E               	btfss	3998,6,c	;volatile
  5221  000050  D003               	goto	i2l276
  5222                           
  5223                           ;interrupt_manager.c: 77: {
  5224                           ;interrupt_manager.c: 78: ADC_ISR();
  5225  000052  EC0F  F003         	call	_ADC_ISR	;wreg free
  5226                           
  5227                           ;interrupt_manager.c: 79: }
  5228  000056  D00B               	goto	i2l282
  5229  000058                     i2l276:
  5230                           
  5231                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  5232  000058  B09D               	btfsc	3997,0,c	;volatile
  5233  00005A  A09E               	btfss	3998,0,c	;volatile
  5234  00005C  D003               	goto	i2l278
  5235                           
  5236                           ;interrupt_manager.c: 81: {
  5237                           ;interrupt_manager.c: 82: TMR1_ISR();
  5238  00005E  EC99  F00F         	call	_TMR1_ISR	;wreg free
  5239                           
  5240                           ;interrupt_manager.c: 83: }
  5241  000062  D005               	goto	i2l282
  5242  000064                     i2l278:
  5243                           
  5244                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  5245  000064  B89D               	btfsc	3997,4,c	;volatile
  5246  000066  A89E               	btfss	3998,4,c	;volatile
  5247  000068  D002               	goto	i2l282
  5248                           
  5249                           ;interrupt_manager.c: 85: {
  5250                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
  5251  00006A  EC0A  F00F         	call	_EUSART1_Transmit_ISR	;wreg free
  5252  00006E                     i2l282:
  5253  00006E  C016  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  5254  000072  C015  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  5255  000076  C014  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  5256  00007A  C013  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  5257  00007E  C012  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  5258  000082  C011  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  5259  000086  C010  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  5260  00008A  C00F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  5261  00008E  C00E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  5262  000092  C00D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  5263  000096  C00C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  5264  00009A  C00B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  5265  00009E  C00A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  5266  0000A2  C009  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  5267  0000A6  0011               	retfie		f
  5268  0000A8                     __end_of_INTERRUPT_InterruptManager:
  5269                           	opt stack 0
  5270                           pclatu	equ	0xFFB
  5271                           pclath	equ	0xFFA
  5272                           tblptru	equ	0xFF8
  5273                           tblptrh	equ	0xFF7
  5274                           tblptrl	equ	0xFF6
  5275                           tablat	equ	0xFF5
  5276                           prodh	equ	0xFF4
  5277                           prodl	equ	0xFF3
  5278                           intcon	equ	0xFF2
  5279                           intcon2	equ	0xFF1
  5280                           postinc0	equ	0xFEE
  5281                           fsr0h	equ	0xFEA
  5282                           fsr0l	equ	0xFE9
  5283                           wreg	equ	0xFE8
  5284                           postinc1	equ	0xFE6
  5285                           postdec1	equ	0xFE5
  5286                           fsr1h	equ	0xFE2
  5287                           fsr1l	equ	0xFE1
  5288                           postinc2	equ	0xFDE
  5289                           postdec2	equ	0xFDD
  5290                           fsr2h	equ	0xFDA
  5291                           fsr2l	equ	0xFD9
  5292                           status	equ	0xFD8
  5293                           
  5294 ;; *************** function _TMR1_ISR *****************
  5295 ;; Defined at:
  5296 ;;		line 109 in file "mcc_generated_files/tmr1.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;		None
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;		None
  5301 ;; Return value:  Size  Location     Type
  5302 ;;		None               void
  5303 ;; Registers used:
  5304 ;;		wreg, status,2, cstack
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5310 ;;      Params:         0       0       0       0       0       0       0
  5311 ;;      Locals:         0       0       0       0       0       0       0
  5312 ;;      Temps:          3       0       0       0       0       0       0
  5313 ;;      Totals:         3       0       0       0       0       0       0
  5314 ;;Total ram usage:        3 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:    1
  5317 ;; This function calls:
  5318 ;;		_TMR1_CallBack
  5319 ;; This function is called by:
  5320 ;;		_INTERRUPT_InterruptManager
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           	psect	text31
  5325  001F32                     __ptext31:
  5326                           	opt stack 0
  5327  001F32                     _TMR1_ISR:
  5328                           	opt stack 23
  5329                           
  5330                           ;tmr1.c: 113: PIR1bits.TMR1IF = 0;
  5331                           
  5332                           ;incstack = 0
  5333  001F32  909E               	bcf	3998,0,c	;volatile
  5334                           
  5335                           ;tmr1.c: 116: TMR1H = (timer1ReloadVal >> 8);
  5336  001F34  C047  F001         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
  5337  001F38  C001  F002         	movff	??_TMR1_ISR,??_TMR1_ISR+1
  5338  001F3C  6A03               	clrf	(??_TMR1_ISR+2)& (0+255),c
  5339  001F3E  5002               	movf	??_TMR1_ISR+1,w,c
  5340  001F40  6ECF               	movwf	4047,c	;volatile
  5341                           
  5342                           ;tmr1.c: 117: TMR1L = (uint8_t) timer1ReloadVal;
  5343  001F42  C046  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  5344                           
  5345                           ;tmr1.c: 121: TMR1_CallBack();
  5346  001F46  ECD8  F00F         	call	_TMR1_CallBack	;wreg free
  5347  001F4A  0012               	return	
  5348  001F4C                     __end_of_TMR1_ISR:
  5349                           	opt stack 0
  5350                           pclatu	equ	0xFFB
  5351                           pclath	equ	0xFFA
  5352                           tblptru	equ	0xFF8
  5353                           tblptrh	equ	0xFF7
  5354                           tblptrl	equ	0xFF6
  5355                           tablat	equ	0xFF5
  5356                           prodh	equ	0xFF4
  5357                           prodl	equ	0xFF3
  5358                           intcon	equ	0xFF2
  5359                           intcon2	equ	0xFF1
  5360                           postinc0	equ	0xFEE
  5361                           fsr0h	equ	0xFEA
  5362                           fsr0l	equ	0xFE9
  5363                           wreg	equ	0xFE8
  5364                           postinc1	equ	0xFE6
  5365                           postdec1	equ	0xFE5
  5366                           fsr1h	equ	0xFE2
  5367                           fsr1l	equ	0xFE1
  5368                           postinc2	equ	0xFDE
  5369                           postdec2	equ	0xFDD
  5370                           fsr2h	equ	0xFDA
  5371                           fsr2l	equ	0xFD9
  5372                           status	equ	0xFD8
  5373                           
  5374 ;; *************** function _TMR1_CallBack *****************
  5375 ;; Defined at:
  5376 ;;		line 125 in file "mcc_generated_files/tmr1.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;		None
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;		None
  5381 ;; Return value:  Size  Location     Type
  5382 ;;		None               void
  5383 ;; Registers used:
  5384 ;;		None
  5385 ;; Tracked objects:
  5386 ;;		On entry : 0/0
  5387 ;;		On exit  : 0/0
  5388 ;;		Unchanged: 0/0
  5389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5390 ;;      Params:         0       0       0       0       0       0       0
  5391 ;;      Locals:         0       0       0       0       0       0       0
  5392 ;;      Temps:          0       0       0       0       0       0       0
  5393 ;;      Totals:         0       0       0       0       0       0       0
  5394 ;;Total ram usage:        0 bytes
  5395 ;; Hardware stack levels used:    1
  5396 ;; This function calls:
  5397 ;;		Nothing
  5398 ;; This function is called by:
  5399 ;;		_TMR1_ISR
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text32
  5404  001FB0                     __ptext32:
  5405                           	opt stack 0
  5406  001FB0                     _TMR1_CallBack:
  5407                           	opt stack 23
  5408                           
  5409                           ;incstack = 0
  5410                           ;tmr1.c: 128: do { LATA4 = ~LATA4; } while(0);
  5411  001FB0  7889               	btg	3977,4,c	;volatile
  5412  001FB2  0012               	return	
  5413  001FB4                     __end_of_TMR1_CallBack:
  5414                           	opt stack 0
  5415                           pclatu	equ	0xFFB
  5416                           pclath	equ	0xFFA
  5417                           tblptru	equ	0xFF8
  5418                           tblptrh	equ	0xFF7
  5419                           tblptrl	equ	0xFF6
  5420                           tablat	equ	0xFF5
  5421                           prodh	equ	0xFF4
  5422                           prodl	equ	0xFF3
  5423                           intcon	equ	0xFF2
  5424                           intcon2	equ	0xFF1
  5425                           postinc0	equ	0xFEE
  5426                           fsr0h	equ	0xFEA
  5427                           fsr0l	equ	0xFE9
  5428                           wreg	equ	0xFE8
  5429                           postinc1	equ	0xFE6
  5430                           postdec1	equ	0xFE5
  5431                           fsr1h	equ	0xFE2
  5432                           fsr1l	equ	0xFE1
  5433                           postinc2	equ	0xFDE
  5434                           postdec2	equ	0xFDD
  5435                           fsr2h	equ	0xFDA
  5436                           fsr2l	equ	0xFD9
  5437                           status	equ	0xFD8
  5438                           
  5439 ;; *************** function _EUSART1_Transmit_ISR *****************
  5440 ;; Defined at:
  5441 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;		None
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;		None
  5446 ;; Return value:  Size  Location     Type
  5447 ;;		None               void
  5448 ;; Registers used:
  5449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5455 ;;      Params:         0       0       0       0       0       0       0
  5456 ;;      Locals:         0       0       0       0       0       0       0
  5457 ;;      Temps:          0       0       0       0       0       0       0
  5458 ;;      Totals:         0       0       0       0       0       0       0
  5459 ;;Total ram usage:        0 bytes
  5460 ;; Hardware stack levels used:    1
  5461 ;; This function calls:
  5462 ;;		Nothing
  5463 ;; This function is called by:
  5464 ;;		_INTERRUPT_InterruptManager
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           	psect	text33
  5469  001E14                     __ptext33:
  5470                           	opt stack 0
  5471  001E14                     _EUSART1_Transmit_ISR:
  5472                           	opt stack 24
  5473                           
  5474                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  5475                           
  5476                           ;incstack = 0
  5477  001E14  0E08               	movlw	8
  5478  001E16  5C48               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
  5479  001E18  B0D8               	btfsc	status,0,c
  5480  001E1A  D012               	goto	i2l126
  5481                           
  5482                           ;eusart1.c: 178: {
  5483                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
  5484  001E1C  5045               	movf	_eusart1TxTail,w,c
  5485  001E1E  0D01               	mullw	1
  5486  001E20  0E35               	movlw	low _eusart1TxBuffer
  5487  001E22  24F3               	addwf	prodl,w,c
  5488  001E24  6ED9               	movwf	fsr2l,c
  5489  001E26  0E00               	movlw	high _eusart1TxBuffer
  5490  001E28  20F4               	addwfc	prodh,w,c
  5491  001E2A  6EDA               	movwf	fsr2h,c
  5492  001E2C  50DF               	movf	indf2,w,c
  5493  001E2E  6EAD               	movwf	4013,c	;volatile
  5494  001E30  2A45               	incf	_eusart1TxTail,f,c
  5495                           
  5496                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  5497  001E32  0E07               	movlw	7
  5498  001E34  6445               	cpfsgt	_eusart1TxTail,c
  5499  001E36  D002               	goto	i2l1710
  5500                           
  5501                           ;eusart1.c: 181: {
  5502                           ;eusart1.c: 182: eusart1TxTail = 0;
  5503  001E38  0E00               	movlw	0
  5504  001E3A  6E45               	movwf	_eusart1TxTail,c
  5505  001E3C                     i2l1710:
  5506                           
  5507                           ;eusart1.c: 183: }
  5508                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
  5509  001E3C  2A48               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  5510                           
  5511                           ;eusart1.c: 185: }
  5512  001E3E  0012               	return	
  5513  001E40                     i2l126:
  5514                           
  5515                           ;eusart1.c: 186: else
  5516                           ;eusart1.c: 187: {
  5517                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
  5518  001E40  989D               	bcf	3997,4,c	;volatile
  5519  001E42  0012               	return	
  5520  001E44                     __end_of_EUSART1_Transmit_ISR:
  5521                           	opt stack 0
  5522                           pclatu	equ	0xFFB
  5523                           pclath	equ	0xFFA
  5524                           tblptru	equ	0xFF8
  5525                           tblptrh	equ	0xFF7
  5526                           tblptrl	equ	0xFF6
  5527                           tablat	equ	0xFF5
  5528                           prodh	equ	0xFF4
  5529                           prodl	equ	0xFF3
  5530                           intcon	equ	0xFF2
  5531                           intcon2	equ	0xFF1
  5532                           postinc0	equ	0xFEE
  5533                           fsr0h	equ	0xFEA
  5534                           fsr0l	equ	0xFE9
  5535                           wreg	equ	0xFE8
  5536                           postinc1	equ	0xFE6
  5537                           postdec1	equ	0xFE5
  5538                           fsr1h	equ	0xFE2
  5539                           fsr1l	equ	0xFE1
  5540                           indf2	equ	0xFDF
  5541                           postinc2	equ	0xFDE
  5542                           postdec2	equ	0xFDD
  5543                           fsr2h	equ	0xFDA
  5544                           fsr2l	equ	0xFD9
  5545                           status	equ	0xFD8
  5546                           
  5547 ;; *************** function _EUSART1_Receive_ISR *****************
  5548 ;; Defined at:
  5549 ;;		line 192 in file "mcc_generated_files/eusart1.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;		None
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;		None
  5554 ;; Return value:  Size  Location     Type
  5555 ;;		None               void
  5556 ;; Registers used:
  5557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5563 ;;      Params:         0       0       0       0       0       0       0
  5564 ;;      Locals:         0       0       0       0       0       0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0
  5566 ;;      Totals:         0       0       0       0       0       0       0
  5567 ;;Total ram usage:        0 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; This function calls:
  5570 ;;		Nothing
  5571 ;; This function is called by:
  5572 ;;		_INTERRUPT_InterruptManager
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           	psect	text34
  5577  001E44                     __ptext34:
  5578                           	opt stack 0
  5579  001E44                     _EUSART1_Receive_ISR:
  5580                           	opt stack 24
  5581                           
  5582                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
  5583                           
  5584                           ;incstack = 0
  5585  001E44  A2AB               	btfss	4011,1,c	;volatile
  5586  001E46  D002               	goto	i2l2620
  5587                           
  5588                           ;eusart1.c: 195: {
  5589                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
  5590  001E48  98AB               	bcf	4011,4,c	;volatile
  5591                           
  5592                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
  5593  001E4A  88AB               	bsf	4011,4,c	;volatile
  5594  001E4C                     i2l2620:
  5595                           
  5596                           ;eusart1.c: 200: }
  5597                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
  5598  001E4C  5042               	movf	_eusart1RxHead,w,c
  5599  001E4E  0D01               	mullw	1
  5600  001E50  0101               	movlb	1	; () banked
  5601  001E52  0E00               	movlw	low _eusart1RxBuffer
  5602  001E54  24F3               	addwf	prodl,w,c
  5603  001E56  6ED9               	movwf	fsr2l,c
  5604  001E58  0101               	movlb	1	; () banked
  5605  001E5A  0E01               	movlw	high _eusart1RxBuffer
  5606  001E5C  20F4               	addwfc	prodh,w,c
  5607  001E5E  6EDA               	movwf	fsr2h,c
  5608  001E60  CFAE FFDF          	movff	4014,indf2	;volatile
  5609                           
  5610                           ; BSR set to: 1
  5611  001E64  2A42               	incf	_eusart1RxHead,f,c
  5612                           
  5613                           ; BSR set to: 1
  5614                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  5615  001E66  0E31               	movlw	49
  5616  001E68  6442               	cpfsgt	_eusart1RxHead,c
  5617  001E6A  D002               	goto	i2l2628
  5618                           
  5619                           ; BSR set to: 1
  5620                           ;eusart1.c: 205: {
  5621                           ;eusart1.c: 206: eusart1RxHead = 0;
  5622  001E6C  0E00               	movlw	0
  5623  001E6E  6E42               	movwf	_eusart1RxHead,c
  5624  001E70                     i2l2628:
  5625                           
  5626                           ; BSR set to: 1
  5627                           ;eusart1.c: 207: }
  5628                           ;eusart1.c: 208: eusart1RxCount++;
  5629  001E70  2A41               	incf	_eusart1RxCount,f,c	;volatile
  5630                           
  5631                           ; BSR set to: 1
  5632  001E72  0012               	return	
  5633  001E74                     __end_of_EUSART1_Receive_ISR:
  5634                           	opt stack 0
  5635                           pclatu	equ	0xFFB
  5636                           pclath	equ	0xFFA
  5637                           tblptru	equ	0xFF8
  5638                           tblptrh	equ	0xFF7
  5639                           tblptrl	equ	0xFF6
  5640                           tablat	equ	0xFF5
  5641                           prodh	equ	0xFF4
  5642                           prodl	equ	0xFF3
  5643                           intcon	equ	0xFF2
  5644                           intcon2	equ	0xFF1
  5645                           postinc0	equ	0xFEE
  5646                           fsr0h	equ	0xFEA
  5647                           fsr0l	equ	0xFE9
  5648                           wreg	equ	0xFE8
  5649                           postinc1	equ	0xFE6
  5650                           postdec1	equ	0xFE5
  5651                           fsr1h	equ	0xFE2
  5652                           fsr1l	equ	0xFE1
  5653                           indf2	equ	0xFDF
  5654                           postinc2	equ	0xFDE
  5655                           postdec2	equ	0xFDD
  5656                           fsr2h	equ	0xFDA
  5657                           fsr2l	equ	0xFD9
  5658                           status	equ	0xFD8
  5659                           
  5660 ;; *************** function _ADC_ISR *****************
  5661 ;; Defined at:
  5662 ;;		line 82 in file "mcc_generated_files/adc.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;		None
  5665 ;; Auto vars:     Size  Location     Type
  5666 ;;  ADC_Result      2    6[COMRAM] int 
  5667 ;; Return value:  Size  Location     Type
  5668 ;;		None               void
  5669 ;; Registers used:
  5670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5671 ;; Tracked objects:
  5672 ;;		On entry : 0/0
  5673 ;;		On exit  : 0/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5676 ;;      Params:         0       0       0       0       0       0       0
  5677 ;;      Locals:         2       0       0       0       0       0       0
  5678 ;;      Temps:          2       0       0       0       0       0       0
  5679 ;;      Totals:         4       0       0       0       0       0       0
  5680 ;;Total ram usage:        4 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    1
  5683 ;; This function calls:
  5684 ;;		_ADC_GetConversionResult
  5685 ;;		_ADC_StartConversion
  5686 ;;		_Set_4051
  5687 ;; This function is called by:
  5688 ;;		_INTERRUPT_InterruptManager
  5689 ;; This function uses a non-reentrant model
  5690 ;;
  5691                           
  5692                           	psect	text35
  5693  00061E                     __ptext35:
  5694                           	opt stack 0
  5695  00061E                     _ADC_ISR:
  5696                           	opt stack 23
  5697                           
  5698                           ;adc.c: 85: PIR1bits.ADIF = 0;
  5699                           
  5700                           ; BSR set to: 1
  5701                           ;incstack = 0
  5702  00061E  9C9E               	bcf	3998,6,c	;volatile
  5703                           
  5704                           ;adc.c: 86: int ADC_Result = 0;
  5705  000620  0E00               	movlw	0
  5706  000622  6E08               	movwf	ADC_ISR@ADC_Result+1,c
  5707  000624  0E00               	movlw	0
  5708  000626  6E07               	movwf	ADC_ISR@ADC_Result,c
  5709                           
  5710                           ;adc.c: 87: if (Temp_Aquire){
  5711  000628  503F               	movf	_Temp_Aquire,w,c
  5712  00062A  B4D8               	btfsc	status,2,c
  5713  00062C  D14A               	goto	i2l2704
  5714                           
  5715                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
  5716  00062E  ECBF  F00F         	call	_ADC_GetConversionResult	;wreg free
  5717  000632  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  5718  000636  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  5719                           
  5720                           ;adc.c: 90: switch ( ADC_Buffer_Point )
  5721  00063A  D117               	goto	i2l2700
  5722  00063C                     i2l2636:
  5723                           
  5724                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5725  00063C  0EB6               	movlw	low _Temp_Adc
  5726  00063E  6E05               	movwf	??_ADC_ISR& (0+255),c
  5727  000640  0E00               	movlw	high _Temp_Adc
  5728  000642  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5729  000644  90D8               	bcf	status,0,c
  5730  000646  343D               	rlcf	_ADC_Buffer_Point,w,c
  5731  000648  6ED9               	movwf	fsr2l,c
  5732  00064A  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5733  00064C  6EDA               	movwf	fsr2h,c
  5734  00064E  5005               	movf	??_ADC_ISR,w,c
  5735  000650  26D9               	addwf	fsr2l,f,c
  5736  000652  5006               	movf	??_ADC_ISR+1,w,c
  5737  000654  22DA               	addwfc	fsr2h,f,c
  5738  000656  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5739  00065A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5740                           
  5741                           ;adc.c: 94: Set_4051(0);
  5742  00065E  0E00               	movlw	0
  5743  000660  6E02               	movwf	Set_4051@Channel+1,c
  5744  000662  0E00               	movlw	0
  5745  000664  6E01               	movwf	Set_4051@Channel,c
  5746  000666  EC51  F00F         	call	_Set_4051	;wreg free
  5747                           
  5748                           ;adc.c: 95: ADC_StartConversion(Temp1);
  5749  00066A  0E0E               	movlw	14
  5750  00066C  ECA6  F00F         	call	_ADC_StartConversion
  5751                           
  5752                           ;adc.c: 96: break;
  5753  000670  D126               	goto	i2l2702
  5754  000672                     i2l2642:
  5755                           
  5756                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5757  000672  0EB6               	movlw	low _Temp_Adc
  5758  000674  6E05               	movwf	??_ADC_ISR& (0+255),c
  5759  000676  0E00               	movlw	high _Temp_Adc
  5760  000678  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5761  00067A  90D8               	bcf	status,0,c
  5762  00067C  343D               	rlcf	_ADC_Buffer_Point,w,c
  5763  00067E  6ED9               	movwf	fsr2l,c
  5764  000680  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5765  000682  6EDA               	movwf	fsr2h,c
  5766  000684  5005               	movf	??_ADC_ISR,w,c
  5767  000686  26D9               	addwf	fsr2l,f,c
  5768  000688  5006               	movf	??_ADC_ISR+1,w,c
  5769  00068A  22DA               	addwfc	fsr2h,f,c
  5770  00068C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5771  000690  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5772                           
  5773                           ;adc.c: 99: Set_4051(1);
  5774  000694  0E00               	movlw	0
  5775  000696  6E02               	movwf	Set_4051@Channel+1,c
  5776  000698  0E01               	movlw	1
  5777  00069A  6E01               	movwf	Set_4051@Channel,c
  5778  00069C  EC51  F00F         	call	_Set_4051	;wreg free
  5779                           
  5780                           ;adc.c: 100: ADC_StartConversion(Temp1);
  5781  0006A0  0E0E               	movlw	14
  5782  0006A2  ECA6  F00F         	call	_ADC_StartConversion
  5783                           
  5784                           ;adc.c: 101: break;
  5785  0006A6  D10B               	goto	i2l2702
  5786  0006A8                     i2l2648:
  5787                           
  5788                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5789  0006A8  0EB6               	movlw	low _Temp_Adc
  5790  0006AA  6E05               	movwf	??_ADC_ISR& (0+255),c
  5791  0006AC  0E00               	movlw	high _Temp_Adc
  5792  0006AE  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5793  0006B0  90D8               	bcf	status,0,c
  5794  0006B2  343D               	rlcf	_ADC_Buffer_Point,w,c
  5795  0006B4  6ED9               	movwf	fsr2l,c
  5796  0006B6  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5797  0006B8  6EDA               	movwf	fsr2h,c
  5798  0006BA  5005               	movf	??_ADC_ISR,w,c
  5799  0006BC  26D9               	addwf	fsr2l,f,c
  5800  0006BE  5006               	movf	??_ADC_ISR+1,w,c
  5801  0006C0  22DA               	addwfc	fsr2h,f,c
  5802  0006C2  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5803  0006C6  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5804                           
  5805                           ;adc.c: 104: Set_4051(2);
  5806  0006CA  0E00               	movlw	0
  5807  0006CC  6E02               	movwf	Set_4051@Channel+1,c
  5808  0006CE  0E02               	movlw	2
  5809  0006D0  6E01               	movwf	Set_4051@Channel,c
  5810  0006D2  EC51  F00F         	call	_Set_4051	;wreg free
  5811                           
  5812                           ;adc.c: 105: ADC_StartConversion(Temp1);
  5813  0006D6  0E0E               	movlw	14
  5814  0006D8  ECA6  F00F         	call	_ADC_StartConversion
  5815                           
  5816                           ;adc.c: 106: break;
  5817  0006DC  D0F0               	goto	i2l2702
  5818  0006DE                     i2l2654:
  5819                           
  5820                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5821  0006DE  0EB6               	movlw	low _Temp_Adc
  5822  0006E0  6E05               	movwf	??_ADC_ISR& (0+255),c
  5823  0006E2  0E00               	movlw	high _Temp_Adc
  5824  0006E4  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5825  0006E6  90D8               	bcf	status,0,c
  5826  0006E8  343D               	rlcf	_ADC_Buffer_Point,w,c
  5827  0006EA  6ED9               	movwf	fsr2l,c
  5828  0006EC  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5829  0006EE  6EDA               	movwf	fsr2h,c
  5830  0006F0  5005               	movf	??_ADC_ISR,w,c
  5831  0006F2  26D9               	addwf	fsr2l,f,c
  5832  0006F4  5006               	movf	??_ADC_ISR+1,w,c
  5833  0006F6  22DA               	addwfc	fsr2h,f,c
  5834  0006F8  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5835  0006FC  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5836                           
  5837                           ;adc.c: 109: Set_4051(3);
  5838  000700  0E00               	movlw	0
  5839  000702  6E02               	movwf	Set_4051@Channel+1,c
  5840  000704  0E03               	movlw	3
  5841  000706  6E01               	movwf	Set_4051@Channel,c
  5842  000708  EC51  F00F         	call	_Set_4051	;wreg free
  5843                           
  5844                           ;adc.c: 110: ADC_StartConversion(Temp1);
  5845  00070C  0E0E               	movlw	14
  5846  00070E  ECA6  F00F         	call	_ADC_StartConversion
  5847                           
  5848                           ;adc.c: 111: break;
  5849  000712  D0D5               	goto	i2l2702
  5850  000714                     i2l2660:
  5851                           
  5852                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5853  000714  0EB6               	movlw	low _Temp_Adc
  5854  000716  6E05               	movwf	??_ADC_ISR& (0+255),c
  5855  000718  0E00               	movlw	high _Temp_Adc
  5856  00071A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5857  00071C  90D8               	bcf	status,0,c
  5858  00071E  343D               	rlcf	_ADC_Buffer_Point,w,c
  5859  000720  6ED9               	movwf	fsr2l,c
  5860  000722  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5861  000724  6EDA               	movwf	fsr2h,c
  5862  000726  5005               	movf	??_ADC_ISR,w,c
  5863  000728  26D9               	addwf	fsr2l,f,c
  5864  00072A  5006               	movf	??_ADC_ISR+1,w,c
  5865  00072C  22DA               	addwfc	fsr2h,f,c
  5866  00072E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5867  000732  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5868                           
  5869                           ;adc.c: 114: Set_4051(4);
  5870  000736  0E00               	movlw	0
  5871  000738  6E02               	movwf	Set_4051@Channel+1,c
  5872  00073A  0E04               	movlw	4
  5873  00073C  6E01               	movwf	Set_4051@Channel,c
  5874  00073E  EC51  F00F         	call	_Set_4051	;wreg free
  5875                           
  5876                           ;adc.c: 115: ADC_StartConversion(Temp1);
  5877  000742  0E0E               	movlw	14
  5878  000744  ECA6  F00F         	call	_ADC_StartConversion
  5879                           
  5880                           ;adc.c: 116: break;
  5881  000748  D0BA               	goto	i2l2702
  5882  00074A                     i2l2666:
  5883                           
  5884                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5885  00074A  0EB6               	movlw	low _Temp_Adc
  5886  00074C  6E05               	movwf	??_ADC_ISR& (0+255),c
  5887  00074E  0E00               	movlw	high _Temp_Adc
  5888  000750  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5889  000752  90D8               	bcf	status,0,c
  5890  000754  343D               	rlcf	_ADC_Buffer_Point,w,c
  5891  000756  6ED9               	movwf	fsr2l,c
  5892  000758  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5893  00075A  6EDA               	movwf	fsr2h,c
  5894  00075C  5005               	movf	??_ADC_ISR,w,c
  5895  00075E  26D9               	addwf	fsr2l,f,c
  5896  000760  5006               	movf	??_ADC_ISR+1,w,c
  5897  000762  22DA               	addwfc	fsr2h,f,c
  5898  000764  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5899  000768  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5900                           
  5901                           ;adc.c: 119: Set_4051(5);
  5902  00076C  0E00               	movlw	0
  5903  00076E  6E02               	movwf	Set_4051@Channel+1,c
  5904  000770  0E05               	movlw	5
  5905  000772  6E01               	movwf	Set_4051@Channel,c
  5906  000774  EC51  F00F         	call	_Set_4051	;wreg free
  5907                           
  5908                           ;adc.c: 120: ADC_StartConversion(Temp1);
  5909  000778  0E0E               	movlw	14
  5910  00077A  ECA6  F00F         	call	_ADC_StartConversion
  5911                           
  5912                           ;adc.c: 121: break;
  5913  00077E  D09F               	goto	i2l2702
  5914  000780                     i2l2672:
  5915                           
  5916                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5917  000780  0EB6               	movlw	low _Temp_Adc
  5918  000782  6E05               	movwf	??_ADC_ISR& (0+255),c
  5919  000784  0E00               	movlw	high _Temp_Adc
  5920  000786  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5921  000788  90D8               	bcf	status,0,c
  5922  00078A  343D               	rlcf	_ADC_Buffer_Point,w,c
  5923  00078C  6ED9               	movwf	fsr2l,c
  5924  00078E  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5925  000790  6EDA               	movwf	fsr2h,c
  5926  000792  5005               	movf	??_ADC_ISR,w,c
  5927  000794  26D9               	addwf	fsr2l,f,c
  5928  000796  5006               	movf	??_ADC_ISR+1,w,c
  5929  000798  22DA               	addwfc	fsr2h,f,c
  5930  00079A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5931  00079E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5932                           
  5933                           ;adc.c: 124: Set_4051(6);
  5934  0007A2  0E00               	movlw	0
  5935  0007A4  6E02               	movwf	Set_4051@Channel+1,c
  5936  0007A6  0E06               	movlw	6
  5937  0007A8  6E01               	movwf	Set_4051@Channel,c
  5938  0007AA  EC51  F00F         	call	_Set_4051	;wreg free
  5939                           
  5940                           ;adc.c: 125: ADC_StartConversion(Temp1);
  5941  0007AE  0E0E               	movlw	14
  5942  0007B0  ECA6  F00F         	call	_ADC_StartConversion
  5943                           
  5944                           ;adc.c: 126: break;
  5945  0007B4  D084               	goto	i2l2702
  5946  0007B6                     i2l2678:
  5947                           
  5948                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5949  0007B6  0EB6               	movlw	low _Temp_Adc
  5950  0007B8  6E05               	movwf	??_ADC_ISR& (0+255),c
  5951  0007BA  0E00               	movlw	high _Temp_Adc
  5952  0007BC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5953  0007BE  90D8               	bcf	status,0,c
  5954  0007C0  343D               	rlcf	_ADC_Buffer_Point,w,c
  5955  0007C2  6ED9               	movwf	fsr2l,c
  5956  0007C4  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5957  0007C6  6EDA               	movwf	fsr2h,c
  5958  0007C8  5005               	movf	??_ADC_ISR,w,c
  5959  0007CA  26D9               	addwf	fsr2l,f,c
  5960  0007CC  5006               	movf	??_ADC_ISR+1,w,c
  5961  0007CE  22DA               	addwfc	fsr2h,f,c
  5962  0007D0  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5963  0007D4  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5964                           
  5965                           ;adc.c: 129: Set_4051(7);
  5966  0007D8  0E00               	movlw	0
  5967  0007DA  6E02               	movwf	Set_4051@Channel+1,c
  5968  0007DC  0E07               	movlw	7
  5969  0007DE  6E01               	movwf	Set_4051@Channel,c
  5970  0007E0  EC51  F00F         	call	_Set_4051	;wreg free
  5971                           
  5972                           ;adc.c: 130: ADC_StartConversion(Temp1);
  5973  0007E4  0E0E               	movlw	14
  5974  0007E6  ECA6  F00F         	call	_ADC_StartConversion
  5975                           
  5976                           ;adc.c: 131: break;
  5977  0007EA  D069               	goto	i2l2702
  5978  0007EC                     i2l2684:
  5979                           
  5980                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5981  0007EC  0EB6               	movlw	low _Temp_Adc
  5982  0007EE  6E05               	movwf	??_ADC_ISR& (0+255),c
  5983  0007F0  0E00               	movlw	high _Temp_Adc
  5984  0007F2  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5985  0007F4  90D8               	bcf	status,0,c
  5986  0007F6  343D               	rlcf	_ADC_Buffer_Point,w,c
  5987  0007F8  6ED9               	movwf	fsr2l,c
  5988  0007FA  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5989  0007FC  6EDA               	movwf	fsr2h,c
  5990  0007FE  5005               	movf	??_ADC_ISR,w,c
  5991  000800  26D9               	addwf	fsr2l,f,c
  5992  000802  5006               	movf	??_ADC_ISR+1,w,c
  5993  000804  22DA               	addwfc	fsr2h,f,c
  5994  000806  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5995  00080A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5996                           
  5997                           ;adc.c: 134: Set_4051(0);
  5998  00080E  0E00               	movlw	0
  5999  000810  6E02               	movwf	Set_4051@Channel+1,c
  6000  000812  0E00               	movlw	0
  6001  000814  6E01               	movwf	Set_4051@Channel,c
  6002  000816  EC51  F00F         	call	_Set_4051	;wreg free
  6003                           
  6004                           ;adc.c: 135: ADC_StartConversion(Temp2);
  6005  00081A  0E14               	movlw	20
  6006  00081C  ECA6  F00F         	call	_ADC_StartConversion
  6007                           
  6008                           ;adc.c: 136: break;
  6009  000820  D04E               	goto	i2l2702
  6010  000822                     i2l2690:
  6011                           
  6012                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6013  000822  0EB6               	movlw	low _Temp_Adc
  6014  000824  6E05               	movwf	??_ADC_ISR& (0+255),c
  6015  000826  0E00               	movlw	high _Temp_Adc
  6016  000828  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6017  00082A  90D8               	bcf	status,0,c
  6018  00082C  343D               	rlcf	_ADC_Buffer_Point,w,c
  6019  00082E  6ED9               	movwf	fsr2l,c
  6020  000830  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6021  000832  6EDA               	movwf	fsr2h,c
  6022  000834  5005               	movf	??_ADC_ISR,w,c
  6023  000836  26D9               	addwf	fsr2l,f,c
  6024  000838  5006               	movf	??_ADC_ISR+1,w,c
  6025  00083A  22DA               	addwfc	fsr2h,f,c
  6026  00083C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6027  000840  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6028                           
  6029                           ;adc.c: 139: Set_4051(1);
  6030  000844  0E00               	movlw	0
  6031  000846  6E02               	movwf	Set_4051@Channel+1,c
  6032  000848  0E01               	movlw	1
  6033  00084A  6E01               	movwf	Set_4051@Channel,c
  6034  00084C  EC51  F00F         	call	_Set_4051	;wreg free
  6035                           
  6036                           ;adc.c: 140: ADC_StartConversion(Temp2);
  6037  000850  0E14               	movlw	20
  6038  000852  ECA6  F00F         	call	_ADC_StartConversion
  6039                           
  6040                           ;adc.c: 141: break;
  6041  000856  D033               	goto	i2l2702
  6042  000858                     i2l2696:
  6043                           
  6044                           ;adc.c: 143: Temp_Aquire = 0;
  6045  000858  0E00               	movlw	0
  6046  00085A  6E3F               	movwf	_Temp_Aquire,c
  6047                           
  6048                           ;adc.c: 144: Temp_Done = 1;
  6049  00085C  0E00               	movlw	0
  6050  00085E  0100               	movlb	0	; () banked
  6051  000860  6FB1               	movwf	(_Temp_Done+1)& (0+255),b
  6052  000862  0E01               	movlw	1
  6053  000864  0100               	movlb	0	; () banked
  6054  000866  6FB0               	movwf	_Temp_Done& (0+255),b
  6055                           
  6056                           ;adc.c: 145: break;
  6057  000868  D02A               	goto	i2l2702
  6058  00086A                     i2l2700:
  6059  00086A  C03D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  6060  00086E  C03E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  6061                           
  6062                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6063                           ; Switch size 1, requested type "space"
  6064                           ; Number of cases is 1, Range of values is 0 to 0
  6065                           ; switch strategies available:
  6066                           ; Name         Instructions Cycles
  6067                           ; simple_byte            4     3 (average)
  6068                           ;	Chosen strategy is simple_byte
  6069  000872  5006               	movf	??_ADC_ISR+1,w,c
  6070  000874  0A00               	xorlw	0	; case 0
  6071  000876  A4D8               	btfss	status,2,c
  6072  000878  D022               	goto	i2l2702
  6073                           
  6074                           ; Switch size 1, requested type "space"
  6075                           ; Number of cases is 11, Range of values is 0 to 10
  6076                           ; switch strategies available:
  6077                           ; Name         Instructions Cycles
  6078                           ; simple_byte           34    18 (average)
  6079                           ;	Chosen strategy is simple_byte
  6080  00087A  5005               	movf	??_ADC_ISR,w,c
  6081  00087C  0A00               	xorlw	0	; case 0
  6082  00087E  B4D8               	btfsc	status,2,c
  6083  000880  D6DD               	goto	i2l2636
  6084  000882  0A01               	xorlw	1	; case 1
  6085  000884  B4D8               	btfsc	status,2,c
  6086  000886  D6F5               	goto	i2l2642
  6087  000888  0A03               	xorlw	3	; case 2
  6088  00088A  B4D8               	btfsc	status,2,c
  6089  00088C  D70D               	goto	i2l2648
  6090  00088E  0A01               	xorlw	1	; case 3
  6091  000890  B4D8               	btfsc	status,2,c
  6092  000892  D725               	goto	i2l2654
  6093  000894  0A07               	xorlw	7	; case 4
  6094  000896  B4D8               	btfsc	status,2,c
  6095  000898  D73D               	goto	i2l2660
  6096  00089A  0A01               	xorlw	1	; case 5
  6097  00089C  B4D8               	btfsc	status,2,c
  6098  00089E  D755               	goto	i2l2666
  6099  0008A0  0A03               	xorlw	3	; case 6
  6100  0008A2  B4D8               	btfsc	status,2,c
  6101  0008A4  D76D               	goto	i2l2672
  6102  0008A6  0A01               	xorlw	1	; case 7
  6103  0008A8  B4D8               	btfsc	status,2,c
  6104  0008AA  D785               	goto	i2l2678
  6105  0008AC  0A0F               	xorlw	15	; case 8
  6106  0008AE  B4D8               	btfsc	status,2,c
  6107  0008B0  D79D               	goto	i2l2684
  6108  0008B2  0A01               	xorlw	1	; case 9
  6109  0008B4  B4D8               	btfsc	status,2,c
  6110  0008B6  D7B5               	goto	i2l2690
  6111  0008B8  0A03               	xorlw	3	; case 10
  6112  0008BA  B4D8               	btfsc	status,2,c
  6113  0008BC  D7CD               	goto	i2l2696
  6114  0008BE                     i2l2702:
  6115                           
  6116                           ;adc.c: 147: ADC_Buffer_Point++;
  6117  0008BE  4A3D               	infsnz	_ADC_Buffer_Point,f,c
  6118  0008C0  2A3E               	incf	_ADC_Buffer_Point+1,f,c
  6119  0008C2                     i2l2704:
  6120                           
  6121                           ;adc.c: 148: }
  6122                           ;adc.c: 149: if (Volt_Aquire){
  6123  0008C2  5040               	movf	_Volt_Aquire,w,c
  6124  0008C4  B4D8               	btfsc	status,2,c
  6125  0008C6  0012               	return	
  6126                           
  6127                           ;adc.c: 151: ADC_Result = ADC_GetConversionResult();
  6128  0008C8  ECBF  F00F         	call	_ADC_GetConversionResult	;wreg free
  6129  0008CC  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  6130  0008D0  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  6131                           
  6132                           ;adc.c: 152: switch ( ADC_Buffer_Point )
  6133  0008D4  D0DB               	goto	i2l2752
  6134  0008D6                     i2l2708:
  6135                           
  6136                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6137  0008D6  0E9C               	movlw	low _Battery_Adc
  6138  0008D8  6E05               	movwf	??_ADC_ISR& (0+255),c
  6139  0008DA  0E00               	movlw	high _Battery_Adc
  6140  0008DC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6141  0008DE  90D8               	bcf	status,0,c
  6142  0008E0  343D               	rlcf	_ADC_Buffer_Point,w,c
  6143  0008E2  6ED9               	movwf	fsr2l,c
  6144  0008E4  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6145  0008E6  6EDA               	movwf	fsr2h,c
  6146  0008E8  5005               	movf	??_ADC_ISR,w,c
  6147  0008EA  26D9               	addwf	fsr2l,f,c
  6148  0008EC  5006               	movf	??_ADC_ISR+1,w,c
  6149  0008EE  22DA               	addwfc	fsr2h,f,c
  6150  0008F0  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6151  0008F4  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6152                           
  6153                           ;adc.c: 156: ADC_StartConversion(Battery1);
  6154  0008F8  0E01               	movlw	1
  6155  0008FA  ECA6  F00F         	call	_ADC_StartConversion
  6156                           
  6157                           ;adc.c: 157: break;
  6158  0008FE  D0F0               	goto	i2l2754
  6159  000900                     i2l2712:
  6160                           
  6161                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6162  000900  0E9C               	movlw	low _Battery_Adc
  6163  000902  6E05               	movwf	??_ADC_ISR& (0+255),c
  6164  000904  0E00               	movlw	high _Battery_Adc
  6165  000906  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6166  000908  90D8               	bcf	status,0,c
  6167  00090A  343D               	rlcf	_ADC_Buffer_Point,w,c
  6168  00090C  6ED9               	movwf	fsr2l,c
  6169  00090E  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6170  000910  6EDA               	movwf	fsr2h,c
  6171  000912  5005               	movf	??_ADC_ISR,w,c
  6172  000914  26D9               	addwf	fsr2l,f,c
  6173  000916  5006               	movf	??_ADC_ISR+1,w,c
  6174  000918  22DA               	addwfc	fsr2h,f,c
  6175  00091A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6176  00091E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6177                           
  6178                           ;adc.c: 160: ADC_StartConversion(Battery2);
  6179  000922  0E03               	movlw	3
  6180  000924  ECA6  F00F         	call	_ADC_StartConversion
  6181                           
  6182                           ;adc.c: 161: break;
  6183  000928  D0DB               	goto	i2l2754
  6184  00092A                     i2l2716:
  6185                           
  6186                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6187  00092A  0E9C               	movlw	low _Battery_Adc
  6188  00092C  6E05               	movwf	??_ADC_ISR& (0+255),c
  6189  00092E  0E00               	movlw	high _Battery_Adc
  6190  000930  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6191  000932  90D8               	bcf	status,0,c
  6192  000934  343D               	rlcf	_ADC_Buffer_Point,w,c
  6193  000936  6ED9               	movwf	fsr2l,c
  6194  000938  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6195  00093A  6EDA               	movwf	fsr2h,c
  6196  00093C  5005               	movf	??_ADC_ISR,w,c
  6197  00093E  26D9               	addwf	fsr2l,f,c
  6198  000940  5006               	movf	??_ADC_ISR+1,w,c
  6199  000942  22DA               	addwfc	fsr2h,f,c
  6200  000944  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6201  000948  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6202                           
  6203                           ;adc.c: 164: ADC_StartConversion(Battery3);
  6204  00094C  0E04               	movlw	4
  6205  00094E  ECA6  F00F         	call	_ADC_StartConversion
  6206                           
  6207                           ;adc.c: 165: break;
  6208  000952  D0C6               	goto	i2l2754
  6209  000954                     i2l2720:
  6210                           
  6211                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6212  000954  0E9C               	movlw	low _Battery_Adc
  6213  000956  6E05               	movwf	??_ADC_ISR& (0+255),c
  6214  000958  0E00               	movlw	high _Battery_Adc
  6215  00095A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6216  00095C  90D8               	bcf	status,0,c
  6217  00095E  343D               	rlcf	_ADC_Buffer_Point,w,c
  6218  000960  6ED9               	movwf	fsr2l,c
  6219  000962  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6220  000964  6EDA               	movwf	fsr2h,c
  6221  000966  5005               	movf	??_ADC_ISR,w,c
  6222  000968  26D9               	addwf	fsr2l,f,c
  6223  00096A  5006               	movf	??_ADC_ISR+1,w,c
  6224  00096C  22DA               	addwfc	fsr2h,f,c
  6225  00096E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6226  000972  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6227                           
  6228                           ;adc.c: 168: ADC_StartConversion(Battery4);
  6229  000976  0E05               	movlw	5
  6230  000978  ECA6  F00F         	call	_ADC_StartConversion
  6231                           
  6232                           ;adc.c: 169: break;
  6233  00097C  D0B1               	goto	i2l2754
  6234  00097E                     i2l2724:
  6235                           
  6236                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6237  00097E  0E9C               	movlw	low _Battery_Adc
  6238  000980  6E05               	movwf	??_ADC_ISR& (0+255),c
  6239  000982  0E00               	movlw	high _Battery_Adc
  6240  000984  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6241  000986  90D8               	bcf	status,0,c
  6242  000988  343D               	rlcf	_ADC_Buffer_Point,w,c
  6243  00098A  6ED9               	movwf	fsr2l,c
  6244  00098C  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6245  00098E  6EDA               	movwf	fsr2h,c
  6246  000990  5005               	movf	??_ADC_ISR,w,c
  6247  000992  26D9               	addwf	fsr2l,f,c
  6248  000994  5006               	movf	??_ADC_ISR+1,w,c
  6249  000996  22DA               	addwfc	fsr2h,f,c
  6250  000998  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6251  00099C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6252                           
  6253                           ;adc.c: 172: ADC_StartConversion(Battery5);
  6254  0009A0  0E18               	movlw	24
  6255  0009A2  ECA6  F00F         	call	_ADC_StartConversion
  6256                           
  6257                           ;adc.c: 173: break;
  6258  0009A6  D09C               	goto	i2l2754
  6259  0009A8                     i2l2728:
  6260                           
  6261                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6262  0009A8  0E9C               	movlw	low _Battery_Adc
  6263  0009AA  6E05               	movwf	??_ADC_ISR& (0+255),c
  6264  0009AC  0E00               	movlw	high _Battery_Adc
  6265  0009AE  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6266  0009B0  90D8               	bcf	status,0,c
  6267  0009B2  343D               	rlcf	_ADC_Buffer_Point,w,c
  6268  0009B4  6ED9               	movwf	fsr2l,c
  6269  0009B6  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6270  0009B8  6EDA               	movwf	fsr2h,c
  6271  0009BA  5005               	movf	??_ADC_ISR,w,c
  6272  0009BC  26D9               	addwf	fsr2l,f,c
  6273  0009BE  5006               	movf	??_ADC_ISR+1,w,c
  6274  0009C0  22DA               	addwfc	fsr2h,f,c
  6275  0009C2  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6276  0009C6  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6277                           
  6278                           ;adc.c: 176: ADC_StartConversion(Battery6);
  6279  0009CA  0E1A               	movlw	26
  6280  0009CC  ECA6  F00F         	call	_ADC_StartConversion
  6281                           
  6282                           ;adc.c: 177: break;
  6283  0009D0  D087               	goto	i2l2754
  6284  0009D2                     i2l2732:
  6285                           
  6286                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6287  0009D2  0E9C               	movlw	low _Battery_Adc
  6288  0009D4  6E05               	movwf	??_ADC_ISR& (0+255),c
  6289  0009D6  0E00               	movlw	high _Battery_Adc
  6290  0009D8  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6291  0009DA  90D8               	bcf	status,0,c
  6292  0009DC  343D               	rlcf	_ADC_Buffer_Point,w,c
  6293  0009DE  6ED9               	movwf	fsr2l,c
  6294  0009E0  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6295  0009E2  6EDA               	movwf	fsr2h,c
  6296  0009E4  5005               	movf	??_ADC_ISR,w,c
  6297  0009E6  26D9               	addwf	fsr2l,f,c
  6298  0009E8  5006               	movf	??_ADC_ISR+1,w,c
  6299  0009EA  22DA               	addwfc	fsr2h,f,c
  6300  0009EC  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6301  0009F0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6302                           
  6303                           ;adc.c: 180: ADC_StartConversion(Battery7);
  6304  0009F4  0E1B               	movlw	27
  6305  0009F6  ECA6  F00F         	call	_ADC_StartConversion
  6306                           
  6307                           ;adc.c: 181: break;
  6308  0009FA  D072               	goto	i2l2754
  6309  0009FC                     i2l2736:
  6310                           
  6311                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6312  0009FC  0E9C               	movlw	low _Battery_Adc
  6313  0009FE  6E05               	movwf	??_ADC_ISR& (0+255),c
  6314  000A00  0E00               	movlw	high _Battery_Adc
  6315  000A02  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6316  000A04  90D8               	bcf	status,0,c
  6317  000A06  343D               	rlcf	_ADC_Buffer_Point,w,c
  6318  000A08  6ED9               	movwf	fsr2l,c
  6319  000A0A  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6320  000A0C  6EDA               	movwf	fsr2h,c
  6321  000A0E  5005               	movf	??_ADC_ISR,w,c
  6322  000A10  26D9               	addwf	fsr2l,f,c
  6323  000A12  5006               	movf	??_ADC_ISR+1,w,c
  6324  000A14  22DA               	addwfc	fsr2h,f,c
  6325  000A16  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6326  000A1A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6327                           
  6328                           ;adc.c: 184: ADC_StartConversion(Battery8);
  6329  000A1E  0E08               	movlw	8
  6330  000A20  ECA6  F00F         	call	_ADC_StartConversion
  6331                           
  6332                           ;adc.c: 185: break;
  6333  000A24  D05D               	goto	i2l2754
  6334  000A26                     i2l2740:
  6335                           
  6336                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6337  000A26  0E9C               	movlw	low _Battery_Adc
  6338  000A28  6E05               	movwf	??_ADC_ISR& (0+255),c
  6339  000A2A  0E00               	movlw	high _Battery_Adc
  6340  000A2C  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6341  000A2E  90D8               	bcf	status,0,c
  6342  000A30  343D               	rlcf	_ADC_Buffer_Point,w,c
  6343  000A32  6ED9               	movwf	fsr2l,c
  6344  000A34  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6345  000A36  6EDA               	movwf	fsr2h,c
  6346  000A38  5005               	movf	??_ADC_ISR,w,c
  6347  000A3A  26D9               	addwf	fsr2l,f,c
  6348  000A3C  5006               	movf	??_ADC_ISR+1,w,c
  6349  000A3E  22DA               	addwfc	fsr2h,f,c
  6350  000A40  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6351  000A44  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6352                           
  6353                           ;adc.c: 188: ADC_StartConversion(Battery9);
  6354  000A48  0E0B               	movlw	11
  6355  000A4A  ECA6  F00F         	call	_ADC_StartConversion
  6356                           
  6357                           ;adc.c: 189: break;
  6358  000A4E  D048               	goto	i2l2754
  6359  000A50                     i2l2744:
  6360                           
  6361                           ;adc.c: 191: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6362  000A50  0E9C               	movlw	low _Battery_Adc
  6363  000A52  6E05               	movwf	??_ADC_ISR& (0+255),c
  6364  000A54  0E00               	movlw	high _Battery_Adc
  6365  000A56  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6366  000A58  90D8               	bcf	status,0,c
  6367  000A5A  343D               	rlcf	_ADC_Buffer_Point,w,c
  6368  000A5C  6ED9               	movwf	fsr2l,c
  6369  000A5E  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6370  000A60  6EDA               	movwf	fsr2h,c
  6371  000A62  5005               	movf	??_ADC_ISR,w,c
  6372  000A64  26D9               	addwf	fsr2l,f,c
  6373  000A66  5006               	movf	??_ADC_ISR+1,w,c
  6374  000A68  22DA               	addwfc	fsr2h,f,c
  6375  000A6A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6376  000A6E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6377                           
  6378                           ;adc.c: 192: ADC_StartConversion(Battery10);
  6379  000A72  0E0D               	movlw	13
  6380  000A74  ECA6  F00F         	call	_ADC_StartConversion
  6381                           
  6382                           ;adc.c: 193: break;
  6383  000A78  D033               	goto	i2l2754
  6384  000A7A                     i2l2748:
  6385                           
  6386                           ;adc.c: 195: Volt_Aquire = 0;
  6387  000A7A  0E00               	movlw	0
  6388  000A7C  6E40               	movwf	_Volt_Aquire,c
  6389                           
  6390                           ;adc.c: 196: Volt_Done = 1;
  6391  000A7E  0E00               	movlw	0
  6392  000A80  0100               	movlb	0	; () banked
  6393  000A82  6FB3               	movwf	(_Volt_Done+1)& (0+255),b
  6394  000A84  0E01               	movlw	1
  6395  000A86  0100               	movlb	0	; () banked
  6396  000A88  6FB2               	movwf	_Volt_Done& (0+255),b
  6397                           
  6398                           ;adc.c: 197: break;
  6399  000A8A  D02A               	goto	i2l2754
  6400  000A8C                     i2l2752:
  6401  000A8C  C03D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  6402  000A90  C03E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  6403                           
  6404                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6405                           ; Switch size 1, requested type "space"
  6406                           ; Number of cases is 1, Range of values is 0 to 0
  6407                           ; switch strategies available:
  6408                           ; Name         Instructions Cycles
  6409                           ; simple_byte            4     3 (average)
  6410                           ;	Chosen strategy is simple_byte
  6411  000A94  5006               	movf	??_ADC_ISR+1,w,c
  6412  000A96  0A00               	xorlw	0	; case 0
  6413  000A98  A4D8               	btfss	status,2,c
  6414  000A9A  D022               	goto	i2l2754
  6415                           
  6416                           ; Switch size 1, requested type "space"
  6417                           ; Number of cases is 11, Range of values is 0 to 10
  6418                           ; switch strategies available:
  6419                           ; Name         Instructions Cycles
  6420                           ; simple_byte           34    18 (average)
  6421                           ;	Chosen strategy is simple_byte
  6422  000A9C  5005               	movf	??_ADC_ISR,w,c
  6423  000A9E  0A00               	xorlw	0	; case 0
  6424  000AA0  B4D8               	btfsc	status,2,c
  6425  000AA2  D719               	goto	i2l2708
  6426  000AA4  0A01               	xorlw	1	; case 1
  6427  000AA6  B4D8               	btfsc	status,2,c
  6428  000AA8  D72B               	goto	i2l2712
  6429  000AAA  0A03               	xorlw	3	; case 2
  6430  000AAC  B4D8               	btfsc	status,2,c
  6431  000AAE  D73D               	goto	i2l2716
  6432  000AB0  0A01               	xorlw	1	; case 3
  6433  000AB2  B4D8               	btfsc	status,2,c
  6434  000AB4  D74F               	goto	i2l2720
  6435  000AB6  0A07               	xorlw	7	; case 4
  6436  000AB8  B4D8               	btfsc	status,2,c
  6437  000ABA  D761               	goto	i2l2724
  6438  000ABC  0A01               	xorlw	1	; case 5
  6439  000ABE  B4D8               	btfsc	status,2,c
  6440  000AC0  D773               	goto	i2l2728
  6441  000AC2  0A03               	xorlw	3	; case 6
  6442  000AC4  B4D8               	btfsc	status,2,c
  6443  000AC6  D785               	goto	i2l2732
  6444  000AC8  0A01               	xorlw	1	; case 7
  6445  000ACA  B4D8               	btfsc	status,2,c
  6446  000ACC  D797               	goto	i2l2736
  6447  000ACE  0A0F               	xorlw	15	; case 8
  6448  000AD0  B4D8               	btfsc	status,2,c
  6449  000AD2  D7A9               	goto	i2l2740
  6450  000AD4  0A01               	xorlw	1	; case 9
  6451  000AD6  B4D8               	btfsc	status,2,c
  6452  000AD8  D7BB               	goto	i2l2744
  6453  000ADA  0A03               	xorlw	3	; case 10
  6454  000ADC  B4D8               	btfsc	status,2,c
  6455  000ADE  D7CD               	goto	i2l2748
  6456  000AE0                     i2l2754:
  6457                           
  6458                           ;adc.c: 199: ADC_Buffer_Point++;
  6459  000AE0  4A3D               	infsnz	_ADC_Buffer_Point,f,c
  6460  000AE2  2A3E               	incf	_ADC_Buffer_Point+1,f,c
  6461  000AE4  0012               	return	
  6462  000AE6                     __end_of_ADC_ISR:
  6463                           	opt stack 0
  6464                           pclatu	equ	0xFFB
  6465                           pclath	equ	0xFFA
  6466                           tblptru	equ	0xFF8
  6467                           tblptrh	equ	0xFF7
  6468                           tblptrl	equ	0xFF6
  6469                           tablat	equ	0xFF5
  6470                           prodh	equ	0xFF4
  6471                           prodl	equ	0xFF3
  6472                           intcon	equ	0xFF2
  6473                           intcon2	equ	0xFF1
  6474                           postinc0	equ	0xFEE
  6475                           fsr0h	equ	0xFEA
  6476                           fsr0l	equ	0xFE9
  6477                           wreg	equ	0xFE8
  6478                           postinc1	equ	0xFE6
  6479                           postdec1	equ	0xFE5
  6480                           fsr1h	equ	0xFE2
  6481                           fsr1l	equ	0xFE1
  6482                           indf2	equ	0xFDF
  6483                           postinc2	equ	0xFDE
  6484                           postdec2	equ	0xFDD
  6485                           fsr2h	equ	0xFDA
  6486                           fsr2l	equ	0xFD9
  6487                           status	equ	0xFD8
  6488                           
  6489 ;; *************** function _Set_4051 *****************
  6490 ;; Defined at:
  6491 ;;		line 7 in file "Functions.c"
  6492 ;; Parameters:    Size  Location     Type
  6493 ;;  Channel         2    0[COMRAM] int 
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;		None
  6496 ;; Return value:  Size  Location     Type
  6497 ;;		None               void
  6498 ;; Registers used:
  6499 ;;		wreg, status,2, status,0
  6500 ;; Tracked objects:
  6501 ;;		On entry : 0/0
  6502 ;;		On exit  : 0/0
  6503 ;;		Unchanged: 0/0
  6504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6505 ;;      Params:         2       0       0       0       0       0       0
  6506 ;;      Locals:         0       0       0       0       0       0       0
  6507 ;;      Temps:          2       0       0       0       0       0       0
  6508 ;;      Totals:         4       0       0       0       0       0       0
  6509 ;;Total ram usage:        4 bytes
  6510 ;; Hardware stack levels used:    1
  6511 ;; This function calls:
  6512 ;;		Nothing
  6513 ;; This function is called by:
  6514 ;;		_ADC_ISR
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           	psect	text36
  6519  001EA2                     __ptext36:
  6520                           	opt stack 0
  6521  001EA2                     _Set_4051:
  6522                           	opt stack 23
  6523                           
  6524                           ;Functions.c: 9: if (Channel & 0x01)
  6525                           
  6526                           ;incstack = 0
  6527  001EA2  B001               	btfsc	Set_4051@Channel,0,c
  6528                           
  6529                           ;Functions.c: 10: {
  6530                           ;Functions.c: 11: do { LATA6 = ~LATA6; } while(0);
  6531  001EA4  7C89               	btg	3977,6,c	;volatile
  6532                           
  6533                           ;Functions.c: 12: }
  6534                           ;Functions.c: 13: if ((Channel>>1) & 0x01)
  6535  001EA6  3402               	rlcf	Set_4051@Channel+1,w,c
  6536  001EA8  3002               	rrcf	Set_4051@Channel+1,w,c
  6537  001EAA  6E04               	movwf	(??_Set_4051+1)& (0+255),c
  6538  001EAC  3001               	rrcf	Set_4051@Channel,w,c
  6539  001EAE  6E03               	movwf	??_Set_4051& (0+255),c
  6540  001EB0  B003               	btfsc	??_Set_4051,0,c
  6541                           
  6542                           ;Functions.c: 14: {
  6543                           ;Functions.c: 15: do { LATC0 = ~LATC0; } while(0);
  6544  001EB2  708B               	btg	3979,0,c	;volatile
  6545                           
  6546                           ;Functions.c: 16: }
  6547                           ;Functions.c: 17: if ((Channel>>2) & 0x01)
  6548  001EB4  C001  F003         	movff	Set_4051@Channel,??_Set_4051
  6549  001EB8  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
  6550  001EBC  3404               	rlcf	??_Set_4051+1,w,c
  6551  001EBE  3204               	rrcf	??_Set_4051+1,f,c
  6552  001EC0  3203               	rrcf	??_Set_4051,f,c
  6553  001EC2  3404               	rlcf	??_Set_4051+1,w,c
  6554  001EC4  3204               	rrcf	??_Set_4051+1,f,c
  6555  001EC6  3203               	rrcf	??_Set_4051,f,c
  6556  001EC8  A003               	btfss	??_Set_4051,0,c
  6557  001ECA  0012               	return	
  6558                           
  6559                           ;Functions.c: 18: {
  6560                           ;Functions.c: 19: do { LATC1 = ~LATC1; } while(0);
  6561  001ECC  728B               	btg	3979,1,c	;volatile
  6562  001ECE  0012               	return	
  6563  001ED0                     __end_of_Set_4051:
  6564                           	opt stack 0
  6565                           pclatu	equ	0xFFB
  6566                           pclath	equ	0xFFA
  6567                           tblptru	equ	0xFF8
  6568                           tblptrh	equ	0xFF7
  6569                           tblptrl	equ	0xFF6
  6570                           tablat	equ	0xFF5
  6571                           prodh	equ	0xFF4
  6572                           prodl	equ	0xFF3
  6573                           intcon	equ	0xFF2
  6574                           intcon2	equ	0xFF1
  6575                           postinc0	equ	0xFEE
  6576                           fsr0h	equ	0xFEA
  6577                           fsr0l	equ	0xFE9
  6578                           wreg	equ	0xFE8
  6579                           postinc1	equ	0xFE6
  6580                           postdec1	equ	0xFE5
  6581                           fsr1h	equ	0xFE2
  6582                           fsr1l	equ	0xFE1
  6583                           indf2	equ	0xFDF
  6584                           postinc2	equ	0xFDE
  6585                           postdec2	equ	0xFDD
  6586                           fsr2h	equ	0xFDA
  6587                           fsr2l	equ	0xFD9
  6588                           status	equ	0xFD8
  6589                           
  6590 ;; *************** function _ADC_StartConversion *****************
  6591 ;; Defined at:
  6592 ;;		line 36 in file "mcc_generated_files/adc.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;  channel         1    wreg     enum E8837
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;  channel         1    1[COMRAM] enum E8837
  6597 ;; Return value:  Size  Location     Type
  6598 ;;		None               void
  6599 ;; Registers used:
  6600 ;;		wreg, status,2, status,0
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6606 ;;      Params:         0       0       0       0       0       0       0
  6607 ;;      Locals:         1       0       0       0       0       0       0
  6608 ;;      Temps:          1       0       0       0       0       0       0
  6609 ;;      Totals:         2       0       0       0       0       0       0
  6610 ;;Total ram usage:        2 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; This function calls:
  6613 ;;		Nothing
  6614 ;; This function is called by:
  6615 ;;		_ADC_ISR
  6616 ;;		_Battery_Read
  6617 ;;		_Temp_Read
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           	psect	text37
  6622  001F4C                     __ptext37:
  6623                           	opt stack 0
  6624  001F4C                     _ADC_StartConversion:
  6625                           	opt stack 23
  6626                           
  6627                           ;incstack = 0
  6628                           ;ADC_StartConversion@channel stored from wreg
  6629  001F4C  6E02               	movwf	ADC_StartConversion@channel,c
  6630                           
  6631                           ;adc.c: 39: ADCON0bits.CHS = channel;
  6632  001F4E  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  6633  001F52  4601               	rlncf	??_ADC_StartConversion,f,c
  6634  001F54  4601               	rlncf	??_ADC_StartConversion,f,c
  6635  001F56  50C2               	movf	4034,w,c	;volatile
  6636  001F58  1801               	xorwf	??_ADC_StartConversion,w,c
  6637  001F5A  0B83               	andlw	-125
  6638  001F5C  1801               	xorwf	??_ADC_StartConversion,w,c
  6639  001F5E  6EC2               	movwf	4034,c	;volatile
  6640                           
  6641                           ;adc.c: 42: ADCON0bits.ADON = 1;
  6642  001F60  80C2               	bsf	4034,0,c	;volatile
  6643                           
  6644                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
  6645  001F62  82C2               	bsf	4034,1,c	;volatile
  6646  001F64  0012               	return	
  6647  001F66                     __end_of_ADC_StartConversion:
  6648                           	opt stack 0
  6649                           pclatu	equ	0xFFB
  6650                           pclath	equ	0xFFA
  6651                           tblptru	equ	0xFF8
  6652                           tblptrh	equ	0xFF7
  6653                           tblptrl	equ	0xFF6
  6654                           tablat	equ	0xFF5
  6655                           prodh	equ	0xFF4
  6656                           prodl	equ	0xFF3
  6657                           intcon	equ	0xFF2
  6658                           intcon2	equ	0xFF1
  6659                           postinc0	equ	0xFEE
  6660                           fsr0h	equ	0xFEA
  6661                           fsr0l	equ	0xFE9
  6662                           wreg	equ	0xFE8
  6663                           postinc1	equ	0xFE6
  6664                           postdec1	equ	0xFE5
  6665                           fsr1h	equ	0xFE2
  6666                           fsr1l	equ	0xFE1
  6667                           indf2	equ	0xFDF
  6668                           postinc2	equ	0xFDE
  6669                           postdec2	equ	0xFDD
  6670                           fsr2h	equ	0xFDA
  6671                           fsr2l	equ	0xFD9
  6672                           status	equ	0xFD8
  6673                           
  6674 ;; *************** function _ADC_GetConversionResult *****************
  6675 ;; Defined at:
  6676 ;;		line 55 in file "mcc_generated_files/adc.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  2    0[COMRAM] unsigned int 
  6683 ;; Registers used:
  6684 ;;		wreg, status,2, status,0
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6690 ;;      Params:         2       0       0       0       0       0       0
  6691 ;;      Locals:         0       0       0       0       0       0       0
  6692 ;;      Temps:          2       0       0       0       0       0       0
  6693 ;;      Totals:         4       0       0       0       0       0       0
  6694 ;;Total ram usage:        4 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; This function calls:
  6697 ;;		Nothing
  6698 ;; This function is called by:
  6699 ;;		_ADC_ISR
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text38
  6704  001F7E                     __ptext38:
  6705                           	opt stack 0
  6706  001F7E                     _ADC_GetConversionResult:
  6707                           	opt stack 23
  6708                           
  6709                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
  6710                           
  6711                           ;incstack = 0
  6712  001F7E  50C4               	movf	4036,w,c	;volatile
  6713  001F80  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  6714  001F82  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
  6715  001F84  50C3               	movf	4035,w,c	;volatile
  6716  001F86  2403               	addwf	??_ADC_GetConversionResult,w,c
  6717  001F88  6E01               	movwf	?_ADC_GetConversionResult,c
  6718  001F8A  0E00               	movlw	0
  6719  001F8C  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
  6720  001F8E  6E02               	movwf	?_ADC_GetConversionResult+1,c
  6721  001F90  0012               	return	
  6722  001F92                     __end_of_ADC_GetConversionResult:
  6723                           	opt stack 0
  6724                           pclatu	equ	0xFFB
  6725                           pclath	equ	0xFFA
  6726                           tblptru	equ	0xFF8
  6727                           tblptrh	equ	0xFF7
  6728                           tblptrl	equ	0xFF6
  6729                           tablat	equ	0xFF5
  6730                           prodh	equ	0xFF4
  6731                           prodl	equ	0xFF3
  6732                           intcon	equ	0xFF2
  6733                           intcon2	equ	0xFF1
  6734                           postinc0	equ	0xFEE
  6735                           fsr0h	equ	0xFEA
  6736                           fsr0l	equ	0xFE9
  6737                           wreg	equ	0xFE8
  6738                           postinc1	equ	0xFE6
  6739                           postdec1	equ	0xFE5
  6740                           fsr1h	equ	0xFE2
  6741                           fsr1l	equ	0xFE1
  6742                           indf2	equ	0xFDF
  6743                           postinc2	equ	0xFDE
  6744                           postdec2	equ	0xFDD
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           pclatu	equ	0xFFB
  6749                           pclath	equ	0xFFA
  6750                           tblptru	equ	0xFF8
  6751                           tblptrh	equ	0xFF7
  6752                           tblptrl	equ	0xFF6
  6753                           tablat	equ	0xFF5
  6754                           prodh	equ	0xFF4
  6755                           prodl	equ	0xFF3
  6756                           intcon	equ	0xFF2
  6757                           intcon2	equ	0xFF1
  6758                           postinc0	equ	0xFEE
  6759                           fsr0h	equ	0xFEA
  6760                           fsr0l	equ	0xFE9
  6761                           wreg	equ	0xFE8
  6762                           postinc1	equ	0xFE6
  6763                           postdec1	equ	0xFE5
  6764                           fsr1h	equ	0xFE2
  6765                           fsr1l	equ	0xFE1
  6766                           indf2	equ	0xFDF
  6767                           postinc2	equ	0xFDE
  6768                           postdec2	equ	0xFDD
  6769                           fsr2h	equ	0xFDA
  6770                           fsr2l	equ	0xFD9
  6771                           status	equ	0xFD8
  6772                           
  6773                           	psect	rparam
  6774  0000                     pclatu	equ	0xFFB
  6775                           pclath	equ	0xFFA
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           prodh	equ	0xFF4
  6781                           prodl	equ	0xFF3
  6782                           intcon	equ	0xFF2
  6783                           intcon2	equ	0xFF1
  6784                           postinc0	equ	0xFEE
  6785                           fsr0h	equ	0xFEA
  6786                           fsr0l	equ	0xFE9
  6787                           wreg	equ	0xFE8
  6788                           postinc1	equ	0xFE6
  6789                           postdec1	equ	0xFE5
  6790                           fsr1h	equ	0xFE2
  6791                           fsr1l	equ	0xFE1
  6792                           indf2	equ	0xFDF
  6793                           postinc2	equ	0xFDE
  6794                           postdec2	equ	0xFDD
  6795                           fsr2h	equ	0xFDA
  6796                           fsr2l	equ	0xFD9
  6797                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        0
    BSS         293
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      72
    BANK0           160     48     154
    BANK1           256      0     170
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 


Critical Paths under _main in COMRAM

    _main->_RunBypas
    _Temp_Fault->___ftge
    _Temp_Convert->___ftadd
    _log->___ftadd
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftdiv->___ftpack
    _Temp_Filter->___ftadd
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___ftadd
    ___awtoft->___wmul
    _Battery_Filter->___ftadd
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Temp_Convert
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _Battery_Convert->_Battery_Filter
    _Battery_Filter->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  104112
                                             43 BANK0      5     0      5
                    _Battery_Convert
                      _Battery_Fault
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    4200
                                             45 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        11    11      0   65231
                                             32 BANK0     11    11      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   26316
                                             27 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     352
                                             22 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   13290
                                             15 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5445
                                             15 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3275
                                             30 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   13096
                                             15 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    4942
                                             45 COMRAM     7     7      0
                        _Battery_Get
                           _SetBypas
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypas                                             6     2      4     498
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    3420
                                             36 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    4231
                                             45 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     776
                                             36 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   25508
                                             17 BANK0      4     4      0
                     _Battery_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2797
                                             36 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1061
                                             22 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   13096
                                             15 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3312
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4381
                                             40 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5112
                                             49 COMRAM     3     3      0
                                              6 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2433
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1171
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             3     3      0       0
                                              0 COMRAM     3     3      0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR1_CallBack                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              4     4      0    1171
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     706
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
   _RunBypas
     _Battery_Get
       ___wmul
         ___awdiv (ARG)
     _SetBypas
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
     _log
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftadd
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      AA       6       66.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     30      9A       4       96.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      48       1       75.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     18C       9        0.0%
DATA                 0      0     18C      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Apr 30 03:52:45 2015

           _eusart1TxBufferRemaining 0048                         ___awdiv@sign 001C  
                ___wmul@multiplicand 0021                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                         ___ftadd@exp1 00D8  
                       ___ftadd@exp2 00D7                         ___ftadd@sign 00D6  
                                l520 1614                                  l513 1604  
                                l506 15F4                                  l541 1644  
                                l534 1634                                  l527 1624  
                                l900 0B78                                  l492 15D4  
                                l485 15C4                                  l477 15B4  
                                l902 0BA0                                  l911 0C86  
                                l920 0CB0                                  l499 15E4  
                                l931 1748                                  l896 0B42  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0046                                  _log 1230  
                    __end_of_ADC_ISR 0AE6                                  prod 000FF3  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                    ?_Battery_Filter 0001                         ___ftdiv@cntr 0028  
                      SetBypas@state 0019                         ___ftdiv@sign 002D  
                               l3000 1A10                                 l3004 1A26  
                               l3006 1A44                                 l3110 13E6  
                               l3008 1A4E                                 l3104 13BC  
                               l3042 0B86                                 l3036 0B50  
                               l3124 1428                                 l3204 1044  
                               l2316 1B40                                 l3070 0C36  
                               l3134 145A                                 l3310 1ACC  
                               l3222 126C                                 l3064 0C0A  
                               l3048 0B96                                 l3128 143E  
                               l3312 1AD4                                 l3304 1AB6  
                               l3160 1502                                 l3066 0C1E  
                               l3058 0BD8                                 l3138 1470  
                               l3330 1B0C                                 l3322 1AF4  
                               l3314 1AD8                                 l3154 1D14  
                               l3250 16E4                                 l3162 158E  
                               l3084 0CDA                                 l3076 0C68  
                               l3068 0C2A                                 l2460 15D8  
                               l3244 16BE                                 l3228 129E  
                               l3094 0D28                                 l3078 0C7C  
                               l3326 1AFE                                 l2470 1628  
                               l2462 15E8                                 l2454 15A8  
                               l3430 1916                                 l3270 1722  
                               l3176 11B4                                 l2472 1638  
                               l2464 15F8                                 l2456 15B8  
                               l3424 18DA                                 l3408 0F4A  
                               l3362 184C                                 l3346 19C4  
                               l2466 1608                                 l2458 15C8  
                               l3450 1DCA                                 l2468 1618  
                               l2476 1648                                 l3444 1DB8  
                               l2582 1BD8                                 l3374 1C9C  
                               l2592 1C34                                 l3298 1A96  
                               l2586 1C08                                 l2992 19DA  
                               l2996 19E8                                 ?_log 00E5  
                               l2998 19F2                                 u1500 1B68  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u1508 1B6A  
                               u2501 13CC                                 u2271 0AFA  
                               u2281 0B14                                 u2481 13A2  
                               u2661 16A8                                 u2645 1248  
                               u2681 16CE                                 _TMR1 000FCE  
                               _WPUB 000F61                                 _main 1DB0  
                       ___ftpack@arg 0017                         ___ftpack@exp 001A  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                        __CFG_BORV$190 000000  
                               log@x 00E5                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A8                        __CFG_IESO$OFF 000000  
                       ___ftmul@cntr 00CE                         ___ftmul@sign 00CF  
                  ADC_ISR@ADC_Result 0007                                ??_log 0035  
                   ?_Battery_Convert 0001       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 1FA0                                ?_main 00F5  
                    __end_of___awdiv 1B16                      __end_of___ftadd 0D4E  
                    __end_of___ftdiv 177A                      _TMR1_StartTimer 1FAC  
                    __end_of___ftmul 14B4                      ___awdiv@divisor 0019  
                              _T1CON 000FCD                      __end_of___ftsub 1D74  
                              _LATA0 007C48                                _LATB0 007C50  
                              _LATB1 007C51                                _LATC0 007C58  
                              _LATA4 007C4C                                _LATC1 007C59  
                              _LATB3 007C53                                _LATA6 007C4E  
                              _LATD1 007C61                                _LATD2 007C62  
                              _LATC4 007C5C                                _LATD3 007C63  
                              _LATC5 007C5D                                _LATD5 007C65  
                     __CFG_DEBUG$OFF 000000                                i2l126 1E40  
                              i2l282 006E                                i2l274 004C  
                              i2l276 0058                                i2l278 0064  
                    ___awdiv@counter 001B                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
   __size_of_ADC_GetConversionResult 0014                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 1E14  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     __end_of_TMR1_ISR 1F4C  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 0028                                _frexp 1B16  
                              _errno 00B4                   __CFG_MCLRE$EXTMCLR 000000  
                      ___ftpack@sign 001B              __end_of_TMR1_Initialize 1F18  
                        _Battery_Adc 009C                                tablat 000FF5  
                        _Battery_Get 1DE2                                status 000FD8  
                     __CFG_HFOFST$ON 000000                      RunBypas@cellbyp 002E  
                    RunBypas@batvolt 0030                       __CFG_PBADEN$ON 000000  
                    __initialization 1E74                          log@exponent 00E8  
         __end_of_EUSART1_Initialize 1DB0                         __end_of_main 1DE2  
                   __end_of_Set_4051 1ED0                            ??_ADC_ISR 0005  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 0035  
                   __end_of_SetBypas 1698                        __activetblptr 000002  
         ADC_StartConversion@channel 0002                ?_EUSART1_Transmit_ISR 0001  
                   __end_of_RunBypas 191C                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             ?_frexp 0017                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     ___awdiv@dividend 0017  
                   __end_of___awtoft 1D38                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                   __end_of___ftpack 1A72                               _T1GCON 000FCC  
                             _RC1REG 000FAE                               _RC1STA 000FAB  
                             i2l1710 1E3C                               i2l2700 086A  
                             i2l2620 1E4C                               i2l2702 08BE  
                     __CFG_WDTEN$OFF 000000                               i2l2720 0954  
                             i2l2712 0900                               i2l2704 08C2  
                             i2l2642 0672                               i2l2740 0A26  
                             i2l2732 09D2                               i2l2724 097E  
                             i2l2716 092A                               i2l2708 08D6  
                             i2l2660 0714                               i2l2636 063C  
                             i2l2628 1E70                               i2l2654 06DE  
                             i2l2744 0A50                               i2l2736 09FC  
                             i2l2728 09A8                               i2l2752 0A8C  
                             i2l2672 0780                               i2l2648 06A8  
                             i2l2754 0AE0                               i2l2690 0822  
                             i2l2666 074A                               i2l2748 0A7A  
                             i2l2684 07EC                               i2l2678 07B6  
                             i2l2696 0858                               _RCREG1 000FAE  
                      ??_Temp_Filter 0035                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                               _TX1REG 000FAD  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                         _Temp_Fault 1C38                       __CFG_XINST$OFF 000000  
                             ___ftge 1BA8              __end_of_TMR1_StartTimer 1FB0  
                             ___wmul 1ED0                            ??___awdiv 001B  
                          ??___ftadd 0032                       __CFG_STVREN$ON 000000  
                          ??___ftdiv 0025                            ??___ftmul 002F  
                          ??___ftsub 0035                               clear_0 1E7A  
                             clear_1 1E86                               clear_2 1E92  
                   ___awdiv@quotient 001D                ___ftmul@f3_as_product 00CB  
                       _Battery_Volt 0060                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                      _eusart1RxBuffer 0100  
      __size_of_INTERRUPT_Initialize 000C                __end_of_TMR1_CallBack 1FB4  
                    _eusart1TxBuffer 0035                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 1F18                     __end_oflog@coeff 061C  
                         __accesstop 0060              __end_of__initialization 1E98  
                         ___ftadd@f1 00D0                           ___ftadd@f2 00D3  
                         ___ftge@ff1 0025                           ___ftge@ff2 0028  
                 ?_SYSTEM_Initialize 0001                         eval_poly@res 00E2  
                         ___ftdiv@f1 001F                           ___ftdiv@f2 0022  
                         ___ftdiv@f3 0029                          SetBypas@pin 0017  
                         ___awtoft@c 0025                           ___ftmul@f1 0029  
                         ___ftmul@f2 002C                           ___ftsub@f1 00D9  
                         ___ftsub@f2 00DC                  __end_of_Temp_Filter 10C0  
       __size_of_ADC_StartConversion 001A                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0017                            ?_TMR1_ISR 0001  
                      __end_of_frexp 1BA8                Battery_Get@channelnum 0025  
             ??_EUSART1_Transmit_ISR 0001              _ADC_GetConversionResult 1F7E  
                   ??_Battery_Filter 0035          __end_of_EUSART1_Receive_ISR 1E74  
                      ?_Temp_Convert 0001                              ??_frexp 001C  
          __end_of_SYSTEM_Initialize 1F32                        _eusart1RxHead 0042  
                      _eusart1TxHead 0044                        _eusart1RxTail 0043  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                      _eusart1TxTail 0045                   __size_of_eval_poly 00F2  
                    __CFG_PLLCFG$OFF 000000                            ?_Set_4051 0001  
                         __pnvCOMRAM 0046                Temp_Convert@steinhart 00F2  
                        ?_Temp_Fault 0001                            ?_SetBypas 0017  
                 __CFG_CCP2MX$PORTC1 000000                          Temp_Fault@i 002F  
                            ?___ftge 0025                            ?_RunBypas 0001  
                            ?___wmul 001F                     ?_TMR1_StartTimer 0001  
                         ??_TMR1_ISR 0001                   __CFG_CCP3MX$PORTB5 000000  
                            _ADC_ISR 061E                            ?___awtoft 0025  
                          ?___ftpack 0017              __size_of_ADC_Initialize 0018  
                      Temp_Convert@x 00F0               __size_of_Battery_Fault 00AE  
                    Temp_Fault@fault 002E                       Battery_Fault@i 002F  
                            _OSCCON2 000FD2                       ??_Temp_Convert 00EA  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                         ?_Battery_Get 0025  
                         ??_Set_4051 0003                          _Temp_Filter 0F50  
                        _Temp_Aquire 003F                           ??_SetBypas 001B  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
                            __Lparam 0000                           ??_RunBypas 002E  
                    __size_of___ftge 0090                              ___awdiv 1A72  
                            ___ftadd 0AE6                              ___ftdiv 1698  
                    __size_of___wmul 0026                              ___ftmul 1392  
                            ___ftsub 1D38                         __psmallconst 0600  
          ??_ADC_GetConversionResult 0003                              __pcinit 1E74  
                         ??___awtoft 0028                           ??___ftpack 001C  
                  __end_of_eval_poly 15A6                              __ramtop 0600  
                            __ptext0 1DB0                              __ptext1 1C38  
                            __ptext2 0D4E                              __ptext3 1230  
                            __ptext4 1B16                              __ptext5 14B4  
                            __ptext6 1D38                              __ptext7 1698  
                            __ptext8 0F50                              __ptext9 1F18  
                          _T1CONbits 000FCD                _OSCILLATOR_Initialize 1F92  
                       __size_of_log 0162                  __size_of_Temp_Fault 006A  
                 _EUSART1_Initialize 1D74             ??_PIN_MANAGER_Initialize 0017  
           __size_of_Battery_Convert 00D8           __size_of_SYSTEM_Initialize 001A  
               end_of_initialization 1E98                  ?_EUSART1_Initialize 0001  
                      __Lmediumconst 0000                        _Battery_Fault 191C  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                     Battery_Convert@x 00DD  
               ??_EUSART1_Initialize 0017                  _ADC_StartConversion 1F4C  
                        _Volt_Aquire 0040                       ?_Battery_Fault 0001  
                        ___ftdiv@exp 002C                          ___ftmul@exp 00CA  
               ?_ADC_StartConversion 0001                 __end_of_Temp_Convert 0F50  
       __end_of_INTERRUPT_Initialize 1FAC                       __end_of___ftge 1C38  
                     __end_of___wmul 1EF6                    __size_of_TMR1_ISR 001A  
                     _ADC_Initialize 1F66               ?_OSCILLATOR_Initialize 0001  
                start_initialization 1E74                           eval_poly@d 00DC  
                         eval_poly@n 00DE                           eval_poly@x 00D9  
    __size_of_PIN_MANAGER_Initialize 004E                          __end_of_log 1392  
                         frexp@value 0017                    ??_Battery_Convert 00DB  
               __size_of_Battery_Get 0032                         ??_Temp_Fault 002E  
                  __size_of_Set_4051 002E                            _Temp_DegF 007E  
                   _PrevBattery_Volt 0132                            _Temp_Done 00B0  
              ??_ADC_StartConversion 0001             __size_of_TMR1_Initialize 0022  
                  __size_of_SetBypas 00F2                             ??___ftge 002B  
                           ??___wmul 0023               __end_of_ADC_Initialize 1F7E  
                          RunBypas@i 0033                             ?_ADC_ISR 0001  
                  __size_of_RunBypas 00CA               __size_of_TMR1_CallBack 0004  
                     _eusart1RxCount 0041                    __size_of___awtoft 0048  
                  __size_of___ftpack 00A8                            _Volt_Done 00B2  
                        __pbssCOMRAM 0035        __size_of_EUSART1_Transmit_ISR 0030  
                      __pcstackBANK0 00CA                   __end_of_Temp_Fault 1CA2  
                      _PrevTemp_DegF 0150                      ??_Battery_Fault 002E  
       __size_of_EUSART1_Receive_ISR 0030                         ?_Temp_Filter 0001  
             _PIN_MANAGER_Initialize 1CA2                            __pintcode 0008  
                  _Temp_Convert$1594 00EC                    _Temp_Convert$1595 00EE  
                           ?___awdiv 0017                             ?___ftadd 00D0  
                           ?___ftdiv 001F                             ?___ftmul 0029  
                           ?___ftsub 00D9                         Temp_Filter@x 00D9  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 0009  
                           _BAUD1CON 000FB8                          __smallconst 0600  
           __size_of_TMR1_StartTimer 0004                            _eval_poly 14B4  
                     __size_of_frexp 0092                 _INTERRUPT_Initialize 1FA0  
                      _TMR1_CallBack 1FB0              __size_of_Battery_Filter 0170  
                     ___wmul@product 0023                __size_of_Temp_Convert 0202  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
__size_of_INTERRUPT_InterruptManager 00A0                             _PIR1bits 000F9E  
                    Battery_Filter@x 00D9                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 1F32  
                  ??_TMR1_Initialize 0017                     __size_of_ADC_ISR 04C8  
                         _ADCON0bits 000FC2                    ___wmul@multiplier 001F  
                         ?_eval_poly 00D9                         _Temp_Convert 0D4E  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0001  
                     ?_TMR1_CallBack 0001                             _Set_4051 1EA2  
                          frexp@eptr 001A                             _SetBypas 15A6  
                           __Hrparam 0000                             _Temp_Adc 00B6  
                           __Lrparam 0000             ?_ADC_GetConversionResult 0001  
                 __CFG_BOREN$SBORDIS 000000                             _RunBypas 1852  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 0017  
                   __size_of___awdiv 00A4                     __size_of___ftadd 0268  
                   __size_of___ftdiv 00E2                     __size_of___ftmul 0122  
                   __size_of___ftsub 003C          __size_of_EUSART1_Initialize 003C  
                           ___awtoft 1CF0                             ___ftpack 19CA  
                    _Battery_Convert 177A                   Battery_Fault@fault 002E  
                           __ptext10 1EF6                             __ptext11 1FAC  
                           __ptext20 191C                             __ptext12 1CA2  
                           __ptext21 1BA8                             __ptext13 1F92  
                         _T1GCONbits 000FCC                             __ptext22 177A  
                           __ptext14 1FA0                             __ptext31 1F32  
                           __ptext23 1CF0                             __ptext15 1D74  
                           __ptext32 1FB0                             __ptext24 1A72  
                           __ptext16 1F66                             __ptext33 1E14  
                           __ptext25 10C0                             __ptext17 1852  
                           __ptext34 1E44                             __ptext26 1ED0  
                           __ptext18 15A6                             __ptext35 061E  
                           __ptext27 1392                             __ptext19 1DE2  
                           __ptext36 1EA2                             __ptext28 0AE6  
                           __ptext37 1F4C                             __ptext29 19CA  
                           __ptext38 1F7E                    ??_TMR1_StartTimer 0017  
                      __size_of_main 0032                         _TmpTemp_DegF 018C  
               __size_of_Temp_Filter 0170                           _RC1STAbits 000FAB  
 __end_of_INTERRUPT_InterruptManager 00A8           _INTERRUPT_InterruptManager 0008  
                           main@argc 00F5                             main@argv 00F7  
                _EUSART1_Receive_ISR 1E44                             log@coeff 0601  
                         _INTCONbits 000FF2                          ??_eval_poly 00E0  
             ??_INTERRUPT_Initialize 0017                      ??_TMR1_CallBack 0001  
                      ??_Battery_Get 0028                             intlevel2 0000  
                     _Battery_Filter 10C0                 ?_EUSART1_Receive_ISR 0001  
        __end_of_ADC_StartConversion 1F66                     _TempBattery_Volt 016E  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 1F92  
       __end_of_EUSART1_Transmit_ISR 1E44                     ??_ADC_Initialize 0017  
            __end_of_Battery_Convert 1852                    __CFG_T3CMX$PORTC0 000000  
             __end_of_Battery_Filter 1230                ??_EUSART1_Receive_ISR 0001  
     __end_of_PIN_MANAGER_Initialize 1CF0                __end_of_Battery_Fault 19CA  
                  __CFG_FOSC$INTIO67 000000                      _TMR1_Initialize 1EF6  
                   _ADC_Buffer_Point 003D                  __end_of_Battery_Get 1E14  
                    Set_4051@Channel 0001  
