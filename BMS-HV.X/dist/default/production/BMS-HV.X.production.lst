

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed May 06 02:57:13 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           	psect	smallconst
    69  000600                     __psmallconst:
    70                           	opt stack 0
    71  000600  00                 	db	0
    72  000601                     _dpowers:
    73                           	opt stack 0
    74  000601  0001               	dw	1
    75  000603  0000               	dw	0
    76  000605  000A               	dw	10
    77  000607  0000               	dw	0
    78  000609  0064               	dw	100
    79  00060B  0000               	dw	0
    80  00060D  03E8               	dw	1000
    81  00060F  0000               	dw	0
    82  000611  2710               	dw	10000
    83  000613  0000               	dw	0
    84  000615  86A0               	dw	34464
    85  000617  0001               	dw	1
    86  000619  4240               	dw	16960
    87  00061B  000F               	dw	15
    88  00061D  9680               	dw	38528
    89  00061F  0098               	dw	152
    90  000621  E100               	dw	57600
    91  000623  05F5               	dw	1525
    92  000625  CA00               	dw	51712
    93  000627  3B9A               	dw	15258
    94  000629                     __end_of_dpowers:
    95                           	opt stack 0
    96  000629                     __npowers_:
    97                           	opt stack 0
    98  000629  00                 	db	0
    99  00062A  80                 	db	128
   100  00062B  3F                 	db	63
   101  00062C  CD                 	db	205
   102  00062D  CC                 	db	204
   103  00062E  3D                 	db	61
   104  00062F  D7                 	db	215
   105  000630  23                 	db	35
   106  000631  3C                 	db	60
   107  000632  12                 	db	18
   108  000633  83                 	db	131
   109  000634  3A                 	db	58
   110  000635  B7                 	db	183
   111  000636  D1                 	db	209
   112  000637  38                 	db	56
   113  000638  C6                 	db	198
   114  000639  27                 	db	39
   115  00063A  37                 	db	55
   116  00063B  38                 	db	56
   117  00063C  86                 	db	134
   118  00063D  35                 	db	53
   119  00063E  C0                 	db	192
   120  00063F  D6                 	db	214
   121  000640  33                 	db	51
   122  000641  CC                 	db	204
   123  000642  2B                 	db	43
   124  000643  32                 	db	50
   125  000644  70                 	db	112
   126  000645  89                 	db	137
   127  000646  30                 	db	48
   128  000647  E7                 	db	231
   129  000648  DB                 	db	219
   130  000649  2E                 	db	46
   131  00064A  E5                 	db	229
   132  00064B  3C                 	db	60
   133  00064C  1E                 	db	30
   134  00064D  42                 	db	66
   135  00064E  A2                 	db	162
   136  00064F  0D                 	db	13
   137  000650                     __end_of__npowers_:
   138                           	opt stack 0
   139  000650                     __powers_:
   140                           	opt stack 0
   141  000650  00                 	db	0
   142  000651  80                 	db	128
   143  000652  3F                 	db	63
   144  000653  00                 	db	0
   145  000654  20                 	db	32
   146  000655  41                 	db	65
   147  000656  00                 	db	0
   148  000657  C8                 	db	200
   149  000658  42                 	db	66
   150  000659  00                 	db	0
   151  00065A  7A                 	db	122
   152  00065B  44                 	db	68
   153  00065C  40                 	db	64
   154  00065D  1C                 	db	28
   155  00065E  46                 	db	70
   156  00065F  50                 	db	80
   157  000660  C3                 	db	195
   158  000661  47                 	db	71
   159  000662  24                 	db	36
   160  000663  74                 	db	116
   161  000664  49                 	db	73
   162  000665  97                 	db	151
   163  000666  18                 	db	24
   164  000667  4B                 	db	75
   165  000668  BC                 	db	188
   166  000669  BE                 	db	190
   167  00066A  4C                 	db	76
   168  00066B  6B                 	db	107
   169  00066C  6E                 	db	110
   170  00066D  4E                 	db	78
   171  00066E  03                 	db	3
   172  00066F  15                 	db	21
   173  000670  50                 	db	80
   174  000671  79                 	db	121
   175  000672  AD                 	db	173
   176  000673  60                 	db	96
   177  000674  F3                 	db	243
   178  000675  49                 	db	73
   179  000676  71                 	db	113
   180  000677                     __end_of__powers_:
   181                           	opt stack 0
   182  000677                     log@coeff:
   183                           	opt stack 0
   184  000677  00                 	db	0
   185  000678  00                 	db	0
   186  000679  00                 	db	0
   187  00067A  00                 	db	0
   188  00067B  80                 	db	128
   189  00067C  3F                 	db	63
   190  00067D  F0                 	db	240
   191  00067E  FF                 	db	255
   192  00067F  BE                 	db	190
   193  000680  E2                 	db	226
   194  000681  A9                 	db	169
   195  000682  3E                 	db	62
   196  000683  83                 	db	131
   197  000684  76                 	db	118
   198  000685  BE                 	db	190
   199  000686  AE                 	db	174
   200  000687  2B                 	db	43
   201  000688  3E                 	db	62
   202  000689  3C                 	db	60
   203  00068A  C3                 	db	195
   204  00068B  BD                 	db	189
   205  00068C  D2                 	db	210
   206  00068D  13                 	db	19
   207  00068E  3D                 	db	61
   208  00068F  78                 	db	120
   209  000690  D3                 	db	211
   210  000691  BB                 	db	187
   211  000692                     __end_oflog@coeff:
   212                           	opt stack 0
   213  0000                     _TMR1	set	4046
   214  0000                     _ADCON0	set	4034
   215  0000                     _ADCON0bits	set	4034
   216  0000                     _ADCON1	set	4033
   217  0000                     _ADCON2	set	4032
   218  0000                     _ADRESH	set	4036
   219  0000                     _ADRESL	set	4035
   220  0000                     _ANSELA	set	3896
   221  0000                     _ANSELB	set	3897
   222  0000                     _ANSELC	set	3898
   223  0000                     _ANSELD	set	3899
   224  0000                     _ANSELE	set	3900
   225  0000                     _BAUD1CON	set	4024
   226  0000                     _INTCON2bits	set	4081
   227  0000                     _INTCONbits	set	4082
   228  0000                     _IPR1bits	set	3999
   229  0000                     _LATA	set	3977
   230  0000                     _LATB	set	3978
   231  0000                     _LATC	set	3979
   232  0000                     _LATD	set	3980
   233  0000                     _LATE	set	3981
   234  0000                     _OSCCON	set	4051
   235  0000                     _OSCCON2	set	4050
   236  0000                     _OSCTUNE	set	3995
   237  0000                     _PIE1bits	set	3997
   238  0000                     _PIR1bits	set	3998
   239  0000                     _RC1STA	set	4011
   240  0000                     _RC1STAbits	set	4011
   241  0000                     _RCONbits	set	4048
   242  0000                     _RCREG1	set	4014
   243  0000                     _SPBRG1	set	4015
   244  0000                     _SPBRGH1	set	4016
   245  0000                     _T1CON	set	4045
   246  0000                     _T1CONbits	set	4045
   247  0000                     _T1GCON	set	4044
   248  0000                     _T1GCONbits	set	4044
   249  0000                     _TMR1H	set	4047
   250  0000                     _TMR1L	set	4046
   251  0000                     _TRISA	set	3986
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISC	set	3988
   254  0000                     _TRISD	set	3989
   255  0000                     _TRISE	set	3990
   256  0000                     _TX1STA	set	4012
   257  0000                     _TXREG1	set	4013
   258  0000                     _WPUB	set	3937
   259  0000                     _LATA0	set	31816
   260  0000                     _LATA4	set	31820
   261  0000                     _LATA6	set	31822
   262  0000                     _LATB0	set	31824
   263  0000                     _LATB1	set	31825
   264  0000                     _LATB3	set	31827
   265  0000                     _LATC0	set	31832
   266  0000                     _LATC1	set	31833
   267  0000                     _LATC4	set	31836
   268  0000                     _LATC5	set	31837
   269  0000                     _LATD1	set	31841
   270  0000                     _LATD2	set	31842
   271  0000                     _LATD3	set	31843
   272  0000                     _LATD5	set	31845
   273  000692                     __stringdata:
   274                           	opt stack 0
   275  000692                     STR_2:
   276  000692  42                 	db	66	;'B'
   277  000693  61                 	db	97	;'a'
   278  000694  74                 	db	116	;'t'
   279  000695  74                 	db	116	;'t'
   280  000696  65                 	db	101	;'e'
   281  000697  72                 	db	114	;'r'
   282  000698  79                 	db	121	;'y'
   283  000699  20                 	db	32
   284  00069A  25                 	db	37
   285  00069B  64                 	db	100	;'d'
   286  00069C  20                 	db	32
   287  00069D  3D                 	db	61	;'='
   288  00069E  20                 	db	32
   289  00069F  25                 	db	37
   290  0006A0  66                 	db	102	;'f'
   291  0006A1  20                 	db	32
   292  0006A2  0D                 	db	13
   293  0006A3  0A                 	db	10
   294  0006A4  00                 	db	0
   295  0006A5                     STR_1:
   296  0006A5  48                 	db	72	;'H'
   297  0006A6  69                 	db	105	;'i'
   298  0006A7  20                 	db	32
   299  0006A8  4D                 	db	77	;'M'
   300  0006A9  6F                 	db	111	;'o'
   301  0006AA  74                 	db	116	;'t'
   302  0006AB  68                 	db	104	;'h'
   303  0006AC  65                 	db	101	;'e'
   304  0006AD  72                 	db	114	;'r'
   305  0006AE  20                 	db	32
   306  0006AF  46                 	db	70	;'F'
   307  0006B0  75                 	db	117	;'u'
   308  0006B1  63                 	db	99	;'c'
   309  0006B2  6B                 	db	107	;'k'
   310  0006B3  65                 	db	101	;'e'
   311  0006B4  72                 	db	114	;'r'
   312  0006B5  00                 	db	0
   313  0006B6                     __end_of__stringdata:
   314                           	opt stack 0
   315                           
   316                           ; #config settings
   317  0006B6  00                 	db	0	; dummy byte at the end
   318  0000                     
   319                           	psect	nvCOMRAM
   320  000043                     __pnvCOMRAM:
   321                           	opt stack 0
   322  000043                     _timer1ReloadVal:
   323                           	opt stack 0
   324  000043                     	ds	2
   325  000045                     _eusart1TxBufferRemaining:
   326                           	opt stack 0
   327  000045                     	ds	1
   328                           
   329                           	psect	cinit
   330  003642                     __pcinit:
   331                           	opt stack 0
   332  003642                     start_initialization:
   333                           	opt stack 0
   334  003642                     __initialization:
   335                           	opt stack 0
   336                           
   337                           ; Clear objects allocated to BANK1 (230 bytes)
   338  003642  EE01  F000         	lfsr	0,__pbssBANK1
   339  003646  0EE6               	movlw	230
   340  003648                     clear_0:
   341  003648  6AEE               	clrf	postinc0,c
   342  00364A  06E8               	decf	wreg,f,c
   343  00364C  E1FD               	bnz	clear_0
   344                           
   345                           ; Clear objects allocated to BANK0 (66 bytes)
   346  00364E  EE00  F0B6         	lfsr	0,__pbssBANK0
   347  003652  0E42               	movlw	66
   348  003654                     clear_1:
   349  003654  6AEE               	clrf	postinc0,c
   350  003656  06E8               	decf	wreg,f,c
   351  003658  E1FD               	bnz	clear_1
   352                           
   353                           ; Clear objects allocated to COMRAM (19 bytes)
   354  00365A  EE00  F030         	lfsr	0,__pbssCOMRAM
   355  00365E  0E13               	movlw	19
   356  003660                     clear_2:
   357  003660  6AEE               	clrf	postinc0,c
   358  003662  06E8               	decf	wreg,f,c
   359  003664  E1FD               	bnz	clear_2
   360  003666                     end_of_initialization:
   361                           	opt stack 0
   362  003666                     __end_of__initialization:
   363                           	opt stack 0
   364  003666  0E00               	movlw	low (__Lmediumconst shr (0+16))
   365  003668  6EF8               	movwf	tblptru,c
   366  00366A  0100               	movlb	0
   367  00366C  EF45  F017         	goto	_main	;jump to C main() function
   368                           tblptru	equ	0xFF8
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           
   372                           	psect	bssCOMRAM
   373  000030                     __pbssCOMRAM:
   374                           	opt stack 0
   375  000030                     _eusart1TxBuffer:
   376                           	opt stack 0
   377  000030                     	ds	8
   378  000038                     _ADC_Buffer_Point:
   379                           	opt stack 0
   380  000038                     	ds	2
   381  00003A                     _CountCallBack:
   382                           	opt stack 0
   383  00003A                     	ds	2
   384  00003C                     _Temp_Aquire:
   385                           	opt stack 0
   386  00003C                     	ds	1
   387  00003D                     _Volt_Aquire:
   388                           	opt stack 0
   389  00003D                     	ds	1
   390  00003E                     _eusart1RxCount:
   391                           	opt stack 0
   392  00003E                     	ds	1
   393  00003F                     _eusart1RxHead:
   394                           	opt stack 0
   395  00003F                     	ds	1
   396  000040                     _eusart1RxTail:
   397                           	opt stack 0
   398  000040                     	ds	1
   399  000041                     _eusart1TxHead:
   400                           	opt stack 0
   401  000041                     	ds	1
   402  000042                     _eusart1TxTail:
   403                           	opt stack 0
   404  000042                     	ds	1
   405                           tblptru	equ	0xFF8
   406                           postinc0	equ	0xFEE
   407                           wreg	equ	0xFE8
   408                           
   409                           	psect	bssBANK0
   410  0000B6                     __pbssBANK0:
   411                           	opt stack 0
   412  0000B6                     _Battery_Adc:
   413                           	opt stack 0
   414  0000B6                     	ds	40
   415  0000DE                     _Temp_Done:
   416                           	opt stack 0
   417  0000DE                     	ds	2
   418  0000E0                     _Volt_Done:
   419                           	opt stack 0
   420  0000E0                     	ds	2
   421  0000E2                     _errno:
   422                           	opt stack 0
   423  0000E2                     	ds	2
   424  0000E4                     _Temp_Adc:
   425                           	opt stack 0
   426  0000E4                     	ds	20
   427                           tblptru	equ	0xFF8
   428                           postinc0	equ	0xFEE
   429                           wreg	equ	0xFE8
   430                           
   431                           	psect	bssBANK1
   432  000100                     __pbssBANK1:
   433                           	opt stack 0
   434  000100                     _eusart1RxBuffer:
   435                           	opt stack 0
   436  000100                     	ds	50
   437  000132                     _Battery_Volt:
   438                           	opt stack 0
   439  000132                     	ds	30
   440  000150                     _PrevBattery_Volt:
   441                           	opt stack 0
   442  000150                     	ds	30
   443  00016E                     _PrevTemp_DegF:
   444                           	opt stack 0
   445  00016E                     	ds	30
   446  00018C                     _Temp_DegF:
   447                           	opt stack 0
   448  00018C                     	ds	30
   449  0001AA                     _TempBattery_Volt:
   450                           	opt stack 0
   451  0001AA                     	ds	30
   452  0001C8                     _TmpTemp_DegF:
   453                           	opt stack 0
   454  0001C8                     	ds	30
   455                           tblptru	equ	0xFF8
   456                           postinc0	equ	0xFEE
   457                           wreg	equ	0xFE8
   458                           
   459                           	psect	cstackBANK2
   460  000200                     __pcstackBANK2:
   461                           	opt stack 0
   462  000200                     _printf$1696:
   463                           	opt stack 0
   464                           
   465                           ; 3 bytes @ 0x0
   466  000200                     	ds	3
   467  000203                     _printf$1040:
   468                           	opt stack 0
   469                           
   470                           ; 4 bytes @ 0x3
   471  000203                     	ds	4
   472  000207                     printf@vd:
   473                           	opt stack 0
   474                           
   475                           ; 4 bytes @ 0x7
   476  000207                     	ds	4
   477  00020B                     printf@vd_1042:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0xB
   481  00020B                     	ds	4
   482  00020F                     printf@ap:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0xF
   486  00020F                     	ds	2
   487  000211                     printf@flag:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x11
   491  000211                     	ds	2
   492  000213                     printf@integ:
   493                           	opt stack 0
   494                           
   495                           ; 3 bytes @ 0x13
   496  000213                     	ds	3
   497  000216                     printf@prec:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x16
   501  000216                     	ds	2
   502  000218                     printf@_val:
   503                           	opt stack 0
   504                           
   505                           ; 5 bytes @ 0x18
   506  000218                     	ds	5
   507  00021D                     printf@exp:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x1D
   511  00021D                     	ds	2
   512  00021F                     printf@fval:
   513                           	opt stack 0
   514                           
   515                           ; 3 bytes @ 0x1F
   516  00021F                     	ds	3
   517  000222                     printf@c:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x22
   521  000222                     	ds	1
   522                           tblptru	equ	0xFF8
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           
   526                           	psect	cstackBANK0
   527  000060                     __pcstackBANK0:
   528                           	opt stack 0
   529  000060                     ?___ftdiv:
   530                           	opt stack 0
   531  000060                     ?_Battery_Get:
   532                           	opt stack 0
   533  000060                     ___llmod@counter:
   534                           	opt stack 0
   535  000060                     Battery_Get@channelnum:
   536                           	opt stack 0
   537  000060                     ___ftdiv@f1:
   538                           	opt stack 0
   539  000060                     ___ftge@ff1:
   540                           	opt stack 0
   541                           
   542                           ; 3 bytes @ 0x0
   543  000060                     	ds	3
   544  000063                     ___ftdiv@f2:
   545                           	opt stack 0
   546  000063                     ___ftge@ff2:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x3
   550  000063                     	ds	3
   551  000066                     ??___ftge:
   552  000066                     ___ftdiv@cntr:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x6
   556  000066                     	ds	1
   557  000067                     ___ftdiv@f3:
   558                           	opt stack 0
   559                           
   560                           ; 3 bytes @ 0x7
   561  000067                     	ds	2
   562  000069                     Battery_Fault@fault:
   563                           	opt stack 0
   564  000069                     Temp_Fault@fault:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x9
   568  000069                     	ds	1
   569  00006A                     ___ftdiv@exp:
   570                           	opt stack 0
   571  00006A                     Battery_Fault@i:
   572                           	opt stack 0
   573  00006A                     Temp_Fault@i:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0xA
   577  00006A                     	ds	1
   578  00006B                     ___ftdiv@sign:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0xB
   582  00006B                     	ds	1
   583  00006C                     ?___ftmul:
   584                           	opt stack 0
   585  00006C                     ___ftmul@f1:
   586                           	opt stack 0
   587                           
   588                           ; 3 bytes @ 0xC
   589  00006C                     	ds	3
   590  00006F                     ___ftmul@f2:
   591                           	opt stack 0
   592                           
   593                           ; 3 bytes @ 0xF
   594  00006F                     	ds	3
   595  000072                     ??___ftmul:
   596                           
   597                           ; 0 bytes @ 0x12
   598  000072                     	ds	3
   599  000075                     ___ftmul@exp:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x15
   603  000075                     	ds	1
   604  000076                     ___ftmul@f3_as_product:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x16
   608  000076                     	ds	3
   609  000079                     ___ftmul@cntr:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x19
   613  000079                     	ds	1
   614  00007A                     ___ftmul@sign:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x1A
   618  00007A                     	ds	1
   619  00007B                     ?_fround:
   620                           	opt stack 0
   621  00007B                     ?_scale:
   622                           	opt stack 0
   623                           
   624                           ; 3 bytes @ 0x1B
   625  00007B                     	ds	3
   626  00007E                     _fround$1694:
   627                           	opt stack 0
   628  00007E                     _scale$1695:
   629                           	opt stack 0
   630                           
   631                           ; 3 bytes @ 0x1E
   632  00007E                     	ds	3
   633  000081                     scale@scl:
   634                           	opt stack 0
   635  000081                     _fround$1693:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0x21
   639  000081                     	ds	1
   640  000082                     ?___fttol:
   641                           	opt stack 0
   642  000082                     ___fttol@f1:
   643                           	opt stack 0
   644                           
   645                           ; 3 bytes @ 0x22
   646  000082                     	ds	2
   647  000084                     fround@prec:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x24
   651  000084                     	ds	1
   652  000085                     ?___ftadd:
   653                           	opt stack 0
   654  000085                     ___ftadd@f1:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x25
   658  000085                     	ds	1
   659  000086                     ??___fttol:
   660                           
   661                           ; 0 bytes @ 0x26
   662  000086                     	ds	2
   663  000088                     ___ftadd@f2:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0x28
   667  000088                     	ds	3
   668  00008B                     ??___ftadd:
   669  00008B                     ___fttol@sign1:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x2B
   673  00008B                     	ds	1
   674  00008C                     ___fttol@lval:
   675                           	opt stack 0
   676                           
   677                           ; 4 bytes @ 0x2C
   678  00008C                     	ds	2
   679  00008E                     ___ftadd@sign:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x2E
   683  00008E                     	ds	1
   684  00008F                     ___ftadd@exp2:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x2F
   688  00008F                     	ds	1
   689  000090                     ___ftadd@exp1:
   690                           	opt stack 0
   691  000090                     ___fttol@exp1:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x30
   695  000090                     	ds	1
   696  000091                     ??_Battery_Convert:
   697  000091                     ?___ftsub:
   698                           	opt stack 0
   699  000091                     ?_eval_poly:
   700                           	opt stack 0
   701  000091                     Temp_Filter@x:
   702                           	opt stack 0
   703  000091                     ___ftsub@f1:
   704                           	opt stack 0
   705  000091                     eval_poly@x:
   706                           	opt stack 0
   707                           
   708                           ; 3 bytes @ 0x31
   709  000091                     	ds	2
   710  000093                     Battery_Convert@x:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x33
   714  000093                     	ds	1
   715  000094                     eval_poly@d:
   716                           	opt stack 0
   717  000094                     ___ftsub@f2:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x34
   721  000094                     	ds	2
   722  000096                     eval_poly@n:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x36
   726  000096                     	ds	1
   727  000097                     ?_printf:
   728                           	opt stack 0
   729  000097                     printf@f:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x37
   733  000097                     	ds	1
   734  000098                     ??_eval_poly:
   735                           
   736                           ; 0 bytes @ 0x38
   737  000098                     	ds	2
   738  00009A                     eval_poly@res:
   739                           	opt stack 0
   740                           
   741                           ; 3 bytes @ 0x3A
   742  00009A                     	ds	3
   743  00009D                     ?_log:
   744                           	opt stack 0
   745  00009D                     log@x:
   746                           	opt stack 0
   747                           
   748                           ; 3 bytes @ 0x3D
   749  00009D                     	ds	1
   750  00009E                     ??_printf:
   751                           
   752                           ; 0 bytes @ 0x3E
   753  00009E                     	ds	2
   754  0000A0                     log@exponent:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x40
   758  0000A0                     	ds	2
   759  0000A2                     ??_Temp_Convert:
   760                           
   761                           ; 0 bytes @ 0x42
   762  0000A2                     	ds	2
   763  0000A4                     _Temp_Convert$1691:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x44
   767  0000A4                     	ds	2
   768  0000A6                     _Temp_Convert$1692:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x46
   772  0000A6                     	ds	2
   773  0000A8                     Temp_Convert@x:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x48
   777  0000A8                     	ds	2
   778  0000AA                     Temp_Convert@steinhart:
   779                           	opt stack 0
   780                           
   781                           ; 3 bytes @ 0x4A
   782  0000AA                     	ds	3
   783  0000AD                     
   784                           ; 2 bytes @ 0x4D
   785  0000AD                     	ds	2
   786  0000AF                     
   787                           ; 3 bytes @ 0x4F
   788  0000AF                     	ds	3
   789  0000B2                     main@x:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x52
   793  0000B2                     	ds	2
   794  0000B4                     main@x_963:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x54
   798  0000B4                     	ds	2
   799                           tblptru	equ	0xFF8
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           
   803                           	psect	cstackCOMRAM
   804  000001                     __pcstackCOMRAM:
   805                           	opt stack 0
   806  000001                     ??_ADC_StartConversion:
   807  000001                     ?_ADC_GetConversionResult:
   808                           	opt stack 0
   809  000001                     Set_4051@Channel:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x0
   813  000001                     	ds	1
   814  000002                     ADC_StartConversion@channel:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x1
   818  000002                     	ds	1
   819  000003                     ??_Set_4051:
   820  000003                     ??_TMR1_ISR:
   821  000003                     ??_ADC_GetConversionResult:
   822                           
   823                           ; 0 bytes @ 0x2
   824  000003                     	ds	2
   825  000005                     ??_ADC_ISR:
   826                           
   827                           ; 0 bytes @ 0x4
   828  000005                     	ds	6
   829  00000B                     ADC_ISR@ADC_Result:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0xA
   833  00000B                     	ds	2
   834  00000D                     ??_INTERRUPT_InterruptManager:
   835                           
   836                           ; 0 bytes @ 0xC
   837  00000D                     	ds	14
   838  00001B                     ?___awmod:
   839                           	opt stack 0
   840  00001B                     ?___ftpack:
   841                           	opt stack 0
   842  00001B                     ?_frexp:
   843                           	opt stack 0
   844  00001B                     ?___ftneg:
   845                           	opt stack 0
   846  00001B                     ?__tdiv_to_l_:
   847                           	opt stack 0
   848  00001B                     ?__div_to_l_:
   849                           	opt stack 0
   850  00001B                     ?___lldiv:
   851                           	opt stack 0
   852  00001B                     EUSART1_Write@txData:
   853                           	opt stack 0
   854  00001B                     ___awmod@dividend:
   855                           	opt stack 0
   856  00001B                     __div_to_l_@f1:
   857                           	opt stack 0
   858  00001B                     ___ftpack@arg:
   859                           	opt stack 0
   860  00001B                     __tdiv_to_l_@f1:
   861                           	opt stack 0
   862  00001B                     ___ftneg@f1:
   863                           	opt stack 0
   864  00001B                     frexp@value:
   865                           	opt stack 0
   866  00001B                     ___lldiv@dividend:
   867                           	opt stack 0
   868                           
   869                           ; 4 bytes @ 0x1A
   870  00001B                     	ds	1
   871  00001C                     putch@txData:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x1B
   875  00001C                     	ds	1
   876  00001D                     ___awmod@divisor:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x1C
   880  00001D                     	ds	1
   881  00001E                     ___ftpack@exp:
   882                           	opt stack 0
   883  00001E                     frexp@eptr:
   884                           	opt stack 0
   885  00001E                     __div_to_l_@f2:
   886                           	opt stack 0
   887  00001E                     __tdiv_to_l_@f2:
   888                           	opt stack 0
   889                           
   890                           ; 3 bytes @ 0x1D
   891  00001E                     	ds	1
   892  00001F                     ___awmod@counter:
   893                           	opt stack 0
   894  00001F                     ___ftpack@sign:
   895                           	opt stack 0
   896  00001F                     ___lldiv@divisor:
   897                           	opt stack 0
   898                           
   899                           ; 4 bytes @ 0x1E
   900  00001F                     	ds	1
   901  000020                     ??___ftpack:
   902  000020                     ??_frexp:
   903  000020                     ___awmod@sign:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x1F
   907  000020                     	ds	1
   908  000021                     ??__tdiv_to_l_:
   909  000021                     ??__div_to_l_:
   910  000021                     ?___awdiv:
   911                           	opt stack 0
   912  000021                     ___awdiv@dividend:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x20
   916  000021                     	ds	2
   917  000023                     ?___altoft:
   918                           	opt stack 0
   919  000023                     ?___lltoft:
   920                           	opt stack 0
   921  000023                     ___awdiv@divisor:
   922                           	opt stack 0
   923  000023                     ___altoft@c:
   924                           	opt stack 0
   925  000023                     ___lldiv@quotient:
   926                           	opt stack 0
   927  000023                     ___lltoft@c:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0x22
   931  000023                     	ds	1
   932  000024                     __tdiv_to_l_@quot:
   933                           	opt stack 0
   934                           
   935                           ; 4 bytes @ 0x23
   936  000024                     	ds	1
   937  000025                     ___awdiv@counter:
   938                           	opt stack 0
   939  000025                     __div_to_l_@quot:
   940                           	opt stack 0
   941                           
   942                           ; 4 bytes @ 0x24
   943  000025                     	ds	1
   944  000026                     ___awdiv@sign:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x25
   948  000026                     	ds	1
   949  000027                     ??___altoft:
   950  000027                     ??___lltoft:
   951  000027                     ___lldiv@counter:
   952                           	opt stack 0
   953  000027                     ___awdiv@quotient:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x26
   957  000027                     	ds	1
   958  000028                     ?___llmod:
   959                           	opt stack 0
   960  000028                     __tdiv_to_l_@cntr:
   961                           	opt stack 0
   962  000028                     ___llmod@dividend:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x27
   966  000028                     	ds	1
   967  000029                     ?___wmul:
   968                           	opt stack 0
   969  000029                     ?___awtoft:
   970                           	opt stack 0
   971  000029                     __div_to_l_@cntr:
   972                           	opt stack 0
   973  000029                     __tdiv_to_l_@exp1:
   974                           	opt stack 0
   975  000029                     ___wmul@multiplier:
   976                           	opt stack 0
   977  000029                     ___awtoft@c:
   978                           	opt stack 0
   979                           
   980                           ; 2 bytes @ 0x28
   981  000029                     	ds	1
   982  00002A                     __div_to_l_@exp1:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x29
   986  00002A                     	ds	1
   987  00002B                     ___altoft@exp:
   988                           	opt stack 0
   989  00002B                     ___lltoft@exp:
   990                           	opt stack 0
   991  00002B                     ___wmul@multiplicand:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x2A
   995  00002B                     	ds	1
   996  00002C                     ___altoft@sign:
   997                           	opt stack 0
   998  00002C                     ___awtoft@sign:
   999                           	opt stack 0
  1000  00002C                     ___llmod@divisor:
  1001                           	opt stack 0
  1002                           
  1003                           ; 4 bytes @ 0x2B
  1004  00002C                     	ds	1
  1005  00002D                     ??___ftdiv:
  1006  00002D                     ___wmul@product:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x2C
  1010  00002D                     	ds	2
  1011  00002F                     
  1012                           ; 0 bytes @ 0x2E
  1013  00002F                     	ds	1
  1014  000030                     tblptru	equ	0xFF8
  1015                           postinc0	equ	0xFEE
  1016                           wreg	equ	0xFE8
  1017                           
  1018                           ; 0 bytes @ 0x2F
  1019 ;;
  1020 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1021 ;;
  1022 ;; *************** function _main *****************
  1023 ;; Defined at:
  1024 ;;		line 30 in file "Main.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;  argc            2   77[BANK0 ] int 
  1027 ;;  argv            3   79[BANK0 ] PTR PTR unsigned char 
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  x               2   84[BANK0 ] int 
  1030 ;;  x               2   82[BANK0 ] int 
  1031 ;; Return value:  Size  Location     Type
  1032 ;;                  2   77[BANK0 ] int 
  1033 ;; Registers used:
  1034 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1035 ;; Tracked objects:
  1036 ;;		On entry : 0/0
  1037 ;;		On exit  : 0/0
  1038 ;;		Unchanged: 0/0
  1039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1040 ;;      Params:         0       5       0       0       0       0       0
  1041 ;;      Locals:         0       4       0       0       0       0       0
  1042 ;;      Temps:          0       0       0       0       0       0       0
  1043 ;;      Totals:         0       9       0       0       0       0       0
  1044 ;;Total ram usage:        9 bytes
  1045 ;; Hardware stack levels required when called:    9
  1046 ;; This function calls:
  1047 ;;		_Battery_Convert
  1048 ;;		_Battery_Fault
  1049 ;;		_Battery_Get
  1050 ;;		_SYSTEM_Initialize
  1051 ;;		_Temp_Convert
  1052 ;;		_Temp_Fault
  1053 ;;		_printf
  1054 ;; This function is called by:
  1055 ;;		Startup code after reset
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           	psect	text0
  1060  002E8A                     __ptext0:
  1061                           	opt stack 0
  1062  002E8A                     _main:
  1063                           	opt stack 22
  1064                           
  1065                           ;Main.c: 32: SYSTEM_Initialize();
  1066                           
  1067                           ;incstack = 0
  1068  002E8A  EC86  F01B         	call	_SYSTEM_Initialize	;wreg free
  1069                           
  1070                           ;Main.c: 51: (INTCONbits.GIE = 1);
  1071  002E8E  8EF2               	bsf	intcon,7,c	;volatile
  1072                           
  1073                           ;Main.c: 54: (INTCONbits.PEIE = 1);
  1074  002E90  8CF2               	bsf	intcon,6,c	;volatile
  1075                           
  1076                           ;Main.c: 63: printf("Hi Mother Fucker");
  1077  002E92  0E06               	movlw	high STR_1
  1078  002E94  0100               	movlb	0	; () banked
  1079  002E96  6F98               	movwf	(printf@f+1)& (0+255),b
  1080  002E98  0EA5               	movlw	low STR_1
  1081  002E9A  0100               	movlb	0	; () banked
  1082  002E9C  6F97               	movwf	printf@f& (0+255),b
  1083  002E9E  EC5C  F003         	call	_printf	;wreg free
  1084  002EA2                     l5168:
  1085                           
  1086                           ;Main.c: 65: {
  1087                           ;Main.c: 66: if (Temp_Done)
  1088  002EA2  0100               	movlb	0	; () banked
  1089  002EA4  51DF               	movf	(_Temp_Done+1)& (0+255),w,b
  1090  002EA6  11DE               	iorwf	_Temp_Done& (0+255),w,b
  1091  002EA8  B4D8               	btfsc	status,2,c
  1092  002EAA  D017               	goto	l5184
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;Main.c: 67: {
  1096                           ;Main.c: 68: Temp_Convert();
  1097  002EAC  EC8A  F00F         	call	_Temp_Convert	;wreg free
  1098                           
  1099                           ;Main.c: 69: Temp_Fault();
  1100  002EB0  EC61  F019         	call	_Temp_Fault	;wreg free
  1101                           
  1102                           ;Main.c: 70: for (int x = 0;x<12;x++)
  1103  002EB4  0E00               	movlw	0
  1104  002EB6  0100               	movlb	0	; () banked
  1105  002EB8  6FB3               	movwf	(main@x+1)& (0+255),b
  1106  002EBA  0E00               	movlw	0
  1107  002EBC  0100               	movlb	0	; () banked
  1108  002EBE  6FB2               	movwf	main@x& (0+255),b
  1109  002EC0                     
  1110                           ; BSR set to: 0
  1111  002EC0  0100               	movlb	0	; () banked
  1112  002EC2  51B3               	movf	(main@x+1)& (0+255),w,b
  1113  002EC4  0A80               	xorlw	128
  1114  002EC6  0F80               	addlw	-128
  1115  002EC8  0E0C               	movlw	12
  1116  002ECA  B4D8               	btfsc	status,2,c
  1117  002ECC  5DB2               	subwf	main@x& (0+255),w,b
  1118  002ECE  B0D8               	btfsc	status,0,c
  1119  002ED0  D004               	goto	l5184
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;Main.c: 71: {
  1123                           
  1124                           ; BSR set to: 0
  1125                           
  1126                           ; BSR set to: 0
  1127  002ED2  0100               	movlb	0	; () banked
  1128  002ED4  4BB2               	infsnz	main@x& (0+255),f,b
  1129  002ED6  2BB3               	incf	(main@x+1)& (0+255),f,b
  1130  002ED8  D7F3               	goto	L1
  1131  002EDA                     l5184:
  1132                           
  1133                           ; BSR set to: 0
  1134                           ;Main.c: 73: }
  1135                           ;Main.c: 74: }
  1136                           ;Main.c: 75: if (Volt_Done)
  1137  002EDA  0100               	movlb	0	; () banked
  1138  002EDC  51E1               	movf	(_Volt_Done+1)& (0+255),w,b
  1139  002EDE  11E0               	iorwf	_Volt_Done& (0+255),w,b
  1140  002EE0  B4D8               	btfsc	status,2,c
  1141  002EE2  D7DF               	goto	l5168
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;Main.c: 76: {
  1145                           ;Main.c: 77: Battery_Convert();
  1146  002EE4  EC7B  F015         	call	_Battery_Convert	;wreg free
  1147                           
  1148                           ;Main.c: 78: Battery_Fault();
  1149  002EE8  ECDC  F016         	call	_Battery_Fault	;wreg free
  1150                           
  1151                           ;Main.c: 80: for (int x = 0;x<10;x++)
  1152  002EEC  0E00               	movlw	0
  1153  002EEE  0100               	movlb	0	; () banked
  1154  002EF0  6FB5               	movwf	(main@x_963+1)& (0+255),b
  1155  002EF2  0E00               	movlw	0
  1156  002EF4  0100               	movlb	0	; () banked
  1157  002EF6  6FB4               	movwf	main@x_963& (0+255),b
  1158  002EF8                     
  1159                           ; BSR set to: 0
  1160  002EF8  0100               	movlb	0	; () banked
  1161  002EFA  51B5               	movf	(main@x_963+1)& (0+255),w,b
  1162  002EFC  0A80               	xorlw	128
  1163  002EFE  0F80               	addlw	-128
  1164  002F00  0E0A               	movlw	10
  1165  002F02  B4D8               	btfsc	status,2,c
  1166  002F04  5DB4               	subwf	main@x_963& (0+255),w,b
  1167  002F06  B0D8               	btfsc	status,0,c
  1168  002F08  D7CC               	goto	l5168
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;Main.c: 81: {
  1172                           ;Main.c: 82: printf("Battery %d = %f \r\n", x,Battery_Get(x));
  1173                           
  1174                           ; BSR set to: 0
  1175                           
  1176                           ; BSR set to: 0
  1177  002F0A  0E06               	movlw	high STR_2
  1178  002F0C  0100               	movlb	0	; () banked
  1179  002F0E  6F98               	movwf	(printf@f+1)& (0+255),b
  1180  002F10  0E92               	movlw	low STR_2
  1181  002F12  0100               	movlb	0	; () banked
  1182  002F14  6F97               	movwf	printf@f& (0+255),b
  1183  002F16  C0B4  F099         	movff	main@x_963,?_printf+2
  1184  002F1A  C0B5  F09A         	movff	main@x_963+1,?_printf+3
  1185  002F1E  C0B4  F060         	movff	main@x_963,Battery_Get@channelnum
  1186  002F22  C0B5  F061         	movff	main@x_963+1,Battery_Get@channelnum+1
  1187  002F26  ECD5  F01A         	call	_Battery_Get	;wreg free
  1188  002F2A  C060  F09B         	movff	?_Battery_Get,?_printf+4
  1189  002F2E  C061  F09C         	movff	?_Battery_Get+1,?_printf+5
  1190  002F32  C062  F09D         	movff	?_Battery_Get+2,?_printf+6
  1191  002F36  EC5C  F003         	call	_printf	;wreg free
  1192  002F3A  0100               	movlb	0	; () banked
  1193  002F3C  4BB4               	infsnz	main@x_963& (0+255),f,b
  1194  002F3E  2BB5               	incf	(main@x_963+1)& (0+255),f,b
  1195  002F40  D7DB               	goto	L2
  1196  002F42                     __end_of_main:
  1197                           	opt stack 0
  1198                           tblptru	equ	0xFF8
  1199                           intcon	equ	0xFF2
  1200                           postinc0	equ	0xFEE
  1201                           wreg	equ	0xFE8
  1202                           status	equ	0xFD8
  1203                           
  1204 ;; *************** function _printf *****************
  1205 ;; Defined at:
  1206 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  f               2   55[BANK0 ] PTR const unsigned char 
  1209 ;;		 -> STR_2(19), STR_1(17), 
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;  vd              4    7[BANK2 ] unsigned long 
  1212 ;;  vd              4   11[BANK2 ] unsigned long 
  1213 ;;  _val            5   24[BANK2 ] struct .
  1214 ;;  fval            3   31[BANK2 ] struct .
  1215 ;;  integ           3   19[BANK2 ] struct .
  1216 ;;  ival            3    0        struct .
  1217 ;;  exp             2   29[BANK2 ] int 
  1218 ;;  prec            2   22[BANK2 ] int 
  1219 ;;  flag            2   17[BANK2 ] unsigned short 
  1220 ;;  ap              2   15[BANK2 ] PTR void [1]
  1221 ;;		 -> ?_printf(2), 
  1222 ;;  width           2    0        int 
  1223 ;;  c               1   34[BANK2 ] char 
  1224 ;;  d               1    0        unsigned char 
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  2   55[BANK0 ] int 
  1227 ;; Registers used:
  1228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1234 ;;      Params:         0       7       0       0       0       0       0
  1235 ;;      Locals:         0       0       0      35       0       0       0
  1236 ;;      Temps:          0       6       0       0       0       0       0
  1237 ;;      Totals:         0      13       0      35       0       0       0
  1238 ;;Total ram usage:       48 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; Hardware stack levels required when called:    7
  1241 ;; This function calls:
  1242 ;;		___awdiv
  1243 ;;		___ftadd
  1244 ;;		___ftge
  1245 ;;		___ftmul
  1246 ;;		___ftneg
  1247 ;;		___ftsub
  1248 ;;		___fttol
  1249 ;;		___lldiv
  1250 ;;		___llmod
  1251 ;;		___lltoft
  1252 ;;		___wmul
  1253 ;;		__div_to_l_
  1254 ;;		__tdiv_to_l_
  1255 ;;		_fround
  1256 ;;		_putch
  1257 ;;		_scale
  1258 ;; This function is called by:
  1259 ;;		_main
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text1
  1264  0006B8                     __ptext1:
  1265                           	opt stack 0
  1266  0006B8                     _printf:
  1267                           	opt stack 23
  1268                           
  1269                           ;doprnt.c: 466: va_list ap;
  1270                           ;doprnt.c: 499: signed char c;
  1271                           ;doprnt.c: 501: int width;
  1272                           ;doprnt.c: 504: int prec;
  1273                           ;doprnt.c: 508: unsigned short flag;
  1274                           ;doprnt.c: 515: char d;
  1275                           ;doprnt.c: 516: double fval, integ;
  1276                           ;doprnt.c: 517: int exp;
  1277                           ;doprnt.c: 518: double ival;
  1278                           ;doprnt.c: 519: union {
  1279                           ;doprnt.c: 520: unsigned long _val;
  1280                           ;doprnt.c: 521: struct {
  1281                           ;doprnt.c: 522: const char * _cp;
  1282                           ;doprnt.c: 523: unsigned _len;
  1283                           ;doprnt.c: 524: } _str;
  1284                           ;doprnt.c: 525: } _val;
  1285                           ;doprnt.c: 542: *ap = __va_start();
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;incstack = 0
  1289  0006B8  0100               	movlb	0	; () banked
  1290  0006BA  0E00               	movlw	high (?_printf+2)
  1291  0006BC  0102               	movlb	2	; () banked
  1292  0006BE  6F10               	movwf	(printf@ap+1)& (0+255),b
  1293  0006C0  0100               	movlb	0	; () banked
  1294  0006C2  0E99               	movlw	low (?_printf+2)
  1295  0006C4  0102               	movlb	2	; () banked
  1296  0006C6  6F0F               	movwf	printf@ap& (0+255),b
  1297                           
  1298                           ;doprnt.c: 545: while(c = *f++) {
  1299  0006C8  EF98  F007         	goto	l5130
  1300  0006CC                     l4946:
  1301                           
  1302                           ; BSR set to: 2
  1303                           ;doprnt.c: 547: if(c != '%')
  1304  0006CC  0102               	movlb	2	; () banked
  1305  0006CE  5122               	movf	printf@c& (0+255),w,b
  1306  0006D0  0A25               	xorlw	37
  1307  0006D2  B4D8               	btfsc	status,2,c
  1308  0006D4  D006               	goto	l4950
  1309                           
  1310                           ; BSR set to: 2
  1311                           ;doprnt.c: 549: {
  1312                           ;doprnt.c: 550: (putch(c) );
  1313  0006D6  0102               	movlb	2	; () banked
  1314  0006D8  5122               	movf	printf@c& (0+255),w,b
  1315  0006DA  ECDB  F01B         	call	_putch
  1316                           
  1317                           ;doprnt.c: 551: continue;
  1318  0006DE  EF98  F007         	goto	l5130
  1319  0006E2                     l4950:
  1320                           
  1321                           ;doprnt.c: 552: }
  1322                           ;doprnt.c: 557: flag = 0;
  1323  0006E2  0E00               	movlw	0
  1324  0006E4  0102               	movlb	2	; () banked
  1325  0006E6  6F12               	movwf	(printf@flag+1)& (0+255),b
  1326  0006E8  0E00               	movlw	0
  1327  0006EA  0102               	movlb	2	; () banked
  1328  0006EC  6F11               	movwf	printf@flag& (0+255),b
  1329                           
  1330                           ;doprnt.c: 644: switch(c = *f++) {
  1331  0006EE  D003               	goto	l4956
  1332  0006F0                     l4952:
  1333                           
  1334                           ; BSR set to: 2
  1335                           ;doprnt.c: 672: flag |= 0x400;
  1336  0006F0  0102               	movlb	2	; () banked
  1337  0006F2  8512               	bsf	(printf@flag+1)& (0+255),2,b
  1338                           
  1339                           ;doprnt.c: 673: break;
  1340  0006F4  D01C               	goto	l4958
  1341  0006F6                     l4956:
  1342                           
  1343                           ; BSR set to: 2
  1344  0006F6  0100               	movlb	0	; () banked
  1345  0006F8  C097  FFF6         	movff	printf@f,tblptrl
  1346  0006FC  0100               	movlb	0	; () banked
  1347  0006FE  C098  FFF7         	movff	printf@f+1,tblptrh
  1348  000702  0100               	movlb	0	; () banked
  1349  000704  4B97               	infsnz	printf@f& (0+255),f,b
  1350  000706  2B98               	incf	(printf@f+1)& (0+255),f,b
  1351  000708                     	if	0	;tblptru may be non-zero
  1352  000708                     	endif
  1353  000708                     	if	0	;tblptru may be non-zero
  1354  000708                     	endif
  1355  000708  0008               	tblrd		*
  1356  00070A  0102               	movlb	2	; () banked
  1357  00070C  CFF5 F222          	movff	tablat,printf@c
  1358  000710  0102               	movlb	2	; () banked
  1359  000712  5122               	movf	printf@c& (0+255),w,b
  1360                           
  1361                           ; Switch size 1, requested type "space"
  1362                           ; Number of cases is 4, Range of values is 0 to 105
  1363                           ; switch strategies available:
  1364                           ; Name         Instructions Cycles
  1365                           ; simple_byte           13     7 (average)
  1366                           ;	Chosen strategy is simple_byte
  1367  000714  0A00               	xorlw	0	; case 0
  1368  000716  B4D8               	btfsc	status,2,c
  1369  000718  0012               	return	
  1370  00071A  0A64               	xorlw	100	; case 100
  1371  00071C  B4D8               	btfsc	status,2,c
  1372  00071E  D007               	goto	l4958
  1373  000720  0A02               	xorlw	2	; case 102
  1374  000722  B4D8               	btfsc	status,2,c
  1375  000724  D7E5               	goto	l4952
  1376  000726  0A0F               	xorlw	15	; case 105
  1377  000728  A4D8               	btfss	status,2,c
  1378  00072A  EF98  F007         	goto	l5130
  1379  00072E                     l4958:
  1380                           
  1381                           ; BSR set to: 2
  1382                           ;doprnt.c: 834: if(flag & (0x700)) {
  1383  00072E  0E07               	movlw	7
  1384  000730  0102               	movlb	2	; () banked
  1385  000732  1512               	andwf	(printf@flag+1)& (0+255),w,b
  1386  000734  B4D8               	btfsc	status,2,c
  1387  000736  D325               	goto	l5094
  1388                           
  1389                           ; BSR set to: 2
  1390                           ;doprnt.c: 838: prec = 6;
  1391  000738  0E00               	movlw	0
  1392  00073A  0102               	movlb	2	; () banked
  1393  00073C  6F17               	movwf	(printf@prec+1)& (0+255),b
  1394  00073E  0E06               	movlw	6
  1395  000740  0102               	movlb	2	; () banked
  1396  000742  6F16               	movwf	printf@prec& (0+255),b
  1397                           
  1398                           ; BSR set to: 2
  1399                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1400  000744  C20F  FFD9         	movff	printf@ap,fsr2l
  1401  000748  C210  FFDA         	movff	printf@ap+1,fsr2h
  1402  00074C  0102               	movlb	2	; () banked
  1403  00074E  CFDE F21F          	movff	postinc2,printf@fval
  1404  000752  0102               	movlb	2	; () banked
  1405  000754  CFDE F220          	movff	postinc2,printf@fval+1
  1406  000758  0102               	movlb	2	; () banked
  1407  00075A  CFDD F221          	movff	postdec2,printf@fval+2
  1408                           
  1409                           ; BSR set to: 2
  1410  00075E  0E03               	movlw	3
  1411  000760  0102               	movlb	2	; () banked
  1412  000762  270F               	addwf	printf@ap& (0+255),f,b
  1413  000764  0E00               	movlw	0
  1414  000766  0102               	movlb	2	; () banked
  1415  000768  2310               	addwfc	(printf@ap+1)& (0+255),f,b
  1416                           
  1417                           ; BSR set to: 2
  1418                           ;doprnt.c: 840: if(fval < 0.0) {
  1419  00076A  0102               	movlb	2	; () banked
  1420  00076C  5121               	movf	(printf@fval+2)& (0+255),w,b
  1421  00076E  0A80               	xorlw	128
  1422  000770  0F80               	addlw	128
  1423  000772  E107               	bnz	u5095
  1424  000774  0E00               	movlw	0
  1425  000776  0102               	movlb	2	; () banked
  1426  000778  5D20               	subwf	(printf@fval+1)& (0+255),w,b
  1427  00077A  E103               	bnz	u5095
  1428  00077C  0E00               	movlw	0
  1429  00077E  0102               	movlb	2	; () banked
  1430  000780  5D1F               	subwf	printf@fval& (0+255),w,b
  1431  000782                     u5095:
  1432  000782  B0D8               	btfsc	status,0,c
  1433  000784  D011               	goto	l4972
  1434                           
  1435                           ; BSR set to: 2
  1436                           ;doprnt.c: 841: fval = -fval;
  1437  000786  C21F  F01B         	movff	printf@fval,___ftneg@f1
  1438  00078A  C220  F01C         	movff	printf@fval+1,___ftneg@f1+1
  1439  00078E  C221  F01D         	movff	printf@fval+2,___ftneg@f1+2
  1440  000792  EC4F  F01B         	call	___ftneg	;wreg free
  1441  000796  C01B  F21F         	movff	?___ftneg,printf@fval
  1442  00079A  C01C  F220         	movff	?___ftneg+1,printf@fval+1
  1443  00079E  C01D  F221         	movff	?___ftneg+2,printf@fval+2
  1444                           
  1445                           ;doprnt.c: 842: flag |= 0x03;
  1446  0007A2  0E03               	movlw	3
  1447  0007A4  0102               	movlb	2	; () banked
  1448  0007A6  1311               	iorwf	printf@flag& (0+255),f,b
  1449  0007A8                     l4972:
  1450                           
  1451                           ; BSR set to: 2
  1452                           ;doprnt.c: 843: }
  1453                           ;doprnt.c: 844: exp = 0;
  1454  0007A8  0E00               	movlw	0
  1455  0007AA  0102               	movlb	2	; () banked
  1456  0007AC  6F1E               	movwf	(printf@exp+1)& (0+255),b
  1457  0007AE  0E00               	movlw	0
  1458  0007B0  0102               	movlb	2	; () banked
  1459  0007B2  6F1D               	movwf	printf@exp& (0+255),b
  1460                           
  1461                           ; BSR set to: 2
  1462                           ;doprnt.c: 845: if( fval!=0) {
  1463  0007B4  0E7F               	movlw	127
  1464  0007B6  0102               	movlb	2	; () banked
  1465  0007B8  1521               	andwf	(printf@fval+2)& (0+255),w,b
  1466  0007BA  0102               	movlb	2	; () banked
  1467  0007BC  1120               	iorwf	(printf@fval+1)& (0+255),w,b
  1468  0007BE  0102               	movlb	2	; () banked
  1469  0007C0  111F               	iorwf	printf@fval& (0+255),w,b
  1470  0007C2  B4D8               	btfsc	status,2,c
  1471  0007C4  D0A2               	goto	l5000
  1472                           
  1473                           ; BSR set to: 2
  1474                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1475  0007C6  0E82               	movlw	130
  1476  0007C8  0100               	movlb	0	; () banked
  1477  0007CA  6F9E               	movwf	??_printf& (0+255),b
  1478  0007CC  0EFF               	movlw	255
  1479  0007CE  6F9F               	movwf	(??_printf+1)& (0+255),b
  1480  0007D0  0102               	movlb	2	; () banked
  1481  0007D2  C21F  F0A0         	movff	printf@fval,??_printf+2
  1482  0007D6  0102               	movlb	2	; () banked
  1483  0007D8  C220  F0A1         	movff	printf@fval+1,??_printf+3
  1484  0007DC  0102               	movlb	2	; () banked
  1485  0007DE  C221  F0A2         	movff	printf@fval+2,??_printf+4
  1486  0007E2  0102               	movlb	2	; () banked
  1487  0007E4  C222  F0A3         	movff	printf@fval+3,??_printf+5
  1488  0007E8  0E10               	movlw	16
  1489  0007EA  D006               	goto	u5110
  1490  0007EC                     u5115:
  1491  0007EC  0100               	movlb	0	; () banked
  1492  0007EE  90D8               	bcf	status,0,c
  1493  0007F0  33A3               	rrcf	(??_printf+5)& (0+255),f,b
  1494  0007F2  33A2               	rrcf	(??_printf+4)& (0+255),f,b
  1495  0007F4  33A1               	rrcf	(??_printf+3)& (0+255),f,b
  1496  0007F6  33A0               	rrcf	(??_printf+2)& (0+255),f,b
  1497  0007F8                     u5110:
  1498  0007F8  2EE8               	decfsz	wreg,f,c
  1499  0007FA  D7F8               	goto	u5115
  1500  0007FC  0100               	movlb	0	; () banked
  1501  0007FE  51A0               	movf	(??_printf+2)& (0+255),w,b
  1502  000800  0100               	movlb	0	; () banked
  1503  000802  259E               	addwf	??_printf& (0+255),w,b
  1504  000804  0102               	movlb	2	; () banked
  1505  000806  6F1D               	movwf	printf@exp& (0+255),b
  1506  000808  0E00               	movlw	0
  1507  00080A  0100               	movlb	0	; () banked
  1508  00080C  219F               	addwfc	(??_printf+1)& (0+255),w,b
  1509  00080E  0102               	movlb	2	; () banked
  1510  000810  6F1E               	movwf	(printf@exp+1)& (0+255),b
  1511                           
  1512                           ; BSR set to: 2
  1513                           ;doprnt.c: 847: exp--;
  1514  000812  0102               	movlb	2	; () banked
  1515  000814  071D               	decf	printf@exp& (0+255),f,b
  1516  000816  A0D8               	btfss	status,0,c
  1517  000818  071E               	decf	(printf@exp+1)& (0+255),f,b
  1518                           
  1519                           ; BSR set to: 2
  1520                           ;doprnt.c: 848: exp *= 3;
  1521  00081A  C21D  F029         	movff	printf@exp,___wmul@multiplier
  1522  00081E  C21E  F02A         	movff	printf@exp+1,___wmul@multiplier+1
  1523  000822  0E00               	movlw	0
  1524  000824  6E2C               	movwf	___wmul@multiplicand+1,c
  1525  000826  0E03               	movlw	3
  1526  000828  6E2B               	movwf	___wmul@multiplicand,c
  1527  00082A  EC62  F01B         	call	___wmul	;wreg free
  1528  00082E  C029  F21D         	movff	?___wmul,printf@exp
  1529  000832  C02A  F21E         	movff	?___wmul+1,printf@exp+1
  1530                           
  1531                           ;doprnt.c: 849: exp /= 10;
  1532  000836  C21D  F021         	movff	printf@exp,___awdiv@dividend
  1533  00083A  C21E  F022         	movff	printf@exp+1,___awdiv@dividend+1
  1534  00083E  0E00               	movlw	0
  1535  000840  6E24               	movwf	___awdiv@divisor+1,c
  1536  000842  0E0A               	movlw	10
  1537  000844  6E23               	movwf	___awdiv@divisor,c
  1538  000846  ECF5  F017         	call	___awdiv	;wreg free
  1539  00084A  C021  F21D         	movff	?___awdiv,printf@exp
  1540  00084E  C022  F21E         	movff	?___awdiv+1,printf@exp+1
  1541                           
  1542                           ;doprnt.c: 850: if(exp < 0)
  1543  000852  0102               	movlb	2	; () banked
  1544  000854  511E               	movf	(printf@exp+1)& (0+255),w,b
  1545  000856  0A80               	xorlw	128
  1546  000858  6EF3               	movwf	prodl,c
  1547  00085A  0E80               	movlw	128
  1548  00085C  5CF3               	subwf	prodl,w,c
  1549  00085E  0E00               	movlw	0
  1550  000860  B4D8               	btfsc	status,2,c
  1551  000862  5D1D               	subwf	printf@exp& (0+255),w,b
  1552  000864  B0D8               	btfsc	status,0,c
  1553  000866  D004               	goto	l4988
  1554                           
  1555                           ; BSR set to: 2
  1556                           ;doprnt.c: 851: exp--;
  1557  000868  0102               	movlb	2	; () banked
  1558  00086A  071D               	decf	printf@exp& (0+255),f,b
  1559  00086C  A0D8               	btfss	status,0,c
  1560  00086E  071E               	decf	(printf@exp+1)& (0+255),f,b
  1561  000870                     l4988:
  1562                           
  1563                           ; BSR set to: 2
  1564                           ;doprnt.c: 855: integ = scale(-exp);
  1565  000870  0102               	movlb	2	; () banked
  1566  000872  511D               	movf	printf@exp& (0+255),w,b
  1567  000874  0800               	sublw	0
  1568  000876  ECC2  F00A         	call	_scale
  1569  00087A  C07B  F213         	movff	?_scale,printf@integ
  1570  00087E  C07C  F214         	movff	?_scale+1,printf@integ+1
  1571  000882  C07D  F215         	movff	?_scale+2,printf@integ+2
  1572                           
  1573                           ;doprnt.c: 856: integ *= fval;
  1574  000886  C213  F06C         	movff	printf@integ,___ftmul@f1
  1575  00088A  C214  F06D         	movff	printf@integ+1,___ftmul@f1+1
  1576  00088E  C215  F06E         	movff	printf@integ+2,___ftmul@f1+2
  1577  000892  C21F  F06F         	movff	printf@fval,___ftmul@f2
  1578  000896  C220  F070         	movff	printf@fval+1,___ftmul@f2+1
  1579  00089A  C221  F071         	movff	printf@fval+2,___ftmul@f2+2
  1580  00089E  EC16  F012         	call	___ftmul	;wreg free
  1581  0008A2  C06C  F213         	movff	?___ftmul,printf@integ
  1582  0008A6  C06D  F214         	movff	?___ftmul+1,printf@integ+1
  1583  0008AA  C06E  F215         	movff	?___ftmul+2,printf@integ+2
  1584                           
  1585                           ;doprnt.c: 857: if(integ < 1.0)
  1586  0008AE  C213  F060         	movff	printf@integ,___ftge@ff1
  1587  0008B2  C214  F061         	movff	printf@integ+1,___ftge@ff1+1
  1588  0008B6  C215  F062         	movff	printf@integ+2,___ftge@ff1+2
  1589  0008BA  0E00               	movlw	0
  1590  0008BC  0100               	movlb	0	; () banked
  1591  0008BE  6F63               	movwf	___ftge@ff2& (0+255),b
  1592  0008C0  0E80               	movlw	128
  1593  0008C2  0100               	movlb	0	; () banked
  1594  0008C4  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1595  0008C6  0E3F               	movlw	63
  1596  0008C8  0100               	movlb	0	; () banked
  1597  0008CA  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1598  0008CC  EC72  F016         	call	___ftge	;wreg free
  1599  0008D0  B0D8               	btfsc	status,0,c
  1600  0008D2  D005               	goto	l4996
  1601                           
  1602                           ;doprnt.c: 858: exp--;
  1603  0008D4  0102               	movlb	2	; () banked
  1604  0008D6  071D               	decf	printf@exp& (0+255),f,b
  1605  0008D8  A0D8               	btfss	status,0,c
  1606  0008DA  071E               	decf	(printf@exp+1)& (0+255),f,b
  1607  0008DC  D016               	goto	l5000
  1608  0008DE                     l4996:
  1609                           
  1610                           ;doprnt.c: 859: else if(integ >= 10.0)
  1611  0008DE  C213  F060         	movff	printf@integ,___ftge@ff1
  1612  0008E2  C214  F061         	movff	printf@integ+1,___ftge@ff1+1
  1613  0008E6  C215  F062         	movff	printf@integ+2,___ftge@ff1+2
  1614  0008EA  0E00               	movlw	0
  1615  0008EC  0100               	movlb	0	; () banked
  1616  0008EE  6F63               	movwf	___ftge@ff2& (0+255),b
  1617  0008F0  0E20               	movlw	32
  1618  0008F2  0100               	movlb	0	; () banked
  1619  0008F4  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1620  0008F6  0E41               	movlw	65
  1621  0008F8  0100               	movlb	0	; () banked
  1622  0008FA  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1623  0008FC  EC72  F016         	call	___ftge	;wreg free
  1624  000900  A0D8               	btfss	status,0,c
  1625  000902  D003               	goto	l5000
  1626                           
  1627                           ;doprnt.c: 860: exp++;
  1628  000904  0102               	movlb	2	; () banked
  1629  000906  4B1D               	infsnz	printf@exp& (0+255),f,b
  1630  000908  2B1E               	incf	(printf@exp+1)& (0+255),f,b
  1631  00090A                     l5000:
  1632                           
  1633                           ;doprnt.c: 861: }
  1634                           ;doprnt.c: 1121: if(prec <= 12)
  1635  00090A  0102               	movlb	2	; () banked
  1636  00090C  5117               	movf	(printf@prec+1)& (0+255),w,b
  1637  00090E  0A80               	xorlw	128
  1638  000910  6EF3               	movwf	prodl,c
  1639  000912  0E80               	movlw	128
  1640  000914  5CF3               	subwf	prodl,w,c
  1641  000916  0E0D               	movlw	13
  1642  000918  B4D8               	btfsc	status,2,c
  1643  00091A  5D16               	subwf	printf@prec& (0+255),w,b
  1644  00091C  B0D8               	btfsc	status,0,c
  1645  00091E  D018               	goto	l5004
  1646                           
  1647                           ; BSR set to: 2
  1648                           ;doprnt.c: 1122: fval += fround(prec);
  1649  000920  C21F  F085         	movff	printf@fval,___ftadd@f1
  1650  000924  C220  F086         	movff	printf@fval+1,___ftadd@f1+1
  1651  000928  C221  F087         	movff	printf@fval+2,___ftadd@f1+2
  1652  00092C  0102               	movlb	2	; () banked
  1653  00092E  5116               	movf	printf@prec& (0+255),w,b
  1654  000930  ECFD  F00C         	call	_fround
  1655  000934  C07B  F088         	movff	?_fround,___ftadd@f2
  1656  000938  C07C  F089         	movff	?_fround+1,___ftadd@f2+1
  1657  00093C  C07D  F08A         	movff	?_fround+2,___ftadd@f2+2
  1658  000940  EC4A  F00E         	call	___ftadd	;wreg free
  1659  000944  C085  F21F         	movff	?___ftadd,printf@fval
  1660  000948  C086  F220         	movff	?___ftadd+1,printf@fval+1
  1661  00094C  C087  F221         	movff	?___ftadd+2,printf@fval+2
  1662  000950                     l5004:
  1663                           
  1664                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1665  000950  0102               	movlb	2	; () banked
  1666  000952  511E               	movf	(printf@exp+1)& (0+255),w,b
  1667  000954  0A80               	xorlw	128
  1668  000956  6EF3               	movwf	prodl,c
  1669  000958  0E80               	movlw	128
  1670  00095A  5CF3               	subwf	prodl,w,c
  1671  00095C  0E0A               	movlw	10
  1672  00095E  B4D8               	btfsc	status,2,c
  1673  000960  5D1D               	subwf	printf@exp& (0+255),w,b
  1674  000962  B0D8               	btfsc	status,0,c
  1675  000964  D029               	goto	l5012
  1676                           
  1677                           ; BSR set to: 2
  1678  000966  0E7F               	movlw	127
  1679  000968  0102               	movlb	2	; () banked
  1680  00096A  1521               	andwf	(printf@fval+2)& (0+255),w,b
  1681  00096C  0102               	movlb	2	; () banked
  1682  00096E  1120               	iorwf	(printf@fval+1)& (0+255),w,b
  1683  000970  0102               	movlb	2	; () banked
  1684  000972  111F               	iorwf	printf@fval& (0+255),w,b
  1685  000974  B4D8               	btfsc	status,2,c
  1686  000976  D06F               	goto	l5028
  1687                           
  1688                           ; BSR set to: 2
  1689  000978  C21F  F082         	movff	printf@fval,___fttol@f1
  1690  00097C  C220  F083         	movff	printf@fval+1,___fttol@f1+1
  1691  000980  C221  F084         	movff	printf@fval+2,___fttol@f1+2
  1692  000984  EC58  F011         	call	___fttol	;wreg free
  1693  000988  C082  F09E         	movff	?___fttol,??_printf
  1694  00098C  C083  F09F         	movff	?___fttol+1,??_printf+1
  1695  000990  C084  F0A0         	movff	?___fttol+2,??_printf+2
  1696  000994  C085  F0A1         	movff	?___fttol+3,??_printf+3
  1697  000998  0100               	movlb	0	; () banked
  1698  00099A  51A1               	movf	(??_printf+3)& (0+255),w,b
  1699  00099C  119E               	iorwf	??_printf& (0+255),w,b
  1700  00099E  119F               	iorwf	(??_printf+1)& (0+255),w,b
  1701  0009A0  11A0               	iorwf	(??_printf+2)& (0+255),w,b
  1702  0009A2  A4D8               	btfss	status,2,c
  1703  0009A4  D058               	goto	l5028
  1704                           
  1705                           ; BSR set to: 0
  1706  0009A6  0102               	movlb	2	; () banked
  1707  0009A8  511E               	movf	(printf@exp+1)& (0+255),w,b
  1708  0009AA  0A80               	xorlw	128
  1709  0009AC  0F80               	addlw	-128
  1710  0009AE  0E02               	movlw	2
  1711  0009B0  B4D8               	btfsc	status,2,c
  1712  0009B2  5D1D               	subwf	printf@exp& (0+255),w,b
  1713  0009B4  A0D8               	btfss	status,0,c
  1714  0009B6  D04F               	goto	l5028
  1715  0009B8                     l5012:
  1716                           
  1717                           ; BSR set to: 2
  1718                           ;doprnt.c: 1129: if(integ < 4.294967296){
  1719  0009B8  C213  F060         	movff	printf@integ,___ftge@ff1
  1720  0009BC  C214  F061         	movff	printf@integ+1,___ftge@ff1+1
  1721  0009C0  C215  F062         	movff	printf@integ+2,___ftge@ff1+2
  1722  0009C4  0E70               	movlw	112
  1723  0009C6  0100               	movlb	0	; () banked
  1724  0009C8  6F63               	movwf	___ftge@ff2& (0+255),b
  1725  0009CA  0E89               	movlw	137
  1726  0009CC  0100               	movlb	0	; () banked
  1727  0009CE  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1728  0009D0  0E40               	movlw	64
  1729  0009D2  0100               	movlb	0	; () banked
  1730  0009D4  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1731  0009D6  EC72  F016         	call	___ftge	;wreg free
  1732  0009DA  B0D8               	btfsc	status,0,c
  1733  0009DC  D003               	goto	l5016
  1734                           
  1735                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1736  0009DE  0102               	movlb	2	; () banked
  1737  0009E0  0EF7               	movlw	247
  1738  0009E2  D002               	goto	L3
  1739  0009E4                     l5016:
  1740                           
  1741                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1742  0009E4  0102               	movlb	2	; () banked
  1743  0009E6  0EF8               	movlw	248
  1744  0009E8                     L3:
  1745  0009E8  0102               	movlb	2	; () banked
  1746  0009EA  271D               	addwf	printf@exp& (0+255),f,b
  1747  0009EC  0EFF               	movlw	255
  1748  0009EE  0102               	movlb	2	; () banked
  1749  0009F0  231E               	addwfc	(printf@exp+1)& (0+255),f,b
  1750                           
  1751                           ; BSR set to: 2
  1752                           ;doprnt.c: 1133: }
  1753                           ;doprnt.c: 1134: integ = scale(exp);
  1754                           
  1755                           ; BSR set to: 2
  1756  0009F2  0102               	movlb	2	; () banked
  1757  0009F4  511D               	movf	printf@exp& (0+255),w,b
  1758  0009F6  ECC2  F00A         	call	_scale
  1759  0009FA  C07B  F213         	movff	?_scale,printf@integ
  1760  0009FE  C07C  F214         	movff	?_scale+1,printf@integ+1
  1761  000A02  C07D  F215         	movff	?_scale+2,printf@integ+2
  1762                           
  1763                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  1764  000A06  C21F  F01B         	movff	printf@fval,__tdiv_to_l_@f1
  1765  000A0A  C220  F01C         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1766  000A0E  C221  F01D         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1767  000A12  C213  F01E         	movff	printf@integ,__tdiv_to_l_@f2
  1768  000A16  C214  F01F         	movff	printf@integ+1,__tdiv_to_l_@f2+1
  1769  000A1A  C215  F020         	movff	printf@integ+2,__tdiv_to_l_@f2+2
  1770  000A1E  ECE2  F014         	call	__tdiv_to_l_	;wreg free
  1771  000A22  C01B  F203         	movff	?__tdiv_to_l_,_printf$1040
  1772  000A26  C01C  F204         	movff	?__tdiv_to_l_+1,_printf$1040+1
  1773  000A2A  C01D  F205         	movff	?__tdiv_to_l_+2,_printf$1040+2
  1774  000A2E  C01E  F206         	movff	?__tdiv_to_l_+3,_printf$1040+3
  1775  000A32  C203  F218         	movff	_printf$1040,printf@_val
  1776  000A36  C204  F219         	movff	_printf$1040+1,printf@_val+1
  1777  000A3A  C205  F21A         	movff	_printf$1040+2,printf@_val+2
  1778  000A3E  C206  F21B         	movff	_printf$1040+3,printf@_val+3
  1779                           
  1780                           ;doprnt.c: 1138: fval = 0.0;
  1781  000A42  0E00               	movlw	0
  1782  000A44  0102               	movlb	2	; () banked
  1783  000A46  6F1F               	movwf	printf@fval& (0+255),b
  1784  000A48  0E00               	movlw	0
  1785  000A4A  0102               	movlb	2	; () banked
  1786  000A4C  6F20               	movwf	(printf@fval+1)& (0+255),b
  1787  000A4E  0E00               	movlw	0
  1788  000A50  0102               	movlb	2	; () banked
  1789  000A52  6F21               	movwf	(printf@fval+2)& (0+255),b
  1790                           
  1791                           ;doprnt.c: 1139: } else {
  1792  000A54  D034               	goto	l5032
  1793  000A56                     l5028:
  1794                           
  1795                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  1796  000A56  C21F  F082         	movff	printf@fval,___fttol@f1
  1797  000A5A  C220  F083         	movff	printf@fval+1,___fttol@f1+1
  1798  000A5E  C221  F084         	movff	printf@fval+2,___fttol@f1+2
  1799  000A62  EC58  F011         	call	___fttol	;wreg free
  1800  000A66  C082  F218         	movff	?___fttol,printf@_val
  1801  000A6A  C083  F219         	movff	?___fttol+1,printf@_val+1
  1802  000A6E  C084  F21A         	movff	?___fttol+2,printf@_val+2
  1803  000A72  C085  F21B         	movff	?___fttol+3,printf@_val+3
  1804                           
  1805                           ;doprnt.c: 1141: fval -= (double)_val._val;
  1806  000A76  C21F  F091         	movff	printf@fval,___ftsub@f1
  1807  000A7A  C220  F092         	movff	printf@fval+1,___ftsub@f1+1
  1808  000A7E  C221  F093         	movff	printf@fval+2,___ftsub@f1+2
  1809  000A82  C218  F023         	movff	printf@_val,___lltoft@c
  1810  000A86  C219  F024         	movff	printf@_val+1,___lltoft@c+1
  1811  000A8A  C21A  F025         	movff	printf@_val+2,___lltoft@c+2
  1812  000A8E  C21B  F026         	movff	printf@_val+3,___lltoft@c+3
  1813  000A92  ECD8  F019         	call	___lltoft	;wreg free
  1814  000A96  C023  F094         	movff	?___lltoft,___ftsub@f2
  1815  000A9A  C024  F095         	movff	?___lltoft+1,___ftsub@f2+1
  1816  000A9E  C025  F096         	movff	?___lltoft+2,___ftsub@f2+2
  1817  000AA2  EC7C  F01A         	call	___ftsub	;wreg free
  1818  000AA6  C091  F21F         	movff	?___ftsub,printf@fval
  1819  000AAA  C092  F220         	movff	?___ftsub+1,printf@fval+1
  1820  000AAE  C093  F221         	movff	?___ftsub+2,printf@fval+2
  1821                           
  1822                           ;doprnt.c: 1142: exp = 0;
  1823  000AB2  0E00               	movlw	0
  1824  000AB4  0102               	movlb	2	; () banked
  1825  000AB6  6F1E               	movwf	(printf@exp+1)& (0+255),b
  1826  000AB8  0E00               	movlw	0
  1827  000ABA  0102               	movlb	2	; () banked
  1828  000ABC  6F1D               	movwf	printf@exp& (0+255),b
  1829  000ABE                     l5032:
  1830                           
  1831                           ; BSR set to: 2
  1832                           ;doprnt.c: 1143: }
  1833                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1834  000ABE  0E01               	movlw	1
  1835  000AC0  0102               	movlb	2	; () banked
  1836  000AC2  6F22               	movwf	printf@c& (0+255),b
  1837  000AC4                     
  1838                           ; BSR set to: 2
  1839  000AC4  0102               	movlb	2	; () banked
  1840  000AC6  5122               	movf	printf@c& (0+255),w,b
  1841  000AC8  0A0A               	xorlw	10
  1842  000ACA  B4D8               	btfsc	status,2,c
  1843  000ACC  D01E               	goto	l5046
  1844                           
  1845                           ; BSR set to: 2
  1846                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  1847                           
  1848                           ; BSR set to: 2
  1849                           
  1850                           ; BSR set to: 2
  1851  000ACE  0102               	movlb	2	; () banked
  1852  000AD0  5122               	movf	printf@c& (0+255),w,b
  1853  000AD2  0D04               	mullw	4
  1854  000AD4  0E01               	movlw	low _dpowers
  1855  000AD6  24F3               	addwf	prodl,w,c
  1856  000AD8  6EF6               	movwf	tblptrl,c
  1857  000ADA  0E06               	movlw	high _dpowers
  1858  000ADC  20F4               	addwfc	prodh,w,c
  1859  000ADE  6EF7               	movwf	tblptrh,c
  1860  000AE0                     	if	0	;There are less than 3 active tblptr bytes
  1861  000AE0                     	endif
  1862  000AE0  0009               	tblrd		*+
  1863  000AE2  50F5               	movf	tablat,w,c
  1864  000AE4  0102               	movlb	2	; () banked
  1865  000AE6  5D18               	subwf	printf@_val& (0+255),w,b
  1866  000AE8  0009               	tblrd		*+
  1867  000AEA  50F5               	movf	tablat,w,c
  1868  000AEC  0102               	movlb	2	; () banked
  1869  000AEE  5919               	subwfb	(printf@_val+1)& (0+255),w,b
  1870  000AF0  0009               	tblrd		*+
  1871  000AF2  50F5               	movf	tablat,w,c
  1872  000AF4  0102               	movlb	2	; () banked
  1873  000AF6  591A               	subwfb	(printf@_val+2)& (0+255),w,b
  1874  000AF8  0009               	tblrd		*+
  1875  000AFA  50F5               	movf	tablat,w,c
  1876  000AFC  0102               	movlb	2	; () banked
  1877  000AFE  591B               	subwfb	(printf@_val+3)& (0+255),w,b
  1878  000B00  A0D8               	btfss	status,0,c
  1879  000B02  D003               	goto	l5046
  1880                           
  1881                           ; BSR set to: 2
  1882                           
  1883                           ; BSR set to: 2
  1884                           
  1885                           ; BSR set to: 2
  1886                           ;doprnt.c: 1147: break;
  1887  000B04  0102               	movlb	2	; () banked
  1888  000B06  2B22               	incf	printf@c& (0+255),f,b
  1889  000B08  D7DD               	goto	L4
  1890  000B0A                     l5046:
  1891                           
  1892                           ; BSR set to: 2
  1893                           ;doprnt.c: 1184: {
  1894                           ;doprnt.c: 1197: if(flag & 0x03)
  1895  000B0A  0E03               	movlw	3
  1896  000B0C  0102               	movlb	2	; () banked
  1897  000B0E  1511               	andwf	printf@flag& (0+255),w,b
  1898  000B10  0100               	movlb	0	; () banked
  1899  000B12  6F9E               	movwf	??_printf& (0+255),b
  1900  000B14  0E00               	movlw	0
  1901  000B16  0102               	movlb	2	; () banked
  1902  000B18  1512               	andwf	(printf@flag+1)& (0+255),w,b
  1903  000B1A  0100               	movlb	0	; () banked
  1904  000B1C  6F9F               	movwf	(??_printf+1)& (0+255),b
  1905  000B1E  0100               	movlb	0	; () banked
  1906  000B20  519F               	movf	(??_printf+1)& (0+255),w,b
  1907  000B22  119E               	iorwf	??_printf& (0+255),w,b
  1908  000B24  B4D8               	btfsc	status,2,c
  1909  000B26  D04A               	goto	l5056
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;doprnt.c: 1199: (putch('-') );
  1913  000B28  0E2D               	movlw	45
  1914  000B2A  ECDB  F01B         	call	_putch
  1915  000B2E  D046               	goto	l5056
  1916  000B30                     l5050:
  1917                           
  1918                           ;doprnt.c: 1209: {
  1919                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  1920  000B30  C218  F01B         	movff	printf@_val,___lldiv@dividend
  1921  000B34  C219  F01C         	movff	printf@_val+1,___lldiv@dividend+1
  1922  000B38  C21A  F01D         	movff	printf@_val+2,___lldiv@dividend+2
  1923  000B3C  C21B  F01E         	movff	printf@_val+3,___lldiv@dividend+3
  1924  000B40  0102               	movlb	2	; () banked
  1925  000B42  5122               	movf	printf@c& (0+255),w,b
  1926  000B44  0D04               	mullw	4
  1927  000B46  0E01               	movlw	low _dpowers
  1928  000B48  24F3               	addwf	prodl,w,c
  1929  000B4A  6EF6               	movwf	tblptrl,c
  1930  000B4C  0E06               	movlw	high _dpowers
  1931  000B4E  20F4               	addwfc	prodh,w,c
  1932  000B50  6EF7               	movwf	tblptrh,c
  1933  000B52                     	if	0	;There are less than 3 active tblptr bytes
  1934  000B52                     	endif
  1935  000B52  0009               	tblrd		*+
  1936  000B54  CFF5 F01F          	movff	tablat,___lldiv@divisor
  1937  000B58  0009               	tblrd		*+
  1938  000B5A  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  1939  000B5E  0009               	tblrd		*+
  1940  000B60  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  1941  000B64  000A               	tblrd		*-
  1942  000B66  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  1943  000B6A  EC20  F019         	call	___lldiv	;wreg free
  1944  000B6E  C01B  F207         	movff	?___lldiv,printf@vd
  1945  000B72  C01C  F208         	movff	?___lldiv+1,printf@vd+1
  1946  000B76  C01D  F209         	movff	?___lldiv+2,printf@vd+2
  1947  000B7A  C01E  F20A         	movff	?___lldiv+3,printf@vd+3
  1948                           
  1949                           ;doprnt.c: 1211: vd %= 10;
  1950  000B7E  C207  F028         	movff	printf@vd,___llmod@dividend
  1951  000B82  C208  F029         	movff	printf@vd+1,___llmod@dividend+1
  1952  000B86  C209  F02A         	movff	printf@vd+2,___llmod@dividend+2
  1953  000B8A  C20A  F02B         	movff	printf@vd+3,___llmod@dividend+3
  1954  000B8E  0E0A               	movlw	10
  1955  000B90  6E2C               	movwf	___llmod@divisor,c
  1956  000B92  0E00               	movlw	0
  1957  000B94  6E2D               	movwf	___llmod@divisor+1,c
  1958  000B96  0E00               	movlw	0
  1959  000B98  6E2E               	movwf	___llmod@divisor+2,c
  1960  000B9A  0E00               	movlw	0
  1961  000B9C  6E2F               	movwf	___llmod@divisor+3,c
  1962  000B9E  ECA2  F019         	call	___llmod	;wreg free
  1963  000BA2  C028  F207         	movff	?___llmod,printf@vd
  1964  000BA6  C029  F208         	movff	?___llmod+1,printf@vd+1
  1965  000BAA  C02A  F209         	movff	?___llmod+2,printf@vd+2
  1966  000BAE  C02B  F20A         	movff	?___llmod+3,printf@vd+3
  1967                           
  1968                           ;doprnt.c: 1212: (putch('0' + vd) );
  1969  000BB2  0102               	movlb	2	; () banked
  1970  000BB4  5107               	movf	printf@vd& (0+255),w,b
  1971  000BB6  0F30               	addlw	48
  1972  000BB8  ECDB  F01B         	call	_putch
  1973  000BBC                     l5056:
  1974  000BBC  0102               	movlb	2	; () banked
  1975  000BBE  0722               	decf	printf@c& (0+255),f,b
  1976  000BC0  0102               	movlb	2	; () banked
  1977  000BC2  2922               	incf	printf@c& (0+255),w,b
  1978  000BC4  B4D8               	btfsc	status,2,c
  1979  000BC6  D008               	goto	l5062
  1980  000BC8  D7B3               	goto	l5050
  1981  000BCA                     l5058:
  1982                           
  1983                           ; BSR set to: 2
  1984                           ;doprnt.c: 1217: (putch('0') );
  1985  000BCA  0E30               	movlw	48
  1986  000BCC  ECDB  F01B         	call	_putch
  1987                           
  1988                           ;doprnt.c: 1218: exp--;
  1989  000BD0  0102               	movlb	2	; () banked
  1990  000BD2  071D               	decf	printf@exp& (0+255),f,b
  1991  000BD4  A0D8               	btfss	status,0,c
  1992  000BD6  071E               	decf	(printf@exp+1)& (0+255),f,b
  1993  000BD8                     l5062:
  1994                           
  1995                           ; BSR set to: 2
  1996  000BD8  0102               	movlb	2	; () banked
  1997  000BDA  511E               	movf	(printf@exp+1)& (0+255),w,b
  1998  000BDC  0A80               	xorlw	128
  1999  000BDE  6EF3               	movwf	prodl,c
  2000  000BE0  0E80               	movlw	128
  2001  000BE2  5CF3               	subwf	prodl,w,c
  2002  000BE4  0E01               	movlw	1
  2003  000BE6  B4D8               	btfsc	status,2,c
  2004  000BE8  5D1D               	subwf	printf@exp& (0+255),w,b
  2005  000BEA  B0D8               	btfsc	status,0,c
  2006  000BEC  D7EE               	goto	l5058
  2007                           
  2008                           ; BSR set to: 2
  2009                           ;doprnt.c: 1219: }
  2010                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2011                           
  2012                           ; BSR set to: 2
  2013  000BEE  0102               	movlb	2	; () banked
  2014  000BF0  5117               	movf	(printf@prec+1)& (0+255),w,b
  2015  000BF2  0A80               	xorlw	128
  2016  000BF4  0F80               	addlw	-128
  2017  000BF6  0E09               	movlw	9
  2018  000BF8  B4D8               	btfsc	status,2,c
  2019  000BFA  5D16               	subwf	printf@prec& (0+255),w,b
  2020  000BFC  A0D8               	btfss	status,0,c
  2021  000BFE  D004               	goto	l644
  2022                           
  2023                           ; BSR set to: 2
  2024                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2025  000C00  0E08               	movlw	8
  2026  000C02  0102               	movlb	2	; () banked
  2027  000C04  6F22               	movwf	printf@c& (0+255),b
  2028  000C06  D002               	goto	l5068
  2029  000C08                     l644:
  2030                           
  2031                           ; BSR set to: 2
  2032                           ;doprnt.c: 1222: else
  2033                           ;doprnt.c: 1223: c = prec;
  2034  000C08  C216  F222         	movff	printf@prec,printf@c
  2035  000C0C                     l5068:
  2036                           
  2037                           ; BSR set to: 2
  2038                           ;doprnt.c: 1224: prec -= c;
  2039  000C0C  0102               	movlb	2	; () banked
  2040  000C0E  5122               	movf	printf@c& (0+255),w,b
  2041  000C10  0102               	movlb	2	; () banked
  2042  000C12  5F16               	subwf	printf@prec& (0+255),f,b
  2043  000C14  0E00               	movlw	0
  2044  000C16  0102               	movlb	2	; () banked
  2045  000C18  BF22               	btfsc	printf@c& (0+255),7,b
  2046  000C1A  0EFF               	movlw	255
  2047  000C1C  0102               	movlb	2	; () banked
  2048  000C1E  5B17               	subwfb	(printf@prec+1)& (0+255),f,b
  2049                           
  2050                           ; BSR set to: 2
  2051                           ;doprnt.c: 1228: if(c)
  2052  000C20  0102               	movlb	2	; () banked
  2053  000C22  5122               	movf	printf@c& (0+255),w,b
  2054  000C24  B4D8               	btfsc	status,2,c
  2055  000C26  D003               	goto	l5074
  2056                           
  2057                           ; BSR set to: 2
  2058                           ;doprnt.c: 1230: (putch('.') );
  2059  000C28  0E2E               	movlw	46
  2060  000C2A  ECDB  F01B         	call	_putch
  2061  000C2E                     l5074:
  2062                           
  2063                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2064  000C2E  0102               	movlb	2	; () banked
  2065  000C30  5122               	movf	printf@c& (0+255),w,b
  2066  000C32  ECC2  F00A         	call	_scale
  2067  000C36  C07B  F200         	movff	?_scale,_printf$1696
  2068  000C3A  C07C  F201         	movff	?_scale+1,_printf$1696+1
  2069  000C3E  C07D  F202         	movff	?_scale+2,_printf$1696+2
  2070                           
  2071                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2072  000C42  C21F  F06F         	movff	printf@fval,___ftmul@f2
  2073  000C46  C220  F070         	movff	printf@fval+1,___ftmul@f2+1
  2074  000C4A  C221  F071         	movff	printf@fval+2,___ftmul@f2+2
  2075  000C4E  C200  F06C         	movff	_printf$1696,___ftmul@f1
  2076  000C52  C201  F06D         	movff	_printf$1696+1,___ftmul@f1+1
  2077  000C56  C202  F06E         	movff	_printf$1696+2,___ftmul@f1+2
  2078  000C5A  EC16  F012         	call	___ftmul	;wreg free
  2079  000C5E  C06C  F082         	movff	?___ftmul,___fttol@f1
  2080  000C62  C06D  F083         	movff	?___ftmul+1,___fttol@f1+1
  2081  000C66  C06E  F084         	movff	?___ftmul+2,___fttol@f1+2
  2082  000C6A  EC58  F011         	call	___fttol	;wreg free
  2083  000C6E  C082  F218         	movff	?___fttol,printf@_val
  2084  000C72  C083  F219         	movff	?___fttol+1,printf@_val+1
  2085  000C76  C084  F21A         	movff	?___fttol+2,printf@_val+2
  2086  000C7A  C085  F21B         	movff	?___fttol+3,printf@_val+3
  2087                           
  2088                           ;doprnt.c: 1237: while(c--) {
  2089  000C7E  D06D               	goto	l5086
  2090  000C80                     l5078:
  2091                           
  2092                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  2093  000C80  C218  F01B         	movff	printf@_val,___lldiv@dividend
  2094  000C84  C219  F01C         	movff	printf@_val+1,___lldiv@dividend+1
  2095  000C88  C21A  F01D         	movff	printf@_val+2,___lldiv@dividend+2
  2096  000C8C  C21B  F01E         	movff	printf@_val+3,___lldiv@dividend+3
  2097  000C90  0102               	movlb	2	; () banked
  2098  000C92  5122               	movf	printf@c& (0+255),w,b
  2099  000C94  0D04               	mullw	4
  2100  000C96  0E01               	movlw	low _dpowers
  2101  000C98  24F3               	addwf	prodl,w,c
  2102  000C9A  6EF6               	movwf	tblptrl,c
  2103  000C9C  0E06               	movlw	high _dpowers
  2104  000C9E  20F4               	addwfc	prodh,w,c
  2105  000CA0  6EF7               	movwf	tblptrh,c
  2106  000CA2                     	if	0	;There are less than 3 active tblptr bytes
  2107  000CA2                     	endif
  2108  000CA2  0009               	tblrd		*+
  2109  000CA4  CFF5 F01F          	movff	tablat,___lldiv@divisor
  2110  000CA8  0009               	tblrd		*+
  2111  000CAA  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  2112  000CAE  0009               	tblrd		*+
  2113  000CB0  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  2114  000CB4  000A               	tblrd		*-
  2115  000CB6  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  2116  000CBA  EC20  F019         	call	___lldiv	;wreg free
  2117  000CBE  C01B  F20B         	movff	?___lldiv,printf@vd_1042
  2118  000CC2  C01C  F20C         	movff	?___lldiv+1,printf@vd_1042+1
  2119  000CC6  C01D  F20D         	movff	?___lldiv+2,printf@vd_1042+2
  2120  000CCA  C01E  F20E         	movff	?___lldiv+3,printf@vd_1042+3
  2121                           
  2122                           ;doprnt.c: 1239: vd %= 10;
  2123  000CCE  C20B  F028         	movff	printf@vd_1042,___llmod@dividend
  2124  000CD2  C20C  F029         	movff	printf@vd_1042+1,___llmod@dividend+1
  2125  000CD6  C20D  F02A         	movff	printf@vd_1042+2,___llmod@dividend+2
  2126  000CDA  C20E  F02B         	movff	printf@vd_1042+3,___llmod@dividend+3
  2127  000CDE  0E0A               	movlw	10
  2128  000CE0  6E2C               	movwf	___llmod@divisor,c
  2129  000CE2  0E00               	movlw	0
  2130  000CE4  6E2D               	movwf	___llmod@divisor+1,c
  2131  000CE6  0E00               	movlw	0
  2132  000CE8  6E2E               	movwf	___llmod@divisor+2,c
  2133  000CEA  0E00               	movlw	0
  2134  000CEC  6E2F               	movwf	___llmod@divisor+3,c
  2135  000CEE  ECA2  F019         	call	___llmod	;wreg free
  2136  000CF2  C028  F20B         	movff	?___llmod,printf@vd_1042
  2137  000CF6  C029  F20C         	movff	?___llmod+1,printf@vd_1042+1
  2138  000CFA  C02A  F20D         	movff	?___llmod+2,printf@vd_1042+2
  2139  000CFE  C02B  F20E         	movff	?___llmod+3,printf@vd_1042+3
  2140                           
  2141                           ;doprnt.c: 1240: (putch('0' + vd) );
  2142  000D02  0102               	movlb	2	; () banked
  2143  000D04  510B               	movf	printf@vd_1042& (0+255),w,b
  2144  000D06  0F30               	addlw	48
  2145  000D08  ECDB  F01B         	call	_putch
  2146                           
  2147                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  2148  000D0C  C218  F028         	movff	printf@_val,___llmod@dividend
  2149  000D10  C219  F029         	movff	printf@_val+1,___llmod@dividend+1
  2150  000D14  C21A  F02A         	movff	printf@_val+2,___llmod@dividend+2
  2151  000D18  C21B  F02B         	movff	printf@_val+3,___llmod@dividend+3
  2152  000D1C  0102               	movlb	2	; () banked
  2153  000D1E  5122               	movf	printf@c& (0+255),w,b
  2154  000D20  0D04               	mullw	4
  2155  000D22  0E01               	movlw	low _dpowers
  2156  000D24  24F3               	addwf	prodl,w,c
  2157  000D26  6EF6               	movwf	tblptrl,c
  2158  000D28  0E06               	movlw	high _dpowers
  2159  000D2A  20F4               	addwfc	prodh,w,c
  2160  000D2C  6EF7               	movwf	tblptrh,c
  2161  000D2E                     	if	0	;There are less than 3 active tblptr bytes
  2162  000D2E                     	endif
  2163  000D2E  0009               	tblrd		*+
  2164  000D30  CFF5 F02C          	movff	tablat,___llmod@divisor
  2165  000D34  0009               	tblrd		*+
  2166  000D36  CFF5 F02D          	movff	tablat,___llmod@divisor+1
  2167  000D3A  0009               	tblrd		*+
  2168  000D3C  CFF5 F02E          	movff	tablat,___llmod@divisor+2
  2169  000D40  000A               	tblrd		*-
  2170  000D42  CFF5 F02F          	movff	tablat,___llmod@divisor+3
  2171  000D46  ECA2  F019         	call	___llmod	;wreg free
  2172  000D4A  C028  F218         	movff	?___llmod,printf@_val
  2173  000D4E  C029  F219         	movff	?___llmod+1,printf@_val+1
  2174  000D52  C02A  F21A         	movff	?___llmod+2,printf@_val+2
  2175  000D56  C02B  F21B         	movff	?___llmod+3,printf@_val+3
  2176  000D5A                     l5086:
  2177  000D5A  0102               	movlb	2	; () banked
  2178  000D5C  0722               	decf	printf@c& (0+255),f,b
  2179  000D5E  0102               	movlb	2	; () banked
  2180  000D60  2922               	incf	printf@c& (0+255),w,b
  2181  000D62  B4D8               	btfsc	status,2,c
  2182  000D64  D008               	goto	l5092
  2183  000D66  D78C               	goto	l5078
  2184  000D68                     l5088:
  2185                           
  2186                           ; BSR set to: 2
  2187                           ;doprnt.c: 1245: (putch('0') );
  2188  000D68  0E30               	movlw	48
  2189  000D6A  ECDB  F01B         	call	_putch
  2190                           
  2191                           ;doprnt.c: 1246: prec--;
  2192  000D6E  0102               	movlb	2	; () banked
  2193  000D70  0716               	decf	printf@prec& (0+255),f,b
  2194  000D72  A0D8               	btfss	status,0,c
  2195  000D74  0717               	decf	(printf@prec+1)& (0+255),f,b
  2196  000D76                     l5092:
  2197                           
  2198                           ; BSR set to: 2
  2199  000D76  0102               	movlb	2	; () banked
  2200  000D78  5117               	movf	(printf@prec+1)& (0+255),w,b
  2201  000D7A  1116               	iorwf	printf@prec& (0+255),w,b
  2202  000D7C  B4D8               	btfsc	status,2,c
  2203  000D7E  D0D8               	goto	l5130
  2204  000D80  D7F3               	goto	l5088
  2205  000D82                     l5094:
  2206                           
  2207                           ; BSR set to: 2
  2208                           ;doprnt.c: 1255: }
  2209                           ;doprnt.c: 1262: {
  2210                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2211  000D82  C20F  FFD9         	movff	printf@ap,fsr2l
  2212  000D86  C210  FFDA         	movff	printf@ap+1,fsr2h
  2213  000D8A  0102               	movlb	2	; () banked
  2214  000D8C  CFDE F218          	movff	postinc2,printf@_val
  2215  000D90  0102               	movlb	2	; () banked
  2216  000D92  CFDD F219          	movff	postdec2,printf@_val+1
  2217  000D96  0102               	movlb	2	; () banked
  2218  000D98  0E00               	movlw	0
  2219  000D9A  0102               	movlb	2	; () banked
  2220  000D9C  BF19               	btfsc	(printf@_val+1)& (0+255),7,b
  2221  000D9E  0EFF               	movlw	-1
  2222  000DA0  0102               	movlb	2	; () banked
  2223  000DA2  6F1A               	movwf	(printf@_val+2)& (0+255),b
  2224  000DA4  0102               	movlb	2	; () banked
  2225  000DA6  6F1B               	movwf	(printf@_val+3)& (0+255),b
  2226                           
  2227                           ; BSR set to: 2
  2228  000DA8  0E02               	movlw	2
  2229  000DAA  0102               	movlb	2	; () banked
  2230  000DAC  270F               	addwf	printf@ap& (0+255),f,b
  2231  000DAE  0E00               	movlw	0
  2232  000DB0  0102               	movlb	2	; () banked
  2233  000DB2  2310               	addwfc	(printf@ap+1)& (0+255),f,b
  2234                           
  2235                           ; BSR set to: 2
  2236                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  2237  000DB4  0102               	movlb	2	; () banked
  2238  000DB6  511B               	movf	(printf@_val+3)& (0+255),w,b
  2239  000DB8  0A80               	xorlw	128
  2240  000DBA  0F80               	addlw	128
  2241  000DBC  E10B               	bnz	u5315
  2242  000DBE  0E00               	movlw	0
  2243  000DC0  0102               	movlb	2	; () banked
  2244  000DC2  5D1A               	subwf	(printf@_val+2)& (0+255),w,b
  2245  000DC4  E107               	bnz	u5315
  2246  000DC6  0E00               	movlw	0
  2247  000DC8  0102               	movlb	2	; () banked
  2248  000DCA  5D19               	subwf	(printf@_val+1)& (0+255),w,b
  2249  000DCC  E103               	bnz	u5315
  2250  000DCE  0E00               	movlw	0
  2251  000DD0  0102               	movlb	2	; () banked
  2252  000DD2  5D18               	subwf	printf@_val& (0+255),w,b
  2253  000DD4                     u5315:
  2254  000DD4  B0D8               	btfsc	status,0,c
  2255  000DD6  D012               	goto	l5104
  2256                           
  2257                           ; BSR set to: 2
  2258                           ;doprnt.c: 1271: flag |= 0x03;
  2259  000DD8  0E03               	movlw	3
  2260  000DDA  0102               	movlb	2	; () banked
  2261  000DDC  1311               	iorwf	printf@flag& (0+255),f,b
  2262                           
  2263                           ; BSR set to: 2
  2264                           ;doprnt.c: 1272: _val._val = -_val._val;
  2265  000DDE  0102               	movlb	2	; () banked
  2266  000DE0  1F1B               	comf	(printf@_val+3)& (0+255),f,b
  2267  000DE2  0102               	movlb	2	; () banked
  2268  000DE4  1F1A               	comf	(printf@_val+2)& (0+255),f,b
  2269  000DE6  0102               	movlb	2	; () banked
  2270  000DE8  1F19               	comf	(printf@_val+1)& (0+255),f,b
  2271  000DEA  0102               	movlb	2	; () banked
  2272  000DEC  6D18               	negf	printf@_val& (0+255),b
  2273  000DEE  0E00               	movlw	0
  2274  000DF0  0102               	movlb	2	; () banked
  2275  000DF2  2319               	addwfc	(printf@_val+1)& (0+255),f,b
  2276  000DF4  0102               	movlb	2	; () banked
  2277  000DF6  231A               	addwfc	(printf@_val+2)& (0+255),f,b
  2278  000DF8  0102               	movlb	2	; () banked
  2279  000DFA  231B               	addwfc	(printf@_val+3)& (0+255),f,b
  2280  000DFC                     l5104:
  2281                           
  2282                           ; BSR set to: 2
  2283                           ;doprnt.c: 1273: }
  2284                           ;doprnt.c: 1275: }
  2285                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2286  000DFC  0E01               	movlw	1
  2287  000DFE  0102               	movlb	2	; () banked
  2288  000E00  6F22               	movwf	printf@c& (0+255),b
  2289  000E02                     
  2290                           ; BSR set to: 2
  2291  000E02  0102               	movlb	2	; () banked
  2292  000E04  5122               	movf	printf@c& (0+255),w,b
  2293  000E06  0A0A               	xorlw	10
  2294  000E08  B4D8               	btfsc	status,2,c
  2295  000E0A  D01E               	goto	l5118
  2296                           
  2297                           ; BSR set to: 2
  2298                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2299                           
  2300                           ; BSR set to: 2
  2301                           
  2302                           ; BSR set to: 2
  2303  000E0C  0102               	movlb	2	; () banked
  2304  000E0E  5122               	movf	printf@c& (0+255),w,b
  2305  000E10  0D04               	mullw	4
  2306  000E12  0E01               	movlw	low _dpowers
  2307  000E14  24F3               	addwf	prodl,w,c
  2308  000E16  6EF6               	movwf	tblptrl,c
  2309  000E18  0E06               	movlw	high _dpowers
  2310  000E1A  20F4               	addwfc	prodh,w,c
  2311  000E1C  6EF7               	movwf	tblptrh,c
  2312  000E1E                     	if	0	;There are less than 3 active tblptr bytes
  2313  000E1E                     	endif
  2314  000E1E  0009               	tblrd		*+
  2315  000E20  50F5               	movf	tablat,w,c
  2316  000E22  0102               	movlb	2	; () banked
  2317  000E24  5D18               	subwf	printf@_val& (0+255),w,b
  2318  000E26  0009               	tblrd		*+
  2319  000E28  50F5               	movf	tablat,w,c
  2320  000E2A  0102               	movlb	2	; () banked
  2321  000E2C  5919               	subwfb	(printf@_val+1)& (0+255),w,b
  2322  000E2E  0009               	tblrd		*+
  2323  000E30  50F5               	movf	tablat,w,c
  2324  000E32  0102               	movlb	2	; () banked
  2325  000E34  591A               	subwfb	(printf@_val+2)& (0+255),w,b
  2326  000E36  0009               	tblrd		*+
  2327  000E38  50F5               	movf	tablat,w,c
  2328  000E3A  0102               	movlb	2	; () banked
  2329  000E3C  591B               	subwfb	(printf@_val+3)& (0+255),w,b
  2330  000E3E  A0D8               	btfss	status,0,c
  2331  000E40  D003               	goto	l5118
  2332                           
  2333                           ; BSR set to: 2
  2334                           
  2335                           ; BSR set to: 2
  2336                           
  2337                           ; BSR set to: 2
  2338                           ;doprnt.c: 1316: break;
  2339  000E42  0102               	movlb	2	; () banked
  2340  000E44  2B22               	incf	printf@c& (0+255),f,b
  2341  000E46  D7DD               	goto	L5
  2342  000E48                     l5118:
  2343                           
  2344                           ; BSR set to: 2
  2345                           ;doprnt.c: 1431: {
  2346                           ;doprnt.c: 1447: if(flag & 0x03)
  2347  000E48  0E03               	movlw	3
  2348  000E4A  0102               	movlb	2	; () banked
  2349  000E4C  1511               	andwf	printf@flag& (0+255),w,b
  2350  000E4E  0100               	movlb	0	; () banked
  2351  000E50  6F9E               	movwf	??_printf& (0+255),b
  2352  000E52  0E00               	movlw	0
  2353  000E54  0102               	movlb	2	; () banked
  2354  000E56  1512               	andwf	(printf@flag+1)& (0+255),w,b
  2355  000E58  0100               	movlb	0	; () banked
  2356  000E5A  6F9F               	movwf	(??_printf+1)& (0+255),b
  2357  000E5C  0100               	movlb	0	; () banked
  2358  000E5E  519F               	movf	(??_printf+1)& (0+255),w,b
  2359  000E60  119E               	iorwf	??_printf& (0+255),w,b
  2360  000E62  B4D8               	btfsc	status,2,c
  2361  000E64  D003               	goto	l5122
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;doprnt.c: 1448: (putch('-') );
  2365  000E66  0E2D               	movlw	45
  2366  000E68  ECDB  F01B         	call	_putch
  2367  000E6C                     l5122:
  2368                           
  2369                           ;doprnt.c: 1478: }
  2370                           ;doprnt.c: 1481: prec = c;
  2371  000E6C  0102               	movlb	2	; () banked
  2372  000E6E  5122               	movf	printf@c& (0+255),w,b
  2373  000E70  0102               	movlb	2	; () banked
  2374  000E72  6F16               	movwf	printf@prec& (0+255),b
  2375  000E74  0102               	movlb	2	; () banked
  2376  000E76  6B17               	clrf	(printf@prec+1)& (0+255),b
  2377  000E78  0102               	movlb	2	; () banked
  2378  000E7A  BF16               	btfsc	printf@prec& (0+255),7,b
  2379  000E7C  0717               	decf	(printf@prec+1)& (0+255),f,b
  2380                           
  2381                           ;doprnt.c: 1483: while(prec--) {
  2382  000E7E  D04E               	goto	l5128
  2383  000E80                     l5124:
  2384                           
  2385                           ; BSR set to: 2
  2386                           ;doprnt.c: 1487: {
  2387                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2388  000E80  0102               	movlb	2	; () banked
  2389  000E82  C216  F09E         	movff	printf@prec,??_printf
  2390  000E86  0102               	movlb	2	; () banked
  2391  000E88  C217  F09F         	movff	printf@prec+1,??_printf+1
  2392  000E8C  0100               	movlb	0	; () banked
  2393  000E8E  90D8               	bcf	status,0,c
  2394  000E90  379E               	rlcf	??_printf& (0+255),f,b
  2395  000E92  379F               	rlcf	(??_printf+1)& (0+255),f,b
  2396  000E94  0100               	movlb	0	; () banked
  2397  000E96  90D8               	bcf	status,0,c
  2398  000E98  379E               	rlcf	??_printf& (0+255),f,b
  2399  000E9A  379F               	rlcf	(??_printf+1)& (0+255),f,b
  2400  000E9C  0E01               	movlw	low _dpowers
  2401  000E9E  0100               	movlb	0	; () banked
  2402  000EA0  259E               	addwf	??_printf& (0+255),w,b
  2403  000EA2  6EF6               	movwf	tblptrl,c
  2404  000EA4  0E06               	movlw	high _dpowers
  2405  000EA6  219F               	addwfc	(??_printf+1)& (0+255),w,b
  2406  000EA8  6EF7               	movwf	tblptrh,c
  2407  000EAA                     	if	0	;There are less than 3 active tblptr bytes
  2408  000EAA                     	endif
  2409  000EAA  0009               	tblrd		*+
  2410  000EAC  CFF5 F01F          	movff	tablat,___lldiv@divisor
  2411  000EB0  0009               	tblrd		*+
  2412  000EB2  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  2413  000EB6  0009               	tblrd		*+
  2414  000EB8  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  2415  000EBC  000A               	tblrd		*-
  2416  000EBE  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  2417  000EC2  C218  F01B         	movff	printf@_val,___lldiv@dividend
  2418  000EC6  C219  F01C         	movff	printf@_val+1,___lldiv@dividend+1
  2419  000ECA  C21A  F01D         	movff	printf@_val+2,___lldiv@dividend+2
  2420  000ECE  C21B  F01E         	movff	printf@_val+3,___lldiv@dividend+3
  2421  000ED2  EC20  F019         	call	___lldiv	;wreg free
  2422  000ED6  C01B  F028         	movff	?___lldiv,___llmod@dividend
  2423  000EDA  C01C  F029         	movff	?___lldiv+1,___llmod@dividend+1
  2424  000EDE  C01D  F02A         	movff	?___lldiv+2,___llmod@dividend+2
  2425  000EE2  C01E  F02B         	movff	?___lldiv+3,___llmod@dividend+3
  2426  000EE6  0E0A               	movlw	10
  2427  000EE8  6E2C               	movwf	___llmod@divisor,c
  2428  000EEA  0E00               	movlw	0
  2429  000EEC  6E2D               	movwf	___llmod@divisor+1,c
  2430  000EEE  0E00               	movlw	0
  2431  000EF0  6E2E               	movwf	___llmod@divisor+2,c
  2432  000EF2  0E00               	movlw	0
  2433  000EF4  6E2F               	movwf	___llmod@divisor+3,c
  2434  000EF6  ECA2  F019         	call	___llmod	;wreg free
  2435  000EFA  C028  F0A0         	movff	?___llmod,??_printf+2
  2436  000EFE  C029  F0A1         	movff	?___llmod+1,??_printf+3
  2437  000F02  C02A  F0A2         	movff	?___llmod+2,??_printf+4
  2438  000F06  C02B  F0A3         	movff	?___llmod+3,??_printf+5
  2439  000F0A  0100               	movlb	0	; () banked
  2440  000F0C  51A0               	movf	(??_printf+2)& (0+255),w,b
  2441  000F0E  0F30               	addlw	48
  2442  000F10  0102               	movlb	2	; () banked
  2443  000F12  6F22               	movwf	printf@c& (0+255),b
  2444                           
  2445                           ; BSR set to: 2
  2446                           ;doprnt.c: 1532: }
  2447                           ;doprnt.c: 1533: (putch(c) );
  2448  000F14  0102               	movlb	2	; () banked
  2449  000F16  5122               	movf	printf@c& (0+255),w,b
  2450  000F18  ECDB  F01B         	call	_putch
  2451  000F1C                     l5128:
  2452  000F1C  0102               	movlb	2	; () banked
  2453  000F1E  0716               	decf	printf@prec& (0+255),f,b
  2454  000F20  A0D8               	btfss	status,0,c
  2455  000F22  0717               	decf	(printf@prec+1)& (0+255),f,b
  2456  000F24  0102               	movlb	2	; () banked
  2457  000F26  2916               	incf	printf@prec& (0+255),w,b
  2458  000F28  B4D8               	btfsc	status,2,c
  2459  000F2A  2917               	incf	(printf@prec+1)& (0+255),w,b
  2460  000F2C  A4D8               	btfss	status,2,c
  2461  000F2E  D7A8               	goto	l5124
  2462  000F30                     l5130:
  2463  000F30  0100               	movlb	0	; () banked
  2464  000F32  C097  FFF6         	movff	printf@f,tblptrl
  2465  000F36  0100               	movlb	0	; () banked
  2466  000F38  C098  FFF7         	movff	printf@f+1,tblptrh
  2467  000F3C  0100               	movlb	0	; () banked
  2468  000F3E  4B97               	infsnz	printf@f& (0+255),f,b
  2469  000F40  2B98               	incf	(printf@f+1)& (0+255),f,b
  2470  000F42                     	if	0	;tblptru may be non-zero
  2471  000F42                     	endif
  2472  000F42                     	if	0	;tblptru may be non-zero
  2473  000F42                     	endif
  2474  000F42  0008               	tblrd		*
  2475  000F44  0102               	movlb	2	; () banked
  2476  000F46  CFF5 F222          	movff	tablat,printf@c
  2477  000F4A  0102               	movlb	2	; () banked
  2478  000F4C  6722               	tstfsz	printf@c& (0+255),b
  2479  000F4E  EF66  F003         	goto	l4946
  2480  000F52  0012               	return	
  2481  000F54                     __end_of_printf:
  2482                           	opt stack 0
  2483                           tblptru	equ	0xFF8
  2484                           tblptrh	equ	0xFF7
  2485                           tblptrl	equ	0xFF6
  2486                           tablat	equ	0xFF5
  2487                           prodh	equ	0xFF4
  2488                           prodl	equ	0xFF3
  2489                           intcon	equ	0xFF2
  2490                           postinc0	equ	0xFEE
  2491                           wreg	equ	0xFE8
  2492                           postinc2	equ	0xFDE
  2493                           postdec2	equ	0xFDD
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function _scale *****************
  2499 ;; Defined at:
  2500 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  scl             1    wreg     char 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  scl             1   33[BANK0 ] char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  3   27[BANK0 ] char 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2514 ;;      Params:         0       3       0       0       0       0       0
  2515 ;;      Locals:         0       4       0       0       0       0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0
  2517 ;;      Totals:         0       7       0       0       0       0       0
  2518 ;;Total ram usage:        7 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    6
  2521 ;; This function calls:
  2522 ;;		___awdiv
  2523 ;;		___awmod
  2524 ;;		___ftmul
  2525 ;;		___wmul
  2526 ;; This function is called by:
  2527 ;;		_printf
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text2
  2532  001584                     __ptext2:
  2533                           	opt stack 0
  2534  001584                     _scale:
  2535                           	opt stack 23
  2536                           
  2537                           ; BSR set to: 2
  2538                           ;incstack = 0
  2539                           ;scale@scl stored from wreg
  2540  001584  0100               	movlb	0	; () banked
  2541  001586  6F81               	movwf	scale@scl& (0+255),b
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;doprnt.c: 428: if(scl < 0) {
  2545  001588  0100               	movlb	0	; () banked
  2546  00158A  AF81               	btfss	scale@scl& (0+255),7,b
  2547  00158C  D11C               	goto	l4552
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;doprnt.c: 429: scl = -scl;
  2551  00158E  0100               	movlb	0	; () banked
  2552  001590  6D81               	negf	scale@scl& (0+255),b
  2553                           
  2554                           ;doprnt.c: 430: if(scl>=110)
  2555  001592  0100               	movlb	0	; () banked
  2556  001594  5181               	movf	scale@scl& (0+255),w,b
  2557  001596  0A80               	xorlw	128
  2558  001598  0F12               	addlw	-238
  2559  00159A  A0D8               	btfss	status,0,c
  2560  00159C  D09D               	goto	l4542
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2564  00159E  0E00               	movlw	0
  2565  0015A0  6E2C               	movwf	___wmul@multiplicand+1,c
  2566  0015A2  0E03               	movlw	3
  2567  0015A4  6E2B               	movwf	___wmul@multiplicand,c
  2568  0015A6  0E00               	movlw	0
  2569  0015A8  6E24               	movwf	___awdiv@divisor+1,c
  2570  0015AA  0E0A               	movlw	10
  2571  0015AC  6E23               	movwf	___awdiv@divisor,c
  2572  0015AE  0E00               	movlw	0
  2573  0015B0  6E1E               	movwf	___awmod@divisor+1,c
  2574  0015B2  0E64               	movlw	100
  2575  0015B4  6E1D               	movwf	___awmod@divisor,c
  2576  0015B6  0100               	movlb	0	; () banked
  2577  0015B8  5181               	movf	scale@scl& (0+255),w,b
  2578  0015BA  6E1B               	movwf	___awmod@dividend,c
  2579  0015BC  6A1C               	clrf	___awmod@dividend+1,c
  2580  0015BE  BE1B               	btfsc	___awmod@dividend,7,c
  2581  0015C0  061C               	decf	___awmod@dividend+1,f,c
  2582  0015C2  EC90  F018         	call	___awmod	;wreg free
  2583  0015C6  C01B  F021         	movff	?___awmod,___awdiv@dividend
  2584  0015CA  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  2585  0015CE  ECF5  F017         	call	___awdiv	;wreg free
  2586  0015D2  0E09               	movlw	9
  2587  0015D4  2421               	addwf	?___awdiv,w,c
  2588  0015D6  6E29               	movwf	___wmul@multiplier,c
  2589  0015D8  0E00               	movlw	0
  2590  0015DA  2022               	addwfc	?___awdiv+1,w,c
  2591  0015DC  6E2A               	movwf	___wmul@multiplier+1,c
  2592  0015DE  EC62  F01B         	call	___wmul	;wreg free
  2593  0015E2  0E29               	movlw	low __npowers_
  2594  0015E4  2429               	addwf	?___wmul,w,c
  2595  0015E6  6EF6               	movwf	tblptrl,c
  2596  0015E8  0E06               	movlw	high __npowers_
  2597  0015EA  202A               	addwfc	?___wmul+1,w,c
  2598  0015EC  6EF7               	movwf	tblptrh,c
  2599  0015EE                     	if	0	;There are less than 3 active tblptr bytes
  2600  0015EE                     	endif
  2601  0015EE  0009               	tblrd		*+
  2602  0015F0  0100               	movlb	0	; () banked
  2603  0015F2  CFF5 F06F          	movff	tablat,___ftmul@f2
  2604  0015F6  0009               	tblrd		*+
  2605  0015F8  0100               	movlb	0	; () banked
  2606  0015FA  CFF5 F070          	movff	tablat,___ftmul@f2+1
  2607  0015FE  000A               	tblrd		*-
  2608  001600  0100               	movlb	0	; () banked
  2609  001602  CFF5 F071          	movff	tablat,___ftmul@f2+2
  2610  001606  0E00               	movlw	0
  2611  001608  6E24               	movwf	___awdiv@divisor+1,c
  2612  00160A  0E64               	movlw	100
  2613  00160C  6E23               	movwf	___awdiv@divisor,c
  2614  00160E  0100               	movlb	0	; () banked
  2615  001610  5181               	movf	scale@scl& (0+255),w,b
  2616  001612  6E21               	movwf	___awdiv@dividend,c
  2617  001614  6A22               	clrf	___awdiv@dividend+1,c
  2618  001616  BE21               	btfsc	___awdiv@dividend,7,c
  2619  001618  0622               	decf	___awdiv@dividend+1,f,c
  2620  00161A  ECF5  F017         	call	___awdiv	;wreg free
  2621  00161E  0E12               	movlw	18
  2622  001620  2421               	addwf	?___awdiv,w,c
  2623  001622  6E29               	movwf	___wmul@multiplier,c
  2624  001624  0E00               	movlw	0
  2625  001626  2022               	addwfc	?___awdiv+1,w,c
  2626  001628  6E2A               	movwf	___wmul@multiplier+1,c
  2627  00162A  0E00               	movlw	0
  2628  00162C  6E2C               	movwf	___wmul@multiplicand+1,c
  2629  00162E  0E03               	movlw	3
  2630  001630  6E2B               	movwf	___wmul@multiplicand,c
  2631  001632  EC62  F01B         	call	___wmul	;wreg free
  2632  001636  0E29               	movlw	low __npowers_
  2633  001638  2429               	addwf	?___wmul,w,c
  2634  00163A  6EF6               	movwf	tblptrl,c
  2635  00163C  0E06               	movlw	high __npowers_
  2636  00163E  202A               	addwfc	?___wmul+1,w,c
  2637  001640  6EF7               	movwf	tblptrh,c
  2638  001642                     	if	0	;There are less than 3 active tblptr bytes
  2639  001642                     	endif
  2640  001642  0009               	tblrd		*+
  2641  001644  0100               	movlb	0	; () banked
  2642  001646  CFF5 F06C          	movff	tablat,___ftmul@f1
  2643  00164A  0009               	tblrd		*+
  2644  00164C  0100               	movlb	0	; () banked
  2645  00164E  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  2646  001652  000A               	tblrd		*-
  2647  001654  0100               	movlb	0	; () banked
  2648  001656  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  2649  00165A  EC16  F012         	call	___ftmul	;wreg free
  2650  00165E  C06C  F07E         	movff	?___ftmul,_scale$1695
  2651  001662  C06D  F07F         	movff	?___ftmul+1,_scale$1695+1
  2652  001666  C06E  F080         	movff	?___ftmul+2,_scale$1695+2
  2653                           
  2654                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2655  00166A  C07E  F06C         	movff	_scale$1695,___ftmul@f1
  2656  00166E  C07F  F06D         	movff	_scale$1695+1,___ftmul@f1+1
  2657  001672  C080  F06E         	movff	_scale$1695+2,___ftmul@f1+2
  2658  001676  0E00               	movlw	0
  2659  001678  6E2C               	movwf	___wmul@multiplicand+1,c
  2660  00167A  0E03               	movlw	3
  2661  00167C  6E2B               	movwf	___wmul@multiplicand,c
  2662  00167E  0E00               	movlw	0
  2663  001680  6E1E               	movwf	___awmod@divisor+1,c
  2664  001682  0E0A               	movlw	10
  2665  001684  6E1D               	movwf	___awmod@divisor,c
  2666  001686  0100               	movlb	0	; () banked
  2667  001688  5181               	movf	scale@scl& (0+255),w,b
  2668  00168A  6E1B               	movwf	___awmod@dividend,c
  2669  00168C  6A1C               	clrf	___awmod@dividend+1,c
  2670  00168E  BE1B               	btfsc	___awmod@dividend,7,c
  2671  001690  061C               	decf	___awmod@dividend+1,f,c
  2672  001692  EC90  F018         	call	___awmod	;wreg free
  2673  001696  C01B  F029         	movff	?___awmod,___wmul@multiplier
  2674  00169A  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  2675  00169E  EC62  F01B         	call	___wmul	;wreg free
  2676  0016A2  0E29               	movlw	low __npowers_
  2677  0016A4  2429               	addwf	?___wmul,w,c
  2678  0016A6  6EF6               	movwf	tblptrl,c
  2679  0016A8  0E06               	movlw	high __npowers_
  2680  0016AA  202A               	addwfc	?___wmul+1,w,c
  2681  0016AC  6EF7               	movwf	tblptrh,c
  2682  0016AE                     	if	0	;There are less than 3 active tblptr bytes
  2683  0016AE                     	endif
  2684  0016AE  0009               	tblrd		*+
  2685  0016B0  0100               	movlb	0	; () banked
  2686  0016B2  CFF5 F06F          	movff	tablat,___ftmul@f2
  2687  0016B6  0009               	tblrd		*+
  2688  0016B8  0100               	movlb	0	; () banked
  2689  0016BA  CFF5 F070          	movff	tablat,___ftmul@f2+1
  2690  0016BE  000A               	tblrd		*-
  2691  0016C0  0100               	movlb	0	; () banked
  2692  0016C2  CFF5 F071          	movff	tablat,___ftmul@f2+2
  2693  0016C6  EC16  F012         	call	___ftmul	;wreg free
  2694  0016CA  C06C  F07B         	movff	?___ftmul,?_scale
  2695  0016CE  C06D  F07C         	movff	?___ftmul+1,?_scale+1
  2696  0016D2  C06E  F07D         	movff	?___ftmul+2,?_scale+2
  2697  0016D6  0012               	return	
  2698  0016D8                     l4542:
  2699                           
  2700                           ;doprnt.c: 432: else if(scl > 10)
  2701  0016D8  0100               	movlb	0	; () banked
  2702  0016DA  5181               	movf	scale@scl& (0+255),w,b
  2703  0016DC  0A80               	xorlw	128
  2704  0016DE  0F75               	addlw	-139
  2705  0016E0  A0D8               	btfss	status,0,c
  2706  0016E2  D05B               	goto	l4548
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2710  0016E4  0E00               	movlw	0
  2711  0016E6  6E24               	movwf	___awdiv@divisor+1,c
  2712  0016E8  0E0A               	movlw	10
  2713  0016EA  6E23               	movwf	___awdiv@divisor,c
  2714  0016EC  0100               	movlb	0	; () banked
  2715  0016EE  5181               	movf	scale@scl& (0+255),w,b
  2716  0016F0  6E21               	movwf	___awdiv@dividend,c
  2717  0016F2  6A22               	clrf	___awdiv@dividend+1,c
  2718  0016F4  BE21               	btfsc	___awdiv@dividend,7,c
  2719  0016F6  0622               	decf	___awdiv@dividend+1,f,c
  2720  0016F8  ECF5  F017         	call	___awdiv	;wreg free
  2721  0016FC  0E09               	movlw	9
  2722  0016FE  2421               	addwf	?___awdiv,w,c
  2723  001700  6E29               	movwf	___wmul@multiplier,c
  2724  001702  0E00               	movlw	0
  2725  001704  2022               	addwfc	?___awdiv+1,w,c
  2726  001706  6E2A               	movwf	___wmul@multiplier+1,c
  2727  001708  0E00               	movlw	0
  2728  00170A  6E2C               	movwf	___wmul@multiplicand+1,c
  2729  00170C  0E03               	movlw	3
  2730  00170E  6E2B               	movwf	___wmul@multiplicand,c
  2731  001710  EC62  F01B         	call	___wmul	;wreg free
  2732  001714  0E29               	movlw	low __npowers_
  2733  001716  2429               	addwf	?___wmul,w,c
  2734  001718  6EF6               	movwf	tblptrl,c
  2735  00171A  0E06               	movlw	high __npowers_
  2736  00171C  202A               	addwfc	?___wmul+1,w,c
  2737  00171E  6EF7               	movwf	tblptrh,c
  2738  001720                     	if	0	;There are less than 3 active tblptr bytes
  2739  001720                     	endif
  2740  001720  0009               	tblrd		*+
  2741  001722  0100               	movlb	0	; () banked
  2742  001724  CFF5 F06C          	movff	tablat,___ftmul@f1
  2743  001728  0009               	tblrd		*+
  2744  00172A  0100               	movlb	0	; () banked
  2745  00172C  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  2746  001730  000A               	tblrd		*-
  2747  001732  0100               	movlb	0	; () banked
  2748  001734  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  2749  001738  0E00               	movlw	0
  2750  00173A  6E2C               	movwf	___wmul@multiplicand+1,c
  2751  00173C  0E03               	movlw	3
  2752  00173E  6E2B               	movwf	___wmul@multiplicand,c
  2753  001740  0E00               	movlw	0
  2754  001742  6E1E               	movwf	___awmod@divisor+1,c
  2755  001744  0E0A               	movlw	10
  2756  001746  6E1D               	movwf	___awmod@divisor,c
  2757  001748  0100               	movlb	0	; () banked
  2758  00174A  5181               	movf	scale@scl& (0+255),w,b
  2759  00174C  6E1B               	movwf	___awmod@dividend,c
  2760  00174E  6A1C               	clrf	___awmod@dividend+1,c
  2761  001750  BE1B               	btfsc	___awmod@dividend,7,c
  2762  001752  061C               	decf	___awmod@dividend+1,f,c
  2763  001754  EC90  F018         	call	___awmod	;wreg free
  2764  001758  C01B  F029         	movff	?___awmod,___wmul@multiplier
  2765  00175C  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  2766  001760  EC62  F01B         	call	___wmul	;wreg free
  2767  001764  0E29               	movlw	low __npowers_
  2768  001766  2429               	addwf	?___wmul,w,c
  2769  001768  6EF6               	movwf	tblptrl,c
  2770  00176A  0E06               	movlw	high __npowers_
  2771  00176C  202A               	addwfc	?___wmul+1,w,c
  2772  00176E  6EF7               	movwf	tblptrh,c
  2773  001770                     	if	0	;There are less than 3 active tblptr bytes
  2774  001770                     	endif
  2775  001770  0009               	tblrd		*+
  2776  001772  0100               	movlb	0	; () banked
  2777  001774  CFF5 F06F          	movff	tablat,___ftmul@f2
  2778  001778  0009               	tblrd		*+
  2779  00177A  0100               	movlb	0	; () banked
  2780  00177C  CFF5 F070          	movff	tablat,___ftmul@f2+1
  2781  001780  000A               	tblrd		*-
  2782  001782  0100               	movlb	0	; () banked
  2783  001784  CFF5 F071          	movff	tablat,___ftmul@f2+2
  2784  001788  EC16  F012         	call	___ftmul	;wreg free
  2785  00178C  C06C  F07B         	movff	?___ftmul,?_scale
  2786  001790  C06D  F07C         	movff	?___ftmul+1,?_scale+1
  2787  001794  C06E  F07D         	movff	?___ftmul+2,?_scale+2
  2788  001798  0012               	return	
  2789  00179A                     l4548:
  2790                           
  2791                           ;doprnt.c: 434: return _npowers_[scl];
  2792  00179A  0100               	movlb	0	; () banked
  2793  00179C  5181               	movf	scale@scl& (0+255),w,b
  2794  00179E  0D03               	mullw	3
  2795  0017A0  0E29               	movlw	low __npowers_
  2796  0017A2  24F3               	addwf	prodl,w,c
  2797  0017A4  6EF6               	movwf	tblptrl,c
  2798  0017A6  0E06               	movlw	high __npowers_
  2799  0017A8  20F4               	addwfc	prodh,w,c
  2800  0017AA  6EF7               	movwf	tblptrh,c
  2801  0017AC                     	if	0	;There are less than 3 active tblptr bytes
  2802  0017AC                     	endif
  2803  0017AC  0009               	tblrd		*+
  2804  0017AE  0100               	movlb	0	; () banked
  2805  0017B0  CFF5 F07B          	movff	tablat,?_scale
  2806  0017B4  0009               	tblrd		*+
  2807  0017B6  0100               	movlb	0	; () banked
  2808  0017B8  CFF5 F07C          	movff	tablat,?_scale+1
  2809  0017BC  000A               	tblrd		*-
  2810  0017BE  0100               	movlb	0	; () banked
  2811  0017C0  CFF5 F07D          	movff	tablat,?_scale+2
  2812  0017C4  0012               	return	
  2813  0017C6                     l4552:
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;doprnt.c: 435: }
  2817                           ;doprnt.c: 436: if(scl>=110)
  2818  0017C6  0100               	movlb	0	; () banked
  2819  0017C8  5181               	movf	scale@scl& (0+255),w,b
  2820  0017CA  0A80               	xorlw	128
  2821  0017CC  0F12               	addlw	-238
  2822  0017CE  A0D8               	btfss	status,0,c
  2823  0017D0  D09D               	goto	l4560
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2827  0017D2  0E00               	movlw	0
  2828  0017D4  6E2C               	movwf	___wmul@multiplicand+1,c
  2829  0017D6  0E03               	movlw	3
  2830  0017D8  6E2B               	movwf	___wmul@multiplicand,c
  2831  0017DA  0E00               	movlw	0
  2832  0017DC  6E24               	movwf	___awdiv@divisor+1,c
  2833  0017DE  0E0A               	movlw	10
  2834  0017E0  6E23               	movwf	___awdiv@divisor,c
  2835  0017E2  0E00               	movlw	0
  2836  0017E4  6E1E               	movwf	___awmod@divisor+1,c
  2837  0017E6  0E64               	movlw	100
  2838  0017E8  6E1D               	movwf	___awmod@divisor,c
  2839  0017EA  0100               	movlb	0	; () banked
  2840  0017EC  5181               	movf	scale@scl& (0+255),w,b
  2841  0017EE  6E1B               	movwf	___awmod@dividend,c
  2842  0017F0  6A1C               	clrf	___awmod@dividend+1,c
  2843  0017F2  BE1B               	btfsc	___awmod@dividend,7,c
  2844  0017F4  061C               	decf	___awmod@dividend+1,f,c
  2845  0017F6  EC90  F018         	call	___awmod	;wreg free
  2846  0017FA  C01B  F021         	movff	?___awmod,___awdiv@dividend
  2847  0017FE  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  2848  001802  ECF5  F017         	call	___awdiv	;wreg free
  2849  001806  0E09               	movlw	9
  2850  001808  2421               	addwf	?___awdiv,w,c
  2851  00180A  6E29               	movwf	___wmul@multiplier,c
  2852  00180C  0E00               	movlw	0
  2853  00180E  2022               	addwfc	?___awdiv+1,w,c
  2854  001810  6E2A               	movwf	___wmul@multiplier+1,c
  2855  001812  EC62  F01B         	call	___wmul	;wreg free
  2856  001816  0E50               	movlw	low __powers_
  2857  001818  2429               	addwf	?___wmul,w,c
  2858  00181A  6EF6               	movwf	tblptrl,c
  2859  00181C  0E06               	movlw	high __powers_
  2860  00181E  202A               	addwfc	?___wmul+1,w,c
  2861  001820  6EF7               	movwf	tblptrh,c
  2862  001822                     	if	0	;There are less than 3 active tblptr bytes
  2863  001822                     	endif
  2864  001822  0009               	tblrd		*+
  2865  001824  0100               	movlb	0	; () banked
  2866  001826  CFF5 F06F          	movff	tablat,___ftmul@f2
  2867  00182A  0009               	tblrd		*+
  2868  00182C  0100               	movlb	0	; () banked
  2869  00182E  CFF5 F070          	movff	tablat,___ftmul@f2+1
  2870  001832  000A               	tblrd		*-
  2871  001834  0100               	movlb	0	; () banked
  2872  001836  CFF5 F071          	movff	tablat,___ftmul@f2+2
  2873  00183A  0E00               	movlw	0
  2874  00183C  6E24               	movwf	___awdiv@divisor+1,c
  2875  00183E  0E64               	movlw	100
  2876  001840  6E23               	movwf	___awdiv@divisor,c
  2877  001842  0100               	movlb	0	; () banked
  2878  001844  5181               	movf	scale@scl& (0+255),w,b
  2879  001846  6E21               	movwf	___awdiv@dividend,c
  2880  001848  6A22               	clrf	___awdiv@dividend+1,c
  2881  00184A  BE21               	btfsc	___awdiv@dividend,7,c
  2882  00184C  0622               	decf	___awdiv@dividend+1,f,c
  2883  00184E  ECF5  F017         	call	___awdiv	;wreg free
  2884  001852  0E12               	movlw	18
  2885  001854  2421               	addwf	?___awdiv,w,c
  2886  001856  6E29               	movwf	___wmul@multiplier,c
  2887  001858  0E00               	movlw	0
  2888  00185A  2022               	addwfc	?___awdiv+1,w,c
  2889  00185C  6E2A               	movwf	___wmul@multiplier+1,c
  2890  00185E  0E00               	movlw	0
  2891  001860  6E2C               	movwf	___wmul@multiplicand+1,c
  2892  001862  0E03               	movlw	3
  2893  001864  6E2B               	movwf	___wmul@multiplicand,c
  2894  001866  EC62  F01B         	call	___wmul	;wreg free
  2895  00186A  0E50               	movlw	low __powers_
  2896  00186C  2429               	addwf	?___wmul,w,c
  2897  00186E  6EF6               	movwf	tblptrl,c
  2898  001870  0E06               	movlw	high __powers_
  2899  001872  202A               	addwfc	?___wmul+1,w,c
  2900  001874  6EF7               	movwf	tblptrh,c
  2901  001876                     	if	0	;There are less than 3 active tblptr bytes
  2902  001876                     	endif
  2903  001876  0009               	tblrd		*+
  2904  001878  0100               	movlb	0	; () banked
  2905  00187A  CFF5 F06C          	movff	tablat,___ftmul@f1
  2906  00187E  0009               	tblrd		*+
  2907  001880  0100               	movlb	0	; () banked
  2908  001882  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  2909  001886  000A               	tblrd		*-
  2910  001888  0100               	movlb	0	; () banked
  2911  00188A  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  2912  00188E  EC16  F012         	call	___ftmul	;wreg free
  2913  001892  C06C  F07E         	movff	?___ftmul,_scale$1695
  2914  001896  C06D  F07F         	movff	?___ftmul+1,_scale$1695+1
  2915  00189A  C06E  F080         	movff	?___ftmul+2,_scale$1695+2
  2916                           
  2917                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2918  00189E  C07E  F06C         	movff	_scale$1695,___ftmul@f1
  2919  0018A2  C07F  F06D         	movff	_scale$1695+1,___ftmul@f1+1
  2920  0018A6  C080  F06E         	movff	_scale$1695+2,___ftmul@f1+2
  2921  0018AA  0E00               	movlw	0
  2922  0018AC  6E2C               	movwf	___wmul@multiplicand+1,c
  2923  0018AE  0E03               	movlw	3
  2924  0018B0  6E2B               	movwf	___wmul@multiplicand,c
  2925  0018B2  0E00               	movlw	0
  2926  0018B4  6E1E               	movwf	___awmod@divisor+1,c
  2927  0018B6  0E0A               	movlw	10
  2928  0018B8  6E1D               	movwf	___awmod@divisor,c
  2929  0018BA  0100               	movlb	0	; () banked
  2930  0018BC  5181               	movf	scale@scl& (0+255),w,b
  2931  0018BE  6E1B               	movwf	___awmod@dividend,c
  2932  0018C0  6A1C               	clrf	___awmod@dividend+1,c
  2933  0018C2  BE1B               	btfsc	___awmod@dividend,7,c
  2934  0018C4  061C               	decf	___awmod@dividend+1,f,c
  2935  0018C6  EC90  F018         	call	___awmod	;wreg free
  2936  0018CA  C01B  F029         	movff	?___awmod,___wmul@multiplier
  2937  0018CE  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  2938  0018D2  EC62  F01B         	call	___wmul	;wreg free
  2939  0018D6  0E50               	movlw	low __powers_
  2940  0018D8  2429               	addwf	?___wmul,w,c
  2941  0018DA  6EF6               	movwf	tblptrl,c
  2942  0018DC  0E06               	movlw	high __powers_
  2943  0018DE  202A               	addwfc	?___wmul+1,w,c
  2944  0018E0  6EF7               	movwf	tblptrh,c
  2945  0018E2                     	if	0	;There are less than 3 active tblptr bytes
  2946  0018E2                     	endif
  2947  0018E2  0009               	tblrd		*+
  2948  0018E4  0100               	movlb	0	; () banked
  2949  0018E6  CFF5 F06F          	movff	tablat,___ftmul@f2
  2950  0018EA  0009               	tblrd		*+
  2951  0018EC  0100               	movlb	0	; () banked
  2952  0018EE  CFF5 F070          	movff	tablat,___ftmul@f2+1
  2953  0018F2  000A               	tblrd		*-
  2954  0018F4  0100               	movlb	0	; () banked
  2955  0018F6  CFF5 F071          	movff	tablat,___ftmul@f2+2
  2956  0018FA  EC16  F012         	call	___ftmul	;wreg free
  2957  0018FE  C06C  F07B         	movff	?___ftmul,?_scale
  2958  001902  C06D  F07C         	movff	?___ftmul+1,?_scale+1
  2959  001906  C06E  F07D         	movff	?___ftmul+2,?_scale+2
  2960  00190A  0012               	return	
  2961  00190C                     l4560:
  2962                           
  2963                           ;doprnt.c: 438: else if(scl > 10)
  2964  00190C  0100               	movlb	0	; () banked
  2965  00190E  5181               	movf	scale@scl& (0+255),w,b
  2966  001910  0A80               	xorlw	128
  2967  001912  0F75               	addlw	-139
  2968  001914  A0D8               	btfss	status,0,c
  2969  001916  D05B               	goto	l4566
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2973  001918  0E00               	movlw	0
  2974  00191A  6E24               	movwf	___awdiv@divisor+1,c
  2975  00191C  0E0A               	movlw	10
  2976  00191E  6E23               	movwf	___awdiv@divisor,c
  2977  001920  0100               	movlb	0	; () banked
  2978  001922  5181               	movf	scale@scl& (0+255),w,b
  2979  001924  6E21               	movwf	___awdiv@dividend,c
  2980  001926  6A22               	clrf	___awdiv@dividend+1,c
  2981  001928  BE21               	btfsc	___awdiv@dividend,7,c
  2982  00192A  0622               	decf	___awdiv@dividend+1,f,c
  2983  00192C  ECF5  F017         	call	___awdiv	;wreg free
  2984  001930  0E09               	movlw	9
  2985  001932  2421               	addwf	?___awdiv,w,c
  2986  001934  6E29               	movwf	___wmul@multiplier,c
  2987  001936  0E00               	movlw	0
  2988  001938  2022               	addwfc	?___awdiv+1,w,c
  2989  00193A  6E2A               	movwf	___wmul@multiplier+1,c
  2990  00193C  0E00               	movlw	0
  2991  00193E  6E2C               	movwf	___wmul@multiplicand+1,c
  2992  001940  0E03               	movlw	3
  2993  001942  6E2B               	movwf	___wmul@multiplicand,c
  2994  001944  EC62  F01B         	call	___wmul	;wreg free
  2995  001948  0E50               	movlw	low __powers_
  2996  00194A  2429               	addwf	?___wmul,w,c
  2997  00194C  6EF6               	movwf	tblptrl,c
  2998  00194E  0E06               	movlw	high __powers_
  2999  001950  202A               	addwfc	?___wmul+1,w,c
  3000  001952  6EF7               	movwf	tblptrh,c
  3001  001954                     	if	0	;There are less than 3 active tblptr bytes
  3002  001954                     	endif
  3003  001954  0009               	tblrd		*+
  3004  001956  0100               	movlb	0	; () banked
  3005  001958  CFF5 F06C          	movff	tablat,___ftmul@f1
  3006  00195C  0009               	tblrd		*+
  3007  00195E  0100               	movlb	0	; () banked
  3008  001960  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  3009  001964  000A               	tblrd		*-
  3010  001966  0100               	movlb	0	; () banked
  3011  001968  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  3012  00196C  0E00               	movlw	0
  3013  00196E  6E2C               	movwf	___wmul@multiplicand+1,c
  3014  001970  0E03               	movlw	3
  3015  001972  6E2B               	movwf	___wmul@multiplicand,c
  3016  001974  0E00               	movlw	0
  3017  001976  6E1E               	movwf	___awmod@divisor+1,c
  3018  001978  0E0A               	movlw	10
  3019  00197A  6E1D               	movwf	___awmod@divisor,c
  3020  00197C  0100               	movlb	0	; () banked
  3021  00197E  5181               	movf	scale@scl& (0+255),w,b
  3022  001980  6E1B               	movwf	___awmod@dividend,c
  3023  001982  6A1C               	clrf	___awmod@dividend+1,c
  3024  001984  BE1B               	btfsc	___awmod@dividend,7,c
  3025  001986  061C               	decf	___awmod@dividend+1,f,c
  3026  001988  EC90  F018         	call	___awmod	;wreg free
  3027  00198C  C01B  F029         	movff	?___awmod,___wmul@multiplier
  3028  001990  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  3029  001994  EC62  F01B         	call	___wmul	;wreg free
  3030  001998  0E50               	movlw	low __powers_
  3031  00199A  2429               	addwf	?___wmul,w,c
  3032  00199C  6EF6               	movwf	tblptrl,c
  3033  00199E  0E06               	movlw	high __powers_
  3034  0019A0  202A               	addwfc	?___wmul+1,w,c
  3035  0019A2  6EF7               	movwf	tblptrh,c
  3036  0019A4                     	if	0	;There are less than 3 active tblptr bytes
  3037  0019A4                     	endif
  3038  0019A4  0009               	tblrd		*+
  3039  0019A6  0100               	movlb	0	; () banked
  3040  0019A8  CFF5 F06F          	movff	tablat,___ftmul@f2
  3041  0019AC  0009               	tblrd		*+
  3042  0019AE  0100               	movlb	0	; () banked
  3043  0019B0  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3044  0019B4  000A               	tblrd		*-
  3045  0019B6  0100               	movlb	0	; () banked
  3046  0019B8  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3047  0019BC  EC16  F012         	call	___ftmul	;wreg free
  3048  0019C0  C06C  F07B         	movff	?___ftmul,?_scale
  3049  0019C4  C06D  F07C         	movff	?___ftmul+1,?_scale+1
  3050  0019C8  C06E  F07D         	movff	?___ftmul+2,?_scale+2
  3051  0019CC  0012               	return	
  3052  0019CE                     l4566:
  3053                           
  3054                           ;doprnt.c: 440: return _powers_[scl];
  3055  0019CE  0100               	movlb	0	; () banked
  3056  0019D0  5181               	movf	scale@scl& (0+255),w,b
  3057  0019D2  0D03               	mullw	3
  3058  0019D4  0E50               	movlw	low __powers_
  3059  0019D6  24F3               	addwf	prodl,w,c
  3060  0019D8  6EF6               	movwf	tblptrl,c
  3061  0019DA  0E06               	movlw	high __powers_
  3062  0019DC  20F4               	addwfc	prodh,w,c
  3063  0019DE  6EF7               	movwf	tblptrh,c
  3064  0019E0                     	if	0	;There are less than 3 active tblptr bytes
  3065  0019E0                     	endif
  3066  0019E0  0009               	tblrd		*+
  3067  0019E2  0100               	movlb	0	; () banked
  3068  0019E4  CFF5 F07B          	movff	tablat,?_scale
  3069  0019E8  0009               	tblrd		*+
  3070  0019EA  0100               	movlb	0	; () banked
  3071  0019EC  CFF5 F07C          	movff	tablat,?_scale+1
  3072  0019F0  000A               	tblrd		*-
  3073  0019F2  0100               	movlb	0	; () banked
  3074  0019F4  CFF5 F07D          	movff	tablat,?_scale+2
  3075  0019F8  0012               	return	
  3076  0019FA                     __end_of_scale:
  3077                           	opt stack 0
  3078                           tblptru	equ	0xFF8
  3079                           tblptrh	equ	0xFF7
  3080                           tblptrl	equ	0xFF6
  3081                           tablat	equ	0xFF5
  3082                           prodh	equ	0xFF4
  3083                           prodl	equ	0xFF3
  3084                           intcon	equ	0xFF2
  3085                           postinc0	equ	0xFEE
  3086                           wreg	equ	0xFE8
  3087                           postinc2	equ	0xFDE
  3088                           postdec2	equ	0xFDD
  3089                           fsr2h	equ	0xFDA
  3090                           fsr2l	equ	0xFD9
  3091                           status	equ	0xFD8
  3092                           
  3093 ;; *************** function _putch *****************
  3094 ;; Defined at:
  3095 ;;		line 168 in file "mcc_generated_files/eusart1.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  txData          1    wreg     unsigned char 
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;  txData          1   27[COMRAM] unsigned char 
  3100 ;; Return value:  Size  Location     Type
  3101 ;;		None               void
  3102 ;; Registers used:
  3103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3109 ;;      Params:         0       0       0       0       0       0       0
  3110 ;;      Locals:         1       0       0       0       0       0       0
  3111 ;;      Temps:          0       0       0       0       0       0       0
  3112 ;;      Totals:         1       0       0       0       0       0       0
  3113 ;;Total ram usage:        1 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; Hardware stack levels required when called:    5
  3116 ;; This function calls:
  3117 ;;		_EUSART1_Write
  3118 ;; This function is called by:
  3119 ;;		_printf
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           	psect	text3
  3124  0037B6                     __ptext3:
  3125                           	opt stack 0
  3126  0037B6                     _putch:
  3127                           	opt stack 24
  3128                           
  3129                           ;incstack = 0
  3130                           ;putch@txData stored from wreg
  3131  0037B6  6E1C               	movwf	putch@txData,c
  3132                           
  3133                           ;eusart1.c: 170: EUSART1_Write(txData);
  3134  0037B8  501C               	movf	putch@txData,w,c
  3135  0037BA  ECB8  F01A         	call	_EUSART1_Write
  3136  0037BE  0012               	return	
  3137  0037C0                     __end_of_putch:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodh	equ	0xFF4
  3144                           prodl	equ	0xFF3
  3145                           intcon	equ	0xFF2
  3146                           postinc0	equ	0xFEE
  3147                           wreg	equ	0xFE8
  3148                           postinc2	equ	0xFDE
  3149                           postdec2	equ	0xFDD
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function _EUSART1_Write *****************
  3155 ;; Defined at:
  3156 ;;		line 140 in file "mcc_generated_files/eusart1.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  txData          1    wreg     unsigned char 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  txData          1   26[COMRAM] unsigned char 
  3161 ;; Return value:  Size  Location     Type
  3162 ;;		None               void
  3163 ;; Registers used:
  3164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3170 ;;      Params:         0       0       0       0       0       0       0
  3171 ;;      Locals:         1       0       0       0       0       0       0
  3172 ;;      Temps:          0       0       0       0       0       0       0
  3173 ;;      Totals:         1       0       0       0       0       0       0
  3174 ;;Total ram usage:        1 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    4
  3177 ;; This function calls:
  3178 ;;		Nothing
  3179 ;; This function is called by:
  3180 ;;		_putch
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           	psect	text4
  3185  003570                     __ptext4:
  3186                           	opt stack 0
  3187  003570                     _EUSART1_Write:
  3188                           	opt stack 24
  3189                           
  3190                           ;incstack = 0
  3191                           ;EUSART1_Write@txData stored from wreg
  3192  003570  6E1B               	movwf	EUSART1_Write@txData,c
  3193  003572                     l4348:
  3194  003572  5045               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  3195  003574  B4D8               	btfsc	status,2,c
  3196  003576  D7FD               	goto	l4348
  3197                           
  3198                           ;eusart1.c: 144: }
  3199                           ;eusart1.c: 146: if(0 == PIE1bits.TX1IE)
  3200  003578  B89D               	btfsc	3997,4,c	;volatile
  3201  00357A  D003               	goto	l118
  3202                           
  3203                           ;eusart1.c: 147: {
  3204                           ;eusart1.c: 148: TXREG1 = txData;
  3205  00357C  C01B  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  3206                           
  3207                           ;eusart1.c: 149: }
  3208  003580  D012               	goto	l4362
  3209  003582                     l118:
  3210                           
  3211                           ;eusart1.c: 150: else
  3212                           ;eusart1.c: 151: {
  3213                           ;eusart1.c: 152: PIE1bits.TX1IE = 0;
  3214  003582  989D               	bcf	3997,4,c	;volatile
  3215                           
  3216                           ;eusart1.c: 153: eusart1TxBuffer[eusart1TxHead++] = txData;
  3217  003584  5041               	movf	_eusart1TxHead,w,c
  3218  003586  0D01               	mullw	1
  3219  003588  0E30               	movlw	low _eusart1TxBuffer
  3220  00358A  24F3               	addwf	prodl,w,c
  3221  00358C  6ED9               	movwf	fsr2l,c
  3222  00358E  0E00               	movlw	high _eusart1TxBuffer
  3223  003590  20F4               	addwfc	prodh,w,c
  3224  003592  6EDA               	movwf	fsr2h,c
  3225  003594  C01B  FFDF         	movff	EUSART1_Write@txData,indf2
  3226  003598  2A41               	incf	_eusart1TxHead,f,c
  3227                           
  3228                           ;eusart1.c: 154: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  3229  00359A  0E07               	movlw	7
  3230  00359C  6441               	cpfsgt	_eusart1TxHead,c
  3231  00359E  D002               	goto	l4360
  3232                           
  3233                           ;eusart1.c: 155: {
  3234                           ;eusart1.c: 156: eusart1TxHead = 0;
  3235  0035A0  0E00               	movlw	0
  3236  0035A2  6E41               	movwf	_eusart1TxHead,c
  3237  0035A4                     l4360:
  3238                           
  3239                           ;eusart1.c: 157: }
  3240                           ;eusart1.c: 158: eusart1TxBufferRemaining--;
  3241  0035A4  0645               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  3242  0035A6                     l4362:
  3243                           
  3244                           ;eusart1.c: 159: }
  3245                           ;eusart1.c: 160: PIE1bits.TX1IE = 1;
  3246  0035A6  889D               	bsf	3997,4,c	;volatile
  3247  0035A8  0012               	return	
  3248  0035AA                     __end_of_EUSART1_Write:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           postinc0	equ	0xFEE
  3258                           wreg	equ	0xFE8
  3259                           indf2	equ	0xFDF
  3260                           postinc2	equ	0xFDE
  3261                           postdec2	equ	0xFDD
  3262                           fsr2h	equ	0xFDA
  3263                           fsr2l	equ	0xFD9
  3264                           status	equ	0xFD8
  3265                           
  3266 ;; *************** function _fround *****************
  3267 ;; Defined at:
  3268 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  prec            1    wreg     unsigned char 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  prec            1   36[BANK0 ] unsigned char 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  3   27[BANK0 ] unsigned char 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3282 ;;      Params:         0       3       0       0       0       0       0
  3283 ;;      Locals:         0       7       0       0       0       0       0
  3284 ;;      Temps:          0       0       0       0       0       0       0
  3285 ;;      Totals:         0      10       0       0       0       0       0
  3286 ;;Total ram usage:       10 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    6
  3289 ;; This function calls:
  3290 ;;		___awdiv
  3291 ;;		___awmod
  3292 ;;		___ftmul
  3293 ;;		___wmul
  3294 ;; This function is called by:
  3295 ;;		_printf
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text5
  3300  0019FA                     __ptext5:
  3301                           	opt stack 0
  3302  0019FA                     _fround:
  3303                           	opt stack 23
  3304                           
  3305                           ;incstack = 0
  3306                           ;fround@prec stored from wreg
  3307  0019FA  0100               	movlb	0	; () banked
  3308  0019FC  6F84               	movwf	fround@prec& (0+255),b
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;doprnt.c: 413: if(prec>=110)
  3312  0019FE  0E6D               	movlw	109
  3313  001A00  0100               	movlb	0	; () banked
  3314  001A02  6584               	cpfsgt	fround@prec& (0+255),b
  3315  001A04  D0AE               	goto	l4520
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3319  001A06  0E00               	movlw	0
  3320  001A08  6E2C               	movwf	___wmul@multiplicand+1,c
  3321  001A0A  0E03               	movlw	3
  3322  001A0C  6E2B               	movwf	___wmul@multiplicand,c
  3323  001A0E  0E00               	movlw	0
  3324  001A10  6E24               	movwf	___awdiv@divisor+1,c
  3325  001A12  0E0A               	movlw	10
  3326  001A14  6E23               	movwf	___awdiv@divisor,c
  3327  001A16  0E00               	movlw	0
  3328  001A18  6E1E               	movwf	___awmod@divisor+1,c
  3329  001A1A  0E64               	movlw	100
  3330  001A1C  6E1D               	movwf	___awmod@divisor,c
  3331  001A1E  0100               	movlb	0	; () banked
  3332  001A20  C084  F01B         	movff	fround@prec,___awmod@dividend
  3333  001A24  6A1C               	clrf	___awmod@dividend+1,c
  3334  001A26  EC90  F018         	call	___awmod	;wreg free
  3335  001A2A  C01B  F021         	movff	?___awmod,___awdiv@dividend
  3336  001A2E  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  3337  001A32  ECF5  F017         	call	___awdiv	;wreg free
  3338  001A36  0E09               	movlw	9
  3339  001A38  2421               	addwf	?___awdiv,w,c
  3340  001A3A  6E29               	movwf	___wmul@multiplier,c
  3341  001A3C  0E00               	movlw	0
  3342  001A3E  2022               	addwfc	?___awdiv+1,w,c
  3343  001A40  6E2A               	movwf	___wmul@multiplier+1,c
  3344  001A42  EC62  F01B         	call	___wmul	;wreg free
  3345  001A46  0E29               	movlw	low __npowers_
  3346  001A48  2429               	addwf	?___wmul,w,c
  3347  001A4A  6EF6               	movwf	tblptrl,c
  3348  001A4C  0E06               	movlw	high __npowers_
  3349  001A4E  202A               	addwfc	?___wmul+1,w,c
  3350  001A50  6EF7               	movwf	tblptrh,c
  3351  001A52                     	if	0	;There are less than 3 active tblptr bytes
  3352  001A52                     	endif
  3353  001A52  0009               	tblrd		*+
  3354  001A54  0100               	movlb	0	; () banked
  3355  001A56  CFF5 F06F          	movff	tablat,___ftmul@f2
  3356  001A5A  0009               	tblrd		*+
  3357  001A5C  0100               	movlb	0	; () banked
  3358  001A5E  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3359  001A62  000A               	tblrd		*-
  3360  001A64  0100               	movlb	0	; () banked
  3361  001A66  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3362  001A6A  0E00               	movlw	0
  3363  001A6C  6E24               	movwf	___awdiv@divisor+1,c
  3364  001A6E  0E64               	movlw	100
  3365  001A70  6E23               	movwf	___awdiv@divisor,c
  3366  001A72  0100               	movlb	0	; () banked
  3367  001A74  C084  F021         	movff	fround@prec,___awdiv@dividend
  3368  001A78  6A22               	clrf	___awdiv@dividend+1,c
  3369  001A7A  ECF5  F017         	call	___awdiv	;wreg free
  3370  001A7E  0E12               	movlw	18
  3371  001A80  2421               	addwf	?___awdiv,w,c
  3372  001A82  6E29               	movwf	___wmul@multiplier,c
  3373  001A84  0E00               	movlw	0
  3374  001A86  2022               	addwfc	?___awdiv+1,w,c
  3375  001A88  6E2A               	movwf	___wmul@multiplier+1,c
  3376  001A8A  0E00               	movlw	0
  3377  001A8C  6E2C               	movwf	___wmul@multiplicand+1,c
  3378  001A8E  0E03               	movlw	3
  3379  001A90  6E2B               	movwf	___wmul@multiplicand,c
  3380  001A92  EC62  F01B         	call	___wmul	;wreg free
  3381  001A96  0E29               	movlw	low __npowers_
  3382  001A98  2429               	addwf	?___wmul,w,c
  3383  001A9A  6EF6               	movwf	tblptrl,c
  3384  001A9C  0E06               	movlw	high __npowers_
  3385  001A9E  202A               	addwfc	?___wmul+1,w,c
  3386  001AA0  6EF7               	movwf	tblptrh,c
  3387  001AA2                     	if	0	;There are less than 3 active tblptr bytes
  3388  001AA2                     	endif
  3389  001AA2  0009               	tblrd		*+
  3390  001AA4  0100               	movlb	0	; () banked
  3391  001AA6  CFF5 F06C          	movff	tablat,___ftmul@f1
  3392  001AAA  0009               	tblrd		*+
  3393  001AAC  0100               	movlb	0	; () banked
  3394  001AAE  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  3395  001AB2  000A               	tblrd		*-
  3396  001AB4  0100               	movlb	0	; () banked
  3397  001AB6  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  3398  001ABA  EC16  F012         	call	___ftmul	;wreg free
  3399  001ABE  C06C  F081         	movff	?___ftmul,_fround$1693
  3400  001AC2  C06D  F082         	movff	?___ftmul+1,_fround$1693+1
  3401  001AC6  C06E  F083         	movff	?___ftmul+2,_fround$1693+2
  3402                           
  3403                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3404  001ACA  0E00               	movlw	0
  3405  001ACC  6E2C               	movwf	___wmul@multiplicand+1,c
  3406  001ACE  0E03               	movlw	3
  3407  001AD0  6E2B               	movwf	___wmul@multiplicand,c
  3408  001AD2  0E00               	movlw	0
  3409  001AD4  6E1E               	movwf	___awmod@divisor+1,c
  3410  001AD6  0E0A               	movlw	10
  3411  001AD8  6E1D               	movwf	___awmod@divisor,c
  3412  001ADA  0100               	movlb	0	; () banked
  3413  001ADC  C084  F01B         	movff	fround@prec,___awmod@dividend
  3414  001AE0  6A1C               	clrf	___awmod@dividend+1,c
  3415  001AE2  EC90  F018         	call	___awmod	;wreg free
  3416  001AE6  C01B  F029         	movff	?___awmod,___wmul@multiplier
  3417  001AEA  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  3418  001AEE  EC62  F01B         	call	___wmul	;wreg free
  3419  001AF2  0E29               	movlw	low __npowers_
  3420  001AF4  2429               	addwf	?___wmul,w,c
  3421  001AF6  6EF6               	movwf	tblptrl,c
  3422  001AF8  0E06               	movlw	high __npowers_
  3423  001AFA  202A               	addwfc	?___wmul+1,w,c
  3424  001AFC  6EF7               	movwf	tblptrh,c
  3425  001AFE                     	if	0	;There are less than 3 active tblptr bytes
  3426  001AFE                     	endif
  3427  001AFE  0009               	tblrd		*+
  3428  001B00  0100               	movlb	0	; () banked
  3429  001B02  CFF5 F06F          	movff	tablat,___ftmul@f2
  3430  001B06  0009               	tblrd		*+
  3431  001B08  0100               	movlb	0	; () banked
  3432  001B0A  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3433  001B0E  000A               	tblrd		*-
  3434  001B10  0100               	movlb	0	; () banked
  3435  001B12  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3436  001B16  C081  F06C         	movff	_fround$1693,___ftmul@f1
  3437  001B1A  C082  F06D         	movff	_fround$1693+1,___ftmul@f1+1
  3438  001B1E  C083  F06E         	movff	_fround$1693+2,___ftmul@f1+2
  3439  001B22  EC16  F012         	call	___ftmul	;wreg free
  3440  001B26  C06C  F07E         	movff	?___ftmul,_fround$1694
  3441  001B2A  C06D  F07F         	movff	?___ftmul+1,_fround$1694+1
  3442  001B2E  C06E  F080         	movff	?___ftmul+2,_fround$1694+2
  3443                           
  3444                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3445  001B32  C07E  F06C         	movff	_fround$1694,___ftmul@f1
  3446  001B36  C07F  F06D         	movff	_fround$1694+1,___ftmul@f1+1
  3447  001B3A  C080  F06E         	movff	_fround$1694+2,___ftmul@f1+2
  3448  001B3E  0E00               	movlw	0
  3449  001B40  0100               	movlb	0	; () banked
  3450  001B42  6F6F               	movwf	___ftmul@f2& (0+255),b
  3451  001B44  0E00               	movlw	0
  3452  001B46  0100               	movlb	0	; () banked
  3453  001B48  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  3454  001B4A  0E3F               	movlw	63
  3455  001B4C  0100               	movlb	0	; () banked
  3456  001B4E  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  3457  001B50  EC16  F012         	call	___ftmul	;wreg free
  3458  001B54  C06C  F07B         	movff	?___ftmul,?_fround
  3459  001B58  C06D  F07C         	movff	?___ftmul+1,?_fround+1
  3460  001B5C  C06E  F07D         	movff	?___ftmul+2,?_fround+2
  3461  001B60  0012               	return	
  3462  001B62                     l4520:
  3463                           
  3464                           ;doprnt.c: 415: else if(prec > 10)
  3465  001B62  0E0A               	movlw	10
  3466  001B64  0100               	movlb	0	; () banked
  3467  001B66  6584               	cpfsgt	fround@prec& (0+255),b
  3468  001B68  D06E               	goto	l4528
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3472  001B6A  0E00               	movlw	0
  3473  001B6C  6E2C               	movwf	___wmul@multiplicand+1,c
  3474  001B6E  0E03               	movlw	3
  3475  001B70  6E2B               	movwf	___wmul@multiplicand,c
  3476  001B72  0E00               	movlw	0
  3477  001B74  6E1E               	movwf	___awmod@divisor+1,c
  3478  001B76  0E0A               	movlw	10
  3479  001B78  6E1D               	movwf	___awmod@divisor,c
  3480  001B7A  0100               	movlb	0	; () banked
  3481  001B7C  C084  F01B         	movff	fround@prec,___awmod@dividend
  3482  001B80  6A1C               	clrf	___awmod@dividend+1,c
  3483  001B82  EC90  F018         	call	___awmod	;wreg free
  3484  001B86  C01B  F029         	movff	?___awmod,___wmul@multiplier
  3485  001B8A  C01C  F02A         	movff	?___awmod+1,___wmul@multiplier+1
  3486  001B8E  EC62  F01B         	call	___wmul	;wreg free
  3487  001B92  0E29               	movlw	low __npowers_
  3488  001B94  2429               	addwf	?___wmul,w,c
  3489  001B96  6EF6               	movwf	tblptrl,c
  3490  001B98  0E06               	movlw	high __npowers_
  3491  001B9A  202A               	addwfc	?___wmul+1,w,c
  3492  001B9C  6EF7               	movwf	tblptrh,c
  3493  001B9E                     	if	0	;There are less than 3 active tblptr bytes
  3494  001B9E                     	endif
  3495  001B9E  0009               	tblrd		*+
  3496  001BA0  0100               	movlb	0	; () banked
  3497  001BA2  CFF5 F06F          	movff	tablat,___ftmul@f2
  3498  001BA6  0009               	tblrd		*+
  3499  001BA8  0100               	movlb	0	; () banked
  3500  001BAA  CFF5 F070          	movff	tablat,___ftmul@f2+1
  3501  001BAE  000A               	tblrd		*-
  3502  001BB0  0100               	movlb	0	; () banked
  3503  001BB2  CFF5 F071          	movff	tablat,___ftmul@f2+2
  3504  001BB6  0E00               	movlw	0
  3505  001BB8  6E24               	movwf	___awdiv@divisor+1,c
  3506  001BBA  0E0A               	movlw	10
  3507  001BBC  6E23               	movwf	___awdiv@divisor,c
  3508  001BBE  0100               	movlb	0	; () banked
  3509  001BC0  C084  F021         	movff	fround@prec,___awdiv@dividend
  3510  001BC4  6A22               	clrf	___awdiv@dividend+1,c
  3511  001BC6  ECF5  F017         	call	___awdiv	;wreg free
  3512  001BCA  0E09               	movlw	9
  3513  001BCC  2421               	addwf	?___awdiv,w,c
  3514  001BCE  6E29               	movwf	___wmul@multiplier,c
  3515  001BD0  0E00               	movlw	0
  3516  001BD2  2022               	addwfc	?___awdiv+1,w,c
  3517  001BD4  6E2A               	movwf	___wmul@multiplier+1,c
  3518  001BD6  0E00               	movlw	0
  3519  001BD8  6E2C               	movwf	___wmul@multiplicand+1,c
  3520  001BDA  0E03               	movlw	3
  3521  001BDC  6E2B               	movwf	___wmul@multiplicand,c
  3522  001BDE  EC62  F01B         	call	___wmul	;wreg free
  3523  001BE2  0E29               	movlw	low __npowers_
  3524  001BE4  2429               	addwf	?___wmul,w,c
  3525  001BE6  6EF6               	movwf	tblptrl,c
  3526  001BE8  0E06               	movlw	high __npowers_
  3527  001BEA  202A               	addwfc	?___wmul+1,w,c
  3528  001BEC  6EF7               	movwf	tblptrh,c
  3529  001BEE                     	if	0	;There are less than 3 active tblptr bytes
  3530  001BEE                     	endif
  3531  001BEE  0009               	tblrd		*+
  3532  001BF0  0100               	movlb	0	; () banked
  3533  001BF2  CFF5 F06C          	movff	tablat,___ftmul@f1
  3534  001BF6  0009               	tblrd		*+
  3535  001BF8  0100               	movlb	0	; () banked
  3536  001BFA  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  3537  001BFE  000A               	tblrd		*-
  3538  001C00  0100               	movlb	0	; () banked
  3539  001C02  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  3540  001C06  EC16  F012         	call	___ftmul	;wreg free
  3541  001C0A  C06C  F081         	movff	?___ftmul,_fround$1693
  3542  001C0E  C06D  F082         	movff	?___ftmul+1,_fround$1693+1
  3543  001C12  C06E  F083         	movff	?___ftmul+2,_fround$1693+2
  3544                           
  3545                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3546  001C16  C081  F06C         	movff	_fround$1693,___ftmul@f1
  3547  001C1A  C082  F06D         	movff	_fround$1693+1,___ftmul@f1+1
  3548  001C1E  C083  F06E         	movff	_fround$1693+2,___ftmul@f1+2
  3549  001C22  0E00               	movlw	0
  3550  001C24  0100               	movlb	0	; () banked
  3551  001C26  6F6F               	movwf	___ftmul@f2& (0+255),b
  3552  001C28  0E00               	movlw	0
  3553  001C2A  0100               	movlb	0	; () banked
  3554  001C2C  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  3555  001C2E  0E3F               	movlw	63
  3556  001C30  0100               	movlb	0	; () banked
  3557  001C32  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  3558  001C34  EC16  F012         	call	___ftmul	;wreg free
  3559  001C38  C06C  F07B         	movff	?___ftmul,?_fround
  3560  001C3C  C06D  F07C         	movff	?___ftmul+1,?_fround+1
  3561  001C40  C06E  F07D         	movff	?___ftmul+2,?_fround+2
  3562  001C44  0012               	return	
  3563  001C46                     l4528:
  3564                           
  3565                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3566  001C46  0100               	movlb	0	; () banked
  3567  001C48  5184               	movf	fround@prec& (0+255),w,b
  3568  001C4A  0D03               	mullw	3
  3569  001C4C  0E29               	movlw	low __npowers_
  3570  001C4E  24F3               	addwf	prodl,w,c
  3571  001C50  6EF6               	movwf	tblptrl,c
  3572  001C52  0E06               	movlw	high __npowers_
  3573  001C54  20F4               	addwfc	prodh,w,c
  3574  001C56  6EF7               	movwf	tblptrh,c
  3575  001C58                     	if	0	;There are less than 3 active tblptr bytes
  3576  001C58                     	endif
  3577  001C58  0009               	tblrd		*+
  3578  001C5A  0100               	movlb	0	; () banked
  3579  001C5C  CFF5 F06C          	movff	tablat,___ftmul@f1
  3580  001C60  0009               	tblrd		*+
  3581  001C62  0100               	movlb	0	; () banked
  3582  001C64  CFF5 F06D          	movff	tablat,___ftmul@f1+1
  3583  001C68  000A               	tblrd		*-
  3584  001C6A  0100               	movlb	0	; () banked
  3585  001C6C  CFF5 F06E          	movff	tablat,___ftmul@f1+2
  3586  001C70  0E00               	movlw	0
  3587  001C72  0100               	movlb	0	; () banked
  3588  001C74  6F6F               	movwf	___ftmul@f2& (0+255),b
  3589  001C76  0E00               	movlw	0
  3590  001C78  0100               	movlb	0	; () banked
  3591  001C7A  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  3592  001C7C  0E3F               	movlw	63
  3593  001C7E  0100               	movlb	0	; () banked
  3594  001C80  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  3595  001C82  EC16  F012         	call	___ftmul	;wreg free
  3596  001C86  C06C  F07B         	movff	?___ftmul,?_fround
  3597  001C8A  C06D  F07C         	movff	?___ftmul+1,?_fround+1
  3598  001C8E  C06E  F07D         	movff	?___ftmul+2,?_fround+2
  3599  001C92  0012               	return	
  3600  001C94                     __end_of_fround:
  3601                           	opt stack 0
  3602                           tblptru	equ	0xFF8
  3603                           tblptrh	equ	0xFF7
  3604                           tblptrl	equ	0xFF6
  3605                           tablat	equ	0xFF5
  3606                           prodh	equ	0xFF4
  3607                           prodl	equ	0xFF3
  3608                           intcon	equ	0xFF2
  3609                           postinc0	equ	0xFEE
  3610                           wreg	equ	0xFE8
  3611                           indf2	equ	0xFDF
  3612                           postinc2	equ	0xFDE
  3613                           postdec2	equ	0xFDD
  3614                           fsr2h	equ	0xFDA
  3615                           fsr2l	equ	0xFD9
  3616                           status	equ	0xFD8
  3617                           
  3618 ;; *************** function ___awmod *****************
  3619 ;; Defined at:
  3620 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  dividend        2   26[COMRAM] int 
  3623 ;;  divisor         2   28[COMRAM] int 
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;  sign            1   31[COMRAM] unsigned char 
  3626 ;;  counter         1   30[COMRAM] unsigned char 
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  2   26[COMRAM] int 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0, prodl
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3636 ;;      Params:         4       0       0       0       0       0       0
  3637 ;;      Locals:         2       0       0       0       0       0       0
  3638 ;;      Temps:          0       0       0       0       0       0       0
  3639 ;;      Totals:         6       0       0       0       0       0       0
  3640 ;;Total ram usage:        6 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; Hardware stack levels required when called:    4
  3643 ;; This function calls:
  3644 ;;		Nothing
  3645 ;; This function is called by:
  3646 ;;		_fround
  3647 ;;		_scale
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text6
  3652  003120                     __ptext6:
  3653                           	opt stack 0
  3654  003120                     ___awmod:
  3655                           	opt stack 24
  3656                           
  3657                           ;incstack = 0
  3658  003120  0E00               	movlw	0
  3659  003122  6E20               	movwf	___awmod@sign,c
  3660  003124  501C               	movf	___awmod@dividend+1,w,c
  3661  003126  0A80               	xorlw	128
  3662  003128  6EF3               	movwf	prodl,c
  3663  00312A  0E80               	movlw	128
  3664  00312C  5CF3               	subwf	prodl,w,c
  3665  00312E  0E00               	movlw	0
  3666  003130  B4D8               	btfsc	status,2,c
  3667  003132  5C1B               	subwf	___awmod@dividend,w,c
  3668  003134  B0D8               	btfsc	status,0,c
  3669  003136  D006               	goto	l4416
  3670  003138  6C1B               	negf	___awmod@dividend,c
  3671  00313A  1E1C               	comf	___awmod@dividend+1,f,c
  3672  00313C  B0D8               	btfsc	status,0,c
  3673  00313E  2A1C               	incf	___awmod@dividend+1,f,c
  3674  003140  0E01               	movlw	1
  3675  003142  6E20               	movwf	___awmod@sign,c
  3676  003144                     l4416:
  3677  003144  501E               	movf	___awmod@divisor+1,w,c
  3678  003146  0A80               	xorlw	128
  3679  003148  6EF3               	movwf	prodl,c
  3680  00314A  0E80               	movlw	128
  3681  00314C  5CF3               	subwf	prodl,w,c
  3682  00314E  0E00               	movlw	0
  3683  003150  B4D8               	btfsc	status,2,c
  3684  003152  5C1D               	subwf	___awmod@divisor,w,c
  3685  003154  B0D8               	btfsc	status,0,c
  3686  003156  D004               	goto	l4420
  3687  003158  6C1D               	negf	___awmod@divisor,c
  3688  00315A  1E1E               	comf	___awmod@divisor+1,f,c
  3689  00315C  B0D8               	btfsc	status,0,c
  3690  00315E  2A1E               	incf	___awmod@divisor+1,f,c
  3691  003160                     l4420:
  3692  003160  501E               	movf	___awmod@divisor+1,w,c
  3693  003162  101D               	iorwf	___awmod@divisor,w,c
  3694  003164  B4D8               	btfsc	status,2,c
  3695  003166  D018               	goto	l4436
  3696  003168  0E01               	movlw	1
  3697  00316A  6E1F               	movwf	___awmod@counter,c
  3698  00316C  D004               	goto	l4426
  3699  00316E                     l4424:
  3700  00316E  90D8               	bcf	status,0,c
  3701  003170  361D               	rlcf	___awmod@divisor,f,c
  3702  003172  361E               	rlcf	___awmod@divisor+1,f,c
  3703  003174  2A1F               	incf	___awmod@counter,f,c
  3704  003176                     l4426:
  3705  003176  AE1E               	btfss	___awmod@divisor+1,7,c
  3706  003178  D7FA               	goto	l4424
  3707  00317A                     l4428:
  3708  00317A  501D               	movf	___awmod@divisor,w,c
  3709  00317C  5C1B               	subwf	___awmod@dividend,w,c
  3710  00317E  501E               	movf	___awmod@divisor+1,w,c
  3711  003180  581C               	subwfb	___awmod@dividend+1,w,c
  3712  003182  A0D8               	btfss	status,0,c
  3713  003184  D004               	goto	l4432
  3714  003186  501D               	movf	___awmod@divisor,w,c
  3715  003188  5E1B               	subwf	___awmod@dividend,f,c
  3716  00318A  501E               	movf	___awmod@divisor+1,w,c
  3717  00318C  5A1C               	subwfb	___awmod@dividend+1,f,c
  3718  00318E                     l4432:
  3719  00318E  90D8               	bcf	status,0,c
  3720  003190  321E               	rrcf	___awmod@divisor+1,f,c
  3721  003192  321D               	rrcf	___awmod@divisor,f,c
  3722  003194  2E1F               	decfsz	___awmod@counter,f,c
  3723  003196  D7F1               	goto	l4428
  3724  003198                     l4436:
  3725  003198  5020               	movf	___awmod@sign,w,c
  3726  00319A  B4D8               	btfsc	status,2,c
  3727  00319C  D004               	goto	l4440
  3728  00319E  6C1B               	negf	___awmod@dividend,c
  3729  0031A0  1E1C               	comf	___awmod@dividend+1,f,c
  3730  0031A2  B0D8               	btfsc	status,0,c
  3731  0031A4  2A1C               	incf	___awmod@dividend+1,f,c
  3732  0031A6                     l4440:
  3733  0031A6  C01B  F01B         	movff	___awmod@dividend,?___awmod
  3734  0031AA  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
  3735  0031AE  0012               	return	
  3736  0031B0                     __end_of___awmod:
  3737                           	opt stack 0
  3738                           tblptru	equ	0xFF8
  3739                           tblptrh	equ	0xFF7
  3740                           tblptrl	equ	0xFF6
  3741                           tablat	equ	0xFF5
  3742                           prodh	equ	0xFF4
  3743                           prodl	equ	0xFF3
  3744                           intcon	equ	0xFF2
  3745                           postinc0	equ	0xFEE
  3746                           wreg	equ	0xFE8
  3747                           indf2	equ	0xFDF
  3748                           postinc2	equ	0xFDE
  3749                           postdec2	equ	0xFDD
  3750                           fsr2h	equ	0xFDA
  3751                           fsr2l	equ	0xFD9
  3752                           status	equ	0xFD8
  3753                           
  3754 ;; *************** function __tdiv_to_l_ *****************
  3755 ;; Defined at:
  3756 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  f1              3   26[COMRAM] float 
  3759 ;;  f2              3   29[COMRAM] float 
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  quot            4   35[COMRAM] unsigned long 
  3762 ;;  exp1            1   40[COMRAM] unsigned char 
  3763 ;;  cntr            1   39[COMRAM] unsigned char 
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  4   26[COMRAM] unsigned long 
  3766 ;; Registers used:
  3767 ;;		wreg, status,2, status,0
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3773 ;;      Params:         6       0       0       0       0       0       0
  3774 ;;      Locals:         6       0       0       0       0       0       0
  3775 ;;      Temps:          3       0       0       0       0       0       0
  3776 ;;      Totals:        15       0       0       0       0       0       0
  3777 ;;Total ram usage:       15 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:    4
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_printf
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text7
  3788  0029C4                     __ptext7:
  3789                           	opt stack 0
  3790  0029C4                     __tdiv_to_l_:
  3791                           	opt stack 25
  3792                           
  3793                           ;incstack = 0
  3794  0029C4  C01D  F021         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3795  0029C8  6A22               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3796  0029CA  6A23               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3797  0029CC  341C               	rlcf	__tdiv_to_l_@f1+1,w,c
  3798  0029CE  3621               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3799  0029D0  E301               	bnc	u4521
  3800  0029D2  8022               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3801  0029D4                     u4521:
  3802  0029D4  5021               	movf	??__tdiv_to_l_,w,c
  3803  0029D6  6E29               	movwf	__tdiv_to_l_@exp1,c
  3804  0029D8  6629               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  3805  0029DA  D009               	goto	l4576
  3806  0029DC  0E00               	movlw	0
  3807  0029DE  6E1B               	movwf	?__tdiv_to_l_,c
  3808  0029E0  0E00               	movlw	0
  3809  0029E2  6E1C               	movwf	?__tdiv_to_l_+1,c
  3810  0029E4  0E00               	movlw	0
  3811  0029E6  6E1D               	movwf	?__tdiv_to_l_+2,c
  3812  0029E8  0E00               	movlw	0
  3813  0029EA  6E1E               	movwf	?__tdiv_to_l_+3,c
  3814  0029EC  0012               	return	
  3815  0029EE                     l4576:
  3816  0029EE  C020  F021         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3817  0029F2  6A22               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3818  0029F4  6A23               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3819  0029F6  341F               	rlcf	__tdiv_to_l_@f2+1,w,c
  3820  0029F8  3621               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3821  0029FA  E301               	bnc	u4541
  3822  0029FC  8022               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3823  0029FE                     u4541:
  3824  0029FE  5021               	movf	??__tdiv_to_l_,w,c
  3825  002A00  6E28               	movwf	__tdiv_to_l_@cntr,c
  3826  002A02  6628               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  3827  002A04  D009               	goto	l4582
  3828  002A06  0E00               	movlw	0
  3829  002A08  6E1B               	movwf	?__tdiv_to_l_,c
  3830  002A0A  0E00               	movlw	0
  3831  002A0C  6E1C               	movwf	?__tdiv_to_l_+1,c
  3832  002A0E  0E00               	movlw	0
  3833  002A10  6E1D               	movwf	?__tdiv_to_l_+2,c
  3834  002A12  0E00               	movlw	0
  3835  002A14  6E1E               	movwf	?__tdiv_to_l_+3,c
  3836  002A16  0012               	return	
  3837  002A18                     l4582:
  3838  002A18  8E1C               	bsf	__tdiv_to_l_@f1+1,7,c
  3839  002A1A  0EFF               	movlw	255
  3840  002A1C  161B               	andwf	__tdiv_to_l_@f1,f,c
  3841  002A1E  0EFF               	movlw	255
  3842  002A20  161C               	andwf	__tdiv_to_l_@f1+1,f,c
  3843  002A22  0E00               	movlw	0
  3844  002A24  161D               	andwf	__tdiv_to_l_@f1+2,f,c
  3845  002A26  8E1F               	bsf	__tdiv_to_l_@f2+1,7,c
  3846  002A28  0EFF               	movlw	255
  3847  002A2A  161E               	andwf	__tdiv_to_l_@f2,f,c
  3848  002A2C  0EFF               	movlw	255
  3849  002A2E  161F               	andwf	__tdiv_to_l_@f2+1,f,c
  3850  002A30  0E00               	movlw	0
  3851  002A32  1620               	andwf	__tdiv_to_l_@f2+2,f,c
  3852  002A34  0E00               	movlw	0
  3853  002A36  6E24               	movwf	__tdiv_to_l_@quot,c
  3854  002A38  0E00               	movlw	0
  3855  002A3A  6E25               	movwf	__tdiv_to_l_@quot+1,c
  3856  002A3C  0E00               	movlw	0
  3857  002A3E  6E26               	movwf	__tdiv_to_l_@quot+2,c
  3858  002A40  0E00               	movlw	0
  3859  002A42  6E27               	movwf	__tdiv_to_l_@quot+3,c
  3860  002A44  0E7F               	movlw	127
  3861  002A46  5E29               	subwf	__tdiv_to_l_@exp1,f,c
  3862  002A48  5028               	movf	__tdiv_to_l_@cntr,w,c
  3863  002A4A  0F98               	addlw	152
  3864  002A4C  5E29               	subwf	__tdiv_to_l_@exp1,f,c
  3865  002A4E  0E18               	movlw	24
  3866  002A50  6E28               	movwf	__tdiv_to_l_@cntr,c
  3867  002A52                     l1067:
  3868  002A52  90D8               	bcf	status,0,c
  3869  002A54  3624               	rlcf	__tdiv_to_l_@quot,f,c
  3870  002A56  3625               	rlcf	__tdiv_to_l_@quot+1,f,c
  3871  002A58  3626               	rlcf	__tdiv_to_l_@quot+2,f,c
  3872  002A5A  3627               	rlcf	__tdiv_to_l_@quot+3,f,c
  3873  002A5C  501E               	movf	__tdiv_to_l_@f2,w,c
  3874  002A5E  5C1B               	subwf	__tdiv_to_l_@f1,w,c
  3875  002A60  501F               	movf	__tdiv_to_l_@f2+1,w,c
  3876  002A62  581C               	subwfb	__tdiv_to_l_@f1+1,w,c
  3877  002A64  5020               	movf	__tdiv_to_l_@f2+2,w,c
  3878  002A66  581D               	subwfb	__tdiv_to_l_@f1+2,w,c
  3879  002A68  A0D8               	btfss	status,0,c
  3880  002A6A  D007               	goto	l1068
  3881  002A6C  501E               	movf	__tdiv_to_l_@f2,w,c
  3882  002A6E  5E1B               	subwf	__tdiv_to_l_@f1,f,c
  3883  002A70  501F               	movf	__tdiv_to_l_@f2+1,w,c
  3884  002A72  5A1C               	subwfb	__tdiv_to_l_@f1+1,f,c
  3885  002A74  5020               	movf	__tdiv_to_l_@f2+2,w,c
  3886  002A76  5A1D               	subwfb	__tdiv_to_l_@f1+2,f,c
  3887  002A78  8024               	bsf	__tdiv_to_l_@quot,0,c
  3888  002A7A                     l1068:
  3889  002A7A  90D8               	bcf	status,0,c
  3890  002A7C  361B               	rlcf	__tdiv_to_l_@f1,f,c
  3891  002A7E  361C               	rlcf	__tdiv_to_l_@f1+1,f,c
  3892  002A80  361D               	rlcf	__tdiv_to_l_@f1+2,f,c
  3893  002A82  2E28               	decfsz	__tdiv_to_l_@cntr,f,c
  3894  002A84  D7E6               	goto	l1067
  3895  002A86  AE29               	btfss	__tdiv_to_l_@exp1,7,c
  3896  002A88  D019               	goto	l4614
  3897  002A8A  5029               	movf	__tdiv_to_l_@exp1,w,c
  3898  002A8C  0A80               	xorlw	128
  3899  002A8E  6E21               	movwf	??__tdiv_to_l_& (0+255),c
  3900  002A90  0EE9               	movlw	233
  3901  002A92  0A80               	xorlw	128
  3902  002A94  5C21               	subwf	??__tdiv_to_l_,w,c
  3903  002A96  B0D8               	btfsc	status,0,c
  3904  002A98  D009               	goto	l4610
  3905  002A9A  0E00               	movlw	0
  3906  002A9C  6E1B               	movwf	?__tdiv_to_l_,c
  3907  002A9E  0E00               	movlw	0
  3908  002AA0  6E1C               	movwf	?__tdiv_to_l_+1,c
  3909  002AA2  0E00               	movlw	0
  3910  002AA4  6E1D               	movwf	?__tdiv_to_l_+2,c
  3911  002AA6  0E00               	movlw	0
  3912  002AA8  6E1E               	movwf	?__tdiv_to_l_+3,c
  3913  002AAA  0012               	return	
  3914  002AAC                     l4610:
  3915  002AAC  90D8               	bcf	status,0,c
  3916  002AAE  3227               	rrcf	__tdiv_to_l_@quot+3,f,c
  3917  002AB0  3226               	rrcf	__tdiv_to_l_@quot+2,f,c
  3918  002AB2  3225               	rrcf	__tdiv_to_l_@quot+1,f,c
  3919  002AB4  3224               	rrcf	__tdiv_to_l_@quot,f,c
  3920  002AB6  3E29               	incfsz	__tdiv_to_l_@exp1,f,c
  3921  002AB8  D7F9               	goto	l4610
  3922  002ABA  D014               	goto	l1074
  3923  002ABC                     l4614:
  3924  002ABC  0E17               	movlw	23
  3925  002ABE  6429               	cpfsgt	__tdiv_to_l_@exp1,c
  3926  002AC0  D00F               	goto	l4622
  3927  002AC2  0E00               	movlw	0
  3928  002AC4  6E1B               	movwf	?__tdiv_to_l_,c
  3929  002AC6  0E00               	movlw	0
  3930  002AC8  6E1C               	movwf	?__tdiv_to_l_+1,c
  3931  002ACA  0E00               	movlw	0
  3932  002ACC  6E1D               	movwf	?__tdiv_to_l_+2,c
  3933  002ACE  0E00               	movlw	0
  3934  002AD0  6E1E               	movwf	?__tdiv_to_l_+3,c
  3935  002AD2  0012               	return	
  3936  002AD4                     l4620:
  3937  002AD4  90D8               	bcf	status,0,c
  3938  002AD6  3624               	rlcf	__tdiv_to_l_@quot,f,c
  3939  002AD8  3625               	rlcf	__tdiv_to_l_@quot+1,f,c
  3940  002ADA  3626               	rlcf	__tdiv_to_l_@quot+2,f,c
  3941  002ADC  3627               	rlcf	__tdiv_to_l_@quot+3,f,c
  3942  002ADE  0629               	decf	__tdiv_to_l_@exp1,f,c
  3943  002AE0                     l4622:
  3944  002AE0  6629               	tstfsz	__tdiv_to_l_@exp1,c
  3945  002AE2  D7F8               	goto	l4620
  3946  002AE4                     l1074:
  3947  002AE4  C024  F01B         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3948  002AE8  C025  F01C         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3949  002AEC  C026  F01D         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3950  002AF0  C027  F01E         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3951  002AF4  0012               	return	
  3952  002AF6                     __end_of__tdiv_to_l_:
  3953                           	opt stack 0
  3954                           tblptru	equ	0xFF8
  3955                           tblptrh	equ	0xFF7
  3956                           tblptrl	equ	0xFF6
  3957                           tablat	equ	0xFF5
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon	equ	0xFF2
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           indf2	equ	0xFDF
  3964                           postinc2	equ	0xFDE
  3965                           postdec2	equ	0xFDD
  3966                           fsr2h	equ	0xFDA
  3967                           fsr2l	equ	0xFD9
  3968                           status	equ	0xFD8
  3969                           
  3970 ;; *************** function __div_to_l_ *****************
  3971 ;; Defined at:
  3972 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;  f1              3   26[COMRAM] unsigned long 
  3975 ;;  f2              3   29[COMRAM] unsigned long 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;  quot            4   36[COMRAM] unsigned long 
  3978 ;;  exp1            1   41[COMRAM] unsigned char 
  3979 ;;  cntr            1   40[COMRAM] unsigned char 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  4   26[COMRAM] unsigned long 
  3982 ;; Registers used:
  3983 ;;		wreg, status,2, status,0
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3989 ;;      Params:         6       0       0       0       0       0       0
  3990 ;;      Locals:         6       0       0       0       0       0       0
  3991 ;;      Temps:          4       0       0       0       0       0       0
  3992 ;;      Totals:        16       0       0       0       0       0       0
  3993 ;;Total ram usage:       16 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    4
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_printf
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text8
  4004  002710                     __ptext8:
  4005                           	opt stack 0
  4006  002710                     __div_to_l_:
  4007                           	opt stack 25
  4008                           
  4009                           ;incstack = 0
  4010  002710  C01B  F021         	movff	__div_to_l_@f1,??__div_to_l_
  4011  002714  C01C  F022         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  4012  002718  C01D  F023         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  4013  00271C  C01E  F024         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  4014  002720  0E18               	movlw	24
  4015  002722  D005               	goto	u4610
  4016  002724                     u4615:
  4017  002724  90D8               	bcf	status,0,c
  4018  002726  3224               	rrcf	??__div_to_l_+3,f,c
  4019  002728  3223               	rrcf	??__div_to_l_+2,f,c
  4020  00272A  3222               	rrcf	??__div_to_l_+1,f,c
  4021  00272C  3221               	rrcf	??__div_to_l_,f,c
  4022  00272E                     u4610:
  4023  00272E  2EE8               	decfsz	wreg,f,c
  4024  002730  D7F9               	goto	u4615
  4025  002732  5021               	movf	??__div_to_l_,w,c
  4026  002734  6E2A               	movwf	__div_to_l_@exp1,c
  4027  002736  662A               	tstfsz	__div_to_l_@exp1& (0+255),c
  4028  002738  D009               	goto	l4630
  4029  00273A  0E00               	movlw	0
  4030  00273C  6E1B               	movwf	?__div_to_l_,c
  4031  00273E  0E00               	movlw	0
  4032  002740  6E1C               	movwf	?__div_to_l_+1,c
  4033  002742  0E00               	movlw	0
  4034  002744  6E1D               	movwf	?__div_to_l_+2,c
  4035  002746  0E00               	movlw	0
  4036  002748  6E1E               	movwf	?__div_to_l_+3,c
  4037  00274A  0012               	return	
  4038  00274C                     l4630:
  4039  00274C  C01E  F021         	movff	__div_to_l_@f2,??__div_to_l_
  4040  002750  C01F  F022         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  4041  002754  C020  F023         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  4042  002758  C021  F024         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  4043  00275C  0E18               	movlw	24
  4044  00275E  D005               	goto	u4630
  4045  002760                     u4635:
  4046  002760  90D8               	bcf	status,0,c
  4047  002762  3224               	rrcf	??__div_to_l_+3,f,c
  4048  002764  3223               	rrcf	??__div_to_l_+2,f,c
  4049  002766  3222               	rrcf	??__div_to_l_+1,f,c
  4050  002768  3221               	rrcf	??__div_to_l_,f,c
  4051  00276A                     u4630:
  4052  00276A  2EE8               	decfsz	wreg,f,c
  4053  00276C  D7F9               	goto	u4635
  4054  00276E  5021               	movf	??__div_to_l_,w,c
  4055  002770  6E29               	movwf	__div_to_l_@cntr,c
  4056  002772  6629               	tstfsz	__div_to_l_@cntr& (0+255),c
  4057  002774  D009               	goto	l4636
  4058  002776  0E00               	movlw	0
  4059  002778  6E1B               	movwf	?__div_to_l_,c
  4060  00277A  0E00               	movlw	0
  4061  00277C  6E1C               	movwf	?__div_to_l_+1,c
  4062  00277E  0E00               	movlw	0
  4063  002780  6E1D               	movwf	?__div_to_l_+2,c
  4064  002782  0E00               	movlw	0
  4065  002784  6E1E               	movwf	?__div_to_l_+3,c
  4066  002786  0012               	return	
  4067  002788                     l4636:
  4068  002788  8E1D               	bsf	__div_to_l_@f1+2,7,c
  4069  00278A  0EFF               	movlw	255
  4070  00278C  161B               	andwf	__div_to_l_@f1,f,c
  4071  00278E  0EFF               	movlw	255
  4072  002790  161C               	andwf	__div_to_l_@f1+1,f,c
  4073  002792  0EFF               	movlw	255
  4074  002794  161D               	andwf	__div_to_l_@f1+2,f,c
  4075  002796  0E00               	movlw	0
  4076  002798  161E               	andwf	__div_to_l_@f1+3,f,c
  4077  00279A  8E20               	bsf	__div_to_l_@f2+2,7,c
  4078  00279C  0EFF               	movlw	255
  4079  00279E  161E               	andwf	__div_to_l_@f2,f,c
  4080  0027A0  0EFF               	movlw	255
  4081  0027A2  161F               	andwf	__div_to_l_@f2+1,f,c
  4082  0027A4  0EFF               	movlw	255
  4083  0027A6  1620               	andwf	__div_to_l_@f2+2,f,c
  4084  0027A8  0E00               	movlw	0
  4085  0027AA  1621               	andwf	__div_to_l_@f2+3,f,c
  4086  0027AC  0E00               	movlw	0
  4087  0027AE  6E25               	movwf	__div_to_l_@quot,c
  4088  0027B0  0E00               	movlw	0
  4089  0027B2  6E26               	movwf	__div_to_l_@quot+1,c
  4090  0027B4  0E00               	movlw	0
  4091  0027B6  6E27               	movwf	__div_to_l_@quot+2,c
  4092  0027B8  0E00               	movlw	0
  4093  0027BA  6E28               	movwf	__div_to_l_@quot+3,c
  4094  0027BC  0E7F               	movlw	127
  4095  0027BE  5E2A               	subwf	__div_to_l_@exp1,f,c
  4096  0027C0  5029               	movf	__div_to_l_@cntr,w,c
  4097  0027C2  0FA0               	addlw	160
  4098  0027C4  5E2A               	subwf	__div_to_l_@exp1,f,c
  4099  0027C6  0E20               	movlw	32
  4100  0027C8  6E29               	movwf	__div_to_l_@cntr,c
  4101  0027CA                     l4650:
  4102  0027CA  90D8               	bcf	status,0,c
  4103  0027CC  3625               	rlcf	__div_to_l_@quot,f,c
  4104  0027CE  3626               	rlcf	__div_to_l_@quot+1,f,c
  4105  0027D0  3627               	rlcf	__div_to_l_@quot+2,f,c
  4106  0027D2  3628               	rlcf	__div_to_l_@quot+3,f,c
  4107  0027D4  501E               	movf	__div_to_l_@f2,w,c
  4108  0027D6  5C1B               	subwf	__div_to_l_@f1,w,c
  4109  0027D8  501F               	movf	__div_to_l_@f2+1,w,c
  4110  0027DA  581C               	subwfb	__div_to_l_@f1+1,w,c
  4111  0027DC  5020               	movf	__div_to_l_@f2+2,w,c
  4112  0027DE  581D               	subwfb	__div_to_l_@f1+2,w,c
  4113  0027E0  5021               	movf	__div_to_l_@f2+3,w,c
  4114  0027E2  581E               	subwfb	__div_to_l_@f1+3,w,c
  4115  0027E4  A0D8               	btfss	status,0,c
  4116  0027E6  D009               	goto	l4658
  4117  0027E8  501E               	movf	__div_to_l_@f2,w,c
  4118  0027EA  5E1B               	subwf	__div_to_l_@f1,f,c
  4119  0027EC  501F               	movf	__div_to_l_@f2+1,w,c
  4120  0027EE  5A1C               	subwfb	__div_to_l_@f1+1,f,c
  4121  0027F0  5020               	movf	__div_to_l_@f2+2,w,c
  4122  0027F2  5A1D               	subwfb	__div_to_l_@f1+2,f,c
  4123  0027F4  5021               	movf	__div_to_l_@f2+3,w,c
  4124  0027F6  5A1E               	subwfb	__div_to_l_@f1+3,f,c
  4125  0027F8  8025               	bsf	__div_to_l_@quot,0,c
  4126  0027FA                     l4658:
  4127  0027FA  90D8               	bcf	status,0,c
  4128  0027FC  361B               	rlcf	__div_to_l_@f1,f,c
  4129  0027FE  361C               	rlcf	__div_to_l_@f1+1,f,c
  4130  002800  361D               	rlcf	__div_to_l_@f1+2,f,c
  4131  002802  361E               	rlcf	__div_to_l_@f1+3,f,c
  4132  002804  2E29               	decfsz	__div_to_l_@cntr,f,c
  4133  002806  D7E1               	goto	l4650
  4134  002808  AE2A               	btfss	__div_to_l_@exp1,7,c
  4135  00280A  D019               	goto	l4672
  4136  00280C  502A               	movf	__div_to_l_@exp1,w,c
  4137  00280E  0A80               	xorlw	128
  4138  002810  6E21               	movwf	??__div_to_l_& (0+255),c
  4139  002812  0EE1               	movlw	225
  4140  002814  0A80               	xorlw	128
  4141  002816  5C21               	subwf	??__div_to_l_,w,c
  4142  002818  B0D8               	btfsc	status,0,c
  4143  00281A  D009               	goto	l4668
  4144  00281C  0E00               	movlw	0
  4145  00281E  6E1B               	movwf	?__div_to_l_,c
  4146  002820  0E00               	movlw	0
  4147  002822  6E1C               	movwf	?__div_to_l_+1,c
  4148  002824  0E00               	movlw	0
  4149  002826  6E1D               	movwf	?__div_to_l_+2,c
  4150  002828  0E00               	movlw	0
  4151  00282A  6E1E               	movwf	?__div_to_l_+3,c
  4152  00282C  0012               	return	
  4153  00282E                     l4668:
  4154  00282E  90D8               	bcf	status,0,c
  4155  002830  3228               	rrcf	__div_to_l_@quot+3,f,c
  4156  002832  3227               	rrcf	__div_to_l_@quot+2,f,c
  4157  002834  3226               	rrcf	__div_to_l_@quot+1,f,c
  4158  002836  3225               	rrcf	__div_to_l_@quot,f,c
  4159  002838  3E2A               	incfsz	__div_to_l_@exp1,f,c
  4160  00283A  D7F9               	goto	l4668
  4161  00283C  D014               	goto	l956
  4162  00283E                     l4672:
  4163  00283E  0E1F               	movlw	31
  4164  002840  642A               	cpfsgt	__div_to_l_@exp1,c
  4165  002842  D00F               	goto	l4680
  4166  002844  0E00               	movlw	0
  4167  002846  6E1B               	movwf	?__div_to_l_,c
  4168  002848  0E00               	movlw	0
  4169  00284A  6E1C               	movwf	?__div_to_l_+1,c
  4170  00284C  0E00               	movlw	0
  4171  00284E  6E1D               	movwf	?__div_to_l_+2,c
  4172  002850  0E00               	movlw	0
  4173  002852  6E1E               	movwf	?__div_to_l_+3,c
  4174  002854  0012               	return	
  4175  002856                     l4678:
  4176  002856  90D8               	bcf	status,0,c
  4177  002858  3625               	rlcf	__div_to_l_@quot,f,c
  4178  00285A  3626               	rlcf	__div_to_l_@quot+1,f,c
  4179  00285C  3627               	rlcf	__div_to_l_@quot+2,f,c
  4180  00285E  3628               	rlcf	__div_to_l_@quot+3,f,c
  4181  002860  062A               	decf	__div_to_l_@exp1,f,c
  4182  002862                     l4680:
  4183  002862  662A               	tstfsz	__div_to_l_@exp1,c
  4184  002864  D7F8               	goto	l4678
  4185  002866                     l956:
  4186  002866  C025  F01B         	movff	__div_to_l_@quot,?__div_to_l_
  4187  00286A  C026  F01C         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4188  00286E  C027  F01D         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4189  002872  C028  F01E         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4190  002876  0012               	return	
  4191  002878                     __end_of__div_to_l_:
  4192                           	opt stack 0
  4193                           tblptru	equ	0xFF8
  4194                           tblptrh	equ	0xFF7
  4195                           tblptrl	equ	0xFF6
  4196                           tablat	equ	0xFF5
  4197                           prodh	equ	0xFF4
  4198                           prodl	equ	0xFF3
  4199                           intcon	equ	0xFF2
  4200                           postinc0	equ	0xFEE
  4201                           wreg	equ	0xFE8
  4202                           indf2	equ	0xFDF
  4203                           postinc2	equ	0xFDE
  4204                           postdec2	equ	0xFDD
  4205                           fsr2h	equ	0xFDA
  4206                           fsr2l	equ	0xFD9
  4207                           status	equ	0xFD8
  4208                           
  4209 ;; *************** function ___lltoft *****************
  4210 ;; Defined at:
  4211 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  c               4   34[COMRAM] unsigned long 
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;  exp             1   42[COMRAM] unsigned char 
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  3   34[COMRAM] float 
  4218 ;; Registers used:
  4219 ;;		wreg, status,2, status,0, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4225 ;;      Params:         4       0       0       0       0       0       0
  4226 ;;      Locals:         1       0       0       0       0       0       0
  4227 ;;      Temps:          4       0       0       0       0       0       0
  4228 ;;      Totals:         9       0       0       0       0       0       0
  4229 ;;Total ram usage:        9 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    5
  4232 ;; This function calls:
  4233 ;;		___ftpack
  4234 ;; This function is called by:
  4235 ;;		_printf
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text9
  4240  0033B0                     __ptext9:
  4241                           	opt stack 0
  4242  0033B0                     ___lltoft:
  4243                           	opt stack 24
  4244                           
  4245                           ;incstack = 0
  4246  0033B0  0E8E               	movlw	142
  4247  0033B2  6E2B               	movwf	___lltoft@exp,c
  4248  0033B4  D006               	goto	l4860
  4249  0033B6                     l4858:
  4250  0033B6  90D8               	bcf	status,0,c
  4251  0033B8  3226               	rrcf	___lltoft@c+3,f,c
  4252  0033BA  3225               	rrcf	___lltoft@c+2,f,c
  4253  0033BC  3224               	rrcf	___lltoft@c+1,f,c
  4254  0033BE  3223               	rrcf	___lltoft@c,f,c
  4255  0033C0  2A2B               	incf	___lltoft@exp,f,c
  4256  0033C2                     l4860:
  4257  0033C2  0E00               	movlw	0
  4258  0033C4  1423               	andwf	___lltoft@c,w,c
  4259  0033C6  6E27               	movwf	??___lltoft& (0+255),c
  4260  0033C8  0E00               	movlw	0
  4261  0033CA  1424               	andwf	___lltoft@c+1,w,c
  4262  0033CC  6E28               	movwf	(??___lltoft+1)& (0+255),c
  4263  0033CE  0E00               	movlw	0
  4264  0033D0  1425               	andwf	___lltoft@c+2,w,c
  4265  0033D2  6E29               	movwf	(??___lltoft+2)& (0+255),c
  4266  0033D4  0EFF               	movlw	255
  4267  0033D6  1426               	andwf	___lltoft@c+3,w,c
  4268  0033D8  6E2A               	movwf	(??___lltoft+3)& (0+255),c
  4269  0033DA  502A               	movf	??___lltoft+3,w,c
  4270  0033DC  1027               	iorwf	??___lltoft,w,c
  4271  0033DE  1028               	iorwf	??___lltoft+1,w,c
  4272  0033E0  1029               	iorwf	??___lltoft+2,w,c
  4273  0033E2  A4D8               	btfss	status,2,c
  4274  0033E4  D7E8               	goto	l4858
  4275  0033E6  C023  F01B         	movff	___lltoft@c,___ftpack@arg
  4276  0033EA  C024  F01C         	movff	___lltoft@c+1,___ftpack@arg+1
  4277  0033EE  C025  F01D         	movff	___lltoft@c+2,___ftpack@arg+2
  4278  0033F2  C02B  F01E         	movff	___lltoft@exp,___ftpack@exp
  4279  0033F6  0E00               	movlw	0
  4280  0033F8  6E1F               	movwf	___ftpack@sign,c
  4281  0033FA  ECA1  F017         	call	___ftpack	;wreg free
  4282  0033FE  C01B  F023         	movff	?___ftpack,?___lltoft
  4283  003402  C01C  F024         	movff	?___ftpack+1,?___lltoft+1
  4284  003406  C01D  F025         	movff	?___ftpack+2,?___lltoft+2
  4285  00340A  0012               	return	
  4286  00340C                     __end_of___lltoft:
  4287                           	opt stack 0
  4288                           tblptru	equ	0xFF8
  4289                           tblptrh	equ	0xFF7
  4290                           tblptrl	equ	0xFF6
  4291                           tablat	equ	0xFF5
  4292                           prodh	equ	0xFF4
  4293                           prodl	equ	0xFF3
  4294                           intcon	equ	0xFF2
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           indf2	equ	0xFDF
  4298                           postinc2	equ	0xFDE
  4299                           postdec2	equ	0xFDD
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function ___llmod *****************
  4305 ;; Defined at:
  4306 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  dividend        4   39[COMRAM] unsigned long 
  4309 ;;  divisor         4   43[COMRAM] unsigned long 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  counter         1    0[BANK0 ] unsigned char 
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  4   39[COMRAM] unsigned long 
  4314 ;; Registers used:
  4315 ;;		wreg, status,2, status,0
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4321 ;;      Params:         8       0       0       0       0       0       0
  4322 ;;      Locals:         0       1       0       0       0       0       0
  4323 ;;      Temps:          0       0       0       0       0       0       0
  4324 ;;      Totals:         8       1       0       0       0       0       0
  4325 ;;Total ram usage:        9 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    4
  4328 ;; This function calls:
  4329 ;;		Nothing
  4330 ;; This function is called by:
  4331 ;;		_printf
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text10
  4336  003344                     __ptext10:
  4337                           	opt stack 0
  4338  003344                     ___llmod:
  4339                           	opt stack 25
  4340                           
  4341                           ;incstack = 0
  4342  003344  502F               	movf	___llmod@divisor+3,w,c
  4343  003346  102C               	iorwf	___llmod@divisor,w,c
  4344  003348  102D               	iorwf	___llmod@divisor+1,w,c
  4345  00334A  102E               	iorwf	___llmod@divisor+2,w,c
  4346  00334C  B4D8               	btfsc	status,2,c
  4347  00334E  D027               	goto	l1158
  4348  003350  0E01               	movlw	1
  4349  003352  0100               	movlb	0	; () banked
  4350  003354  6F60               	movwf	___llmod@counter& (0+255),b
  4351  003356  D007               	goto	l4846
  4352  003358                     l4844:
  4353                           
  4354                           ; BSR set to: 0
  4355  003358  90D8               	bcf	status,0,c
  4356  00335A  362C               	rlcf	___llmod@divisor,f,c
  4357  00335C  362D               	rlcf	___llmod@divisor+1,f,c
  4358  00335E  362E               	rlcf	___llmod@divisor+2,f,c
  4359  003360  362F               	rlcf	___llmod@divisor+3,f,c
  4360  003362  0100               	movlb	0	; () banked
  4361  003364  2B60               	incf	___llmod@counter& (0+255),f,b
  4362  003366                     l4846:
  4363                           
  4364                           ; BSR set to: 0
  4365  003366  AE2F               	btfss	___llmod@divisor+3,7,c
  4366  003368  D7F7               	goto	l4844
  4367  00336A                     l4848:
  4368                           
  4369                           ; BSR set to: 0
  4370  00336A  502C               	movf	___llmod@divisor,w,c
  4371  00336C  5C28               	subwf	___llmod@dividend,w,c
  4372  00336E  502D               	movf	___llmod@divisor+1,w,c
  4373  003370  5829               	subwfb	___llmod@dividend+1,w,c
  4374  003372  502E               	movf	___llmod@divisor+2,w,c
  4375  003374  582A               	subwfb	___llmod@dividend+2,w,c
  4376  003376  502F               	movf	___llmod@divisor+3,w,c
  4377  003378  582B               	subwfb	___llmod@dividend+3,w,c
  4378  00337A  A0D8               	btfss	status,0,c
  4379  00337C  D008               	goto	l4852
  4380                           
  4381                           ; BSR set to: 0
  4382  00337E  502C               	movf	___llmod@divisor,w,c
  4383  003380  5E28               	subwf	___llmod@dividend,f,c
  4384  003382  502D               	movf	___llmod@divisor+1,w,c
  4385  003384  5A29               	subwfb	___llmod@dividend+1,f,c
  4386  003386  502E               	movf	___llmod@divisor+2,w,c
  4387  003388  5A2A               	subwfb	___llmod@dividend+2,f,c
  4388  00338A  502F               	movf	___llmod@divisor+3,w,c
  4389  00338C  5A2B               	subwfb	___llmod@dividend+3,f,c
  4390  00338E                     l4852:
  4391                           
  4392                           ; BSR set to: 0
  4393  00338E  90D8               	bcf	status,0,c
  4394  003390  322F               	rrcf	___llmod@divisor+3,f,c
  4395  003392  322E               	rrcf	___llmod@divisor+2,f,c
  4396  003394  322D               	rrcf	___llmod@divisor+1,f,c
  4397  003396  322C               	rrcf	___llmod@divisor,f,c
  4398                           
  4399                           ; BSR set to: 0
  4400  003398  0100               	movlb	0	; () banked
  4401  00339A  2F60               	decfsz	___llmod@counter& (0+255),f,b
  4402  00339C  D7E6               	goto	l4848
  4403  00339E                     l1158:
  4404  00339E  C028  F028         	movff	___llmod@dividend,?___llmod
  4405  0033A2  C029  F029         	movff	___llmod@dividend+1,?___llmod+1
  4406  0033A6  C02A  F02A         	movff	___llmod@dividend+2,?___llmod+2
  4407  0033AA  C02B  F02B         	movff	___llmod@dividend+3,?___llmod+3
  4408  0033AE  0012               	return	
  4409  0033B0                     __end_of___llmod:
  4410                           	opt stack 0
  4411                           tblptru	equ	0xFF8
  4412                           tblptrh	equ	0xFF7
  4413                           tblptrl	equ	0xFF6
  4414                           tablat	equ	0xFF5
  4415                           prodh	equ	0xFF4
  4416                           prodl	equ	0xFF3
  4417                           intcon	equ	0xFF2
  4418                           postinc0	equ	0xFEE
  4419                           wreg	equ	0xFE8
  4420                           indf2	equ	0xFDF
  4421                           postinc2	equ	0xFDE
  4422                           postdec2	equ	0xFDD
  4423                           fsr2h	equ	0xFDA
  4424                           fsr2l	equ	0xFD9
  4425                           status	equ	0xFD8
  4426                           
  4427 ;; *************** function ___lldiv *****************
  4428 ;; Defined at:
  4429 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;  dividend        4   26[COMRAM] unsigned long 
  4432 ;;  divisor         4   30[COMRAM] unsigned long 
  4433 ;; Auto vars:     Size  Location     Type
  4434 ;;  quotient        4   34[COMRAM] unsigned long 
  4435 ;;  counter         1   38[COMRAM] unsigned char 
  4436 ;; Return value:  Size  Location     Type
  4437 ;;                  4   26[COMRAM] unsigned long 
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4445 ;;      Params:         8       0       0       0       0       0       0
  4446 ;;      Locals:         5       0       0       0       0       0       0
  4447 ;;      Temps:          0       0       0       0       0       0       0
  4448 ;;      Totals:        13       0       0       0       0       0       0
  4449 ;;Total ram usage:       13 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    4
  4452 ;; This function calls:
  4453 ;;		Nothing
  4454 ;; This function is called by:
  4455 ;;		_printf
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           	psect	text11
  4460  003240                     __ptext11:
  4461                           	opt stack 0
  4462  003240                     ___lldiv:
  4463                           	opt stack 25
  4464                           
  4465                           ;incstack = 0
  4466  003240  0E00               	movlw	0
  4467  003242  6E23               	movwf	___lldiv@quotient,c
  4468  003244  0E00               	movlw	0
  4469  003246  6E24               	movwf	___lldiv@quotient+1,c
  4470  003248  0E00               	movlw	0
  4471  00324A  6E25               	movwf	___lldiv@quotient+2,c
  4472  00324C  0E00               	movlw	0
  4473  00324E  6E26               	movwf	___lldiv@quotient+3,c
  4474  003250  5022               	movf	___lldiv@divisor+3,w,c
  4475  003252  101F               	iorwf	___lldiv@divisor,w,c
  4476  003254  1020               	iorwf	___lldiv@divisor+1,w,c
  4477  003256  1021               	iorwf	___lldiv@divisor+2,w,c
  4478  003258  B4D8               	btfsc	status,2,c
  4479  00325A  D02A               	goto	l1148
  4480  00325C  0E01               	movlw	1
  4481  00325E  6E27               	movwf	___lldiv@counter,c
  4482  003260  D006               	goto	l4826
  4483  003262                     l4824:
  4484  003262  90D8               	bcf	status,0,c
  4485  003264  361F               	rlcf	___lldiv@divisor,f,c
  4486  003266  3620               	rlcf	___lldiv@divisor+1,f,c
  4487  003268  3621               	rlcf	___lldiv@divisor+2,f,c
  4488  00326A  3622               	rlcf	___lldiv@divisor+3,f,c
  4489  00326C  2A27               	incf	___lldiv@counter,f,c
  4490  00326E                     l4826:
  4491  00326E  AE22               	btfss	___lldiv@divisor+3,7,c
  4492  003270  D7F8               	goto	l4824
  4493  003272                     l4828:
  4494  003272  90D8               	bcf	status,0,c
  4495  003274  3623               	rlcf	___lldiv@quotient,f,c
  4496  003276  3624               	rlcf	___lldiv@quotient+1,f,c
  4497  003278  3625               	rlcf	___lldiv@quotient+2,f,c
  4498  00327A  3626               	rlcf	___lldiv@quotient+3,f,c
  4499  00327C  501F               	movf	___lldiv@divisor,w,c
  4500  00327E  5C1B               	subwf	___lldiv@dividend,w,c
  4501  003280  5020               	movf	___lldiv@divisor+1,w,c
  4502  003282  581C               	subwfb	___lldiv@dividend+1,w,c
  4503  003284  5021               	movf	___lldiv@divisor+2,w,c
  4504  003286  581D               	subwfb	___lldiv@dividend+2,w,c
  4505  003288  5022               	movf	___lldiv@divisor+3,w,c
  4506  00328A  581E               	subwfb	___lldiv@dividend+3,w,c
  4507  00328C  A0D8               	btfss	status,0,c
  4508  00328E  D009               	goto	l4836
  4509  003290  501F               	movf	___lldiv@divisor,w,c
  4510  003292  5E1B               	subwf	___lldiv@dividend,f,c
  4511  003294  5020               	movf	___lldiv@divisor+1,w,c
  4512  003296  5A1C               	subwfb	___lldiv@dividend+1,f,c
  4513  003298  5021               	movf	___lldiv@divisor+2,w,c
  4514  00329A  5A1D               	subwfb	___lldiv@dividend+2,f,c
  4515  00329C  5022               	movf	___lldiv@divisor+3,w,c
  4516  00329E  5A1E               	subwfb	___lldiv@dividend+3,f,c
  4517  0032A0  8023               	bsf	___lldiv@quotient,0,c
  4518  0032A2                     l4836:
  4519  0032A2  90D8               	bcf	status,0,c
  4520  0032A4  3222               	rrcf	___lldiv@divisor+3,f,c
  4521  0032A6  3221               	rrcf	___lldiv@divisor+2,f,c
  4522  0032A8  3220               	rrcf	___lldiv@divisor+1,f,c
  4523  0032AA  321F               	rrcf	___lldiv@divisor,f,c
  4524  0032AC  2E27               	decfsz	___lldiv@counter,f,c
  4525  0032AE  D7E1               	goto	l4828
  4526  0032B0                     l1148:
  4527  0032B0  C023  F01B         	movff	___lldiv@quotient,?___lldiv
  4528  0032B4  C024  F01C         	movff	___lldiv@quotient+1,?___lldiv+1
  4529  0032B8  C025  F01D         	movff	___lldiv@quotient+2,?___lldiv+2
  4530  0032BC  C026  F01E         	movff	___lldiv@quotient+3,?___lldiv+3
  4531  0032C0  0012               	return	
  4532  0032C2                     __end_of___lldiv:
  4533                           	opt stack 0
  4534                           tblptru	equ	0xFF8
  4535                           tblptrh	equ	0xFF7
  4536                           tblptrl	equ	0xFF6
  4537                           tablat	equ	0xFF5
  4538                           prodh	equ	0xFF4
  4539                           prodl	equ	0xFF3
  4540                           intcon	equ	0xFF2
  4541                           postinc0	equ	0xFEE
  4542                           wreg	equ	0xFE8
  4543                           indf2	equ	0xFDF
  4544                           postinc2	equ	0xFDE
  4545                           postdec2	equ	0xFDD
  4546                           fsr2h	equ	0xFDA
  4547                           fsr2l	equ	0xFD9
  4548                           status	equ	0xFD8
  4549                           
  4550 ;; *************** function ___fttol *****************
  4551 ;; Defined at:
  4552 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;  f1              3   34[BANK0 ] float 
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;  lval            4   44[BANK0 ] unsigned long 
  4557 ;;  exp1            1   48[BANK0 ] unsigned char 
  4558 ;;  sign1           1   43[BANK0 ] unsigned char 
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  4   34[BANK0 ] long 
  4561 ;; Registers used:
  4562 ;;		wreg, status,2, status,0
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4568 ;;      Params:         0       4       0       0       0       0       0
  4569 ;;      Locals:         0       6       0       0       0       0       0
  4570 ;;      Temps:          0       5       0       0       0       0       0
  4571 ;;      Totals:         0      15       0       0       0       0       0
  4572 ;;Total ram usage:       15 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; Hardware stack levels required when called:    4
  4575 ;; This function calls:
  4576 ;;		Nothing
  4577 ;; This function is called by:
  4578 ;;		_printf
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           	psect	text12
  4583  0022B0                     __ptext12:
  4584                           	opt stack 0
  4585  0022B0                     ___fttol:
  4586                           	opt stack 25
  4587                           
  4588                           ;incstack = 0
  4589  0022B0  0100               	movlb	0	; () banked
  4590  0022B2  C084  F086         	movff	___fttol@f1+2,??___fttol
  4591  0022B6  0100               	movlb	0	; () banked
  4592  0022B8  6B87               	clrf	(??___fttol+1)& (0+255),b
  4593  0022BA  6B88               	clrf	(??___fttol+2)& (0+255),b
  4594  0022BC  0100               	movlb	0	; () banked
  4595  0022BE  3583               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4596  0022C0  0100               	movlb	0	; () banked
  4597  0022C2  3786               	rlcf	??___fttol& (0+255),f,b
  4598  0022C4  E301               	bnc	u4811
  4599  0022C6  8187               	bsf	(??___fttol+1)& (0+255),0,b
  4600  0022C8                     u4811:
  4601  0022C8  0100               	movlb	0	; () banked
  4602  0022CA  5186               	movf	??___fttol& (0+255),w,b
  4603  0022CC  0100               	movlb	0	; () banked
  4604  0022CE  6F90               	movwf	___fttol@exp1& (0+255),b
  4605  0022D0  0100               	movlb	0	; () banked
  4606  0022D2  6790               	tstfsz	___fttol@exp1& (0+255),b
  4607  0022D4  D00D               	goto	l4778
  4608                           
  4609                           ; BSR set to: 0
  4610  0022D6  0E00               	movlw	0
  4611  0022D8  0100               	movlb	0	; () banked
  4612  0022DA  6F82               	movwf	?___fttol& (0+255),b
  4613  0022DC  0E00               	movlw	0
  4614  0022DE  0100               	movlb	0	; () banked
  4615  0022E0  6F83               	movwf	(?___fttol+1)& (0+255),b
  4616  0022E2  0E00               	movlw	0
  4617  0022E4  0100               	movlb	0	; () banked
  4618  0022E6  6F84               	movwf	(?___fttol+2)& (0+255),b
  4619  0022E8  0E00               	movlw	0
  4620  0022EA  0100               	movlb	0	; () banked
  4621  0022EC  6F85               	movwf	(?___fttol+3)& (0+255),b
  4622  0022EE  0012               	return	
  4623  0022F0                     l4778:
  4624                           
  4625                           ; BSR set to: 0
  4626  0022F0  0E17               	movlw	23
  4627  0022F2  0100               	movlb	0	; () banked
  4628  0022F4  6F86               	movwf	??___fttol& (0+255),b
  4629  0022F6  0100               	movlb	0	; () banked
  4630  0022F8  C082  F087         	movff	___fttol@f1,??___fttol+1
  4631  0022FC  0100               	movlb	0	; () banked
  4632  0022FE  C083  F088         	movff	___fttol@f1+1,??___fttol+2
  4633  002302  0100               	movlb	0	; () banked
  4634  002304  C084  F089         	movff	___fttol@f1+2,??___fttol+3
  4635  002308  0100               	movlb	0	; () banked
  4636  00230A  2986               	incf	??___fttol& (0+255),w,b
  4637  00230C  0100               	movlb	0	; () banked
  4638  00230E  6F8A               	movwf	(??___fttol+4)& (0+255),b
  4639  002310  D005               	goto	u4830
  4640  002312                     u4835:
  4641  002312  0100               	movlb	0	; () banked
  4642  002314  90D8               	bcf	status,0,c
  4643  002316  3389               	rrcf	(??___fttol+3)& (0+255),f,b
  4644  002318  3388               	rrcf	(??___fttol+2)& (0+255),f,b
  4645  00231A  3387               	rrcf	(??___fttol+1)& (0+255),f,b
  4646  00231C                     u4830:
  4647  00231C  0100               	movlb	0	; () banked
  4648  00231E  2F8A               	decfsz	(??___fttol+4)& (0+255),f,b
  4649  002320  D7F8               	goto	u4835
  4650  002322  0100               	movlb	0	; () banked
  4651  002324  5187               	movf	(??___fttol+1)& (0+255),w,b
  4652  002326  0100               	movlb	0	; () banked
  4653  002328  6F8B               	movwf	___fttol@sign1& (0+255),b
  4654                           
  4655                           ; BSR set to: 0
  4656  00232A  0100               	movlb	0	; () banked
  4657  00232C  8F83               	bsf	(___fttol@f1+1)& (0+255),7,b
  4658                           
  4659                           ; BSR set to: 0
  4660  00232E  0EFF               	movlw	255
  4661  002330  0100               	movlb	0	; () banked
  4662  002332  1782               	andwf	___fttol@f1& (0+255),f,b
  4663  002334  0EFF               	movlw	255
  4664  002336  0100               	movlb	0	; () banked
  4665  002338  1783               	andwf	(___fttol@f1+1)& (0+255),f,b
  4666  00233A  0E00               	movlw	0
  4667  00233C  0100               	movlb	0	; () banked
  4668  00233E  1784               	andwf	(___fttol@f1+2)& (0+255),f,b
  4669                           
  4670                           ; BSR set to: 0
  4671  002340  0100               	movlb	0	; () banked
  4672  002342  5182               	movf	___fttol@f1& (0+255),w,b
  4673  002344  0100               	movlb	0	; () banked
  4674  002346  6F8C               	movwf	___fttol@lval& (0+255),b
  4675  002348  0100               	movlb	0	; () banked
  4676  00234A  5183               	movf	(___fttol@f1+1)& (0+255),w,b
  4677  00234C  0100               	movlb	0	; () banked
  4678  00234E  6F8D               	movwf	(___fttol@lval+1)& (0+255),b
  4679  002350  0100               	movlb	0	; () banked
  4680  002352  5184               	movf	(___fttol@f1+2)& (0+255),w,b
  4681  002354  0100               	movlb	0	; () banked
  4682  002356  6F8E               	movwf	(___fttol@lval+2)& (0+255),b
  4683  002358  0100               	movlb	0	; () banked
  4684  00235A  6B8F               	clrf	(___fttol@lval+3)& (0+255),b
  4685                           
  4686                           ; BSR set to: 0
  4687  00235C  0E8E               	movlw	142
  4688  00235E  0100               	movlb	0	; () banked
  4689  002360  5F90               	subwf	___fttol@exp1& (0+255),f,b
  4690                           
  4691                           ; BSR set to: 0
  4692  002362  0100               	movlb	0	; () banked
  4693  002364  AF90               	btfss	___fttol@exp1& (0+255),7,b
  4694  002366  D026               	goto	l4800
  4695                           
  4696                           ; BSR set to: 0
  4697  002368  0100               	movlb	0	; () banked
  4698  00236A  5190               	movf	___fttol@exp1& (0+255),w,b
  4699  00236C  0A80               	xorlw	128
  4700  00236E  0100               	movlb	0	; () banked
  4701  002370  6F86               	movwf	??___fttol& (0+255),b
  4702  002372  0EF1               	movlw	241
  4703  002374  0A80               	xorlw	128
  4704  002376  0100               	movlb	0	; () banked
  4705  002378  5D86               	subwf	??___fttol& (0+255),w,b
  4706  00237A  B0D8               	btfsc	status,0,c
  4707  00237C  D00D               	goto	l4796
  4708                           
  4709                           ; BSR set to: 0
  4710  00237E  0E00               	movlw	0
  4711  002380  0100               	movlb	0	; () banked
  4712  002382  6F82               	movwf	?___fttol& (0+255),b
  4713  002384  0E00               	movlw	0
  4714  002386  0100               	movlb	0	; () banked
  4715  002388  6F83               	movwf	(?___fttol+1)& (0+255),b
  4716  00238A  0E00               	movlw	0
  4717  00238C  0100               	movlb	0	; () banked
  4718  00238E  6F84               	movwf	(?___fttol+2)& (0+255),b
  4719  002390  0E00               	movlw	0
  4720  002392  0100               	movlb	0	; () banked
  4721  002394  6F85               	movwf	(?___fttol+3)& (0+255),b
  4722  002396  0012               	return	
  4723  002398                     l4796:
  4724                           
  4725                           ; BSR set to: 0
  4726  002398  0100               	movlb	0	; () banked
  4727  00239A  90D8               	bcf	status,0,c
  4728  00239C  0100               	movlb	0	; () banked
  4729  00239E  338F               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4730  0023A0  0100               	movlb	0	; () banked
  4731  0023A2  338E               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4732  0023A4  0100               	movlb	0	; () banked
  4733  0023A6  338D               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4734  0023A8  0100               	movlb	0	; () banked
  4735  0023AA  338C               	rrcf	___fttol@lval& (0+255),f,b
  4736                           
  4737                           ; BSR set to: 0
  4738  0023AC  0100               	movlb	0	; () banked
  4739  0023AE  3F90               	incfsz	___fttol@exp1& (0+255),f,b
  4740  0023B0  D7F3               	goto	l4796
  4741  0023B2  D020               	goto	l4810
  4742  0023B4                     l4800:
  4743                           
  4744                           ; BSR set to: 0
  4745  0023B4  0E17               	movlw	23
  4746  0023B6  0100               	movlb	0	; () banked
  4747  0023B8  6590               	cpfsgt	___fttol@exp1& (0+255),b
  4748  0023BA  D019               	goto	l4808
  4749                           
  4750                           ; BSR set to: 0
  4751  0023BC  0E00               	movlw	0
  4752  0023BE  0100               	movlb	0	; () banked
  4753  0023C0  6F82               	movwf	?___fttol& (0+255),b
  4754  0023C2  0E00               	movlw	0
  4755  0023C4  0100               	movlb	0	; () banked
  4756  0023C6  6F83               	movwf	(?___fttol+1)& (0+255),b
  4757  0023C8  0E00               	movlw	0
  4758  0023CA  0100               	movlb	0	; () banked
  4759  0023CC  6F84               	movwf	(?___fttol+2)& (0+255),b
  4760  0023CE  0E00               	movlw	0
  4761  0023D0  0100               	movlb	0	; () banked
  4762  0023D2  6F85               	movwf	(?___fttol+3)& (0+255),b
  4763  0023D4  0012               	return	
  4764  0023D6                     l4806:
  4765                           
  4766                           ; BSR set to: 0
  4767  0023D6  0100               	movlb	0	; () banked
  4768  0023D8  90D8               	bcf	status,0,c
  4769  0023DA  0100               	movlb	0	; () banked
  4770  0023DC  378C               	rlcf	___fttol@lval& (0+255),f,b
  4771  0023DE  0100               	movlb	0	; () banked
  4772  0023E0  378D               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4773  0023E2  0100               	movlb	0	; () banked
  4774  0023E4  378E               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4775  0023E6  0100               	movlb	0	; () banked
  4776  0023E8  378F               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4777  0023EA  0100               	movlb	0	; () banked
  4778  0023EC  0790               	decf	___fttol@exp1& (0+255),f,b
  4779  0023EE                     l4808:
  4780                           
  4781                           ; BSR set to: 0
  4782  0023EE  0100               	movlb	0	; () banked
  4783  0023F0  6790               	tstfsz	___fttol@exp1& (0+255),b
  4784  0023F2  D7F1               	goto	l4806
  4785  0023F4                     l4810:
  4786                           
  4787                           ; BSR set to: 0
  4788  0023F4  0100               	movlb	0	; () banked
  4789  0023F6  518B               	movf	___fttol@sign1& (0+255),w,b
  4790  0023F8  B4D8               	btfsc	status,2,c
  4791  0023FA  D00F               	goto	l4814
  4792                           
  4793                           ; BSR set to: 0
  4794  0023FC  0100               	movlb	0	; () banked
  4795  0023FE  1F8F               	comf	(___fttol@lval+3)& (0+255),f,b
  4796  002400  0100               	movlb	0	; () banked
  4797  002402  1F8E               	comf	(___fttol@lval+2)& (0+255),f,b
  4798  002404  0100               	movlb	0	; () banked
  4799  002406  1F8D               	comf	(___fttol@lval+1)& (0+255),f,b
  4800  002408  0100               	movlb	0	; () banked
  4801  00240A  6D8C               	negf	___fttol@lval& (0+255),b
  4802  00240C  0E00               	movlw	0
  4803  00240E  0100               	movlb	0	; () banked
  4804  002410  238D               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4805  002412  0100               	movlb	0	; () banked
  4806  002414  238E               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4807  002416  0100               	movlb	0	; () banked
  4808  002418  238F               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4809  00241A                     l4814:
  4810                           
  4811                           ; BSR set to: 0
  4812  00241A  C08C  F082         	movff	___fttol@lval,?___fttol
  4813  00241E  C08D  F083         	movff	___fttol@lval+1,?___fttol+1
  4814  002422  C08E  F084         	movff	___fttol@lval+2,?___fttol+2
  4815  002426  C08F  F085         	movff	___fttol@lval+3,?___fttol+3
  4816  00242A  0012               	return	
  4817  00242C                     __end_of___fttol:
  4818                           	opt stack 0
  4819                           tblptru	equ	0xFF8
  4820                           tblptrh	equ	0xFF7
  4821                           tblptrl	equ	0xFF6
  4822                           tablat	equ	0xFF5
  4823                           prodh	equ	0xFF4
  4824                           prodl	equ	0xFF3
  4825                           intcon	equ	0xFF2
  4826                           postinc0	equ	0xFEE
  4827                           wreg	equ	0xFE8
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function ___ftneg *****************
  4836 ;; Defined at:
  4837 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  f1              3   26[COMRAM] float 
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;		None
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  3   26[COMRAM] float 
  4844 ;; Registers used:
  4845 ;;		wreg, status,2, status,0
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4851 ;;      Params:         3       0       0       0       0       0       0
  4852 ;;      Locals:         0       0       0       0       0       0       0
  4853 ;;      Temps:          0       0       0       0       0       0       0
  4854 ;;      Totals:         3       0       0       0       0       0       0
  4855 ;;Total ram usage:        3 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    4
  4858 ;; This function calls:
  4859 ;;		Nothing
  4860 ;; This function is called by:
  4861 ;;		_printf
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           	psect	text13
  4866  00369E                     __ptext13:
  4867                           	opt stack 0
  4868  00369E                     ___ftneg:
  4869                           	opt stack 25
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;incstack = 0
  4873  00369E  0E7F               	movlw	127
  4874  0036A0  141D               	andwf	___ftneg@f1+2,w,c
  4875  0036A2  101C               	iorwf	___ftneg@f1+1,w,c
  4876  0036A4  101B               	iorwf	___ftneg@f1,w,c
  4877  0036A6  B4D8               	btfsc	status,2,c
  4878  0036A8  D006               	goto	l1099
  4879  0036AA  0E00               	movlw	0
  4880  0036AC  1A1B               	xorwf	___ftneg@f1,f,c
  4881  0036AE  0E00               	movlw	0
  4882  0036B0  1A1C               	xorwf	___ftneg@f1+1,f,c
  4883  0036B2  0E80               	movlw	128
  4884  0036B4  1A1D               	xorwf	___ftneg@f1+2,f,c
  4885  0036B6                     l1099:
  4886  0036B6  C01B  F01B         	movff	___ftneg@f1,?___ftneg
  4887  0036BA  C01C  F01C         	movff	___ftneg@f1+1,?___ftneg+1
  4888  0036BE  C01D  F01D         	movff	___ftneg@f1+2,?___ftneg+2
  4889  0036C2  0012               	return	
  4890  0036C4                     __end_of___ftneg:
  4891                           	opt stack 0
  4892                           tblptru	equ	0xFF8
  4893                           tblptrh	equ	0xFF7
  4894                           tblptrl	equ	0xFF6
  4895                           tablat	equ	0xFF5
  4896                           prodh	equ	0xFF4
  4897                           prodl	equ	0xFF3
  4898                           intcon	equ	0xFF2
  4899                           postinc0	equ	0xFEE
  4900                           wreg	equ	0xFE8
  4901                           indf2	equ	0xFDF
  4902                           postinc2	equ	0xFDE
  4903                           postdec2	equ	0xFDD
  4904                           fsr2h	equ	0xFDA
  4905                           fsr2l	equ	0xFD9
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function _Temp_Fault *****************
  4909 ;; Defined at:
  4910 ;;		line 12 in file "Tempeture.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;		None
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  i               2   10[BANK0 ] int 
  4915 ;;  fault           1    9[BANK0 ] unsigned char 
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  1    wreg      unsigned char 
  4918 ;; Registers used:
  4919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4925 ;;      Params:         0       0       0       0       0       0       0
  4926 ;;      Locals:         0       3       0       0       0       0       0
  4927 ;;      Temps:          0       0       0       0       0       0       0
  4928 ;;      Totals:         0       3       0       0       0       0       0
  4929 ;;Total ram usage:        3 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    5
  4932 ;; This function calls:
  4933 ;;		___ftge
  4934 ;;		___wmul
  4935 ;; This function is called by:
  4936 ;;		_main
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text14
  4941  0032C2                     __ptext14:
  4942                           	opt stack 0
  4943  0032C2                     _Temp_Fault:
  4944                           	opt stack 25
  4945                           
  4946                           ;Tempeture.c: 15: char fault = 0;
  4947                           
  4948                           ;incstack = 0
  4949  0032C2  0E00               	movlw	0
  4950  0032C4  0100               	movlb	0	; () banked
  4951  0032C6  6F69               	movwf	Temp_Fault@fault& (0+255),b
  4952                           
  4953                           ;Tempeture.c: 16: for(int i = 0;i<9;i++)
  4954  0032C8  0E00               	movlw	0
  4955  0032CA  0100               	movlb	0	; () banked
  4956  0032CC  6F6B               	movwf	(Temp_Fault@i+1)& (0+255),b
  4957  0032CE  0E00               	movlw	0
  4958  0032D0  0100               	movlb	0	; () banked
  4959  0032D2  6F6A               	movwf	Temp_Fault@i& (0+255),b
  4960  0032D4                     
  4961                           ; BSR set to: 0
  4962  0032D4  0100               	movlb	0	; () banked
  4963  0032D6  516B               	movf	(Temp_Fault@i+1)& (0+255),w,b
  4964  0032D8  0A80               	xorlw	128
  4965  0032DA  0F80               	addlw	-128
  4966  0032DC  0E09               	movlw	9
  4967  0032DE  B4D8               	btfsc	status,2,c
  4968  0032E0  5D6A               	subwf	Temp_Fault@i& (0+255),w,b
  4969  0032E2  B0D8               	btfsc	status,0,c
  4970  0032E4  0012               	return	
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;Tempeture.c: 17: {
  4974                           ;Tempeture.c: 18: if (60.5 > Temp_DegF[i])
  4975                           
  4976                           ; BSR set to: 0
  4977                           
  4978                           ; BSR set to: 0
  4979  0032E6  C06A  F029         	movff	Temp_Fault@i,___wmul@multiplier
  4980  0032EA  C06B  F02A         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  4981  0032EE  0E00               	movlw	0
  4982  0032F0  6E2C               	movwf	___wmul@multiplicand+1,c
  4983  0032F2  0E03               	movlw	3
  4984  0032F4  6E2B               	movwf	___wmul@multiplicand,c
  4985  0032F6  EC62  F01B         	call	___wmul	;wreg free
  4986  0032FA  0101               	movlb	1	; () banked
  4987  0032FC  0E8C               	movlw	low _Temp_DegF
  4988  0032FE  2429               	addwf	?___wmul,w,c
  4989  003300  6ED9               	movwf	fsr2l,c
  4990  003302  0101               	movlb	1	; () banked
  4991  003304  0E01               	movlw	high _Temp_DegF
  4992  003306  202A               	addwfc	?___wmul+1,w,c
  4993  003308  6EDA               	movwf	fsr2h,c
  4994  00330A  0100               	movlb	0	; () banked
  4995  00330C  CFDE F060          	movff	postinc2,___ftge@ff1
  4996  003310  0100               	movlb	0	; () banked
  4997  003312  CFDE F061          	movff	postinc2,___ftge@ff1+1
  4998  003316  0100               	movlb	0	; () banked
  4999  003318  CFDD F062          	movff	postdec2,___ftge@ff1+2
  5000  00331C  0E00               	movlw	0
  5001  00331E  0100               	movlb	0	; () banked
  5002  003320  6F63               	movwf	___ftge@ff2& (0+255),b
  5003  003322  0E72               	movlw	114
  5004  003324  0100               	movlb	0	; () banked
  5005  003326  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5006  003328  0E42               	movlw	66
  5007  00332A  0100               	movlb	0	; () banked
  5008  00332C  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5009  00332E  EC72  F016         	call	___ftge	;wreg free
  5010  003332  B0D8               	btfsc	status,0,c
  5011  003334  D003               	goto	l4908
  5012                           
  5013                           ;Tempeture.c: 19: {
  5014                           ;Tempeture.c: 20: fault = 1;
  5015  003336  0E01               	movlw	1
  5016  003338  0100               	movlb	0	; () banked
  5017  00333A  6F69               	movwf	Temp_Fault@fault& (0+255),b
  5018  00333C                     l4908:
  5019  00333C  0100               	movlb	0	; () banked
  5020  00333E  4B6A               	infsnz	Temp_Fault@i& (0+255),f,b
  5021  003340  2B6B               	incf	(Temp_Fault@i+1)& (0+255),f,b
  5022  003342  D7C8               	goto	L6
  5023  003344                     __end_of_Temp_Fault:
  5024                           	opt stack 0
  5025                           tblptru	equ	0xFF8
  5026                           tblptrh	equ	0xFF7
  5027                           tblptrl	equ	0xFF6
  5028                           tablat	equ	0xFF5
  5029                           prodh	equ	0xFF4
  5030                           prodl	equ	0xFF3
  5031                           intcon	equ	0xFF2
  5032                           postinc0	equ	0xFEE
  5033                           wreg	equ	0xFE8
  5034                           indf2	equ	0xFDF
  5035                           postinc2	equ	0xFDE
  5036                           postdec2	equ	0xFDD
  5037                           fsr2h	equ	0xFDA
  5038                           fsr2l	equ	0xFD9
  5039                           status	equ	0xFD8
  5040                           
  5041 ;; *************** function _Temp_Convert *****************
  5042 ;; Defined at:
  5043 ;;		line 50 in file "Tempeture.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;		None
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;  steinhart       3   74[BANK0 ] float 
  5048 ;;  x               2   72[BANK0 ] int 
  5049 ;; Return value:  Size  Location     Type
  5050 ;;		None               void
  5051 ;; Registers used:
  5052 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5053 ;; Tracked objects:
  5054 ;;		On entry : 0/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5058 ;;      Params:         0       0       0       0       0       0       0
  5059 ;;      Locals:         0       9       0       0       0       0       0
  5060 ;;      Temps:          0       2       0       0       0       0       0
  5061 ;;      Totals:         0      11       0       0       0       0       0
  5062 ;;Total ram usage:       11 bytes
  5063 ;; Hardware stack levels used:    1
  5064 ;; Hardware stack levels required when called:    8
  5065 ;; This function calls:
  5066 ;;		_Temp_Filter
  5067 ;;		___awdiv
  5068 ;;		___awtoft
  5069 ;;		___ftadd
  5070 ;;		___ftdiv
  5071 ;;		___ftmul
  5072 ;;		___ftsub
  5073 ;;		___wmul
  5074 ;;		_log
  5075 ;; This function is called by:
  5076 ;;		_main
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           	psect	text15
  5081  001F14                     __ptext15:
  5082                           	opt stack 0
  5083  001F14                     _Temp_Convert:
  5084                           	opt stack 22
  5085                           
  5086                           ;Tempeture.c: 52: int x;
  5087                           ;Tempeture.c: 53: float steinhart;
  5088                           ;Tempeture.c: 54: for(x = 0; x < 10; x++)
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;incstack = 0
  5092  001F14  0E00               	movlw	0
  5093  001F16  0100               	movlb	0	; () banked
  5094  001F18  6FA9               	movwf	(Temp_Convert@x+1)& (0+255),b
  5095  001F1A  0E00               	movlw	0
  5096  001F1C  0100               	movlb	0	; () banked
  5097  001F1E  6FA8               	movwf	Temp_Convert@x& (0+255),b
  5098  001F20                     
  5099                           ; BSR set to: 0
  5100  001F20  0100               	movlb	0	; () banked
  5101  001F22  51A9               	movf	(Temp_Convert@x+1)& (0+255),w,b
  5102  001F24  0A80               	xorlw	128
  5103  001F26  0F80               	addlw	-128
  5104  001F28  0E0A               	movlw	10
  5105  001F2A  B4D8               	btfsc	status,2,c
  5106  001F2C  5DA8               	subwf	Temp_Convert@x& (0+255),w,b
  5107  001F2E  B0D8               	btfsc	status,0,c
  5108  001F30  D0F8               	goto	l4942
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;Tempeture.c: 55: {
  5112                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5113                           
  5114                           ; BSR set to: 0
  5115                           
  5116                           ; BSR set to: 0
  5117  001F32  0EE4               	movlw	low _Temp_Adc
  5118  001F34  0100               	movlb	0	; () banked
  5119  001F36  6FA2               	movwf	??_Temp_Convert& (0+255),b
  5120  001F38  0E00               	movlw	high _Temp_Adc
  5121  001F3A  6FA3               	movwf	(??_Temp_Convert+1)& (0+255),b
  5122  001F3C  90D8               	bcf	status,0,c
  5123  001F3E  0100               	movlb	0	; () banked
  5124  001F40  35A8               	rlcf	Temp_Convert@x& (0+255),w,b
  5125  001F42  6ED9               	movwf	fsr2l,c
  5126  001F44  0100               	movlb	0	; () banked
  5127  001F46  35A9               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  5128  001F48  6EDA               	movwf	fsr2h,c
  5129  001F4A  0100               	movlb	0	; () banked
  5130  001F4C  51A2               	movf	??_Temp_Convert& (0+255),w,b
  5131  001F4E  26D9               	addwf	fsr2l,f,c
  5132  001F50  0100               	movlb	0	; () banked
  5133  001F52  51A3               	movf	(??_Temp_Convert+1)& (0+255),w,b
  5134  001F54  22DA               	addwfc	fsr2h,f,c
  5135  001F56  CFDE F023          	movff	postinc2,___awdiv@divisor
  5136  001F5A  CFDD F024          	movff	postdec2,___awdiv@divisor+1
  5137  001F5E  0E03               	movlw	3
  5138  001F60  6E22               	movwf	___awdiv@dividend+1,c
  5139  001F62  6821               	setf	___awdiv@dividend,c
  5140  001F64  ECF5  F017         	call	___awdiv	;wreg free
  5141  001F68  0EFF               	movlw	255
  5142  001F6A  2421               	addwf	?___awdiv,w,c
  5143  001F6C  0100               	movlb	0	; () banked
  5144  001F6E  6FA4               	movwf	_Temp_Convert$1691& (0+255),b
  5145  001F70  0EFF               	movlw	255
  5146  001F72  2022               	addwfc	?___awdiv+1,w,c
  5147  001F74  0100               	movlb	0	; () banked
  5148  001F76  6FA5               	movwf	(_Temp_Convert$1691+1)& (0+255),b
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;Tempeture.c: 55: {
  5152                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5153  001F78  C0A4  F023         	movff	_Temp_Convert$1691,___awdiv@divisor
  5154  001F7C  C0A5  F024         	movff	_Temp_Convert$1691+1,___awdiv@divisor+1
  5155  001F80  0E27               	movlw	39
  5156  001F82  6E22               	movwf	___awdiv@dividend+1,c
  5157  001F84  0E10               	movlw	16
  5158  001F86  6E21               	movwf	___awdiv@dividend,c
  5159  001F88  ECF5  F017         	call	___awdiv	;wreg free
  5160  001F8C  C021  F0A6         	movff	?___awdiv,_Temp_Convert$1692
  5161  001F90  C022  F0A7         	movff	?___awdiv+1,_Temp_Convert$1692+1
  5162                           
  5163                           ;Tempeture.c: 55: {
  5164                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5165  001F94  0E27               	movlw	39
  5166  001F96  6E24               	movwf	___awdiv@divisor+1,c
  5167  001F98  0E10               	movlw	16
  5168  001F9A  6E23               	movwf	___awdiv@divisor,c
  5169  001F9C  C0A6  F021         	movff	_Temp_Convert$1692,___awdiv@dividend
  5170  001FA0  C0A7  F022         	movff	_Temp_Convert$1692+1,___awdiv@dividend+1
  5171  001FA4  ECF5  F017         	call	___awdiv	;wreg free
  5172  001FA8  C021  F029         	movff	?___awdiv,___awtoft@c
  5173  001FAC  C022  F02A         	movff	?___awdiv+1,___awtoft@c+1
  5174  001FB0  EC58  F01A         	call	___awtoft	;wreg free
  5175  001FB4  C029  F0AA         	movff	?___awtoft,Temp_Convert@steinhart
  5176  001FB8  C02A  F0AB         	movff	?___awtoft+1,Temp_Convert@steinhart+1
  5177  001FBC  C02B  F0AC         	movff	?___awtoft+2,Temp_Convert@steinhart+2
  5178                           
  5179                           ;Tempeture.c: 57: steinhart = log(steinhart);
  5180  001FC0  C0AA  F09D         	movff	Temp_Convert@steinhart,log@x
  5181  001FC4  C0AB  F09E         	movff	Temp_Convert@steinhart+1,log@x+1
  5182  001FC8  C0AC  F09F         	movff	Temp_Convert@steinhart+2,log@x+2
  5183  001FCC  ECD1  F012         	call	_log	;wreg free
  5184  001FD0  C09D  F0AA         	movff	?_log,Temp_Convert@steinhart
  5185  001FD4  C09E  F0AB         	movff	?_log+1,Temp_Convert@steinhart+1
  5186  001FD8  C09F  F0AC         	movff	?_log+2,Temp_Convert@steinhart+2
  5187                           
  5188                           ;Tempeture.c: 58: steinhart /= 3950;
  5189  001FDC  C0AA  F060         	movff	Temp_Convert@steinhart,___ftdiv@f1
  5190  001FE0  C0AB  F061         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  5191  001FE4  C0AC  F062         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  5192  001FE8  0EE0               	movlw	224
  5193  001FEA  0100               	movlb	0	; () banked
  5194  001FEC  6F63               	movwf	___ftdiv@f2& (0+255),b
  5195  001FEE  0E76               	movlw	118
  5196  001FF0  0100               	movlb	0	; () banked
  5197  001FF2  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  5198  001FF4  0E45               	movlw	69
  5199  001FF6  0100               	movlb	0	; () banked
  5200  001FF8  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  5201  001FFA  EC3C  F014         	call	___ftdiv	;wreg free
  5202  001FFE  C060  F0AA         	movff	?___ftdiv,Temp_Convert@steinhart
  5203  002002  C061  F0AB         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  5204  002006  C062  F0AC         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  5205                           
  5206                           ;Tempeture.c: 59: steinhart += 1.0 / (25 + 273.15);
  5207  00200A  C0AA  F085         	movff	Temp_Convert@steinhart,___ftadd@f1
  5208  00200E  C0AB  F086         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  5209  002012  C0AC  F087         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  5210  002016  0ECF               	movlw	207
  5211  002018  0100               	movlb	0	; () banked
  5212  00201A  6F88               	movwf	___ftadd@f2& (0+255),b
  5213  00201C  0E5B               	movlw	91
  5214  00201E  0100               	movlb	0	; () banked
  5215  002020  6F89               	movwf	(___ftadd@f2+1)& (0+255),b
  5216  002022  0E3B               	movlw	59
  5217  002024  0100               	movlb	0	; () banked
  5218  002026  6F8A               	movwf	(___ftadd@f2+2)& (0+255),b
  5219  002028  EC4A  F00E         	call	___ftadd	;wreg free
  5220  00202C  C085  F0AA         	movff	?___ftadd,Temp_Convert@steinhart
  5221  002030  C086  F0AB         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  5222  002034  C087  F0AC         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  5223                           
  5224                           ;Tempeture.c: 60: steinhart = 1.0 / steinhart;
  5225  002038  0E00               	movlw	0
  5226  00203A  0100               	movlb	0	; () banked
  5227  00203C  6F60               	movwf	___ftdiv@f1& (0+255),b
  5228  00203E  0E80               	movlw	128
  5229  002040  0100               	movlb	0	; () banked
  5230  002042  6F61               	movwf	(___ftdiv@f1+1)& (0+255),b
  5231  002044  0E3F               	movlw	63
  5232  002046  0100               	movlb	0	; () banked
  5233  002048  6F62               	movwf	(___ftdiv@f1+2)& (0+255),b
  5234  00204A  C0AA  F063         	movff	Temp_Convert@steinhart,___ftdiv@f2
  5235  00204E  C0AB  F064         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  5236  002052  C0AC  F065         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  5237  002056  EC3C  F014         	call	___ftdiv	;wreg free
  5238  00205A  C060  F0AA         	movff	?___ftdiv,Temp_Convert@steinhart
  5239  00205E  C061  F0AB         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  5240  002062  C062  F0AC         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  5241                           
  5242                           ;Tempeture.c: 61: steinhart -= 273.15;
  5243  002066  C0AA  F091         	movff	Temp_Convert@steinhart,___ftsub@f1
  5244  00206A  C0AB  F092         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  5245  00206E  C0AC  F093         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  5246  002072  0E93               	movlw	147
  5247  002074  0100               	movlb	0	; () banked
  5248  002076  6F94               	movwf	___ftsub@f2& (0+255),b
  5249  002078  0E88               	movlw	136
  5250  00207A  0100               	movlb	0	; () banked
  5251  00207C  6F95               	movwf	(___ftsub@f2+1)& (0+255),b
  5252  00207E  0E43               	movlw	67
  5253  002080  0100               	movlb	0	; () banked
  5254  002082  6F96               	movwf	(___ftsub@f2+2)& (0+255),b
  5255  002084  EC7C  F01A         	call	___ftsub	;wreg free
  5256  002088  C091  F0AA         	movff	?___ftsub,Temp_Convert@steinhart
  5257  00208C  C092  F0AB         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  5258  002090  C093  F0AC         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  5259                           
  5260                           ;Tempeture.c: 62: steinhart = (steinhart*1.800) + 32.00;
  5261  002094  0E66               	movlw	102
  5262  002096  0100               	movlb	0	; () banked
  5263  002098  6F6F               	movwf	___ftmul@f2& (0+255),b
  5264  00209A  0EE6               	movlw	230
  5265  00209C  0100               	movlb	0	; () banked
  5266  00209E  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  5267  0020A0  0E3F               	movlw	63
  5268  0020A2  0100               	movlb	0	; () banked
  5269  0020A4  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  5270  0020A6  C0AA  F06C         	movff	Temp_Convert@steinhart,___ftmul@f1
  5271  0020AA  C0AB  F06D         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  5272  0020AE  C0AC  F06E         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  5273  0020B2  EC16  F012         	call	___ftmul	;wreg free
  5274  0020B6  C06C  F085         	movff	?___ftmul,___ftadd@f1
  5275  0020BA  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  5276  0020BE  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  5277  0020C2  0E00               	movlw	0
  5278  0020C4  0100               	movlb	0	; () banked
  5279  0020C6  6F88               	movwf	___ftadd@f2& (0+255),b
  5280  0020C8  0E00               	movlw	0
  5281  0020CA  0100               	movlb	0	; () banked
  5282  0020CC  6F89               	movwf	(___ftadd@f2+1)& (0+255),b
  5283  0020CE  0E42               	movlw	66
  5284  0020D0  0100               	movlb	0	; () banked
  5285  0020D2  6F8A               	movwf	(___ftadd@f2+2)& (0+255),b
  5286  0020D4  EC4A  F00E         	call	___ftadd	;wreg free
  5287  0020D8  C085  F0AA         	movff	?___ftadd,Temp_Convert@steinhart
  5288  0020DC  C086  F0AB         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  5289  0020E0  C087  F0AC         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  5290                           
  5291                           ;Tempeture.c: 63: TmpTemp_DegF[x] = steinhart;
  5292  0020E4  C0A8  F029         	movff	Temp_Convert@x,___wmul@multiplier
  5293  0020E8  C0A9  F02A         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  5294  0020EC  0E00               	movlw	0
  5295  0020EE  6E2C               	movwf	___wmul@multiplicand+1,c
  5296  0020F0  0E03               	movlw	3
  5297  0020F2  6E2B               	movwf	___wmul@multiplicand,c
  5298  0020F4  EC62  F01B         	call	___wmul	;wreg free
  5299  0020F8  0101               	movlb	1	; () banked
  5300  0020FA  0EC8               	movlw	low _TmpTemp_DegF
  5301  0020FC  2429               	addwf	?___wmul,w,c
  5302  0020FE  6ED9               	movwf	fsr2l,c
  5303  002100  0101               	movlb	1	; () banked
  5304  002102  0E01               	movlw	high _TmpTemp_DegF
  5305  002104  202A               	addwfc	?___wmul+1,w,c
  5306  002106  6EDA               	movwf	fsr2h,c
  5307  002108  0100               	movlb	0	; () banked
  5308  00210A  C0AA  FFDE         	movff	Temp_Convert@steinhart,postinc2
  5309  00210E  0100               	movlb	0	; () banked
  5310  002110  C0AB  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  5311  002114  0100               	movlb	0	; () banked
  5312  002116  C0AC  FFDD         	movff	Temp_Convert@steinhart+2,postdec2
  5313                           
  5314                           ; BSR set to: 0
  5315  00211A  0100               	movlb	0	; () banked
  5316  00211C  4BA8               	infsnz	Temp_Convert@x& (0+255),f,b
  5317  00211E  2BA9               	incf	(Temp_Convert@x+1)& (0+255),f,b
  5318  002120  D6FF               	goto	L7
  5319  002122                     l4942:
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;Tempeture.c: 64: }
  5323                           ;Tempeture.c: 65: Temp_Filter();
  5324  002122  EC94  F010         	call	_Temp_Filter	;wreg free
  5325  002126  0012               	return	
  5326  002128                     __end_of_Temp_Convert:
  5327                           	opt stack 0
  5328                           tblptru	equ	0xFF8
  5329                           tblptrh	equ	0xFF7
  5330                           tblptrl	equ	0xFF6
  5331                           tablat	equ	0xFF5
  5332                           prodh	equ	0xFF4
  5333                           prodl	equ	0xFF3
  5334                           intcon	equ	0xFF2
  5335                           postinc0	equ	0xFEE
  5336                           wreg	equ	0xFE8
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344 ;; *************** function _log *****************
  5345 ;; Defined at:
  5346 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\log.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;  x               3   61[BANK0 ] int 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  exponent        2   64[BANK0 ] int 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  3   61[BANK0 ] int 
  5353 ;; Registers used:
  5354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5360 ;;      Params:         0       3       0       0       0       0       0
  5361 ;;      Locals:         0       2       0       0       0       0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0
  5363 ;;      Totals:         0       5       0       0       0       0       0
  5364 ;;Total ram usage:        5 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    7
  5367 ;; This function calls:
  5368 ;;		___awtoft
  5369 ;;		___ftadd
  5370 ;;		___ftmul
  5371 ;;		_eval_poly
  5372 ;;		_frexp
  5373 ;; This function is called by:
  5374 ;;		_Temp_Convert
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           	psect	text16
  5379  0025A2                     __ptext16:
  5380                           	opt stack 0
  5381  0025A2                     _log:
  5382                           	opt stack 22
  5383                           
  5384                           ;incstack = 0
  5385  0025A2  0100               	movlb	0	; () banked
  5386  0025A4  519F               	movf	(log@x+2)& (0+255),w,b
  5387  0025A6  0A80               	xorlw	128
  5388  0025A8  0F80               	addlw	128
  5389  0025AA  E107               	bnz	u4435
  5390  0025AC  0E00               	movlw	0
  5391  0025AE  0100               	movlb	0	; () banked
  5392  0025B0  5D9E               	subwf	(log@x+1)& (0+255),w,b
  5393  0025B2  E103               	bnz	u4435
  5394  0025B4  0E00               	movlw	0
  5395  0025B6  0100               	movlb	0	; () banked
  5396  0025B8  5D9D               	subwf	log@x& (0+255),w,b
  5397  0025BA                     u4435:
  5398  0025BA  B0D8               	btfsc	status,0,c
  5399  0025BC  D010               	goto	l4494
  5400                           
  5401                           ; BSR set to: 0
  5402  0025BE  0E00               	movlw	0
  5403  0025C0  0100               	movlb	0	; () banked
  5404  0025C2  6FE3               	movwf	(_errno+1)& (0+255),b
  5405  0025C4  0E21               	movlw	33
  5406  0025C6  0100               	movlb	0	; () banked
  5407  0025C8  6FE2               	movwf	_errno& (0+255),b
  5408  0025CA  0E00               	movlw	0
  5409  0025CC  0100               	movlb	0	; () banked
  5410  0025CE  6F9D               	movwf	?_log& (0+255),b
  5411  0025D0  0E00               	movlw	0
  5412  0025D2  0100               	movlb	0	; () banked
  5413  0025D4  6F9E               	movwf	(?_log+1)& (0+255),b
  5414  0025D6  0E00               	movlw	0
  5415  0025D8  0100               	movlb	0	; () banked
  5416  0025DA  6F9F               	movwf	(?_log+2)& (0+255),b
  5417  0025DC  0012               	return	
  5418  0025DE                     l4494:
  5419                           
  5420                           ; BSR set to: 0
  5421  0025DE  0E7F               	movlw	127
  5422  0025E0  0100               	movlb	0	; () banked
  5423  0025E2  159F               	andwf	(log@x+2)& (0+255),w,b
  5424  0025E4  0100               	movlb	0	; () banked
  5425  0025E6  119E               	iorwf	(log@x+1)& (0+255),w,b
  5426  0025E8  0100               	movlb	0	; () banked
  5427  0025EA  119D               	iorwf	log@x& (0+255),w,b
  5428  0025EC  A4D8               	btfss	status,2,c
  5429  0025EE  D010               	goto	l4500
  5430                           
  5431                           ; BSR set to: 0
  5432  0025F0  0E00               	movlw	0
  5433  0025F2  0100               	movlb	0	; () banked
  5434  0025F4  6FE3               	movwf	(_errno+1)& (0+255),b
  5435  0025F6  0E22               	movlw	34
  5436  0025F8  0100               	movlb	0	; () banked
  5437  0025FA  6FE2               	movwf	_errno& (0+255),b
  5438  0025FC  0E00               	movlw	0
  5439  0025FE  0100               	movlb	0	; () banked
  5440  002600  6F9D               	movwf	?_log& (0+255),b
  5441  002602  0E00               	movlw	0
  5442  002604  0100               	movlb	0	; () banked
  5443  002606  6F9E               	movwf	(?_log+1)& (0+255),b
  5444  002608  0E00               	movlw	0
  5445  00260A  0100               	movlb	0	; () banked
  5446  00260C  6F9F               	movwf	(?_log+2)& (0+255),b
  5447  00260E  0012               	return	
  5448  002610                     l4500:
  5449                           
  5450                           ; BSR set to: 0
  5451  002610  0E00               	movlw	0
  5452  002612  0100               	movlb	0	; () banked
  5453  002614  6F6F               	movwf	___ftmul@f2& (0+255),b
  5454  002616  0E00               	movlw	0
  5455  002618  0100               	movlb	0	; () banked
  5456  00261A  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  5457  00261C  0E40               	movlw	64
  5458  00261E  0100               	movlb	0	; () banked
  5459  002620  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  5460  002622  0100               	movlb	0	; () banked
  5461  002624  0E00               	movlw	high log@exponent
  5462  002626  6E1F               	movwf	frexp@eptr+1,c
  5463  002628  0100               	movlb	0	; () banked
  5464  00262A  0EA0               	movlw	low log@exponent
  5465  00262C  6E1E               	movwf	frexp@eptr,c
  5466  00262E  C09D  F01B         	movff	log@x,frexp@value
  5467  002632  C09E  F01C         	movff	log@x+1,frexp@value+1
  5468  002636  C09F  F01D         	movff	log@x+2,frexp@value+2
  5469  00263A  EC47  F018         	call	_frexp	;wreg free
  5470  00263E  C01B  F06C         	movff	?_frexp,___ftmul@f1
  5471  002642  C01C  F06D         	movff	?_frexp+1,___ftmul@f1+1
  5472  002646  C01D  F06E         	movff	?_frexp+2,___ftmul@f1+2
  5473  00264A  EC16  F012         	call	___ftmul	;wreg free
  5474  00264E  C06C  F085         	movff	?___ftmul,___ftadd@f1
  5475  002652  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  5476  002656  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  5477  00265A  0E00               	movlw	0
  5478  00265C  0100               	movlb	0	; () banked
  5479  00265E  6F88               	movwf	___ftadd@f2& (0+255),b
  5480  002660  0E80               	movlw	128
  5481  002662  0100               	movlb	0	; () banked
  5482  002664  6F89               	movwf	(___ftadd@f2+1)& (0+255),b
  5483  002666  0EBF               	movlw	191
  5484  002668  0100               	movlb	0	; () banked
  5485  00266A  6F8A               	movwf	(___ftadd@f2+2)& (0+255),b
  5486  00266C  EC4A  F00E         	call	___ftadd	;wreg free
  5487  002670  C085  F09D         	movff	?___ftadd,log@x
  5488  002674  C086  F09E         	movff	?___ftadd+1,log@x+1
  5489  002678  C087  F09F         	movff	?___ftadd+2,log@x+2
  5490  00267C  0100               	movlb	0	; () banked
  5491  00267E  07A0               	decf	log@exponent& (0+255),f,b
  5492  002680  A0D8               	btfss	status,0,c
  5493  002682  07A1               	decf	(log@exponent+1)& (0+255),f,b
  5494                           
  5495                           ; BSR set to: 0
  5496  002684  C09D  F091         	movff	log@x,eval_poly@x
  5497  002688  C09E  F092         	movff	log@x+1,eval_poly@x+1
  5498  00268C  C09F  F093         	movff	log@x+2,eval_poly@x+2
  5499  002690  0E06               	movlw	high log@coeff
  5500  002692  0100               	movlb	0	; () banked
  5501  002694  6F95               	movwf	(eval_poly@d+1)& (0+255),b
  5502  002696  0E77               	movlw	low log@coeff
  5503  002698  0100               	movlb	0	; () banked
  5504  00269A  6F94               	movwf	eval_poly@d& (0+255),b
  5505  00269C  0E00               	movlw	0
  5506  00269E  0100               	movlb	0	; () banked
  5507  0026A0  6F97               	movwf	(eval_poly@n+1)& (0+255),b
  5508  0026A2  0E08               	movlw	8
  5509  0026A4  0100               	movlb	0	; () banked
  5510  0026A6  6F96               	movwf	eval_poly@n& (0+255),b
  5511  0026A8  ECF9  F015         	call	_eval_poly	;wreg free
  5512  0026AC  C091  F09D         	movff	?_eval_poly,log@x
  5513  0026B0  C092  F09E         	movff	?_eval_poly+1,log@x+1
  5514  0026B4  C093  F09F         	movff	?_eval_poly+2,log@x+2
  5515  0026B8  0E72               	movlw	114
  5516  0026BA  0100               	movlb	0	; () banked
  5517  0026BC  6F6F               	movwf	___ftmul@f2& (0+255),b
  5518  0026BE  0E31               	movlw	49
  5519  0026C0  0100               	movlb	0	; () banked
  5520  0026C2  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  5521  0026C4  0E3F               	movlw	63
  5522  0026C6  0100               	movlb	0	; () banked
  5523  0026C8  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  5524  0026CA  C0A0  F029         	movff	log@exponent,___awtoft@c
  5525  0026CE  C0A1  F02A         	movff	log@exponent+1,___awtoft@c+1
  5526  0026D2  EC58  F01A         	call	___awtoft	;wreg free
  5527  0026D6  C029  F06C         	movff	?___awtoft,___ftmul@f1
  5528  0026DA  C02A  F06D         	movff	?___awtoft+1,___ftmul@f1+1
  5529  0026DE  C02B  F06E         	movff	?___awtoft+2,___ftmul@f1+2
  5530  0026E2  EC16  F012         	call	___ftmul	;wreg free
  5531  0026E6  C06C  F085         	movff	?___ftmul,___ftadd@f1
  5532  0026EA  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  5533  0026EE  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  5534  0026F2  C09D  F088         	movff	log@x,___ftadd@f2
  5535  0026F6  C09E  F089         	movff	log@x+1,___ftadd@f2+1
  5536  0026FA  C09F  F08A         	movff	log@x+2,___ftadd@f2+2
  5537  0026FE  EC4A  F00E         	call	___ftadd	;wreg free
  5538  002702  C085  F09D         	movff	?___ftadd,?_log
  5539  002706  C086  F09E         	movff	?___ftadd+1,?_log+1
  5540  00270A  C087  F09F         	movff	?___ftadd+2,?_log+2
  5541  00270E  0012               	return	
  5542  002710                     __end_of_log:
  5543                           	opt stack 0
  5544                           tblptru	equ	0xFF8
  5545                           tblptrh	equ	0xFF7
  5546                           tblptrl	equ	0xFF6
  5547                           tablat	equ	0xFF5
  5548                           prodh	equ	0xFF4
  5549                           prodl	equ	0xFF3
  5550                           intcon	equ	0xFF2
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           indf2	equ	0xFDF
  5554                           postinc2	equ	0xFDE
  5555                           postdec2	equ	0xFDD
  5556                           fsr2h	equ	0xFDA
  5557                           fsr2l	equ	0xFD9
  5558                           status	equ	0xFD8
  5559                           
  5560 ;; *************** function _frexp *****************
  5561 ;; Defined at:
  5562 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;  value           3   26[COMRAM] int 
  5565 ;;  eptr            2   29[COMRAM] PTR int 
  5566 ;;		 -> log@exponent(2), 
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;		None
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  3   26[COMRAM] PTR int 
  5571 ;; Registers used:
  5572 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5578 ;;      Params:         5       0       0       0       0       0       0
  5579 ;;      Locals:         0       0       0       0       0       0       0
  5580 ;;      Temps:          2       0       0       0       0       0       0
  5581 ;;      Totals:         7       0       0       0       0       0       0
  5582 ;;Total ram usage:        7 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    4
  5585 ;; This function calls:
  5586 ;;		Nothing
  5587 ;; This function is called by:
  5588 ;;		_log
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text17
  5593  00308E                     __ptext17:
  5594                           	opt stack 0
  5595  00308E                     _frexp:
  5596                           	opt stack 24
  5597                           
  5598                           ;incstack = 0
  5599  00308E  0E7F               	movlw	127
  5600  003090  141D               	andwf	frexp@value+2,w,c
  5601  003092  101C               	iorwf	frexp@value+1,w,c
  5602  003094  101B               	iorwf	frexp@value,w,c
  5603  003096  A4D8               	btfss	status,2,c
  5604  003098  D00F               	goto	l3098
  5605  00309A  C01E  FFD9         	movff	frexp@eptr,fsr2l
  5606  00309E  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  5607  0030A2  0E00               	movlw	0
  5608  0030A4  6EDE               	movwf	postinc2,c
  5609  0030A6  0E00               	movlw	0
  5610  0030A8  6EDD               	movwf	postdec2,c
  5611  0030AA  0E00               	movlw	0
  5612  0030AC  6E1B               	movwf	?_frexp,c
  5613  0030AE  0E00               	movlw	0
  5614  0030B0  6E1C               	movwf	?_frexp+1,c
  5615  0030B2  0E00               	movlw	0
  5616  0030B4  6E1D               	movwf	?_frexp+2,c
  5617  0030B6  0012               	return	
  5618  0030B8                     l3098:
  5619  0030B8  501D               	movf	frexp@value+2,w,c
  5620  0030BA  0B7F               	andlw	127
  5621  0030BC  6E20               	movwf	??_frexp& (0+255),c
  5622  0030BE  6A21               	clrf	(??_frexp+1)& (0+255),c
  5623  0030C0  90D8               	bcf	status,0,c
  5624  0030C2  3620               	rlcf	??_frexp,f,c
  5625  0030C4  3621               	rlcf	??_frexp+1,f,c
  5626  0030C6  C01E  FFD9         	movff	frexp@eptr,fsr2l
  5627  0030CA  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  5628  0030CE  C020  FFDE         	movff	??_frexp,postinc2
  5629  0030D2  C021  FFDD         	movff	??_frexp+1,postdec2
  5630  0030D6  AE1C               	btfss	frexp@value+1,7,c
  5631  0030D8  D003               	goto	u2530
  5632  0030DA  6A20               	clrf	??_frexp& (0+255),c
  5633  0030DC  2A20               	incf	??_frexp& (0+255),f,c
  5634  0030DE  D001               	goto	u2538
  5635  0030E0                     u2530:
  5636  0030E0  6A20               	clrf	??_frexp& (0+255),c
  5637  0030E2                     u2538:
  5638  0030E2  5020               	movf	??_frexp,w,c
  5639  0030E4  C01E  FFD9         	movff	frexp@eptr,fsr2l
  5640  0030E8  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  5641  0030EC  12DE               	iorwf	postinc2,f,c
  5642  0030EE  0E00               	movlw	0
  5643  0030F0  12DD               	iorwf	postdec2,f,c
  5644  0030F2  C01E  FFD9         	movff	frexp@eptr,fsr2l
  5645  0030F6  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  5646  0030FA  0E82               	movlw	130
  5647  0030FC  26DE               	addwf	postinc2,f,c
  5648  0030FE  0EFF               	movlw	255
  5649  003100  22DD               	addwfc	postdec2,f,c
  5650  003102  801D               	bsf	frexp@value+2,0,c
  5651  003104  821D               	bsf	frexp@value+2,1,c
  5652  003106  841D               	bsf	frexp@value+2,2,c
  5653  003108  861D               	bsf	frexp@value+2,3,c
  5654  00310A  881D               	bsf	frexp@value+2,4,c
  5655  00310C  8A1D               	bsf	frexp@value+2,5,c
  5656  00310E  9C1D               	bcf	frexp@value+2,6,c
  5657  003110  9E1C               	bcf	frexp@value+1,7,c
  5658  003112  C01B  F01B         	movff	frexp@value,?_frexp
  5659  003116  C01C  F01C         	movff	frexp@value+1,?_frexp+1
  5660  00311A  C01D  F01D         	movff	frexp@value+2,?_frexp+2
  5661  00311E  0012               	return	
  5662  003120                     __end_of_frexp:
  5663                           	opt stack 0
  5664                           tblptru	equ	0xFF8
  5665                           tblptrh	equ	0xFF7
  5666                           tblptrl	equ	0xFF6
  5667                           tablat	equ	0xFF5
  5668                           prodh	equ	0xFF4
  5669                           prodl	equ	0xFF3
  5670                           intcon	equ	0xFF2
  5671                           postinc0	equ	0xFEE
  5672                           wreg	equ	0xFE8
  5673                           indf2	equ	0xFDF
  5674                           postinc2	equ	0xFDE
  5675                           postdec2	equ	0xFDD
  5676                           fsr2h	equ	0xFDA
  5677                           fsr2l	equ	0xFD9
  5678                           status	equ	0xFD8
  5679                           
  5680 ;; *************** function _eval_poly *****************
  5681 ;; Defined at:
  5682 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\evalpoly.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  x               3   49[BANK0 ] PTR int 
  5685 ;;  d               2   52[BANK0 ] PTR const 
  5686 ;;		 -> log@coeff(27), 
  5687 ;;  n               2   54[BANK0 ] int 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  res             3   58[BANK0 ] int 
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  3   49[BANK0 ] int 
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5699 ;;      Params:         0       7       0       0       0       0       0
  5700 ;;      Locals:         0       3       0       0       0       0       0
  5701 ;;      Temps:          0       2       0       0       0       0       0
  5702 ;;      Totals:         0      12       0       0       0       0       0
  5703 ;;Total ram usage:       12 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    6
  5706 ;; This function calls:
  5707 ;;		___ftadd
  5708 ;;		___ftmul
  5709 ;;		___wmul
  5710 ;; This function is called by:
  5711 ;;		_log
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text18
  5716  002BF2                     __ptext18:
  5717                           	opt stack 0
  5718  002BF2                     _eval_poly:
  5719                           	opt stack 22
  5720                           
  5721                           ;incstack = 0
  5722  002BF2  C096  F029         	movff	eval_poly@n,___wmul@multiplier
  5723  002BF6  C097  F02A         	movff	eval_poly@n+1,___wmul@multiplier+1
  5724  002BFA  0E00               	movlw	0
  5725  002BFC  6E2C               	movwf	___wmul@multiplicand+1,c
  5726  002BFE  0E03               	movlw	3
  5727  002C00  6E2B               	movwf	___wmul@multiplicand,c
  5728  002C02  EC62  F01B         	call	___wmul	;wreg free
  5729  002C06  0100               	movlb	0	; () banked
  5730  002C08  C094  F098         	movff	eval_poly@d,??_eval_poly
  5731  002C0C  0100               	movlb	0	; () banked
  5732  002C0E  C095  F099         	movff	eval_poly@d+1,??_eval_poly+1
  5733  002C12  5029               	movf	?___wmul,w,c
  5734  002C14  0100               	movlb	0	; () banked
  5735  002C16  2798               	addwf	??_eval_poly& (0+255),f,b
  5736  002C18  502A               	movf	?___wmul+1,w,c
  5737  002C1A  0100               	movlb	0	; () banked
  5738  002C1C  2399               	addwfc	(??_eval_poly+1)& (0+255),f,b
  5739  002C1E  C098  FFF6         	movff	??_eval_poly,tblptrl
  5740  002C22  C099  FFF7         	movff	??_eval_poly+1,tblptrh
  5741  002C26                     	if	0	;tblptru may be non-zero
  5742  002C26                     	endif
  5743  002C26                     	if	0	;tblptru may be non-zero
  5744  002C26                     	endif
  5745  002C26  0009               	tblrd		*+
  5746  002C28  0100               	movlb	0	; () banked
  5747  002C2A  CFF5 F09A          	movff	tablat,eval_poly@res
  5748  002C2E  0009               	tblrd		*+
  5749  002C30  0100               	movlb	0	; () banked
  5750  002C32  CFF5 F09B          	movff	tablat,eval_poly@res+1
  5751  002C36  000A               	tblrd		*-
  5752  002C38  0100               	movlb	0	; () banked
  5753  002C3A  CFF5 F09C          	movff	tablat,eval_poly@res+2
  5754  002C3E  D046               	goto	l4460
  5755  002C40                     l4458:
  5756                           
  5757                           ; BSR set to: 0
  5758  002C40  C09A  F06F         	movff	eval_poly@res,___ftmul@f2
  5759  002C44  C09B  F070         	movff	eval_poly@res+1,___ftmul@f2+1
  5760  002C48  C09C  F071         	movff	eval_poly@res+2,___ftmul@f2+2
  5761  002C4C  C091  F06C         	movff	eval_poly@x,___ftmul@f1
  5762  002C50  C092  F06D         	movff	eval_poly@x+1,___ftmul@f1+1
  5763  002C54  C093  F06E         	movff	eval_poly@x+2,___ftmul@f1+2
  5764  002C58  EC16  F012         	call	___ftmul	;wreg free
  5765  002C5C  C06C  F085         	movff	?___ftmul,___ftadd@f1
  5766  002C60  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  5767  002C64  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  5768  002C68  0E00               	movlw	0
  5769  002C6A  6E2C               	movwf	___wmul@multiplicand+1,c
  5770  002C6C  0E03               	movlw	3
  5771  002C6E  6E2B               	movwf	___wmul@multiplicand,c
  5772  002C70  0100               	movlb	0	; () banked
  5773  002C72  0796               	decf	eval_poly@n& (0+255),f,b
  5774  002C74  A0D8               	btfss	status,0,c
  5775  002C76  0797               	decf	(eval_poly@n+1)& (0+255),f,b
  5776  002C78  C096  F029         	movff	eval_poly@n,___wmul@multiplier
  5777  002C7C  C097  F02A         	movff	eval_poly@n+1,___wmul@multiplier+1
  5778  002C80  EC62  F01B         	call	___wmul	;wreg free
  5779  002C84  0100               	movlb	0	; () banked
  5780  002C86  C094  F098         	movff	eval_poly@d,??_eval_poly
  5781  002C8A  0100               	movlb	0	; () banked
  5782  002C8C  C095  F099         	movff	eval_poly@d+1,??_eval_poly+1
  5783  002C90  5029               	movf	?___wmul,w,c
  5784  002C92  0100               	movlb	0	; () banked
  5785  002C94  2798               	addwf	??_eval_poly& (0+255),f,b
  5786  002C96  502A               	movf	?___wmul+1,w,c
  5787  002C98  0100               	movlb	0	; () banked
  5788  002C9A  2399               	addwfc	(??_eval_poly+1)& (0+255),f,b
  5789  002C9C  C098  FFF6         	movff	??_eval_poly,tblptrl
  5790  002CA0  C099  FFF7         	movff	??_eval_poly+1,tblptrh
  5791  002CA4                     	if	0	;tblptru may be non-zero
  5792  002CA4                     	endif
  5793  002CA4                     	if	0	;tblptru may be non-zero
  5794  002CA4                     	endif
  5795  002CA4  0009               	tblrd		*+
  5796  002CA6  0100               	movlb	0	; () banked
  5797  002CA8  CFF5 F088          	movff	tablat,___ftadd@f2
  5798  002CAC  0009               	tblrd		*+
  5799  002CAE  0100               	movlb	0	; () banked
  5800  002CB0  CFF5 F089          	movff	tablat,___ftadd@f2+1
  5801  002CB4  000A               	tblrd		*-
  5802  002CB6  0100               	movlb	0	; () banked
  5803  002CB8  CFF5 F08A          	movff	tablat,___ftadd@f2+2
  5804  002CBC  EC4A  F00E         	call	___ftadd	;wreg free
  5805  002CC0  C085  F09A         	movff	?___ftadd,eval_poly@res
  5806  002CC4  C086  F09B         	movff	?___ftadd+1,eval_poly@res+1
  5807  002CC8  C087  F09C         	movff	?___ftadd+2,eval_poly@res+2
  5808  002CCC                     l4460:
  5809  002CCC  0100               	movlb	0	; () banked
  5810  002CCE  5197               	movf	(eval_poly@n+1)& (0+255),w,b
  5811  002CD0  1196               	iorwf	eval_poly@n& (0+255),w,b
  5812  002CD2  A4D8               	btfss	status,2,c
  5813  002CD4  D7B5               	goto	l4458
  5814                           
  5815                           ; BSR set to: 0
  5816  002CD6  C09A  F091         	movff	eval_poly@res,?_eval_poly
  5817  002CDA  C09B  F092         	movff	eval_poly@res+1,?_eval_poly+1
  5818  002CDE  C09C  F093         	movff	eval_poly@res+2,?_eval_poly+2
  5819                           
  5820                           ; BSR set to: 0
  5821  002CE2  0012               	return	
  5822  002CE4                     __end_of_eval_poly:
  5823                           	opt stack 0
  5824                           tblptru	equ	0xFF8
  5825                           tblptrh	equ	0xFF7
  5826                           tblptrl	equ	0xFF6
  5827                           tablat	equ	0xFF5
  5828                           prodh	equ	0xFF4
  5829                           prodl	equ	0xFF3
  5830                           intcon	equ	0xFF2
  5831                           postinc0	equ	0xFEE
  5832                           wreg	equ	0xFE8
  5833                           indf2	equ	0xFDF
  5834                           postinc2	equ	0xFDE
  5835                           postdec2	equ	0xFDD
  5836                           fsr2h	equ	0xFDA
  5837                           fsr2l	equ	0xFD9
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function ___awtoft *****************
  5841 ;; Defined at:
  5842 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  c               2   40[COMRAM] int 
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;  sign            1   43[COMRAM] unsigned char 
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  3   40[COMRAM] float 
  5849 ;; Registers used:
  5850 ;;		wreg, status,2, status,0, prodl, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5856 ;;      Params:         3       0       0       0       0       0       0
  5857 ;;      Locals:         1       0       0       0       0       0       0
  5858 ;;      Temps:          0       0       0       0       0       0       0
  5859 ;;      Totals:         4       0       0       0       0       0       0
  5860 ;;Total ram usage:        4 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    5
  5863 ;; This function calls:
  5864 ;;		___ftpack
  5865 ;; This function is called by:
  5866 ;;		_Temp_Convert
  5867 ;;		_log
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           	psect	text19
  5872  0034B0                     __ptext19:
  5873                           	opt stack 0
  5874  0034B0                     ___awtoft:
  5875                           	opt stack 23
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;incstack = 0
  5879  0034B0  0E00               	movlw	0
  5880  0034B2  6E2C               	movwf	___awtoft@sign,c
  5881  0034B4  502A               	movf	___awtoft@c+1,w,c
  5882  0034B6  0A80               	xorlw	128
  5883  0034B8  6EF3               	movwf	prodl,c
  5884  0034BA  0E80               	movlw	128
  5885  0034BC  5CF3               	subwf	prodl,w,c
  5886  0034BE  0E00               	movlw	0
  5887  0034C0  B4D8               	btfsc	status,2,c
  5888  0034C2  5C29               	subwf	___awtoft@c,w,c
  5889  0034C4  B0D8               	btfsc	status,0,c
  5890  0034C6  D006               	goto	l4452
  5891  0034C8  6C29               	negf	___awtoft@c,c
  5892  0034CA  1E2A               	comf	___awtoft@c+1,f,c
  5893  0034CC  B0D8               	btfsc	status,0,c
  5894  0034CE  2A2A               	incf	___awtoft@c+1,f,c
  5895  0034D0  0E01               	movlw	1
  5896  0034D2  6E2C               	movwf	___awtoft@sign,c
  5897  0034D4                     l4452:
  5898  0034D4  C029  F01B         	movff	___awtoft@c,___ftpack@arg
  5899  0034D8  C02A  F01C         	movff	___awtoft@c+1,___ftpack@arg+1
  5900  0034DC  6A1D               	clrf	___ftpack@arg+2,c
  5901  0034DE  0E8E               	movlw	142
  5902  0034E0  6E1E               	movwf	___ftpack@exp,c
  5903  0034E2  C02C  F01F         	movff	___awtoft@sign,___ftpack@sign
  5904  0034E6  ECA1  F017         	call	___ftpack	;wreg free
  5905  0034EA  C01B  F029         	movff	?___ftpack,?___awtoft
  5906  0034EE  C01C  F02A         	movff	?___ftpack+1,?___awtoft+1
  5907  0034F2  C01D  F02B         	movff	?___ftpack+2,?___awtoft+2
  5908  0034F6  0012               	return	
  5909  0034F8                     __end_of___awtoft:
  5910                           	opt stack 0
  5911                           tblptru	equ	0xFF8
  5912                           tblptrh	equ	0xFF7
  5913                           tblptrl	equ	0xFF6
  5914                           tablat	equ	0xFF5
  5915                           prodh	equ	0xFF4
  5916                           prodl	equ	0xFF3
  5917                           intcon	equ	0xFF2
  5918                           postinc0	equ	0xFEE
  5919                           wreg	equ	0xFE8
  5920                           indf2	equ	0xFDF
  5921                           postinc2	equ	0xFDE
  5922                           postdec2	equ	0xFDD
  5923                           fsr2h	equ	0xFDA
  5924                           fsr2l	equ	0xFD9
  5925                           status	equ	0xFD8
  5926                           
  5927 ;; *************** function ___ftsub *****************
  5928 ;; Defined at:
  5929 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;  f1              3   49[BANK0 ] float 
  5932 ;;  f2              3   52[BANK0 ] float 
  5933 ;; Auto vars:     Size  Location     Type
  5934 ;;		None
  5935 ;; Return value:  Size  Location     Type
  5936 ;;                  3   49[BANK0 ] float 
  5937 ;; Registers used:
  5938 ;;		wreg, status,2, status,0, cstack
  5939 ;; Tracked objects:
  5940 ;;		On entry : 0/0
  5941 ;;		On exit  : 0/0
  5942 ;;		Unchanged: 0/0
  5943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5944 ;;      Params:         0       6       0       0       0       0       0
  5945 ;;      Locals:         0       0       0       0       0       0       0
  5946 ;;      Temps:          0       0       0       0       0       0       0
  5947 ;;      Totals:         0       6       0       0       0       0       0
  5948 ;;Total ram usage:        6 bytes
  5949 ;; Hardware stack levels used:    1
  5950 ;; Hardware stack levels required when called:    6
  5951 ;; This function calls:
  5952 ;;		___ftadd
  5953 ;; This function is called by:
  5954 ;;		_Temp_Convert
  5955 ;;		_printf
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           	psect	text20
  5960  0034F8                     __ptext20:
  5961                           	opt stack 0
  5962  0034F8                     ___ftsub:
  5963                           	opt stack 23
  5964                           
  5965                           ;incstack = 0
  5966  0034F8  0E00               	movlw	0
  5967  0034FA  0100               	movlb	0	; () banked
  5968  0034FC  1B94               	xorwf	___ftsub@f2& (0+255),f,b
  5969  0034FE  0E00               	movlw	0
  5970  003500  0100               	movlb	0	; () banked
  5971  003502  1B95               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5972  003504  0E80               	movlw	128
  5973  003506  0100               	movlb	0	; () banked
  5974  003508  1B96               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5975                           
  5976                           ; BSR set to: 0
  5977  00350A  C091  F085         	movff	___ftsub@f1,___ftadd@f1
  5978  00350E  C092  F086         	movff	___ftsub@f1+1,___ftadd@f1+1
  5979  003512  C093  F087         	movff	___ftsub@f1+2,___ftadd@f1+2
  5980  003516  C094  F088         	movff	___ftsub@f2,___ftadd@f2
  5981  00351A  C095  F089         	movff	___ftsub@f2+1,___ftadd@f2+1
  5982  00351E  C096  F08A         	movff	___ftsub@f2+2,___ftadd@f2+2
  5983  003522  EC4A  F00E         	call	___ftadd	;wreg free
  5984  003526  C085  F091         	movff	?___ftadd,?___ftsub
  5985  00352A  C086  F092         	movff	?___ftadd+1,?___ftsub+1
  5986  00352E  C087  F093         	movff	?___ftadd+2,?___ftsub+2
  5987  003532  0012               	return	
  5988  003534                     __end_of___ftsub:
  5989                           	opt stack 0
  5990                           tblptru	equ	0xFF8
  5991                           tblptrh	equ	0xFF7
  5992                           tblptrl	equ	0xFF6
  5993                           tablat	equ	0xFF5
  5994                           prodh	equ	0xFF4
  5995                           prodl	equ	0xFF3
  5996                           intcon	equ	0xFF2
  5997                           postinc0	equ	0xFEE
  5998                           wreg	equ	0xFE8
  5999                           indf2	equ	0xFDF
  6000                           postinc2	equ	0xFDE
  6001                           postdec2	equ	0xFDD
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function ___awdiv *****************
  6007 ;; Defined at:
  6008 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  dividend        2   32[COMRAM] int 
  6011 ;;  divisor         2   34[COMRAM] int 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;  quotient        2   38[COMRAM] int 
  6014 ;;  sign            1   37[COMRAM] unsigned char 
  6015 ;;  counter         1   36[COMRAM] unsigned char 
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  2   32[COMRAM] int 
  6018 ;; Registers used:
  6019 ;;		wreg, status,2, status,0, prodl
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6025 ;;      Params:         4       0       0       0       0       0       0
  6026 ;;      Locals:         4       0       0       0       0       0       0
  6027 ;;      Temps:          0       0       0       0       0       0       0
  6028 ;;      Totals:         8       0       0       0       0       0       0
  6029 ;;Total ram usage:        8 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    4
  6032 ;; This function calls:
  6033 ;;		Nothing
  6034 ;; This function is called by:
  6035 ;;		_Temp_Convert
  6036 ;;		_fround
  6037 ;;		_scale
  6038 ;;		_printf
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text21
  6043  002FEA                     __ptext21:
  6044                           	opt stack 0
  6045  002FEA                     ___awdiv:
  6046                           	opt stack 24
  6047                           
  6048                           ;incstack = 0
  6049  002FEA  0E00               	movlw	0
  6050  002FEC  6E26               	movwf	___awdiv@sign,c
  6051  002FEE  5024               	movf	___awdiv@divisor+1,w,c
  6052  002FF0  0A80               	xorlw	128
  6053  002FF2  6EF3               	movwf	prodl,c
  6054  002FF4  0E80               	movlw	128
  6055  002FF6  5CF3               	subwf	prodl,w,c
  6056  002FF8  0E00               	movlw	0
  6057  002FFA  B4D8               	btfsc	status,2,c
  6058  002FFC  5C23               	subwf	___awdiv@divisor,w,c
  6059  002FFE  B0D8               	btfsc	status,0,c
  6060  003000  D006               	goto	l4372
  6061  003002  6C23               	negf	___awdiv@divisor,c
  6062  003004  1E24               	comf	___awdiv@divisor+1,f,c
  6063  003006  B0D8               	btfsc	status,0,c
  6064  003008  2A24               	incf	___awdiv@divisor+1,f,c
  6065  00300A  0E01               	movlw	1
  6066  00300C  6E26               	movwf	___awdiv@sign,c
  6067  00300E                     l4372:
  6068  00300E  5022               	movf	___awdiv@dividend+1,w,c
  6069  003010  0A80               	xorlw	128
  6070  003012  6EF3               	movwf	prodl,c
  6071  003014  0E80               	movlw	128
  6072  003016  5CF3               	subwf	prodl,w,c
  6073  003018  0E00               	movlw	0
  6074  00301A  B4D8               	btfsc	status,2,c
  6075  00301C  5C21               	subwf	___awdiv@dividend,w,c
  6076  00301E  B0D8               	btfsc	status,0,c
  6077  003020  D006               	goto	l4378
  6078  003022  6C21               	negf	___awdiv@dividend,c
  6079  003024  1E22               	comf	___awdiv@dividend+1,f,c
  6080  003026  B0D8               	btfsc	status,0,c
  6081  003028  2A22               	incf	___awdiv@dividend+1,f,c
  6082  00302A  0E01               	movlw	1
  6083  00302C  1A26               	xorwf	___awdiv@sign,f,c
  6084  00302E                     l4378:
  6085  00302E  0E00               	movlw	0
  6086  003030  6E28               	movwf	___awdiv@quotient+1,c
  6087  003032  0E00               	movlw	0
  6088  003034  6E27               	movwf	___awdiv@quotient,c
  6089  003036  5024               	movf	___awdiv@divisor+1,w,c
  6090  003038  1023               	iorwf	___awdiv@divisor,w,c
  6091  00303A  B4D8               	btfsc	status,2,c
  6092  00303C  D01C               	goto	l4400
  6093  00303E  0E01               	movlw	1
  6094  003040  6E25               	movwf	___awdiv@counter,c
  6095  003042  D004               	goto	l4386
  6096  003044                     l4384:
  6097  003044  90D8               	bcf	status,0,c
  6098  003046  3623               	rlcf	___awdiv@divisor,f,c
  6099  003048  3624               	rlcf	___awdiv@divisor+1,f,c
  6100  00304A  2A25               	incf	___awdiv@counter,f,c
  6101  00304C                     l4386:
  6102  00304C  AE24               	btfss	___awdiv@divisor+1,7,c
  6103  00304E  D7FA               	goto	l4384
  6104  003050                     l4388:
  6105  003050  90D8               	bcf	status,0,c
  6106  003052  3627               	rlcf	___awdiv@quotient,f,c
  6107  003054  3628               	rlcf	___awdiv@quotient+1,f,c
  6108  003056  5023               	movf	___awdiv@divisor,w,c
  6109  003058  5C21               	subwf	___awdiv@dividend,w,c
  6110  00305A  5024               	movf	___awdiv@divisor+1,w,c
  6111  00305C  5822               	subwfb	___awdiv@dividend+1,w,c
  6112  00305E  A0D8               	btfss	status,0,c
  6113  003060  D005               	goto	l4396
  6114  003062  5023               	movf	___awdiv@divisor,w,c
  6115  003064  5E21               	subwf	___awdiv@dividend,f,c
  6116  003066  5024               	movf	___awdiv@divisor+1,w,c
  6117  003068  5A22               	subwfb	___awdiv@dividend+1,f,c
  6118  00306A  8027               	bsf	___awdiv@quotient,0,c
  6119  00306C                     l4396:
  6120  00306C  90D8               	bcf	status,0,c
  6121  00306E  3224               	rrcf	___awdiv@divisor+1,f,c
  6122  003070  3223               	rrcf	___awdiv@divisor,f,c
  6123  003072  2E25               	decfsz	___awdiv@counter,f,c
  6124  003074  D7ED               	goto	l4388
  6125  003076                     l4400:
  6126  003076  5026               	movf	___awdiv@sign,w,c
  6127  003078  B4D8               	btfsc	status,2,c
  6128  00307A  D004               	goto	l4404
  6129  00307C  6C27               	negf	___awdiv@quotient,c
  6130  00307E  1E28               	comf	___awdiv@quotient+1,f,c
  6131  003080  B0D8               	btfsc	status,0,c
  6132  003082  2A28               	incf	___awdiv@quotient+1,f,c
  6133  003084                     l4404:
  6134  003084  C027  F021         	movff	___awdiv@quotient,?___awdiv
  6135  003088  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
  6136  00308C  0012               	return	
  6137  00308E                     __end_of___awdiv:
  6138                           	opt stack 0
  6139                           tblptru	equ	0xFF8
  6140                           tblptrh	equ	0xFF7
  6141                           tblptrl	equ	0xFF6
  6142                           tablat	equ	0xFF5
  6143                           prodh	equ	0xFF4
  6144                           prodl	equ	0xFF3
  6145                           intcon	equ	0xFF2
  6146                           postinc0	equ	0xFEE
  6147                           wreg	equ	0xFE8
  6148                           indf2	equ	0xFDF
  6149                           postinc2	equ	0xFDE
  6150                           postdec2	equ	0xFDD
  6151                           fsr2h	equ	0xFDA
  6152                           fsr2l	equ	0xFD9
  6153                           status	equ	0xFD8
  6154                           
  6155 ;; *************** function _Temp_Filter *****************
  6156 ;; Defined at:
  6157 ;;		line 36 in file "Tempeture.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;		None
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;  x               2   49[BANK0 ] int 
  6162 ;; Return value:  Size  Location     Type
  6163 ;;		None               void
  6164 ;; Registers used:
  6165 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6171 ;;      Params:         0       0       0       0       0       0       0
  6172 ;;      Locals:         0       2       0       0       0       0       0
  6173 ;;      Temps:          0       0       0       0       0       0       0
  6174 ;;      Totals:         0       2       0       0       0       0       0
  6175 ;;Total ram usage:        2 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    6
  6178 ;; This function calls:
  6179 ;;		___ftadd
  6180 ;;		___ftmul
  6181 ;;		___wmul
  6182 ;; This function is called by:
  6183 ;;		_Temp_Convert
  6184 ;; This function uses a non-reentrant model
  6185 ;;
  6186                           
  6187                           	psect	text22
  6188  002128                     __ptext22:
  6189                           	opt stack 0
  6190  002128                     _Temp_Filter:
  6191                           	opt stack 23
  6192                           
  6193                           ;Tempeture.c: 39: int x;
  6194                           ;Tempeture.c: 40: for(x = 0; x < 10; x++)
  6195                           
  6196                           ;incstack = 0
  6197  002128  0E00               	movlw	0
  6198  00212A  0100               	movlb	0	; () banked
  6199  00212C  6F92               	movwf	(Temp_Filter@x+1)& (0+255),b
  6200  00212E  0E00               	movlw	0
  6201  002130  0100               	movlb	0	; () banked
  6202  002132  6F91               	movwf	Temp_Filter@x& (0+255),b
  6203  002134                     
  6204                           ; BSR set to: 0
  6205  002134  0100               	movlb	0	; () banked
  6206  002136  5192               	movf	(Temp_Filter@x+1)& (0+255),w,b
  6207  002138  0A80               	xorlw	128
  6208  00213A  0F80               	addlw	-128
  6209  00213C  0E0A               	movlw	10
  6210  00213E  B4D8               	btfsc	status,2,c
  6211  002140  5D91               	subwf	Temp_Filter@x& (0+255),w,b
  6212  002142  B0D8               	btfsc	status,0,c
  6213  002144  D077               	goto	l4476
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;Tempeture.c: 41: {
  6217                           ;Tempeture.c: 42: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  6218                           
  6219                           ; BSR set to: 0
  6220                           
  6221                           ; BSR set to: 0
  6222  002146  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  6223  00214A  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6224  00214E  0E00               	movlw	0
  6225  002150  6E2C               	movwf	___wmul@multiplicand+1,c
  6226  002152  0E03               	movlw	3
  6227  002154  6E2B               	movwf	___wmul@multiplicand,c
  6228  002156  EC62  F01B         	call	___wmul	;wreg free
  6229  00215A  0101               	movlb	1	; () banked
  6230  00215C  0E8C               	movlw	low _Temp_DegF
  6231  00215E  2429               	addwf	?___wmul,w,c
  6232  002160  6ED9               	movwf	fsr2l,c
  6233  002162  0101               	movlb	1	; () banked
  6234  002164  0E01               	movlw	high _Temp_DegF
  6235  002166  202A               	addwfc	?___wmul+1,w,c
  6236  002168  6EDA               	movwf	fsr2h,c
  6237  00216A  0E48               	movlw	72
  6238  00216C  0100               	movlb	0	; () banked
  6239  00216E  6F6F               	movwf	___ftmul@f2& (0+255),b
  6240  002170  0E61               	movlw	97
  6241  002172  0100               	movlb	0	; () banked
  6242  002174  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  6243  002176  0E3F               	movlw	63
  6244  002178  0100               	movlb	0	; () banked
  6245  00217A  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  6246  00217C  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  6247  002180  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6248  002184  0E00               	movlw	0
  6249  002186  6E2C               	movwf	___wmul@multiplicand+1,c
  6250  002188  0E03               	movlw	3
  6251  00218A  6E2B               	movwf	___wmul@multiplicand,c
  6252  00218C  EC62  F01B         	call	___wmul	;wreg free
  6253  002190  0101               	movlb	1	; () banked
  6254  002192  0EC8               	movlw	low _TmpTemp_DegF
  6255  002194  2429               	addwf	?___wmul,w,c
  6256  002196  6EE1               	movwf	fsr1l,c
  6257  002198  0101               	movlb	1	; () banked
  6258  00219A  0E01               	movlw	high _TmpTemp_DegF
  6259  00219C  202A               	addwfc	?___wmul+1,w,c
  6260  00219E  6EE2               	movwf	fsr1h,c
  6261  0021A0  0100               	movlb	0	; () banked
  6262  0021A2  CFE6 F06C          	movff	postinc1,___ftmul@f1
  6263  0021A6  0100               	movlb	0	; () banked
  6264  0021A8  CFE6 F06D          	movff	postinc1,___ftmul@f1+1
  6265  0021AC  0100               	movlb	0	; () banked
  6266  0021AE  CFE5 F06E          	movff	postdec1,___ftmul@f1+2
  6267  0021B2  EC16  F012         	call	___ftmul	;wreg free
  6268  0021B6  C06C  F085         	movff	?___ftmul,___ftadd@f1
  6269  0021BA  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  6270  0021BE  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  6271  0021C2  0EC3               	movlw	195
  6272  0021C4  0100               	movlb	0	; () banked
  6273  0021C6  6F6F               	movwf	___ftmul@f2& (0+255),b
  6274  0021C8  0EF5               	movlw	245
  6275  0021CA  0100               	movlb	0	; () banked
  6276  0021CC  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  6277  0021CE  0E3D               	movlw	61
  6278  0021D0  0100               	movlb	0	; () banked
  6279  0021D2  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  6280  0021D4  0E00               	movlw	0
  6281  0021D6  6E2C               	movwf	___wmul@multiplicand+1,c
  6282  0021D8  0E03               	movlw	3
  6283  0021DA  6E2B               	movwf	___wmul@multiplicand,c
  6284  0021DC  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  6285  0021E0  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6286  0021E4  EC62  F01B         	call	___wmul	;wreg free
  6287  0021E8  0101               	movlb	1	; () banked
  6288  0021EA  0E6E               	movlw	low _PrevTemp_DegF
  6289  0021EC  2429               	addwf	?___wmul,w,c
  6290  0021EE  6EE1               	movwf	fsr1l,c
  6291  0021F0  0101               	movlb	1	; () banked
  6292  0021F2  0E01               	movlw	high _PrevTemp_DegF
  6293  0021F4  202A               	addwfc	?___wmul+1,w,c
  6294  0021F6  6EE2               	movwf	fsr1h,c
  6295  0021F8  0100               	movlb	0	; () banked
  6296  0021FA  CFE6 F06C          	movff	postinc1,___ftmul@f1
  6297  0021FE  0100               	movlb	0	; () banked
  6298  002200  CFE6 F06D          	movff	postinc1,___ftmul@f1+1
  6299  002204  0100               	movlb	0	; () banked
  6300  002206  CFE5 F06E          	movff	postdec1,___ftmul@f1+2
  6301  00220A  EC16  F012         	call	___ftmul	;wreg free
  6302  00220E  C06C  F088         	movff	?___ftmul,___ftadd@f2
  6303  002212  C06D  F089         	movff	?___ftmul+1,___ftadd@f2+1
  6304  002216  C06E  F08A         	movff	?___ftmul+2,___ftadd@f2+2
  6305  00221A  EC4A  F00E         	call	___ftadd	;wreg free
  6306  00221E  C085  FFDE         	movff	?___ftadd,postinc2
  6307  002222  C086  FFDE         	movff	?___ftadd+1,postinc2
  6308  002226  C087  FFDD         	movff	?___ftadd+2,postdec2
  6309  00222A  52DD               	movf	postdec2,f,c
  6310  00222C  0100               	movlb	0	; () banked
  6311  00222E  4B91               	infsnz	Temp_Filter@x& (0+255),f,b
  6312  002230  2B92               	incf	(Temp_Filter@x+1)& (0+255),f,b
  6313  002232  D780               	goto	L8
  6314  002234                     l4476:
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;Tempeture.c: 43: }
  6318                           ;Tempeture.c: 44: for(x = 0; x < 10; x++)
  6319  002234  0E00               	movlw	0
  6320  002236  0100               	movlb	0	; () banked
  6321  002238  6F92               	movwf	(Temp_Filter@x+1)& (0+255),b
  6322  00223A  0E00               	movlw	0
  6323  00223C  0100               	movlb	0	; () banked
  6324  00223E  6F91               	movwf	Temp_Filter@x& (0+255),b
  6325  002240                     
  6326                           ; BSR set to: 0
  6327  002240  0100               	movlb	0	; () banked
  6328  002242  5192               	movf	(Temp_Filter@x+1)& (0+255),w,b
  6329  002244  0A80               	xorlw	128
  6330  002246  0F80               	addlw	-128
  6331  002248  0E0A               	movlw	10
  6332  00224A  B4D8               	btfsc	status,2,c
  6333  00224C  5D91               	subwf	Temp_Filter@x& (0+255),w,b
  6334  00224E  B0D8               	btfsc	status,0,c
  6335  002250  0012               	return	
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;Tempeture.c: 45: {
  6339                           ;Tempeture.c: 46: PrevTemp_DegF[x] = Temp_DegF[x];
  6340                           
  6341                           ; BSR set to: 0
  6342                           
  6343                           ; BSR set to: 0
  6344  002252  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  6345  002256  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6346  00225A  0E00               	movlw	0
  6347  00225C  6E2C               	movwf	___wmul@multiplicand+1,c
  6348  00225E  0E03               	movlw	3
  6349  002260  6E2B               	movwf	___wmul@multiplicand,c
  6350  002262  EC62  F01B         	call	___wmul	;wreg free
  6351  002266  0101               	movlb	1	; () banked
  6352  002268  0E8C               	movlw	low _Temp_DegF
  6353  00226A  2429               	addwf	?___wmul,w,c
  6354  00226C  6ED9               	movwf	fsr2l,c
  6355  00226E  0101               	movlb	1	; () banked
  6356  002270  0E01               	movlw	high _Temp_DegF
  6357  002272  202A               	addwfc	?___wmul+1,w,c
  6358  002274  6EDA               	movwf	fsr2h,c
  6359  002276  C091  F029         	movff	Temp_Filter@x,___wmul@multiplier
  6360  00227A  C092  F02A         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6361  00227E  0E00               	movlw	0
  6362  002280  6E2C               	movwf	___wmul@multiplicand+1,c
  6363  002282  0E03               	movlw	3
  6364  002284  6E2B               	movwf	___wmul@multiplicand,c
  6365  002286  EC62  F01B         	call	___wmul	;wreg free
  6366  00228A  0101               	movlb	1	; () banked
  6367  00228C  0E6E               	movlw	low _PrevTemp_DegF
  6368  00228E  2429               	addwf	?___wmul,w,c
  6369  002290  6EE1               	movwf	fsr1l,c
  6370  002292  0101               	movlb	1	; () banked
  6371  002294  0E01               	movlw	high _PrevTemp_DegF
  6372  002296  202A               	addwfc	?___wmul+1,w,c
  6373  002298  6EE2               	movwf	fsr1h,c
  6374  00229A  CFDE FFE6          	movff	postinc2,postinc1
  6375  00229E  CFDE FFE6          	movff	postinc2,postinc1
  6376  0022A2  CFDE FFE5          	movff	postinc2,postdec1
  6377  0022A6  52E5               	movf	postdec1,f,c
  6378                           
  6379                           ; BSR set to: 1
  6380  0022A8  0100               	movlb	0	; () banked
  6381  0022AA  4B91               	infsnz	Temp_Filter@x& (0+255),f,b
  6382  0022AC  2B92               	incf	(Temp_Filter@x+1)& (0+255),f,b
  6383  0022AE  D7C8               	goto	L9
  6384  0022B0                     __end_of_Temp_Filter:
  6385                           	opt stack 0
  6386                           tblptru	equ	0xFF8
  6387                           tblptrh	equ	0xFF7
  6388                           tblptrl	equ	0xFF6
  6389                           tablat	equ	0xFF5
  6390                           prodh	equ	0xFF4
  6391                           prodl	equ	0xFF3
  6392                           intcon	equ	0xFF2
  6393                           postinc0	equ	0xFEE
  6394                           wreg	equ	0xFE8
  6395                           postinc1	equ	0xFE6
  6396                           postdec1	equ	0xFE5
  6397                           fsr1h	equ	0xFE2
  6398                           fsr1l	equ	0xFE1
  6399                           indf2	equ	0xFDF
  6400                           postinc2	equ	0xFDE
  6401                           postdec2	equ	0xFDD
  6402                           fsr2h	equ	0xFDA
  6403                           fsr2l	equ	0xFD9
  6404                           status	equ	0xFD8
  6405                           
  6406 ;; *************** function _SYSTEM_Initialize *****************
  6407 ;; Defined at:
  6408 ;;		line 112 in file "mcc_generated_files/mcc.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;		None
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;		None
  6413 ;; Return value:  Size  Location     Type
  6414 ;;		None               void
  6415 ;; Registers used:
  6416 ;;		wreg, status,2, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6422 ;;      Params:         0       0       0       0       0       0       0
  6423 ;;      Locals:         0       0       0       0       0       0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0
  6425 ;;      Totals:         0       0       0       0       0       0       0
  6426 ;;Total ram usage:        0 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    6
  6429 ;; This function calls:
  6430 ;;		_ADC_Initialize
  6431 ;;		_EUSART1_Initialize
  6432 ;;		_INTERRUPT_Initialize
  6433 ;;		_OSCILLATOR_Initialize
  6434 ;;		_PIN_MANAGER_Initialize
  6435 ;;		_TMR1_Initialize
  6436 ;; This function is called by:
  6437 ;;		_main
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           	psect	text23
  6442  00370C                     __ptext23:
  6443                           	opt stack 0
  6444  00370C                     _SYSTEM_Initialize:
  6445                           	opt stack 24
  6446                           
  6447                           ;mcc.c: 114: OSCILLATOR_Initialize();
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;incstack = 0
  6451  00370C  ECCE  F01B         	call	_OSCILLATOR_Initialize	;wreg free
  6452                           
  6453                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  6454  003710  EC31  F01A         	call	_PIN_MANAGER_Initialize	;wreg free
  6455                           
  6456                           ;mcc.c: 116: INTERRUPT_Initialize();
  6457  003714  ECD5  F01B         	call	_INTERRUPT_Initialize	;wreg free
  6458                           
  6459                           ;mcc.c: 117: ADC_Initialize();
  6460  003718  ECA0  F01B         	call	_ADC_Initialize	;wreg free
  6461                           
  6462                           ;mcc.c: 118: EUSART1_Initialize();
  6463  00371C  EC9A  F01A         	call	_EUSART1_Initialize	;wreg free
  6464                           
  6465                           ;mcc.c: 119: TMR1_Initialize();
  6466  003720  EC75  F01B         	call	_TMR1_Initialize	;wreg free
  6467  003724  0012               	return	
  6468  003726                     __end_of_SYSTEM_Initialize:
  6469                           	opt stack 0
  6470                           tblptru	equ	0xFF8
  6471                           tblptrh	equ	0xFF7
  6472                           tblptrl	equ	0xFF6
  6473                           tablat	equ	0xFF5
  6474                           prodh	equ	0xFF4
  6475                           prodl	equ	0xFF3
  6476                           intcon	equ	0xFF2
  6477                           postinc0	equ	0xFEE
  6478                           wreg	equ	0xFE8
  6479                           postinc1	equ	0xFE6
  6480                           postdec1	equ	0xFE5
  6481                           fsr1h	equ	0xFE2
  6482                           fsr1l	equ	0xFE1
  6483                           indf2	equ	0xFDF
  6484                           postinc2	equ	0xFDE
  6485                           postdec2	equ	0xFDD
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function _TMR1_Initialize *****************
  6491 ;; Defined at:
  6492 ;;		line 16 in file "mcc_generated_files/tmr1.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;		None
  6497 ;; Return value:  Size  Location     Type
  6498 ;;		None               void
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6506 ;;      Params:         0       0       0       0       0       0       0
  6507 ;;      Locals:         0       0       0       0       0       0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0
  6509 ;;      Totals:         0       0       0       0       0       0       0
  6510 ;;Total ram usage:        0 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    5
  6513 ;; This function calls:
  6514 ;;		_TMR1_StartTimer
  6515 ;; This function is called by:
  6516 ;;		_SYSTEM_Initialize
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text24
  6521  0036EA                     __ptext24:
  6522                           	opt stack 0
  6523  0036EA                     _TMR1_Initialize:
  6524                           	opt stack 24
  6525                           
  6526                           ;tmr1.c: 21: T1CON = 0x30;
  6527                           
  6528                           ;incstack = 0
  6529  0036EA  0E30               	movlw	48
  6530  0036EC  6ECD               	movwf	4045,c	;volatile
  6531                           
  6532                           ;tmr1.c: 24: T1GCON = 0x00;
  6533  0036EE  0E00               	movlw	0
  6534  0036F0  6ECC               	movwf	4044,c	;volatile
  6535                           
  6536                           ;tmr1.c: 27: TMR1H = 0x0B;
  6537  0036F2  0E0B               	movlw	11
  6538  0036F4  6ECF               	movwf	4047,c	;volatile
  6539                           
  6540                           ;tmr1.c: 30: TMR1L = 0xDC;
  6541  0036F6  0EDC               	movlw	220
  6542  0036F8  6ECE               	movwf	4046,c	;volatile
  6543                           
  6544                           ;tmr1.c: 33: timer1ReloadVal=TMR1;
  6545  0036FA  CFCE F043          	movff	4046,_timer1ReloadVal	;volatile
  6546  0036FE  CFCF F044          	movff	4047,_timer1ReloadVal+1	;volatile
  6547                           
  6548                           ;tmr1.c: 36: PIR1bits.TMR1IF = 0;
  6549  003702  909E               	bcf	3998,0,c	;volatile
  6550                           
  6551                           ;tmr1.c: 39: PIE1bits.TMR1IE = 1;
  6552  003704  809D               	bsf	3997,0,c	;volatile
  6553                           
  6554                           ;tmr1.c: 42: TMR1_StartTimer();
  6555  003706  ECE0  F01B         	call	_TMR1_StartTimer	;wreg free
  6556  00370A  0012               	return	
  6557  00370C                     __end_of_TMR1_Initialize:
  6558                           	opt stack 0
  6559                           tblptru	equ	0xFF8
  6560                           tblptrh	equ	0xFF7
  6561                           tblptrl	equ	0xFF6
  6562                           tablat	equ	0xFF5
  6563                           prodh	equ	0xFF4
  6564                           prodl	equ	0xFF3
  6565                           intcon	equ	0xFF2
  6566                           postinc0	equ	0xFEE
  6567                           wreg	equ	0xFE8
  6568                           postinc1	equ	0xFE6
  6569                           postdec1	equ	0xFE5
  6570                           fsr1h	equ	0xFE2
  6571                           fsr1l	equ	0xFE1
  6572                           indf2	equ	0xFDF
  6573                           postinc2	equ	0xFDE
  6574                           postdec2	equ	0xFDD
  6575                           fsr2h	equ	0xFDA
  6576                           fsr2l	equ	0xFD9
  6577                           status	equ	0xFD8
  6578                           
  6579 ;; *************** function _TMR1_StartTimer *****************
  6580 ;; Defined at:
  6581 ;;		line 45 in file "mcc_generated_files/tmr1.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;		None
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;		None
  6586 ;; Return value:  Size  Location     Type
  6587 ;;		None               void
  6588 ;; Registers used:
  6589 ;;		None
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6595 ;;      Params:         0       0       0       0       0       0       0
  6596 ;;      Locals:         0       0       0       0       0       0       0
  6597 ;;      Temps:          0       0       0       0       0       0       0
  6598 ;;      Totals:         0       0       0       0       0       0       0
  6599 ;;Total ram usage:        0 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    4
  6602 ;; This function calls:
  6603 ;;		Nothing
  6604 ;; This function is called by:
  6605 ;;		_TMR1_Initialize
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           	psect	text25
  6610  0037C0                     __ptext25:
  6611                           	opt stack 0
  6612  0037C0                     _TMR1_StartTimer:
  6613                           	opt stack 24
  6614                           
  6615                           ;tmr1.c: 48: T1CONbits.TMR1ON = 1;
  6616                           
  6617                           ;incstack = 0
  6618  0037C0  80CD               	bsf	4045,0,c	;volatile
  6619  0037C2  0012               	return	
  6620  0037C4                     __end_of_TMR1_StartTimer:
  6621                           	opt stack 0
  6622                           tblptru	equ	0xFF8
  6623                           tblptrh	equ	0xFF7
  6624                           tblptrl	equ	0xFF6
  6625                           tablat	equ	0xFF5
  6626                           prodh	equ	0xFF4
  6627                           prodl	equ	0xFF3
  6628                           intcon	equ	0xFF2
  6629                           postinc0	equ	0xFEE
  6630                           wreg	equ	0xFE8
  6631                           postinc1	equ	0xFE6
  6632                           postdec1	equ	0xFE5
  6633                           fsr1h	equ	0xFE2
  6634                           fsr1l	equ	0xFE1
  6635                           indf2	equ	0xFDF
  6636                           postinc2	equ	0xFDE
  6637                           postdec2	equ	0xFDD
  6638                           fsr2h	equ	0xFDA
  6639                           fsr2l	equ	0xFD9
  6640                           status	equ	0xFD8
  6641                           
  6642 ;; *************** function _PIN_MANAGER_Initialize *****************
  6643 ;; Defined at:
  6644 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;		None               void
  6651 ;; Registers used:
  6652 ;;		wreg, status,2
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6658 ;;      Params:         0       0       0       0       0       0       0
  6659 ;;      Locals:         0       0       0       0       0       0       0
  6660 ;;      Temps:          0       0       0       0       0       0       0
  6661 ;;      Totals:         0       0       0       0       0       0       0
  6662 ;;Total ram usage:        0 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    4
  6665 ;; This function calls:
  6666 ;;		Nothing
  6667 ;; This function is called by:
  6668 ;;		_SYSTEM_Initialize
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           	psect	text26
  6673  003462                     __ptext26:
  6674                           	opt stack 0
  6675  003462                     _PIN_MANAGER_Initialize:
  6676                           	opt stack 25
  6677                           
  6678                           ;pin_manager.c: 8: LATA = 0x00;
  6679                           
  6680                           ;incstack = 0
  6681  003462  0E00               	movlw	0
  6682  003464  6E89               	movwf	3977,c	;volatile
  6683                           
  6684                           ;pin_manager.c: 9: TRISA = 0xAE;
  6685  003466  0EAE               	movlw	174
  6686  003468  6E92               	movwf	3986,c	;volatile
  6687                           
  6688                           ;pin_manager.c: 10: ANSELA = 0x2E;
  6689  00346A  0E2E               	movlw	46
  6690  00346C  010F               	movlb	15	; () banked
  6691  00346E  6F38               	movwf	56,b	;volatile
  6692                           
  6693                           ;pin_manager.c: 12: LATB = 0x00;
  6694  003470  0E00               	movlw	0
  6695  003472  6E8A               	movwf	3978,c	;volatile
  6696                           
  6697                           ;pin_manager.c: 13: TRISB = 0xF4;
  6698  003474  0EF4               	movlw	244
  6699  003476  6E93               	movwf	3987,c	;volatile
  6700                           
  6701                           ;pin_manager.c: 14: ANSELB = 0x34;
  6702  003478  0E34               	movlw	52
  6703  00347A  010F               	movlb	15	; () banked
  6704  00347C  6F39               	movwf	57,b	;volatile
  6705                           
  6706                           ;pin_manager.c: 15: WPUB = 0x00;
  6707  00347E  0E00               	movlw	0
  6708  003480  6E61               	movwf	3937,c	;volatile
  6709                           
  6710                           ;pin_manager.c: 17: LATC = 0x08;
  6711  003482  0E08               	movlw	8
  6712  003484  6E8B               	movwf	3979,c	;volatile
  6713                           
  6714                           ;pin_manager.c: 18: TRISC = 0xC4;
  6715  003486  0EC4               	movlw	196
  6716  003488  6E94               	movwf	3988,c	;volatile
  6717                           
  6718                           ;pin_manager.c: 19: ANSELC = 0x04;
  6719  00348A  0E04               	movlw	4
  6720  00348C  010F               	movlb	15	; () banked
  6721  00348E  6F3A               	movwf	58,b	;volatile
  6722                           
  6723                           ;pin_manager.c: 21: LATD = 0x00;
  6724  003490  0E00               	movlw	0
  6725  003492  6E8C               	movwf	3980,c	;volatile
  6726                           
  6727                           ;pin_manager.c: 22: TRISD = 0xD1;
  6728  003494  0ED1               	movlw	209
  6729  003496  6E95               	movwf	3989,c	;volatile
  6730                           
  6731                           ;pin_manager.c: 23: ANSELD = 0xD1;
  6732  003498  0ED1               	movlw	209
  6733  00349A  010F               	movlb	15	; () banked
  6734  00349C  6F3B               	movwf	59,b	;volatile
  6735                           
  6736                           ;pin_manager.c: 25: LATE = 0x00;
  6737  00349E  0E00               	movlw	0
  6738  0034A0  6E8D               	movwf	3981,c	;volatile
  6739                           
  6740                           ;pin_manager.c: 26: TRISE = 0x05;
  6741  0034A2  0E05               	movlw	5
  6742  0034A4  6E96               	movwf	3990,c	;volatile
  6743                           
  6744                           ;pin_manager.c: 27: ANSELE = 0x05;
  6745  0034A6  0E05               	movlw	5
  6746  0034A8  010F               	movlb	15	; () banked
  6747  0034AA  6F3C               	movwf	60,b	;volatile
  6748                           
  6749                           ; BSR set to: 15
  6750                           ;pin_manager.c: 29: INTCON2bits.nRBPU = 0x01;
  6751  0034AC  8EF1               	bsf	intcon2,7,c	;volatile
  6752                           
  6753                           ; BSR set to: 15
  6754  0034AE  0012               	return	
  6755  0034B0                     __end_of_PIN_MANAGER_Initialize:
  6756                           	opt stack 0
  6757                           tblptru	equ	0xFF8
  6758                           tblptrh	equ	0xFF7
  6759                           tblptrl	equ	0xFF6
  6760                           tablat	equ	0xFF5
  6761                           prodh	equ	0xFF4
  6762                           prodl	equ	0xFF3
  6763                           intcon	equ	0xFF2
  6764                           intcon2	equ	0xFF1
  6765                           postinc0	equ	0xFEE
  6766                           wreg	equ	0xFE8
  6767                           postinc1	equ	0xFE6
  6768                           postdec1	equ	0xFE5
  6769                           fsr1h	equ	0xFE2
  6770                           fsr1l	equ	0xFE1
  6771                           indf2	equ	0xFDF
  6772                           postinc2	equ	0xFDE
  6773                           postdec2	equ	0xFDD
  6774                           fsr2h	equ	0xFDA
  6775                           fsr2l	equ	0xFD9
  6776                           status	equ	0xFD8
  6777                           
  6778 ;; *************** function _OSCILLATOR_Initialize *****************
  6779 ;; Defined at:
  6780 ;;		line 122 in file "mcc_generated_files/mcc.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;		None
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;		None
  6785 ;; Return value:  Size  Location     Type
  6786 ;;		None               void
  6787 ;; Registers used:
  6788 ;;		wreg, status,2
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6794 ;;      Params:         0       0       0       0       0       0       0
  6795 ;;      Locals:         0       0       0       0       0       0       0
  6796 ;;      Temps:          0       0       0       0       0       0       0
  6797 ;;      Totals:         0       0       0       0       0       0       0
  6798 ;;Total ram usage:        0 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    4
  6801 ;; This function calls:
  6802 ;;		Nothing
  6803 ;; This function is called by:
  6804 ;;		_SYSTEM_Initialize
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           	psect	text27
  6809  00379C                     __ptext27:
  6810                           	opt stack 0
  6811  00379C                     _OSCILLATOR_Initialize:
  6812                           	opt stack 25
  6813                           
  6814                           ;mcc.c: 125: OSCCON = 0x62;
  6815                           
  6816                           ; BSR set to: 15
  6817                           ;incstack = 0
  6818  00379C  0E62               	movlw	98
  6819  00379E  6ED3               	movwf	4051,c	;volatile
  6820                           
  6821                           ;mcc.c: 127: OSCCON2 = 0x04;
  6822  0037A0  0E04               	movlw	4
  6823  0037A2  6ED2               	movwf	4050,c	;volatile
  6824                           
  6825                           ;mcc.c: 129: OSCTUNE = 0x00;
  6826  0037A4  0E00               	movlw	0
  6827  0037A6  6E9B               	movwf	3995,c	;volatile
  6828  0037A8  0012               	return	
  6829  0037AA                     __end_of_OSCILLATOR_Initialize:
  6830                           	opt stack 0
  6831                           tblptru	equ	0xFF8
  6832                           tblptrh	equ	0xFF7
  6833                           tblptrl	equ	0xFF6
  6834                           tablat	equ	0xFF5
  6835                           prodh	equ	0xFF4
  6836                           prodl	equ	0xFF3
  6837                           intcon	equ	0xFF2
  6838                           intcon2	equ	0xFF1
  6839                           postinc0	equ	0xFEE
  6840                           wreg	equ	0xFE8
  6841                           postinc1	equ	0xFE6
  6842                           postdec1	equ	0xFE5
  6843                           fsr1h	equ	0xFE2
  6844                           fsr1l	equ	0xFE1
  6845                           indf2	equ	0xFDF
  6846                           postinc2	equ	0xFDE
  6847                           postdec2	equ	0xFDD
  6848                           fsr2h	equ	0xFDA
  6849                           fsr2l	equ	0xFD9
  6850                           status	equ	0xFD8
  6851                           
  6852 ;; *************** function _INTERRUPT_Initialize *****************
  6853 ;; Defined at:
  6854 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;		None
  6857 ;; Auto vars:     Size  Location     Type
  6858 ;;		None
  6859 ;; Return value:  Size  Location     Type
  6860 ;;		None               void
  6861 ;; Registers used:
  6862 ;;		None
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6868 ;;      Params:         0       0       0       0       0       0       0
  6869 ;;      Locals:         0       0       0       0       0       0       0
  6870 ;;      Temps:          0       0       0       0       0       0       0
  6871 ;;      Totals:         0       0       0       0       0       0       0
  6872 ;;Total ram usage:        0 bytes
  6873 ;; Hardware stack levels used:    1
  6874 ;; Hardware stack levels required when called:    4
  6875 ;; This function calls:
  6876 ;;		Nothing
  6877 ;; This function is called by:
  6878 ;;		_SYSTEM_Initialize
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           	psect	text28
  6883  0037AA                     __ptext28:
  6884                           	opt stack 0
  6885  0037AA                     _INTERRUPT_Initialize:
  6886                           	opt stack 25
  6887                           
  6888                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  6889                           
  6890                           ;incstack = 0
  6891  0037AA  9ED0               	bcf	4048,7,c	;volatile
  6892                           
  6893                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  6894  0037AC  9A9F               	bcf	3999,5,c	;volatile
  6895                           
  6896                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  6897  0037AE  9C9F               	bcf	3999,6,c	;volatile
  6898                           
  6899                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  6900  0037B0  909F               	bcf	3999,0,c	;volatile
  6901                           
  6902                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  6903  0037B2  989F               	bcf	3999,4,c	;volatile
  6904  0037B4  0012               	return	
  6905  0037B6                     __end_of_INTERRUPT_Initialize:
  6906                           	opt stack 0
  6907                           tblptru	equ	0xFF8
  6908                           tblptrh	equ	0xFF7
  6909                           tblptrl	equ	0xFF6
  6910                           tablat	equ	0xFF5
  6911                           prodh	equ	0xFF4
  6912                           prodl	equ	0xFF3
  6913                           intcon	equ	0xFF2
  6914                           intcon2	equ	0xFF1
  6915                           postinc0	equ	0xFEE
  6916                           wreg	equ	0xFE8
  6917                           postinc1	equ	0xFE6
  6918                           postdec1	equ	0xFE5
  6919                           fsr1h	equ	0xFE2
  6920                           fsr1l	equ	0xFE1
  6921                           indf2	equ	0xFDF
  6922                           postinc2	equ	0xFDE
  6923                           postdec2	equ	0xFDD
  6924                           fsr2h	equ	0xFDA
  6925                           fsr2l	equ	0xFD9
  6926                           status	equ	0xFD8
  6927                           
  6928 ;; *************** function _EUSART1_Initialize *****************
  6929 ;; Defined at:
  6930 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;		None
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;		None
  6935 ;; Return value:  Size  Location     Type
  6936 ;;		None               void
  6937 ;; Registers used:
  6938 ;;		wreg, status,2
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6944 ;;      Params:         0       0       0       0       0       0       0
  6945 ;;      Locals:         0       0       0       0       0       0       0
  6946 ;;      Temps:          0       0       0       0       0       0       0
  6947 ;;      Totals:         0       0       0       0       0       0       0
  6948 ;;Total ram usage:        0 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:    4
  6951 ;; This function calls:
  6952 ;;		Nothing
  6953 ;; This function is called by:
  6954 ;;		_SYSTEM_Initialize
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text29
  6959  003534                     __ptext29:
  6960                           	opt stack 0
  6961  003534                     _EUSART1_Initialize:
  6962                           	opt stack 25
  6963                           
  6964                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  6965                           
  6966                           ;incstack = 0
  6967  003534  9A9D               	bcf	3997,5,c	;volatile
  6968                           
  6969                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  6970  003536  989D               	bcf	3997,4,c	;volatile
  6971                           
  6972                           ;eusart1.c: 85: BAUD1CON = 0x48;
  6973  003538  0E48               	movlw	72
  6974  00353A  6EB8               	movwf	4024,c	;volatile
  6975                           
  6976                           ;eusart1.c: 88: RC1STA = 0x98;
  6977  00353C  0E98               	movlw	152
  6978  00353E  6EAB               	movwf	4011,c	;volatile
  6979                           
  6980                           ;eusart1.c: 91: TX1STA = 0x26;
  6981  003540  0E26               	movlw	38
  6982  003542  6EAC               	movwf	4012,c	;volatile
  6983                           
  6984                           ;eusart1.c: 94: SPBRG1 = 0x22;
  6985  003544  0E22               	movlw	34
  6986  003546  6EAF               	movwf	4015,c	;volatile
  6987                           
  6988                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  6989  003548  0E00               	movlw	0
  6990  00354A  6EB0               	movwf	4016,c	;volatile
  6991                           
  6992                           ;eusart1.c: 100: TXREG1 = 0x00;
  6993  00354C  0E00               	movlw	0
  6994  00354E  6EAD               	movwf	4013,c	;volatile
  6995                           
  6996                           ;eusart1.c: 103: RCREG1 = 0x00;
  6997  003550  0E00               	movlw	0
  6998  003552  6EAE               	movwf	4014,c	;volatile
  6999                           
  7000                           ;eusart1.c: 107: eusart1TxHead = 0;
  7001  003554  0E00               	movlw	0
  7002  003556  6E41               	movwf	_eusart1TxHead,c
  7003                           
  7004                           ;eusart1.c: 108: eusart1TxTail = 0;
  7005  003558  0E00               	movlw	0
  7006  00355A  6E42               	movwf	_eusart1TxTail,c
  7007                           
  7008                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  7009  00355C  0E08               	movlw	8
  7010  00355E  6E45               	movwf	_eusart1TxBufferRemaining,c	;volatile
  7011                           
  7012                           ;eusart1.c: 111: eusart1RxHead = 0;
  7013  003560  0E00               	movlw	0
  7014  003562  6E3F               	movwf	_eusart1RxHead,c
  7015                           
  7016                           ;eusart1.c: 112: eusart1RxTail = 0;
  7017  003564  0E00               	movlw	0
  7018  003566  6E40               	movwf	_eusart1RxTail,c
  7019                           
  7020                           ;eusart1.c: 113: eusart1RxCount = 0;
  7021  003568  0E00               	movlw	0
  7022  00356A  6E3E               	movwf	_eusart1RxCount,c	;volatile
  7023                           
  7024                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  7025  00356C  8A9D               	bsf	3997,5,c	;volatile
  7026  00356E  0012               	return	
  7027  003570                     __end_of_EUSART1_Initialize:
  7028                           	opt stack 0
  7029                           tblptru	equ	0xFF8
  7030                           tblptrh	equ	0xFF7
  7031                           tblptrl	equ	0xFF6
  7032                           tablat	equ	0xFF5
  7033                           prodh	equ	0xFF4
  7034                           prodl	equ	0xFF3
  7035                           intcon	equ	0xFF2
  7036                           intcon2	equ	0xFF1
  7037                           postinc0	equ	0xFEE
  7038                           wreg	equ	0xFE8
  7039                           postinc1	equ	0xFE6
  7040                           postdec1	equ	0xFE5
  7041                           fsr1h	equ	0xFE2
  7042                           fsr1l	equ	0xFE1
  7043                           indf2	equ	0xFDF
  7044                           postinc2	equ	0xFDE
  7045                           postdec2	equ	0xFDD
  7046                           fsr2h	equ	0xFDA
  7047                           fsr2l	equ	0xFD9
  7048                           status	equ	0xFD8
  7049                           
  7050 ;; *************** function _ADC_Initialize *****************
  7051 ;; Defined at:
  7052 ;;		line 13 in file "mcc_generated_files/adc.c"
  7053 ;; Parameters:    Size  Location     Type
  7054 ;;		None
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;		None
  7057 ;; Return value:  Size  Location     Type
  7058 ;;		None               void
  7059 ;; Registers used:
  7060 ;;		wreg, status,2
  7061 ;; Tracked objects:
  7062 ;;		On entry : 0/0
  7063 ;;		On exit  : 0/0
  7064 ;;		Unchanged: 0/0
  7065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7066 ;;      Params:         0       0       0       0       0       0       0
  7067 ;;      Locals:         0       0       0       0       0       0       0
  7068 ;;      Temps:          0       0       0       0       0       0       0
  7069 ;;      Totals:         0       0       0       0       0       0       0
  7070 ;;Total ram usage:        0 bytes
  7071 ;; Hardware stack levels used:    1
  7072 ;; Hardware stack levels required when called:    4
  7073 ;; This function calls:
  7074 ;;		Nothing
  7075 ;; This function is called by:
  7076 ;;		_SYSTEM_Initialize
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           	psect	text30
  7081  003740                     __ptext30:
  7082                           	opt stack 0
  7083  003740                     _ADC_Initialize:
  7084                           	opt stack 25
  7085                           
  7086                           ;adc.c: 18: ADCON0 = 0x01;
  7087                           
  7088                           ;incstack = 0
  7089  003740  0E01               	movlw	1
  7090  003742  6EC2               	movwf	4034,c	;volatile
  7091                           
  7092                           ;adc.c: 21: ADCON1 = 0x80;
  7093  003744  0E80               	movlw	128
  7094  003746  6EC1               	movwf	4033,c	;volatile
  7095                           
  7096                           ;adc.c: 24: ADCON2 = 0xA9;
  7097  003748  0EA9               	movlw	169
  7098  00374A  6EC0               	movwf	4032,c	;volatile
  7099                           
  7100                           ;adc.c: 27: ADRESL = 0x00;
  7101  00374C  0E00               	movlw	0
  7102  00374E  6EC3               	movwf	4035,c	;volatile
  7103                           
  7104                           ;adc.c: 30: ADRESH = 0x00;
  7105  003750  0E00               	movlw	0
  7106  003752  6EC4               	movwf	4036,c	;volatile
  7107                           
  7108                           ;adc.c: 33: PIE1bits.ADIE = 1;
  7109  003754  8C9D               	bsf	3997,6,c	;volatile
  7110  003756  0012               	return	
  7111  003758                     __end_of_ADC_Initialize:
  7112                           	opt stack 0
  7113                           tblptru	equ	0xFF8
  7114                           tblptrh	equ	0xFF7
  7115                           tblptrl	equ	0xFF6
  7116                           tablat	equ	0xFF5
  7117                           prodh	equ	0xFF4
  7118                           prodl	equ	0xFF3
  7119                           intcon	equ	0xFF2
  7120                           intcon2	equ	0xFF1
  7121                           postinc0	equ	0xFEE
  7122                           wreg	equ	0xFE8
  7123                           postinc1	equ	0xFE6
  7124                           postdec1	equ	0xFE5
  7125                           fsr1h	equ	0xFE2
  7126                           fsr1l	equ	0xFE1
  7127                           indf2	equ	0xFDF
  7128                           postinc2	equ	0xFDE
  7129                           postdec2	equ	0xFDD
  7130                           fsr2h	equ	0xFDA
  7131                           fsr2l	equ	0xFD9
  7132                           status	equ	0xFD8
  7133                           
  7134 ;; *************** function _Battery_Get *****************
  7135 ;; Defined at:
  7136 ;;		line 93 in file "Battery.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;  channelnum      2    0[BANK0 ] int 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;		None
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  3    0[BANK0 ] float 
  7143 ;; Registers used:
  7144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7145 ;; Tracked objects:
  7146 ;;		On entry : 0/0
  7147 ;;		On exit  : 0/0
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7150 ;;      Params:         0       3       0       0       0       0       0
  7151 ;;      Locals:         0       0       0       0       0       0       0
  7152 ;;      Temps:          0       0       0       0       0       0       0
  7153 ;;      Totals:         0       3       0       0       0       0       0
  7154 ;;Total ram usage:        3 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; Hardware stack levels required when called:    5
  7157 ;; This function calls:
  7158 ;;		___wmul
  7159 ;; This function is called by:
  7160 ;;		_main
  7161 ;;		_RunBypas
  7162 ;; This function uses a non-reentrant model
  7163 ;;
  7164                           
  7165                           	psect	text31
  7166  0035AA                     __ptext31:
  7167                           	opt stack 0
  7168  0035AA                     _Battery_Get:
  7169                           	opt stack 25
  7170                           
  7171                           ;Battery.c: 95: return TempBattery_Volt[channelnum];
  7172                           
  7173                           ;incstack = 0
  7174  0035AA  C060  F029         	movff	Battery_Get@channelnum,___wmul@multiplier
  7175  0035AE  C061  F02A         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  7176  0035B2  0E00               	movlw	0
  7177  0035B4  6E2C               	movwf	___wmul@multiplicand+1,c
  7178  0035B6  0E03               	movlw	3
  7179  0035B8  6E2B               	movwf	___wmul@multiplicand,c
  7180  0035BA  EC62  F01B         	call	___wmul	;wreg free
  7181  0035BE  0101               	movlb	1	; () banked
  7182  0035C0  0EAA               	movlw	low _TempBattery_Volt
  7183  0035C2  2429               	addwf	?___wmul,w,c
  7184  0035C4  6ED9               	movwf	fsr2l,c
  7185  0035C6  0101               	movlb	1	; () banked
  7186  0035C8  0E01               	movlw	high _TempBattery_Volt
  7187  0035CA  202A               	addwfc	?___wmul+1,w,c
  7188  0035CC  6EDA               	movwf	fsr2h,c
  7189  0035CE  0100               	movlb	0	; () banked
  7190  0035D0  CFDE F060          	movff	postinc2,?_Battery_Get
  7191  0035D4  0100               	movlb	0	; () banked
  7192  0035D6  CFDE F061          	movff	postinc2,?_Battery_Get+1
  7193  0035DA  0100               	movlb	0	; () banked
  7194  0035DC  CFDD F062          	movff	postdec2,?_Battery_Get+2
  7195  0035E0  0012               	return	
  7196  0035E2                     __end_of_Battery_Get:
  7197                           	opt stack 0
  7198                           tblptru	equ	0xFF8
  7199                           tblptrh	equ	0xFF7
  7200                           tblptrl	equ	0xFF6
  7201                           tablat	equ	0xFF5
  7202                           prodh	equ	0xFF4
  7203                           prodl	equ	0xFF3
  7204                           intcon	equ	0xFF2
  7205                           intcon2	equ	0xFF1
  7206                           postinc0	equ	0xFEE
  7207                           wreg	equ	0xFE8
  7208                           postinc1	equ	0xFE6
  7209                           postdec1	equ	0xFE5
  7210                           fsr1h	equ	0xFE2
  7211                           fsr1l	equ	0xFE1
  7212                           indf2	equ	0xFDF
  7213                           postinc2	equ	0xFDE
  7214                           postdec2	equ	0xFDD
  7215                           fsr2h	equ	0xFDA
  7216                           fsr2l	equ	0xFD9
  7217                           status	equ	0xFD8
  7218                           
  7219 ;; *************** function _Battery_Fault *****************
  7220 ;; Defined at:
  7221 ;;		line 72 in file "Battery.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;		None
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;  i               2   10[BANK0 ] int 
  7226 ;;  fault           1    9[BANK0 ] unsigned char 
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  1    wreg      unsigned char 
  7229 ;; Registers used:
  7230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7236 ;;      Params:         0       0       0       0       0       0       0
  7237 ;;      Locals:         0       3       0       0       0       0       0
  7238 ;;      Temps:          0       0       0       0       0       0       0
  7239 ;;      Totals:         0       3       0       0       0       0       0
  7240 ;;Total ram usage:        3 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; Hardware stack levels required when called:    5
  7243 ;; This function calls:
  7244 ;;		___ftge
  7245 ;;		___wmul
  7246 ;; This function is called by:
  7247 ;;		_main
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           	psect	text32
  7252  002DB8                     __ptext32:
  7253                           	opt stack 0
  7254  002DB8                     _Battery_Fault:
  7255                           	opt stack 25
  7256                           
  7257                           ;Battery.c: 74: char fault = 0;
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;incstack = 0
  7261  002DB8  0E00               	movlw	0
  7262  002DBA  0100               	movlb	0	; () banked
  7263  002DBC  6F69               	movwf	Battery_Fault@fault& (0+255),b
  7264                           
  7265                           ;Battery.c: 75: for(int i = 0;i<9;i++)
  7266  002DBE  0E00               	movlw	0
  7267  002DC0  0100               	movlb	0	; () banked
  7268  002DC2  6F6B               	movwf	(Battery_Fault@i+1)& (0+255),b
  7269  002DC4  0E00               	movlw	0
  7270  002DC6  0100               	movlb	0	; () banked
  7271  002DC8  6F6A               	movwf	Battery_Fault@i& (0+255),b
  7272  002DCA                     
  7273                           ; BSR set to: 0
  7274  002DCA  0100               	movlb	0	; () banked
  7275  002DCC  516B               	movf	(Battery_Fault@i+1)& (0+255),w,b
  7276  002DCE  0A80               	xorlw	128
  7277  002DD0  0F80               	addlw	-128
  7278  002DD2  0E09               	movlw	9
  7279  002DD4  B4D8               	btfsc	status,2,c
  7280  002DD6  5D6A               	subwf	Battery_Fault@i& (0+255),w,b
  7281  002DD8  B0D8               	btfsc	status,0,c
  7282  002DDA  0012               	return	
  7283                           
  7284                           ; BSR set to: 0
  7285                           ;Battery.c: 76: {
  7286                           ;Battery.c: 77: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  7287                           
  7288                           ; BSR set to: 0
  7289                           
  7290                           ; BSR set to: 0
  7291  002DDC  0E00               	movlw	0
  7292  002DDE  0100               	movlb	0	; () banked
  7293  002DE0  6F60               	movwf	___ftge@ff1& (0+255),b
  7294  002DE2  0E40               	movlw	64
  7295  002DE4  0100               	movlb	0	; () banked
  7296  002DE6  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  7297  002DE8  0E40               	movlw	64
  7298  002DEA  0100               	movlb	0	; () banked
  7299  002DEC  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  7300  002DEE  C06A  F029         	movff	Battery_Fault@i,___wmul@multiplier
  7301  002DF2  C06B  F02A         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  7302  002DF6  0E00               	movlw	0
  7303  002DF8  6E2C               	movwf	___wmul@multiplicand+1,c
  7304  002DFA  0E03               	movlw	3
  7305  002DFC  6E2B               	movwf	___wmul@multiplicand,c
  7306  002DFE  EC62  F01B         	call	___wmul	;wreg free
  7307  002E02  0101               	movlb	1	; () banked
  7308  002E04  0E32               	movlw	low _Battery_Volt
  7309  002E06  2429               	addwf	?___wmul,w,c
  7310  002E08  6ED9               	movwf	fsr2l,c
  7311  002E0A  0101               	movlb	1	; () banked
  7312  002E0C  0E01               	movlw	high _Battery_Volt
  7313  002E0E  202A               	addwfc	?___wmul+1,w,c
  7314  002E10  6EDA               	movwf	fsr2h,c
  7315  002E12  0100               	movlb	0	; () banked
  7316  002E14  CFDE F063          	movff	postinc2,___ftge@ff2
  7317  002E18  0100               	movlb	0	; () banked
  7318  002E1A  CFDE F064          	movff	postinc2,___ftge@ff2+1
  7319  002E1E  0100               	movlb	0	; () banked
  7320  002E20  CFDD F065          	movff	postdec2,___ftge@ff2+2
  7321  002E24  EC72  F016         	call	___ftge	;wreg free
  7322  002E28  B0D8               	btfsc	status,0,c
  7323  002E2A  D02B               	goto	l4890
  7324  002E2C  C06A  F029         	movff	Battery_Fault@i,___wmul@multiplier
  7325  002E30  C06B  F02A         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  7326  002E34  0E00               	movlw	0
  7327  002E36  6E2C               	movwf	___wmul@multiplicand+1,c
  7328  002E38  0E03               	movlw	3
  7329  002E3A  6E2B               	movwf	___wmul@multiplicand,c
  7330  002E3C  EC62  F01B         	call	___wmul	;wreg free
  7331  002E40  0101               	movlb	1	; () banked
  7332  002E42  0E32               	movlw	low _Battery_Volt
  7333  002E44  2429               	addwf	?___wmul,w,c
  7334  002E46  6ED9               	movwf	fsr2l,c
  7335  002E48  0101               	movlb	1	; () banked
  7336  002E4A  0E01               	movlw	high _Battery_Volt
  7337  002E4C  202A               	addwfc	?___wmul+1,w,c
  7338  002E4E  6EDA               	movwf	fsr2h,c
  7339  002E50  0100               	movlb	0	; () banked
  7340  002E52  CFDE F060          	movff	postinc2,___ftge@ff1
  7341  002E56  0100               	movlb	0	; () banked
  7342  002E58  CFDE F061          	movff	postinc2,___ftge@ff1+1
  7343  002E5C  0100               	movlb	0	; () banked
  7344  002E5E  CFDD F062          	movff	postdec2,___ftge@ff1+2
  7345  002E62  0EB8               	movlw	184
  7346  002E64  0100               	movlb	0	; () banked
  7347  002E66  6F63               	movwf	___ftge@ff2& (0+255),b
  7348  002E68  0E86               	movlw	134
  7349  002E6A  0100               	movlb	0	; () banked
  7350  002E6C  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  7351  002E6E  0E40               	movlw	64
  7352  002E70  0100               	movlb	0	; () banked
  7353  002E72  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  7354  002E74  EC72  F016         	call	___ftge	;wreg free
  7355  002E78  B0D8               	btfsc	status,0,c
  7356  002E7A  D003               	goto	l4890
  7357                           
  7358                           ;Battery.c: 78: {
  7359                           ;Battery.c: 79: fault = 1;
  7360  002E7C  0E01               	movlw	1
  7361  002E7E  0100               	movlb	0	; () banked
  7362  002E80  6F69               	movwf	Battery_Fault@fault& (0+255),b
  7363  002E82                     l4890:
  7364  002E82  0100               	movlb	0	; () banked
  7365  002E84  4B6A               	infsnz	Battery_Fault@i& (0+255),f,b
  7366  002E86  2B6B               	incf	(Battery_Fault@i+1)& (0+255),f,b
  7367  002E88  D7A0               	goto	L10
  7368  002E8A                     __end_of_Battery_Fault:
  7369                           	opt stack 0
  7370                           tblptru	equ	0xFF8
  7371                           tblptrh	equ	0xFF7
  7372                           tblptrl	equ	0xFF6
  7373                           tablat	equ	0xFF5
  7374                           prodh	equ	0xFF4
  7375                           prodl	equ	0xFF3
  7376                           intcon	equ	0xFF2
  7377                           intcon2	equ	0xFF1
  7378                           postinc0	equ	0xFEE
  7379                           wreg	equ	0xFE8
  7380                           postinc1	equ	0xFE6
  7381                           postdec1	equ	0xFE5
  7382                           fsr1h	equ	0xFE2
  7383                           fsr1l	equ	0xFE1
  7384                           indf2	equ	0xFDF
  7385                           postinc2	equ	0xFDE
  7386                           postdec2	equ	0xFDD
  7387                           fsr2h	equ	0xFDA
  7388                           fsr2l	equ	0xFD9
  7389                           status	equ	0xFD8
  7390                           
  7391 ;; *************** function ___ftge *****************
  7392 ;; Defined at:
  7393 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;  ff1             3    0[BANK0 ] float 
  7396 ;;  ff2             3    3[BANK0 ] float 
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;		None
  7399 ;; Return value:  Size  Location     Type
  7400 ;;		None               void
  7401 ;; Registers used:
  7402 ;;		wreg, status,2, status,0
  7403 ;; Tracked objects:
  7404 ;;		On entry : 0/0
  7405 ;;		On exit  : 0/0
  7406 ;;		Unchanged: 0/0
  7407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7408 ;;      Params:         0       6       0       0       0       0       0
  7409 ;;      Locals:         0       0       0       0       0       0       0
  7410 ;;      Temps:          0       3       0       0       0       0       0
  7411 ;;      Totals:         0       9       0       0       0       0       0
  7412 ;;Total ram usage:        9 bytes
  7413 ;; Hardware stack levels used:    1
  7414 ;; Hardware stack levels required when called:    4
  7415 ;; This function calls:
  7416 ;;		Nothing
  7417 ;; This function is called by:
  7418 ;;		_Battery_Fault
  7419 ;;		_Temp_Fault
  7420 ;;		_printf
  7421 ;;		_RunBypas
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           	psect	text33
  7426  002CE4                     __ptext33:
  7427                           	opt stack 0
  7428  002CE4                     ___ftge:
  7429                           	opt stack 25
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;incstack = 0
  7433  002CE4  0100               	movlb	0	; () banked
  7434  002CE6  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  7435  002CE8  D020               	goto	l4754
  7436                           
  7437                           ; BSR set to: 0
  7438  002CEA  0100               	movlb	0	; () banked
  7439  002CEC  C060  F066         	movff	___ftge@ff1,??___ftge
  7440  002CF0  0100               	movlb	0	; () banked
  7441  002CF2  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  7442  002CF6  0100               	movlb	0	; () banked
  7443  002CF8  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  7444  002CFC  0100               	movlb	0	; () banked
  7445  002CFE  1F66               	comf	??___ftge& (0+255),f,b
  7446  002D00  1F67               	comf	(??___ftge+1)& (0+255),f,b
  7447  002D02  1F68               	comf	(??___ftge+2)& (0+255),f,b
  7448  002D04  2B66               	incf	??___ftge& (0+255),f,b
  7449  002D06  0E00               	movlw	0
  7450  002D08  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  7451  002D0A  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  7452  002D0C  0E00               	movlw	0
  7453  002D0E  0100               	movlb	0	; () banked
  7454  002D10  2566               	addwf	??___ftge& (0+255),w,b
  7455  002D12  0100               	movlb	0	; () banked
  7456  002D14  6F60               	movwf	___ftge@ff1& (0+255),b
  7457  002D16  0E00               	movlw	0
  7458  002D18  0100               	movlb	0	; () banked
  7459  002D1A  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  7460  002D1C  0100               	movlb	0	; () banked
  7461  002D1E  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  7462  002D20  0E80               	movlw	128
  7463  002D22  0100               	movlb	0	; () banked
  7464  002D24  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  7465  002D26  0100               	movlb	0	; () banked
  7466  002D28  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  7467  002D2A                     l4754:
  7468                           
  7469                           ; BSR set to: 0
  7470  002D2A  0100               	movlb	0	; () banked
  7471  002D2C  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  7472  002D2E  D020               	goto	l4758
  7473                           
  7474                           ; BSR set to: 0
  7475  002D30  0100               	movlb	0	; () banked
  7476  002D32  C063  F066         	movff	___ftge@ff2,??___ftge
  7477  002D36  0100               	movlb	0	; () banked
  7478  002D38  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  7479  002D3C  0100               	movlb	0	; () banked
  7480  002D3E  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  7481  002D42  0100               	movlb	0	; () banked
  7482  002D44  1F66               	comf	??___ftge& (0+255),f,b
  7483  002D46  1F67               	comf	(??___ftge+1)& (0+255),f,b
  7484  002D48  1F68               	comf	(??___ftge+2)& (0+255),f,b
  7485  002D4A  2B66               	incf	??___ftge& (0+255),f,b
  7486  002D4C  0E00               	movlw	0
  7487  002D4E  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  7488  002D50  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  7489  002D52  0E00               	movlw	0
  7490  002D54  0100               	movlb	0	; () banked
  7491  002D56  2566               	addwf	??___ftge& (0+255),w,b
  7492  002D58  0100               	movlb	0	; () banked
  7493  002D5A  6F63               	movwf	___ftge@ff2& (0+255),b
  7494  002D5C  0E00               	movlw	0
  7495  002D5E  0100               	movlb	0	; () banked
  7496  002D60  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  7497  002D62  0100               	movlb	0	; () banked
  7498  002D64  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  7499  002D66  0E80               	movlw	128
  7500  002D68  0100               	movlb	0	; () banked
  7501  002D6A  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  7502  002D6C  0100               	movlb	0	; () banked
  7503  002D6E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  7504  002D70                     l4758:
  7505                           
  7506                           ; BSR set to: 0
  7507  002D70  0E00               	movlw	0
  7508  002D72  0100               	movlb	0	; () banked
  7509  002D74  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  7510  002D76  0E00               	movlw	0
  7511  002D78  0100               	movlb	0	; () banked
  7512  002D7A  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  7513  002D7C  0E80               	movlw	128
  7514  002D7E  0100               	movlb	0	; () banked
  7515  002D80  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  7516                           
  7517                           ; BSR set to: 0
  7518  002D82  0E00               	movlw	0
  7519  002D84  0100               	movlb	0	; () banked
  7520  002D86  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  7521  002D88  0E00               	movlw	0
  7522  002D8A  0100               	movlb	0	; () banked
  7523  002D8C  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  7524  002D8E  0E80               	movlw	128
  7525  002D90  0100               	movlb	0	; () banked
  7526  002D92  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  7527  002D94  0100               	movlb	0	; () banked
  7528  002D96  5163               	movf	___ftge@ff2& (0+255),w,b
  7529  002D98  0100               	movlb	0	; () banked
  7530  002D9A  5D60               	subwf	___ftge@ff1& (0+255),w,b
  7531  002D9C  0100               	movlb	0	; () banked
  7532  002D9E  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  7533  002DA0  0100               	movlb	0	; () banked
  7534  002DA2  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  7535  002DA4  0100               	movlb	0	; () banked
  7536  002DA6  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  7537  002DA8  0100               	movlb	0	; () banked
  7538  002DAA  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  7539  002DAC  B0D8               	btfsc	status,0,c
  7540  002DAE  D002               	goto	l4764
  7541                           
  7542                           ; BSR set to: 0
  7543  002DB0  90D8               	bcf	status,0,c
  7544  002DB2  0012               	return	
  7545  002DB4                     l4764:
  7546                           
  7547                           ; BSR set to: 0
  7548  002DB4  80D8               	bsf	status,0,c
  7549  002DB6  0012               	return	
  7550  002DB8                     __end_of___ftge:
  7551                           	opt stack 0
  7552                           tblptru	equ	0xFF8
  7553                           tblptrh	equ	0xFF7
  7554                           tblptrl	equ	0xFF6
  7555                           tablat	equ	0xFF5
  7556                           prodh	equ	0xFF4
  7557                           prodl	equ	0xFF3
  7558                           intcon	equ	0xFF2
  7559                           intcon2	equ	0xFF1
  7560                           postinc0	equ	0xFEE
  7561                           wreg	equ	0xFE8
  7562                           postinc1	equ	0xFE6
  7563                           postdec1	equ	0xFE5
  7564                           fsr1h	equ	0xFE2
  7565                           fsr1l	equ	0xFE1
  7566                           indf2	equ	0xFDF
  7567                           postinc2	equ	0xFDE
  7568                           postdec2	equ	0xFDD
  7569                           fsr2h	equ	0xFDA
  7570                           fsr2l	equ	0xFD9
  7571                           status	equ	0xFD8
  7572                           
  7573 ;; *************** function _Battery_Convert *****************
  7574 ;; Defined at:
  7575 ;;		line 34 in file "Battery.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;		None
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;  x               2   51[BANK0 ] int 
  7580 ;; Return value:  Size  Location     Type
  7581 ;;		None               void
  7582 ;; Registers used:
  7583 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7584 ;; Tracked objects:
  7585 ;;		On entry : 0/0
  7586 ;;		On exit  : 0/0
  7587 ;;		Unchanged: 0/0
  7588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7589 ;;      Params:         0       0       0       0       0       0       0
  7590 ;;      Locals:         0       2       0       0       0       0       0
  7591 ;;      Temps:          0       2       0       0       0       0       0
  7592 ;;      Totals:         0       4       0       0       0       0       0
  7593 ;;Total ram usage:        4 bytes
  7594 ;; Hardware stack levels used:    1
  7595 ;; Hardware stack levels required when called:    6
  7596 ;; This function calls:
  7597 ;;		___altoft
  7598 ;;		___ftadd
  7599 ;;		___ftdiv
  7600 ;;		___ftmul
  7601 ;;		___wmul
  7602 ;; This function is called by:
  7603 ;;		_main
  7604 ;; This function uses a non-reentrant model
  7605 ;;
  7606                           
  7607                           	psect	text34
  7608  002AF6                     __ptext34:
  7609                           	opt stack 0
  7610  002AF6                     _Battery_Convert:
  7611                           	opt stack 24
  7612                           
  7613                           ;Battery.c: 36: int x;
  7614                           ;Battery.c: 37: for(x = 0; x < 10; x++)
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;incstack = 0
  7618  002AF6  0E00               	movlw	0
  7619  002AF8  0100               	movlb	0	; () banked
  7620  002AFA  6F94               	movwf	(Battery_Convert@x+1)& (0+255),b
  7621  002AFC  0E00               	movlw	0
  7622  002AFE  0100               	movlb	0	; () banked
  7623  002B00  6F93               	movwf	Battery_Convert@x& (0+255),b
  7624  002B02                     
  7625                           ; BSR set to: 0
  7626  002B02  0100               	movlb	0	; () banked
  7627  002B04  5194               	movf	(Battery_Convert@x+1)& (0+255),w,b
  7628  002B06  0A80               	xorlw	128
  7629  002B08  0F80               	addlw	-128
  7630  002B0A  0E0A               	movlw	10
  7631  002B0C  B4D8               	btfsc	status,2,c
  7632  002B0E  5D93               	subwf	Battery_Convert@x& (0+255),w,b
  7633  002B10  B0D8               	btfsc	status,0,c
  7634  002B12  0012               	return	
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;Battery.c: 38: {
  7638                           ;Battery.c: 39: TempBattery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0) + 2.34;
  7639                           
  7640                           ; BSR set to: 0
  7641                           
  7642                           ; BSR set to: 0
  7643  002B14  C093  F029         	movff	Battery_Convert@x,___wmul@multiplier
  7644  002B18  C094  F02A         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  7645  002B1C  0E00               	movlw	0
  7646  002B1E  6E2C               	movwf	___wmul@multiplicand+1,c
  7647  002B20  0E03               	movlw	3
  7648  002B22  6E2B               	movwf	___wmul@multiplicand,c
  7649  002B24  EC62  F01B         	call	___wmul	;wreg free
  7650  002B28  0101               	movlb	1	; () banked
  7651  002B2A  0EAA               	movlw	low _TempBattery_Volt
  7652  002B2C  2429               	addwf	?___wmul,w,c
  7653  002B2E  6ED9               	movwf	fsr2l,c
  7654  002B30  0101               	movlb	1	; () banked
  7655  002B32  0E01               	movlw	high _TempBattery_Volt
  7656  002B34  202A               	addwfc	?___wmul+1,w,c
  7657  002B36  6EDA               	movwf	fsr2h,c
  7658  002B38  0E00               	movlw	0
  7659  002B3A  0100               	movlb	0	; () banked
  7660  002B3C  6F6F               	movwf	___ftmul@f2& (0+255),b
  7661  002B3E  0EA0               	movlw	160
  7662  002B40  0100               	movlb	0	; () banked
  7663  002B42  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  7664  002B44  0E40               	movlw	64
  7665  002B46  0100               	movlb	0	; () banked
  7666  002B48  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  7667  002B4A  0E00               	movlw	0
  7668  002B4C  0100               	movlb	0	; () banked
  7669  002B4E  6F63               	movwf	___ftdiv@f2& (0+255),b
  7670  002B50  0E80               	movlw	128
  7671  002B52  0100               	movlb	0	; () banked
  7672  002B54  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  7673  002B56  0E44               	movlw	68
  7674  002B58  0100               	movlb	0	; () banked
  7675  002B5A  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  7676  002B5C  0EB6               	movlw	low _Battery_Adc
  7677  002B5E  0100               	movlb	0	; () banked
  7678  002B60  6F91               	movwf	??_Battery_Convert& (0+255),b
  7679  002B62  0E00               	movlw	high _Battery_Adc
  7680  002B64  6F92               	movwf	(??_Battery_Convert+1)& (0+255),b
  7681  002B66  90D8               	bcf	status,0,c
  7682  002B68  0100               	movlb	0	; () banked
  7683  002B6A  3593               	rlcf	Battery_Convert@x& (0+255),w,b
  7684  002B6C  6EE1               	movwf	fsr1l,c
  7685  002B6E  0100               	movlb	0	; () banked
  7686  002B70  3594               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  7687  002B72  6EE2               	movwf	fsr1h,c
  7688  002B74  90D8               	bcf	status,0,c
  7689  002B76  36E1               	rlcf	fsr1l,f,c
  7690  002B78  36E2               	rlcf	fsr1h,f,c
  7691  002B7A  0100               	movlb	0	; () banked
  7692  002B7C  5191               	movf	??_Battery_Convert& (0+255),w,b
  7693  002B7E  26E1               	addwf	fsr1l,f,c
  7694  002B80  0100               	movlb	0	; () banked
  7695  002B82  5192               	movf	(??_Battery_Convert+1)& (0+255),w,b
  7696  002B84  22E2               	addwfc	fsr1h,f,c
  7697  002B86  CFE6 F023          	movff	postinc1,___altoft@c
  7698  002B8A  CFE6 F024          	movff	postinc1,___altoft@c+1
  7699  002B8E  CFE6 F025          	movff	postinc1,___altoft@c+2
  7700  002B92  CFE6 F026          	movff	postinc1,___altoft@c+3
  7701  002B96  ECD8  F018         	call	___altoft	;wreg free
  7702  002B9A  C023  F060         	movff	?___altoft,___ftdiv@f1
  7703  002B9E  C024  F061         	movff	?___altoft+1,___ftdiv@f1+1
  7704  002BA2  C025  F062         	movff	?___altoft+2,___ftdiv@f1+2
  7705  002BA6  EC3C  F014         	call	___ftdiv	;wreg free
  7706  002BAA  C060  F06C         	movff	?___ftdiv,___ftmul@f1
  7707  002BAE  C061  F06D         	movff	?___ftdiv+1,___ftmul@f1+1
  7708  002BB2  C062  F06E         	movff	?___ftdiv+2,___ftmul@f1+2
  7709  002BB6  EC16  F012         	call	___ftmul	;wreg free
  7710  002BBA  C06C  F085         	movff	?___ftmul,___ftadd@f1
  7711  002BBE  C06D  F086         	movff	?___ftmul+1,___ftadd@f1+1
  7712  002BC2  C06E  F087         	movff	?___ftmul+2,___ftadd@f1+2
  7713  002BC6  0EC3               	movlw	195
  7714  002BC8  0100               	movlb	0	; () banked
  7715  002BCA  6F88               	movwf	___ftadd@f2& (0+255),b
  7716  002BCC  0E15               	movlw	21
  7717  002BCE  0100               	movlb	0	; () banked
  7718  002BD0  6F89               	movwf	(___ftadd@f2+1)& (0+255),b
  7719  002BD2  0E40               	movlw	64
  7720  002BD4  0100               	movlb	0	; () banked
  7721  002BD6  6F8A               	movwf	(___ftadd@f2+2)& (0+255),b
  7722  002BD8  EC4A  F00E         	call	___ftadd	;wreg free
  7723  002BDC  C085  FFDE         	movff	?___ftadd,postinc2
  7724  002BE0  C086  FFDE         	movff	?___ftadd+1,postinc2
  7725  002BE4  C087  FFDD         	movff	?___ftadd+2,postdec2
  7726  002BE8  52DD               	movf	postdec2,f,c
  7727  002BEA  0100               	movlb	0	; () banked
  7728  002BEC  4B93               	infsnz	Battery_Convert@x& (0+255),f,b
  7729  002BEE  2B94               	incf	(Battery_Convert@x+1)& (0+255),f,b
  7730  002BF0  D788               	goto	L11
  7731  002BF2                     __end_of_Battery_Convert:
  7732                           	opt stack 0
  7733                           tblptru	equ	0xFF8
  7734                           tblptrh	equ	0xFF7
  7735                           tblptrl	equ	0xFF6
  7736                           tablat	equ	0xFF5
  7737                           prodh	equ	0xFF4
  7738                           prodl	equ	0xFF3
  7739                           intcon	equ	0xFF2
  7740                           intcon2	equ	0xFF1
  7741                           postinc0	equ	0xFEE
  7742                           wreg	equ	0xFE8
  7743                           postinc1	equ	0xFE6
  7744                           postdec1	equ	0xFE5
  7745                           fsr1h	equ	0xFE2
  7746                           fsr1l	equ	0xFE1
  7747                           indf2	equ	0xFDF
  7748                           postinc2	equ	0xFDE
  7749                           postdec2	equ	0xFDD
  7750                           fsr2h	equ	0xFDA
  7751                           fsr2l	equ	0xFD9
  7752                           status	equ	0xFD8
  7753                           
  7754 ;; *************** function ___wmul *****************
  7755 ;; Defined at:
  7756 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;  multiplier      2   40[COMRAM] unsigned int 
  7759 ;;  multiplicand    2   42[COMRAM] unsigned int 
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;  product         2   44[COMRAM] unsigned int 
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  2   40[COMRAM] unsigned int 
  7764 ;; Registers used:
  7765 ;;		wreg, status,2, status,0, prodl, prodh
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7771 ;;      Params:         4       0       0       0       0       0       0
  7772 ;;      Locals:         2       0       0       0       0       0       0
  7773 ;;      Temps:          0       0       0       0       0       0       0
  7774 ;;      Totals:         6       0       0       0       0       0       0
  7775 ;;Total ram usage:        6 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; Hardware stack levels required when called:    4
  7778 ;; This function calls:
  7779 ;;		Nothing
  7780 ;; This function is called by:
  7781 ;;		_Battery_Convert
  7782 ;;		_Battery_Fault
  7783 ;;		_Battery_Get
  7784 ;;		_Temp_Fault
  7785 ;;		_Temp_Filter
  7786 ;;		_Temp_Convert
  7787 ;;		_fround
  7788 ;;		_scale
  7789 ;;		_printf
  7790 ;;		_eval_poly
  7791 ;;		_Battery_Filter
  7792 ;;		_Tempeture_Get
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text35
  7797  0036C4                     __ptext35:
  7798                           	opt stack 0
  7799  0036C4                     ___wmul:
  7800                           	opt stack 24
  7801                           
  7802                           ; BSR set to: 0
  7803                           ;incstack = 0
  7804  0036C4  5029               	movf	___wmul@multiplier,w,c
  7805  0036C6  022B               	mulwf	___wmul@multiplicand,c
  7806  0036C8  CFF3 F02D          	movff	prodl,___wmul@product
  7807  0036CC  CFF4 F02E          	movff	prodh,___wmul@product+1
  7808  0036D0  5029               	movf	___wmul@multiplier,w,c
  7809  0036D2  022C               	mulwf	___wmul@multiplicand+1,c
  7810  0036D4  50F3               	movf	prodl,w,c
  7811  0036D6  262E               	addwf	___wmul@product+1,f,c
  7812  0036D8  502A               	movf	___wmul@multiplier+1,w,c
  7813  0036DA  022B               	mulwf	___wmul@multiplicand,c
  7814  0036DC  50F3               	movf	prodl,w,c
  7815  0036DE  262E               	addwf	___wmul@product+1,f,c
  7816  0036E0  C02D  F029         	movff	___wmul@product,?___wmul
  7817  0036E4  C02E  F02A         	movff	___wmul@product+1,?___wmul+1
  7818  0036E8  0012               	return	
  7819  0036EA                     __end_of___wmul:
  7820                           	opt stack 0
  7821                           tblptru	equ	0xFF8
  7822                           tblptrh	equ	0xFF7
  7823                           tblptrl	equ	0xFF6
  7824                           tablat	equ	0xFF5
  7825                           prodh	equ	0xFF4
  7826                           prodl	equ	0xFF3
  7827                           intcon	equ	0xFF2
  7828                           intcon2	equ	0xFF1
  7829                           postinc0	equ	0xFEE
  7830                           wreg	equ	0xFE8
  7831                           postinc1	equ	0xFE6
  7832                           postdec1	equ	0xFE5
  7833                           fsr1h	equ	0xFE2
  7834                           fsr1l	equ	0xFE1
  7835                           indf2	equ	0xFDF
  7836                           postinc2	equ	0xFDE
  7837                           postdec2	equ	0xFDD
  7838                           fsr2h	equ	0xFDA
  7839                           fsr2l	equ	0xFD9
  7840                           status	equ	0xFD8
  7841                           
  7842 ;; *************** function ___ftmul *****************
  7843 ;; Defined at:
  7844 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  7845 ;; Parameters:    Size  Location     Type
  7846 ;;  f1              3   12[BANK0 ] float 
  7847 ;;  f2              3   15[BANK0 ] float 
  7848 ;; Auto vars:     Size  Location     Type
  7849 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  7850 ;;  sign            1   26[BANK0 ] unsigned char 
  7851 ;;  cntr            1   25[BANK0 ] unsigned char 
  7852 ;;  exp             1   21[BANK0 ] unsigned char 
  7853 ;; Return value:  Size  Location     Type
  7854 ;;                  3   12[BANK0 ] float 
  7855 ;; Registers used:
  7856 ;;		wreg, status,2, status,0, cstack
  7857 ;; Tracked objects:
  7858 ;;		On entry : 0/0
  7859 ;;		On exit  : 0/0
  7860 ;;		Unchanged: 0/0
  7861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7862 ;;      Params:         0       6       0       0       0       0       0
  7863 ;;      Locals:         0       6       0       0       0       0       0
  7864 ;;      Temps:          0       3       0       0       0       0       0
  7865 ;;      Totals:         0      15       0       0       0       0       0
  7866 ;;Total ram usage:       15 bytes
  7867 ;; Hardware stack levels used:    1
  7868 ;; Hardware stack levels required when called:    5
  7869 ;; This function calls:
  7870 ;;		___ftpack
  7871 ;; This function is called by:
  7872 ;;		_Battery_Convert
  7873 ;;		_Temp_Filter
  7874 ;;		_Temp_Convert
  7875 ;;		_fround
  7876 ;;		_scale
  7877 ;;		_printf
  7878 ;;		_log
  7879 ;;		_eval_poly
  7880 ;;		_Battery_Filter
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           	psect	text36
  7885  00242C                     __ptext36:
  7886                           	opt stack 0
  7887  00242C                     ___ftmul:
  7888                           	opt stack 23
  7889                           
  7890                           ;incstack = 0
  7891  00242C  0100               	movlb	0	; () banked
  7892  00242E  C06E  F072         	movff	___ftmul@f1+2,??___ftmul
  7893  002432  0100               	movlb	0	; () banked
  7894  002434  6B73               	clrf	(??___ftmul+1)& (0+255),b
  7895  002436  6B74               	clrf	(??___ftmul+2)& (0+255),b
  7896  002438  0100               	movlb	0	; () banked
  7897  00243A  356D               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7898  00243C  0100               	movlb	0	; () banked
  7899  00243E  3772               	rlcf	??___ftmul& (0+255),f,b
  7900  002440  E301               	bnc	u4161
  7901  002442  8173               	bsf	(??___ftmul+1)& (0+255),0,b
  7902  002444                     u4161:
  7903  002444  0100               	movlb	0	; () banked
  7904  002446  5172               	movf	??___ftmul& (0+255),w,b
  7905  002448  0100               	movlb	0	; () banked
  7906  00244A  6F75               	movwf	___ftmul@exp& (0+255),b
  7907  00244C  0100               	movlb	0	; () banked
  7908  00244E  6775               	tstfsz	___ftmul@exp& (0+255),b
  7909  002450  D00A               	goto	l4304
  7910                           
  7911                           ; BSR set to: 0
  7912  002452  0E00               	movlw	0
  7913  002454  0100               	movlb	0	; () banked
  7914  002456  6F6C               	movwf	?___ftmul& (0+255),b
  7915  002458  0E00               	movlw	0
  7916  00245A  0100               	movlb	0	; () banked
  7917  00245C  6F6D               	movwf	(?___ftmul+1)& (0+255),b
  7918  00245E  0E00               	movlw	0
  7919  002460  0100               	movlb	0	; () banked
  7920  002462  6F6E               	movwf	(?___ftmul+2)& (0+255),b
  7921  002464  0012               	return	
  7922  002466                     l4304:
  7923                           
  7924                           ; BSR set to: 0
  7925  002466  0100               	movlb	0	; () banked
  7926  002468  C071  F072         	movff	___ftmul@f2+2,??___ftmul
  7927  00246C  0100               	movlb	0	; () banked
  7928  00246E  6B73               	clrf	(??___ftmul+1)& (0+255),b
  7929  002470  6B74               	clrf	(??___ftmul+2)& (0+255),b
  7930  002472  0100               	movlb	0	; () banked
  7931  002474  3570               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7932  002476  0100               	movlb	0	; () banked
  7933  002478  3772               	rlcf	??___ftmul& (0+255),f,b
  7934  00247A  E301               	bnc	u4181
  7935  00247C  8173               	bsf	(??___ftmul+1)& (0+255),0,b
  7936  00247E                     u4181:
  7937  00247E  0100               	movlb	0	; () banked
  7938  002480  5172               	movf	??___ftmul& (0+255),w,b
  7939  002482  0100               	movlb	0	; () banked
  7940  002484  6F7A               	movwf	___ftmul@sign& (0+255),b
  7941  002486  0100               	movlb	0	; () banked
  7942  002488  677A               	tstfsz	___ftmul@sign& (0+255),b
  7943  00248A  D00A               	goto	l4310
  7944                           
  7945                           ; BSR set to: 0
  7946  00248C  0E00               	movlw	0
  7947  00248E  0100               	movlb	0	; () banked
  7948  002490  6F6C               	movwf	?___ftmul& (0+255),b
  7949  002492  0E00               	movlw	0
  7950  002494  0100               	movlb	0	; () banked
  7951  002496  6F6D               	movwf	(?___ftmul+1)& (0+255),b
  7952  002498  0E00               	movlw	0
  7953  00249A  0100               	movlb	0	; () banked
  7954  00249C  6F6E               	movwf	(?___ftmul+2)& (0+255),b
  7955  00249E  0012               	return	
  7956  0024A0                     l4310:
  7957                           
  7958                           ; BSR set to: 0
  7959  0024A0  0100               	movlb	0	; () banked
  7960  0024A2  517A               	movf	___ftmul@sign& (0+255),w,b
  7961  0024A4  0F7B               	addlw	123
  7962  0024A6  0100               	movlb	0	; () banked
  7963  0024A8  2775               	addwf	___ftmul@exp& (0+255),f,b
  7964                           
  7965                           ; BSR set to: 0
  7966  0024AA  C06E  F07A         	movff	___ftmul@f1+2,___ftmul@sign
  7967  0024AE  0100               	movlb	0	; () banked
  7968  0024B0  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
  7969  0024B2  0100               	movlb	0	; () banked
  7970  0024B4  1B7A               	xorwf	___ftmul@sign& (0+255),f,b
  7971  0024B6  0E80               	movlw	128
  7972  0024B8  0100               	movlb	0	; () banked
  7973  0024BA  177A               	andwf	___ftmul@sign& (0+255),f,b
  7974                           
  7975                           ; BSR set to: 0
  7976  0024BC  0100               	movlb	0	; () banked
  7977  0024BE  8F6D               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7978                           
  7979                           ; BSR set to: 0
  7980  0024C0  0100               	movlb	0	; () banked
  7981  0024C2  8F70               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7982                           
  7983                           ; BSR set to: 0
  7984  0024C4  0EFF               	movlw	255
  7985  0024C6  0100               	movlb	0	; () banked
  7986  0024C8  176F               	andwf	___ftmul@f2& (0+255),f,b
  7987  0024CA  0EFF               	movlw	255
  7988  0024CC  0100               	movlb	0	; () banked
  7989  0024CE  1770               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7990  0024D0  0E00               	movlw	0
  7991  0024D2  0100               	movlb	0	; () banked
  7992  0024D4  1771               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7993                           
  7994                           ; BSR set to: 0
  7995  0024D6  0E00               	movlw	0
  7996  0024D8  0100               	movlb	0	; () banked
  7997  0024DA  6F76               	movwf	___ftmul@f3_as_product& (0+255),b
  7998  0024DC  0E00               	movlw	0
  7999  0024DE  0100               	movlb	0	; () banked
  8000  0024E0  6F77               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8001  0024E2  0E00               	movlw	0
  8002  0024E4  0100               	movlb	0	; () banked
  8003  0024E6  6F78               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8004                           
  8005                           ; BSR set to: 0
  8006  0024E8  0E07               	movlw	7
  8007  0024EA  0100               	movlb	0	; () banked
  8008  0024EC  6F79               	movwf	___ftmul@cntr& (0+255),b
  8009  0024EE                     l4324:
  8010                           
  8011                           ; BSR set to: 0
  8012  0024EE  0100               	movlb	0	; () banked
  8013  0024F0  A16C               	btfss	___ftmul@f1& (0+255),0,b
  8014  0024F2  D00C               	goto	l4328
  8015                           
  8016                           ; BSR set to: 0
  8017  0024F4  0100               	movlb	0	; () banked
  8018  0024F6  516F               	movf	___ftmul@f2& (0+255),w,b
  8019  0024F8  0100               	movlb	0	; () banked
  8020  0024FA  2776               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8021  0024FC  0100               	movlb	0	; () banked
  8022  0024FE  5170               	movf	(___ftmul@f2+1)& (0+255),w,b
  8023  002500  0100               	movlb	0	; () banked
  8024  002502  2377               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8025  002504  0100               	movlb	0	; () banked
  8026  002506  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
  8027  002508  0100               	movlb	0	; () banked
  8028  00250A  2378               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8029  00250C                     l4328:
  8030                           
  8031                           ; BSR set to: 0
  8032  00250C  0100               	movlb	0	; () banked
  8033  00250E  90D8               	bcf	status,0,c
  8034  002510  0100               	movlb	0	; () banked
  8035  002512  336E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8036  002514  0100               	movlb	0	; () banked
  8037  002516  336D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8038  002518  0100               	movlb	0	; () banked
  8039  00251A  336C               	rrcf	___ftmul@f1& (0+255),f,b
  8040  00251C  0100               	movlb	0	; () banked
  8041  00251E  90D8               	bcf	status,0,c
  8042  002520  0100               	movlb	0	; () banked
  8043  002522  376F               	rlcf	___ftmul@f2& (0+255),f,b
  8044  002524  0100               	movlb	0	; () banked
  8045  002526  3770               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8046  002528  0100               	movlb	0	; () banked
  8047  00252A  3771               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8048                           
  8049                           ; BSR set to: 0
  8050  00252C  0100               	movlb	0	; () banked
  8051  00252E  2F79               	decfsz	___ftmul@cntr& (0+255),f,b
  8052  002530  D7DE               	goto	l4324
  8053                           
  8054                           ; BSR set to: 0
  8055                           
  8056                           ; BSR set to: 0
  8057  002532  0E09               	movlw	9
  8058  002534  0100               	movlb	0	; () banked
  8059  002536  6F79               	movwf	___ftmul@cntr& (0+255),b
  8060  002538                     l4334:
  8061                           
  8062                           ; BSR set to: 0
  8063  002538  0100               	movlb	0	; () banked
  8064  00253A  A16C               	btfss	___ftmul@f1& (0+255),0,b
  8065  00253C  D00C               	goto	l4338
  8066                           
  8067                           ; BSR set to: 0
  8068  00253E  0100               	movlb	0	; () banked
  8069  002540  516F               	movf	___ftmul@f2& (0+255),w,b
  8070  002542  0100               	movlb	0	; () banked
  8071  002544  2776               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8072  002546  0100               	movlb	0	; () banked
  8073  002548  5170               	movf	(___ftmul@f2+1)& (0+255),w,b
  8074  00254A  0100               	movlb	0	; () banked
  8075  00254C  2377               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8076  00254E  0100               	movlb	0	; () banked
  8077  002550  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
  8078  002552  0100               	movlb	0	; () banked
  8079  002554  2378               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8080  002556                     l4338:
  8081                           
  8082                           ; BSR set to: 0
  8083  002556  0100               	movlb	0	; () banked
  8084  002558  90D8               	bcf	status,0,c
  8085  00255A  0100               	movlb	0	; () banked
  8086  00255C  336E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8087  00255E  0100               	movlb	0	; () banked
  8088  002560  336D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8089  002562  0100               	movlb	0	; () banked
  8090  002564  336C               	rrcf	___ftmul@f1& (0+255),f,b
  8091  002566  0100               	movlb	0	; () banked
  8092  002568  90D8               	bcf	status,0,c
  8093  00256A  0100               	movlb	0	; () banked
  8094  00256C  3378               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8095  00256E  0100               	movlb	0	; () banked
  8096  002570  3377               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8097  002572  0100               	movlb	0	; () banked
  8098  002574  3376               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8099                           
  8100                           ; BSR set to: 0
  8101  002576  0100               	movlb	0	; () banked
  8102  002578  2F79               	decfsz	___ftmul@cntr& (0+255),f,b
  8103  00257A  D7DE               	goto	l4334
  8104                           
  8105                           ; BSR set to: 0
  8106                           
  8107                           ; BSR set to: 0
  8108  00257C  C076  F01B         	movff	___ftmul@f3_as_product,___ftpack@arg
  8109  002580  C077  F01C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8110  002584  C078  F01D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8111  002588  C075  F01E         	movff	___ftmul@exp,___ftpack@exp
  8112  00258C  C07A  F01F         	movff	___ftmul@sign,___ftpack@sign
  8113  002590  ECA1  F017         	call	___ftpack	;wreg free
  8114  002594  C01B  F06C         	movff	?___ftpack,?___ftmul
  8115  002598  C01C  F06D         	movff	?___ftpack+1,?___ftmul+1
  8116  00259C  C01D  F06E         	movff	?___ftpack+2,?___ftmul+2
  8117  0025A0  0012               	return	
  8118  0025A2                     __end_of___ftmul:
  8119                           	opt stack 0
  8120                           tblptru	equ	0xFF8
  8121                           tblptrh	equ	0xFF7
  8122                           tblptrl	equ	0xFF6
  8123                           tablat	equ	0xFF5
  8124                           prodh	equ	0xFF4
  8125                           prodl	equ	0xFF3
  8126                           intcon	equ	0xFF2
  8127                           intcon2	equ	0xFF1
  8128                           postinc0	equ	0xFEE
  8129                           wreg	equ	0xFE8
  8130                           postinc1	equ	0xFE6
  8131                           postdec1	equ	0xFE5
  8132                           fsr1h	equ	0xFE2
  8133                           fsr1l	equ	0xFE1
  8134                           indf2	equ	0xFDF
  8135                           postinc2	equ	0xFDE
  8136                           postdec2	equ	0xFDD
  8137                           fsr2h	equ	0xFDA
  8138                           fsr2l	equ	0xFD9
  8139                           status	equ	0xFD8
  8140                           
  8141 ;; *************** function ___ftdiv *****************
  8142 ;; Defined at:
  8143 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  8144 ;; Parameters:    Size  Location     Type
  8145 ;;  f1              3    0[BANK0 ] float 
  8146 ;;  f2              3    3[BANK0 ] float 
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;  f3              3    7[BANK0 ] float 
  8149 ;;  sign            1   11[BANK0 ] unsigned char 
  8150 ;;  exp             1   10[BANK0 ] unsigned char 
  8151 ;;  cntr            1    6[BANK0 ] unsigned char 
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  3    0[BANK0 ] float 
  8154 ;; Registers used:
  8155 ;;		wreg, status,2, status,0, cstack
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8161 ;;      Params:         0       6       0       0       0       0       0
  8162 ;;      Locals:         0       6       0       0       0       0       0
  8163 ;;      Temps:          3       0       0       0       0       0       0
  8164 ;;      Totals:         3      12       0       0       0       0       0
  8165 ;;Total ram usage:       15 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    5
  8168 ;; This function calls:
  8169 ;;		___ftpack
  8170 ;; This function is called by:
  8171 ;;		_Battery_Convert
  8172 ;;		_Temp_Convert
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           	psect	text37
  8177  002878                     __ptext37:
  8178                           	opt stack 0
  8179  002878                     ___ftdiv:
  8180                           	opt stack 24
  8181                           
  8182                           ;incstack = 0
  8183  002878  0100               	movlb	0	; () banked
  8184  00287A  C062  F02D         	movff	___ftdiv@f1+2,??___ftdiv
  8185  00287E  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
  8186  002880  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
  8187  002882  0100               	movlb	0	; () banked
  8188  002884  3561               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  8189  002886  362D               	rlcf	??___ftdiv& (0+255),f,c
  8190  002888  E301               	bnc	u4721
  8191  00288A  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
  8192  00288C                     u4721:
  8193  00288C  502D               	movf	??___ftdiv,w,c
  8194  00288E  0100               	movlb	0	; () banked
  8195  002890  6F6A               	movwf	___ftdiv@exp& (0+255),b
  8196  002892  0100               	movlb	0	; () banked
  8197  002894  676A               	tstfsz	___ftdiv@exp& (0+255),b
  8198  002896  D00A               	goto	l4704
  8199                           
  8200                           ; BSR set to: 0
  8201  002898  0E00               	movlw	0
  8202  00289A  0100               	movlb	0	; () banked
  8203  00289C  6F60               	movwf	?___ftdiv& (0+255),b
  8204  00289E  0E00               	movlw	0
  8205  0028A0  0100               	movlb	0	; () banked
  8206  0028A2  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  8207  0028A4  0E00               	movlw	0
  8208  0028A6  0100               	movlb	0	; () banked
  8209  0028A8  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  8210  0028AA  0012               	return	
  8211  0028AC                     l4704:
  8212                           
  8213                           ; BSR set to: 0
  8214  0028AC  0100               	movlb	0	; () banked
  8215  0028AE  C065  F02D         	movff	___ftdiv@f2+2,??___ftdiv
  8216  0028B2  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
  8217  0028B4  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
  8218  0028B6  0100               	movlb	0	; () banked
  8219  0028B8  3564               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  8220  0028BA  362D               	rlcf	??___ftdiv& (0+255),f,c
  8221  0028BC  E301               	bnc	u4741
  8222  0028BE  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
  8223  0028C0                     u4741:
  8224  0028C0  502D               	movf	??___ftdiv,w,c
  8225  0028C2  0100               	movlb	0	; () banked
  8226  0028C4  6F6B               	movwf	___ftdiv@sign& (0+255),b
  8227  0028C6  0100               	movlb	0	; () banked
  8228  0028C8  676B               	tstfsz	___ftdiv@sign& (0+255),b
  8229  0028CA  D00A               	goto	l4710
  8230                           
  8231                           ; BSR set to: 0
  8232  0028CC  0E00               	movlw	0
  8233  0028CE  0100               	movlb	0	; () banked
  8234  0028D0  6F60               	movwf	?___ftdiv& (0+255),b
  8235  0028D2  0E00               	movlw	0
  8236  0028D4  0100               	movlb	0	; () banked
  8237  0028D6  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  8238  0028D8  0E00               	movlw	0
  8239  0028DA  0100               	movlb	0	; () banked
  8240  0028DC  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  8241  0028DE  0012               	return	
  8242  0028E0                     l4710:
  8243                           
  8244                           ; BSR set to: 0
  8245  0028E0  0E00               	movlw	0
  8246  0028E2  0100               	movlb	0	; () banked
  8247  0028E4  6F67               	movwf	___ftdiv@f3& (0+255),b
  8248  0028E6  0E00               	movlw	0
  8249  0028E8  0100               	movlb	0	; () banked
  8250  0028EA  6F68               	movwf	(___ftdiv@f3+1)& (0+255),b
  8251  0028EC  0E00               	movlw	0
  8252  0028EE  0100               	movlb	0	; () banked
  8253  0028F0  6F69               	movwf	(___ftdiv@f3+2)& (0+255),b
  8254                           
  8255                           ; BSR set to: 0
  8256  0028F2  0100               	movlb	0	; () banked
  8257  0028F4  516B               	movf	___ftdiv@sign& (0+255),w,b
  8258  0028F6  0F89               	addlw	137
  8259  0028F8  0100               	movlb	0	; () banked
  8260  0028FA  5F6A               	subwf	___ftdiv@exp& (0+255),f,b
  8261                           
  8262                           ; BSR set to: 0
  8263  0028FC  C062  F06B         	movff	___ftdiv@f1+2,___ftdiv@sign
  8264                           
  8265                           ; BSR set to: 0
  8266  002900  0100               	movlb	0	; () banked
  8267  002902  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8268  002904  0100               	movlb	0	; () banked
  8269  002906  1B6B               	xorwf	___ftdiv@sign& (0+255),f,b
  8270                           
  8271                           ; BSR set to: 0
  8272  002908  0E80               	movlw	128
  8273  00290A  0100               	movlb	0	; () banked
  8274  00290C  176B               	andwf	___ftdiv@sign& (0+255),f,b
  8275                           
  8276                           ; BSR set to: 0
  8277  00290E  0100               	movlb	0	; () banked
  8278  002910  8F61               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  8279                           
  8280                           ; BSR set to: 0
  8281  002912  0EFF               	movlw	255
  8282  002914  0100               	movlb	0	; () banked
  8283  002916  1760               	andwf	___ftdiv@f1& (0+255),f,b
  8284  002918  0EFF               	movlw	255
  8285  00291A  0100               	movlb	0	; () banked
  8286  00291C  1761               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  8287  00291E  0E00               	movlw	0
  8288  002920  0100               	movlb	0	; () banked
  8289  002922  1762               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  8290                           
  8291                           ; BSR set to: 0
  8292  002924  0100               	movlb	0	; () banked
  8293  002926  8F64               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  8294                           
  8295                           ; BSR set to: 0
  8296  002928  0EFF               	movlw	255
  8297  00292A  0100               	movlb	0	; () banked
  8298  00292C  1763               	andwf	___ftdiv@f2& (0+255),f,b
  8299  00292E  0EFF               	movlw	255
  8300  002930  0100               	movlb	0	; () banked
  8301  002932  1764               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  8302  002934  0E00               	movlw	0
  8303  002936  0100               	movlb	0	; () banked
  8304  002938  1765               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  8305                           
  8306                           ; BSR set to: 0
  8307  00293A  0E18               	movlw	24
  8308  00293C  0100               	movlb	0	; () banked
  8309  00293E  6F66               	movwf	___ftdiv@cntr& (0+255),b
  8310  002940                     l4730:
  8311                           
  8312                           ; BSR set to: 0
  8313  002940  0100               	movlb	0	; () banked
  8314  002942  90D8               	bcf	status,0,c
  8315  002944  0100               	movlb	0	; () banked
  8316  002946  3767               	rlcf	___ftdiv@f3& (0+255),f,b
  8317  002948  0100               	movlb	0	; () banked
  8318  00294A  3768               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  8319  00294C  0100               	movlb	0	; () banked
  8320  00294E  3769               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  8321                           
  8322                           ; BSR set to: 0
  8323  002950  0100               	movlb	0	; () banked
  8324  002952  5163               	movf	___ftdiv@f2& (0+255),w,b
  8325  002954  0100               	movlb	0	; () banked
  8326  002956  5D60               	subwf	___ftdiv@f1& (0+255),w,b
  8327  002958  0100               	movlb	0	; () banked
  8328  00295A  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  8329  00295C  0100               	movlb	0	; () banked
  8330  00295E  5961               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  8331  002960  0100               	movlb	0	; () banked
  8332  002962  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8333  002964  0100               	movlb	0	; () banked
  8334  002966  5962               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  8335  002968  A0D8               	btfss	status,0,c
  8336  00296A  D00E               	goto	l1060
  8337                           
  8338                           ; BSR set to: 0
  8339  00296C  0100               	movlb	0	; () banked
  8340  00296E  5163               	movf	___ftdiv@f2& (0+255),w,b
  8341  002970  0100               	movlb	0	; () banked
  8342  002972  5F60               	subwf	___ftdiv@f1& (0+255),f,b
  8343  002974  0100               	movlb	0	; () banked
  8344  002976  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  8345  002978  0100               	movlb	0	; () banked
  8346  00297A  5B61               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  8347  00297C  0100               	movlb	0	; () banked
  8348  00297E  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8349  002980  0100               	movlb	0	; () banked
  8350  002982  5B62               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  8351                           
  8352                           ; BSR set to: 0
  8353  002984  0100               	movlb	0	; () banked
  8354  002986  8167               	bsf	___ftdiv@f3& (0+255),0,b
  8355  002988                     l1060:
  8356                           
  8357                           ; BSR set to: 0
  8358  002988  0100               	movlb	0	; () banked
  8359  00298A  90D8               	bcf	status,0,c
  8360  00298C  0100               	movlb	0	; () banked
  8361  00298E  3760               	rlcf	___ftdiv@f1& (0+255),f,b
  8362  002990  0100               	movlb	0	; () banked
  8363  002992  3761               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  8364  002994  0100               	movlb	0	; () banked
  8365  002996  3762               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  8366                           
  8367                           ; BSR set to: 0
  8368  002998  0100               	movlb	0	; () banked
  8369  00299A  2F66               	decfsz	___ftdiv@cntr& (0+255),f,b
  8370  00299C  D7D1               	goto	l4730
  8371                           
  8372                           ; BSR set to: 0
  8373                           
  8374                           ; BSR set to: 0
  8375  00299E  C067  F01B         	movff	___ftdiv@f3,___ftpack@arg
  8376  0029A2  C068  F01C         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8377  0029A6  C069  F01D         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8378  0029AA  C06A  F01E         	movff	___ftdiv@exp,___ftpack@exp
  8379  0029AE  C06B  F01F         	movff	___ftdiv@sign,___ftpack@sign
  8380  0029B2  ECA1  F017         	call	___ftpack	;wreg free
  8381  0029B6  C01B  F060         	movff	?___ftpack,?___ftdiv
  8382  0029BA  C01C  F061         	movff	?___ftpack+1,?___ftdiv+1
  8383  0029BE  C01D  F062         	movff	?___ftpack+2,?___ftdiv+2
  8384  0029C2  0012               	return	
  8385  0029C4                     __end_of___ftdiv:
  8386                           	opt stack 0
  8387                           tblptru	equ	0xFF8
  8388                           tblptrh	equ	0xFF7
  8389                           tblptrl	equ	0xFF6
  8390                           tablat	equ	0xFF5
  8391                           prodh	equ	0xFF4
  8392                           prodl	equ	0xFF3
  8393                           intcon	equ	0xFF2
  8394                           intcon2	equ	0xFF1
  8395                           postinc0	equ	0xFEE
  8396                           wreg	equ	0xFE8
  8397                           postinc1	equ	0xFE6
  8398                           postdec1	equ	0xFE5
  8399                           fsr1h	equ	0xFE2
  8400                           fsr1l	equ	0xFE1
  8401                           indf2	equ	0xFDF
  8402                           postinc2	equ	0xFDE
  8403                           postdec2	equ	0xFDD
  8404                           fsr2h	equ	0xFDA
  8405                           fsr2l	equ	0xFD9
  8406                           status	equ	0xFD8
  8407                           
  8408 ;; *************** function ___ftadd *****************
  8409 ;; Defined at:
  8410 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  8411 ;; Parameters:    Size  Location     Type
  8412 ;;  f1              3   37[BANK0 ] float 
  8413 ;;  f2              3   40[BANK0 ] float 
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;  exp1            1   48[BANK0 ] unsigned char 
  8416 ;;  exp2            1   47[BANK0 ] unsigned char 
  8417 ;;  sign            1   46[BANK0 ] unsigned char 
  8418 ;; Return value:  Size  Location     Type
  8419 ;;                  3   37[BANK0 ] float 
  8420 ;; Registers used:
  8421 ;;		wreg, status,2, status,0, cstack
  8422 ;; Tracked objects:
  8423 ;;		On entry : 0/0
  8424 ;;		On exit  : 0/0
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8427 ;;      Params:         0       6       0       0       0       0       0
  8428 ;;      Locals:         0       3       0       0       0       0       0
  8429 ;;      Temps:          0       3       0       0       0       0       0
  8430 ;;      Totals:         0      12       0       0       0       0       0
  8431 ;;Total ram usage:       12 bytes
  8432 ;; Hardware stack levels used:    1
  8433 ;; Hardware stack levels required when called:    5
  8434 ;; This function calls:
  8435 ;;		___ftpack
  8436 ;; This function is called by:
  8437 ;;		_Battery_Convert
  8438 ;;		_Temp_Filter
  8439 ;;		_Temp_Convert
  8440 ;;		_printf
  8441 ;;		___ftsub
  8442 ;;		_log
  8443 ;;		_eval_poly
  8444 ;;		_Battery_Filter
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           	psect	text38
  8449  001C94                     __ptext38:
  8450                           	opt stack 0
  8451  001C94                     ___ftadd:
  8452                           	opt stack 23
  8453                           
  8454                           ;incstack = 0
  8455  001C94  0100               	movlb	0	; () banked
  8456  001C96  C087  F08B         	movff	___ftadd@f1+2,??___ftadd
  8457  001C9A  0100               	movlb	0	; () banked
  8458  001C9C  6B8C               	clrf	(??___ftadd+1)& (0+255),b
  8459  001C9E  6B8D               	clrf	(??___ftadd+2)& (0+255),b
  8460  001CA0  0100               	movlb	0	; () banked
  8461  001CA2  3586               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8462  001CA4  0100               	movlb	0	; () banked
  8463  001CA6  378B               	rlcf	??___ftadd& (0+255),f,b
  8464  001CA8  E301               	bnc	u3951
  8465  001CAA  818C               	bsf	(??___ftadd+1)& (0+255),0,b
  8466  001CAC                     u3951:
  8467  001CAC  0100               	movlb	0	; () banked
  8468  001CAE  518B               	movf	??___ftadd& (0+255),w,b
  8469  001CB0  0100               	movlb	0	; () banked
  8470  001CB2  6F90               	movwf	___ftadd@exp1& (0+255),b
  8471  001CB4  0100               	movlb	0	; () banked
  8472  001CB6  C08A  F08B         	movff	___ftadd@f2+2,??___ftadd
  8473  001CBA  0100               	movlb	0	; () banked
  8474  001CBC  6B8C               	clrf	(??___ftadd+1)& (0+255),b
  8475  001CBE  6B8D               	clrf	(??___ftadd+2)& (0+255),b
  8476  001CC0  0100               	movlb	0	; () banked
  8477  001CC2  3589               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8478  001CC4  0100               	movlb	0	; () banked
  8479  001CC6  378B               	rlcf	??___ftadd& (0+255),f,b
  8480  001CC8  E301               	bnc	u3961
  8481  001CCA  818C               	bsf	(??___ftadd+1)& (0+255),0,b
  8482  001CCC                     u3961:
  8483  001CCC  0100               	movlb	0	; () banked
  8484  001CCE  518B               	movf	??___ftadd& (0+255),w,b
  8485  001CD0  0100               	movlb	0	; () banked
  8486  001CD2  6F8F               	movwf	___ftadd@exp2& (0+255),b
  8487                           
  8488                           ; BSR set to: 0
  8489  001CD4  0100               	movlb	0	; () banked
  8490  001CD6  5190               	movf	___ftadd@exp1& (0+255),w,b
  8491  001CD8  B4D8               	btfsc	status,2,c
  8492  001CDA  D012               	goto	l1025
  8493                           
  8494                           ; BSR set to: 0
  8495  001CDC  0100               	movlb	0	; () banked
  8496  001CDE  518F               	movf	___ftadd@exp2& (0+255),w,b
  8497  001CE0  0100               	movlb	0	; () banked
  8498  001CE2  5D90               	subwf	___ftadd@exp1& (0+255),w,b
  8499  001CE4  B0D8               	btfsc	status,0,c
  8500  001CE6  D013               	goto	l4236
  8501                           
  8502                           ; BSR set to: 0
  8503  001CE8  0100               	movlb	0	; () banked
  8504  001CEA  5190               	movf	___ftadd@exp1& (0+255),w,b
  8505  001CEC  0800               	sublw	0
  8506  001CEE  0100               	movlb	0	; () banked
  8507  001CF0  258F               	addwf	___ftadd@exp2& (0+255),w,b
  8508  001CF2  0100               	movlb	0	; () banked
  8509  001CF4  6F8B               	movwf	??___ftadd& (0+255),b
  8510  001CF6  0E19               	movlw	25
  8511  001CF8  0100               	movlb	0	; () banked
  8512  001CFA  5D8B               	subwf	??___ftadd& (0+255),w,b
  8513  001CFC  A0D8               	btfss	status,0,c
  8514  001CFE  D007               	goto	l4236
  8515  001D00                     l1025:
  8516                           
  8517                           ; BSR set to: 0
  8518  001D00  C088  F085         	movff	___ftadd@f2,?___ftadd
  8519  001D04  C089  F086         	movff	___ftadd@f2+1,?___ftadd+1
  8520  001D08  C08A  F087         	movff	___ftadd@f2+2,?___ftadd+2
  8521  001D0C  0012               	return	
  8522  001D0E                     l4236:
  8523                           
  8524                           ; BSR set to: 0
  8525  001D0E  0100               	movlb	0	; () banked
  8526  001D10  518F               	movf	___ftadd@exp2& (0+255),w,b
  8527  001D12  B4D8               	btfsc	status,2,c
  8528  001D14  D012               	goto	l1029
  8529                           
  8530                           ; BSR set to: 0
  8531  001D16  0100               	movlb	0	; () banked
  8532  001D18  5190               	movf	___ftadd@exp1& (0+255),w,b
  8533  001D1A  0100               	movlb	0	; () banked
  8534  001D1C  5D8F               	subwf	___ftadd@exp2& (0+255),w,b
  8535  001D1E  B0D8               	btfsc	status,0,c
  8536  001D20  D013               	goto	l4242
  8537                           
  8538                           ; BSR set to: 0
  8539  001D22  0100               	movlb	0	; () banked
  8540  001D24  518F               	movf	___ftadd@exp2& (0+255),w,b
  8541  001D26  0800               	sublw	0
  8542  001D28  0100               	movlb	0	; () banked
  8543  001D2A  2590               	addwf	___ftadd@exp1& (0+255),w,b
  8544  001D2C  0100               	movlb	0	; () banked
  8545  001D2E  6F8B               	movwf	??___ftadd& (0+255),b
  8546  001D30  0E19               	movlw	25
  8547  001D32  0100               	movlb	0	; () banked
  8548  001D34  5D8B               	subwf	??___ftadd& (0+255),w,b
  8549  001D36  A0D8               	btfss	status,0,c
  8550  001D38  D007               	goto	l4242
  8551  001D3A                     l1029:
  8552                           
  8553                           ; BSR set to: 0
  8554  001D3A  C085  F085         	movff	___ftadd@f1,?___ftadd
  8555  001D3E  C086  F086         	movff	___ftadd@f1+1,?___ftadd+1
  8556  001D42  C087  F087         	movff	___ftadd@f1+2,?___ftadd+2
  8557  001D46  0012               	return	
  8558  001D48                     l4242:
  8559                           
  8560                           ; BSR set to: 0
  8561  001D48  0E06               	movlw	6
  8562  001D4A  0100               	movlb	0	; () banked
  8563  001D4C  6F8E               	movwf	___ftadd@sign& (0+255),b
  8564                           
  8565                           ; BSR set to: 0
  8566  001D4E  0100               	movlb	0	; () banked
  8567  001D50  AF87               	btfss	(___ftadd@f1+2)& (0+255),7,b
  8568  001D52  D002               	goto	l4248
  8569                           
  8570                           ; BSR set to: 0
  8571  001D54  0100               	movlb	0	; () banked
  8572  001D56  8F8E               	bsf	___ftadd@sign& (0+255),7,b
  8573  001D58                     l4248:
  8574                           
  8575                           ; BSR set to: 0
  8576  001D58  0100               	movlb	0	; () banked
  8577  001D5A  AF8A               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8578  001D5C  D002               	goto	l1031
  8579                           
  8580                           ; BSR set to: 0
  8581  001D5E  0100               	movlb	0	; () banked
  8582  001D60  8D8E               	bsf	___ftadd@sign& (0+255),6,b
  8583  001D62                     l1031:
  8584                           
  8585                           ; BSR set to: 0
  8586  001D62  0100               	movlb	0	; () banked
  8587  001D64  8F86               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8588                           
  8589                           ; BSR set to: 0
  8590  001D66  0EFF               	movlw	255
  8591  001D68  0100               	movlb	0	; () banked
  8592  001D6A  1785               	andwf	___ftadd@f1& (0+255),f,b
  8593  001D6C  0EFF               	movlw	255
  8594  001D6E  0100               	movlb	0	; () banked
  8595  001D70  1786               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8596  001D72  0E00               	movlw	0
  8597  001D74  0100               	movlb	0	; () banked
  8598  001D76  1787               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8599  001D78  0100               	movlb	0	; () banked
  8600  001D7A  8F89               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8601                           
  8602                           ; BSR set to: 0
  8603  001D7C  0EFF               	movlw	255
  8604  001D7E  0100               	movlb	0	; () banked
  8605  001D80  1788               	andwf	___ftadd@f2& (0+255),f,b
  8606  001D82  0EFF               	movlw	255
  8607  001D84  0100               	movlb	0	; () banked
  8608  001D86  1789               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8609  001D88  0E00               	movlw	0
  8610  001D8A  0100               	movlb	0	; () banked
  8611  001D8C  178A               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8612                           
  8613                           ; BSR set to: 0
  8614  001D8E  0100               	movlb	0	; () banked
  8615  001D90  518F               	movf	___ftadd@exp2& (0+255),w,b
  8616  001D92  0100               	movlb	0	; () banked
  8617  001D94  5D90               	subwf	___ftadd@exp1& (0+255),w,b
  8618  001D96  B0D8               	btfsc	status,0,c
  8619  001D98  D02A               	goto	l4268
  8620  001D9A                     l4258:
  8621                           
  8622                           ; BSR set to: 0
  8623  001D9A  0100               	movlb	0	; () banked
  8624  001D9C  90D8               	bcf	status,0,c
  8625  001D9E  0100               	movlb	0	; () banked
  8626  001DA0  3788               	rlcf	___ftadd@f2& (0+255),f,b
  8627  001DA2  0100               	movlb	0	; () banked
  8628  001DA4  3789               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8629  001DA6  0100               	movlb	0	; () banked
  8630  001DA8  378A               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8631  001DAA  0100               	movlb	0	; () banked
  8632  001DAC  078F               	decf	___ftadd@exp2& (0+255),f,b
  8633                           
  8634                           ; BSR set to: 0
  8635  001DAE  0100               	movlb	0	; () banked
  8636  001DB0  518F               	movf	___ftadd@exp2& (0+255),w,b
  8637  001DB2  0100               	movlb	0	; () banked
  8638  001DB4  1990               	xorwf	___ftadd@exp1& (0+255),w,b
  8639  001DB6  B4D8               	btfsc	status,2,c
  8640  001DB8  D014               	goto	l4266
  8641                           
  8642                           ; BSR set to: 0
  8643  001DBA  0100               	movlb	0	; () banked
  8644  001DBC  078E               	decf	___ftadd@sign& (0+255),f,b
  8645  001DBE  C08E  F08B         	movff	___ftadd@sign,??___ftadd
  8646  001DC2  0E07               	movlw	7
  8647  001DC4  0100               	movlb	0	; () banked
  8648  001DC6  178B               	andwf	??___ftadd& (0+255),f,b
  8649  001DC8  B4D8               	btfsc	status,2,c
  8650  001DCA  D00B               	goto	l4266
  8651  001DCC  D7E6               	goto	l4258
  8652  001DCE                     l4264:
  8653                           
  8654                           ; BSR set to: 0
  8655  001DCE  0100               	movlb	0	; () banked
  8656  001DD0  90D8               	bcf	status,0,c
  8657  001DD2  0100               	movlb	0	; () banked
  8658  001DD4  3387               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8659  001DD6  0100               	movlb	0	; () banked
  8660  001DD8  3386               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8661  001DDA  0100               	movlb	0	; () banked
  8662  001DDC  3385               	rrcf	___ftadd@f1& (0+255),f,b
  8663  001DDE  0100               	movlb	0	; () banked
  8664  001DE0  2B90               	incf	___ftadd@exp1& (0+255),f,b
  8665  001DE2                     l4266:
  8666                           
  8667                           ; BSR set to: 0
  8668  001DE2  0100               	movlb	0	; () banked
  8669  001DE4  518F               	movf	___ftadd@exp2& (0+255),w,b
  8670  001DE6  0100               	movlb	0	; () banked
  8671  001DE8  6390               	cpfseq	___ftadd@exp1& (0+255),b
  8672  001DEA  D7F1               	goto	l4264
  8673  001DEC  D02F               	goto	l1040
  8674  001DEE                     l4268:
  8675                           
  8676                           ; BSR set to: 0
  8677  001DEE  0100               	movlb	0	; () banked
  8678  001DF0  5190               	movf	___ftadd@exp1& (0+255),w,b
  8679  001DF2  0100               	movlb	0	; () banked
  8680  001DF4  5D8F               	subwf	___ftadd@exp2& (0+255),w,b
  8681  001DF6  B0D8               	btfsc	status,0,c
  8682  001DF8  D029               	goto	l1040
  8683  001DFA                     l4270:
  8684                           
  8685                           ; BSR set to: 0
  8686  001DFA  0100               	movlb	0	; () banked
  8687  001DFC  90D8               	bcf	status,0,c
  8688  001DFE  0100               	movlb	0	; () banked
  8689  001E00  3785               	rlcf	___ftadd@f1& (0+255),f,b
  8690  001E02  0100               	movlb	0	; () banked
  8691  001E04  3786               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8692  001E06  0100               	movlb	0	; () banked
  8693  001E08  3787               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8694  001E0A  0100               	movlb	0	; () banked
  8695  001E0C  0790               	decf	___ftadd@exp1& (0+255),f,b
  8696                           
  8697                           ; BSR set to: 0
  8698  001E0E  0100               	movlb	0	; () banked
  8699  001E10  518F               	movf	___ftadd@exp2& (0+255),w,b
  8700  001E12  0100               	movlb	0	; () banked
  8701  001E14  1990               	xorwf	___ftadd@exp1& (0+255),w,b
  8702  001E16  B4D8               	btfsc	status,2,c
  8703  001E18  D014               	goto	l4278
  8704                           
  8705                           ; BSR set to: 0
  8706  001E1A  0100               	movlb	0	; () banked
  8707  001E1C  078E               	decf	___ftadd@sign& (0+255),f,b
  8708  001E1E  C08E  F08B         	movff	___ftadd@sign,??___ftadd
  8709  001E22  0E07               	movlw	7
  8710  001E24  0100               	movlb	0	; () banked
  8711  001E26  178B               	andwf	??___ftadd& (0+255),f,b
  8712  001E28  B4D8               	btfsc	status,2,c
  8713  001E2A  D00B               	goto	l4278
  8714  001E2C  D7E6               	goto	l4270
  8715  001E2E                     l4276:
  8716                           
  8717                           ; BSR set to: 0
  8718  001E2E  0100               	movlb	0	; () banked
  8719  001E30  90D8               	bcf	status,0,c
  8720  001E32  0100               	movlb	0	; () banked
  8721  001E34  338A               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8722  001E36  0100               	movlb	0	; () banked
  8723  001E38  3389               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8724  001E3A  0100               	movlb	0	; () banked
  8725  001E3C  3388               	rrcf	___ftadd@f2& (0+255),f,b
  8726  001E3E  0100               	movlb	0	; () banked
  8727  001E40  2B8F               	incf	___ftadd@exp2& (0+255),f,b
  8728  001E42                     l4278:
  8729                           
  8730                           ; BSR set to: 0
  8731  001E42  0100               	movlb	0	; () banked
  8732  001E44  518F               	movf	___ftadd@exp2& (0+255),w,b
  8733  001E46  0100               	movlb	0	; () banked
  8734  001E48  6390               	cpfseq	___ftadd@exp1& (0+255),b
  8735  001E4A  D7F1               	goto	l4276
  8736  001E4C                     l1040:
  8737                           
  8738                           ; BSR set to: 0
  8739  001E4C  0100               	movlb	0	; () banked
  8740  001E4E  AF8E               	btfss	___ftadd@sign& (0+255),7,b
  8741  001E50  D012               	goto	l1049
  8742                           
  8743                           ; BSR set to: 0
  8744  001E52  0EFF               	movlw	255
  8745  001E54  0100               	movlb	0	; () banked
  8746  001E56  1B85               	xorwf	___ftadd@f1& (0+255),f,b
  8747  001E58  0EFF               	movlw	255
  8748  001E5A  0100               	movlb	0	; () banked
  8749  001E5C  1B86               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8750  001E5E  0EFF               	movlw	255
  8751  001E60  0100               	movlb	0	; () banked
  8752  001E62  1B87               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8753  001E64  0E01               	movlw	1
  8754  001E66  0100               	movlb	0	; () banked
  8755  001E68  2785               	addwf	___ftadd@f1& (0+255),f,b
  8756  001E6A  0E00               	movlw	0
  8757  001E6C  0100               	movlb	0	; () banked
  8758  001E6E  2386               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8759  001E70  0E00               	movlw	0
  8760  001E72  0100               	movlb	0	; () banked
  8761  001E74  2387               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8762  001E76                     l1049:
  8763                           
  8764                           ; BSR set to: 0
  8765  001E76  0100               	movlb	0	; () banked
  8766  001E78  AD8E               	btfss	___ftadd@sign& (0+255),6,b
  8767  001E7A  D012               	goto	l4284
  8768                           
  8769                           ; BSR set to: 0
  8770  001E7C  0EFF               	movlw	255
  8771  001E7E  0100               	movlb	0	; () banked
  8772  001E80  1B88               	xorwf	___ftadd@f2& (0+255),f,b
  8773  001E82  0EFF               	movlw	255
  8774  001E84  0100               	movlb	0	; () banked
  8775  001E86  1B89               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8776  001E88  0EFF               	movlw	255
  8777  001E8A  0100               	movlb	0	; () banked
  8778  001E8C  1B8A               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8779  001E8E  0E01               	movlw	1
  8780  001E90  0100               	movlb	0	; () banked
  8781  001E92  2788               	addwf	___ftadd@f2& (0+255),f,b
  8782  001E94  0E00               	movlw	0
  8783  001E96  0100               	movlb	0	; () banked
  8784  001E98  2389               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8785  001E9A  0E00               	movlw	0
  8786  001E9C  0100               	movlb	0	; () banked
  8787  001E9E  238A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8788  001EA0                     l4284:
  8789                           
  8790                           ; BSR set to: 0
  8791  001EA0  0E00               	movlw	0
  8792  001EA2  0100               	movlb	0	; () banked
  8793  001EA4  6F8E               	movwf	___ftadd@sign& (0+255),b
  8794                           
  8795                           ; BSR set to: 0
  8796  001EA6  0100               	movlb	0	; () banked
  8797  001EA8  5185               	movf	___ftadd@f1& (0+255),w,b
  8798  001EAA  0100               	movlb	0	; () banked
  8799  001EAC  2788               	addwf	___ftadd@f2& (0+255),f,b
  8800  001EAE  0100               	movlb	0	; () banked
  8801  001EB0  5186               	movf	(___ftadd@f1+1)& (0+255),w,b
  8802  001EB2  0100               	movlb	0	; () banked
  8803  001EB4  2389               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8804  001EB6  0100               	movlb	0	; () banked
  8805  001EB8  5187               	movf	(___ftadd@f1+2)& (0+255),w,b
  8806  001EBA  0100               	movlb	0	; () banked
  8807  001EBC  238A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8808                           
  8809                           ; BSR set to: 0
  8810  001EBE  0100               	movlb	0	; () banked
  8811  001EC0  AF8A               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8812  001EC2  D015               	goto	l4294
  8813                           
  8814                           ; BSR set to: 0
  8815  001EC4  0EFF               	movlw	255
  8816  001EC6  0100               	movlb	0	; () banked
  8817  001EC8  1B88               	xorwf	___ftadd@f2& (0+255),f,b
  8818  001ECA  0EFF               	movlw	255
  8819  001ECC  0100               	movlb	0	; () banked
  8820  001ECE  1B89               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8821  001ED0  0EFF               	movlw	255
  8822  001ED2  0100               	movlb	0	; () banked
  8823  001ED4  1B8A               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8824  001ED6  0E01               	movlw	1
  8825  001ED8  0100               	movlb	0	; () banked
  8826  001EDA  2788               	addwf	___ftadd@f2& (0+255),f,b
  8827  001EDC  0E00               	movlw	0
  8828  001EDE  0100               	movlb	0	; () banked
  8829  001EE0  2389               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8830  001EE2  0E00               	movlw	0
  8831  001EE4  0100               	movlb	0	; () banked
  8832  001EE6  238A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8833                           
  8834                           ; BSR set to: 0
  8835  001EE8  0E01               	movlw	1
  8836  001EEA  0100               	movlb	0	; () banked
  8837  001EEC  6F8E               	movwf	___ftadd@sign& (0+255),b
  8838  001EEE                     l4294:
  8839                           
  8840                           ; BSR set to: 0
  8841  001EEE  C088  F01B         	movff	___ftadd@f2,___ftpack@arg
  8842  001EF2  C089  F01C         	movff	___ftadd@f2+1,___ftpack@arg+1
  8843  001EF6  C08A  F01D         	movff	___ftadd@f2+2,___ftpack@arg+2
  8844  001EFA  C090  F01E         	movff	___ftadd@exp1,___ftpack@exp
  8845  001EFE  C08E  F01F         	movff	___ftadd@sign,___ftpack@sign
  8846  001F02  ECA1  F017         	call	___ftpack	;wreg free
  8847  001F06  C01B  F085         	movff	?___ftpack,?___ftadd
  8848  001F0A  C01C  F086         	movff	?___ftpack+1,?___ftadd+1
  8849  001F0E  C01D  F087         	movff	?___ftpack+2,?___ftadd+2
  8850  001F12  0012               	return	
  8851  001F14                     __end_of___ftadd:
  8852                           	opt stack 0
  8853                           tblptru	equ	0xFF8
  8854                           tblptrh	equ	0xFF7
  8855                           tblptrl	equ	0xFF6
  8856                           tablat	equ	0xFF5
  8857                           prodh	equ	0xFF4
  8858                           prodl	equ	0xFF3
  8859                           intcon	equ	0xFF2
  8860                           intcon2	equ	0xFF1
  8861                           postinc0	equ	0xFEE
  8862                           wreg	equ	0xFE8
  8863                           postinc1	equ	0xFE6
  8864                           postdec1	equ	0xFE5
  8865                           fsr1h	equ	0xFE2
  8866                           fsr1l	equ	0xFE1
  8867                           indf2	equ	0xFDF
  8868                           postinc2	equ	0xFDE
  8869                           postdec2	equ	0xFDD
  8870                           fsr2h	equ	0xFDA
  8871                           fsr2l	equ	0xFD9
  8872                           status	equ	0xFD8
  8873                           
  8874 ;; *************** function ___altoft *****************
  8875 ;; Defined at:
  8876 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\altoft.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;  c               4   34[COMRAM] long 
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;  sign            1   43[COMRAM] unsigned char 
  8881 ;;  exp             1   42[COMRAM] unsigned char 
  8882 ;; Return value:  Size  Location     Type
  8883 ;;                  3   34[COMRAM] float 
  8884 ;; Registers used:
  8885 ;;		wreg, status,2, status,0, cstack
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8891 ;;      Params:         4       0       0       0       0       0       0
  8892 ;;      Locals:         2       0       0       0       0       0       0
  8893 ;;      Temps:          4       0       0       0       0       0       0
  8894 ;;      Totals:        10       0       0       0       0       0       0
  8895 ;;Total ram usage:       10 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; Hardware stack levels required when called:    5
  8898 ;; This function calls:
  8899 ;;		___ftpack
  8900 ;; This function is called by:
  8901 ;;		_Battery_Convert
  8902 ;; This function uses a non-reentrant model
  8903 ;;
  8904                           
  8905                           	psect	text39
  8906  0031B0                     __ptext39:
  8907                           	opt stack 0
  8908  0031B0                     ___altoft:
  8909                           	opt stack 24
  8910                           
  8911                           ;incstack = 0
  8912  0031B0  0E00               	movlw	0
  8913  0031B2  6E2C               	movwf	___altoft@sign,c
  8914  0031B4  0E8E               	movlw	142
  8915  0031B6  6E2B               	movwf	___altoft@exp,c
  8916  0031B8  5026               	movf	___altoft@c+3,w,c
  8917  0031BA  0A80               	xorlw	128
  8918  0031BC  0F80               	addlw	128
  8919  0031BE  E108               	bnz	u4705
  8920  0031C0  0E00               	movlw	0
  8921  0031C2  5C25               	subwf	___altoft@c+2,w,c
  8922  0031C4  E105               	bnz	u4705
  8923  0031C6  0E00               	movlw	0
  8924  0031C8  5C24               	subwf	___altoft@c+1,w,c
  8925  0031CA  E102               	bnz	u4705
  8926  0031CC  0E00               	movlw	0
  8927  0031CE  5C23               	subwf	___altoft@c,w,c
  8928  0031D0                     u4705:
  8929  0031D0  B0D8               	btfsc	status,0,c
  8930  0031D2  D011               	goto	l4692
  8931  0031D4  1E26               	comf	___altoft@c+3,f,c
  8932  0031D6  1E25               	comf	___altoft@c+2,f,c
  8933  0031D8  1E24               	comf	___altoft@c+1,f,c
  8934  0031DA  6C23               	negf	___altoft@c,c
  8935  0031DC  0E00               	movlw	0
  8936  0031DE  2224               	addwfc	___altoft@c+1,f,c
  8937  0031E0  2225               	addwfc	___altoft@c+2,f,c
  8938  0031E2  2226               	addwfc	___altoft@c+3,f,c
  8939  0031E4  0E01               	movlw	1
  8940  0031E6  6E2C               	movwf	___altoft@sign,c
  8941  0031E8  D006               	goto	l4692
  8942  0031EA                     l4690:
  8943  0031EA  90D8               	bcf	status,0,c
  8944  0031EC  3226               	rrcf	___altoft@c+3,f,c
  8945  0031EE  3225               	rrcf	___altoft@c+2,f,c
  8946  0031F0  3224               	rrcf	___altoft@c+1,f,c
  8947  0031F2  3223               	rrcf	___altoft@c,f,c
  8948  0031F4  2A2B               	incf	___altoft@exp,f,c
  8949  0031F6                     l4692:
  8950  0031F6  0E00               	movlw	0
  8951  0031F8  1423               	andwf	___altoft@c,w,c
  8952  0031FA  6E27               	movwf	??___altoft& (0+255),c
  8953  0031FC  0E00               	movlw	0
  8954  0031FE  1424               	andwf	___altoft@c+1,w,c
  8955  003200  6E28               	movwf	(??___altoft+1)& (0+255),c
  8956  003202  0E00               	movlw	0
  8957  003204  1425               	andwf	___altoft@c+2,w,c
  8958  003206  6E29               	movwf	(??___altoft+2)& (0+255),c
  8959  003208  0EFF               	movlw	255
  8960  00320A  1426               	andwf	___altoft@c+3,w,c
  8961  00320C  6E2A               	movwf	(??___altoft+3)& (0+255),c
  8962  00320E  502A               	movf	??___altoft+3,w,c
  8963  003210  1027               	iorwf	??___altoft,w,c
  8964  003212  1028               	iorwf	??___altoft+1,w,c
  8965  003214  1029               	iorwf	??___altoft+2,w,c
  8966  003216  A4D8               	btfss	status,2,c
  8967  003218  D7E8               	goto	l4690
  8968  00321A  C023  F01B         	movff	___altoft@c,___ftpack@arg
  8969  00321E  C024  F01C         	movff	___altoft@c+1,___ftpack@arg+1
  8970  003222  C025  F01D         	movff	___altoft@c+2,___ftpack@arg+2
  8971  003226  C02B  F01E         	movff	___altoft@exp,___ftpack@exp
  8972  00322A  C02C  F01F         	movff	___altoft@sign,___ftpack@sign
  8973  00322E  ECA1  F017         	call	___ftpack	;wreg free
  8974  003232  C01B  F023         	movff	?___ftpack,?___altoft
  8975  003236  C01C  F024         	movff	?___ftpack+1,?___altoft+1
  8976  00323A  C01D  F025         	movff	?___ftpack+2,?___altoft+2
  8977  00323E  0012               	return	
  8978  003240                     __end_of___altoft:
  8979                           	opt stack 0
  8980                           tblptru	equ	0xFF8
  8981                           tblptrh	equ	0xFF7
  8982                           tblptrl	equ	0xFF6
  8983                           tablat	equ	0xFF5
  8984                           prodh	equ	0xFF4
  8985                           prodl	equ	0xFF3
  8986                           intcon	equ	0xFF2
  8987                           intcon2	equ	0xFF1
  8988                           postinc0	equ	0xFEE
  8989                           wreg	equ	0xFE8
  8990                           postinc1	equ	0xFE6
  8991                           postdec1	equ	0xFE5
  8992                           fsr1h	equ	0xFE2
  8993                           fsr1l	equ	0xFE1
  8994                           indf2	equ	0xFDF
  8995                           postinc2	equ	0xFDE
  8996                           postdec2	equ	0xFDD
  8997                           fsr2h	equ	0xFDA
  8998                           fsr2l	equ	0xFD9
  8999                           status	equ	0xFD8
  9000                           
  9001 ;; *************** function ___ftpack *****************
  9002 ;; Defined at:
  9003 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;  arg             3   26[COMRAM] unsigned um
  9006 ;;  exp             1   29[COMRAM] unsigned char 
  9007 ;;  sign            1   30[COMRAM] unsigned char 
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;		None
  9010 ;; Return value:  Size  Location     Type
  9011 ;;                  3   26[COMRAM] float 
  9012 ;; Registers used:
  9013 ;;		wreg, status,2, status,0
  9014 ;; Tracked objects:
  9015 ;;		On entry : 0/0
  9016 ;;		On exit  : 0/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9019 ;;      Params:         5       0       0       0       0       0       0
  9020 ;;      Locals:         0       0       0       0       0       0       0
  9021 ;;      Temps:          3       0       0       0       0       0       0
  9022 ;;      Totals:         8       0       0       0       0       0       0
  9023 ;;Total ram usage:        8 bytes
  9024 ;; Hardware stack levels used:    1
  9025 ;; Hardware stack levels required when called:    4
  9026 ;; This function calls:
  9027 ;;		Nothing
  9028 ;; This function is called by:
  9029 ;;		___altoft
  9030 ;;		___awtoft
  9031 ;;		___ftadd
  9032 ;;		___ftdiv
  9033 ;;		___ftmul
  9034 ;;		___lltoft
  9035 ;; This function uses a non-reentrant model
  9036 ;;
  9037                           
  9038                           	psect	text40
  9039  002F42                     __ptext40:
  9040                           	opt stack 0
  9041  002F42                     ___ftpack:
  9042                           	opt stack 23
  9043                           
  9044                           ;incstack = 0
  9045  002F42  501E               	movf	___ftpack@exp,w,c
  9046  002F44  B4D8               	btfsc	status,2,c
  9047  002F46  D005               	goto	l4192
  9048  002F48  501B               	movf	___ftpack@arg,w,c
  9049  002F4A  101C               	iorwf	___ftpack@arg+1,w,c
  9050  002F4C  101D               	iorwf	___ftpack@arg+2,w,c
  9051  002F4E  A4D8               	btfss	status,2,c
  9052  002F50  D00C               	goto	l4198
  9053  002F52                     l4192:
  9054  002F52  0E00               	movlw	0
  9055  002F54  6E1B               	movwf	?___ftpack,c
  9056  002F56  0E00               	movlw	0
  9057  002F58  6E1C               	movwf	?___ftpack+1,c
  9058  002F5A  0E00               	movlw	0
  9059  002F5C  6E1D               	movwf	?___ftpack+2,c
  9060  002F5E  0012               	return	
  9061  002F60                     l4196:
  9062  002F60  2A1E               	incf	___ftpack@exp,f,c
  9063  002F62  90D8               	bcf	status,0,c
  9064  002F64  321D               	rrcf	___ftpack@arg+2,f,c
  9065  002F66  321C               	rrcf	___ftpack@arg+1,f,c
  9066  002F68  321B               	rrcf	___ftpack@arg,f,c
  9067  002F6A                     l4198:
  9068  002F6A  0E00               	movlw	0
  9069  002F6C  141B               	andwf	___ftpack@arg,w,c
  9070  002F6E  6E20               	movwf	??___ftpack& (0+255),c
  9071  002F70  0E00               	movlw	0
  9072  002F72  141C               	andwf	___ftpack@arg+1,w,c
  9073  002F74  6E21               	movwf	(??___ftpack+1)& (0+255),c
  9074  002F76  0EFE               	movlw	254
  9075  002F78  141D               	andwf	___ftpack@arg+2,w,c
  9076  002F7A  6E22               	movwf	(??___ftpack+2)& (0+255),c
  9077  002F7C  5020               	movf	??___ftpack,w,c
  9078  002F7E  1021               	iorwf	??___ftpack+1,w,c
  9079  002F80  1022               	iorwf	??___ftpack+2,w,c
  9080  002F82  B4D8               	btfsc	status,2,c
  9081  002F84  D00C               	goto	l4204
  9082  002F86  D7EC               	goto	l4196
  9083  002F88                     l4200:
  9084  002F88  2A1E               	incf	___ftpack@exp,f,c
  9085  002F8A  0E01               	movlw	1
  9086  002F8C  261B               	addwf	___ftpack@arg,f,c
  9087  002F8E  0E00               	movlw	0
  9088  002F90  221C               	addwfc	___ftpack@arg+1,f,c
  9089  002F92  0E00               	movlw	0
  9090  002F94  221D               	addwfc	___ftpack@arg+2,f,c
  9091  002F96  90D8               	bcf	status,0,c
  9092  002F98  321D               	rrcf	___ftpack@arg+2,f,c
  9093  002F9A  321C               	rrcf	___ftpack@arg+1,f,c
  9094  002F9C  321B               	rrcf	___ftpack@arg,f,c
  9095  002F9E                     l4204:
  9096  002F9E  0E00               	movlw	0
  9097  002FA0  141B               	andwf	___ftpack@arg,w,c
  9098  002FA2  6E20               	movwf	??___ftpack& (0+255),c
  9099  002FA4  0E00               	movlw	0
  9100  002FA6  141C               	andwf	___ftpack@arg+1,w,c
  9101  002FA8  6E21               	movwf	(??___ftpack+1)& (0+255),c
  9102  002FAA  0EFF               	movlw	255
  9103  002FAC  141D               	andwf	___ftpack@arg+2,w,c
  9104  002FAE  6E22               	movwf	(??___ftpack+2)& (0+255),c
  9105  002FB0  5020               	movf	??___ftpack,w,c
  9106  002FB2  1021               	iorwf	??___ftpack+1,w,c
  9107  002FB4  1022               	iorwf	??___ftpack+2,w,c
  9108  002FB6  B4D8               	btfsc	status,2,c
  9109  002FB8  D006               	goto	l4208
  9110  002FBA  D7E6               	goto	l4200
  9111  002FBC                     l4206:
  9112  002FBC  061E               	decf	___ftpack@exp,f,c
  9113  002FBE  90D8               	bcf	status,0,c
  9114  002FC0  361B               	rlcf	___ftpack@arg,f,c
  9115  002FC2  361C               	rlcf	___ftpack@arg+1,f,c
  9116  002FC4  361D               	rlcf	___ftpack@arg+2,f,c
  9117  002FC6                     l4208:
  9118  002FC6  AE1C               	btfss	___ftpack@arg+1,7,c
  9119  002FC8  D7F9               	goto	l4206
  9120  002FCA  A01E               	btfss	___ftpack@exp,0,c
  9121  002FCC  9E1C               	bcf	___ftpack@arg+1,7,c
  9122  002FCE  90D8               	bcf	status,0,c
  9123  002FD0  321E               	rrcf	___ftpack@exp,f,c
  9124  002FD2  501E               	movf	___ftpack@exp,w,c
  9125  002FD4  121D               	iorwf	___ftpack@arg+2,f,c
  9126  002FD6  501F               	movf	___ftpack@sign,w,c
  9127  002FD8  A4D8               	btfss	status,2,c
  9128  002FDA  8E1D               	bsf	___ftpack@arg+2,7,c
  9129  002FDC  C01B  F01B         	movff	___ftpack@arg,?___ftpack
  9130  002FE0  C01C  F01C         	movff	___ftpack@arg+1,?___ftpack+1
  9131  002FE4  C01D  F01D         	movff	___ftpack@arg+2,?___ftpack+2
  9132  002FE8  0012               	return	
  9133  002FEA                     __end_of___ftpack:
  9134                           	opt stack 0
  9135                           tblptru	equ	0xFF8
  9136                           tblptrh	equ	0xFF7
  9137                           tblptrl	equ	0xFF6
  9138                           tablat	equ	0xFF5
  9139                           prodh	equ	0xFF4
  9140                           prodl	equ	0xFF3
  9141                           intcon	equ	0xFF2
  9142                           intcon2	equ	0xFF1
  9143                           postinc0	equ	0xFEE
  9144                           wreg	equ	0xFE8
  9145                           postinc1	equ	0xFE6
  9146                           postdec1	equ	0xFE5
  9147                           fsr1h	equ	0xFE2
  9148                           fsr1l	equ	0xFE1
  9149                           indf2	equ	0xFDF
  9150                           postinc2	equ	0xFDE
  9151                           postdec2	equ	0xFDD
  9152                           fsr2h	equ	0xFDA
  9153                           fsr2l	equ	0xFD9
  9154                           status	equ	0xFD8
  9155                           
  9156 ;; *************** function _INTERRUPT_InterruptManager *****************
  9157 ;; Defined at:
  9158 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  9159 ;; Parameters:    Size  Location     Type
  9160 ;;		None
  9161 ;; Auto vars:     Size  Location     Type
  9162 ;;		None
  9163 ;; Return value:  Size  Location     Type
  9164 ;;		None               void
  9165 ;; Registers used:
  9166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9167 ;; Tracked objects:
  9168 ;;		On entry : 0/0
  9169 ;;		On exit  : 0/0
  9170 ;;		Unchanged: 0/0
  9171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9172 ;;      Params:         0       0       0       0       0       0       0
  9173 ;;      Locals:         0       0       0       0       0       0       0
  9174 ;;      Temps:         14       0       0       0       0       0       0
  9175 ;;      Totals:        14       0       0       0       0       0       0
  9176 ;;Total ram usage:       14 bytes
  9177 ;; Hardware stack levels used:    1
  9178 ;; Hardware stack levels required when called:    3
  9179 ;; This function calls:
  9180 ;;		_ADC_ISR
  9181 ;;		_EUSART1_Receive_ISR
  9182 ;;		_EUSART1_Transmit_ISR
  9183 ;;		_TMR1_ISR
  9184 ;; This function is called by:
  9185 ;;		Interrupt level 2
  9186 ;; This function uses a non-reentrant model
  9187 ;;
  9188                           
  9189                           	psect	intcode
  9190  000008                     __pintcode:
  9191                           	opt stack 0
  9192  000008                     _INTERRUPT_InterruptManager:
  9193                           	opt stack 22
  9194                           
  9195                           ;incstack = 0
  9196  000008  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  9197  00000C  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  9198  000010  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  9199  000014  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  9200  000018  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  9201  00001C  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  9202  000020  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  9203  000024  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  9204  000028  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  9205  00002C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  9206  000030  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  9207  000034  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  9208  000038  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  9209  00003C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  9210                           
  9211                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  9212  000040  BA9D               	btfsc	3997,5,c	;volatile
  9213  000042  AA9E               	btfss	3998,5,c	;volatile
  9214  000044  D003               	goto	i2l278
  9215                           
  9216                           ;interrupt_manager.c: 73: {
  9217                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
  9218  000046  EC09  F01B         	call	_EUSART1_Receive_ISR	;wreg free
  9219                           
  9220                           ;interrupt_manager.c: 75: }
  9221  00004A  D011               	goto	i2l286
  9222  00004C                     i2l278:
  9223                           
  9224                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  9225  00004C  BC9D               	btfsc	3997,6,c	;volatile
  9226  00004E  AC9E               	btfss	3998,6,c	;volatile
  9227  000050  D003               	goto	i2l280
  9228                           
  9229                           ;interrupt_manager.c: 77: {
  9230                           ;interrupt_manager.c: 78: ADC_ISR();
  9231  000052  ECAA  F007         	call	_ADC_ISR	;wreg free
  9232                           
  9233                           ;interrupt_manager.c: 79: }
  9234  000056  D00B               	goto	i2l286
  9235  000058                     i2l280:
  9236                           
  9237                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  9238  000058  B09D               	btfsc	3997,0,c	;volatile
  9239  00005A  A09E               	btfss	3998,0,c	;volatile
  9240  00005C  D003               	goto	i2l282
  9241                           
  9242                           ;interrupt_manager.c: 81: {
  9243                           ;interrupt_manager.c: 82: TMR1_ISR();
  9244  00005E  EC06  F01A         	call	_TMR1_ISR	;wreg free
  9245                           
  9246                           ;interrupt_manager.c: 83: }
  9247  000062  D005               	goto	i2l286
  9248  000064                     i2l282:
  9249                           
  9250                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  9251  000064  B89D               	btfsc	3997,4,c	;volatile
  9252  000066  A89E               	btfss	3998,4,c	;volatile
  9253  000068  D002               	goto	i2l286
  9254                           
  9255                           ;interrupt_manager.c: 85: {
  9256                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
  9257  00006A  ECF1  F01A         	call	_EUSART1_Transmit_ISR	;wreg free
  9258  00006E                     i2l286:
  9259  00006E  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  9260  000072  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  9261  000076  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  9262  00007A  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  9263  00007E  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  9264  000082  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  9265  000086  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  9266  00008A  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  9267  00008E  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  9268  000092  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  9269  000096  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  9270  00009A  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  9271  00009E  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  9272  0000A2  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  9273  0000A6  0011               	retfie		f
  9274  0000A8                     __end_of_INTERRUPT_InterruptManager:
  9275                           	opt stack 0
  9276                           pclatu	equ	0xFFB
  9277                           pclath	equ	0xFFA
  9278                           tblptru	equ	0xFF8
  9279                           tblptrh	equ	0xFF7
  9280                           tblptrl	equ	0xFF6
  9281                           tablat	equ	0xFF5
  9282                           prodh	equ	0xFF4
  9283                           prodl	equ	0xFF3
  9284                           intcon	equ	0xFF2
  9285                           intcon2	equ	0xFF1
  9286                           postinc0	equ	0xFEE
  9287                           fsr0h	equ	0xFEA
  9288                           fsr0l	equ	0xFE9
  9289                           wreg	equ	0xFE8
  9290                           postinc1	equ	0xFE6
  9291                           postdec1	equ	0xFE5
  9292                           fsr1h	equ	0xFE2
  9293                           fsr1l	equ	0xFE1
  9294                           indf2	equ	0xFDF
  9295                           postinc2	equ	0xFDE
  9296                           postdec2	equ	0xFDD
  9297                           fsr2h	equ	0xFDA
  9298                           fsr2l	equ	0xFD9
  9299                           status	equ	0xFD8
  9300                           
  9301 ;; *************** function _TMR1_ISR *****************
  9302 ;; Defined at:
  9303 ;;		line 110 in file "mcc_generated_files/tmr1.c"
  9304 ;; Parameters:    Size  Location     Type
  9305 ;;		None
  9306 ;; Auto vars:     Size  Location     Type
  9307 ;;		None
  9308 ;; Return value:  Size  Location     Type
  9309 ;;		None               void
  9310 ;; Registers used:
  9311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9312 ;; Tracked objects:
  9313 ;;		On entry : 0/0
  9314 ;;		On exit  : 0/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9317 ;;      Params:         0       0       0       0       0       0       0
  9318 ;;      Locals:         0       0       0       0       0       0       0
  9319 ;;      Temps:          3       0       0       0       0       0       0
  9320 ;;      Totals:         3       0       0       0       0       0       0
  9321 ;;Total ram usage:        3 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; Hardware stack levels required when called:    2
  9324 ;; This function calls:
  9325 ;;		_Battery_Read
  9326 ;;		_Temp_Read
  9327 ;; This function is called by:
  9328 ;;		_INTERRUPT_InterruptManager
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           	psect	text42
  9333  00340C                     __ptext42:
  9334                           	opt stack 0
  9335  00340C                     _TMR1_ISR:
  9336                           	opt stack 22
  9337                           
  9338                           ;tmr1.c: 114: PIR1bits.TMR1IF = 0;
  9339                           
  9340                           ;incstack = 0
  9341  00340C  909E               	bcf	3998,0,c	;volatile
  9342                           
  9343                           ;tmr1.c: 117: TMR1H = (timer1ReloadVal >> 8);
  9344  00340E  C044  F003         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
  9345  003412  C003  F004         	movff	??_TMR1_ISR,??_TMR1_ISR+1
  9346  003416  6A05               	clrf	(??_TMR1_ISR+2)& (0+255),c
  9347  003418  5004               	movf	??_TMR1_ISR+1,w,c
  9348  00341A  6ECF               	movwf	4047,c	;volatile
  9349                           
  9350                           ;tmr1.c: 118: TMR1L = (uint8_t) timer1ReloadVal;
  9351  00341C  C043  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  9352                           
  9353                           ;tmr1.c: 121: if (++CountCallBack >= 4)
  9354  003420  EE20  F03A         	lfsr	2,_CountCallBack
  9355  003424  2ADE               	incf	postinc2,f,c
  9356  003426  0E00               	movlw	0
  9357  003428  22DD               	addwfc	postdec2,f,c
  9358  00342A  52DE               	movf	postinc2,f,c
  9359  00342C  50DD               	movf	postdec2,w,c
  9360  00342E  0A80               	xorlw	128
  9361  003430  0F80               	addlw	128
  9362  003432  0E04               	movlw	4
  9363  003434  B4D8               	btfsc	status,2,c
  9364  003436  5CDF               	subwf	indf2,w,c
  9365  003438  A0D8               	btfss	status,0,c
  9366  00343A  D005               	goto	i2l3578
  9367                           
  9368                           ;tmr1.c: 122: {
  9369                           ;tmr1.c: 124: do { LATA4 = ~LATA4; } while(0);
  9370  00343C  7889               	btg	3977,4,c	;volatile
  9371                           
  9372                           ;tmr1.c: 127: CountCallBack = 0;
  9373  00343E  0E00               	movlw	0
  9374  003440  6E3B               	movwf	_CountCallBack+1,c
  9375  003442  0E00               	movlw	0
  9376  003444  6E3A               	movwf	_CountCallBack,c
  9377  003446                     i2l3578:
  9378                           
  9379                           ;tmr1.c: 132: }
  9380                           ;tmr1.c: 133: if(CountCallBack == 2)
  9381  003446  503A               	movf	_CountCallBack,w,c
  9382  003448  0A02               	xorlw	2
  9383  00344A  103B               	iorwf	_CountCallBack+1,w,c
  9384  00344C  B4D8               	btfsc	status,2,c
  9385                           
  9386                           ;tmr1.c: 134: {
  9387                           ;tmr1.c: 135: Battery_Read();
  9388  00344E  ECB8  F01B         	call	_Battery_Read	;wreg free
  9389                           
  9390                           ;tmr1.c: 136: }
  9391                           ;tmr1.c: 137: if(CountCallBack == 3)
  9392  003452  503A               	movf	_CountCallBack,w,c
  9393  003454  0A03               	xorlw	3
  9394  003456  103B               	iorwf	_CountCallBack+1,w,c
  9395  003458  A4D8               	btfss	status,2,c
  9396  00345A  0012               	return	
  9397                           
  9398                           ;tmr1.c: 138: {
  9399                           ;tmr1.c: 139: Temp_Read();
  9400  00345C  ECAC  F01B         	call	_Temp_Read	;wreg free
  9401  003460  0012               	return	
  9402  003462                     __end_of_TMR1_ISR:
  9403                           	opt stack 0
  9404                           pclatu	equ	0xFFB
  9405                           pclath	equ	0xFFA
  9406                           tblptru	equ	0xFF8
  9407                           tblptrh	equ	0xFF7
  9408                           tblptrl	equ	0xFF6
  9409                           tablat	equ	0xFF5
  9410                           prodh	equ	0xFF4
  9411                           prodl	equ	0xFF3
  9412                           intcon	equ	0xFF2
  9413                           intcon2	equ	0xFF1
  9414                           postinc0	equ	0xFEE
  9415                           fsr0h	equ	0xFEA
  9416                           fsr0l	equ	0xFE9
  9417                           wreg	equ	0xFE8
  9418                           postinc1	equ	0xFE6
  9419                           postdec1	equ	0xFE5
  9420                           fsr1h	equ	0xFE2
  9421                           fsr1l	equ	0xFE1
  9422                           indf2	equ	0xFDF
  9423                           postinc2	equ	0xFDE
  9424                           postdec2	equ	0xFDD
  9425                           fsr2h	equ	0xFDA
  9426                           fsr2l	equ	0xFD9
  9427                           status	equ	0xFD8
  9428                           
  9429 ;; *************** function _Temp_Read *****************
  9430 ;; Defined at:
  9431 ;;		line 27 in file "Tempeture.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;		None
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;		None
  9436 ;; Return value:  Size  Location     Type
  9437 ;;                  2   28[COMRAM] int 
  9438 ;; Registers used:
  9439 ;;		wreg, status,2, status,0, cstack
  9440 ;; Tracked objects:
  9441 ;;		On entry : 0/0
  9442 ;;		On exit  : 0/0
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9445 ;;      Params:         0       0       0       0       0       0       0
  9446 ;;      Locals:         0       0       0       0       0       0       0
  9447 ;;      Temps:          0       0       0       0       0       0       0
  9448 ;;      Totals:         0       0       0       0       0       0       0
  9449 ;;Total ram usage:        0 bytes
  9450 ;; Hardware stack levels used:    1
  9451 ;; Hardware stack levels required when called:    1
  9452 ;; This function calls:
  9453 ;;		_ADC_StartConversion
  9454 ;; This function is called by:
  9455 ;;		_TMR1_ISR
  9456 ;; This function uses a non-reentrant model
  9457 ;;
  9458                           
  9459                           	psect	text43
  9460  003758                     __ptext43:
  9461                           	opt stack 0
  9462  003758                     _Temp_Read:
  9463                           	opt stack 22
  9464                           
  9465                           ;Tempeture.c: 30: ADC_Buffer_Point = 0;
  9466                           
  9467                           ;incstack = 0
  9468  003758  0E00               	movlw	0
  9469  00375A  6E39               	movwf	_ADC_Buffer_Point+1,c
  9470  00375C  0E00               	movlw	0
  9471  00375E  6E38               	movwf	_ADC_Buffer_Point,c
  9472                           
  9473                           ;Tempeture.c: 31: Temp_Aquire = 1;
  9474  003760  0E01               	movlw	1
  9475  003762  6E3C               	movwf	_Temp_Aquire,c
  9476                           
  9477                           ;Tempeture.c: 32: ADCON1 = 0x80;
  9478  003764  0E80               	movlw	128
  9479  003766  6EC1               	movwf	4033,c	;volatile
  9480                           
  9481                           ;Tempeture.c: 33: ADC_StartConversion(Temp1);
  9482  003768  0E0E               	movlw	14
  9483  00376A  EC93  F01B         	call	_ADC_StartConversion
  9484  00376E  0012               	return	
  9485  003770                     __end_of_Temp_Read:
  9486                           	opt stack 0
  9487                           pclatu	equ	0xFFB
  9488                           pclath	equ	0xFFA
  9489                           tblptru	equ	0xFF8
  9490                           tblptrh	equ	0xFF7
  9491                           tblptrl	equ	0xFF6
  9492                           tablat	equ	0xFF5
  9493                           prodh	equ	0xFF4
  9494                           prodl	equ	0xFF3
  9495                           intcon	equ	0xFF2
  9496                           intcon2	equ	0xFF1
  9497                           postinc0	equ	0xFEE
  9498                           fsr0h	equ	0xFEA
  9499                           fsr0l	equ	0xFE9
  9500                           wreg	equ	0xFE8
  9501                           postinc1	equ	0xFE6
  9502                           postdec1	equ	0xFE5
  9503                           fsr1h	equ	0xFE2
  9504                           fsr1l	equ	0xFE1
  9505                           indf2	equ	0xFDF
  9506                           postinc2	equ	0xFDE
  9507                           postdec2	equ	0xFDD
  9508                           fsr2h	equ	0xFDA
  9509                           fsr2l	equ	0xFD9
  9510                           status	equ	0xFD8
  9511                           
  9512 ;; *************** function _Battery_Read *****************
  9513 ;; Defined at:
  9514 ;;		line 18 in file "Battery.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;		None
  9517 ;; Auto vars:     Size  Location     Type
  9518 ;;		None
  9519 ;; Return value:  Size  Location     Type
  9520 ;;                  2   26[COMRAM] int 
  9521 ;; Registers used:
  9522 ;;		wreg, status,2, status,0, cstack
  9523 ;; Tracked objects:
  9524 ;;		On entry : 0/0
  9525 ;;		On exit  : 0/0
  9526 ;;		Unchanged: 0/0
  9527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9528 ;;      Params:         0       0       0       0       0       0       0
  9529 ;;      Locals:         0       0       0       0       0       0       0
  9530 ;;      Temps:          0       0       0       0       0       0       0
  9531 ;;      Totals:         0       0       0       0       0       0       0
  9532 ;;Total ram usage:        0 bytes
  9533 ;; Hardware stack levels used:    1
  9534 ;; Hardware stack levels required when called:    1
  9535 ;; This function calls:
  9536 ;;		_ADC_StartConversion
  9537 ;; This function is called by:
  9538 ;;		_TMR1_ISR
  9539 ;; This function uses a non-reentrant model
  9540 ;;
  9541                           
  9542                           	psect	text44
  9543  003770                     __ptext44:
  9544                           	opt stack 0
  9545  003770                     _Battery_Read:
  9546                           	opt stack 22
  9547                           
  9548                           ;Battery.c: 21: ADC_Buffer_Point = 0;
  9549                           
  9550                           ;incstack = 0
  9551  003770  0E00               	movlw	0
  9552  003772  6E39               	movwf	_ADC_Buffer_Point+1,c
  9553  003774  0E00               	movlw	0
  9554  003776  6E38               	movwf	_ADC_Buffer_Point,c
  9555                           
  9556                           ;Battery.c: 22: Volt_Aquire = 1;
  9557  003778  0E01               	movlw	1
  9558  00377A  6E3D               	movwf	_Volt_Aquire,c
  9559                           
  9560                           ;Battery.c: 23: ADCON1 = 0x81;
  9561  00377C  0E81               	movlw	129
  9562  00377E  6EC1               	movwf	4033,c	;volatile
  9563                           
  9564                           ;Battery.c: 24: ADC_StartConversion(Battery1);
  9565  003780  0E01               	movlw	1
  9566  003782  EC93  F01B         	call	_ADC_StartConversion
  9567  003786  0012               	return	
  9568  003788                     __end_of_Battery_Read:
  9569                           	opt stack 0
  9570                           pclatu	equ	0xFFB
  9571                           pclath	equ	0xFFA
  9572                           tblptru	equ	0xFF8
  9573                           tblptrh	equ	0xFF7
  9574                           tblptrl	equ	0xFF6
  9575                           tablat	equ	0xFF5
  9576                           prodh	equ	0xFF4
  9577                           prodl	equ	0xFF3
  9578                           intcon	equ	0xFF2
  9579                           intcon2	equ	0xFF1
  9580                           postinc0	equ	0xFEE
  9581                           fsr0h	equ	0xFEA
  9582                           fsr0l	equ	0xFE9
  9583                           wreg	equ	0xFE8
  9584                           postinc1	equ	0xFE6
  9585                           postdec1	equ	0xFE5
  9586                           fsr1h	equ	0xFE2
  9587                           fsr1l	equ	0xFE1
  9588                           indf2	equ	0xFDF
  9589                           postinc2	equ	0xFDE
  9590                           postdec2	equ	0xFDD
  9591                           fsr2h	equ	0xFDA
  9592                           fsr2l	equ	0xFD9
  9593                           status	equ	0xFD8
  9594                           
  9595 ;; *************** function _EUSART1_Transmit_ISR *****************
  9596 ;; Defined at:
  9597 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  9598 ;; Parameters:    Size  Location     Type
  9599 ;;		None
  9600 ;; Auto vars:     Size  Location     Type
  9601 ;;		None
  9602 ;; Return value:  Size  Location     Type
  9603 ;;		None               void
  9604 ;; Registers used:
  9605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9606 ;; Tracked objects:
  9607 ;;		On entry : 0/0
  9608 ;;		On exit  : 0/0
  9609 ;;		Unchanged: 0/0
  9610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9611 ;;      Params:         0       0       0       0       0       0       0
  9612 ;;      Locals:         0       0       0       0       0       0       0
  9613 ;;      Temps:          0       0       0       0       0       0       0
  9614 ;;      Totals:         0       0       0       0       0       0       0
  9615 ;;Total ram usage:        0 bytes
  9616 ;; Hardware stack levels used:    1
  9617 ;; This function calls:
  9618 ;;		Nothing
  9619 ;; This function is called by:
  9620 ;;		_INTERRUPT_InterruptManager
  9621 ;; This function uses a non-reentrant model
  9622 ;;
  9623                           
  9624                           	psect	text45
  9625  0035E2                     __ptext45:
  9626                           	opt stack 0
  9627  0035E2                     _EUSART1_Transmit_ISR:
  9628                           	opt stack 24
  9629                           
  9630                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  9631                           
  9632                           ;incstack = 0
  9633  0035E2  0E08               	movlw	8
  9634  0035E4  5C45               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
  9635  0035E6  B0D8               	btfsc	status,0,c
  9636  0035E8  D012               	goto	i2l130
  9637                           
  9638                           ;eusart1.c: 178: {
  9639                           ;eusart1.c: 179: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  9640  0035EA  5042               	movf	_eusart1TxTail,w,c
  9641  0035EC  0D01               	mullw	1
  9642  0035EE  0E30               	movlw	low _eusart1TxBuffer
  9643  0035F0  24F3               	addwf	prodl,w,c
  9644  0035F2  6ED9               	movwf	fsr2l,c
  9645  0035F4  0E00               	movlw	high _eusart1TxBuffer
  9646  0035F6  20F4               	addwfc	prodh,w,c
  9647  0035F8  6EDA               	movwf	fsr2h,c
  9648  0035FA  50DF               	movf	indf2,w,c
  9649  0035FC  6EAD               	movwf	4013,c	;volatile
  9650  0035FE  2A42               	incf	_eusart1TxTail,f,c
  9651                           
  9652                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  9653  003600  0E07               	movlw	7
  9654  003602  6442               	cpfsgt	_eusart1TxTail,c
  9655  003604  D002               	goto	i2l2146
  9656                           
  9657                           ;eusart1.c: 181: {
  9658                           ;eusart1.c: 182: eusart1TxTail = 0;
  9659  003606  0E00               	movlw	0
  9660  003608  6E42               	movwf	_eusart1TxTail,c
  9661  00360A                     i2l2146:
  9662                           
  9663                           ;eusart1.c: 183: }
  9664                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
  9665  00360A  2A45               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  9666                           
  9667                           ;eusart1.c: 185: }
  9668  00360C  0012               	return	
  9669  00360E                     i2l130:
  9670                           
  9671                           ;eusart1.c: 186: else
  9672                           ;eusart1.c: 187: {
  9673                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
  9674  00360E  989D               	bcf	3997,4,c	;volatile
  9675  003610  0012               	return	
  9676  003612                     __end_of_EUSART1_Transmit_ISR:
  9677                           	opt stack 0
  9678                           pclatu	equ	0xFFB
  9679                           pclath	equ	0xFFA
  9680                           tblptru	equ	0xFF8
  9681                           tblptrh	equ	0xFF7
  9682                           tblptrl	equ	0xFF6
  9683                           tablat	equ	0xFF5
  9684                           prodh	equ	0xFF4
  9685                           prodl	equ	0xFF3
  9686                           intcon	equ	0xFF2
  9687                           intcon2	equ	0xFF1
  9688                           postinc0	equ	0xFEE
  9689                           fsr0h	equ	0xFEA
  9690                           fsr0l	equ	0xFE9
  9691                           wreg	equ	0xFE8
  9692                           postinc1	equ	0xFE6
  9693                           postdec1	equ	0xFE5
  9694                           fsr1h	equ	0xFE2
  9695                           fsr1l	equ	0xFE1
  9696                           indf2	equ	0xFDF
  9697                           postinc2	equ	0xFDE
  9698                           postdec2	equ	0xFDD
  9699                           fsr2h	equ	0xFDA
  9700                           fsr2l	equ	0xFD9
  9701                           status	equ	0xFD8
  9702                           
  9703 ;; *************** function _EUSART1_Receive_ISR *****************
  9704 ;; Defined at:
  9705 ;;		line 192 in file "mcc_generated_files/eusart1.c"
  9706 ;; Parameters:    Size  Location     Type
  9707 ;;		None
  9708 ;; Auto vars:     Size  Location     Type
  9709 ;;		None
  9710 ;; Return value:  Size  Location     Type
  9711 ;;		None               void
  9712 ;; Registers used:
  9713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9714 ;; Tracked objects:
  9715 ;;		On entry : 0/0
  9716 ;;		On exit  : 0/0
  9717 ;;		Unchanged: 0/0
  9718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9719 ;;      Params:         0       0       0       0       0       0       0
  9720 ;;      Locals:         0       0       0       0       0       0       0
  9721 ;;      Temps:          0       0       0       0       0       0       0
  9722 ;;      Totals:         0       0       0       0       0       0       0
  9723 ;;Total ram usage:        0 bytes
  9724 ;; Hardware stack levels used:    1
  9725 ;; This function calls:
  9726 ;;		Nothing
  9727 ;; This function is called by:
  9728 ;;		_INTERRUPT_InterruptManager
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           	psect	text46
  9733  003612                     __ptext46:
  9734                           	opt stack 0
  9735  003612                     _EUSART1_Receive_ISR:
  9736                           	opt stack 24
  9737                           
  9738                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
  9739                           
  9740                           ;incstack = 0
  9741  003612  A2AB               	btfss	4011,1,c	;volatile
  9742  003614  D002               	goto	i2l3610
  9743                           
  9744                           ;eusart1.c: 195: {
  9745                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
  9746  003616  98AB               	bcf	4011,4,c	;volatile
  9747                           
  9748                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
  9749  003618  88AB               	bsf	4011,4,c	;volatile
  9750  00361A                     i2l3610:
  9751                           
  9752                           ;eusart1.c: 200: }
  9753                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  9754  00361A  503F               	movf	_eusart1RxHead,w,c
  9755  00361C  0D01               	mullw	1
  9756  00361E  0101               	movlb	1	; () banked
  9757  003620  0E00               	movlw	low _eusart1RxBuffer
  9758  003622  24F3               	addwf	prodl,w,c
  9759  003624  6ED9               	movwf	fsr2l,c
  9760  003626  0101               	movlb	1	; () banked
  9761  003628  0E01               	movlw	high _eusart1RxBuffer
  9762  00362A  20F4               	addwfc	prodh,w,c
  9763  00362C  6EDA               	movwf	fsr2h,c
  9764  00362E  CFAE FFDF          	movff	4014,indf2	;volatile
  9765                           
  9766                           ; BSR set to: 1
  9767  003632  2A3F               	incf	_eusart1RxHead,f,c
  9768                           
  9769                           ; BSR set to: 1
  9770                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  9771  003634  0E31               	movlw	49
  9772  003636  643F               	cpfsgt	_eusart1RxHead,c
  9773  003638  D002               	goto	i2l3618
  9774                           
  9775                           ; BSR set to: 1
  9776                           ;eusart1.c: 205: {
  9777                           ;eusart1.c: 206: eusart1RxHead = 0;
  9778  00363A  0E00               	movlw	0
  9779  00363C  6E3F               	movwf	_eusart1RxHead,c
  9780  00363E                     i2l3618:
  9781                           
  9782                           ; BSR set to: 1
  9783                           ;eusart1.c: 207: }
  9784                           ;eusart1.c: 208: eusart1RxCount++;
  9785  00363E  2A3E               	incf	_eusart1RxCount,f,c	;volatile
  9786                           
  9787                           ; BSR set to: 1
  9788  003640  0012               	return	
  9789  003642                     __end_of_EUSART1_Receive_ISR:
  9790                           	opt stack 0
  9791                           pclatu	equ	0xFFB
  9792                           pclath	equ	0xFFA
  9793                           tblptru	equ	0xFF8
  9794                           tblptrh	equ	0xFF7
  9795                           tblptrl	equ	0xFF6
  9796                           tablat	equ	0xFF5
  9797                           prodh	equ	0xFF4
  9798                           prodl	equ	0xFF3
  9799                           intcon	equ	0xFF2
  9800                           intcon2	equ	0xFF1
  9801                           postinc0	equ	0xFEE
  9802                           fsr0h	equ	0xFEA
  9803                           fsr0l	equ	0xFE9
  9804                           wreg	equ	0xFE8
  9805                           postinc1	equ	0xFE6
  9806                           postdec1	equ	0xFE5
  9807                           fsr1h	equ	0xFE2
  9808                           fsr1l	equ	0xFE1
  9809                           indf2	equ	0xFDF
  9810                           postinc2	equ	0xFDE
  9811                           postdec2	equ	0xFDD
  9812                           fsr2h	equ	0xFDA
  9813                           fsr2l	equ	0xFD9
  9814                           status	equ	0xFD8
  9815                           
  9816 ;; *************** function _ADC_ISR *****************
  9817 ;; Defined at:
  9818 ;;		line 82 in file "mcc_generated_files/adc.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;		None
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;  ADC_Result      2   10[COMRAM] int 
  9823 ;; Return value:  Size  Location     Type
  9824 ;;		None               void
  9825 ;; Registers used:
  9826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9832 ;;      Params:         0       0       0       0       0       0       0
  9833 ;;      Locals:         2       0       0       0       0       0       0
  9834 ;;      Temps:          6       0       0       0       0       0       0
  9835 ;;      Totals:         8       0       0       0       0       0       0
  9836 ;;Total ram usage:        8 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; Hardware stack levels required when called:    1
  9839 ;; This function calls:
  9840 ;;		_ADC_GetConversionResult
  9841 ;;		_ADC_StartConversion
  9842 ;;		_Set_4051
  9843 ;; This function is called by:
  9844 ;;		_INTERRUPT_InterruptManager
  9845 ;; This function uses a non-reentrant model
  9846 ;;
  9847                           
  9848                           	psect	text47
  9849  000F54                     __ptext47:
  9850                           	opt stack 0
  9851  000F54                     _ADC_ISR:
  9852                           	opt stack 23
  9853                           
  9854                           ;adc.c: 85: PIR1bits.ADIF = 0;
  9855                           
  9856                           ; BSR set to: 1
  9857                           ;incstack = 0
  9858  000F54  9C9E               	bcf	3998,6,c	;volatile
  9859                           
  9860                           ;adc.c: 86: int ADC_Result = 0;
  9861  000F56  0E00               	movlw	0
  9862  000F58  6E0C               	movwf	ADC_ISR@ADC_Result+1,c
  9863  000F5A  0E00               	movlw	0
  9864  000F5C  6E0B               	movwf	ADC_ISR@ADC_Result,c
  9865                           
  9866                           ;adc.c: 87: if (Temp_Aquire){
  9867  000F5E  503C               	movf	_Temp_Aquire,w,c
  9868  000F60  B4D8               	btfsc	status,2,c
  9869  000F62  D14A               	goto	i2l3694
  9870                           
  9871                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
  9872  000F64  ECC4  F01B         	call	_ADC_GetConversionResult	;wreg free
  9873  000F68  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  9874  000F6C  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  9875                           
  9876                           ;adc.c: 90: switch ( ADC_Buffer_Point )
  9877  000F70  D117               	goto	i2l3690
  9878  000F72                     i2l3626:
  9879                           
  9880                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  9881  000F72  0EE4               	movlw	low _Temp_Adc
  9882  000F74  6E05               	movwf	??_ADC_ISR& (0+255),c
  9883  000F76  0E00               	movlw	high _Temp_Adc
  9884  000F78  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  9885  000F7A  90D8               	bcf	status,0,c
  9886  000F7C  3438               	rlcf	_ADC_Buffer_Point,w,c
  9887  000F7E  6ED9               	movwf	fsr2l,c
  9888  000F80  3439               	rlcf	_ADC_Buffer_Point+1,w,c
  9889  000F82  6EDA               	movwf	fsr2h,c
  9890  000F84  5005               	movf	??_ADC_ISR,w,c
  9891  000F86  26D9               	addwf	fsr2l,f,c
  9892  000F88  5006               	movf	??_ADC_ISR+1,w,c
  9893  000F8A  22DA               	addwfc	fsr2h,f,c
  9894  000F8C  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  9895  000F90  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  9896                           
  9897                           ;adc.c: 94: Set_4051(0);
  9898  000F94  0E00               	movlw	0
  9899  000F96  6E02               	movwf	Set_4051@Channel+1,c
  9900  000F98  0E00               	movlw	0
  9901  000F9A  6E01               	movwf	Set_4051@Channel,c
  9902  000F9C  EC38  F01B         	call	_Set_4051	;wreg free
  9903                           
  9904                           ;adc.c: 95: ADC_StartConversion(Temp1);
  9905  000FA0  0E0E               	movlw	14
  9906  000FA2  EC93  F01B         	call	_ADC_StartConversion
  9907                           
  9908                           ;adc.c: 96: break;
  9909  000FA6  D126               	goto	i2l3692
  9910  000FA8                     i2l3632:
  9911                           
  9912                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  9913  000FA8  0EE4               	movlw	low _Temp_Adc
  9914  000FAA  6E05               	movwf	??_ADC_ISR& (0+255),c
  9915  000FAC  0E00               	movlw	high _Temp_Adc
  9916  000FAE  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  9917  000FB0  90D8               	bcf	status,0,c
  9918  000FB2  3438               	rlcf	_ADC_Buffer_Point,w,c
  9919  000FB4  6ED9               	movwf	fsr2l,c
  9920  000FB6  3439               	rlcf	_ADC_Buffer_Point+1,w,c
  9921  000FB8  6EDA               	movwf	fsr2h,c
  9922  000FBA  5005               	movf	??_ADC_ISR,w,c
  9923  000FBC  26D9               	addwf	fsr2l,f,c
  9924  000FBE  5006               	movf	??_ADC_ISR+1,w,c
  9925  000FC0  22DA               	addwfc	fsr2h,f,c
  9926  000FC2  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  9927  000FC6  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  9928                           
  9929                           ;adc.c: 99: Set_4051(1);
  9930  000FCA  0E00               	movlw	0
  9931  000FCC  6E02               	movwf	Set_4051@Channel+1,c
  9932  000FCE  0E01               	movlw	1
  9933  000FD0  6E01               	movwf	Set_4051@Channel,c
  9934  000FD2  EC38  F01B         	call	_Set_4051	;wreg free
  9935                           
  9936                           ;adc.c: 100: ADC_StartConversion(Temp1);
  9937  000FD6  0E0E               	movlw	14
  9938  000FD8  EC93  F01B         	call	_ADC_StartConversion
  9939                           
  9940                           ;adc.c: 101: break;
  9941  000FDC  D10B               	goto	i2l3692
  9942  000FDE                     i2l3638:
  9943                           
  9944                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  9945  000FDE  0EE4               	movlw	low _Temp_Adc
  9946  000FE0  6E05               	movwf	??_ADC_ISR& (0+255),c
  9947  000FE2  0E00               	movlw	high _Temp_Adc
  9948  000FE4  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  9949  000FE6  90D8               	bcf	status,0,c
  9950  000FE8  3438               	rlcf	_ADC_Buffer_Point,w,c
  9951  000FEA  6ED9               	movwf	fsr2l,c
  9952  000FEC  3439               	rlcf	_ADC_Buffer_Point+1,w,c
  9953  000FEE  6EDA               	movwf	fsr2h,c
  9954  000FF0  5005               	movf	??_ADC_ISR,w,c
  9955  000FF2  26D9               	addwf	fsr2l,f,c
  9956  000FF4  5006               	movf	??_ADC_ISR+1,w,c
  9957  000FF6  22DA               	addwfc	fsr2h,f,c
  9958  000FF8  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  9959  000FFC  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  9960                           
  9961                           ;adc.c: 104: Set_4051(2);
  9962  001000  0E00               	movlw	0
  9963  001002  6E02               	movwf	Set_4051@Channel+1,c
  9964  001004  0E02               	movlw	2
  9965  001006  6E01               	movwf	Set_4051@Channel,c
  9966  001008  EC38  F01B         	call	_Set_4051	;wreg free
  9967                           
  9968                           ;adc.c: 105: ADC_StartConversion(Temp1);
  9969  00100C  0E0E               	movlw	14
  9970  00100E  EC93  F01B         	call	_ADC_StartConversion
  9971                           
  9972                           ;adc.c: 106: break;
  9973  001012  D0F0               	goto	i2l3692
  9974  001014                     i2l3644:
  9975                           
  9976                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  9977  001014  0EE4               	movlw	low _Temp_Adc
  9978  001016  6E05               	movwf	??_ADC_ISR& (0+255),c
  9979  001018  0E00               	movlw	high _Temp_Adc
  9980  00101A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  9981  00101C  90D8               	bcf	status,0,c
  9982  00101E  3438               	rlcf	_ADC_Buffer_Point,w,c
  9983  001020  6ED9               	movwf	fsr2l,c
  9984  001022  3439               	rlcf	_ADC_Buffer_Point+1,w,c
  9985  001024  6EDA               	movwf	fsr2h,c
  9986  001026  5005               	movf	??_ADC_ISR,w,c
  9987  001028  26D9               	addwf	fsr2l,f,c
  9988  00102A  5006               	movf	??_ADC_ISR+1,w,c
  9989  00102C  22DA               	addwfc	fsr2h,f,c
  9990  00102E  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  9991  001032  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  9992                           
  9993                           ;adc.c: 109: Set_4051(3);
  9994  001036  0E00               	movlw	0
  9995  001038  6E02               	movwf	Set_4051@Channel+1,c
  9996  00103A  0E03               	movlw	3
  9997  00103C  6E01               	movwf	Set_4051@Channel,c
  9998  00103E  EC38  F01B         	call	_Set_4051	;wreg free
  9999                           
 10000                           ;adc.c: 110: ADC_StartConversion(Temp1);
 10001  001042  0E0E               	movlw	14
 10002  001044  EC93  F01B         	call	_ADC_StartConversion
 10003                           
 10004                           ;adc.c: 111: break;
 10005  001048  D0D5               	goto	i2l3692
 10006  00104A                     i2l3650:
 10007                           
 10008                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10009  00104A  0EE4               	movlw	low _Temp_Adc
 10010  00104C  6E05               	movwf	??_ADC_ISR& (0+255),c
 10011  00104E  0E00               	movlw	high _Temp_Adc
 10012  001050  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10013  001052  90D8               	bcf	status,0,c
 10014  001054  3438               	rlcf	_ADC_Buffer_Point,w,c
 10015  001056  6ED9               	movwf	fsr2l,c
 10016  001058  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10017  00105A  6EDA               	movwf	fsr2h,c
 10018  00105C  5005               	movf	??_ADC_ISR,w,c
 10019  00105E  26D9               	addwf	fsr2l,f,c
 10020  001060  5006               	movf	??_ADC_ISR+1,w,c
 10021  001062  22DA               	addwfc	fsr2h,f,c
 10022  001064  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10023  001068  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10024                           
 10025                           ;adc.c: 114: Set_4051(4);
 10026  00106C  0E00               	movlw	0
 10027  00106E  6E02               	movwf	Set_4051@Channel+1,c
 10028  001070  0E04               	movlw	4
 10029  001072  6E01               	movwf	Set_4051@Channel,c
 10030  001074  EC38  F01B         	call	_Set_4051	;wreg free
 10031                           
 10032                           ;adc.c: 115: ADC_StartConversion(Temp1);
 10033  001078  0E0E               	movlw	14
 10034  00107A  EC93  F01B         	call	_ADC_StartConversion
 10035                           
 10036                           ;adc.c: 116: break;
 10037  00107E  D0BA               	goto	i2l3692
 10038  001080                     i2l3656:
 10039                           
 10040                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10041  001080  0EE4               	movlw	low _Temp_Adc
 10042  001082  6E05               	movwf	??_ADC_ISR& (0+255),c
 10043  001084  0E00               	movlw	high _Temp_Adc
 10044  001086  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10045  001088  90D8               	bcf	status,0,c
 10046  00108A  3438               	rlcf	_ADC_Buffer_Point,w,c
 10047  00108C  6ED9               	movwf	fsr2l,c
 10048  00108E  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10049  001090  6EDA               	movwf	fsr2h,c
 10050  001092  5005               	movf	??_ADC_ISR,w,c
 10051  001094  26D9               	addwf	fsr2l,f,c
 10052  001096  5006               	movf	??_ADC_ISR+1,w,c
 10053  001098  22DA               	addwfc	fsr2h,f,c
 10054  00109A  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10055  00109E  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10056                           
 10057                           ;adc.c: 119: Set_4051(5);
 10058  0010A2  0E00               	movlw	0
 10059  0010A4  6E02               	movwf	Set_4051@Channel+1,c
 10060  0010A6  0E05               	movlw	5
 10061  0010A8  6E01               	movwf	Set_4051@Channel,c
 10062  0010AA  EC38  F01B         	call	_Set_4051	;wreg free
 10063                           
 10064                           ;adc.c: 120: ADC_StartConversion(Temp1);
 10065  0010AE  0E0E               	movlw	14
 10066  0010B0  EC93  F01B         	call	_ADC_StartConversion
 10067                           
 10068                           ;adc.c: 121: break;
 10069  0010B4  D09F               	goto	i2l3692
 10070  0010B6                     i2l3662:
 10071                           
 10072                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10073  0010B6  0EE4               	movlw	low _Temp_Adc
 10074  0010B8  6E05               	movwf	??_ADC_ISR& (0+255),c
 10075  0010BA  0E00               	movlw	high _Temp_Adc
 10076  0010BC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10077  0010BE  90D8               	bcf	status,0,c
 10078  0010C0  3438               	rlcf	_ADC_Buffer_Point,w,c
 10079  0010C2  6ED9               	movwf	fsr2l,c
 10080  0010C4  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10081  0010C6  6EDA               	movwf	fsr2h,c
 10082  0010C8  5005               	movf	??_ADC_ISR,w,c
 10083  0010CA  26D9               	addwf	fsr2l,f,c
 10084  0010CC  5006               	movf	??_ADC_ISR+1,w,c
 10085  0010CE  22DA               	addwfc	fsr2h,f,c
 10086  0010D0  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10087  0010D4  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10088                           
 10089                           ;adc.c: 124: Set_4051(6);
 10090  0010D8  0E00               	movlw	0
 10091  0010DA  6E02               	movwf	Set_4051@Channel+1,c
 10092  0010DC  0E06               	movlw	6
 10093  0010DE  6E01               	movwf	Set_4051@Channel,c
 10094  0010E0  EC38  F01B         	call	_Set_4051	;wreg free
 10095                           
 10096                           ;adc.c: 125: ADC_StartConversion(Temp1);
 10097  0010E4  0E0E               	movlw	14
 10098  0010E6  EC93  F01B         	call	_ADC_StartConversion
 10099                           
 10100                           ;adc.c: 126: break;
 10101  0010EA  D084               	goto	i2l3692
 10102  0010EC                     i2l3668:
 10103                           
 10104                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10105  0010EC  0EE4               	movlw	low _Temp_Adc
 10106  0010EE  6E05               	movwf	??_ADC_ISR& (0+255),c
 10107  0010F0  0E00               	movlw	high _Temp_Adc
 10108  0010F2  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10109  0010F4  90D8               	bcf	status,0,c
 10110  0010F6  3438               	rlcf	_ADC_Buffer_Point,w,c
 10111  0010F8  6ED9               	movwf	fsr2l,c
 10112  0010FA  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10113  0010FC  6EDA               	movwf	fsr2h,c
 10114  0010FE  5005               	movf	??_ADC_ISR,w,c
 10115  001100  26D9               	addwf	fsr2l,f,c
 10116  001102  5006               	movf	??_ADC_ISR+1,w,c
 10117  001104  22DA               	addwfc	fsr2h,f,c
 10118  001106  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10119  00110A  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10120                           
 10121                           ;adc.c: 129: Set_4051(7);
 10122  00110E  0E00               	movlw	0
 10123  001110  6E02               	movwf	Set_4051@Channel+1,c
 10124  001112  0E07               	movlw	7
 10125  001114  6E01               	movwf	Set_4051@Channel,c
 10126  001116  EC38  F01B         	call	_Set_4051	;wreg free
 10127                           
 10128                           ;adc.c: 130: ADC_StartConversion(Temp1);
 10129  00111A  0E0E               	movlw	14
 10130  00111C  EC93  F01B         	call	_ADC_StartConversion
 10131                           
 10132                           ;adc.c: 131: break;
 10133  001120  D069               	goto	i2l3692
 10134  001122                     i2l3674:
 10135                           
 10136                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10137  001122  0EE4               	movlw	low _Temp_Adc
 10138  001124  6E05               	movwf	??_ADC_ISR& (0+255),c
 10139  001126  0E00               	movlw	high _Temp_Adc
 10140  001128  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10141  00112A  90D8               	bcf	status,0,c
 10142  00112C  3438               	rlcf	_ADC_Buffer_Point,w,c
 10143  00112E  6ED9               	movwf	fsr2l,c
 10144  001130  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10145  001132  6EDA               	movwf	fsr2h,c
 10146  001134  5005               	movf	??_ADC_ISR,w,c
 10147  001136  26D9               	addwf	fsr2l,f,c
 10148  001138  5006               	movf	??_ADC_ISR+1,w,c
 10149  00113A  22DA               	addwfc	fsr2h,f,c
 10150  00113C  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10151  001140  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10152                           
 10153                           ;adc.c: 134: Set_4051(0);
 10154  001144  0E00               	movlw	0
 10155  001146  6E02               	movwf	Set_4051@Channel+1,c
 10156  001148  0E00               	movlw	0
 10157  00114A  6E01               	movwf	Set_4051@Channel,c
 10158  00114C  EC38  F01B         	call	_Set_4051	;wreg free
 10159                           
 10160                           ;adc.c: 135: ADC_StartConversion(Temp2);
 10161  001150  0E14               	movlw	20
 10162  001152  EC93  F01B         	call	_ADC_StartConversion
 10163                           
 10164                           ;adc.c: 136: break;
 10165  001156  D04E               	goto	i2l3692
 10166  001158                     i2l3680:
 10167                           
 10168                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10169  001158  0EE4               	movlw	low _Temp_Adc
 10170  00115A  6E05               	movwf	??_ADC_ISR& (0+255),c
 10171  00115C  0E00               	movlw	high _Temp_Adc
 10172  00115E  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10173  001160  90D8               	bcf	status,0,c
 10174  001162  3438               	rlcf	_ADC_Buffer_Point,w,c
 10175  001164  6ED9               	movwf	fsr2l,c
 10176  001166  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10177  001168  6EDA               	movwf	fsr2h,c
 10178  00116A  5005               	movf	??_ADC_ISR,w,c
 10179  00116C  26D9               	addwf	fsr2l,f,c
 10180  00116E  5006               	movf	??_ADC_ISR+1,w,c
 10181  001170  22DA               	addwfc	fsr2h,f,c
 10182  001172  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10183  001176  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10184                           
 10185                           ;adc.c: 139: Set_4051(1);
 10186  00117A  0E00               	movlw	0
 10187  00117C  6E02               	movwf	Set_4051@Channel+1,c
 10188  00117E  0E01               	movlw	1
 10189  001180  6E01               	movwf	Set_4051@Channel,c
 10190  001182  EC38  F01B         	call	_Set_4051	;wreg free
 10191                           
 10192                           ;adc.c: 140: ADC_StartConversion(Temp2);
 10193  001186  0E14               	movlw	20
 10194  001188  EC93  F01B         	call	_ADC_StartConversion
 10195                           
 10196                           ;adc.c: 141: break;
 10197  00118C  D033               	goto	i2l3692
 10198  00118E                     i2l3686:
 10199                           
 10200                           ;adc.c: 143: Temp_Aquire = 0;
 10201  00118E  0E00               	movlw	0
 10202  001190  6E3C               	movwf	_Temp_Aquire,c
 10203                           
 10204                           ;adc.c: 144: Temp_Done = 1;
 10205  001192  0E00               	movlw	0
 10206  001194  0100               	movlb	0	; () banked
 10207  001196  6FDF               	movwf	(_Temp_Done+1)& (0+255),b
 10208  001198  0E01               	movlw	1
 10209  00119A  0100               	movlb	0	; () banked
 10210  00119C  6FDE               	movwf	_Temp_Done& (0+255),b
 10211                           
 10212                           ;adc.c: 145: break;
 10213  00119E  D02A               	goto	i2l3692
 10214  0011A0                     i2l3690:
 10215  0011A0  C038  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 10216  0011A4  C039  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 10217                           
 10218                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10219                           ; Switch size 1, requested type "space"
 10220                           ; Number of cases is 1, Range of values is 0 to 0
 10221                           ; switch strategies available:
 10222                           ; Name         Instructions Cycles
 10223                           ; simple_byte            4     3 (average)
 10224                           ;	Chosen strategy is simple_byte
 10225  0011A8  5006               	movf	??_ADC_ISR+1,w,c
 10226  0011AA  0A00               	xorlw	0	; case 0
 10227  0011AC  A4D8               	btfss	status,2,c
 10228  0011AE  D022               	goto	i2l3692
 10229                           
 10230                           ; Switch size 1, requested type "space"
 10231                           ; Number of cases is 11, Range of values is 0 to 10
 10232                           ; switch strategies available:
 10233                           ; Name         Instructions Cycles
 10234                           ; simple_byte           34    18 (average)
 10235                           ;	Chosen strategy is simple_byte
 10236  0011B0  5005               	movf	??_ADC_ISR,w,c
 10237  0011B2  0A00               	xorlw	0	; case 0
 10238  0011B4  B4D8               	btfsc	status,2,c
 10239  0011B6  D6DD               	goto	i2l3626
 10240  0011B8  0A01               	xorlw	1	; case 1
 10241  0011BA  B4D8               	btfsc	status,2,c
 10242  0011BC  D6F5               	goto	i2l3632
 10243  0011BE  0A03               	xorlw	3	; case 2
 10244  0011C0  B4D8               	btfsc	status,2,c
 10245  0011C2  D70D               	goto	i2l3638
 10246  0011C4  0A01               	xorlw	1	; case 3
 10247  0011C6  B4D8               	btfsc	status,2,c
 10248  0011C8  D725               	goto	i2l3644
 10249  0011CA  0A07               	xorlw	7	; case 4
 10250  0011CC  B4D8               	btfsc	status,2,c
 10251  0011CE  D73D               	goto	i2l3650
 10252  0011D0  0A01               	xorlw	1	; case 5
 10253  0011D2  B4D8               	btfsc	status,2,c
 10254  0011D4  D755               	goto	i2l3656
 10255  0011D6  0A03               	xorlw	3	; case 6
 10256  0011D8  B4D8               	btfsc	status,2,c
 10257  0011DA  D76D               	goto	i2l3662
 10258  0011DC  0A01               	xorlw	1	; case 7
 10259  0011DE  B4D8               	btfsc	status,2,c
 10260  0011E0  D785               	goto	i2l3668
 10261  0011E2  0A0F               	xorlw	15	; case 8
 10262  0011E4  B4D8               	btfsc	status,2,c
 10263  0011E6  D79D               	goto	i2l3674
 10264  0011E8  0A01               	xorlw	1	; case 9
 10265  0011EA  B4D8               	btfsc	status,2,c
 10266  0011EC  D7B5               	goto	i2l3680
 10267  0011EE  0A03               	xorlw	3	; case 10
 10268  0011F0  B4D8               	btfsc	status,2,c
 10269  0011F2  D7CD               	goto	i2l3686
 10270  0011F4                     i2l3692:
 10271                           
 10272                           ;adc.c: 147: ADC_Buffer_Point++;
 10273  0011F4  4A38               	infsnz	_ADC_Buffer_Point,f,c
 10274  0011F6  2A39               	incf	_ADC_Buffer_Point+1,f,c
 10275  0011F8                     i2l3694:
 10276                           
 10277                           ;adc.c: 148: }
 10278                           ;adc.c: 149: if (Volt_Aquire){
 10279  0011F8  503D               	movf	_Volt_Aquire,w,c
 10280  0011FA  B4D8               	btfsc	status,2,c
 10281  0011FC  0012               	return	
 10282                           
 10283                           ;adc.c: 151: ADC_Result = ADC_GetConversionResult();
 10284  0011FE  ECC4  F01B         	call	_ADC_GetConversionResult	;wreg free
 10285  001202  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 10286  001206  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 10287                           
 10288                           ;adc.c: 152: switch ( ADC_Buffer_Point )
 10289  00120A  D18F               	goto	i2l3742
 10290  00120C                     i2l3698:
 10291                           
 10292                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10293  00120C  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 10294  001210  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 10295  001214  0E00               	movlw	0
 10296  001216  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 10297  001218  0EFF               	movlw	255
 10298  00121A  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 10299  00121C  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 10300  00121E  0EB6               	movlw	low _Battery_Adc
 10301  001220  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 10302  001222  0E00               	movlw	high _Battery_Adc
 10303  001224  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 10304  001226  90D8               	bcf	status,0,c
 10305  001228  3438               	rlcf	_ADC_Buffer_Point,w,c
 10306  00122A  6ED9               	movwf	fsr2l,c
 10307  00122C  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10308  00122E  6EDA               	movwf	fsr2h,c
 10309  001230  90D8               	bcf	status,0,c
 10310  001232  36D9               	rlcf	fsr2l,f,c
 10311  001234  36DA               	rlcf	fsr2h,f,c
 10312  001236  5009               	movf	??_ADC_ISR+4,w,c
 10313  001238  26D9               	addwf	fsr2l,f,c
 10314  00123A  500A               	movf	??_ADC_ISR+5,w,c
 10315  00123C  22DA               	addwfc	fsr2h,f,c
 10316  00123E  C005  FFDE         	movff	??_ADC_ISR,postinc2
 10317  001242  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 10318  001246  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 10319  00124A  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 10320  00124E  06D9               	decf	fsr2l,f,c
 10321  001250  06D9               	decf	fsr2l,f,c
 10322                           
 10323                           ;adc.c: 156: ADC_StartConversion(Battery1);
 10324  001252  0E01               	movlw	1
 10325  001254  EC93  F01B         	call	_ADC_StartConversion
 10326                           
 10327                           ;adc.c: 157: break;
 10328  001258  D192               	goto	i2l3744
 10329  00125A                     i2l3702:
 10330                           
 10331                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10332  00125A  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 10333  00125E  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 10334  001262  0E00               	movlw	0
 10335  001264  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 10336  001266  0EFF               	movlw	255
 10337  001268  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 10338  00126A  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 10339  00126C  0EB6               	movlw	low _Battery_Adc
 10340  00126E  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 10341  001270  0E00               	movlw	high _Battery_Adc
 10342  001272  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 10343  001274  90D8               	bcf	status,0,c
 10344  001276  3438               	rlcf	_ADC_Buffer_Point,w,c
 10345  001278  6ED9               	movwf	fsr2l,c
 10346  00127A  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10347  00127C  6EDA               	movwf	fsr2h,c
 10348  00127E  90D8               	bcf	status,0,c
 10349  001280  36D9               	rlcf	fsr2l,f,c
 10350  001282  36DA               	rlcf	fsr2h,f,c
 10351  001284  5009               	movf	??_ADC_ISR+4,w,c
 10352  001286  26D9               	addwf	fsr2l,f,c
 10353  001288  500A               	movf	??_ADC_ISR+5,w,c
 10354  00128A  22DA               	addwfc	fsr2h,f,c
 10355  00128C  C005  FFDE         	movff	??_ADC_ISR,postinc2
 10356  001290  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 10357  001294  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 10358  001298  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 10359  00129C  06D9               	decf	fsr2l,f,c
 10360  00129E  06D9               	decf	fsr2l,f,c
 10361                           
 10362                           ;adc.c: 160: ADC_StartConversion(Battery2);
 10363  0012A0  0E03               	movlw	3
 10364  0012A2  EC93  F01B         	call	_ADC_StartConversion
 10365                           
 10366                           ;adc.c: 161: break;
 10367  0012A6  D16B               	goto	i2l3744
 10368  0012A8                     i2l3706:
 10369                           
 10370                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10371  0012A8  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 10372  0012AC  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 10373  0012B0  0E00               	movlw	0
 10374  0012B2  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 10375  0012B4  0EFF               	movlw	255
 10376  0012B6  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 10377  0012B8  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 10378  0012BA  0EB6               	movlw	low _Battery_Adc
 10379  0012BC  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 10380  0012BE  0E00               	movlw	high _Battery_Adc
 10381  0012C0  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 10382  0012C2  90D8               	bcf	status,0,c
 10383  0012C4  3438               	rlcf	_ADC_Buffer_Point,w,c
 10384  0012C6  6ED9               	movwf	fsr2l,c
 10385  0012C8  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10386  0012CA  6EDA               	movwf	fsr2h,c
 10387  0012CC  90D8               	bcf	status,0,c
 10388  0012CE  36D9               	rlcf	fsr2l,f,c
 10389  0012D0  36DA               	rlcf	fsr2h,f,c
 10390  0012D2  5009               	movf	??_ADC_ISR+4,w,c
 10391  0012D4  26D9               	addwf	fsr2l,f,c
 10392  0012D6  500A               	movf	??_ADC_ISR+5,w,c
 10393  0012D8  22DA               	addwfc	fsr2h,f,c
 10394  0012DA  C005  FFDE         	movff	??_ADC_ISR,postinc2
 10395  0012DE  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 10396  0012E2  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 10397  0012E6  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 10398  0012EA  06D9               	decf	fsr2l,f,c
 10399  0012EC  06D9               	decf	fsr2l,f,c
 10400                           
 10401                           ;adc.c: 164: ADC_StartConversion(Battery3);
 10402  0012EE  0E04               	movlw	4
 10403  0012F0  EC93  F01B         	call	_ADC_StartConversion
 10404                           
 10405                           ;adc.c: 165: break;
 10406  0012F4  D144               	goto	i2l3744
 10407  0012F6                     i2l3710:
 10408                           
 10409                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10410  0012F6  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 10411  0012FA  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 10412  0012FE  0E00               	movlw	0
 10413  001300  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 10414  001302  0EFF               	movlw	255
 10415  001304  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 10416  001306  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 10417  001308  0EB6               	movlw	low _Battery_Adc
 10418  00130A  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 10419  00130C  0E00               	movlw	high _Battery_Adc
 10420  00130E  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 10421  001310  90D8               	bcf	status,0,c
 10422  001312  3438               	rlcf	_ADC_Buffer_Point,w,c
 10423  001314  6ED9               	movwf	fsr2l,c
 10424  001316  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10425  001318  6EDA               	movwf	fsr2h,c
 10426  00131A  90D8               	bcf	status,0,c
 10427  00131C  36D9               	rlcf	fsr2l,f,c
 10428  00131E  36DA               	rlcf	fsr2h,f,c
 10429  001320  5009               	movf	??_ADC_ISR+4,w,c
 10430  001322  26D9               	addwf	fsr2l,f,c
 10431  001324  500A               	movf	??_ADC_ISR+5,w,c
 10432  001326  22DA               	addwfc	fsr2h,f,c
 10433  001328  C005  FFDE         	movff	??_ADC_ISR,postinc2
 10434  00132C  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 10435  001330  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 10436  001334  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 10437  001338  06D9               	decf	fsr2l,f,c
 10438  00133A  06D9               	decf	fsr2l,f,c
 10439                           
 10440                           ;adc.c: 168: ADC_StartConversion(Battery4);
 10441  00133C  0E05               	movlw	5
 10442  00133E  EC93  F01B         	call	_ADC_StartConversion
 10443                           
 10444                           ;adc.c: 169: break;
 10445  001342  D11D               	goto	i2l3744
 10446  001344                     i2l3714:
 10447                           
 10448                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10449  001344  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 10450  001348  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 10451  00134C  0E00               	movlw	0
 10452  00134E  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 10453  001350  0EFF               	movlw	255
 10454  001352  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 10455  001354  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 10456  001356  0EB6               	movlw	low _Battery_Adc
 10457  001358  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 10458  00135A  0E00               	movlw	high _Battery_Adc
 10459  00135C  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 10460  00135E  90D8               	bcf	status,0,c
 10461  001360  3438               	rlcf	_ADC_Buffer_Point,w,c
 10462  001362  6ED9               	movwf	fsr2l,c
 10463  001364  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10464  001366  6EDA               	movwf	fsr2h,c
 10465  001368  90D8               	bcf	status,0,c
 10466  00136A  36D9               	rlcf	fsr2l,f,c
 10467  00136C  36DA               	rlcf	fsr2h,f,c
 10468  00136E  5009               	movf	??_ADC_ISR+4,w,c
 10469  001370  26D9               	addwf	fsr2l,f,c
 10470  001372  500A               	movf	??_ADC_ISR+5,w,c
 10471  001374  22DA               	addwfc	fsr2h,f,c
 10472  001376  C005  FFDE         	movff	??_ADC_ISR,postinc2
 10473  00137A  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 10474  00137E  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 10475  001382  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 10476  001386  06D9               	decf	fsr2l,f,c
 10477  001388  06D9               	decf	fsr2l,f,c
 10478                           
 10479                           ;adc.c: 172: ADC_StartConversion(Battery5);
 10480  00138A  0E18               	movlw	24
 10481  00138C  EC93  F01B         	call	_ADC_StartConversion
 10482                           
 10483                           ;adc.c: 173: break;
 10484  001390  D0F6               	goto	i2l3744
 10485  001392                     i2l3718:
 10486                           
 10487                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10488  001392  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 10489  001396  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 10490  00139A  0E00               	movlw	0
 10491  00139C  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 10492  00139E  0EFF               	movlw	255
 10493  0013A0  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 10494  0013A2  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 10495  0013A4  0EB6               	movlw	low _Battery_Adc
 10496  0013A6  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 10497  0013A8  0E00               	movlw	high _Battery_Adc
 10498  0013AA  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 10499  0013AC  90D8               	bcf	status,0,c
 10500  0013AE  3438               	rlcf	_ADC_Buffer_Point,w,c
 10501  0013B0  6ED9               	movwf	fsr2l,c
 10502  0013B2  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10503  0013B4  6EDA               	movwf	fsr2h,c
 10504  0013B6  90D8               	bcf	status,0,c
 10505  0013B8  36D9               	rlcf	fsr2l,f,c
 10506  0013BA  36DA               	rlcf	fsr2h,f,c
 10507  0013BC  5009               	movf	??_ADC_ISR+4,w,c
 10508  0013BE  26D9               	addwf	fsr2l,f,c
 10509  0013C0  500A               	movf	??_ADC_ISR+5,w,c
 10510  0013C2  22DA               	addwfc	fsr2h,f,c
 10511  0013C4  C005  FFDE         	movff	??_ADC_ISR,postinc2
 10512  0013C8  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 10513  0013CC  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 10514  0013D0  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 10515  0013D4  06D9               	decf	fsr2l,f,c
 10516  0013D6  06D9               	decf	fsr2l,f,c
 10517                           
 10518                           ;adc.c: 176: ADC_StartConversion(Battery6);
 10519  0013D8  0E1A               	movlw	26
 10520  0013DA  EC93  F01B         	call	_ADC_StartConversion
 10521                           
 10522                           ;adc.c: 177: break;
 10523  0013DE  D0CF               	goto	i2l3744
 10524  0013E0                     i2l3722:
 10525                           
 10526                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10527  0013E0  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 10528  0013E4  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 10529  0013E8  0E00               	movlw	0
 10530  0013EA  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 10531  0013EC  0EFF               	movlw	255
 10532  0013EE  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 10533  0013F0  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 10534  0013F2  0EB6               	movlw	low _Battery_Adc
 10535  0013F4  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 10536  0013F6  0E00               	movlw	high _Battery_Adc
 10537  0013F8  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 10538  0013FA  90D8               	bcf	status,0,c
 10539  0013FC  3438               	rlcf	_ADC_Buffer_Point,w,c
 10540  0013FE  6ED9               	movwf	fsr2l,c
 10541  001400  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10542  001402  6EDA               	movwf	fsr2h,c
 10543  001404  90D8               	bcf	status,0,c
 10544  001406  36D9               	rlcf	fsr2l,f,c
 10545  001408  36DA               	rlcf	fsr2h,f,c
 10546  00140A  5009               	movf	??_ADC_ISR+4,w,c
 10547  00140C  26D9               	addwf	fsr2l,f,c
 10548  00140E  500A               	movf	??_ADC_ISR+5,w,c
 10549  001410  22DA               	addwfc	fsr2h,f,c
 10550  001412  C005  FFDE         	movff	??_ADC_ISR,postinc2
 10551  001416  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 10552  00141A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 10553  00141E  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 10554  001422  06D9               	decf	fsr2l,f,c
 10555  001424  06D9               	decf	fsr2l,f,c
 10556                           
 10557                           ;adc.c: 180: ADC_StartConversion(Battery7);
 10558  001426  0E1B               	movlw	27
 10559  001428  EC93  F01B         	call	_ADC_StartConversion
 10560                           
 10561                           ;adc.c: 181: break;
 10562  00142C  D0A8               	goto	i2l3744
 10563  00142E                     i2l3726:
 10564                           
 10565                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10566  00142E  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 10567  001432  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 10568  001436  0E00               	movlw	0
 10569  001438  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 10570  00143A  0EFF               	movlw	255
 10571  00143C  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 10572  00143E  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 10573  001440  0EB6               	movlw	low _Battery_Adc
 10574  001442  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 10575  001444  0E00               	movlw	high _Battery_Adc
 10576  001446  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 10577  001448  90D8               	bcf	status,0,c
 10578  00144A  3438               	rlcf	_ADC_Buffer_Point,w,c
 10579  00144C  6ED9               	movwf	fsr2l,c
 10580  00144E  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10581  001450  6EDA               	movwf	fsr2h,c
 10582  001452  90D8               	bcf	status,0,c
 10583  001454  36D9               	rlcf	fsr2l,f,c
 10584  001456  36DA               	rlcf	fsr2h,f,c
 10585  001458  5009               	movf	??_ADC_ISR+4,w,c
 10586  00145A  26D9               	addwf	fsr2l,f,c
 10587  00145C  500A               	movf	??_ADC_ISR+5,w,c
 10588  00145E  22DA               	addwfc	fsr2h,f,c
 10589  001460  C005  FFDE         	movff	??_ADC_ISR,postinc2
 10590  001464  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 10591  001468  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 10592  00146C  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 10593  001470  06D9               	decf	fsr2l,f,c
 10594  001472  06D9               	decf	fsr2l,f,c
 10595                           
 10596                           ;adc.c: 184: ADC_StartConversion(Battery8);
 10597  001474  0E08               	movlw	8
 10598  001476  EC93  F01B         	call	_ADC_StartConversion
 10599                           
 10600                           ;adc.c: 185: break;
 10601  00147A  D081               	goto	i2l3744
 10602  00147C                     i2l3730:
 10603                           
 10604                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10605  00147C  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 10606  001480  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 10607  001484  0E00               	movlw	0
 10608  001486  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 10609  001488  0EFF               	movlw	255
 10610  00148A  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 10611  00148C  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 10612  00148E  0EB6               	movlw	low _Battery_Adc
 10613  001490  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 10614  001492  0E00               	movlw	high _Battery_Adc
 10615  001494  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 10616  001496  90D8               	bcf	status,0,c
 10617  001498  3438               	rlcf	_ADC_Buffer_Point,w,c
 10618  00149A  6ED9               	movwf	fsr2l,c
 10619  00149C  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10620  00149E  6EDA               	movwf	fsr2h,c
 10621  0014A0  90D8               	bcf	status,0,c
 10622  0014A2  36D9               	rlcf	fsr2l,f,c
 10623  0014A4  36DA               	rlcf	fsr2h,f,c
 10624  0014A6  5009               	movf	??_ADC_ISR+4,w,c
 10625  0014A8  26D9               	addwf	fsr2l,f,c
 10626  0014AA  500A               	movf	??_ADC_ISR+5,w,c
 10627  0014AC  22DA               	addwfc	fsr2h,f,c
 10628  0014AE  C005  FFDE         	movff	??_ADC_ISR,postinc2
 10629  0014B2  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 10630  0014B6  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 10631  0014BA  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 10632  0014BE  06D9               	decf	fsr2l,f,c
 10633  0014C0  06D9               	decf	fsr2l,f,c
 10634                           
 10635                           ;adc.c: 188: ADC_StartConversion(Battery9);
 10636  0014C2  0E0B               	movlw	11
 10637  0014C4  EC93  F01B         	call	_ADC_StartConversion
 10638                           
 10639                           ;adc.c: 189: break;
 10640  0014C8  D05A               	goto	i2l3744
 10641  0014CA                     i2l3734:
 10642                           
 10643                           ;adc.c: 191: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10644  0014CA  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 10645  0014CE  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 10646  0014D2  0E00               	movlw	0
 10647  0014D4  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 10648  0014D6  0EFF               	movlw	255
 10649  0014D8  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 10650  0014DA  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 10651  0014DC  0EB6               	movlw	low _Battery_Adc
 10652  0014DE  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 10653  0014E0  0E00               	movlw	high _Battery_Adc
 10654  0014E2  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 10655  0014E4  90D8               	bcf	status,0,c
 10656  0014E6  3438               	rlcf	_ADC_Buffer_Point,w,c
 10657  0014E8  6ED9               	movwf	fsr2l,c
 10658  0014EA  3439               	rlcf	_ADC_Buffer_Point+1,w,c
 10659  0014EC  6EDA               	movwf	fsr2h,c
 10660  0014EE  90D8               	bcf	status,0,c
 10661  0014F0  36D9               	rlcf	fsr2l,f,c
 10662  0014F2  36DA               	rlcf	fsr2h,f,c
 10663  0014F4  5009               	movf	??_ADC_ISR+4,w,c
 10664  0014F6  26D9               	addwf	fsr2l,f,c
 10665  0014F8  500A               	movf	??_ADC_ISR+5,w,c
 10666  0014FA  22DA               	addwfc	fsr2h,f,c
 10667  0014FC  C005  FFDE         	movff	??_ADC_ISR,postinc2
 10668  001500  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 10669  001504  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 10670  001508  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 10671  00150C  06D9               	decf	fsr2l,f,c
 10672  00150E  06D9               	decf	fsr2l,f,c
 10673                           
 10674                           ;adc.c: 192: ADC_StartConversion(Battery10);
 10675  001510  0E0D               	movlw	13
 10676  001512  EC93  F01B         	call	_ADC_StartConversion
 10677                           
 10678                           ;adc.c: 193: break;
 10679  001516  D033               	goto	i2l3744
 10680  001518                     i2l3738:
 10681                           
 10682                           ;adc.c: 195: Volt_Aquire = 0;
 10683  001518  0E00               	movlw	0
 10684  00151A  6E3D               	movwf	_Volt_Aquire,c
 10685                           
 10686                           ;adc.c: 196: Volt_Done = 1;
 10687  00151C  0E00               	movlw	0
 10688  00151E  0100               	movlb	0	; () banked
 10689  001520  6FE1               	movwf	(_Volt_Done+1)& (0+255),b
 10690  001522  0E01               	movlw	1
 10691  001524  0100               	movlb	0	; () banked
 10692  001526  6FE0               	movwf	_Volt_Done& (0+255),b
 10693                           
 10694                           ;adc.c: 197: break;
 10695  001528  D02A               	goto	i2l3744
 10696  00152A                     i2l3742:
 10697  00152A  C038  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 10698  00152E  C039  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 10699                           
 10700                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10701                           ; Switch size 1, requested type "space"
 10702                           ; Number of cases is 1, Range of values is 0 to 0
 10703                           ; switch strategies available:
 10704                           ; Name         Instructions Cycles
 10705                           ; simple_byte            4     3 (average)
 10706                           ;	Chosen strategy is simple_byte
 10707  001532  5006               	movf	??_ADC_ISR+1,w,c
 10708  001534  0A00               	xorlw	0	; case 0
 10709  001536  A4D8               	btfss	status,2,c
 10710  001538  D022               	goto	i2l3744
 10711                           
 10712                           ; Switch size 1, requested type "space"
 10713                           ; Number of cases is 11, Range of values is 0 to 10
 10714                           ; switch strategies available:
 10715                           ; Name         Instructions Cycles
 10716                           ; simple_byte           34    18 (average)
 10717                           ;	Chosen strategy is simple_byte
 10718  00153A  5005               	movf	??_ADC_ISR,w,c
 10719  00153C  0A00               	xorlw	0	; case 0
 10720  00153E  B4D8               	btfsc	status,2,c
 10721  001540  D665               	goto	i2l3698
 10722  001542  0A01               	xorlw	1	; case 1
 10723  001544  B4D8               	btfsc	status,2,c
 10724  001546  D689               	goto	i2l3702
 10725  001548  0A03               	xorlw	3	; case 2
 10726  00154A  B4D8               	btfsc	status,2,c
 10727  00154C  D6AD               	goto	i2l3706
 10728  00154E  0A01               	xorlw	1	; case 3
 10729  001550  B4D8               	btfsc	status,2,c
 10730  001552  D6D1               	goto	i2l3710
 10731  001554  0A07               	xorlw	7	; case 4
 10732  001556  B4D8               	btfsc	status,2,c
 10733  001558  D6F5               	goto	i2l3714
 10734  00155A  0A01               	xorlw	1	; case 5
 10735  00155C  B4D8               	btfsc	status,2,c
 10736  00155E  D719               	goto	i2l3718
 10737  001560  0A03               	xorlw	3	; case 6
 10738  001562  B4D8               	btfsc	status,2,c
 10739  001564  D73D               	goto	i2l3722
 10740  001566  0A01               	xorlw	1	; case 7
 10741  001568  B4D8               	btfsc	status,2,c
 10742  00156A  D761               	goto	i2l3726
 10743  00156C  0A0F               	xorlw	15	; case 8
 10744  00156E  B4D8               	btfsc	status,2,c
 10745  001570  D785               	goto	i2l3730
 10746  001572  0A01               	xorlw	1	; case 9
 10747  001574  B4D8               	btfsc	status,2,c
 10748  001576  D7A9               	goto	i2l3734
 10749  001578  0A03               	xorlw	3	; case 10
 10750  00157A  B4D8               	btfsc	status,2,c
 10751  00157C  D7CD               	goto	i2l3738
 10752  00157E                     i2l3744:
 10753                           
 10754                           ;adc.c: 199: ADC_Buffer_Point++;
 10755  00157E  4A38               	infsnz	_ADC_Buffer_Point,f,c
 10756  001580  2A39               	incf	_ADC_Buffer_Point+1,f,c
 10757  001582  0012               	return	
 10758  001584                     __end_of_ADC_ISR:
 10759                           	opt stack 0
 10760                           pclatu	equ	0xFFB
 10761                           pclath	equ	0xFFA
 10762                           tblptru	equ	0xFF8
 10763                           tblptrh	equ	0xFF7
 10764                           tblptrl	equ	0xFF6
 10765                           tablat	equ	0xFF5
 10766                           prodh	equ	0xFF4
 10767                           prodl	equ	0xFF3
 10768                           intcon	equ	0xFF2
 10769                           intcon2	equ	0xFF1
 10770                           postinc0	equ	0xFEE
 10771                           fsr0h	equ	0xFEA
 10772                           fsr0l	equ	0xFE9
 10773                           wreg	equ	0xFE8
 10774                           postinc1	equ	0xFE6
 10775                           postdec1	equ	0xFE5
 10776                           fsr1h	equ	0xFE2
 10777                           fsr1l	equ	0xFE1
 10778                           indf2	equ	0xFDF
 10779                           postinc2	equ	0xFDE
 10780                           postdec2	equ	0xFDD
 10781                           fsr2h	equ	0xFDA
 10782                           fsr2l	equ	0xFD9
 10783                           status	equ	0xFD8
 10784                           
 10785 ;; *************** function _Set_4051 *****************
 10786 ;; Defined at:
 10787 ;;		line 10 in file "Functions.c"
 10788 ;; Parameters:    Size  Location     Type
 10789 ;;  Channel         2    0[COMRAM] int 
 10790 ;; Auto vars:     Size  Location     Type
 10791 ;;		None
 10792 ;; Return value:  Size  Location     Type
 10793 ;;		None               void
 10794 ;; Registers used:
 10795 ;;		wreg, status,2, status,0
 10796 ;; Tracked objects:
 10797 ;;		On entry : 0/0
 10798 ;;		On exit  : 0/0
 10799 ;;		Unchanged: 0/0
 10800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10801 ;;      Params:         2       0       0       0       0       0       0
 10802 ;;      Locals:         0       0       0       0       0       0       0
 10803 ;;      Temps:          2       0       0       0       0       0       0
 10804 ;;      Totals:         4       0       0       0       0       0       0
 10805 ;;Total ram usage:        4 bytes
 10806 ;; Hardware stack levels used:    1
 10807 ;; This function calls:
 10808 ;;		Nothing
 10809 ;; This function is called by:
 10810 ;;		_ADC_ISR
 10811 ;; This function uses a non-reentrant model
 10812 ;;
 10813                           
 10814                           	psect	text48
 10815  003670                     __ptext48:
 10816                           	opt stack 0
 10817  003670                     _Set_4051:
 10818                           	opt stack 23
 10819                           
 10820                           ;Functions.c: 12: if (Channel & 0x01)
 10821                           
 10822                           ;incstack = 0
 10823  003670  B001               	btfsc	Set_4051@Channel,0,c
 10824                           
 10825                           ;Functions.c: 13: {
 10826                           ;Functions.c: 14: do { LATA6 = ~LATA6; } while(0);
 10827  003672  7C89               	btg	3977,6,c	;volatile
 10828                           
 10829                           ;Functions.c: 15: }
 10830                           ;Functions.c: 16: if ((Channel>>1) & 0x01)
 10831  003674  3402               	rlcf	Set_4051@Channel+1,w,c
 10832  003676  3002               	rrcf	Set_4051@Channel+1,w,c
 10833  003678  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 10834  00367A  3001               	rrcf	Set_4051@Channel,w,c
 10835  00367C  6E03               	movwf	??_Set_4051& (0+255),c
 10836  00367E  B003               	btfsc	??_Set_4051,0,c
 10837                           
 10838                           ;Functions.c: 17: {
 10839                           ;Functions.c: 18: do { LATC0 = ~LATC0; } while(0);
 10840  003680  708B               	btg	3979,0,c	;volatile
 10841                           
 10842                           ;Functions.c: 19: }
 10843                           ;Functions.c: 20: if ((Channel>>2) & 0x01)
 10844  003682  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 10845  003686  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 10846  00368A  3404               	rlcf	??_Set_4051+1,w,c
 10847  00368C  3204               	rrcf	??_Set_4051+1,f,c
 10848  00368E  3203               	rrcf	??_Set_4051,f,c
 10849  003690  3404               	rlcf	??_Set_4051+1,w,c
 10850  003692  3204               	rrcf	??_Set_4051+1,f,c
 10851  003694  3203               	rrcf	??_Set_4051,f,c
 10852  003696  A003               	btfss	??_Set_4051,0,c
 10853  003698  0012               	return	
 10854                           
 10855                           ;Functions.c: 21: {
 10856                           ;Functions.c: 22: do { LATC1 = ~LATC1; } while(0);
 10857  00369A  728B               	btg	3979,1,c	;volatile
 10858  00369C  0012               	return	
 10859  00369E                     __end_of_Set_4051:
 10860                           	opt stack 0
 10861                           pclatu	equ	0xFFB
 10862                           pclath	equ	0xFFA
 10863                           tblptru	equ	0xFF8
 10864                           tblptrh	equ	0xFF7
 10865                           tblptrl	equ	0xFF6
 10866                           tablat	equ	0xFF5
 10867                           prodh	equ	0xFF4
 10868                           prodl	equ	0xFF3
 10869                           intcon	equ	0xFF2
 10870                           intcon2	equ	0xFF1
 10871                           postinc0	equ	0xFEE
 10872                           fsr0h	equ	0xFEA
 10873                           fsr0l	equ	0xFE9
 10874                           wreg	equ	0xFE8
 10875                           postinc1	equ	0xFE6
 10876                           postdec1	equ	0xFE5
 10877                           fsr1h	equ	0xFE2
 10878                           fsr1l	equ	0xFE1
 10879                           indf2	equ	0xFDF
 10880                           postinc2	equ	0xFDE
 10881                           postdec2	equ	0xFDD
 10882                           fsr2h	equ	0xFDA
 10883                           fsr2l	equ	0xFD9
 10884                           status	equ	0xFD8
 10885                           
 10886 ;; *************** function _ADC_StartConversion *****************
 10887 ;; Defined at:
 10888 ;;		line 36 in file "mcc_generated_files/adc.c"
 10889 ;; Parameters:    Size  Location     Type
 10890 ;;  channel         1    wreg     enum E8837
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;  channel         1    1[COMRAM] enum E8837
 10893 ;; Return value:  Size  Location     Type
 10894 ;;		None               void
 10895 ;; Registers used:
 10896 ;;		wreg, status,2, status,0
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10902 ;;      Params:         0       0       0       0       0       0       0
 10903 ;;      Locals:         1       0       0       0       0       0       0
 10904 ;;      Temps:          1       0       0       0       0       0       0
 10905 ;;      Totals:         2       0       0       0       0       0       0
 10906 ;;Total ram usage:        2 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; This function calls:
 10909 ;;		Nothing
 10910 ;; This function is called by:
 10911 ;;		_ADC_ISR
 10912 ;;		_Battery_Read
 10913 ;;		_Temp_Read
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           
 10917                           	psect	text49
 10918  003726                     __ptext49:
 10919                           	opt stack 0
 10920  003726                     _ADC_StartConversion:
 10921                           	opt stack 22
 10922                           
 10923                           ;incstack = 0
 10924                           ;ADC_StartConversion@channel stored from wreg
 10925  003726  6E02               	movwf	ADC_StartConversion@channel,c
 10926                           
 10927                           ;adc.c: 39: ADCON0bits.CHS = channel;
 10928  003728  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 10929  00372C  4601               	rlncf	??_ADC_StartConversion,f,c
 10930  00372E  4601               	rlncf	??_ADC_StartConversion,f,c
 10931  003730  50C2               	movf	4034,w,c	;volatile
 10932  003732  1801               	xorwf	??_ADC_StartConversion,w,c
 10933  003734  0B83               	andlw	-125
 10934  003736  1801               	xorwf	??_ADC_StartConversion,w,c
 10935  003738  6EC2               	movwf	4034,c	;volatile
 10936                           
 10937                           ;adc.c: 42: ADCON0bits.ADON = 1;
 10938  00373A  80C2               	bsf	4034,0,c	;volatile
 10939                           
 10940                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
 10941  00373C  82C2               	bsf	4034,1,c	;volatile
 10942  00373E  0012               	return	
 10943  003740                     __end_of_ADC_StartConversion:
 10944                           	opt stack 0
 10945                           pclatu	equ	0xFFB
 10946                           pclath	equ	0xFFA
 10947                           tblptru	equ	0xFF8
 10948                           tblptrh	equ	0xFF7
 10949                           tblptrl	equ	0xFF6
 10950                           tablat	equ	0xFF5
 10951                           prodh	equ	0xFF4
 10952                           prodl	equ	0xFF3
 10953                           intcon	equ	0xFF2
 10954                           intcon2	equ	0xFF1
 10955                           postinc0	equ	0xFEE
 10956                           fsr0h	equ	0xFEA
 10957                           fsr0l	equ	0xFE9
 10958                           wreg	equ	0xFE8
 10959                           postinc1	equ	0xFE6
 10960                           postdec1	equ	0xFE5
 10961                           fsr1h	equ	0xFE2
 10962                           fsr1l	equ	0xFE1
 10963                           indf2	equ	0xFDF
 10964                           postinc2	equ	0xFDE
 10965                           postdec2	equ	0xFDD
 10966                           fsr2h	equ	0xFDA
 10967                           fsr2l	equ	0xFD9
 10968                           status	equ	0xFD8
 10969                           
 10970 ;; *************** function _ADC_GetConversionResult *****************
 10971 ;; Defined at:
 10972 ;;		line 55 in file "mcc_generated_files/adc.c"
 10973 ;; Parameters:    Size  Location     Type
 10974 ;;		None
 10975 ;; Auto vars:     Size  Location     Type
 10976 ;;		None
 10977 ;; Return value:  Size  Location     Type
 10978 ;;                  2    0[COMRAM] unsigned int 
 10979 ;; Registers used:
 10980 ;;		wreg, status,2, status,0
 10981 ;; Tracked objects:
 10982 ;;		On entry : 0/0
 10983 ;;		On exit  : 0/0
 10984 ;;		Unchanged: 0/0
 10985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10986 ;;      Params:         2       0       0       0       0       0       0
 10987 ;;      Locals:         0       0       0       0       0       0       0
 10988 ;;      Temps:          2       0       0       0       0       0       0
 10989 ;;      Totals:         4       0       0       0       0       0       0
 10990 ;;Total ram usage:        4 bytes
 10991 ;; Hardware stack levels used:    1
 10992 ;; This function calls:
 10993 ;;		Nothing
 10994 ;; This function is called by:
 10995 ;;		_ADC_ISR
 10996 ;; This function uses a non-reentrant model
 10997 ;;
 10998                           
 10999                           	psect	text50
 11000  003788                     __ptext50:
 11001                           	opt stack 0
 11002  003788                     _ADC_GetConversionResult:
 11003                           	opt stack 23
 11004                           
 11005                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
 11006                           
 11007                           ;incstack = 0
 11008  003788  50C4               	movf	4036,w,c	;volatile
 11009  00378A  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 11010  00378C  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 11011  00378E  50C3               	movf	4035,w,c	;volatile
 11012  003790  2403               	addwf	??_ADC_GetConversionResult,w,c
 11013  003792  6E01               	movwf	?_ADC_GetConversionResult,c
 11014  003794  0E00               	movlw	0
 11015  003796  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 11016  003798  6E02               	movwf	?_ADC_GetConversionResult+1,c
 11017  00379A  0012               	return	
 11018  00379C                     __end_of_ADC_GetConversionResult:
 11019                           	opt stack 0
 11020                           pclatu	equ	0xFFB
 11021                           pclath	equ	0xFFA
 11022                           tblptru	equ	0xFF8
 11023                           tblptrh	equ	0xFF7
 11024                           tblptrl	equ	0xFF6
 11025                           tablat	equ	0xFF5
 11026                           prodh	equ	0xFF4
 11027                           prodl	equ	0xFF3
 11028                           intcon	equ	0xFF2
 11029                           intcon2	equ	0xFF1
 11030                           postinc0	equ	0xFEE
 11031                           fsr0h	equ	0xFEA
 11032                           fsr0l	equ	0xFE9
 11033                           wreg	equ	0xFE8
 11034                           postinc1	equ	0xFE6
 11035                           postdec1	equ	0xFE5
 11036                           fsr1h	equ	0xFE2
 11037                           fsr1l	equ	0xFE1
 11038                           indf2	equ	0xFDF
 11039                           postinc2	equ	0xFDE
 11040                           postdec2	equ	0xFDD
 11041                           fsr2h	equ	0xFDA
 11042                           fsr2l	equ	0xFD9
 11043                           status	equ	0xFD8
 11044                           pclatu	equ	0xFFB
 11045                           pclath	equ	0xFFA
 11046                           tblptru	equ	0xFF8
 11047                           tblptrh	equ	0xFF7
 11048                           tblptrl	equ	0xFF6
 11049                           tablat	equ	0xFF5
 11050                           prodh	equ	0xFF4
 11051                           prodl	equ	0xFF3
 11052                           intcon	equ	0xFF2
 11053                           intcon2	equ	0xFF1
 11054                           postinc0	equ	0xFEE
 11055                           fsr0h	equ	0xFEA
 11056                           fsr0l	equ	0xFE9
 11057                           wreg	equ	0xFE8
 11058                           postinc1	equ	0xFE6
 11059                           postdec1	equ	0xFE5
 11060                           fsr1h	equ	0xFE2
 11061                           fsr1l	equ	0xFE1
 11062                           indf2	equ	0xFDF
 11063                           postinc2	equ	0xFDE
 11064                           postdec2	equ	0xFDD
 11065                           fsr2h	equ	0xFDA
 11066                           fsr2l	equ	0xFD9
 11067                           status	equ	0xFD8
 11068                           
 11069                           	psect	rparam
 11070  0000                     pclatu	equ	0xFFB
 11071                           pclath	equ	0xFFA
 11072                           tblptru	equ	0xFF8
 11073                           tblptrh	equ	0xFF7
 11074                           tblptrl	equ	0xFF6
 11075                           tablat	equ	0xFF5
 11076                           prodh	equ	0xFF4
 11077                           prodl	equ	0xFF3
 11078                           intcon	equ	0xFF2
 11079                           intcon2	equ	0xFF1
 11080                           postinc0	equ	0xFEE
 11081                           fsr0h	equ	0xFEA
 11082                           fsr0l	equ	0xFE9
 11083                           wreg	equ	0xFE8
 11084                           postinc1	equ	0xFE6
 11085                           postdec1	equ	0xFE5
 11086                           fsr1h	equ	0xFE2
 11087                           fsr1l	equ	0xFE1
 11088                           indf2	equ	0xFDF
 11089                           postinc2	equ	0xFDE
 11090                           postdec2	equ	0xFDD
 11091                           fsr2h	equ	0xFDA
 11092                           fsr2l	equ	0xFD9
 11093                           status	equ	0xFD8


Data Sizes:
    Strings     36
    Constant    145
    Data        0
    BSS         315
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      69
    BANK0           160     86     152
    BANK1           256      0     230
    BANK2           256     35      35
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[19]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S1026$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _printf->___llmod
    _putch->_EUSART1_Write
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _Temp_Fault->___wmul
    _Temp_Convert->___ftdiv
    ___awtoft->___awdiv
    ___awdiv->___awmod
    _Battery_Get->___wmul
    _Battery_Fault->___wmul
    ___ftge->___wmul
    _Battery_Convert->___ftdiv
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___altoft->___ftpack

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _Temp_Read->_ADC_StartConversion
    _Battery_Read->_ADC_StartConversion
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Temp_Convert
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    _Temp_Fault->___ftge
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _Battery_Fault->___ftge
    _Battery_Convert->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5  201094
                                             77 BANK0      9     4      5
                    _Battery_Convert
                      _Battery_Fault
                        _Battery_Get
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              54    47      7   71247
                                             55 BANK0     13     6      7
                                              0 BANK2     35    35      0
                        _Battery_Get (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   17396
                                             27 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   17117
                                             27 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1819
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     608
                                             26 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          16    10      6     827
                                             26 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2732
                                             34 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     848
                                             39 COMRAM     8     0      8
                                              0 BANK0      1     1      0
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     703
                                             26 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     602
                                             34 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                             26 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    7164
                                              9 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        11    11      0   85151
                                             66 BANK0     11    11      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   34077
                                             61 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     352
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   18304
                                             49 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2840
                                             40 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5873
                                             49 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2447
                                             32 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   18110
                                             49 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Battery_Get                                          3     0      3    5807
                                              0 BANK0      3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    7195
                                              9 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1430
                                              0 BANK0      9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   24332
                                             49 BANK0      4     4      0
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    5622
                                             40 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6811
                                             12 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3549
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5386
                                             37 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2834
                                             34 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2553
                                             26 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1215
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             3     3      0      44
                                              2 COMRAM     3     3      0
                       _Battery_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (8) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              8     8      0    1171
                                              4 COMRAM     8     8      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     706
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Get
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _log
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _printf
     _Battery_Get (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch (ARG)
       _EUSART1_Write
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     23      23       8       13.7%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      E6       6       89.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     56      98       4       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E6       9        0.0%
DATA                 0      0     1E6      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed May 06 02:57:13 2015

                       ___altoft@exp 002B             _eusart1TxBufferRemaining 0045  
                      ___altoft@sign 002C                         ___awdiv@sign 0026  
                ___wmul@multiplicand 002B                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                         ___ftadd@exp1 0090  
                       ___ftadd@exp2 008F                         ___ftadd@sign 008E  
                                l118 3582                                  l644 0C08  
                                l956 2866                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                      _timer1ReloadVal 0043  
                                _log 25A2                      __end_of_ADC_ISR 1584  
                                fsr2 000FD9                         ___awmod@sign 0020  
                                prod 000FF3                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                         ___ftdiv@cntr 0066  
                       ___ftdiv@sign 006B                                 l1031 1D62  
                               l1040 1E4C                                 l1025 1D00  
                               l1060 2988                                 l1029 1D3A  
                               l1049 1E76                                 l1074 2AE4  
                               l1067 2A52                                 l1148 32B0  
                               l1068 2A7A                                 l1158 339E  
                               l1099 36B6                                 l4200 2F88  
                               l5000 090A                                 l4204 2F9E  
                               l5012 09B8                                 l5004 0950  
                               l4206 2FBC                                 l4310 24A0  
                               l4208 2FC6                                 l4304 2466  
                               l4400 3076                                 l5104 0DFC  
                               l5032 0ABE                                 l5016 09E4  
                               l4242 1D48                                 l3098 30B8  
                               l5122 0E6C                                 l5050 0B30  
                               l5130 0F30                                 l4236 1D0E  
                               l4324 24EE                                 l4404 3084  
                               l4500 2610                                 l4420 3160  
                               l5124 0E80                                 l5028 0A56  
                               l4270 1DFA                                 l4334 2538  
                               l5118 0E48                                 l5062 0BD8  
                               l5046 0B0A                                 l4192 2F52  
                               l4264 1DCE                                 l4248 1D58  
                               l4328 250C                                 l4440 31A6  
                               l4432 318E                                 l4424 316E  
                               l4416 3144                                 l4520 1B62  
                               l4360 35A4                                 l5128 0F1C  
                               l5056 0BBC                                 l4266 1DE2  
                               l4258 1D9A                                 l4338 2556  
                               l4610 2AAC                                 l4426 3176  
                               l4362 35A6                                 l5074 0C2E  
                               l5058 0BCA                                 l4196 2F60  
                               l4284 1EA0                                 l4276 1E2E  
                               l4268 1DEE                                 l4372 300E  
                               l4452 34D4                                 l4460 2CCC  
                               l4620 2AD4                                 l4428 317A  
                               l4436 3198                                 l4348 3572  
                               l5092 0D76                                 l5068 0C0C  
                               l4198 2F6A                                 l4294 1EEE  
                               l4278 1E42                                 l4710 28E0  
                               l4630 274C                                 l4622 2AE0  
                               l4614 2ABC                                 l4542 16D8  
                               l5078 0C80                                 l5086 0D5A  
                               l5094 0D82                                 l4704 28AC  
                               l4384 3044                                 l4800 23B4  
                               l4528 1C46                                 l4560 190C  
                               l4552 17C6                                 l5088 0D68  
                               l5184 2EDA                                 l5168 2EA2  
                               l4730 2940                                 l4386 304C  
                               l4378 302E                                 l4458 2C40  
                               l4810 23F4                                 l4650 27CA  
                               l4476 2234                                 l4396 306C  
                               l4388 3050                                 l4636 2788  
                               l4548 179A                                 l4494 25DE  
                               l4814 241A                                 l4806 23D6  
                               l4582 2A18                                 l4566 19CE  
                               l4808 23EE                                 l4824 3262  
                               l4680 2862                                 l4672 283E  
                               l4576 29EE                                 l4690 31EA  
                               l4754 2D2A                                 l4826 326E  
                               l4658 27FA                                 l4692 31F6  
                               l4764 2DB4                                 l4908 333C  
                               l4836 32A2                                 l4828 3272  
                               l4852 338E                                 l4844 3358  
                               l4860 33C2                                 l4668 282E  
                               ?_log 009D                                 l4758 2D70  
                               l4942 2122                                 l4846 3366  
                               l4678 2856                                 l4950 06E2  
                               l4848 336A                                 l4952 06F0  
                               l4890 2E82                                 l4778 22F0  
                               l4858 33B6                                 l4946 06CC  
                               l4796 2398                                 l4972 07A8  
                               l4956 06F6                                 l4958 072E  
                               l4996 08DE                                 l4988 0870  
                               STR_1 06A5                                 STR_2 0692  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u2530 30E0  
                               u5110 07F8                                 u4161 2444  
                               u2538 30E2                                 u5115 07EC  
                               u4181 247E                                 u4521 29D4  
                               u4610 272E                                 u4435 25BA  
                               u5315 0DD4                                 u4541 29FE  
                               u4630 276A                                 u4615 2724  
                               u5095 0782                                 u4705 31D0  
                               u4721 288C                                 u4811 22C8  
                               u4635 2760                                 u4741 28C0  
                               u4830 231C                                 u3951 1CAC  
                               u3961 1CCC                                 u4835 2312  
                               _TMR1 000FCE                                 _WPUB 000F61  
                      _EUSART1_Write 3570                                 _main 2E8A  
                       ___ftpack@arg 001B                         ___ftpack@exp 001E  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                        __CFG_BORV$190 000000  
                               log@x 009D                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A8                        __CFG_IESO$OFF 000000  
                       ___ftmul@cntr 0079                        printf@vd_1042 020B  
                       ___ftmul@sign 007A                    ADC_ISR@ADC_Result 000B  
                       ___fttol@exp1 0090                                ??_log 0030  
                       ___fttol@lval 008C                     ?_Battery_Convert 0001  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 37AA  
                              ?_main 00AD                      __end_of___awdiv 308E  
                    __end_of___ftadd 1F14                      __end_of___awmod 31B0  
                    __end_of___ftdiv 29C4                      _TMR1_StartTimer 37C0  
                    __end_of___ftneg 36C4                      __end_of___lldiv 32C2  
                    __end_of___ftmul 25A2                      ___awdiv@divisor 0023  
                              _T1CON 000FCD                      __end_of___llmod 33B0  
                    __end_of___ftsub 3534                      __end_of___fttol 242C  
                              _LATA0 007C48                                _LATB0 007C50  
                              _LATB1 007C51                                _LATC0 007C58  
                              _LATA4 007C4C                                _LATC1 007C59  
                              _LATB3 007C53                                _LATA6 007C4E  
                              _LATD1 007C61                                _LATD2 007C62  
                              _LATC4 007C5C                                _LATD3 007C63  
                              _LATC5 007C5D                                _LATD5 007C65  
                     __CFG_DEBUG$OFF 000000                                i2l130 360E  
                              i2l280 0058                                i2l282 0064  
                              i2l286 006E                                i2l278 004C  
                    ___awdiv@counter 0025                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
   __size_of_ADC_GetConversionResult 0014                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                         ___lltoft@exp 002B  
               _EUSART1_Transmit_ISR 35E2                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR1_ISR 3462                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 002C  
                    __end_of_dpowers 0629                                _frexp 308E  
                              _errno 00E2                                _scale 1584  
                 __CFG_MCLRE$EXTMCLR 000000                        ___ftpack@sign 001F  
                              _putch 37B6                                main@x 00B2  
                     ?_EUSART1_Write 0001              __end_of_TMR1_Initialize 370C  
                        _Battery_Adc 00B6                                tablat 000FF5  
                        _Battery_Get 35AA                                status 000FD8  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
                    __initialization 3642                          log@exponent 00A0  
         __end_of_EUSART1_Initialize 3570                         __end_of_main 2F42  
                   __end_of_Set_4051 369E                            ??_ADC_ISR 0005  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 0030  
                      ___fttol@sign1 008B                        __activetblptr 000002  
         ADC_StartConversion@channel 0002                 __size_of__tdiv_to_l_ 0132  
              ?_EUSART1_Transmit_ISR 0001                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             ?_frexp 001B                     __end_of___altoft 3240  
                   ___llmod@dividend 0028                               ?_scale 007B  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                   ___awdiv@dividend 0021                     __end_of___awtoft 34F8  
                             _ANSELA 000F38                               ?_putch 0001  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                   __end_of___ftpack 2FEA                               _T1GCON 000FCC  
                             _RC1STA 000FAB                     __end_of___lltoft 340C  
              __size_of_Battery_Read 0018                               i2l2146 360A  
                     __CFG_WDTEN$OFF 000000                               i2l3610 361A  
                             i2l3710 12F6                               i2l3702 125A  
                             i2l3632 0FA8                               i2l3730 147C  
                             i2l3722 13E0                               i2l3714 1344  
                             i2l3706 12A8                               i2l3650 104A  
                             i2l3626 0F72                               i2l3618 363E  
                             i2l3644 1014                               i2l3734 14CA  
                             i2l3726 142E                               i2l3718 1392  
                             i2l3742 152A                               i2l3662 10B6  
                             i2l3638 0FDE                               i2l3744 157E  
                             i2l3680 1158                               i2l3656 1080  
                             i2l3738 1518                               i2l3674 1122  
                             i2l3690 11A0                               i2l3578 3446  
                             i2l3668 10EC                               i2l3692 11F4  
                             i2l3686 118E                               i2l3694 11F8  
                             i2l3698 120C                               _RCREG1 000FAE  
                      ??_Temp_Filter 0030                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                               _TX1STA 000FAC  
                             _TXREG1 000FAD                           _Temp_Fault 32C2  
                     __CFG_XINST$OFF 000000                     __end_of__powers_ 0677  
                             ___ftge 2CE4              __end_of_TMR1_StartTimer 37C4  
                             ___wmul 36C4                            ??___awdiv 0025  
                          ??___ftadd 008B                       __CFG_STVREN$ON 000000  
                          ??___awmod 001F                            ??___ftdiv 002D  
                          ??___ftneg 001E                            ??___lldiv 0023  
                          ??___ftmul 0072                            ??___llmod 0030  
                          ??___ftsub 0030                            ??___fttol 0086  
                             _fround 19FA                               clear_0 3648  
                             clear_1 3654                               clear_2 3660  
                   ___awdiv@quotient 0027                   __size_of_Temp_Read 0018  
                    ___awmod@divisor 001D                      ___awmod@counter 001F  
                             _printf 06B8                ___ftmul@f3_as_product 0076  
                       _Battery_Read 3770                         _Battery_Volt 0132  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                    ??_EUSART1_Write 001B                      _eusart1RxBuffer 0100  
      __size_of_INTERRUPT_Initialize 000C                      _eusart1TxBuffer 0030  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 370C  
                   __end_oflog@coeff 0692                           __accesstop 0060  
            __end_of__initialization 3666                           ___altoft@c 0023  
                         ___ftadd@f1 0085                           ___ftadd@f2 0088  
                         ___ftge@ff1 0060                           ___ftge@ff2 0063  
                 ?_SYSTEM_Initialize 0001                         eval_poly@res 009A  
                         ___ftdiv@f1 0060                           ___ftdiv@f2 0063  
                         ___ftdiv@f3 0067                           ___ftneg@f1 001B  
                         ___awtoft@c 0029                           ___ftmul@f1 006C  
                         ___ftmul@f2 006F                           ___ftsub@f1 0091  
                         ___ftsub@f2 0094                  __end_of_Temp_Filter 22B0  
                         ___fttol@f1 0082         __size_of_ADC_StartConversion 001A  
                     __pcstackCOMRAM 0001                  ??_SYSTEM_Initialize 001B  
                          ?_TMR1_ISR 0001                           ___lltoft@c 0023  
                      __end_of_frexp 3120                        __end_of_scale 19FA  
                      __end_of_putch 37C0                Battery_Get@channelnum 0060  
             ??_EUSART1_Transmit_ISR 0001              _ADC_GetConversionResult 3788  
                         __div_to_l_ 2710          __end_of_EUSART1_Receive_ISR 3642  
                      ?_Temp_Convert 0001                      __div_to_l_@exp1 002A  
                    __div_to_l_@cntr 0029                              ??_frexp 0020  
                            ??_scale 0030            __end_of_SYSTEM_Initialize 3726  
                    __div_to_l_@quot 0025                              ??_putch 001C  
                      _eusart1RxHead 003F                        _eusart1TxHead 0041  
                      _eusart1RxTail 0040                           __pbssBANK0 00B6  
                         __pbssBANK1 0100                        _eusart1TxTail 0042  
                 __size_of_eval_poly 00F2                      __CFG_PLLCFG$OFF 000000  
                  __end_of_Temp_Read 3770                            ?_Set_4051 0001  
                         __pnvCOMRAM 0043                Temp_Convert@steinhart 00AA  
                        ?_Temp_Fault 0001                        __div_to_l_@f1 001B  
                      __div_to_l_@f2 001E                   __CFG_CCP2MX$PORTC1 000000  
                        Temp_Fault@i 006A                              ?___ftge 0060  
                            ?___wmul 0029                     ?_TMR1_StartTimer 0001  
                         ??_TMR1_ISR 0003                   __CFG_CCP3MX$PORTB5 000000  
                          ?___altoft 0023                              _ADC_ISR 0F54  
                            ?_fround 007B                            ?___awtoft 0029  
                          ?___ftpack 001B                              ?_printf 0097  
                          ?___lltoft 0023              __size_of_ADC_Initialize 0018  
                      Temp_Convert@x 00A8               __size_of_Battery_Fault 00D2  
                    Temp_Fault@fault 0069                       Battery_Fault@i 006A  
                            _OSCCON2 000FD2                       ??_Temp_Convert 00A2  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                         ?_Battery_Get 0060  
                         ??_Set_4051 0003                          _Temp_Filter 2128  
                        _Temp_Aquire 003C                      __CFG_PWRTEN$OFF 000000  
                  __end_of__npowers_ 0650                              __Hparam 0000  
                         _scale$1695 007E                              __Lparam 0000  
                    __size_of___ftge 00D4                              ___awdiv 2FEA  
                            ___ftadd 1C94                              ___awmod 3120  
                            ___ftdiv 2878                              ___ftneg 369E  
                            ___lldiv 3240                      __size_of___wmul 0026  
                            ___ftmul 242C                              ___llmod 3344  
                            ___ftsub 34F8                              ___fttol 22B0  
                       __psmallconst 0600                           ??___altoft 0027  
          ??_ADC_GetConversionResult 0003                              __pcinit 3642  
                         ??___awtoft 002C                           ??___ftpack 0020  
                  __end_of_eval_poly 2CE4                      __size_of_fround 029A  
                            __ramtop 0600                           ??___lltoft 0027  
                            __ptext0 2E8A                              __ptext1 06B8  
                            __ptext2 1584                              __ptext3 37B6  
                            __ptext4 3570                              __ptext5 19FA  
                            __ptext6 3120                              __ptext7 29C4  
                            __ptext8 2710                              __ptext9 33B0  
                    __size_of_printf 089C                            _T1CONbits 000FCD  
                        ?__div_to_l_ 001B                              _dpowers 0601  
              _OSCILLATOR_Initialize 379C                         __size_of_log 016E  
                   ___awmod@dividend 001B                  __size_of_Temp_Fault 0082  
                 _EUSART1_Initialize 3534             ??_PIN_MANAGER_Initialize 001B  
           __size_of_Battery_Convert 00FC           __size_of_SYSTEM_Initialize 001A  
               end_of_initialization 3666                  ?_EUSART1_Initialize 0001  
                      __Lmediumconst 0000                        _Battery_Fault 2DB8  
                    ___lldiv@divisor 001F                      ___lldiv@counter 0027  
                            printf@c 0222                              printf@f 0097  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                     Battery_Convert@x 0093  
                     __tdiv_to_l_@f1 001B                       __tdiv_to_l_@f2 001E  
               ??_EUSART1_Initialize 001B                        ??__tdiv_to_l_ 0021  
                _ADC_StartConversion 3726                  EUSART1_Write@txData 001B  
                        _Volt_Aquire 003D                       ?_Battery_Fault 0001  
                        printf@integ 0213                          ___ftdiv@exp 006A  
                __size_of__div_to_l_ 0168                          ___ftmul@exp 0075  
               ?_ADC_StartConversion 0001                 __end_of_Temp_Convert 2128  
       __end_of_INTERRUPT_Initialize 37B6                       __end_of___ftge 2DB8  
                     __end_of___wmul 36EA                    __size_of_TMR1_ISR 0056  
                     _ADC_Initialize 3740               ?_OSCILLATOR_Initialize 0001  
                     __end_of_fround 1C94                       __end_of_printf 0F54  
                start_initialization 3642                           eval_poly@d 0094  
                         eval_poly@n 0096                           eval_poly@x 0091  
    __size_of_PIN_MANAGER_Initialize 004E                  __end_of__tdiv_to_l_ 2AF6  
                        __end_of_log 2710                          putch@txData 001C  
              __end_of_EUSART1_Write 35AA                           frexp@value 001B  
                  ??_Battery_Convert 0091                      ___llmod@divisor 002C  
               __size_of_Battery_Get 0038                      ___llmod@counter 0060  
                       ??_Temp_Fault 002F                    __size_of_Set_4051 002E  
                          _Temp_DegF 018C                     _PrevBattery_Volt 0150  
                          _Temp_Done 00DE                            _Temp_Read 3758  
              ??_ADC_StartConversion 0001             __size_of_TMR1_Initialize 0022  
                           ??___ftge 0066                             ??___wmul 002D  
             __end_of_ADC_Initialize 3758                             ?_ADC_ISR 0001  
                           ??_fround 0030                             ??_printf 009E  
                     _eusart1RxCount 003E                    __size_of___altoft 0090  
                         fround@prec 0084                    __size_of___awtoft 0048  
                  __size_of___ftpack 00A8                            _Volt_Done 00E0  
                  __size_of___lltoft 005C                          __pbssCOMRAM 0030  
      __size_of_EUSART1_Transmit_ISR 0030                        __pcstackBANK0 0060  
                      __pcstackBANK2 0200                   __end_of_Temp_Fault 3344  
                __end_of__stringdata 06B6                        _PrevTemp_DegF 016E  
                    ??_Battery_Fault 002F         __size_of_EUSART1_Receive_ISR 0030  
                       ?_Temp_Filter 0001                           ?_Temp_Read 0001  
             _PIN_MANAGER_Initialize 3462                            __pintcode 0008  
                  _Temp_Convert$1691 00A4                    _Temp_Convert$1692 00A6  
                           ?___awdiv 0021                             ?___ftadd 0085  
                           ?___awmod 001B                             ?___ftdiv 0060  
                           ?___ftneg 001B                             ?___lldiv 001B  
                           ?___ftmul 006C                             ?___llmod 0028  
                           ?___ftsub 0091                            __npowers_ 0629  
                           ?___fttol 0082                         Temp_Filter@x 0091  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 000D  
                        __tdiv_to_l_ 29C4                         ??__div_to_l_ 0021  
                           _BAUD1CON 000FB8                          __smallconst 0600  
           __size_of_TMR1_StartTimer 0004                            _eval_poly 2BF2  
                     __size_of_frexp 0092                       __size_of_scale 0476  
                     __size_of_putch 000A                 _INTERRUPT_Initialize 37AA  
                     ___wmul@product 002D                __size_of_Temp_Convert 0214  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
__size_of_INTERRUPT_InterruptManager 00A0                             _PIR1bits 000F9E  
                 __end_of__div_to_l_ 2878                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 340C  
                  ??_TMR1_Initialize 001B                     __size_of_ADC_ISR 0630  
                         _ADCON0bits 000FC2                          __stringdata 0692  
                  ___wmul@multiplier 0029                            main@x_963 00B4  
                         printf@_val 0218                           printf@flag 0211  
                         printf@fval 021F                           printf@prec 0216  
                      ?_Battery_Read 0001                           ?_eval_poly 0091  
                       _Temp_Convert 1F14                          _INTCON2bits 000FF1  
              ?_INTERRUPT_Initialize 0001                             _Set_4051 3670  
                          frexp@eptr 001E                             __Hrparam 0000  
                        ??_Temp_Read 0003                             _Temp_Adc 00E4  
                           __Lrparam 0000             ?_ADC_GetConversionResult 0001  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 001B                     __size_of___awdiv 00A4  
                   __size_of___ftadd 0280                     __size_of___awmod 0090  
                   __size_of___ftdiv 014C                     __size_of___ftneg 0026  
                   __size_of___lldiv 0082                             ___altoft 31B0  
                   __size_of___ftmul 0176                     __size_of___llmod 006C  
                   __size_of___ftsub 003C                     __size_of___fttol 017C  
        __size_of_EUSART1_Initialize 003C                             ___awtoft 34B0  
                           ___ftpack 2F42                          _fround$1693 0081  
                        _fround$1694 007E                             ___lltoft 33B0  
                     ??_Battery_Read 0003                      _Battery_Convert 2AF6  
                 Battery_Fault@fault 0069                             __ptext10 3344  
                           __ptext11 3240                             __ptext20 34F8  
                           __ptext12 22B0                             __ptext21 2FEA  
                           __ptext13 369E                           _T1GCONbits 000FCC  
                           __ptext30 3740                             __ptext22 2128  
                           __ptext14 32C2                             __ptext31 35AA  
                           __ptext23 370C                             __ptext15 1F14  
                           __ptext40 2F42                             __ptext32 2DB8  
                           __ptext24 36EA                             __ptext16 25A2  
                           __ptext33 2CE4                             __ptext25 37C0  
                           __ptext17 308E                             __ptext50 3788  
                           __ptext42 340C                             __ptext34 2AF6  
                           __ptext26 3462                             __ptext18 2BF2  
                           __ptext43 3758                             __ptext35 36C4  
                           __ptext27 379C                             __ptext19 34B0  
                           __ptext44 3770                             __ptext36 242C  
                           __ptext28 37AA                             __ptext45 35E2  
                           __ptext37 2878                             __ptext29 3534  
                           __ptext46 3612                             __ptext38 1C94  
                           __ptext47 0F54                             __ptext39 31B0  
                           __ptext48 3670                             __ptext49 3726  
                           __powers_ 0650                    ??_TMR1_StartTimer 001B  
                      __size_of_main 00B8                         _TmpTemp_DegF 01C8  
               __size_of_Temp_Filter 0188                           _RC1STAbits 000FAB  
 __end_of_INTERRUPT_InterruptManager 00A8           _INTERRUPT_InterruptManager 0008  
                           main@argc 00AD                            printf@exp 021D  
                           main@argv 00AF                  _EUSART1_Receive_ISR 3612  
                           log@coeff 0677                           _INTCONbits 000FF2  
                        ??_eval_poly 0098               ??_INTERRUPT_Initialize 001B  
                           scale@scl 0081                        ??_Battery_Get 002F  
                           intlevel2 0000                     __tdiv_to_l_@exp1 0029  
                   __tdiv_to_l_@cntr 0028                        _CountCallBack 003A  
                   __tdiv_to_l_@quot 0024                 ?_EUSART1_Receive_ISR 0001  
        __end_of_ADC_StartConversion 3740                     _TempBattery_Volt 01AA  
                   ___lldiv@dividend 001B              ?_PIN_MANAGER_Initialize 0001  
    __end_of_ADC_GetConversionResult 379C         __end_of_EUSART1_Transmit_ISR 3612  
                   ??_ADC_Initialize 001B                             printf@ap 020F  
                           printf@vd 0207              __end_of_Battery_Convert 2BF2  
             __size_of_EUSART1_Write 003A                         ?__tdiv_to_l_ 001B  
                        _printf$1040 0203                          _printf$1696 0200  
                   ___lldiv@quotient 0023                    __CFG_T3CMX$PORTC0 000000  
              ??_EUSART1_Receive_ISR 0001       __end_of_PIN_MANAGER_Initialize 34B0  
              __end_of_Battery_Fault 2E8A                    __CFG_FOSC$INTIO67 000000  
               __end_of_Battery_Read 3788                      _TMR1_Initialize 36EA  
                   _ADC_Buffer_Point 0038                  __end_of_Battery_Get 35E2  
                    Set_4051@Channel 0001  
