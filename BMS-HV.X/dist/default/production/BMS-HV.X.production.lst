

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Jun 13 20:12:41 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           	psect	idataCOMRAM
    98  003C46                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _Transmit_stall
   102  003C46  01                 	db	1
   103                           
   104                           	psect	idataBANK1
   105  003846                     __pidataBANK1:
   106                           	opt stack 0
   107                           
   108                           ;initializer for _Battery_Volt
   109  003846  00                 	db	0
   110  003847  40                 	db	64
   111  003848  40                 	db	64
   112  003849  00                 	db	0
   113  00384A  40                 	db	64
   114  00384B  40                 	db	64
   115  00384C  00                 	db	0
   116  00384D  40                 	db	64
   117  00384E  40                 	db	64
   118  00384F  00                 	db	0
   119  003850  40                 	db	64
   120  003851  40                 	db	64
   121  003852  00                 	db	0
   122  003853  40                 	db	64
   123  003854  40                 	db	64
   124  003855  00                 	db	0
   125  003856  40                 	db	64
   126  003857  40                 	db	64
   127  003858  00                 	db	0
   128  003859  40                 	db	64
   129  00385A  40                 	db	64
   130  00385B  00                 	db	0
   131  00385C  40                 	db	64
   132  00385D  40                 	db	64
   133  00385E  00                 	db	0
   134  00385F  40                 	db	64
   135  003860  40                 	db	64
   136  003861  00                 	db	0
   137  003862  40                 	db	64
   138  003863  40                 	db	64
   139                           
   140                           ;initializer for _Temp_DegF
   141  003864  00                 	db	0
   142  003865  8C                 	db	140
   143  003866  42                 	db	66
   144  003867  00                 	db	0
   145  003868  8C                 	db	140
   146  003869  42                 	db	66
   147  00386A  00                 	db	0
   148  00386B  8C                 	db	140
   149  00386C  42                 	db	66
   150  00386D  00                 	db	0
   151  00386E  8C                 	db	140
   152  00386F  42                 	db	66
   153  003870  00                 	db	0
   154  003871  8C                 	db	140
   155  003872  42                 	db	66
   156  003873  00                 	db	0
   157  003874  8C                 	db	140
   158  003875  42                 	db	66
   159  003876  00                 	db	0
   160  003877  8C                 	db	140
   161  003878  42                 	db	66
   162  003879  00                 	db	0
   163  00387A  8C                 	db	140
   164  00387B  42                 	db	66
   165  00387C  00                 	db	0
   166  00387D  8C                 	db	140
   167  00387E  42                 	db	66
   168  00387F  00                 	db	0
   169  003880  8C                 	db	140
   170  003881  42                 	db	66
   171                           
   172                           	psect	smallconst
   173  000600                     __psmallconst:
   174                           	opt stack 0
   175  000600  00                 	db	0
   176  000601                     log@coeff:
   177                           	opt stack 0
   178  000601  00                 	db	0
   179  000602  00                 	db	0
   180  000603  00                 	db	0
   181  000604  00                 	db	0
   182  000605  80                 	db	128
   183  000606  3F                 	db	63
   184  000607  F0                 	db	240
   185  000608  FF                 	db	255
   186  000609  BE                 	db	190
   187  00060A  E2                 	db	226
   188  00060B  A9                 	db	169
   189  00060C  3E                 	db	62
   190  00060D  83                 	db	131
   191  00060E  76                 	db	118
   192  00060F  BE                 	db	190
   193  000610  AE                 	db	174
   194  000611  2B                 	db	43
   195  000612  3E                 	db	62
   196  000613  3C                 	db	60
   197  000614  C3                 	db	195
   198  000615  BD                 	db	189
   199  000616  D2                 	db	210
   200  000617  13                 	db	19
   201  000618  3D                 	db	61
   202  000619  78                 	db	120
   203  00061A  D3                 	db	211
   204  00061B  BB                 	db	187
   205  00061C                     __end_oflog@coeff:
   206                           	opt stack 0
   207  0000                     _ANSELA	set	3896
   208  0000                     _ANSELB	set	3897
   209  0000                     _ANSELC	set	3898
   210  0000                     _ANSELD	set	3899
   211  0000                     _ANSELE	set	3900
   212  0000                     _TMR1	set	4046
   213  0000                     _ADCON0	set	4034
   214  0000                     _ADCON0bits	set	4034
   215  0000                     _ADCON1	set	4033
   216  0000                     _ADCON2	set	4032
   217  0000                     _ADRESH	set	4036
   218  0000                     _ADRESL	set	4035
   219  0000                     _BAUD1CON	set	4024
   220  0000                     _INTCON2bits	set	4081
   221  0000                     _INTCONbits	set	4082
   222  0000                     _IPR1bits	set	3999
   223  0000                     _LATA	set	3977
   224  0000                     _LATAbits	set	3977
   225  0000                     _LATB	set	3978
   226  0000                     _LATC	set	3979
   227  0000                     _LATD	set	3980
   228  0000                     _LATE	set	3981
   229  0000                     _LATEbits	set	3981
   230  0000                     _OSCCON	set	4051
   231  0000                     _OSCCON2	set	4050
   232  0000                     _OSCTUNE	set	3995
   233  0000                     _PIE1bits	set	3997
   234  0000                     _PIR1bits	set	3998
   235  0000                     _RC1STA	set	4011
   236  0000                     _RC1STAbits	set	4011
   237  0000                     _RCONbits	set	4048
   238  0000                     _RCREG1	set	4014
   239  0000                     _SPBRG1	set	4015
   240  0000                     _SPBRGH1	set	4016
   241  0000                     _T1CON	set	4045
   242  0000                     _T1CONbits	set	4045
   243  0000                     _T1GCON	set	4044
   244  0000                     _T1GCONbits	set	4044
   245  0000                     _TMR1H	set	4047
   246  0000                     _TMR1L	set	4046
   247  0000                     _TRISA	set	3986
   248  0000                     _TRISB	set	3987
   249  0000                     _TRISC	set	3988
   250  0000                     _TRISCbits	set	3988
   251  0000                     _TRISD	set	3989
   252  0000                     _TRISE	set	3990
   253  0000                     _TX1STA	set	4012
   254  0000                     _TXREG1	set	4013
   255  0000                     _WPUB	set	3937
   256  0000                     _LATA0	set	31816
   257  0000                     _LATA6	set	31822
   258  0000                     _LATB0	set	31824
   259  0000                     _LATB1	set	31825
   260  0000                     _LATB3	set	31827
   261  0000                     _LATC0	set	31832
   262  0000                     _LATC1	set	31833
   263  0000                     _LATC4	set	31836
   264  0000                     _LATC5	set	31837
   265  0000                     _LATD1	set	31841
   266  0000                     _LATD2	set	31842
   267  0000                     _LATD3	set	31843
   268  0000                     _LATD5	set	31845
   269                           
   270                           ; #config settings
   271  00061C  00                 	db	0	; dummy byte at the end
   272  0000                     
   273                           	psect	cinit
   274  00337E                     __pcinit:
   275                           	opt stack 0
   276  00337E                     start_initialization:
   277                           	opt stack 0
   278  00337E                     __initialization:
   279                           	opt stack 0
   280                           
   281                           ; Clear objects allocated to BANK5 (206 bytes)
   282  00337E  EE05  F000         	lfsr	0,__pbssBANK5
   283  003382  0ECE               	movlw	206
   284  003384                     clear_0:
   285  003384  6AEE               	clrf	postinc0,c
   286  003386  06E8               	decf	wreg,f,c
   287  003388  E1FD               	bnz	clear_0
   288                           
   289                           ; Clear objects allocated to BANK4 (206 bytes)
   290  00338A  EE04  F000         	lfsr	0,__pbssBANK4
   291  00338E  0ECE               	movlw	206
   292  003390                     clear_1:
   293  003390  6AEE               	clrf	postinc0,c
   294  003392  06E8               	decf	wreg,f,c
   295  003394  E1FD               	bnz	clear_1
   296                           
   297                           ; Clear objects allocated to BANK3 (200 bytes)
   298  003396  EE03  F000         	lfsr	0,__pbssBANK3
   299  00339A  0EC8               	movlw	200
   300  00339C                     clear_2:
   301  00339C  6AEE               	clrf	postinc0,c
   302  00339E  06E8               	decf	wreg,f,c
   303  0033A0  E1FD               	bnz	clear_2
   304                           
   305                           ; Clear objects allocated to BANK2 (206 bytes)
   306  0033A2  EE02  F000         	lfsr	0,__pbssBANK2
   307  0033A6  0ECE               	movlw	206
   308  0033A8                     clear_3:
   309  0033A8  6AEE               	clrf	postinc0,c
   310  0033AA  06E8               	decf	wreg,f,c
   311  0033AC  E1FD               	bnz	clear_3
   312                           
   313                           ; Clear objects allocated to BANK1 (160 bytes)
   314  0033AE  EE01  F000         	lfsr	0,__pbssBANK1
   315  0033B2  0EA0               	movlw	160
   316  0033B4                     clear_4:
   317  0033B4  6AEE               	clrf	postinc0,c
   318  0033B6  06E8               	decf	wreg,f,c
   319  0033B8  E1FD               	bnz	clear_4
   320                           
   321                           ; Clear objects allocated to BANK0 (97 bytes)
   322  0033BA  EE00  F060         	lfsr	0,__pbssBANK0
   323  0033BE  0E61               	movlw	97
   324  0033C0                     clear_5:
   325  0033C0  6AEE               	clrf	postinc0,c
   326  0033C2  06E8               	decf	wreg,f,c
   327  0033C4  E1FD               	bnz	clear_5
   328                           
   329                           ; Clear objects allocated to COMRAM (24 bytes)
   330  0033C6  EE00  F02D         	lfsr	0,__pbssCOMRAM
   331  0033CA  0E18               	movlw	24
   332  0033CC                     clear_6:
   333  0033CC  6AEE               	clrf	postinc0,c
   334  0033CE  06E8               	decf	wreg,f,c
   335  0033D0  E1FD               	bnz	clear_6
   336                           
   337                           ; Initialize objects allocated to BANK1 (60 bytes)
   338                           ; load TBLPTR registers with __pidataBANK1
   339  0033D2  0E46               	movlw	low __pidataBANK1
   340  0033D4  6EF6               	movwf	tblptrl,c
   341  0033D6  0E38               	movlw	high __pidataBANK1
   342  0033D8  6EF7               	movwf	tblptrh,c
   343  0033DA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   344  0033DC  6EF8               	movwf	tblptru,c
   345  0033DE  EE01  F0A0         	lfsr	0,__pdataBANK1
   346  0033E2  EE10 F03C          	lfsr	1,60
   347  0033E6                     copy_data0:
   348  0033E6  0009               	tblrd		*+
   349  0033E8  CFF5 FFEE          	movff	tablat,postinc0
   350  0033EC  50E5               	movf	postdec1,w,c
   351  0033EE  50E1               	movf	fsr1l,w,c
   352  0033F0  E1FA               	bnz	copy_data0
   353                           
   354                           ; Initialize objects allocated to COMRAM (1 bytes)
   355                           ; load TBLPTR registers with __pidataCOMRAM
   356  0033F2  0E46               	movlw	low __pidataCOMRAM
   357  0033F4  6EF6               	movwf	tblptrl,c
   358  0033F6  0E3C               	movlw	high __pidataCOMRAM
   359  0033F8  6EF7               	movwf	tblptrh,c
   360  0033FA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   361  0033FC  6EF8               	movwf	tblptru,c
   362  0033FE  0009               	tblrd		*+	;fetch initializer
   363  003400  CFF5 F045          	movff	tablat,__pdataCOMRAM
   364  003404                     end_of_initialization:
   365                           	opt stack 0
   366  003404                     __end_of__initialization:
   367                           	opt stack 0
   368  003404  0E00               	movlw	low (__Lmediumconst shr (0+16))
   369  003406  6EF8               	movwf	tblptru,c
   370  003408  0100               	movlb	0
   371  00340A  EF01  F01C         	goto	_main	;jump to C main() function
   372                           tblptru	equ	0xFF8
   373                           tblptrh	equ	0xFF7
   374                           tblptrl	equ	0xFF6
   375                           tablat	equ	0xFF5
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           postdec1	equ	0xFE5
   379                           fsr1l	equ	0xFE1
   380                           
   381                           	psect	bssCOMRAM
   382  00002D                     __pbssCOMRAM:
   383                           	opt stack 0
   384  00002D                     _ADC_Buffer_Point:
   385                           	opt stack 0
   386  00002D                     	ds	2
   387  00002F                     _CountCallBack:
   388                           	opt stack 0
   389  00002F                     	ds	2
   390  000031                     _serial_available:
   391                           	opt stack 0
   392  000031                     	ds	2
   393  000033                     _serial_read:
   394                           	opt stack 0
   395  000033                     	ds	2
   396  000035                     _serial_write:
   397                           	opt stack 0
   398  000035                     	ds	2
   399  000037                     _timer1ReloadVal:
   400                           	opt stack 0
   401  000037                     	ds	2
   402  000039                     _AKNAKsend:
   403                           	opt stack 0
   404  000039                     	ds	1
   405  00003A                     _Temp_Aquire:
   406                           	opt stack 0
   407  00003A                     	ds	1
   408  00003B                     _Volt_Aquire:
   409                           	opt stack 0
   410  00003B                     	ds	1
   411  00003C                     _calc_CS:
   412                           	opt stack 0
   413  00003C                     	ds	1
   414  00003D                     _maxDataAddress:
   415                           	opt stack 0
   416  00003D                     	ds	1
   417  00003E                     _moduleAddress:
   418                           	opt stack 0
   419  00003E                     	ds	1
   420  00003F                     _returnAddress:
   421                           	opt stack 0
   422  00003F                     	ds	1
   423  000040                     _rx_address:
   424                           	opt stack 0
   425  000040                     	ds	1
   426  000041                     _rx_array_inx:
   427                           	opt stack 0
   428  000041                     	ds	1
   429  000042                     _rx_len:
   430                           	opt stack 0
   431  000042                     	ds	1
   432  000043                     _group:
   433                           	opt stack 0
   434  000043                     	ds	2
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           postinc0	equ	0xFEE
   440                           wreg	equ	0xFE8
   441                           postdec1	equ	0xFE5
   442                           fsr1l	equ	0xFE1
   443                           
   444                           	psect	dataCOMRAM
   445  000045                     __pdataCOMRAM:
   446                           	opt stack 0
   447  000045                     _Transmit_stall:
   448                           	opt stack 0
   449  000045                     	ds	1
   450                           tblptru	equ	0xFF8
   451                           tblptrh	equ	0xFF7
   452                           tblptrl	equ	0xFF6
   453                           tablat	equ	0xFF5
   454                           postinc0	equ	0xFEE
   455                           wreg	equ	0xFE8
   456                           postdec1	equ	0xFE5
   457                           fsr1l	equ	0xFE1
   458                           
   459                           	psect	bssBANK0
   460  000060                     __pbssBANK0:
   461                           	opt stack 0
   462  000060                     _Battery_Adc:
   463                           	opt stack 0
   464  000060                     	ds	40
   465  000088                     _Temp_Done:
   466                           	opt stack 0
   467  000088                     	ds	2
   468  00008A                     _Volt_Done:
   469                           	opt stack 0
   470  00008A                     	ds	2
   471  00008C                     _addressErrorCounter:
   472                           	opt stack 0
   473  00008C                     	ds	2
   474  00008E                     _alignErrorCounter:
   475                           	opt stack 0
   476  00008E                     	ds	2
   477  000090                     _crcErrorCounter:
   478                           	opt stack 0
   479  000090                     	ds	2
   480  000092                     _dataAdressErrorCounter:
   481                           	opt stack 0
   482  000092                     	ds	2
   483  000094                     _errno:
   484                           	opt stack 0
   485  000094                     	ds	2
   486  000096                     _receiveArrayAddress:
   487                           	opt stack 0
   488  000096                     	ds	2
   489  000098                     _sendStructAddress:
   490                           	opt stack 0
   491  000098                     	ds	2
   492  00009A                     _serial_peek:
   493                           	opt stack 0
   494  00009A                     	ds	2
   495  00009C                     _Temp_Adc:
   496                           	opt stack 0
   497  00009C                     	ds	20
   498  0000B0                     _crc_buffer:
   499                           	opt stack 0
   500  0000B0                     	ds	17
   501                           tblptru	equ	0xFF8
   502                           tblptrh	equ	0xFF7
   503                           tblptrl	equ	0xFF6
   504                           tablat	equ	0xFF5
   505                           postinc0	equ	0xFEE
   506                           wreg	equ	0xFE8
   507                           postdec1	equ	0xFE5
   508                           fsr1l	equ	0xFE1
   509                           
   510                           	psect	bssBANK1
   511  000100                     __pbssBANK1:
   512                           	opt stack 0
   513  000100                     _PrevBattery_Volt:
   514                           	opt stack 0
   515  000100                     	ds	30
   516  00011E                     _PrevTemp_DegF:
   517                           	opt stack 0
   518  00011E                     	ds	30
   519  00013C                     _receiveArray:
   520                           	opt stack 0
   521  00013C                     	ds	40
   522  000164                     _TempBattery_Volt:
   523                           	opt stack 0
   524  000164                     	ds	30
   525  000182                     _TmpTemp_DegF:
   526                           	opt stack 0
   527  000182                     	ds	30
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           postdec1	equ	0xFE5
   535                           fsr1l	equ	0xFE1
   536                           
   537                           	psect	dataBANK1
   538  0001A0                     __pdataBANK1:
   539                           	opt stack 0
   540  0001A0                     _Battery_Volt:
   541                           	opt stack 0
   542  0001A0                     	ds	30
   543  0001BE                     _Temp_DegF:
   544                           	opt stack 0
   545  0001BE                     	ds	30
   546                           tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           postdec1	equ	0xFE5
   553                           fsr1l	equ	0xFE1
   554                           
   555                           	psect	bssBANK2
   556  000200                     __pbssBANK2:
   557                           	opt stack 0
   558  000200                     _ring_buffer:
   559                           	opt stack 0
   560  000200                     	ds	206
   561                           tblptru	equ	0xFF8
   562                           tblptrh	equ	0xFF7
   563                           tblptrl	equ	0xFF6
   564                           tablat	equ	0xFF5
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           postdec1	equ	0xFE5
   568                           fsr1l	equ	0xFE1
   569                           
   570                           	psect	bssBANK3
   571  000300                     __pbssBANK3:
   572                           	opt stack 0
   573  000300                     _rx_buffer:
   574                           	opt stack 0
   575  000300                     	ds	200
   576                           tblptru	equ	0xFF8
   577                           tblptrh	equ	0xFF7
   578                           tblptrl	equ	0xFF6
   579                           tablat	equ	0xFF5
   580                           postinc0	equ	0xFEE
   581                           wreg	equ	0xFE8
   582                           postdec1	equ	0xFE5
   583                           fsr1l	equ	0xFE1
   584                           
   585                           	psect	bssBANK4
   586  000400                     __pbssBANK4:
   587                           	opt stack 0
   588  000400                     _input_buffer:
   589                           	opt stack 0
   590  000400                     	ds	206
   591                           tblptru	equ	0xFF8
   592                           tblptrh	equ	0xFF7
   593                           tblptrl	equ	0xFF6
   594                           tablat	equ	0xFF5
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           postdec1	equ	0xFE5
   598                           fsr1l	equ	0xFE1
   599                           
   600                           	psect	bssBANK5
   601  000500                     __pbssBANK5:
   602                           	opt stack 0
   603  000500                     _output_buffer:
   604                           	opt stack 0
   605  000500                     	ds	206
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           postinc0	equ	0xFEE
   611                           wreg	equ	0xFE8
   612                           postdec1	equ	0xFE5
   613                           fsr1l	equ	0xFE1
   614                           
   615                           	psect	cstackBANK1
   616  0001DC                     __pcstackBANK1:
   617                           	opt stack 0
   618  0001DC                     _Temp_Convert$2200:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x0
   622  0001DC                     	ds	2
   623  0001DE                     _Temp_Convert$2201:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x2
   627  0001DE                     	ds	2
   628  0001E0                     Temp_Convert@x:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x4
   632  0001E0                     	ds	2
   633  0001E2                     Temp_Convert@steinhart:
   634                           	opt stack 0
   635                           
   636                           ; 3 bytes @ 0x6
   637  0001E2                     	ds	3
   638  0001E5                     
   639                           ; 2 bytes @ 0x9
   640  0001E5                     	ds	2
   641  0001E7                     
   642                           ; 3 bytes @ 0xB
   643  0001E7                     	ds	3
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           postdec1	equ	0xFE5
   651                           fsr1l	equ	0xFE1
   652                           
   653                           	psect	cstackBANK0
   654  0000C1                     __pcstackBANK0:
   655                           	opt stack 0
   656  0000C1                     ?___ftdiv:
   657                           	opt stack 0
   658  0000C1                     CRCcheck@SentCRC:
   659                           	opt stack 0
   660  0000C1                     begin@ptr:
   661                           	opt stack 0
   662  0000C1                     ___ftdiv@f1:
   663                           	opt stack 0
   664                           
   665                           ; 3 bytes @ 0x0
   666  0000C1                     	ds	1
   667  0000C2                     CRCcheck@calculatedCRC:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x1
   671  0000C2                     	ds	1
   672  0000C3                     begin@maxSize:
   673                           	opt stack 0
   674  0000C3                     CRCcheck@arrayHolder:
   675                           	opt stack 0
   676                           
   677                           ; 3 bytes @ 0x2
   678  0000C3                     	ds	1
   679  0000C4                     begin@givenAddress:
   680                           	opt stack 0
   681  0000C4                     ___ftdiv@f2:
   682                           	opt stack 0
   683                           
   684                           ; 3 bytes @ 0x3
   685  0000C4                     	ds	1
   686  0000C5                     begin@error:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x4
   690  0000C5                     	ds	1
   691  0000C6                     begin@stufftosend:
   692                           	opt stack 0
   693  0000C6                     CRCcheck@rt:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x5
   697  0000C6                     	ds	1
   698  0000C7                     ??___ftdiv:
   699                           
   700                           ; 0 bytes @ 0x6
   701  0000C7                     	ds	1
   702  0000C8                     begin@stufftoreceive:
   703                           	opt stack 0
   704  0000C8                     receiveData@holder:
   705                           	opt stack 0
   706                           
   707                           ; 3 bytes @ 0x7
   708  0000C8                     	ds	2
   709  0000CA                     ___ftdiv@cntr:
   710                           	opt stack 0
   711  0000CA                     begin@stuffavailable:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x9
   715  0000CA                     	ds	1
   716  0000CB                     receiveData@holder_1129:
   717                           	opt stack 0
   718  0000CB                     ___ftdiv@f3:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0xA
   722  0000CB                     	ds	1
   723  0000CC                     begin@stuffpeek:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0xB
   727  0000CC                     	ds	2
   728  0000CE                     receiveData@crcHolder:
   729                           	opt stack 0
   730  0000CE                     ___ftdiv@exp:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0xD
   734  0000CE                     	ds	1
   735  0000CF                     receiveData@crcHolder_1130:
   736                           	opt stack 0
   737  0000CF                     ___ftdiv@sign:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0xE
   741  0000CF                     	ds	1
   742  0000D0                     ?___ftmul:
   743                           	opt stack 0
   744  0000D0                     receiveData@u:
   745                           	opt stack 0
   746  0000D0                     ___ftmul@f1:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0xF
   750  0000D0                     	ds	2
   751  0000D2                     receiveData@r:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x11
   755  0000D2                     	ds	1
   756  0000D3                     ___ftmul@f2:
   757                           	opt stack 0
   758                           
   759                           ; 3 bytes @ 0x12
   760  0000D3                     	ds	3
   761  0000D6                     ??___ftmul:
   762                           
   763                           ; 0 bytes @ 0x15
   764  0000D6                     	ds	3
   765  0000D9                     ___ftmul@exp:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x18
   769  0000D9                     	ds	1
   770  0000DA                     ___ftmul@f3_as_product:
   771                           	opt stack 0
   772                           
   773                           ; 3 bytes @ 0x19
   774  0000DA                     	ds	3
   775  0000DD                     ___ftmul@cntr:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x1C
   779  0000DD                     	ds	1
   780  0000DE                     ___ftmul@sign:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x1D
   784  0000DE                     	ds	1
   785  0000DF                     ?___ftadd:
   786                           	opt stack 0
   787  0000DF                     ?_Battery_Get:
   788                           	opt stack 0
   789  0000DF                     Battery_Get@channelnum:
   790                           	opt stack 0
   791  0000DF                     ___ftadd@f1:
   792                           	opt stack 0
   793                           
   794                           ; 3 bytes @ 0x1E
   795  0000DF                     	ds	3
   796  0000E2                     ?___fttol:
   797                           	opt stack 0
   798  0000E2                     RunBypas@cellbyp:
   799                           	opt stack 0
   800  0000E2                     ___ftadd@f2:
   801                           	opt stack 0
   802  0000E2                     ___fttol@f1:
   803                           	opt stack 0
   804                           
   805                           ; 3 bytes @ 0x21
   806  0000E2                     	ds	2
   807  0000E4                     RunBypas@batvolt:
   808                           	opt stack 0
   809                           
   810                           ; 3 bytes @ 0x23
   811  0000E4                     	ds	1
   812  0000E5                     ??___ftadd:
   813                           
   814                           ; 0 bytes @ 0x24
   815  0000E5                     	ds	1
   816  0000E6                     ??___fttol:
   817                           
   818                           ; 0 bytes @ 0x25
   819  0000E6                     	ds	1
   820  0000E7                     RunBypas@i:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x26
   824  0000E7                     	ds	1
   825  0000E8                     ___ftadd@sign:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x27
   829  0000E8                     	ds	1
   830  0000E9                     ___ftadd@exp2:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x28
   834  0000E9                     	ds	1
   835  0000EA                     ___ftadd@exp1:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x29
   839  0000EA                     	ds	1
   840  0000EB                     ?___ftsub:
   841                           	opt stack 0
   842  0000EB                     ?_eval_poly:
   843                           	opt stack 0
   844  0000EB                     ___fttol@sign1:
   845                           	opt stack 0
   846  0000EB                     Battery_Filter@x:
   847                           	opt stack 0
   848  0000EB                     Temp_Filter@x:
   849                           	opt stack 0
   850  0000EB                     ___ftsub@f1:
   851                           	opt stack 0
   852  0000EB                     eval_poly@x:
   853                           	opt stack 0
   854                           
   855                           ; 3 bytes @ 0x2A
   856  0000EB                     	ds	1
   857  0000EC                     ___fttol@lval:
   858                           	opt stack 0
   859                           
   860                           ; 4 bytes @ 0x2B
   861  0000EC                     	ds	1
   862  0000ED                     ??_Battery_Convert:
   863                           
   864                           ; 0 bytes @ 0x2C
   865  0000ED                     	ds	1
   866  0000EE                     eval_poly@d:
   867                           	opt stack 0
   868  0000EE                     ___ftsub@f2:
   869                           	opt stack 0
   870                           
   871                           ; 3 bytes @ 0x2D
   872  0000EE                     	ds	1
   873  0000EF                     Battery_Convert@x:
   874                           	opt stack 0
   875                           
   876                           ; 2 bytes @ 0x2E
   877  0000EF                     	ds	1
   878  0000F0                     ___fttol@exp1:
   879                           	opt stack 0
   880  0000F0                     eval_poly@n:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x2F
   884  0000F0                     	ds	1
   885  0000F1                     ToSend@what:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x30
   889  0000F1                     	ds	1
   890  0000F2                     ??_eval_poly:
   891                           
   892                           ; 0 bytes @ 0x31
   893  0000F2                     	ds	1
   894  0000F3                     ToSend@where:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x32
   898  0000F3                     	ds	1
   899  0000F4                     eval_poly@res:
   900                           	opt stack 0
   901                           
   902                           ; 3 bytes @ 0x33
   903  0000F4                     	ds	3
   904  0000F7                     ?_log:
   905                           	opt stack 0
   906  0000F7                     log@x:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x36
   910  0000F7                     	ds	3
   911  0000FA                     log@exponent:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x39
   915  0000FA                     	ds	2
   916                           tblptru	equ	0xFF8
   917                           tblptrh	equ	0xFF7
   918                           tblptrl	equ	0xFF6
   919                           tablat	equ	0xFF5
   920                           postinc0	equ	0xFEE
   921                           wreg	equ	0xFE8
   922                           postdec1	equ	0xFE5
   923                           fsr1l	equ	0xFE1
   924                           
   925                           	psect	cstackCOMRAM
   926  000001                     __pcstackCOMRAM:
   927                           	opt stack 0
   928  000001                     ??_ADC_StartConversion:
   929  000001                     ?_ADC_GetConversionResult:
   930                           	opt stack 0
   931  000001                     ?i2_UART_buff_size:
   932                           	opt stack 0
   933  000001                     ?i2_UART_buff_modulo_inc:
   934                           	opt stack 0
   935  000001                     Set_4051@Channel:
   936                           	opt stack 0
   937  000001                     i2UART_buff_size@_this:
   938                           	opt stack 0
   939  000001                     i2UART_buff_modulo_inc@value:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x0
   943  000001                     	ds	1
   944  000002                     ADC_StartConversion@channel:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x1
   948  000002                     	ds	1
   949  000003                     ??_Set_4051:
   950  000003                     ??_ADC_GetConversionResult:
   951  000003                     i2UART_buff_modulo_inc@modulus:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x2
   955  000003                     	ds	2
   956  000005                     ??_ADC_ISR:
   957  000005                     i2UART_buff_modulo_inc@my_value:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x4
   961  000005                     	ds	2
   962  000007                     i2UART_buff_put@_this:
   963                           	opt stack 0
   964  000007                     i2UART_buff_get@_this:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x6
   968  000007                     	ds	2
   969  000009                     ??i2_UART_buff_get:
   970  000009                     i2UART_buff_put@c:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x8
   974  000009                     	ds	1
   975  00000A                     ??i2_UART_buff_put:
   976                           
   977                           ; 0 bytes @ 0x9
   978  00000A                     	ds	1
   979  00000B                     i2UART_buff_get@c:
   980                           	opt stack 0
   981  00000B                     ADC_ISR@ADC_Result:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0xA
   985  00000B                     	ds	1
   986  00000C                     EUSART1_Receive_ISR@data:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0xB
   990  00000C                     	ds	1
   991  00000D                     ??_INTERRUPT_InterruptManager:
   992                           
   993                           ; 0 bytes @ 0xC
   994  00000D                     	ds	14
   995  00001B                     ?_FastTransfer_buffer_modulo_inc:
   996                           	opt stack 0
   997  00001B                     ?_UART_buff_modulo_inc:
   998                           	opt stack 0
   999  00001B                     ?_UART_buff_size:
  1000                           	opt stack 0
  1001  00001B                     ?___wmul:
  1002                           	opt stack 0
  1003  00001B                     ?___awdiv:
  1004                           	opt stack 0
  1005  00001B                     ?___ftpack:
  1006                           	opt stack 0
  1007  00001B                     ?_frexp:
  1008                           	opt stack 0
  1009  00001B                     SetBypass@pin:
  1010                           	opt stack 0
  1011  00001B                     CRC8@data:
  1012                           	opt stack 0
  1013  00001B                     FastTransfer_buffer_modulo_inc@value:
  1014                           	opt stack 0
  1015  00001B                     crcBufS_put@_this:
  1016                           	opt stack 0
  1017  00001B                     crcBufS_status_put@_this:
  1018                           	opt stack 0
  1019  00001B                     crcBufS_get@_this:
  1020                           	opt stack 0
  1021  00001B                     UART_buff_size@_this:
  1022                           	opt stack 0
  1023  00001B                     UART_buff_modulo_inc@value:
  1024                           	opt stack 0
  1025  00001B                     UART_buff_peek@_this:
  1026                           	opt stack 0
  1027  00001B                     ___wmul@multiplier:
  1028                           	opt stack 0
  1029  00001B                     ___awdiv@dividend:
  1030                           	opt stack 0
  1031  00001B                     memset@p1:
  1032                           	opt stack 0
  1033  00001B                     ___ftpack@arg:
  1034                           	opt stack 0
  1035  00001B                     frexp@value:
  1036                           	opt stack 0
  1037  00001B                     Delay@d_lenth:
  1038                           	opt stack 0
  1039                           
  1040                           ; 4 bytes @ 0x1A
  1041  00001B                     	ds	2
  1042  00001D                     ??_UART_buff_peek:
  1043  00001D                     ?_Receive_available:
  1044                           	opt stack 0
  1045  00001D                     CRC8@len:
  1046                           	opt stack 0
  1047  00001D                     crcBufS_put@address:
  1048                           	opt stack 0
  1049  00001D                     crcBufS_status_put@time:
  1050                           	opt stack 0
  1051  00001D                     crcBufS_get@time:
  1052                           	opt stack 0
  1053  00001D                     SetBypass@state:
  1054                           	opt stack 0
  1055  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1056                           	opt stack 0
  1057  00001D                     UART_buff_modulo_inc@modulus:
  1058                           	opt stack 0
  1059  00001D                     ___wmul@multiplicand:
  1060                           	opt stack 0
  1061  00001D                     ___awdiv@divisor:
  1062                           	opt stack 0
  1063  00001D                     memset@c:
  1064                           	opt stack 0
  1065                           
  1066                           ; 2 bytes @ 0x1C
  1067  00001D                     	ds	1
  1068  00001E                     CRC8@sum:
  1069                           	opt stack 0
  1070  00001E                     crcBufS_put@oldCRC:
  1071                           	opt stack 0
  1072  00001E                     crcBufS_status_put@status:
  1073                           	opt stack 0
  1074  00001E                     crcBufS_get@space:
  1075                           	opt stack 0
  1076  00001E                     ___ftpack@exp:
  1077                           	opt stack 0
  1078  00001E                     frexp@eptr:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x1D
  1082  00001E                     	ds	1
  1083  00001F                     ??_crcBufS_get:
  1084  00001F                     ??_Delay:
  1085  00001F                     ??_SetBypass:
  1086  00001F                     ??_crcBufS_status_put:
  1087  00001F                     CRC8@extract:
  1088                           	opt stack 0
  1089  00001F                     crcBufS_put@status:
  1090                           	opt stack 0
  1091  00001F                     ___awdiv@counter:
  1092                           	opt stack 0
  1093  00001F                     ___ftpack@sign:
  1094                           	opt stack 0
  1095  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1096                           	opt stack 0
  1097  00001F                     UART_buff_modulo_inc@my_value:
  1098                           	opt stack 0
  1099  00001F                     ___wmul@product:
  1100                           	opt stack 0
  1101  00001F                     memset@n:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x1E
  1105  00001F                     	ds	1
  1106  000020                     ??_crcBufS_put:
  1107  000020                     ??___ftpack:
  1108  000020                     ??_frexp:
  1109  000020                     CRC8@tempI:
  1110                           	opt stack 0
  1111  000020                     ___awdiv@sign:
  1112                           	opt stack 0
  1113  000020                     Delay@wait:
  1114                           	opt stack 0
  1115                           
  1116                           ; 4 bytes @ 0x1F
  1117  000020                     	ds	1
  1118  000021                     ?_Tempeture_Get:
  1119                           	opt stack 0
  1120  000021                     CRC8@crc:
  1121                           	opt stack 0
  1122  000021                     Tempeture_Get@channelnum:
  1123                           	opt stack 0
  1124  000021                     FastTransfer_buffer_put@_this:
  1125                           	opt stack 0
  1126  000021                     UART_buff_put@_this:
  1127                           	opt stack 0
  1128  000021                     UART_buff_get@_this:
  1129                           	opt stack 0
  1130  000021                     ___awdiv@quotient:
  1131                           	opt stack 0
  1132  000021                     memset@p:
  1133                           	opt stack 0
  1134  000021                     ___ftge@ff1:
  1135                           	opt stack 0
  1136                           
  1137                           ; 3 bytes @ 0x20
  1138  000021                     	ds	2
  1139  000023                     ??_UART_buff_get:
  1140  000023                     ?___altoft:
  1141                           	opt stack 0
  1142  000023                     ?___awtoft:
  1143                           	opt stack 0
  1144  000023                     FastTransfer_buffer_put@towhere:
  1145                           	opt stack 0
  1146  000023                     UART_buff_put@c:
  1147                           	opt stack 0
  1148  000023                     FastTransfer_buffer_flush@_this:
  1149                           	opt stack 0
  1150  000023                     crcBufS_status_put@wantedTime:
  1151                           	opt stack 0
  1152  000023                     UART_buff_init@_this:
  1153                           	opt stack 0
  1154  000023                     ___awtoft@c:
  1155                           	opt stack 0
  1156  000023                     ___altoft@c:
  1157                           	opt stack 0
  1158                           
  1159                           ; 4 bytes @ 0x22
  1160  000023                     	ds	1
  1161  000024                     ??_UART_buff_put:
  1162  000024                     FastTransfer_buffer_put@towhat:
  1163                           	opt stack 0
  1164  000024                     ___ftge@ff2:
  1165                           	opt stack 0
  1166                           
  1167                           ; 3 bytes @ 0x23
  1168  000024                     	ds	1
  1169  000025                     UART_buff_get@c:
  1170                           	opt stack 0
  1171  000025                     FastTransfer_buffer_flush@clearBuffer:
  1172                           	opt stack 0
  1173  000025                     crcBufS_get@wantedTime:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x24
  1177  000025                     	ds	1
  1178  000026                     ??_FastTransfer_buffer_put:
  1179  000026                     Send_put@_data:
  1180                           	opt stack 0
  1181  000026                     ___awtoft@sign:
  1182                           	opt stack 0
  1183                           
  1184                           ; 1 bytes @ 0x25
  1185  000026                     	ds	1
  1186  000027                     ??_sendData:
  1187  000027                     ??_receiveData:
  1188  000027                     ??___altoft:
  1189  000027                     ??___ftge:
  1190                           
  1191                           ; 0 bytes @ 0x26
  1192  000027                     	ds	1
  1193  000028                     sendData@whereToSend:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x27
  1197  000028                     	ds	1
  1198  000029                     sendData@CS:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x28
  1202  000029                     	ds	1
  1203  00002A                     Battery_Fault@fault:
  1204                           	opt stack 0
  1205  00002A                     Temp_Fault@fault:
  1206                           	opt stack 0
  1207  00002A                     sendData@i:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x29
  1211  00002A                     	ds	1
  1212  00002B                     ___altoft@exp:
  1213                           	opt stack 0
  1214  00002B                     Battery_Fault@i:
  1215                           	opt stack 0
  1216  00002B                     Temp_Fault@i:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x2A
  1220  00002B                     	ds	1
  1221  00002C                     ___altoft@sign:
  1222                           	opt stack 0
  1223                           
  1224                           ; 1 bytes @ 0x2B
  1225  00002C                     	ds	1
  1226  00002D                     tblptru	equ	0xFF8
  1227                           tblptrh	equ	0xFF7
  1228                           tblptrl	equ	0xFF6
  1229                           tablat	equ	0xFF5
  1230                           postinc0	equ	0xFEE
  1231                           wreg	equ	0xFE8
  1232                           postdec1	equ	0xFE5
  1233                           fsr1l	equ	0xFE1
  1234                           
  1235                           ; 0 bytes @ 0x2C
  1236 ;;
  1237 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1238 ;;
  1239 ;; *************** function _main *****************
  1240 ;; Defined at:
  1241 ;;		line 30 in file "Main.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;  argc            2    9[BANK1 ] int 
  1244 ;;  argv            3   11[BANK1 ] PTR PTR unsigned char 
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  2    9[BANK1 ] int 
  1249 ;; Registers used:
  1250 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1256 ;;      Params:         0       0       5       0       0       0       0
  1257 ;;      Locals:         0       0       0       0       0       0       0
  1258 ;;      Temps:          0       0       0       0       0       0       0
  1259 ;;      Totals:         0       0       5       0       0       0       0
  1260 ;;Total ram usage:        5 bytes
  1261 ;; Hardware stack levels required when called:   10
  1262 ;; This function calls:
  1263 ;;		_Battery_Convert
  1264 ;;		_Battery_Fault
  1265 ;;		_RunBypas
  1266 ;;		_SYSTEM_Initialize
  1267 ;;		_Temp_Convert
  1268 ;;		_Temp_Fault
  1269 ;;		_updateComms
  1270 ;; This function is called by:
  1271 ;;		Startup code after reset
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text0
  1276  003802                     __ptext0:
  1277                           	opt stack 0
  1278  003802                     _main:
  1279                           	opt stack 21
  1280                           
  1281                           ;Main.c: 32: SYSTEM_Initialize();
  1282                           
  1283                           ;incstack = 0
  1284  003802  EC7D  F01A         	call	_SYSTEM_Initialize	;wreg free
  1285                           
  1286                           ;Main.c: 51: (INTCONbits.GIE = 1);
  1287  003806  8EF2               	bsf	intcon,7,c	;volatile
  1288                           
  1289                           ;Main.c: 54: (INTCONbits.PEIE = 1);
  1290  003808  8CF2               	bsf	intcon,6,c	;volatile
  1291  00380A  D000               	goto	l5435
  1292  00380C                     l5435:
  1293                           
  1294                           ;Main.c: 65: {
  1295                           ;Main.c: 66: if (Temp_Done)
  1296  00380C  0100               	movlb	0	; () banked
  1297  00380E  5188               	movf	_Temp_Done& (0+255),w,b
  1298  003810  0100               	movlb	0	; () banked
  1299  003812  1189               	iorwf	(_Temp_Done+1)& (0+255),w,b
  1300  003814  B4D8               	btfsc	status,2,c
  1301  003816  D005               	goto	l5441
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;Main.c: 67: {
  1305                           ;Main.c: 68: Temp_Convert();
  1306  003818  EC15  F00C         	call	_Temp_Convert	;wreg free
  1307                           
  1308                           ;Main.c: 69: Temp_Fault();
  1309  00381C  EC45  F01A         	call	_Temp_Fault	;wreg free
  1310  003820  D000               	goto	l5441
  1311  003822                     l5441:
  1312                           
  1313                           ;Main.c: 74: }
  1314                           ;Main.c: 75: if (Volt_Done)
  1315  003822  0100               	movlb	0	; () banked
  1316  003824  518A               	movf	_Volt_Done& (0+255),w,b
  1317  003826  0100               	movlb	0	; () banked
  1318  003828  118B               	iorwf	(_Volt_Done+1)& (0+255),w,b
  1319  00382A  B4D8               	btfsc	status,2,c
  1320  00382C  D007               	goto	l5449
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;Main.c: 76: {
  1324                           ;Main.c: 77: Battery_Convert();
  1325  00382E  EC63  F014         	call	_Battery_Convert	;wreg free
  1326                           
  1327                           ;Main.c: 78: Battery_Fault();
  1328  003832  ECF4  F017         	call	_Battery_Fault	;wreg free
  1329                           
  1330                           ;Main.c: 79: RunBypas();
  1331  003836  ECD4  F015         	call	_RunBypas	;wreg free
  1332  00383A  D000               	goto	l5449
  1333  00383C                     l5449:
  1334                           
  1335                           ;Main.c: 84: }
  1336                           ;Main.c: 85: updateComms();
  1337  00383C  ECF5  F008         	call	_updateComms	;wreg free
  1338  003840  D7E5               	goto	l5435
  1339                           
  1340                           ;Main.c: 102: }
  1341                           ;Main.c: 103: return (0);
  1342                           ;	Return value of _main is never used
  1343  003842  EF55  F000         	goto	start
  1344  003846                     __end_of_main:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           intcon	equ	0xFF2
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1l	equ	0xFE1
  1355                           status	equ	0xFD8
  1356                           
  1357 ;; *************** function _updateComms *****************
  1358 ;; Defined at:
  1359 ;;		line 12 in file "Communications.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;		None
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;		None
  1364 ;; Return value:  Size  Location     Type
  1365 ;;		None               void
  1366 ;; Registers used:
  1367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1373 ;;      Params:         0       0       0       0       0       0       0
  1374 ;;      Locals:         0       0       0       0       0       0       0
  1375 ;;      Temps:          0       0       0       0       0       0       0
  1376 ;;      Totals:         0       0       0       0       0       0       0
  1377 ;;Total ram usage:        0 bytes
  1378 ;; Hardware stack levels used:    1
  1379 ;; Hardware stack levels required when called:    9
  1380 ;; This function calls:
  1381 ;;		_Battery_Get
  1382 ;;		_Delay
  1383 ;;		_Tempeture_Get
  1384 ;;		_ToSend
  1385 ;;		___fttol
  1386 ;;		_receiveData
  1387 ;;		_sendData
  1388 ;; This function is called by:
  1389 ;;		_main
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text1
  1394  0011EA                     __ptext1:
  1395                           	opt stack 0
  1396  0011EA                     _updateComms:
  1397                           	opt stack 21
  1398                           
  1399                           ;Communications.c: 15: if (receiveData()) {
  1400                           
  1401                           ;incstack = 0
  1402  0011EA  EC0F  F003         	call	_receiveData	;wreg free
  1403  0011EE  0900               	iorlw	0
  1404  0011F0  B4D8               	btfsc	status,2,c
  1405  0011F2  0012               	return	
  1406                           
  1407                           ;Communications.c: 16: Delay(5);
  1408  0011F4  0E05               	movlw	5
  1409  0011F6  6E1B               	movwf	Delay@d_lenth,c
  1410  0011F8  0E00               	movlw	0
  1411  0011FA  6E1C               	movwf	Delay@d_lenth+1,c
  1412  0011FC  0E00               	movlw	0
  1413  0011FE  6E1D               	movwf	Delay@d_lenth+2,c
  1414  001200  0E00               	movlw	0
  1415  001202  6E1E               	movwf	Delay@d_lenth+3,c
  1416  001204  ECB7  F01B         	call	_Delay	;wreg free
  1417                           
  1418                           ;Communications.c: 17: LATEbits.LATE1 = 1;
  1419  001208  828D               	bsf	3981,1,c	;volatile
  1420                           
  1421                           ;Communications.c: 18: Delay(5);
  1422  00120A  0E05               	movlw	5
  1423  00120C  6E1B               	movwf	Delay@d_lenth,c
  1424  00120E  0E00               	movlw	0
  1425  001210  6E1C               	movwf	Delay@d_lenth+1,c
  1426  001212  0E00               	movlw	0
  1427  001214  6E1D               	movwf	Delay@d_lenth+2,c
  1428  001216  0E00               	movlw	0
  1429  001218  6E1E               	movwf	Delay@d_lenth+3,c
  1430  00121A  ECB7  F01B         	call	_Delay	;wreg free
  1431                           
  1432                           ;Communications.c: 19: ToSend(0, 2);
  1433  00121E  0E00               	movlw	0
  1434  001220  0100               	movlb	0	; () banked
  1435  001222  6FF2               	movwf	(ToSend@what+1)& (0+255),b
  1436  001224  0E02               	movlw	2
  1437  001226  6FF1               	movwf	ToSend@what& (0+255),b
  1438  001228  0E00               	movlw	0
  1439  00122A  EC77  F01D         	call	_ToSend
  1440                           
  1441                           ;Communications.c: 20: ToSend(1, Battery_Get(0));
  1442  00122E  0E00               	movlw	0
  1443  001230  0100               	movlb	0	; () banked
  1444  001232  6FE0               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1445  001234  0E00               	movlw	0
  1446  001236  6FDF               	movwf	Battery_Get@channelnum& (0+255),b
  1447  001238  EC66  F01B         	call	_Battery_Get	;wreg free
  1448  00123C  C0DF  F0E2         	movff	?_Battery_Get,___fttol@f1
  1449  001240  C0E0  F0E3         	movff	?_Battery_Get+1,___fttol@f1+1
  1450  001244  C0E1  F0E4         	movff	?_Battery_Get+2,___fttol@f1+2
  1451  001248  ECB5  F010         	call	___fttol	;wreg free
  1452  00124C  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1453  001250  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1454  001254  0E01               	movlw	1
  1455  001256  EC77  F01D         	call	_ToSend
  1456                           
  1457                           ;Communications.c: 21: ToSend(2, Battery_Get(1));
  1458  00125A  0E00               	movlw	0
  1459  00125C  0100               	movlb	0	; () banked
  1460  00125E  6FE0               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1461  001260  0E01               	movlw	1
  1462  001262  6FDF               	movwf	Battery_Get@channelnum& (0+255),b
  1463  001264  EC66  F01B         	call	_Battery_Get	;wreg free
  1464  001268  C0DF  F0E2         	movff	?_Battery_Get,___fttol@f1
  1465  00126C  C0E0  F0E3         	movff	?_Battery_Get+1,___fttol@f1+1
  1466  001270  C0E1  F0E4         	movff	?_Battery_Get+2,___fttol@f1+2
  1467  001274  ECB5  F010         	call	___fttol	;wreg free
  1468  001278  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1469  00127C  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1470  001280  0E02               	movlw	2
  1471  001282  EC77  F01D         	call	_ToSend
  1472                           
  1473                           ;Communications.c: 22: ToSend(3, Battery_Get(2));
  1474  001286  0E00               	movlw	0
  1475  001288  0100               	movlb	0	; () banked
  1476  00128A  6FE0               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1477  00128C  0E02               	movlw	2
  1478  00128E  6FDF               	movwf	Battery_Get@channelnum& (0+255),b
  1479  001290  EC66  F01B         	call	_Battery_Get	;wreg free
  1480  001294  C0DF  F0E2         	movff	?_Battery_Get,___fttol@f1
  1481  001298  C0E0  F0E3         	movff	?_Battery_Get+1,___fttol@f1+1
  1482  00129C  C0E1  F0E4         	movff	?_Battery_Get+2,___fttol@f1+2
  1483  0012A0  ECB5  F010         	call	___fttol	;wreg free
  1484  0012A4  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1485  0012A8  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1486  0012AC  0E03               	movlw	3
  1487  0012AE  EC77  F01D         	call	_ToSend
  1488                           
  1489                           ;Communications.c: 23: ToSend(4, Battery_Get(3));
  1490  0012B2  0E00               	movlw	0
  1491  0012B4  0100               	movlb	0	; () banked
  1492  0012B6  6FE0               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1493  0012B8  0E03               	movlw	3
  1494  0012BA  6FDF               	movwf	Battery_Get@channelnum& (0+255),b
  1495  0012BC  EC66  F01B         	call	_Battery_Get	;wreg free
  1496  0012C0  C0DF  F0E2         	movff	?_Battery_Get,___fttol@f1
  1497  0012C4  C0E0  F0E3         	movff	?_Battery_Get+1,___fttol@f1+1
  1498  0012C8  C0E1  F0E4         	movff	?_Battery_Get+2,___fttol@f1+2
  1499  0012CC  ECB5  F010         	call	___fttol	;wreg free
  1500  0012D0  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1501  0012D4  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1502  0012D8  0E04               	movlw	4
  1503  0012DA  EC77  F01D         	call	_ToSend
  1504                           
  1505                           ;Communications.c: 24: ToSend(5, Battery_Get(4));
  1506  0012DE  0E00               	movlw	0
  1507  0012E0  0100               	movlb	0	; () banked
  1508  0012E2  6FE0               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1509  0012E4  0E04               	movlw	4
  1510  0012E6  6FDF               	movwf	Battery_Get@channelnum& (0+255),b
  1511  0012E8  EC66  F01B         	call	_Battery_Get	;wreg free
  1512  0012EC  C0DF  F0E2         	movff	?_Battery_Get,___fttol@f1
  1513  0012F0  C0E0  F0E3         	movff	?_Battery_Get+1,___fttol@f1+1
  1514  0012F4  C0E1  F0E4         	movff	?_Battery_Get+2,___fttol@f1+2
  1515  0012F8  ECB5  F010         	call	___fttol	;wreg free
  1516  0012FC  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1517  001300  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1518  001304  0E05               	movlw	5
  1519  001306  EC77  F01D         	call	_ToSend
  1520                           
  1521                           ;Communications.c: 25: ToSend(6, Battery_Get(5));
  1522  00130A  0E00               	movlw	0
  1523  00130C  0100               	movlb	0	; () banked
  1524  00130E  6FE0               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1525  001310  0E05               	movlw	5
  1526  001312  6FDF               	movwf	Battery_Get@channelnum& (0+255),b
  1527  001314  EC66  F01B         	call	_Battery_Get	;wreg free
  1528  001318  C0DF  F0E2         	movff	?_Battery_Get,___fttol@f1
  1529  00131C  C0E0  F0E3         	movff	?_Battery_Get+1,___fttol@f1+1
  1530  001320  C0E1  F0E4         	movff	?_Battery_Get+2,___fttol@f1+2
  1531  001324  ECB5  F010         	call	___fttol	;wreg free
  1532  001328  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1533  00132C  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1534  001330  0E06               	movlw	6
  1535  001332  EC77  F01D         	call	_ToSend
  1536                           
  1537                           ;Communications.c: 26: ToSend(7, Battery_Get(6));
  1538  001336  0E00               	movlw	0
  1539  001338  0100               	movlb	0	; () banked
  1540  00133A  6FE0               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1541  00133C  0E06               	movlw	6
  1542  00133E  6FDF               	movwf	Battery_Get@channelnum& (0+255),b
  1543  001340  EC66  F01B         	call	_Battery_Get	;wreg free
  1544  001344  C0DF  F0E2         	movff	?_Battery_Get,___fttol@f1
  1545  001348  C0E0  F0E3         	movff	?_Battery_Get+1,___fttol@f1+1
  1546  00134C  C0E1  F0E4         	movff	?_Battery_Get+2,___fttol@f1+2
  1547  001350  ECB5  F010         	call	___fttol	;wreg free
  1548  001354  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1549  001358  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1550  00135C  0E07               	movlw	7
  1551  00135E  EC77  F01D         	call	_ToSend
  1552                           
  1553                           ;Communications.c: 27: ToSend(8, Battery_Get(7));
  1554  001362  0E00               	movlw	0
  1555  001364  0100               	movlb	0	; () banked
  1556  001366  6FE0               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1557  001368  0E07               	movlw	7
  1558  00136A  6FDF               	movwf	Battery_Get@channelnum& (0+255),b
  1559  00136C  EC66  F01B         	call	_Battery_Get	;wreg free
  1560  001370  C0DF  F0E2         	movff	?_Battery_Get,___fttol@f1
  1561  001374  C0E0  F0E3         	movff	?_Battery_Get+1,___fttol@f1+1
  1562  001378  C0E1  F0E4         	movff	?_Battery_Get+2,___fttol@f1+2
  1563  00137C  ECB5  F010         	call	___fttol	;wreg free
  1564  001380  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1565  001384  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1566  001388  0E08               	movlw	8
  1567  00138A  EC77  F01D         	call	_ToSend
  1568                           
  1569                           ;Communications.c: 28: ToSend(9, Battery_Get(8));
  1570  00138E  0E00               	movlw	0
  1571  001390  0100               	movlb	0	; () banked
  1572  001392  6FE0               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1573  001394  0E08               	movlw	8
  1574  001396  6FDF               	movwf	Battery_Get@channelnum& (0+255),b
  1575  001398  EC66  F01B         	call	_Battery_Get	;wreg free
  1576  00139C  C0DF  F0E2         	movff	?_Battery_Get,___fttol@f1
  1577  0013A0  C0E0  F0E3         	movff	?_Battery_Get+1,___fttol@f1+1
  1578  0013A4  C0E1  F0E4         	movff	?_Battery_Get+2,___fttol@f1+2
  1579  0013A8  ECB5  F010         	call	___fttol	;wreg free
  1580  0013AC  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1581  0013B0  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1582  0013B4  0E09               	movlw	9
  1583  0013B6  EC77  F01D         	call	_ToSend
  1584                           
  1585                           ;Communications.c: 29: ToSend(10, Battery_Get(9));
  1586  0013BA  0E00               	movlw	0
  1587  0013BC  0100               	movlb	0	; () banked
  1588  0013BE  6FE0               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1589  0013C0  0E09               	movlw	9
  1590  0013C2  6FDF               	movwf	Battery_Get@channelnum& (0+255),b
  1591  0013C4  EC66  F01B         	call	_Battery_Get	;wreg free
  1592  0013C8  C0DF  F0E2         	movff	?_Battery_Get,___fttol@f1
  1593  0013CC  C0E0  F0E3         	movff	?_Battery_Get+1,___fttol@f1+1
  1594  0013D0  C0E1  F0E4         	movff	?_Battery_Get+2,___fttol@f1+2
  1595  0013D4  ECB5  F010         	call	___fttol	;wreg free
  1596  0013D8  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1597  0013DC  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1598  0013E0  0E0A               	movlw	10
  1599  0013E2  EC77  F01D         	call	_ToSend
  1600                           
  1601                           ;Communications.c: 30: ToSend(11, Tempeture_Get(0));
  1602  0013E6  0E00               	movlw	0
  1603  0013E8  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1604  0013EA  0E00               	movlw	0
  1605  0013EC  6E21               	movwf	Tempeture_Get@channelnum,c
  1606  0013EE  ECCB  F01C         	call	_Tempeture_Get	;wreg free
  1607  0013F2  C021  F0E2         	movff	?_Tempeture_Get,___fttol@f1
  1608  0013F6  C022  F0E3         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1609  0013FA  C023  F0E4         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1610  0013FE  ECB5  F010         	call	___fttol	;wreg free
  1611  001402  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1612  001406  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1613  00140A  0E0B               	movlw	11
  1614  00140C  EC77  F01D         	call	_ToSend
  1615                           
  1616                           ;Communications.c: 31: ToSend(12, Tempeture_Get(1));
  1617  001410  0E00               	movlw	0
  1618  001412  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1619  001414  0E01               	movlw	1
  1620  001416  6E21               	movwf	Tempeture_Get@channelnum,c
  1621  001418  ECCB  F01C         	call	_Tempeture_Get	;wreg free
  1622  00141C  C021  F0E2         	movff	?_Tempeture_Get,___fttol@f1
  1623  001420  C022  F0E3         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1624  001424  C023  F0E4         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1625  001428  ECB5  F010         	call	___fttol	;wreg free
  1626  00142C  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1627  001430  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1628  001434  0E0C               	movlw	12
  1629  001436  EC77  F01D         	call	_ToSend
  1630                           
  1631                           ;Communications.c: 32: ToSend(13, Tempeture_Get(2));
  1632  00143A  0E00               	movlw	0
  1633  00143C  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1634  00143E  0E02               	movlw	2
  1635  001440  6E21               	movwf	Tempeture_Get@channelnum,c
  1636  001442  ECCB  F01C         	call	_Tempeture_Get	;wreg free
  1637  001446  C021  F0E2         	movff	?_Tempeture_Get,___fttol@f1
  1638  00144A  C022  F0E3         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1639  00144E  C023  F0E4         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1640  001452  ECB5  F010         	call	___fttol	;wreg free
  1641  001456  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1642  00145A  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1643  00145E  0E0D               	movlw	13
  1644  001460  EC77  F01D         	call	_ToSend
  1645                           
  1646                           ;Communications.c: 33: ToSend(14, Tempeture_Get(3));
  1647  001464  0E00               	movlw	0
  1648  001466  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1649  001468  0E03               	movlw	3
  1650  00146A  6E21               	movwf	Tempeture_Get@channelnum,c
  1651  00146C  ECCB  F01C         	call	_Tempeture_Get	;wreg free
  1652  001470  C021  F0E2         	movff	?_Tempeture_Get,___fttol@f1
  1653  001474  C022  F0E3         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1654  001478  C023  F0E4         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1655  00147C  ECB5  F010         	call	___fttol	;wreg free
  1656  001480  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1657  001484  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1658  001488  0E0E               	movlw	14
  1659  00148A  EC77  F01D         	call	_ToSend
  1660                           
  1661                           ;Communications.c: 34: ToSend(15, Tempeture_Get(4));
  1662  00148E  0E00               	movlw	0
  1663  001490  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1664  001492  0E04               	movlw	4
  1665  001494  6E21               	movwf	Tempeture_Get@channelnum,c
  1666  001496  ECCB  F01C         	call	_Tempeture_Get	;wreg free
  1667  00149A  C021  F0E2         	movff	?_Tempeture_Get,___fttol@f1
  1668  00149E  C022  F0E3         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1669  0014A2  C023  F0E4         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1670  0014A6  ECB5  F010         	call	___fttol	;wreg free
  1671  0014AA  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1672  0014AE  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1673  0014B2  0E0F               	movlw	15
  1674  0014B4  EC77  F01D         	call	_ToSend
  1675                           
  1676                           ;Communications.c: 35: ToSend(16, Tempeture_Get(5));
  1677  0014B8  0E00               	movlw	0
  1678  0014BA  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1679  0014BC  0E05               	movlw	5
  1680  0014BE  6E21               	movwf	Tempeture_Get@channelnum,c
  1681  0014C0  ECCB  F01C         	call	_Tempeture_Get	;wreg free
  1682  0014C4  C021  F0E2         	movff	?_Tempeture_Get,___fttol@f1
  1683  0014C8  C022  F0E3         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1684  0014CC  C023  F0E4         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1685  0014D0  ECB5  F010         	call	___fttol	;wreg free
  1686  0014D4  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1687  0014D8  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1688  0014DC  0E10               	movlw	16
  1689  0014DE  EC77  F01D         	call	_ToSend
  1690                           
  1691                           ;Communications.c: 36: ToSend(17, Tempeture_Get(6));
  1692  0014E2  0E00               	movlw	0
  1693  0014E4  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1694  0014E6  0E06               	movlw	6
  1695  0014E8  6E21               	movwf	Tempeture_Get@channelnum,c
  1696  0014EA  ECCB  F01C         	call	_Tempeture_Get	;wreg free
  1697  0014EE  C021  F0E2         	movff	?_Tempeture_Get,___fttol@f1
  1698  0014F2  C022  F0E3         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1699  0014F6  C023  F0E4         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1700  0014FA  ECB5  F010         	call	___fttol	;wreg free
  1701  0014FE  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1702  001502  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1703  001506  0E11               	movlw	17
  1704  001508  EC77  F01D         	call	_ToSend
  1705                           
  1706                           ;Communications.c: 37: ToSend(18, Tempeture_Get(7));
  1707  00150C  0E00               	movlw	0
  1708  00150E  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1709  001510  0E07               	movlw	7
  1710  001512  6E21               	movwf	Tempeture_Get@channelnum,c
  1711  001514  ECCB  F01C         	call	_Tempeture_Get	;wreg free
  1712  001518  C021  F0E2         	movff	?_Tempeture_Get,___fttol@f1
  1713  00151C  C022  F0E3         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1714  001520  C023  F0E4         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1715  001524  ECB5  F010         	call	___fttol	;wreg free
  1716  001528  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1717  00152C  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1718  001530  0E12               	movlw	18
  1719  001532  EC77  F01D         	call	_ToSend
  1720                           
  1721                           ;Communications.c: 38: ToSend(19, Tempeture_Get(8));
  1722  001536  0E00               	movlw	0
  1723  001538  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1724  00153A  0E08               	movlw	8
  1725  00153C  6E21               	movwf	Tempeture_Get@channelnum,c
  1726  00153E  ECCB  F01C         	call	_Tempeture_Get	;wreg free
  1727  001542  C021  F0E2         	movff	?_Tempeture_Get,___fttol@f1
  1728  001546  C022  F0E3         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1729  00154A  C023  F0E4         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1730  00154E  ECB5  F010         	call	___fttol	;wreg free
  1731  001552  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1732  001556  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1733  00155A  0E13               	movlw	19
  1734  00155C  EC77  F01D         	call	_ToSend
  1735                           
  1736                           ;Communications.c: 39: ToSend(20, Tempeture_Get(9));
  1737  001560  0E00               	movlw	0
  1738  001562  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1739  001564  0E09               	movlw	9
  1740  001566  6E21               	movwf	Tempeture_Get@channelnum,c
  1741  001568  ECCB  F01C         	call	_Tempeture_Get	;wreg free
  1742  00156C  C021  F0E2         	movff	?_Tempeture_Get,___fttol@f1
  1743  001570  C022  F0E3         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1744  001574  C023  F0E4         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1745  001578  ECB5  F010         	call	___fttol	;wreg free
  1746  00157C  C0E2  F0F1         	movff	?___fttol,ToSend@what
  1747  001580  C0E3  F0F2         	movff	?___fttol+1,ToSend@what+1
  1748  001584  0E14               	movlw	20
  1749  001586  EC77  F01D         	call	_ToSend
  1750                           
  1751                           ;Communications.c: 40: sendData(16);
  1752  00158A  0E10               	movlw	16
  1753  00158C  ECAE  F012         	call	_sendData
  1754                           
  1755                           ;Communications.c: 41: Delay(10);
  1756  001590  0E0A               	movlw	10
  1757  001592  6E1B               	movwf	Delay@d_lenth,c
  1758  001594  0E00               	movlw	0
  1759  001596  6E1C               	movwf	Delay@d_lenth+1,c
  1760  001598  0E00               	movlw	0
  1761  00159A  6E1D               	movwf	Delay@d_lenth+2,c
  1762  00159C  0E00               	movlw	0
  1763  00159E  6E1E               	movwf	Delay@d_lenth+3,c
  1764  0015A0  ECB7  F01B         	call	_Delay	;wreg free
  1765                           
  1766                           ;Communications.c: 42: LATEbits.LATE1 = 0;
  1767  0015A4  928D               	bcf	3981,1,c	;volatile
  1768                           
  1769                           ;Communications.c: 43: LATAbits.LATA4 ^= 1;
  1770  0015A6  7889               	btg	3977,4,c	;volatile
  1771  0015A8  0012               	return	
  1772  0015AA  0012               	return		;funcret
  1773  0015AC                     __end_of_updateComms:
  1774                           	opt stack 0
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           intcon	equ	0xFF2
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1l	equ	0xFE1
  1784                           status	equ	0xFD8
  1785                           
  1786 ;; *************** function _sendData *****************
  1787 ;; Defined at:
  1788 ;;		line 53 in file "FastTransfer.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;  whereToSend     1    wreg     unsigned char 
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;  whereToSend     1   39[COMRAM] unsigned char 
  1793 ;;  i               2   41[COMRAM] int 
  1794 ;;  CS              1   40[COMRAM] unsigned char 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;		None               void
  1797 ;; Registers used:
  1798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1804 ;;      Params:         0       0       0       0       0       0       0
  1805 ;;      Locals:         4       0       0       0       0       0       0
  1806 ;;      Temps:          1       0       0       0       0       0       0
  1807 ;;      Totals:         5       0       0       0       0       0       0
  1808 ;;Total ram usage:        5 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    7
  1811 ;; This function calls:
  1812 ;;		Absolute function
  1813 ;;		_CRC8
  1814 ;;		_FastTransfer_buffer_flush
  1815 ;;		_Send_put
  1816 ;;		_crcBufS_put
  1817 ;; This function is called by:
  1818 ;;		_updateComms
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           	psect	text2
  1823  00255C                     __ptext2:
  1824                           	opt stack 0
  1825  00255C                     _sendData:
  1826                           	opt stack 22
  1827                           
  1828                           ;incstack = 0
  1829                           ;sendData@whereToSend stored from wreg
  1830  00255C  6E28               	movwf	sendData@whereToSend,c
  1831                           
  1832                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1833  00255E  C098  F01B         	movff	_sendStructAddress,CRC8@data
  1834  002562  C099  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1835  002566  C2CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1836  00256A  EC14  F01B         	call	_CRC8	;wreg free
  1837  00256E  6E29               	movwf	sendData@CS,c
  1838                           
  1839                           ;FastTransfer.c: 58: serial_write(0x06);
  1840  002570  D801               	call	u5178
  1841  002572  D00B               	goto	l5003
  1842  002574                     u5178:
  1843  002574  0005               	push	
  1844  002576  6EFA               	movwf	pclath,c
  1845  002578  5035               	movf	_serial_write,w,c
  1846  00257A  6EFD               	movwf	tosl,c
  1847  00257C  5036               	movf	_serial_write+1,w,c
  1848  00257E  6EFE               	movwf	tosh,c
  1849  002580  50F8               	movf	tblptru,w,c
  1850  002582  6EFF               	movwf	tosu,c
  1851  002584  50FA               	movf	pclath,w,c
  1852  002586  0E06               	movlw	6
  1853  002588  0012               	return		;indir
  1854  00258A                     l5003:
  1855                           
  1856                           ;FastTransfer.c: 59: serial_write(0x85);
  1857  00258A  D801               	call	u5188
  1858  00258C  D00B               	goto	l5005
  1859  00258E                     u5188:
  1860  00258E  0005               	push	
  1861  002590  6EFA               	movwf	pclath,c
  1862  002592  5035               	movf	_serial_write,w,c
  1863  002594  6EFD               	movwf	tosl,c
  1864  002596  5036               	movf	_serial_write+1,w,c
  1865  002598  6EFE               	movwf	tosh,c
  1866  00259A  50F8               	movf	tblptru,w,c
  1867  00259C  6EFF               	movwf	tosu,c
  1868  00259E  50FA               	movf	pclath,w,c
  1869  0025A0  0E85               	movlw	133
  1870  0025A2  0012               	return		;indir
  1871  0025A4                     l5005:
  1872                           
  1873                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1874  0025A4  D801               	call	u5198
  1875  0025A6  D00B               	goto	l5007
  1876  0025A8                     u5198:
  1877  0025A8  0005               	push	
  1878  0025AA  6EFA               	movwf	pclath,c
  1879  0025AC  5035               	movf	_serial_write,w,c
  1880  0025AE  6EFD               	movwf	tosl,c
  1881  0025B0  5036               	movf	_serial_write+1,w,c
  1882  0025B2  6EFE               	movwf	tosh,c
  1883  0025B4  50F8               	movf	tblptru,w,c
  1884  0025B6  6EFF               	movwf	tosu,c
  1885  0025B8  50FA               	movf	pclath,w,c
  1886  0025BA  5028               	movf	sendData@whereToSend,w,c
  1887  0025BC  0012               	return		;indir
  1888  0025BE                     l5007:
  1889                           
  1890                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1891  0025BE  D801               	call	u5208
  1892  0025C0  D00B               	goto	l5009
  1893  0025C2                     u5208:
  1894  0025C2  0005               	push	
  1895  0025C4  6EFA               	movwf	pclath,c
  1896  0025C6  5035               	movf	_serial_write,w,c
  1897  0025C8  6EFD               	movwf	tosl,c
  1898  0025CA  5036               	movf	_serial_write+1,w,c
  1899  0025CC  6EFE               	movwf	tosh,c
  1900  0025CE  50F8               	movf	tblptru,w,c
  1901  0025D0  6EFF               	movwf	tosu,c
  1902  0025D2  50FA               	movf	pclath,w,c
  1903  0025D4  503E               	movf	_moduleAddress,w,c
  1904  0025D6  0012               	return		;indir
  1905  0025D8                     l5009:
  1906                           
  1907                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1908  0025D8  D801               	call	u5218
  1909  0025DA  D00C               	goto	l5011
  1910  0025DC                     u5218:
  1911  0025DC  0005               	push	
  1912  0025DE  6EFA               	movwf	pclath,c
  1913  0025E0  5035               	movf	_serial_write,w,c
  1914  0025E2  6EFD               	movwf	tosl,c
  1915  0025E4  5036               	movf	_serial_write+1,w,c
  1916  0025E6  6EFE               	movwf	tosh,c
  1917  0025E8  50F8               	movf	tblptru,w,c
  1918  0025EA  6EFF               	movwf	tosu,c
  1919  0025EC  50FA               	movf	pclath,w,c
  1920  0025EE  0102               	movlb	2	; () banked
  1921  0025F0  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1922  0025F2  0012               	return		;indir
  1923  0025F4                     l5011:
  1924                           
  1925                           ;FastTransfer.c: 66: int i;
  1926                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1927  0025F4  0E00               	movlw	0
  1928  0025F6  6E2B               	movwf	sendData@i+1,c
  1929  0025F8  0E00               	movlw	0
  1930  0025FA  6E2A               	movwf	sendData@i,c
  1931  0025FC  D018               	goto	l5017
  1932  0025FE                     l5013:
  1933                           
  1934                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1935  0025FE  D801               	call	u5228
  1936  002600  D013               	goto	l5015
  1937  002602                     u5228:
  1938  002602  0005               	push	
  1939  002604  6EFA               	movwf	pclath,c
  1940  002606  5035               	movf	_serial_write,w,c
  1941  002608  6EFD               	movwf	tosl,c
  1942  00260A  5036               	movf	_serial_write+1,w,c
  1943  00260C  6EFE               	movwf	tosh,c
  1944  00260E  50F8               	movf	tblptru,w,c
  1945  002610  6EFF               	movwf	tosu,c
  1946  002612  50FA               	movf	pclath,w,c
  1947  002614  502A               	movf	sendData@i,w,c
  1948  002616  0100               	movlb	0	; () banked
  1949  002618  2598               	addwf	_sendStructAddress& (0+255),w,b
  1950  00261A  6ED9               	movwf	fsr2l,c
  1951  00261C  502B               	movf	sendData@i+1,w,c
  1952  00261E  0100               	movlb	0	; () banked
  1953  002620  2199               	addwfc	(_sendStructAddress+1)& (0+255),w,b
  1954  002622  6EDA               	movwf	fsr2h,c
  1955  002624  50DF               	movf	indf2,w,c
  1956  002626  0012               	return		;indir
  1957  002628                     l5015:
  1958  002628  4A2A               	infsnz	sendData@i,f,c
  1959  00262A  2A2B               	incf	sendData@i+1,f,c
  1960  00262C  D000               	goto	l5017
  1961  00262E                     l5017:
  1962  00262E  0102               	movlb	2	; () banked
  1963  002630  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1964  002632  5C2A               	subwf	sendData@i,w,c
  1965  002634  502B               	movf	sendData@i+1,w,c
  1966  002636  0A80               	xorlw	128
  1967  002638  6E27               	movwf	??_sendData& (0+255),c
  1968  00263A  0102               	movlb	2	; () banked
  1969  00263C  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1970  00263E  0A80               	xorlw	128
  1971  002640  5827               	subwfb	??_sendData& (0+255),w,c
  1972  002642  A0D8               	btfss	status,0,c
  1973  002644  D7DC               	goto	l5013
  1974                           
  1975                           ; BSR set to: 2
  1976                           ;FastTransfer.c: 69: }
  1977                           ;FastTransfer.c: 72: serial_write(CS);
  1978                           
  1979                           ; BSR set to: 2
  1980  002646  D801               	call	u5248
  1981  002648  D00B               	goto	l5021
  1982  00264A                     u5248:
  1983  00264A  0005               	push	
  1984  00264C  6EFA               	movwf	pclath,c
  1985  00264E  5035               	movf	_serial_write,w,c
  1986  002650  6EFD               	movwf	tosl,c
  1987  002652  5036               	movf	_serial_write+1,w,c
  1988  002654  6EFE               	movwf	tosh,c
  1989  002656  50F8               	movf	tblptru,w,c
  1990  002658  6EFF               	movwf	tosu,c
  1991  00265A  50FA               	movf	pclath,w,c
  1992  00265C  5029               	movf	sendData@CS,w,c
  1993  00265E  0012               	return		;indir
  1994  002660                     l5021:
  1995                           
  1996                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1997  002660  0EB0               	movlw	low _crc_buffer
  1998  002662  6E1B               	movwf	crcBufS_put@_this,c
  1999  002664  0E00               	movlw	high _crc_buffer
  2000  002666  6E1C               	movwf	crcBufS_put@_this+1,c
  2001  002668  C028  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  2002  00266C  C029  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  2003  002670  0E00               	movlw	0
  2004  002672  6E1F               	movwf	crcBufS_put@status,c
  2005  002674  ECB7  F016         	call	_crcBufS_put
  2006                           
  2007                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  2008  002678  0E00               	movlw	low _ring_buffer
  2009  00267A  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  2010  00267C  0E02               	movlw	high _ring_buffer
  2011  00267E  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  2012  002680  0E00               	movlw	0
  2013  002682  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  2014  002684  0E01               	movlw	1
  2015  002686  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  2016  002688  ECB3  F01A         	call	_FastTransfer_buffer_flush	;wreg free
  2017  00268C  0012               	return		;funcret
  2018  00268E                     __end_of_sendData:
  2019                           	opt stack 0
  2020                           tosu	equ	0xFFF
  2021                           tosh	equ	0xFFE
  2022                           tosl	equ	0xFFD
  2023                           pclath	equ	0xFFA
  2024                           tblptru	equ	0xFF8
  2025                           tblptrh	equ	0xFF7
  2026                           tblptrl	equ	0xFF6
  2027                           tablat	equ	0xFF5
  2028                           intcon	equ	0xFF2
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           postdec1	equ	0xFE5
  2032                           fsr1l	equ	0xFE1
  2033                           indf2	equ	0xFDF
  2034                           fsr2h	equ	0xFDA
  2035                           fsr2l	equ	0xFD9
  2036                           status	equ	0xFD8
  2037                           
  2038 ;; *************** function _crcBufS_put *****************
  2039 ;; Defined at:
  2040 ;;		line 321 in file "FastTransfer.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2043 ;;		 -> crc_buffer(17), 
  2044 ;;  address         1   28[COMRAM] unsigned char 
  2045 ;;  oldCRC          1   29[COMRAM] unsigned char 
  2046 ;;  status          1   30[COMRAM] unsigned char 
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;		None
  2049 ;; Return value:  Size  Location     Type
  2050 ;;		None               void
  2051 ;; Registers used:
  2052 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2058 ;;      Params:         5       0       0       0       0       0       0
  2059 ;;      Locals:         0       0       0       0       0       0       0
  2060 ;;      Temps:          2       0       0       0       0       0       0
  2061 ;;      Totals:         7       0       0       0       0       0       0
  2062 ;;Total ram usage:        7 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; Hardware stack levels required when called:    4
  2065 ;; This function calls:
  2066 ;;		Nothing
  2067 ;; This function is called by:
  2068 ;;		_sendData
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           	psect	text3
  2073  002D6E                     __ptext3:
  2074                           	opt stack 0
  2075  002D6E                     _crcBufS_put:
  2076                           	opt stack 24
  2077                           
  2078                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  2079                           
  2080                           ;incstack = 0
  2081  002D6E  EE20 F00F          	lfsr	2,15
  2082  002D72  501B               	movf	crcBufS_put@_this,w,c
  2083  002D74  26D9               	addwf	fsr2l,f,c
  2084  002D76  501C               	movf	crcBufS_put@_this+1,w,c
  2085  002D78  22DA               	addwfc	fsr2h,f,c
  2086  002D7A  CFDE F020          	movff	postinc2,??_crcBufS_put
  2087  002D7E  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2088  002D82  5020               	movf	??_crcBufS_put,w,c
  2089  002D84  241B               	addwf	crcBufS_put@_this,w,c
  2090  002D86  6ED9               	movwf	fsr2l,c
  2091  002D88  5021               	movf	??_crcBufS_put+1,w,c
  2092  002D8A  201C               	addwfc	crcBufS_put@_this+1,w,c
  2093  002D8C  6EDA               	movwf	fsr2h,c
  2094  002D8E  C01D  FFDF         	movff	crcBufS_put@address,indf2
  2095                           
  2096                           ;FastTransfer.c: 323: _this->head++;
  2097  002D92  EE20 F00F          	lfsr	2,15
  2098  002D96  501B               	movf	crcBufS_put@_this,w,c
  2099  002D98  26D9               	addwf	fsr2l,f,c
  2100  002D9A  501C               	movf	crcBufS_put@_this+1,w,c
  2101  002D9C  22DA               	addwfc	fsr2h,f,c
  2102  002D9E  2ADE               	incf	postinc2,f,c
  2103  002DA0  0E00               	movlw	0
  2104  002DA2  22DD               	addwfc	postdec2,f,c
  2105                           
  2106                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  2107  002DA4  EE20 F00F          	lfsr	2,15
  2108  002DA8  501B               	movf	crcBufS_put@_this,w,c
  2109  002DAA  26D9               	addwf	fsr2l,f,c
  2110  002DAC  501C               	movf	crcBufS_put@_this+1,w,c
  2111  002DAE  22DA               	addwfc	fsr2h,f,c
  2112  002DB0  CFDE F020          	movff	postinc2,??_crcBufS_put
  2113  002DB4  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2114  002DB8  5020               	movf	??_crcBufS_put,w,c
  2115  002DBA  241B               	addwf	crcBufS_put@_this,w,c
  2116  002DBC  6ED9               	movwf	fsr2l,c
  2117  002DBE  5021               	movf	??_crcBufS_put+1,w,c
  2118  002DC0  201C               	addwfc	crcBufS_put@_this+1,w,c
  2119  002DC2  6EDA               	movwf	fsr2h,c
  2120  002DC4  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  2121                           
  2122                           ;FastTransfer.c: 325: _this->head++;
  2123  002DC8  EE20 F00F          	lfsr	2,15
  2124  002DCC  501B               	movf	crcBufS_put@_this,w,c
  2125  002DCE  26D9               	addwf	fsr2l,f,c
  2126  002DD0  501C               	movf	crcBufS_put@_this+1,w,c
  2127  002DD2  22DA               	addwfc	fsr2h,f,c
  2128  002DD4  2ADE               	incf	postinc2,f,c
  2129  002DD6  0E00               	movlw	0
  2130  002DD8  22DD               	addwfc	postdec2,f,c
  2131                           
  2132                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  2133  002DDA  EE20 F00F          	lfsr	2,15
  2134  002DDE  501B               	movf	crcBufS_put@_this,w,c
  2135  002DE0  26D9               	addwf	fsr2l,f,c
  2136  002DE2  501C               	movf	crcBufS_put@_this+1,w,c
  2137  002DE4  22DA               	addwfc	fsr2h,f,c
  2138  002DE6  CFDE F020          	movff	postinc2,??_crcBufS_put
  2139  002DEA  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2140  002DEE  5020               	movf	??_crcBufS_put,w,c
  2141  002DF0  241B               	addwf	crcBufS_put@_this,w,c
  2142  002DF2  6ED9               	movwf	fsr2l,c
  2143  002DF4  5021               	movf	??_crcBufS_put+1,w,c
  2144  002DF6  201C               	addwfc	crcBufS_put@_this+1,w,c
  2145  002DF8  6EDA               	movwf	fsr2h,c
  2146  002DFA  C01F  FFDF         	movff	crcBufS_put@status,indf2
  2147                           
  2148                           ;FastTransfer.c: 327: _this->head++;
  2149  002DFE  EE20 F00F          	lfsr	2,15
  2150  002E02  501B               	movf	crcBufS_put@_this,w,c
  2151  002E04  26D9               	addwf	fsr2l,f,c
  2152  002E06  501C               	movf	crcBufS_put@_this+1,w,c
  2153  002E08  22DA               	addwfc	fsr2h,f,c
  2154  002E0A  2ADE               	incf	postinc2,f,c
  2155  002E0C  0E00               	movlw	0
  2156  002E0E  22DD               	addwfc	postdec2,f,c
  2157                           
  2158                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  2159  002E10  EE20 F00F          	lfsr	2,15
  2160  002E14  501B               	movf	crcBufS_put@_this,w,c
  2161  002E16  26D9               	addwf	fsr2l,f,c
  2162  002E18  501C               	movf	crcBufS_put@_this+1,w,c
  2163  002E1A  22DA               	addwfc	fsr2h,f,c
  2164  002E1C  0E01               	movlw	1
  2165  002E1E  BEDB               	btfsc	plusw2,7,c
  2166  002E20  0012               	return	
  2167  002E22  0E01               	movlw	1
  2168  002E24  50DB               	movf	plusw2,w,c
  2169  002E26  E104               	bnz	u2670
  2170  002E28  0E0F               	movlw	15
  2171  002E2A  5CDE               	subwf	postinc2,w,c
  2172  002E2C  A0D8               	btfss	status,0,c
  2173  002E2E  0012               	return	
  2174  002E30                     u2670:
  2175                           
  2176                           ;FastTransfer.c: 329: _this->head = 0;
  2177  002E30  EE20 F00F          	lfsr	2,15
  2178  002E34  501B               	movf	crcBufS_put@_this,w,c
  2179  002E36  26D9               	addwf	fsr2l,f,c
  2180  002E38  501C               	movf	crcBufS_put@_this+1,w,c
  2181  002E3A  22DA               	addwfc	fsr2h,f,c
  2182  002E3C  0E00               	movlw	0
  2183  002E3E  6EDE               	movwf	postinc2,c
  2184  002E40  0E00               	movlw	0
  2185  002E42  6EDD               	movwf	postdec2,c
  2186  002E44  0012               	return	
  2187  002E46  0012               	return		;funcret
  2188  002E48                     __end_of_crcBufS_put:
  2189                           	opt stack 0
  2190                           tosu	equ	0xFFF
  2191                           tosh	equ	0xFFE
  2192                           tosl	equ	0xFFD
  2193                           pclath	equ	0xFFA
  2194                           tblptru	equ	0xFF8
  2195                           tblptrh	equ	0xFF7
  2196                           tblptrl	equ	0xFF6
  2197                           tablat	equ	0xFF5
  2198                           intcon	equ	0xFF2
  2199                           postinc0	equ	0xFEE
  2200                           wreg	equ	0xFE8
  2201                           postdec1	equ	0xFE5
  2202                           fsr1l	equ	0xFE1
  2203                           indf2	equ	0xFDF
  2204                           postinc2	equ	0xFDE
  2205                           postdec2	equ	0xFDD
  2206                           plusw2	equ	0xFDB
  2207                           fsr2h	equ	0xFDA
  2208                           fsr2l	equ	0xFD9
  2209                           status	equ	0xFD8
  2210                           
  2211 ;; *************** function _FastTransfer_buffer_flush *****************
  2212 ;; Defined at:
  2213 ;;		line 261 in file "FastTransfer.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  2216 ;;		 -> ring_buffer(206), 
  2217 ;;  clearBuffer     2   36[COMRAM] const int 
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;		None
  2220 ;; Return value:  Size  Location     Type
  2221 ;;		None               void
  2222 ;; Registers used:
  2223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2229 ;;      Params:         4       0       0       0       0       0       0
  2230 ;;      Locals:         0       0       0       0       0       0       0
  2231 ;;      Temps:          0       0       0       0       0       0       0
  2232 ;;      Totals:         4       0       0       0       0       0       0
  2233 ;;Total ram usage:        4 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; Hardware stack levels required when called:    5
  2236 ;; This function calls:
  2237 ;;		_memset
  2238 ;; This function is called by:
  2239 ;;		_sendData
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           	psect	text4
  2244  003566                     __ptext4:
  2245                           	opt stack 0
  2246  003566                     _FastTransfer_buffer_flush:
  2247                           	opt stack 23
  2248                           
  2249                           ;FastTransfer.c: 262: _this->count = 0;
  2250                           
  2251                           ;incstack = 0
  2252  003566  EE20 F0CC          	lfsr	2,204
  2253  00356A  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2254  00356C  26D9               	addwf	fsr2l,f,c
  2255  00356E  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2256  003570  22DA               	addwfc	fsr2h,f,c
  2257  003572  0E00               	movlw	0
  2258  003574  6EDE               	movwf	postinc2,c
  2259  003576  0E00               	movlw	0
  2260  003578  6EDD               	movwf	postdec2,c
  2261                           
  2262                           ;FastTransfer.c: 263: _this->head = 0;
  2263  00357A  EE20 F0C8          	lfsr	2,200
  2264  00357E  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2265  003580  26D9               	addwf	fsr2l,f,c
  2266  003582  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2267  003584  22DA               	addwfc	fsr2h,f,c
  2268  003586  0E00               	movlw	0
  2269  003588  6EDE               	movwf	postinc2,c
  2270  00358A  0E00               	movlw	0
  2271  00358C  6EDD               	movwf	postdec2,c
  2272                           
  2273                           ;FastTransfer.c: 264: _this->tail = 0;
  2274  00358E  EE20 F0CA          	lfsr	2,202
  2275  003592  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2276  003594  26D9               	addwf	fsr2l,f,c
  2277  003596  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2278  003598  22DA               	addwfc	fsr2h,f,c
  2279  00359A  0E00               	movlw	0
  2280  00359C  6EDE               	movwf	postinc2,c
  2281  00359E  0E00               	movlw	0
  2282  0035A0  6EDD               	movwf	postdec2,c
  2283                           
  2284                           ;FastTransfer.c: 265: if (clearBuffer) {
  2285  0035A2  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  2286  0035A4  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  2287  0035A6  B4D8               	btfsc	status,2,c
  2288  0035A8  0012               	return	
  2289                           
  2290                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  2291  0035AA  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2292  0035AE  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2293  0035B2  0E00               	movlw	0
  2294  0035B4  6E1E               	movwf	memset@c+1,c
  2295  0035B6  0E00               	movlw	0
  2296  0035B8  6E1D               	movwf	memset@c,c
  2297  0035BA  0E00               	movlw	0
  2298  0035BC  6E20               	movwf	memset@n+1,c
  2299  0035BE  0EC8               	movlw	200
  2300  0035C0  6E1F               	movwf	memset@n,c
  2301  0035C2  EC11  F01D         	call	_memset	;wreg free
  2302  0035C6  0012               	return	
  2303  0035C8  0012               	return		;funcret
  2304  0035CA                     __end_of_FastTransfer_buffer_flush:
  2305                           	opt stack 0
  2306                           tosu	equ	0xFFF
  2307                           tosh	equ	0xFFE
  2308                           tosl	equ	0xFFD
  2309                           pclath	equ	0xFFA
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           intcon	equ	0xFF2
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postdec1	equ	0xFE5
  2318                           fsr1l	equ	0xFE1
  2319                           indf2	equ	0xFDF
  2320                           postinc2	equ	0xFDE
  2321                           postdec2	equ	0xFDD
  2322                           plusw2	equ	0xFDB
  2323                           fsr2h	equ	0xFDA
  2324                           fsr2l	equ	0xFD9
  2325                           status	equ	0xFD8
  2326                           
  2327 ;; *************** function _receiveData *****************
  2328 ;; Defined at:
  2329 ;;		line 82 in file "FastTransfer.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;		None
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;  holder          3   10[BANK0 ] unsigned char [3]
  2334 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  2335 ;;  holder          3    7[BANK0 ] unsigned char [3]
  2336 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  2337 ;;  u               2   15[BANK0 ] int 
  2338 ;;  r               2   17[BANK0 ] int 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      unsigned char 
  2341 ;; Registers used:
  2342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2348 ;;      Params:         0       0       0       0       0       0       0
  2349 ;;      Locals:         0      12       0       0       0       0       0
  2350 ;;      Temps:          6       0       0       0       0       0       0
  2351 ;;      Totals:         6      12       0       0       0       0       0
  2352 ;;Total ram usage:       18 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    8
  2355 ;; This function calls:
  2356 ;;		Absolute function
  2357 ;;		_CRC8
  2358 ;;		_CRCcheck
  2359 ;;		_Receive_available
  2360 ;;		_Receive_get
  2361 ;;		_Receive_peek
  2362 ;;		_Send_put
  2363 ;; This function is called by:
  2364 ;;		_updateComms
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           
  2368                           	psect	text5
  2369  00061E                     __ptext5:
  2370                           	opt stack 0
  2371  00061E                     _receiveData:
  2372                           	opt stack 21
  2373                           
  2374                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2375                           
  2376                           ;incstack = 0
  2377  00061E  5042               	movf	_rx_len,w,c
  2378  000620  A4D8               	btfss	status,2,c
  2379  000622  D0AA               	goto	l5063
  2380                           
  2381                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2382  000624  D801               	call	u5268
  2383  000626  D00A               	goto	u5269
  2384  000628                     u5268:
  2385  000628  0005               	push	
  2386  00062A  6EFA               	movwf	pclath,c
  2387  00062C  5031               	movf	_serial_available,w,c
  2388  00062E  6EFD               	movwf	tosl,c
  2389  000630  5032               	movf	_serial_available+1,w,c
  2390  000632  6EFE               	movwf	tosh,c
  2391  000634  50F8               	movf	tblptru,w,c
  2392  000636  6EFF               	movwf	tosu,c
  2393  000638  50FA               	movf	pclath,w,c
  2394  00063A  0012               	return		;indir
  2395  00063C                     u5269:
  2396  00063C  BE1E               	btfsc	?_Receive_available+1,7,c
  2397  00063E  D09C               	goto	l5063
  2398  000640  501E               	movf	?_Receive_available+1,w,c
  2399  000642  E120               	bnz	l5039
  2400  000644  0E05               	movlw	5
  2401  000646  5C1D               	subwf	?_Receive_available,w,c
  2402  000648  B0D8               	btfsc	status,0,c
  2403  00064A  D01C               	goto	l5039
  2404  00064C  D095               	goto	l5063
  2405                           
  2406                           ;FastTransfer.c: 89: while (serial_read() != 0x06) {
  2407  00064E  D01A               	goto	l5039
  2408  000650                     l5031:
  2409                           
  2410                           ;FastTransfer.c: 93: alignErrorCounter++;
  2411  000650  0100               	movlb	0	; () banked
  2412  000652  4B8E               	infsnz	_alignErrorCounter& (0+255),f,b
  2413  000654  2B8F               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2417  000656  D801               	call	u5288
  2418  000658  D00A               	goto	u5289
  2419  00065A                     u5288:
  2420  00065A  0005               	push	
  2421  00065C  6EFA               	movwf	pclath,c
  2422  00065E  5031               	movf	_serial_available,w,c
  2423  000660  6EFD               	movwf	tosl,c
  2424  000662  5032               	movf	_serial_available+1,w,c
  2425  000664  6EFE               	movwf	tosh,c
  2426  000666  50F8               	movf	tblptru,w,c
  2427  000668  6EFF               	movwf	tosu,c
  2428  00066A  50FA               	movf	pclath,w,c
  2429  00066C  0012               	return		;indir
  2430  00066E                     u5289:
  2431  00066E  BE1E               	btfsc	?_Receive_available+1,7,c
  2432  000670  D006               	goto	l5035
  2433  000672  501E               	movf	?_Receive_available+1,w,c
  2434  000674  E107               	bnz	l5039
  2435  000676  0E05               	movlw	5
  2436  000678  5C1D               	subwf	?_Receive_available,w,c
  2437  00067A  B0D8               	btfsc	status,0,c
  2438  00067C  D003               	goto	l5039
  2439  00067E                     l5035:
  2440                           
  2441                           ;FastTransfer.c: 95: return 0;
  2442  00067E  0E00               	movlw	0
  2443  000680  0012               	return	
  2444  000682  D000               	goto	l5039
  2445  000684                     l5039:
  2446  000684  D801               	call	u5308
  2447  000686  D00A               	goto	u5309
  2448  000688                     u5308:
  2449  000688  0005               	push	
  2450  00068A  6EFA               	movwf	pclath,c
  2451  00068C  5033               	movf	_serial_read,w,c
  2452  00068E  6EFD               	movwf	tosl,c
  2453  000690  5034               	movf	_serial_read+1,w,c
  2454  000692  6EFE               	movwf	tosh,c
  2455  000694  50F8               	movf	tblptru,w,c
  2456  000696  6EFF               	movwf	tosu,c
  2457  000698  50FA               	movf	pclath,w,c
  2458  00069A  0012               	return		;indir
  2459  00069C                     u5309:
  2460  00069C  0A06               	xorlw	6
  2461  00069E  A4D8               	btfss	status,2,c
  2462  0006A0  D7D7               	goto	l5031
  2463                           
  2464                           ;FastTransfer.c: 96: }
  2465                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2466  0006A2  D801               	call	u5328
  2467  0006A4  D00A               	goto	u5329
  2468  0006A6                     u5328:
  2469  0006A6  0005               	push	
  2470  0006A8  6EFA               	movwf	pclath,c
  2471  0006AA  5033               	movf	_serial_read,w,c
  2472  0006AC  6EFD               	movwf	tosl,c
  2473  0006AE  5034               	movf	_serial_read+1,w,c
  2474  0006B0  6EFE               	movwf	tosh,c
  2475  0006B2  50F8               	movf	tblptru,w,c
  2476  0006B4  6EFF               	movwf	tosu,c
  2477  0006B6  50FA               	movf	pclath,w,c
  2478  0006B8  0012               	return		;indir
  2479  0006BA                     u5329:
  2480  0006BA  0A85               	xorlw	133
  2481  0006BC  A4D8               	btfss	status,2,c
  2482  0006BE  D05C               	goto	l5063
  2483                           
  2484                           ;FastTransfer.c: 98: rx_address = serial_read();
  2485  0006C0  D801               	call	u5348
  2486  0006C2  D00A               	goto	u5349
  2487  0006C4                     u5348:
  2488  0006C4  0005               	push	
  2489  0006C6  6EFA               	movwf	pclath,c
  2490  0006C8  5033               	movf	_serial_read,w,c
  2491  0006CA  6EFD               	movwf	tosl,c
  2492  0006CC  5034               	movf	_serial_read+1,w,c
  2493  0006CE  6EFE               	movwf	tosh,c
  2494  0006D0  50F8               	movf	tblptru,w,c
  2495  0006D2  6EFF               	movwf	tosu,c
  2496  0006D4  50FA               	movf	pclath,w,c
  2497  0006D6  0012               	return		;indir
  2498  0006D8                     u5349:
  2499  0006D8  6E40               	movwf	_rx_address,c
  2500                           
  2501                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2502  0006DA  D801               	call	u5358
  2503  0006DC  D00A               	goto	u5359
  2504  0006DE                     u5358:
  2505  0006DE  0005               	push	
  2506  0006E0  6EFA               	movwf	pclath,c
  2507  0006E2  5033               	movf	_serial_read,w,c
  2508  0006E4  6EFD               	movwf	tosl,c
  2509  0006E6  5034               	movf	_serial_read+1,w,c
  2510  0006E8  6EFE               	movwf	tosh,c
  2511  0006EA  50F8               	movf	tblptru,w,c
  2512  0006EC  6EFF               	movwf	tosu,c
  2513  0006EE  50FA               	movf	pclath,w,c
  2514  0006F0  0012               	return		;indir
  2515  0006F2                     u5359:
  2516  0006F2  6E3F               	movwf	_returnAddress,c
  2517                           
  2518                           ;FastTransfer.c: 100: rx_len = serial_read();
  2519  0006F4  D801               	call	u5368
  2520  0006F6  D00A               	goto	u5369
  2521  0006F8                     u5368:
  2522  0006F8  0005               	push	
  2523  0006FA  6EFA               	movwf	pclath,c
  2524  0006FC  5033               	movf	_serial_read,w,c
  2525  0006FE  6EFD               	movwf	tosl,c
  2526  000700  5034               	movf	_serial_read+1,w,c
  2527  000702  6EFE               	movwf	tosh,c
  2528  000704  50F8               	movf	tblptru,w,c
  2529  000706  6EFF               	movwf	tosu,c
  2530  000708  50FA               	movf	pclath,w,c
  2531  00070A  0012               	return		;indir
  2532  00070C                     u5369:
  2533  00070C  6E42               	movwf	_rx_len,c
  2534                           
  2535                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2536  00070E  503E               	movf	_moduleAddress,w,c
  2537  000710  1840               	xorwf	_rx_address,w,c
  2538  000712  B4D8               	btfsc	status,2,c
  2539  000714  D031               	goto	l5063
  2540                           
  2541                           ;FastTransfer.c: 103: addressErrorCounter++;
  2542  000716  0100               	movlb	0	; () banked
  2543  000718  4B8C               	infsnz	_addressErrorCounter& (0+255),f,b
  2544  00071A  2B8D               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;FastTransfer.c: 106: int u;
  2548                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2549  00071C  0E00               	movlw	0
  2550  00071E  0100               	movlb	0	; () banked
  2551  000720  6FD1               	movwf	(receiveData@u+1)& (0+255),b
  2552  000722  0E00               	movlw	0
  2553  000724  6FD0               	movwf	receiveData@u& (0+255),b
  2554  000726  D010               	goto	l5055
  2555  000728                     l5051:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;FastTransfer.c: 108: serial_read();
  2559  000728  D801               	call	u5388
  2560  00072A  D00A               	goto	l5053
  2561  00072C                     u5388:
  2562  00072C  0005               	push	
  2563  00072E  6EFA               	movwf	pclath,c
  2564  000730  5033               	movf	_serial_read,w,c
  2565  000732  6EFD               	movwf	tosl,c
  2566  000734  5034               	movf	_serial_read+1,w,c
  2567  000736  6EFE               	movwf	tosh,c
  2568  000738  50F8               	movf	tblptru,w,c
  2569  00073A  6EFF               	movwf	tosu,c
  2570  00073C  50FA               	movf	pclath,w,c
  2571  00073E  0012               	return		;indir
  2572  000740                     l5053:
  2573  000740  0100               	movlb	0	; () banked
  2574  000742  4BD0               	infsnz	receiveData@u& (0+255),f,b
  2575  000744  2BD1               	incf	(receiveData@u+1)& (0+255),f,b
  2576  000746  D000               	goto	l5055
  2577  000748                     l5055:
  2578                           
  2579                           ; BSR set to: 0
  2580  000748  5042               	movf	_rx_len,w,c
  2581  00074A  6E27               	movwf	??_receiveData& (0+255),c
  2582  00074C  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2583  00074E  0E01               	movlw	1
  2584  000750  2627               	addwf	??_receiveData,f,c
  2585  000752  0E00               	movlw	0
  2586  000754  2228               	addwfc	??_receiveData+1,f,c
  2587  000756  0100               	movlb	0	; () banked
  2588  000758  51D0               	movf	receiveData@u& (0+255),w,b
  2589  00075A  5C27               	subwf	??_receiveData,w,c
  2590  00075C  5028               	movf	??_receiveData+1,w,c
  2591  00075E  0A80               	xorlw	128
  2592  000760  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2593  000762  0100               	movlb	0	; () banked
  2594  000764  51D1               	movf	(receiveData@u+1)& (0+255),w,b
  2595  000766  0A80               	xorlw	128
  2596  000768  5829               	subwfb	(??_receiveData+2)& (0+255),w,c
  2597  00076A  B0D8               	btfsc	status,0,c
  2598  00076C  D7DD               	goto	l5051
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;FastTransfer.c: 109: }
  2602                           ;FastTransfer.c: 110: rx_len = 0;
  2603                           
  2604                           ; BSR set to: 0
  2605  00076E  0E00               	movlw	0
  2606  000770  6E42               	movwf	_rx_len,c
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;FastTransfer.c: 111: return 0;
  2610  000772  0E00               	movlw	0
  2611                           
  2612                           ; BSR set to: 0
  2613  000774  0012               	return	
  2614                           
  2615                           ; BSR set to: 0
  2616                           
  2617                           ; BSR set to: 0
  2618                           
  2619                           ; BSR set to: 0
  2620  000776  D000               	goto	l5063
  2621  000778                     l5063:
  2622                           
  2623                           ;FastTransfer.c: 112: }
  2624                           ;FastTransfer.c: 114: }
  2625                           ;FastTransfer.c: 115: }
  2626                           ;FastTransfer.c: 116: }
  2627                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2628  000778  5042               	movf	_rx_len,w,c
  2629  00077A  B4D8               	btfsc	status,2,c
  2630  00077C  D269               	goto	l5187
  2631                           
  2632                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2633  00077E  5041               	movf	_rx_array_inx,w,c
  2634  000780  B4D8               	btfsc	status,2,c
  2635  000782  D002               	goto	l5069
  2636  000784  D048               	goto	l5087
  2637                           
  2638                           ;FastTransfer.c: 123: while (!(serial_available() >= 1));
  2639  000786  D000               	goto	l5069
  2640  000788                     l5069:
  2641  000788  D801               	call	u5428
  2642  00078A  D00A               	goto	u5429
  2643  00078C                     u5428:
  2644  00078C  0005               	push	
  2645  00078E  6EFA               	movwf	pclath,c
  2646  000790  5031               	movf	_serial_available,w,c
  2647  000792  6EFD               	movwf	tosl,c
  2648  000794  5032               	movf	_serial_available+1,w,c
  2649  000796  6EFE               	movwf	tosh,c
  2650  000798  50F8               	movf	tblptru,w,c
  2651  00079A  6EFF               	movwf	tosu,c
  2652  00079C  50FA               	movf	pclath,w,c
  2653  00079E  0012               	return		;indir
  2654  0007A0                     u5429:
  2655  0007A0  BE1E               	btfsc	?_Receive_available+1,7,c
  2656  0007A2  D7F2               	goto	l5069
  2657  0007A4  501E               	movf	?_Receive_available+1,w,c
  2658  0007A6  E105               	bnz	l5071
  2659  0007A8  041D               	decf	?_Receive_available,w,c
  2660  0007AA  B0D8               	btfsc	status,0,c
  2661  0007AC  D002               	goto	l5071
  2662  0007AE  D7EC               	goto	l5069
  2663  0007B0  D000               	goto	l5071
  2664  0007B2                     l5071:
  2665                           
  2666                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2667  0007B2  D801               	call	u5448
  2668  0007B4  D00B               	goto	u5449
  2669  0007B6                     u5448:
  2670  0007B6  0005               	push	
  2671  0007B8  0100               	movlb	0	; () banked
  2672  0007BA  6EFA               	movwf	pclath,c
  2673  0007BC  519A               	movf	_serial_peek& (0+255),w,b
  2674  0007BE  6EFD               	movwf	tosl,c
  2675  0007C0  519B               	movf	(_serial_peek+1)& (0+255),w,b
  2676  0007C2  6EFE               	movwf	tosh,c
  2677  0007C4  50F8               	movf	tblptru,w,c
  2678  0007C6  6EFF               	movwf	tosu,c
  2679  0007C8  50FA               	movf	pclath,w,c
  2680  0007CA  0012               	return		;indir
  2681  0007CC                     u5449:
  2682  0007CC  0AFF               	xorlw	255
  2683  0007CE  A4D8               	btfss	status,2,c
  2684  0007D0  D022               	goto	l5087
  2685                           
  2686                           ;FastTransfer.c: 125: CRCcheck();
  2687  0007D2  EC93  F00E         	call	_CRCcheck	;wreg free
  2688                           
  2689                           ;FastTransfer.c: 126: rx_len = 0;
  2690  0007D6  0E00               	movlw	0
  2691  0007D8  6E42               	movwf	_rx_len,c
  2692                           
  2693                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2694  0007DA  0E00               	movlw	0
  2695  0007DC  6E41               	movwf	_rx_array_inx,c
  2696                           
  2697                           ;FastTransfer.c: 128: return 0;
  2698  0007DE  0E00               	movlw	0
  2699  0007E0  0012               	return	
  2700                           
  2701                           ;FastTransfer.c: 129: }
  2702                           ;FastTransfer.c: 130: }
  2703                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2704  0007E2  D019               	goto	l5087
  2705  0007E4                     l5083:
  2706                           
  2707                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2708  0007E4  D801               	call	u5468
  2709  0007E6  D00A               	goto	u5469
  2710  0007E8                     u5468:
  2711  0007E8  0005               	push	
  2712  0007EA  6EFA               	movwf	pclath,c
  2713  0007EC  5033               	movf	_serial_read,w,c
  2714  0007EE  6EFD               	movwf	tosl,c
  2715  0007F0  5034               	movf	_serial_read+1,w,c
  2716  0007F2  6EFE               	movwf	tosh,c
  2717  0007F4  50F8               	movf	tblptru,w,c
  2718  0007F6  6EFF               	movwf	tosu,c
  2719  0007F8  50FA               	movf	pclath,w,c
  2720  0007FA  0012               	return		;indir
  2721  0007FC                     u5469:
  2722  0007FC  6E27               	movwf	??_receiveData& (0+255),c
  2723  0007FE  5041               	movf	_rx_array_inx,w,c
  2724  000800  0D01               	mullw	1
  2725  000802  0E00               	movlw	low _rx_buffer
  2726  000804  24F3               	addwf	prodl,w,c
  2727  000806  6ED9               	movwf	fsr2l,c
  2728  000808  0E03               	movlw	high _rx_buffer
  2729  00080A  20F4               	addwfc	prodh,w,c
  2730  00080C  6EDA               	movwf	fsr2h,c
  2731  00080E  C027  FFDF         	movff	??_receiveData,indf2
  2732  000812  2A41               	incf	_rx_array_inx,f,c
  2733  000814  D000               	goto	l5087
  2734  000816                     l5087:
  2735  000816  D801               	call	u5478
  2736  000818  D00A               	goto	u5479
  2737  00081A                     u5478:
  2738  00081A  0005               	push	
  2739  00081C  6EFA               	movwf	pclath,c
  2740  00081E  5031               	movf	_serial_available,w,c
  2741  000820  6EFD               	movwf	tosl,c
  2742  000822  5032               	movf	_serial_available+1,w,c
  2743  000824  6EFE               	movwf	tosh,c
  2744  000826  50F8               	movf	tblptru,w,c
  2745  000828  6EFF               	movwf	tosu,c
  2746  00082A  50FA               	movf	pclath,w,c
  2747  00082C  0012               	return		;indir
  2748  00082E                     u5479:
  2749  00082E  501D               	movf	?_Receive_available,w,c
  2750  000830  101E               	iorwf	?_Receive_available+1,w,c
  2751  000832  B4D8               	btfsc	status,2,c
  2752  000834  D006               	goto	l5091
  2753  000836  5041               	movf	_rx_array_inx,w,c
  2754  000838  5C42               	subwf	_rx_len,w,c
  2755  00083A  A0D8               	btfss	status,0,c
  2756  00083C  D002               	goto	l5091
  2757  00083E  D7D2               	goto	l5083
  2758  000840  D000               	goto	l5091
  2759  000842                     l5091:
  2760                           
  2761                           ;FastTransfer.c: 135: }
  2762                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2763  000842  5042               	movf	_rx_len,w,c
  2764  000844  6E27               	movwf	??_receiveData& (0+255),c
  2765  000846  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2766  000848  0EFF               	movlw	255
  2767  00084A  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2768  00084C  0EFF               	movlw	255
  2769  00084E  6E2A               	movwf	(??_receiveData+3)& (0+255),c
  2770  000850  5041               	movf	_rx_array_inx,w,c
  2771  000852  6E2B               	movwf	(??_receiveData+4)& (0+255),c
  2772  000854  6A2C               	clrf	(??_receiveData+5)& (0+255),c
  2773  000856  5029               	movf	??_receiveData+2,w,c
  2774  000858  262B               	addwf	??_receiveData+4,f,c
  2775  00085A  502A               	movf	??_receiveData+3,w,c
  2776  00085C  222C               	addwfc	??_receiveData+5,f,c
  2777  00085E  5027               	movf	??_receiveData,w,c
  2778  000860  182B               	xorwf	??_receiveData+4,w,c
  2779  000862  E103               	bnz	u5501
  2780  000864  5028               	movf	??_receiveData+1,w,c
  2781  000866  182C               	xorwf	??_receiveData+5,w,c
  2782  000868  A4D8               	btfss	status,2,c
  2783  00086A                     u5501:
  2784  00086A  D1F2               	goto	l5187
  2785                           
  2786                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2787  00086C  0E00               	movlw	low _rx_buffer
  2788  00086E  6E1B               	movwf	CRC8@data,c
  2789  000870  0E03               	movlw	high _rx_buffer
  2790  000872  6E1C               	movwf	CRC8@data+1,c
  2791  000874  C042  F01D         	movff	_rx_len,CRC8@len
  2792  000878  EC14  F01B         	call	_CRC8	;wreg free
  2793  00087C  6E3C               	movwf	_calc_CS,c
  2794                           
  2795                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2796  00087E  0EFF               	movlw	255
  2797  000880  6E27               	movwf	??_receiveData& (0+255),c
  2798  000882  0EFF               	movlw	255
  2799  000884  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2800  000886  5041               	movf	_rx_array_inx,w,c
  2801  000888  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2802  00088A  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2803  00088C  5027               	movf	??_receiveData,w,c
  2804  00088E  2629               	addwf	??_receiveData+2,f,c
  2805  000890  5028               	movf	??_receiveData+1,w,c
  2806  000892  222A               	addwfc	??_receiveData+3,f,c
  2807  000894  0E00               	movlw	low _rx_buffer
  2808  000896  2429               	addwf	??_receiveData+2,w,c
  2809  000898  6ED9               	movwf	fsr2l,c
  2810  00089A  0E03               	movlw	high _rx_buffer
  2811  00089C  202A               	addwfc	??_receiveData+3,w,c
  2812  00089E  6EDA               	movwf	fsr2h,c
  2813  0008A0  503C               	movf	_calc_CS,w,c
  2814  0008A2  18DE               	xorwf	postinc2,w,c
  2815  0008A4  A4D8               	btfss	status,2,c
  2816  0008A6  D11D               	goto	l5149
  2817                           
  2818                           ;FastTransfer.c: 147: int r;
  2819                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2820  0008A8  0E00               	movlw	0
  2821  0008AA  0100               	movlb	0	; () banked
  2822  0008AC  6FD3               	movwf	(receiveData@r+1)& (0+255),b
  2823  0008AE  0E00               	movlw	0
  2824  0008B0  6FD2               	movwf	receiveData@r& (0+255),b
  2825  0008B2  D054               	goto	l5109
  2826  0008B4                     l5099:
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2830  0008B4  0E00               	movlw	low _rx_buffer
  2831  0008B6  0100               	movlb	0	; () banked
  2832  0008B8  25D2               	addwf	receiveData@r& (0+255),w,b
  2833  0008BA  6ED9               	movwf	fsr2l,c
  2834  0008BC  0E03               	movlw	high _rx_buffer
  2835  0008BE  0100               	movlb	0	; () banked
  2836  0008C0  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2837  0008C2  6EDA               	movwf	fsr2h,c
  2838  0008C4  503D               	movf	_maxDataAddress,w,c
  2839  0008C6  5CDE               	subwf	postinc2,w,c
  2840  0008C8  B0D8               	btfsc	status,0,c
  2841  0008CA  D039               	goto	l5105
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2845  0008CC  0E01               	movlw	1
  2846  0008CE  0100               	movlb	0	; () banked
  2847  0008D0  25D2               	addwf	receiveData@r& (0+255),w,b
  2848  0008D2  6E27               	movwf	??_receiveData& (0+255),c
  2849  0008D4  0E00               	movlw	0
  2850  0008D6  0100               	movlb	0	; () banked
  2851  0008D8  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2852  0008DA  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2853  0008DC  0E00               	movlw	low _rx_buffer
  2854  0008DE  2427               	addwf	??_receiveData,w,c
  2855  0008E0  6ED9               	movwf	fsr2l,c
  2856  0008E2  0E03               	movlw	high _rx_buffer
  2857  0008E4  2028               	addwfc	??_receiveData+1,w,c
  2858  0008E6  6EDA               	movwf	fsr2h,c
  2859  0008E8  50DF               	movf	indf2,w,c
  2860  0008EA  6E43               	movwf	_group,c
  2861                           
  2862                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2863  0008EC  0E02               	movlw	2
  2864  0008EE  0100               	movlb	0	; () banked
  2865  0008F0  25D2               	addwf	receiveData@r& (0+255),w,b
  2866  0008F2  6E27               	movwf	??_receiveData& (0+255),c
  2867  0008F4  0E00               	movlw	0
  2868  0008F6  0100               	movlb	0	; () banked
  2869  0008F8  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2870  0008FA  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2871  0008FC  0E00               	movlw	low _rx_buffer
  2872  0008FE  2427               	addwf	??_receiveData,w,c
  2873  000900  6ED9               	movwf	fsr2l,c
  2874  000902  0E03               	movlw	high _rx_buffer
  2875  000904  2028               	addwfc	??_receiveData+1,w,c
  2876  000906  6EDA               	movwf	fsr2h,c
  2877  000908  50DF               	movf	indf2,w,c
  2878  00090A  6E44               	movwf	_group+1,c
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2882  00090C  0E00               	movlw	low _rx_buffer
  2883  00090E  0100               	movlb	0	; () banked
  2884  000910  25D2               	addwf	receiveData@r& (0+255),w,b
  2885  000912  6ED9               	movwf	fsr2l,c
  2886  000914  0E03               	movlw	high _rx_buffer
  2887  000916  0100               	movlb	0	; () banked
  2888  000918  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2889  00091A  6EDA               	movwf	fsr2h,c
  2890  00091C  50DF               	movf	indf2,w,c
  2891  00091E  6E27               	movwf	??_receiveData& (0+255),c
  2892  000920  5027               	movf	??_receiveData,w,c
  2893  000922  0D02               	mullw	2
  2894  000924  50F3               	movf	prodl,w,c
  2895  000926  0100               	movlb	0	; () banked
  2896  000928  2596               	addwf	_receiveArrayAddress& (0+255),w,b
  2897  00092A  6ED9               	movwf	fsr2l,c
  2898  00092C  50F4               	movf	prodh,w,c
  2899  00092E  0100               	movlb	0	; () banked
  2900  000930  2197               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  2901  000932  6EDA               	movwf	fsr2h,c
  2902  000934  C043  FFDE         	movff	_group,postinc2
  2903  000938  C044  FFDD         	movff	_group+1,postdec2
  2904                           
  2905                           ;FastTransfer.c: 153: } else {
  2906  00093C  D004               	goto	l5107
  2907  00093E                     l5105:
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2911  00093E  0100               	movlb	0	; () banked
  2912  000940  4B92               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2913  000942  2B93               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2914  000944  D000               	goto	l5107
  2915  000946                     l5107:
  2916                           
  2917                           ; BSR set to: 0
  2918  000946  0E03               	movlw	3
  2919  000948  0100               	movlb	0	; () banked
  2920  00094A  25D2               	addwf	receiveData@r& (0+255),w,b
  2921  00094C  0100               	movlb	0	; () banked
  2922  00094E  6FD2               	movwf	receiveData@r& (0+255),b
  2923  000950  0E00               	movlw	0
  2924  000952  0100               	movlb	0	; () banked
  2925  000954  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2926  000956  0100               	movlb	0	; () banked
  2927  000958  6FD3               	movwf	(receiveData@r+1)& (0+255),b
  2928  00095A  D000               	goto	l5109
  2929  00095C                     l5109:
  2930                           
  2931                           ; BSR set to: 0
  2932  00095C  5042               	movf	_rx_len,w,c
  2933  00095E  6E27               	movwf	??_receiveData& (0+255),c
  2934  000960  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2935  000962  5027               	movf	??_receiveData,w,c
  2936  000964  0100               	movlb	0	; () banked
  2937  000966  5DD2               	subwf	receiveData@r& (0+255),w,b
  2938  000968  0100               	movlb	0	; () banked
  2939  00096A  51D3               	movf	(receiveData@r+1)& (0+255),w,b
  2940  00096C  0A80               	xorlw	128
  2941  00096E  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2942  000970  5028               	movf	??_receiveData+1,w,c
  2943  000972  0A80               	xorlw	128
  2944  000974  5829               	subwfb	(??_receiveData+2)& (0+255),w,c
  2945  000976  A0D8               	btfss	status,0,c
  2946  000978  D79D               	goto	l5099
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;FastTransfer.c: 155: }
  2950                           ;FastTransfer.c: 156: }
  2951                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2952                           
  2953                           ; BSR set to: 0
  2954  00097A  5039               	movf	_AKNAKsend,w,c
  2955  00097C  B4D8               	btfsc	status,2,c
  2956  00097E  D0AA               	goto	l5139
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;FastTransfer.c: 160: unsigned char holder[3];
  2960                           ;FastTransfer.c: 161: holder[0] = 255;
  2961  000980  0100               	movlb	0	; () banked
  2962  000982  69C8               	setf	receiveData@holder& (0+255),b
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;FastTransfer.c: 162: holder[1] = 1;
  2966  000984  0E01               	movlw	1
  2967  000986  0100               	movlb	0	; () banked
  2968  000988  6FC9               	movwf	(receiveData@holder+1)& (0+255),b
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2972  00098A  0EFF               	movlw	255
  2973  00098C  6E27               	movwf	??_receiveData& (0+255),c
  2974  00098E  0EFF               	movlw	255
  2975  000990  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2976  000992  5041               	movf	_rx_array_inx,w,c
  2977  000994  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2978  000996  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2979  000998  5027               	movf	??_receiveData,w,c
  2980  00099A  2629               	addwf	??_receiveData+2,f,c
  2981  00099C  5028               	movf	??_receiveData+1,w,c
  2982  00099E  222A               	addwfc	??_receiveData+3,f,c
  2983  0009A0  0E00               	movlw	low _rx_buffer
  2984  0009A2  2429               	addwf	??_receiveData+2,w,c
  2985  0009A4  6ED9               	movwf	fsr2l,c
  2986  0009A6  0E03               	movlw	high _rx_buffer
  2987  0009A8  202A               	addwfc	??_receiveData+3,w,c
  2988  0009AA  6EDA               	movwf	fsr2h,c
  2989  0009AC  50DF               	movf	indf2,w,c
  2990  0009AE  0100               	movlb	0	; () banked
  2991  0009B0  6FCA               	movwf	(receiveData@holder+2)& (0+255),b
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2995  0009B2  0EC8               	movlw	low receiveData@holder
  2996  0009B4  6E1B               	movwf	CRC8@data,c
  2997  0009B6  0E00               	movlw	high receiveData@holder
  2998  0009B8  6E1C               	movwf	CRC8@data+1,c
  2999  0009BA  0E03               	movlw	3
  3000  0009BC  6E1D               	movwf	CRC8@len,c
  3001  0009BE  EC14  F01B         	call	_CRC8	;wreg free
  3002  0009C2  0100               	movlb	0	; () banked
  3003  0009C4  6FCE               	movwf	receiveData@crcHolder& (0+255),b
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;FastTransfer.c: 165: serial_write(0x06);
  3007  0009C6  D801               	call	u5558
  3008  0009C8  D00B               	goto	l5123
  3009  0009CA                     u5558:
  3010  0009CA  0005               	push	
  3011  0009CC  6EFA               	movwf	pclath,c
  3012  0009CE  5035               	movf	_serial_write,w,c
  3013  0009D0  6EFD               	movwf	tosl,c
  3014  0009D2  5036               	movf	_serial_write+1,w,c
  3015  0009D4  6EFE               	movwf	tosh,c
  3016  0009D6  50F8               	movf	tblptru,w,c
  3017  0009D8  6EFF               	movwf	tosu,c
  3018  0009DA  50FA               	movf	pclath,w,c
  3019  0009DC  0E06               	movlw	6
  3020  0009DE  0012               	return		;indir
  3021  0009E0                     l5123:
  3022                           
  3023                           ;FastTransfer.c: 166: serial_write(0x85);
  3024  0009E0  D801               	call	u5568
  3025  0009E2  D00B               	goto	l5125
  3026  0009E4                     u5568:
  3027  0009E4  0005               	push	
  3028  0009E6  6EFA               	movwf	pclath,c
  3029  0009E8  5035               	movf	_serial_write,w,c
  3030  0009EA  6EFD               	movwf	tosl,c
  3031  0009EC  5036               	movf	_serial_write+1,w,c
  3032  0009EE  6EFE               	movwf	tosh,c
  3033  0009F0  50F8               	movf	tblptru,w,c
  3034  0009F2  6EFF               	movwf	tosu,c
  3035  0009F4  50FA               	movf	pclath,w,c
  3036  0009F6  0E85               	movlw	133
  3037  0009F8  0012               	return		;indir
  3038  0009FA                     l5125:
  3039                           
  3040                           ;FastTransfer.c: 167: serial_write(returnAddress);
  3041  0009FA  D801               	call	u5578
  3042  0009FC  D00B               	goto	l5127
  3043  0009FE                     u5578:
  3044  0009FE  0005               	push	
  3045  000A00  6EFA               	movwf	pclath,c
  3046  000A02  5035               	movf	_serial_write,w,c
  3047  000A04  6EFD               	movwf	tosl,c
  3048  000A06  5036               	movf	_serial_write+1,w,c
  3049  000A08  6EFE               	movwf	tosh,c
  3050  000A0A  50F8               	movf	tblptru,w,c
  3051  000A0C  6EFF               	movwf	tosu,c
  3052  000A0E  50FA               	movf	pclath,w,c
  3053  000A10  503F               	movf	_returnAddress,w,c
  3054  000A12  0012               	return		;indir
  3055  000A14                     l5127:
  3056                           
  3057                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  3058  000A14  D801               	call	u5588
  3059  000A16  D00B               	goto	l5129
  3060  000A18                     u5588:
  3061  000A18  0005               	push	
  3062  000A1A  6EFA               	movwf	pclath,c
  3063  000A1C  5035               	movf	_serial_write,w,c
  3064  000A1E  6EFD               	movwf	tosl,c
  3065  000A20  5036               	movf	_serial_write+1,w,c
  3066  000A22  6EFE               	movwf	tosh,c
  3067  000A24  50F8               	movf	tblptru,w,c
  3068  000A26  6EFF               	movwf	tosu,c
  3069  000A28  50FA               	movf	pclath,w,c
  3070  000A2A  503E               	movf	_moduleAddress,w,c
  3071  000A2C  0012               	return		;indir
  3072  000A2E                     l5129:
  3073                           
  3074                           ;FastTransfer.c: 169: serial_write(3);
  3075  000A2E  D801               	call	u5598
  3076  000A30  D00B               	goto	l5131
  3077  000A32                     u5598:
  3078  000A32  0005               	push	
  3079  000A34  6EFA               	movwf	pclath,c
  3080  000A36  5035               	movf	_serial_write,w,c
  3081  000A38  6EFD               	movwf	tosl,c
  3082  000A3A  5036               	movf	_serial_write+1,w,c
  3083  000A3C  6EFE               	movwf	tosh,c
  3084  000A3E  50F8               	movf	tblptru,w,c
  3085  000A40  6EFF               	movwf	tosu,c
  3086  000A42  50FA               	movf	pclath,w,c
  3087  000A44  0E03               	movlw	3
  3088  000A46  0012               	return		;indir
  3089  000A48                     l5131:
  3090                           
  3091                           ;FastTransfer.c: 170: serial_write(255);
  3092  000A48  D801               	call	u5608
  3093  000A4A  D00B               	goto	l5133
  3094  000A4C                     u5608:
  3095  000A4C  0005               	push	
  3096  000A4E  6EFA               	movwf	pclath,c
  3097  000A50  5035               	movf	_serial_write,w,c
  3098  000A52  6EFD               	movwf	tosl,c
  3099  000A54  5036               	movf	_serial_write+1,w,c
  3100  000A56  6EFE               	movwf	tosh,c
  3101  000A58  50F8               	movf	tblptru,w,c
  3102  000A5A  6EFF               	movwf	tosu,c
  3103  000A5C  50FA               	movf	pclath,w,c
  3104  000A5E  0EFF               	movlw	255
  3105  000A60  0012               	return		;indir
  3106  000A62                     l5133:
  3107                           
  3108                           ;FastTransfer.c: 171: serial_write(1);
  3109  000A62  D801               	call	u5618
  3110  000A64  D00B               	goto	l5135
  3111  000A66                     u5618:
  3112  000A66  0005               	push	
  3113  000A68  6EFA               	movwf	pclath,c
  3114  000A6A  5035               	movf	_serial_write,w,c
  3115  000A6C  6EFD               	movwf	tosl,c
  3116  000A6E  5036               	movf	_serial_write+1,w,c
  3117  000A70  6EFE               	movwf	tosh,c
  3118  000A72  50F8               	movf	tblptru,w,c
  3119  000A74  6EFF               	movwf	tosu,c
  3120  000A76  50FA               	movf	pclath,w,c
  3121  000A78  0E01               	movlw	1
  3122  000A7A  0012               	return		;indir
  3123  000A7C                     l5135:
  3124                           
  3125                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  3126  000A7C  D801               	call	u5628
  3127  000A7E  D01C               	goto	l5137
  3128  000A80                     u5628:
  3129  000A80  0005               	push	
  3130  000A82  6EFA               	movwf	pclath,c
  3131  000A84  5035               	movf	_serial_write,w,c
  3132  000A86  6EFD               	movwf	tosl,c
  3133  000A88  5036               	movf	_serial_write+1,w,c
  3134  000A8A  6EFE               	movwf	tosh,c
  3135  000A8C  50F8               	movf	tblptru,w,c
  3136  000A8E  6EFF               	movwf	tosu,c
  3137  000A90  50FA               	movf	pclath,w,c
  3138  000A92  0EFF               	movlw	255
  3139  000A94  6E27               	movwf	??_receiveData& (0+255),c
  3140  000A96  0EFF               	movlw	255
  3141  000A98  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3142  000A9A  5041               	movf	_rx_array_inx,w,c
  3143  000A9C  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3144  000A9E  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3145  000AA0  5027               	movf	??_receiveData,w,c
  3146  000AA2  2629               	addwf	??_receiveData+2,f,c
  3147  000AA4  5028               	movf	??_receiveData+1,w,c
  3148  000AA6  222A               	addwfc	??_receiveData+3,f,c
  3149  000AA8  0E00               	movlw	low _rx_buffer
  3150  000AAA  2429               	addwf	??_receiveData+2,w,c
  3151  000AAC  6ED9               	movwf	fsr2l,c
  3152  000AAE  0E03               	movlw	high _rx_buffer
  3153  000AB0  202A               	addwfc	??_receiveData+3,w,c
  3154  000AB2  6EDA               	movwf	fsr2h,c
  3155  000AB4  50DF               	movf	indf2,w,c
  3156  000AB6  0012               	return		;indir
  3157  000AB8                     l5137:
  3158                           
  3159                           ;FastTransfer.c: 173: serial_write(crcHolder);
  3160  000AB8  D801               	call	u5638
  3161  000ABA  D00C               	goto	l5139
  3162  000ABC                     u5638:
  3163  000ABC  0005               	push	
  3164  000ABE  6EFA               	movwf	pclath,c
  3165  000AC0  5035               	movf	_serial_write,w,c
  3166  000AC2  6EFD               	movwf	tosl,c
  3167  000AC4  5036               	movf	_serial_write+1,w,c
  3168  000AC6  6EFE               	movwf	tosh,c
  3169  000AC8  50F8               	movf	tblptru,w,c
  3170  000ACA  6EFF               	movwf	tosu,c
  3171  000ACC  50FA               	movf	pclath,w,c
  3172  000ACE  0100               	movlb	0	; () banked
  3173  000AD0  51CE               	movf	receiveData@crcHolder& (0+255),w,b
  3174  000AD2  0012               	return		;indir
  3175  000AD4                     l5139:
  3176                           
  3177                           ;FastTransfer.c: 174: }
  3178                           ;FastTransfer.c: 178: rx_len = 0;
  3179  000AD4  0E00               	movlw	0
  3180  000AD6  6E42               	movwf	_rx_len,c
  3181                           
  3182                           ;FastTransfer.c: 179: rx_array_inx = 0;
  3183  000AD8  0E00               	movlw	0
  3184  000ADA  6E41               	movwf	_rx_array_inx,c
  3185                           
  3186                           ;FastTransfer.c: 180: return 1;
  3187  000ADC  0E01               	movlw	1
  3188  000ADE  0012               	return	
  3189                           
  3190                           ;FastTransfer.c: 181: } else {
  3191  000AE0  D0B7               	goto	l5187
  3192  000AE2                     l5149:
  3193                           
  3194                           ;FastTransfer.c: 182: crcErrorCounter++;
  3195  000AE2  0100               	movlb	0	; () banked
  3196  000AE4  4B90               	infsnz	_crcErrorCounter& (0+255),f,b
  3197  000AE6  2B91               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;FastTransfer.c: 184: if (AKNAKsend) {
  3201  000AE8  5039               	movf	_AKNAKsend,w,c
  3202  000AEA  B4D8               	btfsc	status,2,c
  3203  000AEC  D0AA               	goto	l5179
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;FastTransfer.c: 185: unsigned char holder[3];
  3207                           ;FastTransfer.c: 186: holder[0] = 255;
  3208  000AEE  0100               	movlb	0	; () banked
  3209  000AF0  69CB               	setf	receiveData@holder_1129& (0+255),b
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;FastTransfer.c: 187: holder[1] = 2;
  3213  000AF2  0E02               	movlw	2
  3214  000AF4  0100               	movlb	0	; () banked
  3215  000AF6  6FCC               	movwf	(receiveData@holder_1129+1)& (0+255),b
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  3219  000AF8  0EFF               	movlw	255
  3220  000AFA  6E27               	movwf	??_receiveData& (0+255),c
  3221  000AFC  0EFF               	movlw	255
  3222  000AFE  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3223  000B00  5041               	movf	_rx_array_inx,w,c
  3224  000B02  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3225  000B04  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3226  000B06  5027               	movf	??_receiveData,w,c
  3227  000B08  2629               	addwf	??_receiveData+2,f,c
  3228  000B0A  5028               	movf	??_receiveData+1,w,c
  3229  000B0C  222A               	addwfc	??_receiveData+3,f,c
  3230  000B0E  0E00               	movlw	low _rx_buffer
  3231  000B10  2429               	addwf	??_receiveData+2,w,c
  3232  000B12  6ED9               	movwf	fsr2l,c
  3233  000B14  0E03               	movlw	high _rx_buffer
  3234  000B16  202A               	addwfc	??_receiveData+3,w,c
  3235  000B18  6EDA               	movwf	fsr2h,c
  3236  000B1A  50DF               	movf	indf2,w,c
  3237  000B1C  0100               	movlb	0	; () banked
  3238  000B1E  6FCD               	movwf	(receiveData@holder_1129+2)& (0+255),b
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  3242  000B20  0ECB               	movlw	low receiveData@holder_1129
  3243  000B22  6E1B               	movwf	CRC8@data,c
  3244  000B24  0E00               	movlw	high receiveData@holder_1129
  3245  000B26  6E1C               	movwf	CRC8@data+1,c
  3246  000B28  0E03               	movlw	3
  3247  000B2A  6E1D               	movwf	CRC8@len,c
  3248  000B2C  EC14  F01B         	call	_CRC8
  3249  000B30  0100               	movlb	0	; () banked
  3250  000B32  6FCF               	movwf	receiveData@crcHolder_1130& (0+255),b
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;FastTransfer.c: 190: serial_write(0x06);
  3254  000B34  D801               	call	u5658
  3255  000B36  D00B               	goto	l5163
  3256  000B38                     u5658:
  3257  000B38  0005               	push	
  3258  000B3A  6EFA               	movwf	pclath,c
  3259  000B3C  5035               	movf	_serial_write,w,c
  3260  000B3E  6EFD               	movwf	tosl,c
  3261  000B40  5036               	movf	_serial_write+1,w,c
  3262  000B42  6EFE               	movwf	tosh,c
  3263  000B44  50F8               	movf	tblptru,w,c
  3264  000B46  6EFF               	movwf	tosu,c
  3265  000B48  50FA               	movf	pclath,w,c
  3266  000B4A  0E06               	movlw	6
  3267  000B4C  0012               	return		;indir
  3268  000B4E                     l5163:
  3269                           
  3270                           ;FastTransfer.c: 191: serial_write(0x85);
  3271  000B4E  D801               	call	u5668
  3272  000B50  D00B               	goto	l5165
  3273  000B52                     u5668:
  3274  000B52  0005               	push	
  3275  000B54  6EFA               	movwf	pclath,c
  3276  000B56  5035               	movf	_serial_write,w,c
  3277  000B58  6EFD               	movwf	tosl,c
  3278  000B5A  5036               	movf	_serial_write+1,w,c
  3279  000B5C  6EFE               	movwf	tosh,c
  3280  000B5E  50F8               	movf	tblptru,w,c
  3281  000B60  6EFF               	movwf	tosu,c
  3282  000B62  50FA               	movf	pclath,w,c
  3283  000B64  0E85               	movlw	133
  3284  000B66  0012               	return		;indir
  3285  000B68                     l5165:
  3286                           
  3287                           ;FastTransfer.c: 192: serial_write(returnAddress);
  3288  000B68  D801               	call	u5678
  3289  000B6A  D00B               	goto	l5167
  3290  000B6C                     u5678:
  3291  000B6C  0005               	push	
  3292  000B6E  6EFA               	movwf	pclath,c
  3293  000B70  5035               	movf	_serial_write,w,c
  3294  000B72  6EFD               	movwf	tosl,c
  3295  000B74  5036               	movf	_serial_write+1,w,c
  3296  000B76  6EFE               	movwf	tosh,c
  3297  000B78  50F8               	movf	tblptru,w,c
  3298  000B7A  6EFF               	movwf	tosu,c
  3299  000B7C  50FA               	movf	pclath,w,c
  3300  000B7E  503F               	movf	_returnAddress,w,c
  3301  000B80  0012               	return		;indir
  3302  000B82                     l5167:
  3303                           
  3304                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3305  000B82  D801               	call	u5688
  3306  000B84  D00B               	goto	l5169
  3307  000B86                     u5688:
  3308  000B86  0005               	push	
  3309  000B88  6EFA               	movwf	pclath,c
  3310  000B8A  5035               	movf	_serial_write,w,c
  3311  000B8C  6EFD               	movwf	tosl,c
  3312  000B8E  5036               	movf	_serial_write+1,w,c
  3313  000B90  6EFE               	movwf	tosh,c
  3314  000B92  50F8               	movf	tblptru,w,c
  3315  000B94  6EFF               	movwf	tosu,c
  3316  000B96  50FA               	movf	pclath,w,c
  3317  000B98  503E               	movf	_moduleAddress,w,c
  3318  000B9A  0012               	return		;indir
  3319  000B9C                     l5169:
  3320                           
  3321                           ;FastTransfer.c: 194: serial_write(3);
  3322  000B9C  D801               	call	u5698
  3323  000B9E  D00B               	goto	l5171
  3324  000BA0                     u5698:
  3325  000BA0  0005               	push	
  3326  000BA2  6EFA               	movwf	pclath,c
  3327  000BA4  5035               	movf	_serial_write,w,c
  3328  000BA6  6EFD               	movwf	tosl,c
  3329  000BA8  5036               	movf	_serial_write+1,w,c
  3330  000BAA  6EFE               	movwf	tosh,c
  3331  000BAC  50F8               	movf	tblptru,w,c
  3332  000BAE  6EFF               	movwf	tosu,c
  3333  000BB0  50FA               	movf	pclath,w,c
  3334  000BB2  0E03               	movlw	3
  3335  000BB4  0012               	return		;indir
  3336  000BB6                     l5171:
  3337                           
  3338                           ;FastTransfer.c: 195: serial_write(255);
  3339  000BB6  D801               	call	u5708
  3340  000BB8  D00B               	goto	l5173
  3341  000BBA                     u5708:
  3342  000BBA  0005               	push	
  3343  000BBC  6EFA               	movwf	pclath,c
  3344  000BBE  5035               	movf	_serial_write,w,c
  3345  000BC0  6EFD               	movwf	tosl,c
  3346  000BC2  5036               	movf	_serial_write+1,w,c
  3347  000BC4  6EFE               	movwf	tosh,c
  3348  000BC6  50F8               	movf	tblptru,w,c
  3349  000BC8  6EFF               	movwf	tosu,c
  3350  000BCA  50FA               	movf	pclath,w,c
  3351  000BCC  0EFF               	movlw	255
  3352  000BCE  0012               	return		;indir
  3353  000BD0                     l5173:
  3354                           
  3355                           ;FastTransfer.c: 196: serial_write(2);
  3356  000BD0  D801               	call	u5718
  3357  000BD2  D00B               	goto	l5175
  3358  000BD4                     u5718:
  3359  000BD4  0005               	push	
  3360  000BD6  6EFA               	movwf	pclath,c
  3361  000BD8  5035               	movf	_serial_write,w,c
  3362  000BDA  6EFD               	movwf	tosl,c
  3363  000BDC  5036               	movf	_serial_write+1,w,c
  3364  000BDE  6EFE               	movwf	tosh,c
  3365  000BE0  50F8               	movf	tblptru,w,c
  3366  000BE2  6EFF               	movwf	tosu,c
  3367  000BE4  50FA               	movf	pclath,w,c
  3368  000BE6  0E02               	movlw	2
  3369  000BE8  0012               	return		;indir
  3370  000BEA                     l5175:
  3371                           
  3372                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3373  000BEA  D801               	call	u5728
  3374  000BEC  D01C               	goto	l5177
  3375  000BEE                     u5728:
  3376  000BEE  0005               	push	
  3377  000BF0  6EFA               	movwf	pclath,c
  3378  000BF2  5035               	movf	_serial_write,w,c
  3379  000BF4  6EFD               	movwf	tosl,c
  3380  000BF6  5036               	movf	_serial_write+1,w,c
  3381  000BF8  6EFE               	movwf	tosh,c
  3382  000BFA  50F8               	movf	tblptru,w,c
  3383  000BFC  6EFF               	movwf	tosu,c
  3384  000BFE  50FA               	movf	pclath,w,c
  3385  000C00  0EFF               	movlw	255
  3386  000C02  6E27               	movwf	??_receiveData& (0+255),c
  3387  000C04  0EFF               	movlw	255
  3388  000C06  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3389  000C08  5041               	movf	_rx_array_inx,w,c
  3390  000C0A  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3391  000C0C  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3392  000C0E  5027               	movf	??_receiveData,w,c
  3393  000C10  2629               	addwf	??_receiveData+2,f,c
  3394  000C12  5028               	movf	??_receiveData+1,w,c
  3395  000C14  222A               	addwfc	??_receiveData+3,f,c
  3396  000C16  0E00               	movlw	low _rx_buffer
  3397  000C18  2429               	addwf	??_receiveData+2,w,c
  3398  000C1A  6ED9               	movwf	fsr2l,c
  3399  000C1C  0E03               	movlw	high _rx_buffer
  3400  000C1E  202A               	addwfc	??_receiveData+3,w,c
  3401  000C20  6EDA               	movwf	fsr2h,c
  3402  000C22  50DF               	movf	indf2,w,c
  3403  000C24  0012               	return		;indir
  3404  000C26                     l5177:
  3405                           
  3406                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3407  000C26  D801               	call	u5738
  3408  000C28  D00C               	goto	l5179
  3409  000C2A                     u5738:
  3410  000C2A  0005               	push	
  3411  000C2C  6EFA               	movwf	pclath,c
  3412  000C2E  5035               	movf	_serial_write,w,c
  3413  000C30  6EFD               	movwf	tosl,c
  3414  000C32  5036               	movf	_serial_write+1,w,c
  3415  000C34  6EFE               	movwf	tosh,c
  3416  000C36  50F8               	movf	tblptru,w,c
  3417  000C38  6EFF               	movwf	tosu,c
  3418  000C3A  50FA               	movf	pclath,w,c
  3419  000C3C  0100               	movlb	0	; () banked
  3420  000C3E  51CF               	movf	receiveData@crcHolder_1130& (0+255),w,b
  3421  000C40  0012               	return		;indir
  3422  000C42                     l5179:
  3423                           
  3424                           ;FastTransfer.c: 199: }
  3425                           ;FastTransfer.c: 202: rx_len = 0;
  3426  000C42  0E00               	movlw	0
  3427  000C44  6E42               	movwf	_rx_len,c
  3428                           
  3429                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3430  000C46  0E00               	movlw	0
  3431  000C48  6E41               	movwf	_rx_array_inx,c
  3432                           
  3433                           ;FastTransfer.c: 204: return 0;
  3434  000C4A  0E00               	movlw	0
  3435  000C4C  0012               	return	
  3436  000C4E  D000               	goto	l5187
  3437  000C50                     l5187:
  3438                           
  3439                           ;FastTransfer.c: 205: }
  3440                           ;FastTransfer.c: 206: }
  3441                           ;FastTransfer.c: 207: }
  3442                           ;FastTransfer.c: 210: return 0;
  3443  000C50  0E00               	movlw	0
  3444  000C52  0012               	return	
  3445  000C54  0012               	return		;funcret
  3446  000C56                     __end_of_receiveData:
  3447                           	opt stack 0
  3448                           tosu	equ	0xFFF
  3449                           tosh	equ	0xFFE
  3450                           tosl	equ	0xFFD
  3451                           pclath	equ	0xFFA
  3452                           tblptru	equ	0xFF8
  3453                           tblptrh	equ	0xFF7
  3454                           tblptrl	equ	0xFF6
  3455                           tablat	equ	0xFF5
  3456                           prodh	equ	0xFF4
  3457                           prodl	equ	0xFF3
  3458                           intcon	equ	0xFF2
  3459                           postinc0	equ	0xFEE
  3460                           wreg	equ	0xFE8
  3461                           postdec1	equ	0xFE5
  3462                           fsr1l	equ	0xFE1
  3463                           indf2	equ	0xFDF
  3464                           postinc2	equ	0xFDE
  3465                           postdec2	equ	0xFDD
  3466                           plusw2	equ	0xFDB
  3467                           fsr2h	equ	0xFDA
  3468                           fsr2l	equ	0xFD9
  3469                           status	equ	0xFD8
  3470                           
  3471 ;; *************** function _Send_put *****************
  3472 ;; Defined at:
  3473 ;;		line 130 in file "UART.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;  _data           1    wreg     unsigned char 
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;  _data           1   37[COMRAM] unsigned char 
  3478 ;; Return value:  Size  Location     Type
  3479 ;;		None               void
  3480 ;; Registers used:
  3481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3487 ;;      Params:         0       0       0       0       0       0       0
  3488 ;;      Locals:         1       0       0       0       0       0       0
  3489 ;;      Temps:          0       0       0       0       0       0       0
  3490 ;;      Totals:         1       0       0       0       0       0       0
  3491 ;;Total ram usage:        1 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    6
  3494 ;; This function calls:
  3495 ;;		_UART_buff_get
  3496 ;;		_UART_buff_put
  3497 ;; This function is called by:
  3498 ;;		_SYSTEM_Initialize
  3499 ;;		_putch
  3500 ;;		_sendData
  3501 ;;		_receiveData
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text6
  3506  003966                     __ptext6:
  3507                           	opt stack 0
  3508  003966                     _Send_put:
  3509                           	opt stack 22
  3510                           
  3511                           ;incstack = 0
  3512                           ;Send_put@_data stored from wreg
  3513  003966  6E26               	movwf	Send_put@_data,c
  3514                           
  3515                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3516  003968  0E00               	movlw	low _output_buffer
  3517  00396A  6E21               	movwf	UART_buff_put@_this,c
  3518  00396C  0E05               	movlw	high _output_buffer
  3519  00396E  6E22               	movwf	UART_buff_put@_this+1,c
  3520  003970  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  3521  003974  EC47  F013         	call	_UART_buff_put
  3522                           
  3523                           ;UART.c: 132: if (Transmit_stall == 1) {
  3524  003978  0445               	decf	_Transmit_stall,w,c
  3525  00397A  A4D8               	btfss	status,2,c
  3526  00397C  0012               	return	
  3527                           
  3528                           ;UART.c: 133: Transmit_stall = 0;
  3529  00397E  0E00               	movlw	0
  3530  003980  6E45               	movwf	_Transmit_stall,c
  3531                           
  3532                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3533  003982  0E00               	movlw	low _output_buffer
  3534  003984  6E21               	movwf	UART_buff_get@_this,c
  3535  003986  0E05               	movlw	high _output_buffer
  3536  003988  6E22               	movwf	UART_buff_get@_this+1,c
  3537  00398A  ECE2  F018         	call	_UART_buff_get	;wreg free
  3538  00398E  6EAD               	movwf	4013,c	;volatile
  3539                           
  3540                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3541  003990  889D               	bsf	3997,4,c	;volatile
  3542  003992  0012               	return	
  3543  003994  0012               	return		;funcret
  3544  003996                     __end_of_Send_put:
  3545                           	opt stack 0
  3546                           tosu	equ	0xFFF
  3547                           tosh	equ	0xFFE
  3548                           tosl	equ	0xFFD
  3549                           pclath	equ	0xFFA
  3550                           tblptru	equ	0xFF8
  3551                           tblptrh	equ	0xFF7
  3552                           tblptrl	equ	0xFF6
  3553                           tablat	equ	0xFF5
  3554                           prodh	equ	0xFF4
  3555                           prodl	equ	0xFF3
  3556                           intcon	equ	0xFF2
  3557                           postinc0	equ	0xFEE
  3558                           wreg	equ	0xFE8
  3559                           postdec1	equ	0xFE5
  3560                           fsr1l	equ	0xFE1
  3561                           indf2	equ	0xFDF
  3562                           postinc2	equ	0xFDE
  3563                           postdec2	equ	0xFDD
  3564                           plusw2	equ	0xFDB
  3565                           fsr2h	equ	0xFDA
  3566                           fsr2l	equ	0xFD9
  3567                           status	equ	0xFD8
  3568                           
  3569 ;; *************** function _UART_buff_put *****************
  3570 ;; Defined at:
  3571 ;;		line 68 in file "UART.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3574 ;;		 -> output_buffer(206), input_buffer(206), 
  3575 ;;  c               1   34[COMRAM] const unsigned char 
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;		None
  3578 ;; Return value:  Size  Location     Type
  3579 ;;		None               void
  3580 ;; Registers used:
  3581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/0
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3587 ;;      Params:         3       0       0       0       0       0       0
  3588 ;;      Locals:         0       0       0       0       0       0       0
  3589 ;;      Temps:          2       0       0       0       0       0       0
  3590 ;;      Totals:         5       0       0       0       0       0       0
  3591 ;;Total ram usage:        5 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; Hardware stack levels required when called:    5
  3594 ;; This function calls:
  3595 ;;		_UART_buff_modulo_inc
  3596 ;; This function is called by:
  3597 ;;		_Send_put
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           	psect	text7
  3602  00268E                     __ptext7:
  3603                           	opt stack 0
  3604  00268E                     _UART_buff_put:
  3605                           	opt stack 22
  3606                           
  3607                           ;UART.c: 69: if (_this->count < 200) {
  3608                           
  3609                           ;incstack = 0
  3610  00268E  EE20 F0CC          	lfsr	2,204
  3611  002692  5021               	movf	UART_buff_put@_this,w,c
  3612  002694  26D9               	addwf	fsr2l,f,c
  3613  002696  5022               	movf	UART_buff_put@_this+1,w,c
  3614  002698  22DA               	addwfc	fsr2h,f,c
  3615  00269A  0E01               	movlw	1
  3616  00269C  BEDB               	btfsc	plusw2,7,c
  3617  00269E  D007               	goto	l4611
  3618  0026A0  0E01               	movlw	1
  3619  0026A2  50DB               	movf	plusw2,w,c
  3620  0026A4  E13A               	bnz	l4617
  3621  0026A6  0EC8               	movlw	200
  3622  0026A8  5CDE               	subwf	postinc2,w,c
  3623  0026AA  B0D8               	btfsc	status,0,c
  3624  0026AC  D036               	goto	l4617
  3625  0026AE                     l4611:
  3626                           
  3627                           ;UART.c: 70: _this->buf[_this->head] = c;
  3628  0026AE  EE20 F0C8          	lfsr	2,200
  3629  0026B2  5021               	movf	UART_buff_put@_this,w,c
  3630  0026B4  26D9               	addwf	fsr2l,f,c
  3631  0026B6  5022               	movf	UART_buff_put@_this+1,w,c
  3632  0026B8  22DA               	addwfc	fsr2h,f,c
  3633  0026BA  CFDE F024          	movff	postinc2,??_UART_buff_put
  3634  0026BE  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3635  0026C2  5024               	movf	??_UART_buff_put,w,c
  3636  0026C4  2421               	addwf	UART_buff_put@_this,w,c
  3637  0026C6  6ED9               	movwf	fsr2l,c
  3638  0026C8  5025               	movf	??_UART_buff_put+1,w,c
  3639  0026CA  2022               	addwfc	UART_buff_put@_this+1,w,c
  3640  0026CC  6EDA               	movwf	fsr2h,c
  3641  0026CE  C023  FFDF         	movff	UART_buff_put@c,indf2
  3642                           
  3643                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3644  0026D2  EE20 F0C8          	lfsr	2,200
  3645  0026D6  5021               	movf	UART_buff_put@_this,w,c
  3646  0026D8  26D9               	addwf	fsr2l,f,c
  3647  0026DA  5022               	movf	UART_buff_put@_this+1,w,c
  3648  0026DC  22DA               	addwfc	fsr2h,f,c
  3649  0026DE  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3650  0026E2  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3651  0026E6  0E00               	movlw	0
  3652  0026E8  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3653  0026EA  0EC8               	movlw	200
  3654  0026EC  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3655  0026EE  ECE3  F01C         	call	_UART_buff_modulo_inc	;wreg free
  3656  0026F2  EE20 F0C8          	lfsr	2,200
  3657  0026F6  5021               	movf	UART_buff_put@_this,w,c
  3658  0026F8  26D9               	addwf	fsr2l,f,c
  3659  0026FA  5022               	movf	UART_buff_put@_this+1,w,c
  3660  0026FC  22DA               	addwfc	fsr2h,f,c
  3661  0026FE  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3662  002702  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3663                           
  3664                           ;UART.c: 72: ++_this->count;
  3665  002706  EE20 F0CC          	lfsr	2,204
  3666  00270A  5021               	movf	UART_buff_put@_this,w,c
  3667  00270C  26D9               	addwf	fsr2l,f,c
  3668  00270E  5022               	movf	UART_buff_put@_this+1,w,c
  3669  002710  22DA               	addwfc	fsr2h,f,c
  3670  002712  2ADE               	incf	postinc2,f,c
  3671  002714  0E00               	movlw	0
  3672  002716  22DD               	addwfc	postdec2,f,c
  3673                           
  3674                           ;UART.c: 73: } else {
  3675  002718  0012               	return	
  3676  00271A                     l4617:
  3677                           
  3678                           ;UART.c: 74: _this->buf[_this->head] = c;
  3679  00271A  EE20 F0C8          	lfsr	2,200
  3680  00271E  5021               	movf	UART_buff_put@_this,w,c
  3681  002720  26D9               	addwf	fsr2l,f,c
  3682  002722  5022               	movf	UART_buff_put@_this+1,w,c
  3683  002724  22DA               	addwfc	fsr2h,f,c
  3684  002726  CFDE F024          	movff	postinc2,??_UART_buff_put
  3685  00272A  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3686  00272E  5024               	movf	??_UART_buff_put,w,c
  3687  002730  2421               	addwf	UART_buff_put@_this,w,c
  3688  002732  6ED9               	movwf	fsr2l,c
  3689  002734  5025               	movf	??_UART_buff_put+1,w,c
  3690  002736  2022               	addwfc	UART_buff_put@_this+1,w,c
  3691  002738  6EDA               	movwf	fsr2h,c
  3692  00273A  C023  FFDF         	movff	UART_buff_put@c,indf2
  3693                           
  3694                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3695  00273E  EE20 F0C8          	lfsr	2,200
  3696  002742  5021               	movf	UART_buff_put@_this,w,c
  3697  002744  26D9               	addwf	fsr2l,f,c
  3698  002746  5022               	movf	UART_buff_put@_this+1,w,c
  3699  002748  22DA               	addwfc	fsr2h,f,c
  3700  00274A  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3701  00274E  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3702  002752  0E00               	movlw	0
  3703  002754  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3704  002756  0EC8               	movlw	200
  3705  002758  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3706  00275A  ECE3  F01C         	call	_UART_buff_modulo_inc	;wreg free
  3707  00275E  EE20 F0C8          	lfsr	2,200
  3708  002762  5021               	movf	UART_buff_put@_this,w,c
  3709  002764  26D9               	addwf	fsr2l,f,c
  3710  002766  5022               	movf	UART_buff_put@_this+1,w,c
  3711  002768  22DA               	addwfc	fsr2h,f,c
  3712  00276A  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3713  00276E  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3714                           
  3715                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3716  002772  EE20 F0CA          	lfsr	2,202
  3717  002776  5021               	movf	UART_buff_put@_this,w,c
  3718  002778  26D9               	addwf	fsr2l,f,c
  3719  00277A  5022               	movf	UART_buff_put@_this+1,w,c
  3720  00277C  22DA               	addwfc	fsr2h,f,c
  3721  00277E  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3722  002782  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3723  002786  0E00               	movlw	0
  3724  002788  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3725  00278A  0EC8               	movlw	200
  3726  00278C  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3727  00278E  ECE3  F01C         	call	_UART_buff_modulo_inc	;wreg free
  3728  002792  EE20 F0CA          	lfsr	2,202
  3729  002796  5021               	movf	UART_buff_put@_this,w,c
  3730  002798  26D9               	addwf	fsr2l,f,c
  3731  00279A  5022               	movf	UART_buff_put@_this+1,w,c
  3732  00279C  22DA               	addwfc	fsr2h,f,c
  3733  00279E  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3734  0027A2  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3735  0027A6  0012               	return	
  3736  0027A8  0012               	return		;funcret
  3737  0027AA                     __end_of_UART_buff_put:
  3738                           	opt stack 0
  3739                           tosu	equ	0xFFF
  3740                           tosh	equ	0xFFE
  3741                           tosl	equ	0xFFD
  3742                           pclath	equ	0xFFA
  3743                           tblptru	equ	0xFF8
  3744                           tblptrh	equ	0xFF7
  3745                           tblptrl	equ	0xFF6
  3746                           tablat	equ	0xFF5
  3747                           prodh	equ	0xFF4
  3748                           prodl	equ	0xFF3
  3749                           intcon	equ	0xFF2
  3750                           postinc0	equ	0xFEE
  3751                           wreg	equ	0xFE8
  3752                           postdec1	equ	0xFE5
  3753                           fsr1l	equ	0xFE1
  3754                           indf2	equ	0xFDF
  3755                           postinc2	equ	0xFDE
  3756                           postdec2	equ	0xFDD
  3757                           plusw2	equ	0xFDB
  3758                           fsr2h	equ	0xFDA
  3759                           fsr2l	equ	0xFD9
  3760                           status	equ	0xFD8
  3761                           
  3762 ;; *************** function _Receive_peek *****************
  3763 ;; Defined at:
  3764 ;;		line 118 in file "UART.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;		None
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;		None
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  1    wreg      unsigned char 
  3771 ;; Registers used:
  3772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3778 ;;      Params:         0       0       0       0       0       0       0
  3779 ;;      Locals:         0       0       0       0       0       0       0
  3780 ;;      Temps:          0       0       0       0       0       0       0
  3781 ;;      Totals:         0       0       0       0       0       0       0
  3782 ;;Total ram usage:        0 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    5
  3785 ;; This function calls:
  3786 ;;		_UART_buff_peek
  3787 ;; This function is called by:
  3788 ;;		_SYSTEM_Initialize
  3789 ;;		_receiveData
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text8
  3794  003C08                     __ptext8:
  3795                           	opt stack 0
  3796  003C08                     _Receive_peek:
  3797                           	opt stack 23
  3798                           
  3799                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3800                           
  3801                           ;incstack = 0
  3802  003C08  0E00               	movlw	low _input_buffer
  3803  003C0A  6E1B               	movwf	UART_buff_peek@_this,c
  3804  003C0C  0E04               	movlw	high _input_buffer
  3805  003C0E  6E1C               	movwf	UART_buff_peek@_this+1,c
  3806  003C10  EC53  F01D         	call	_UART_buff_peek	;wreg free
  3807  003C14  0012               	return	
  3808  003C16  0012               	return		;funcret
  3809  003C18                     __end_of_Receive_peek:
  3810                           	opt stack 0
  3811                           tosu	equ	0xFFF
  3812                           tosh	equ	0xFFE
  3813                           tosl	equ	0xFFD
  3814                           pclath	equ	0xFFA
  3815                           tblptru	equ	0xFF8
  3816                           tblptrh	equ	0xFF7
  3817                           tblptrl	equ	0xFF6
  3818                           tablat	equ	0xFF5
  3819                           prodh	equ	0xFF4
  3820                           prodl	equ	0xFF3
  3821                           intcon	equ	0xFF2
  3822                           postinc0	equ	0xFEE
  3823                           wreg	equ	0xFE8
  3824                           postdec1	equ	0xFE5
  3825                           fsr1l	equ	0xFE1
  3826                           indf2	equ	0xFDF
  3827                           postinc2	equ	0xFDE
  3828                           postdec2	equ	0xFDD
  3829                           plusw2	equ	0xFDB
  3830                           fsr2h	equ	0xFDA
  3831                           fsr2l	equ	0xFD9
  3832                           status	equ	0xFD8
  3833                           
  3834 ;; *************** function _UART_buff_peek *****************
  3835 ;; Defined at:
  3836 ;;		line 114 in file "UART.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3839 ;;		 -> input_buffer(206), 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;		None
  3842 ;; Return value:  Size  Location     Type
  3843 ;;                  1    wreg      unsigned char 
  3844 ;; Registers used:
  3845 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3851 ;;      Params:         2       0       0       0       0       0       0
  3852 ;;      Locals:         0       0       0       0       0       0       0
  3853 ;;      Temps:          2       0       0       0       0       0       0
  3854 ;;      Totals:         4       0       0       0       0       0       0
  3855 ;;Total ram usage:        4 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    4
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		_Receive_peek
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	text9
  3866  003AA6                     __ptext9:
  3867                           	opt stack 0
  3868  003AA6                     _UART_buff_peek:
  3869                           	opt stack 23
  3870                           
  3871                           ;UART.c: 115: return _this->buf[_this->tail];
  3872                           
  3873                           ;incstack = 0
  3874  003AA6  EE20 F0CA          	lfsr	2,202
  3875  003AAA  501B               	movf	UART_buff_peek@_this,w,c
  3876  003AAC  26D9               	addwf	fsr2l,f,c
  3877  003AAE  501C               	movf	UART_buff_peek@_this+1,w,c
  3878  003AB0  22DA               	addwfc	fsr2h,f,c
  3879  003AB2  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3880  003AB6  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3881  003ABA  501D               	movf	??_UART_buff_peek,w,c
  3882  003ABC  241B               	addwf	UART_buff_peek@_this,w,c
  3883  003ABE  6ED9               	movwf	fsr2l,c
  3884  003AC0  501E               	movf	??_UART_buff_peek+1,w,c
  3885  003AC2  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3886  003AC4  6EDA               	movwf	fsr2h,c
  3887  003AC6  50DF               	movf	indf2,w,c
  3888  003AC8  0012               	return	
  3889  003ACA  0012               	return		;funcret
  3890  003ACC                     __end_of_UART_buff_peek:
  3891                           	opt stack 0
  3892                           tosu	equ	0xFFF
  3893                           tosh	equ	0xFFE
  3894                           tosl	equ	0xFFD
  3895                           pclath	equ	0xFFA
  3896                           tblptru	equ	0xFF8
  3897                           tblptrh	equ	0xFF7
  3898                           tblptrl	equ	0xFF6
  3899                           tablat	equ	0xFF5
  3900                           prodh	equ	0xFF4
  3901                           prodl	equ	0xFF3
  3902                           intcon	equ	0xFF2
  3903                           postinc0	equ	0xFEE
  3904                           wreg	equ	0xFE8
  3905                           postdec1	equ	0xFE5
  3906                           fsr1l	equ	0xFE1
  3907                           indf2	equ	0xFDF
  3908                           postinc2	equ	0xFDE
  3909                           postdec2	equ	0xFDD
  3910                           plusw2	equ	0xFDB
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function _CRCcheck *****************
  3916 ;; Defined at:
  3917 ;;		line 373 in file "FastTransfer.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;		None
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;  rt              2    5[BANK0 ] int 
  3922 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3923 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3924 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;		None               void
  3927 ;; Registers used:
  3928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3934 ;;      Params:         0       0       0       0       0       0       0
  3935 ;;      Locals:         0       7       0       0       0       0       0
  3936 ;;      Temps:          0       0       0       0       0       0       0
  3937 ;;      Totals:         0       7       0       0       0       0       0
  3938 ;;Total ram usage:        7 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    7
  3941 ;; This function calls:
  3942 ;;		Absolute function
  3943 ;;		_CRC8
  3944 ;;		_Receive_available
  3945 ;;		_Receive_get
  3946 ;;		_crcBufS_get
  3947 ;;		_crcBufS_status_put
  3948 ;; This function is called by:
  3949 ;;		_receiveData
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           	psect	text10
  3954  001D26                     __ptext10:
  3955                           	opt stack 0
  3956  001D26                     _CRCcheck:
  3957                           	opt stack 21
  3958                           
  3959                           ;FastTransfer.c: 375: while (!(serial_available() > 3));
  3960                           
  3961                           ;incstack = 0
  3962  001D26  D000               	goto	l4761
  3963  001D28                     l4761:
  3964  001D28  D801               	call	u4828
  3965  001D2A  D00A               	goto	u4829
  3966  001D2C                     u4828:
  3967  001D2C  0005               	push	
  3968  001D2E  6EFA               	movwf	pclath,c
  3969  001D30  5031               	movf	_serial_available,w,c
  3970  001D32  6EFD               	movwf	tosl,c
  3971  001D34  5032               	movf	_serial_available+1,w,c
  3972  001D36  6EFE               	movwf	tosh,c
  3973  001D38  50F8               	movf	tblptru,w,c
  3974  001D3A  6EFF               	movwf	tosu,c
  3975  001D3C  50FA               	movf	pclath,w,c
  3976  001D3E  0012               	return		;indir
  3977  001D40                     u4829:
  3978  001D40  BE1E               	btfsc	?_Receive_available+1,7,c
  3979  001D42  D7F2               	goto	l4761
  3980  001D44  501E               	movf	?_Receive_available+1,w,c
  3981  001D46  E106               	bnz	l4763
  3982  001D48  0E04               	movlw	4
  3983  001D4A  5C1D               	subwf	?_Receive_available,w,c
  3984  001D4C  B0D8               	btfsc	status,0,c
  3985  001D4E  D002               	goto	l4763
  3986  001D50  D7EB               	goto	l4761
  3987  001D52  D000               	goto	l4763
  3988  001D54                     l4763:
  3989                           
  3990                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  3991                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  3992  001D54  D801               	call	u4848
  3993  001D56  D00A               	goto	u4849
  3994  001D58                     u4848:
  3995  001D58  0005               	push	
  3996  001D5A  6EFA               	movwf	pclath,c
  3997  001D5C  5033               	movf	_serial_read,w,c
  3998  001D5E  6EFD               	movwf	tosl,c
  3999  001D60  5034               	movf	_serial_read+1,w,c
  4000  001D62  6EFE               	movwf	tosh,c
  4001  001D64  50F8               	movf	tblptru,w,c
  4002  001D66  6EFF               	movwf	tosu,c
  4003  001D68  50FA               	movf	pclath,w,c
  4004  001D6A  0012               	return		;indir
  4005  001D6C                     u4849:
  4006  001D6C  0100               	movlb	0	; () banked
  4007  001D6E  6FC3               	movwf	CRCcheck@arrayHolder& (0+255),b
  4008                           
  4009                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  4010  001D70  D801               	call	u4858
  4011  001D72  D00A               	goto	u4859
  4012  001D74                     u4858:
  4013  001D74  0005               	push	
  4014  001D76  6EFA               	movwf	pclath,c
  4015  001D78  5033               	movf	_serial_read,w,c
  4016  001D7A  6EFD               	movwf	tosl,c
  4017  001D7C  5034               	movf	_serial_read+1,w,c
  4018  001D7E  6EFE               	movwf	tosh,c
  4019  001D80  50F8               	movf	tblptru,w,c
  4020  001D82  6EFF               	movwf	tosu,c
  4021  001D84  50FA               	movf	pclath,w,c
  4022  001D86  0012               	return		;indir
  4023  001D88                     u4859:
  4024  001D88  0100               	movlb	0	; () banked
  4025  001D8A  6FC4               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  4026                           
  4027                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  4028  001D8C  D801               	call	u4868
  4029  001D8E  D00A               	goto	u4869
  4030  001D90                     u4868:
  4031  001D90  0005               	push	
  4032  001D92  6EFA               	movwf	pclath,c
  4033  001D94  5033               	movf	_serial_read,w,c
  4034  001D96  6EFD               	movwf	tosl,c
  4035  001D98  5034               	movf	_serial_read+1,w,c
  4036  001D9A  6EFE               	movwf	tosh,c
  4037  001D9C  50F8               	movf	tblptru,w,c
  4038  001D9E  6EFF               	movwf	tosu,c
  4039  001DA0  50FA               	movf	pclath,w,c
  4040  001DA2  0012               	return		;indir
  4041  001DA4                     u4869:
  4042  001DA4  0100               	movlb	0	; () banked
  4043  001DA6  6FC5               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  4044                           
  4045                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  4046  001DA8  D801               	call	u4878
  4047  001DAA  D00A               	goto	u4879
  4048  001DAC                     u4878:
  4049  001DAC  0005               	push	
  4050  001DAE  6EFA               	movwf	pclath,c
  4051  001DB0  5033               	movf	_serial_read,w,c
  4052  001DB2  6EFD               	movwf	tosl,c
  4053  001DB4  5034               	movf	_serial_read+1,w,c
  4054  001DB6  6EFE               	movwf	tosh,c
  4055  001DB8  50F8               	movf	tblptru,w,c
  4056  001DBA  6EFF               	movwf	tosu,c
  4057  001DBC  50FA               	movf	pclath,w,c
  4058  001DBE  0012               	return		;indir
  4059  001DC0                     u4879:
  4060  001DC0  0100               	movlb	0	; () banked
  4061  001DC2  6FC1               	movwf	CRCcheck@SentCRC& (0+255),b
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  4065  001DC4  0EC3               	movlw	low CRCcheck@arrayHolder
  4066  001DC6  6E1B               	movwf	CRC8@data,c
  4067  001DC8  0E00               	movlw	high CRCcheck@arrayHolder
  4068  001DCA  6E1C               	movwf	CRC8@data+1,c
  4069  001DCC  0E03               	movlw	3
  4070  001DCE  6E1D               	movwf	CRC8@len,c
  4071  001DD0  EC14  F01B         	call	_CRC8	;wreg free
  4072  001DD4  0100               	movlb	0	; () banked
  4073  001DD6  6FC2               	movwf	CRCcheck@calculatedCRC& (0+255),b
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  4077  001DD8  0100               	movlb	0	; () banked
  4078  001DDA  51C2               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  4079  001DDC  0100               	movlb	0	; () banked
  4080  001DDE  19C1               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  4081  001DE0  A4D8               	btfss	status,2,c
  4082  001DE2  D053               	goto	l4793
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;FastTransfer.c: 387: int rt;
  4086                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  4087  001DE4  0E00               	movlw	0
  4088  001DE6  0100               	movlb	0	; () banked
  4089  001DE8  6FC7               	movwf	(CRCcheck@rt+1)& (0+255),b
  4090  001DEA  0E00               	movlw	0
  4091  001DEC  6FC6               	movwf	CRCcheck@rt& (0+255),b
  4092  001DEE                     l4771:
  4093                           
  4094                           ; BSR set to: 0
  4095  001DEE  0100               	movlb	0	; () banked
  4096  001DF0  BFC7               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  4097  001DF2  D00A               	goto	l4775
  4098  001DF4  0100               	movlb	0	; () banked
  4099  001DF6  51C7               	movf	(CRCcheck@rt+1)& (0+255),w,b
  4100  001DF8  E14C               	bnz	l713
  4101  001DFA  0E05               	movlw	5
  4102  001DFC  0100               	movlb	0	; () banked
  4103  001DFE  5DC6               	subwf	CRCcheck@rt& (0+255),w,b
  4104  001E00  B0D8               	btfsc	status,0,c
  4105  001E02  0012               	return	
  4106  001E04  D001               	goto	l4775
  4107                           
  4108                           ; BSR set to: 0
  4109  001E06  0012               	return	
  4110  001E08                     l4775:
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  4114  001E08  0EB0               	movlw	low _crc_buffer
  4115  001E0A  6E1B               	movwf	crcBufS_get@_this,c
  4116  001E0C  0E00               	movlw	high _crc_buffer
  4117  001E0E  6E1C               	movwf	crcBufS_get@_this+1,c
  4118  001E10  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4119  001E14  0E00               	movlw	0
  4120  001E16  6E1E               	movwf	crcBufS_get@space,c
  4121  001E18  EC60  F015         	call	_crcBufS_get	;wreg free
  4122  001E1C  183F               	xorwf	_returnAddress,w,c
  4123  001E1E  A4D8               	btfss	status,2,c
  4124  001E20  D02F               	goto	l4789
  4125                           
  4126                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  4127  001E22  0EB0               	movlw	low _crc_buffer
  4128  001E24  6E1B               	movwf	crcBufS_get@_this,c
  4129  001E26  0E00               	movlw	high _crc_buffer
  4130  001E28  6E1C               	movwf	crcBufS_get@_this+1,c
  4131  001E2A  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4132  001E2E  0E01               	movlw	1
  4133  001E30  6E1E               	movwf	crcBufS_get@space,c
  4134  001E32  EC60  F015         	call	_crcBufS_get	;wreg free
  4135  001E36  0100               	movlb	0	; () banked
  4136  001E38  19C5               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  4137  001E3A  A4D8               	btfss	status,2,c
  4138  001E3C  D021               	goto	l4789
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  4142  001E3E  0100               	movlb	0	; () banked
  4143  001E40  05C4               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4144  001E42  A4D8               	btfss	status,2,c
  4145  001E44  D00C               	goto	l4785
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  4149  001E46  0EB0               	movlw	low _crc_buffer
  4150  001E48  6E1B               	movwf	crcBufS_status_put@_this,c
  4151  001E4A  0E00               	movlw	high _crc_buffer
  4152  001E4C  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4153  001E4E  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4154  001E52  0E01               	movlw	1
  4155  001E54  6E1E               	movwf	crcBufS_status_put@status,c
  4156  001E56  EC24  F017         	call	_crcBufS_status_put	;wreg free
  4157                           
  4158                           ;FastTransfer.c: 393: break;
  4159  001E5A  0012               	return	
  4160                           
  4161                           ;FastTransfer.c: 394: } else if (arrayHolder[1] == 2) {
  4162  001E5C  D011               	goto	l4789
  4163  001E5E                     l4785:
  4164  001E5E  0E02               	movlw	2
  4165  001E60  0100               	movlb	0	; () banked
  4166  001E62  19C4               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4167  001E64  A4D8               	btfss	status,2,c
  4168  001E66  D00C               	goto	l4789
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  4172  001E68  0EB0               	movlw	low _crc_buffer
  4173  001E6A  6E1B               	movwf	crcBufS_status_put@_this,c
  4174  001E6C  0E00               	movlw	high _crc_buffer
  4175  001E6E  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4176  001E70  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4177  001E74  0E02               	movlw	2
  4178  001E76  6E1E               	movwf	crcBufS_status_put@status,c
  4179  001E78  EC24  F017         	call	_crcBufS_status_put	;wreg free
  4180                           
  4181                           ;FastTransfer.c: 396: break;
  4182  001E7C  0012               	return	
  4183  001E7E  D000               	goto	l4789
  4184  001E80                     l4789:
  4185  001E80  0100               	movlb	0	; () banked
  4186  001E82  4BC6               	infsnz	CRCcheck@rt& (0+255),f,b
  4187  001E84  2BC7               	incf	(CRCcheck@rt+1)& (0+255),f,b
  4188  001E86  D7B3               	goto	l4771
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;FastTransfer.c: 397: }
  4192                           ;FastTransfer.c: 398: }
  4193                           ;FastTransfer.c: 399: }
  4194                           ;FastTransfer.c: 400: }
  4195                           ;FastTransfer.c: 401: } else {
  4196                           
  4197                           ; BSR set to: 0
  4198  001E88  0012               	return	
  4199  001E8A                     l4793:
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;FastTransfer.c: 402: crcErrorCounter++;
  4203  001E8A  0100               	movlb	0	; () banked
  4204  001E8C  4B90               	infsnz	_crcErrorCounter& (0+255),f,b
  4205  001E8E  2B91               	incf	(_crcErrorCounter+1)& (0+255),f,b
  4206  001E90  0012               	return	
  4207  001E92                     l713:
  4208  001E92  0012               	return		;funcret
  4209  001E94                     __end_of_CRCcheck:
  4210                           	opt stack 0
  4211                           tosu	equ	0xFFF
  4212                           tosh	equ	0xFFE
  4213                           tosl	equ	0xFFD
  4214                           pclath	equ	0xFFA
  4215                           tblptru	equ	0xFF8
  4216                           tblptrh	equ	0xFF7
  4217                           tblptrl	equ	0xFF6
  4218                           tablat	equ	0xFF5
  4219                           prodh	equ	0xFF4
  4220                           prodl	equ	0xFF3
  4221                           intcon	equ	0xFF2
  4222                           postinc0	equ	0xFEE
  4223                           wreg	equ	0xFE8
  4224                           postdec1	equ	0xFE5
  4225                           fsr1l	equ	0xFE1
  4226                           indf2	equ	0xFDF
  4227                           postinc2	equ	0xFDE
  4228                           postdec2	equ	0xFDD
  4229                           plusw2	equ	0xFDB
  4230                           fsr2h	equ	0xFDA
  4231                           fsr2l	equ	0xFD9
  4232                           status	equ	0xFD8
  4233                           
  4234 ;; *************** function _crcBufS_status_put *****************
  4235 ;; Defined at:
  4236 ;;		line 336 in file "FastTransfer.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4239 ;;		 -> crc_buffer(17), 
  4240 ;;  time            1   28[COMRAM] unsigned char 
  4241 ;;  status          1   29[COMRAM] unsigned char 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  wantedTime      2   34[COMRAM] int 
  4244 ;; Return value:  Size  Location     Type
  4245 ;;		None               void
  4246 ;; Registers used:
  4247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4253 ;;      Params:         4       0       0       0       0       0       0
  4254 ;;      Locals:         2       0       0       0       0       0       0
  4255 ;;      Temps:          4       0       0       0       0       0       0
  4256 ;;      Totals:        10       0       0       0       0       0       0
  4257 ;;Total ram usage:       10 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; Hardware stack levels required when called:    4
  4260 ;; This function calls:
  4261 ;;		Nothing
  4262 ;; This function is called by:
  4263 ;;		_CRCcheck
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text11
  4268  002E48                     __ptext11:
  4269                           	opt stack 0
  4270  002E48                     _crcBufS_status_put:
  4271                           	opt stack 23
  4272                           
  4273                           ;FastTransfer.c: 337: if (time >= 5) {
  4274                           
  4275                           ;incstack = 0
  4276  002E48  0E04               	movlw	4
  4277  002E4A  641D               	cpfsgt	crcBufS_status_put@time,c
  4278  002E4C  D003               	goto	l4599
  4279                           
  4280                           ;FastTransfer.c: 338: time = 5 - 1;
  4281  002E4E  0E04               	movlw	4
  4282  002E50  6E1D               	movwf	crcBufS_status_put@time,c
  4283  002E52  D000               	goto	l4599
  4284  002E54                     l4599:
  4285                           
  4286                           ;FastTransfer.c: 339: }
  4287                           ;FastTransfer.c: 340: time = time + 1;
  4288  002E54  281D               	incf	crcBufS_status_put@time,w,c
  4289  002E56  6E1D               	movwf	crcBufS_status_put@time,c
  4290                           
  4291                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  4292  002E58  501D               	movf	crcBufS_status_put@time,w,c
  4293  002E5A  0D03               	mullw	3
  4294  002E5C  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  4295  002E60  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  4296                           
  4297                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  4298  002E64  EE20 F00F          	lfsr	2,15
  4299  002E68  501B               	movf	crcBufS_status_put@_this,w,c
  4300  002E6A  26D9               	addwf	fsr2l,f,c
  4301  002E6C  501C               	movf	crcBufS_status_put@_this+1,w,c
  4302  002E6E  22DA               	addwfc	fsr2h,f,c
  4303  002E70  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4304  002E72  5CDE               	subwf	postinc2,w,c
  4305  002E74  50DE               	movf	postinc2,w,c
  4306  002E76  0A80               	xorlw	128
  4307  002E78  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4308  002E7A  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4309  002E7C  0A80               	xorlw	128
  4310  002E7E  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4311  002E80  B0D8               	btfsc	status,0,c
  4312  002E82  D02B               	goto	l4607
  4313                           
  4314                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4315  002E84  EE20 F00F          	lfsr	2,15
  4316  002E88  501B               	movf	crcBufS_status_put@_this,w,c
  4317  002E8A  26D9               	addwf	fsr2l,f,c
  4318  002E8C  501C               	movf	crcBufS_status_put@_this+1,w,c
  4319  002E8E  22DA               	addwfc	fsr2h,f,c
  4320  002E90  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4321  002E94  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4322  002E98  1E1F               	comf	??_crcBufS_status_put,f,c
  4323  002E9A  1E20               	comf	??_crcBufS_status_put+1,f,c
  4324  002E9C  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4325  002E9E  2A20               	incf	??_crcBufS_status_put+1,f,c
  4326  002EA0  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4327  002EA2  261F               	addwf	??_crcBufS_status_put,f,c
  4328  002EA4  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4329  002EA6  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4330  002EA8  1E1F               	comf	??_crcBufS_status_put,f,c
  4331  002EAA  1E20               	comf	??_crcBufS_status_put+1,f,c
  4332  002EAC  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4333  002EAE  2A20               	incf	??_crcBufS_status_put+1,f,c
  4334  002EB0  0E0F               	movlw	15
  4335  002EB2  241F               	addwf	??_crcBufS_status_put,w,c
  4336  002EB4  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4337  002EB6  0E00               	movlw	0
  4338  002EB8  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4339  002EBA  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4340                           
  4341                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4342  002EBC  0E02               	movlw	2
  4343  002EBE  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4344  002EC0  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4345  002EC2  0E00               	movlw	0
  4346  002EC4  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4347  002EC6  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4348  002EC8  501F               	movf	??_crcBufS_status_put,w,c
  4349  002ECA  241B               	addwf	crcBufS_status_put@_this,w,c
  4350  002ECC  6ED9               	movwf	fsr2l,c
  4351  002ECE  5020               	movf	??_crcBufS_status_put+1,w,c
  4352  002ED0  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4353  002ED2  6EDA               	movwf	fsr2h,c
  4354  002ED4  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4355                           
  4356                           ;FastTransfer.c: 345: } else {
  4357  002ED8  0012               	return	
  4358  002EDA                     l4607:
  4359                           
  4360                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4361  002EDA  EE20 F00F          	lfsr	2,15
  4362  002EDE  501B               	movf	crcBufS_status_put@_this,w,c
  4363  002EE0  26D9               	addwf	fsr2l,f,c
  4364  002EE2  501C               	movf	crcBufS_status_put@_this+1,w,c
  4365  002EE4  22DA               	addwfc	fsr2h,f,c
  4366  002EE6  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4367  002EEA  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4368  002EEE  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4369  002EF2  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4370  002EF6  1E21               	comf	??_crcBufS_status_put+2,f,c
  4371  002EF8  1E22               	comf	??_crcBufS_status_put+3,f,c
  4372  002EFA  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4373  002EFC  2A22               	incf	??_crcBufS_status_put+3,f,c
  4374  002EFE  501F               	movf	??_crcBufS_status_put,w,c
  4375  002F00  2621               	addwf	??_crcBufS_status_put+2,f,c
  4376  002F02  5020               	movf	??_crcBufS_status_put+1,w,c
  4377  002F04  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4378  002F06  0E02               	movlw	2
  4379  002F08  2621               	addwf	??_crcBufS_status_put+2,f,c
  4380  002F0A  0E00               	movlw	0
  4381  002F0C  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4382  002F0E  5021               	movf	??_crcBufS_status_put+2,w,c
  4383  002F10  241B               	addwf	crcBufS_status_put@_this,w,c
  4384  002F12  6ED9               	movwf	fsr2l,c
  4385  002F14  5022               	movf	??_crcBufS_status_put+3,w,c
  4386  002F16  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4387  002F18  6EDA               	movwf	fsr2h,c
  4388  002F1A  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4389  002F1E  0012               	return	
  4390  002F20  0012               	return		;funcret
  4391  002F22                     __end_of_crcBufS_status_put:
  4392                           	opt stack 0
  4393                           tosu	equ	0xFFF
  4394                           tosh	equ	0xFFE
  4395                           tosl	equ	0xFFD
  4396                           pclath	equ	0xFFA
  4397                           tblptru	equ	0xFF8
  4398                           tblptrh	equ	0xFF7
  4399                           tblptrl	equ	0xFF6
  4400                           tablat	equ	0xFF5
  4401                           prodh	equ	0xFF4
  4402                           prodl	equ	0xFF3
  4403                           intcon	equ	0xFF2
  4404                           postinc0	equ	0xFEE
  4405                           wreg	equ	0xFE8
  4406                           postdec1	equ	0xFE5
  4407                           fsr1l	equ	0xFE1
  4408                           indf2	equ	0xFDF
  4409                           postinc2	equ	0xFDE
  4410                           postdec2	equ	0xFDD
  4411                           plusw2	equ	0xFDB
  4412                           fsr2h	equ	0xFDA
  4413                           fsr2l	equ	0xFD9
  4414                           status	equ	0xFD8
  4415                           
  4416 ;; *************** function _crcBufS_get *****************
  4417 ;; Defined at:
  4418 ;;		line 353 in file "FastTransfer.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4421 ;;		 -> crc_buffer(17), 
  4422 ;;  time            1   28[COMRAM] unsigned char 
  4423 ;;  space           1   29[COMRAM] unsigned char 
  4424 ;; Auto vars:     Size  Location     Type
  4425 ;;  wantedTime      2   36[COMRAM] int 
  4426 ;; Return value:  Size  Location     Type
  4427 ;;                  1    wreg      unsigned char 
  4428 ;; Registers used:
  4429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4430 ;; Tracked objects:
  4431 ;;		On entry : 0/0
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: 0/0
  4434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4435 ;;      Params:         4       0       0       0       0       0       0
  4436 ;;      Locals:         2       0       0       0       0       0       0
  4437 ;;      Temps:          6       0       0       0       0       0       0
  4438 ;;      Totals:        12       0       0       0       0       0       0
  4439 ;;Total ram usage:       12 bytes
  4440 ;; Hardware stack levels used:    1
  4441 ;; Hardware stack levels required when called:    4
  4442 ;; This function calls:
  4443 ;;		Nothing
  4444 ;; This function is called by:
  4445 ;;		_CRCcheck
  4446 ;;		_AKNAK
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           	psect	text12
  4451  002AC0                     __ptext12:
  4452                           	opt stack 0
  4453  002AC0                     _crcBufS_get:
  4454                           	opt stack 23
  4455                           
  4456                           ;FastTransfer.c: 354: if (time >= 5) {
  4457                           
  4458                           ;incstack = 0
  4459  002AC0  0E04               	movlw	4
  4460  002AC2  641D               	cpfsgt	crcBufS_get@time,c
  4461  002AC4  D003               	goto	l4575
  4462                           
  4463                           ;FastTransfer.c: 355: time = 5 - 1;
  4464  002AC6  0E04               	movlw	4
  4465  002AC8  6E1D               	movwf	crcBufS_get@time,c
  4466  002ACA  D000               	goto	l4575
  4467  002ACC                     l4575:
  4468                           
  4469                           ;FastTransfer.c: 356: }
  4470                           ;FastTransfer.c: 357: if (space >= 3) {
  4471  002ACC  0E02               	movlw	2
  4472  002ACE  641E               	cpfsgt	crcBufS_get@space,c
  4473  002AD0  D003               	goto	l4579
  4474                           
  4475                           ;FastTransfer.c: 358: space = 3 - 1;
  4476  002AD2  0E02               	movlw	2
  4477  002AD4  6E1E               	movwf	crcBufS_get@space,c
  4478  002AD6  D000               	goto	l4579
  4479  002AD8                     l4579:
  4480                           
  4481                           ;FastTransfer.c: 359: }
  4482                           ;FastTransfer.c: 360: time = time + 1;
  4483  002AD8  281D               	incf	crcBufS_get@time,w,c
  4484  002ADA  6E1D               	movwf	crcBufS_get@time,c
  4485                           
  4486                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4487  002ADC  501D               	movf	crcBufS_get@time,w,c
  4488  002ADE  0D03               	mullw	3
  4489  002AE0  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  4490  002AE4  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  4491                           
  4492                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4493  002AE8  EE20 F00F          	lfsr	2,15
  4494  002AEC  501B               	movf	crcBufS_get@_this,w,c
  4495  002AEE  26D9               	addwf	fsr2l,f,c
  4496  002AF0  501C               	movf	crcBufS_get@_this+1,w,c
  4497  002AF2  22DA               	addwfc	fsr2h,f,c
  4498  002AF4  5025               	movf	crcBufS_get@wantedTime,w,c
  4499  002AF6  5CDE               	subwf	postinc2,w,c
  4500  002AF8  50DE               	movf	postinc2,w,c
  4501  002AFA  0A80               	xorlw	128
  4502  002AFC  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4503  002AFE  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4504  002B00  0A80               	xorlw	128
  4505  002B02  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4506  002B04  B0D8               	btfsc	status,0,c
  4507  002B06  D02A               	goto	l4591
  4508                           
  4509                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4510  002B08  EE20 F00F          	lfsr	2,15
  4511  002B0C  501B               	movf	crcBufS_get@_this,w,c
  4512  002B0E  26D9               	addwf	fsr2l,f,c
  4513  002B10  501C               	movf	crcBufS_get@_this+1,w,c
  4514  002B12  22DA               	addwfc	fsr2h,f,c
  4515  002B14  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4516  002B18  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4517  002B1C  1E1F               	comf	??_crcBufS_get,f,c
  4518  002B1E  1E20               	comf	??_crcBufS_get+1,f,c
  4519  002B20  4A1F               	infsnz	??_crcBufS_get,f,c
  4520  002B22  2A20               	incf	??_crcBufS_get+1,f,c
  4521  002B24  5025               	movf	crcBufS_get@wantedTime,w,c
  4522  002B26  261F               	addwf	??_crcBufS_get,f,c
  4523  002B28  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4524  002B2A  2220               	addwfc	??_crcBufS_get+1,f,c
  4525  002B2C  1E1F               	comf	??_crcBufS_get,f,c
  4526  002B2E  1E20               	comf	??_crcBufS_get+1,f,c
  4527  002B30  4A1F               	infsnz	??_crcBufS_get,f,c
  4528  002B32  2A20               	incf	??_crcBufS_get+1,f,c
  4529  002B34  0E0F               	movlw	15
  4530  002B36  241F               	addwf	??_crcBufS_get,w,c
  4531  002B38  6E25               	movwf	crcBufS_get@wantedTime,c
  4532  002B3A  0E00               	movlw	0
  4533  002B3C  2020               	addwfc	??_crcBufS_get+1,w,c
  4534  002B3E  6E26               	movwf	crcBufS_get@wantedTime+1,c
  4535                           
  4536                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4537  002B40  501E               	movf	crcBufS_get@space,w,c
  4538  002B42  2425               	addwf	crcBufS_get@wantedTime,w,c
  4539  002B44  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4540  002B46  0E00               	movlw	0
  4541  002B48  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  4542  002B4A  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4543  002B4C  501F               	movf	??_crcBufS_get,w,c
  4544  002B4E  241B               	addwf	crcBufS_get@_this,w,c
  4545  002B50  6ED9               	movwf	fsr2l,c
  4546  002B52  5020               	movf	??_crcBufS_get+1,w,c
  4547  002B54  201C               	addwfc	crcBufS_get@_this+1,w,c
  4548  002B56  6EDA               	movwf	fsr2h,c
  4549  002B58  50DF               	movf	indf2,w,c
  4550                           
  4551                           ;FastTransfer.c: 365: } else {
  4552  002B5A  0012               	return	
  4553  002B5C                     l4591:
  4554                           
  4555                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4556  002B5C  EE20 F00F          	lfsr	2,15
  4557  002B60  501B               	movf	crcBufS_get@_this,w,c
  4558  002B62  26D9               	addwf	fsr2l,f,c
  4559  002B64  501C               	movf	crcBufS_get@_this+1,w,c
  4560  002B66  22DA               	addwfc	fsr2h,f,c
  4561  002B68  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4562  002B6C  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4563  002B70  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4564  002B74  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4565  002B78  1E21               	comf	??_crcBufS_get+2,f,c
  4566  002B7A  1E22               	comf	??_crcBufS_get+3,f,c
  4567  002B7C  4A21               	infsnz	??_crcBufS_get+2,f,c
  4568  002B7E  2A22               	incf	??_crcBufS_get+3,f,c
  4569  002B80  501E               	movf	crcBufS_get@space,w,c
  4570  002B82  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4571  002B84  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4572  002B86  5021               	movf	??_crcBufS_get+2,w,c
  4573  002B88  2623               	addwf	??_crcBufS_get+4,f,c
  4574  002B8A  5022               	movf	??_crcBufS_get+3,w,c
  4575  002B8C  2224               	addwfc	??_crcBufS_get+5,f,c
  4576  002B8E  501F               	movf	??_crcBufS_get,w,c
  4577  002B90  2623               	addwf	??_crcBufS_get+4,f,c
  4578  002B92  5020               	movf	??_crcBufS_get+1,w,c
  4579  002B94  2224               	addwfc	??_crcBufS_get+5,f,c
  4580  002B96  5023               	movf	??_crcBufS_get+4,w,c
  4581  002B98  241B               	addwf	crcBufS_get@_this,w,c
  4582  002B9A  6ED9               	movwf	fsr2l,c
  4583  002B9C  5024               	movf	??_crcBufS_get+5,w,c
  4584  002B9E  201C               	addwfc	crcBufS_get@_this+1,w,c
  4585  002BA0  6EDA               	movwf	fsr2h,c
  4586  002BA2  50DF               	movf	indf2,w,c
  4587  002BA4  0012               	return	
  4588  002BA6  0012               	return		;funcret
  4589  002BA8                     __end_of_crcBufS_get:
  4590                           	opt stack 0
  4591                           tosu	equ	0xFFF
  4592                           tosh	equ	0xFFE
  4593                           tosl	equ	0xFFD
  4594                           pclath	equ	0xFFA
  4595                           tblptru	equ	0xFF8
  4596                           tblptrh	equ	0xFF7
  4597                           tblptrl	equ	0xFF6
  4598                           tablat	equ	0xFF5
  4599                           prodh	equ	0xFF4
  4600                           prodl	equ	0xFF3
  4601                           intcon	equ	0xFF2
  4602                           postinc0	equ	0xFEE
  4603                           wreg	equ	0xFE8
  4604                           postdec1	equ	0xFE5
  4605                           fsr1l	equ	0xFE1
  4606                           indf2	equ	0xFDF
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           plusw2	equ	0xFDB
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function _Receive_get *****************
  4615 ;; Defined at:
  4616 ;;		line 126 in file "UART.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;		None
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      unsigned char 
  4623 ;; Registers used:
  4624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4630 ;;      Params:         0       0       0       0       0       0       0
  4631 ;;      Locals:         0       0       0       0       0       0       0
  4632 ;;      Temps:          0       0       0       0       0       0       0
  4633 ;;      Totals:         0       0       0       0       0       0       0
  4634 ;;Total ram usage:        0 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    6
  4637 ;; This function calls:
  4638 ;;		_UART_buff_get
  4639 ;; This function is called by:
  4640 ;;		_SYSTEM_Initialize
  4641 ;;		_getch
  4642 ;;		_CRCcheck
  4643 ;;		_receiveData
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text13
  4648  003C18                     __ptext13:
  4649                           	opt stack 0
  4650  003C18                     _Receive_get:
  4651                           	opt stack 22
  4652                           
  4653                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4654                           
  4655                           ;incstack = 0
  4656  003C18  0E00               	movlw	low _input_buffer
  4657  003C1A  6E21               	movwf	UART_buff_get@_this,c
  4658  003C1C  0E04               	movlw	high _input_buffer
  4659  003C1E  6E22               	movwf	UART_buff_get@_this+1,c
  4660  003C20  ECE2  F018         	call	_UART_buff_get	;wreg free
  4661  003C24  0012               	return	
  4662  003C26  0012               	return		;funcret
  4663  003C28                     __end_of_Receive_get:
  4664                           	opt stack 0
  4665                           tosu	equ	0xFFF
  4666                           tosh	equ	0xFFE
  4667                           tosl	equ	0xFFD
  4668                           pclath	equ	0xFFA
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           prodh	equ	0xFF4
  4674                           prodl	equ	0xFF3
  4675                           intcon	equ	0xFF2
  4676                           postinc0	equ	0xFEE
  4677                           wreg	equ	0xFE8
  4678                           postdec1	equ	0xFE5
  4679                           fsr1l	equ	0xFE1
  4680                           indf2	equ	0xFDF
  4681                           postinc2	equ	0xFDE
  4682                           postdec2	equ	0xFDD
  4683                           plusw2	equ	0xFDB
  4684                           fsr2h	equ	0xFDA
  4685                           fsr2l	equ	0xFD9
  4686                           status	equ	0xFD8
  4687                           
  4688 ;; *************** function _UART_buff_get *****************
  4689 ;; Defined at:
  4690 ;;		line 81 in file "UART.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4693 ;;		 -> output_buffer(206), input_buffer(206), 
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;  c               1   36[COMRAM] unsigned char 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  1    wreg      unsigned char 
  4698 ;; Registers used:
  4699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4705 ;;      Params:         2       0       0       0       0       0       0
  4706 ;;      Locals:         1       0       0       0       0       0       0
  4707 ;;      Temps:          2       0       0       0       0       0       0
  4708 ;;      Totals:         5       0       0       0       0       0       0
  4709 ;;Total ram usage:        5 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    5
  4712 ;; This function calls:
  4713 ;;		_UART_buff_modulo_inc
  4714 ;; This function is called by:
  4715 ;;		_Receive_get
  4716 ;;		_Send_put
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	text14
  4721  0031C4                     __ptext14:
  4722                           	opt stack 0
  4723  0031C4                     _UART_buff_get:
  4724                           	opt stack 22
  4725                           
  4726                           ;UART.c: 82: unsigned char c;
  4727                           ;UART.c: 83: if (_this->count > 0) {
  4728                           
  4729                           ;incstack = 0
  4730  0031C4  EE20 F0CC          	lfsr	2,204
  4731  0031C8  5021               	movf	UART_buff_get@_this,w,c
  4732  0031CA  26D9               	addwf	fsr2l,f,c
  4733  0031CC  5022               	movf	UART_buff_get@_this+1,w,c
  4734  0031CE  22DA               	addwfc	fsr2h,f,c
  4735  0031D0  0E01               	movlw	1
  4736  0031D2  BEDB               	btfsc	plusw2,7,c
  4737  0031D4  D03C               	goto	l4495
  4738  0031D6  0E01               	movlw	1
  4739  0031D8  50DB               	movf	plusw2,w,c
  4740  0031DA  E103               	bnz	u4360
  4741  0031DC  04DE               	decf	postinc2,w,c
  4742  0031DE  A0D8               	btfss	status,0,c
  4743  0031E0  D036               	goto	l4495
  4744  0031E2                     u4360:
  4745                           
  4746                           ;UART.c: 84: c = _this->buf[_this->tail];
  4747  0031E2  EE20 F0CA          	lfsr	2,202
  4748  0031E6  5021               	movf	UART_buff_get@_this,w,c
  4749  0031E8  26D9               	addwf	fsr2l,f,c
  4750  0031EA  5022               	movf	UART_buff_get@_this+1,w,c
  4751  0031EC  22DA               	addwfc	fsr2h,f,c
  4752  0031EE  CFDE F023          	movff	postinc2,??_UART_buff_get
  4753  0031F2  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4754  0031F6  5023               	movf	??_UART_buff_get,w,c
  4755  0031F8  2421               	addwf	UART_buff_get@_this,w,c
  4756  0031FA  6ED9               	movwf	fsr2l,c
  4757  0031FC  5024               	movf	??_UART_buff_get+1,w,c
  4758  0031FE  2022               	addwfc	UART_buff_get@_this+1,w,c
  4759  003200  6EDA               	movwf	fsr2h,c
  4760  003202  50DF               	movf	indf2,w,c
  4761  003204  6E25               	movwf	UART_buff_get@c,c
  4762                           
  4763                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4764  003206  EE20 F0CA          	lfsr	2,202
  4765  00320A  5021               	movf	UART_buff_get@_this,w,c
  4766  00320C  26D9               	addwf	fsr2l,f,c
  4767  00320E  5022               	movf	UART_buff_get@_this+1,w,c
  4768  003210  22DA               	addwfc	fsr2h,f,c
  4769  003212  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4770  003216  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4771  00321A  0E00               	movlw	0
  4772  00321C  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4773  00321E  0EC8               	movlw	200
  4774  003220  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4775  003222  ECE3  F01C         	call	_UART_buff_modulo_inc	;wreg free
  4776  003226  EE20 F0CA          	lfsr	2,202
  4777  00322A  5021               	movf	UART_buff_get@_this,w,c
  4778  00322C  26D9               	addwf	fsr2l,f,c
  4779  00322E  5022               	movf	UART_buff_get@_this+1,w,c
  4780  003230  22DA               	addwfc	fsr2h,f,c
  4781  003232  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4782  003236  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4783                           
  4784                           ;UART.c: 86: --_this->count;
  4785  00323A  EE20 F0CC          	lfsr	2,204
  4786  00323E  5021               	movf	UART_buff_get@_this,w,c
  4787  003240  26D9               	addwf	fsr2l,f,c
  4788  003242  5022               	movf	UART_buff_get@_this+1,w,c
  4789  003244  22DA               	addwfc	fsr2h,f,c
  4790  003246  06DE               	decf	postinc2,f,c
  4791  003248  0E00               	movlw	0
  4792  00324A  5ADD               	subwfb	postdec2,f,c
  4793                           
  4794                           ;UART.c: 87: } else {
  4795  00324C  D002               	goto	l778
  4796  00324E                     l4495:
  4797                           
  4798                           ;UART.c: 88: c = 0;
  4799  00324E  0E00               	movlw	0
  4800  003250  6E25               	movwf	UART_buff_get@c,c
  4801  003252                     l778:
  4802                           
  4803                           ;UART.c: 89: }
  4804                           ;UART.c: 90: return (c);
  4805  003252  5025               	movf	UART_buff_get@c,w,c
  4806  003254  0012               	return	
  4807  003256  0012               	return		;funcret
  4808  003258                     __end_of_UART_buff_get:
  4809                           	opt stack 0
  4810                           tosu	equ	0xFFF
  4811                           tosh	equ	0xFFE
  4812                           tosl	equ	0xFFD
  4813                           pclath	equ	0xFFA
  4814                           tblptru	equ	0xFF8
  4815                           tblptrh	equ	0xFF7
  4816                           tblptrl	equ	0xFF6
  4817                           tablat	equ	0xFF5
  4818                           prodh	equ	0xFF4
  4819                           prodl	equ	0xFF3
  4820                           intcon	equ	0xFF2
  4821                           postinc0	equ	0xFEE
  4822                           wreg	equ	0xFE8
  4823                           postdec1	equ	0xFE5
  4824                           fsr1l	equ	0xFE1
  4825                           indf2	equ	0xFDF
  4826                           postinc2	equ	0xFDE
  4827                           postdec2	equ	0xFDD
  4828                           plusw2	equ	0xFDB
  4829                           fsr2h	equ	0xFDA
  4830                           fsr2l	equ	0xFD9
  4831                           status	equ	0xFD8
  4832                           
  4833 ;; *************** function _UART_buff_modulo_inc *****************
  4834 ;; Defined at:
  4835 ;;		line 106 in file "UART.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;  value           2   26[COMRAM] const unsigned int 
  4838 ;;  modulus         2   28[COMRAM] const unsigned int 
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  my_value        2   30[COMRAM] unsigned int 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  2   26[COMRAM] unsigned int 
  4843 ;; Registers used:
  4844 ;;		wreg, status,2, status,0
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4850 ;;      Params:         4       0       0       0       0       0       0
  4851 ;;      Locals:         2       0       0       0       0       0       0
  4852 ;;      Temps:          0       0       0       0       0       0       0
  4853 ;;      Totals:         6       0       0       0       0       0       0
  4854 ;;Total ram usage:        6 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    4
  4857 ;; This function calls:
  4858 ;;		Nothing
  4859 ;; This function is called by:
  4860 ;;		_UART_buff_put
  4861 ;;		_UART_buff_get
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           	psect	text15
  4866  0039C6                     __ptext15:
  4867                           	opt stack 0
  4868  0039C6                     _UART_buff_modulo_inc:
  4869                           	opt stack 22
  4870                           
  4871                           ;UART.c: 107: unsigned int my_value = value + 1;
  4872                           
  4873                           ;incstack = 0
  4874  0039C6  0E01               	movlw	1
  4875  0039C8  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4876  0039CA  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4877  0039CC  0E00               	movlw	0
  4878  0039CE  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4879  0039D0  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4880                           
  4881                           ;UART.c: 108: if (my_value >= modulus) {
  4882  0039D2  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4883  0039D4  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4884  0039D6  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4885  0039D8  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4886  0039DA  A0D8               	btfss	status,0,c
  4887  0039DC  D005               	goto	l4483
  4888                           
  4889                           ;UART.c: 109: my_value = 0;
  4890  0039DE  0E00               	movlw	0
  4891  0039E0  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4892  0039E2  0E00               	movlw	0
  4893  0039E4  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4894  0039E6  D000               	goto	l4483
  4895  0039E8                     l4483:
  4896                           
  4897                           ;UART.c: 110: }
  4898                           ;UART.c: 111: return (my_value);
  4899  0039E8  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4900  0039EC  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4901  0039F0  0012               	return	
  4902  0039F2  0012               	return		;funcret
  4903  0039F4                     __end_of_UART_buff_modulo_inc:
  4904                           	opt stack 0
  4905                           tosu	equ	0xFFF
  4906                           tosh	equ	0xFFE
  4907                           tosl	equ	0xFFD
  4908                           pclath	equ	0xFFA
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           prodh	equ	0xFF4
  4914                           prodl	equ	0xFF3
  4915                           intcon	equ	0xFF2
  4916                           postinc0	equ	0xFEE
  4917                           wreg	equ	0xFE8
  4918                           postdec1	equ	0xFE5
  4919                           fsr1l	equ	0xFE1
  4920                           indf2	equ	0xFDF
  4921                           postinc2	equ	0xFDE
  4922                           postdec2	equ	0xFDD
  4923                           plusw2	equ	0xFDB
  4924                           fsr2h	equ	0xFDA
  4925                           fsr2l	equ	0xFD9
  4926                           status	equ	0xFD8
  4927                           
  4928 ;; *************** function _Receive_available *****************
  4929 ;; Defined at:
  4930 ;;		line 122 in file "UART.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;		None
  4933 ;; Auto vars:     Size  Location     Type
  4934 ;;		None
  4935 ;; Return value:  Size  Location     Type
  4936 ;;                  2   28[COMRAM] int 
  4937 ;; Registers used:
  4938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4939 ;; Tracked objects:
  4940 ;;		On entry : 0/0
  4941 ;;		On exit  : 0/0
  4942 ;;		Unchanged: 0/0
  4943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4944 ;;      Params:         2       0       0       0       0       0       0
  4945 ;;      Locals:         0       0       0       0       0       0       0
  4946 ;;      Temps:          0       0       0       0       0       0       0
  4947 ;;      Totals:         2       0       0       0       0       0       0
  4948 ;;Total ram usage:        2 bytes
  4949 ;; Hardware stack levels used:    1
  4950 ;; Hardware stack levels required when called:    5
  4951 ;; This function calls:
  4952 ;;		_UART_buff_size
  4953 ;; This function is called by:
  4954 ;;		_SYSTEM_Initialize
  4955 ;;		_CRCcheck
  4956 ;;		_receiveData
  4957 ;; This function uses a non-reentrant model
  4958 ;;
  4959                           
  4960                           	psect	text16
  4961  003B62                     __ptext16:
  4962                           	opt stack 0
  4963  003B62                     _Receive_available:
  4964                           	opt stack 23
  4965                           
  4966                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4967                           
  4968                           ;incstack = 0
  4969  003B62  0E00               	movlw	low _input_buffer
  4970  003B64  6E1B               	movwf	UART_buff_size@_this,c
  4971  003B66  0E04               	movlw	high _input_buffer
  4972  003B68  6E1C               	movwf	UART_buff_size@_this+1,c
  4973  003B6A  ECBD  F01D         	call	_UART_buff_size	;wreg free
  4974  003B6E  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4975  003B72  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4976  003B76  0012               	return	
  4977  003B78  0012               	return		;funcret
  4978  003B7A                     __end_of_Receive_available:
  4979                           	opt stack 0
  4980                           tosu	equ	0xFFF
  4981                           tosh	equ	0xFFE
  4982                           tosl	equ	0xFFD
  4983                           pclath	equ	0xFFA
  4984                           tblptru	equ	0xFF8
  4985                           tblptrh	equ	0xFF7
  4986                           tblptrl	equ	0xFF6
  4987                           tablat	equ	0xFF5
  4988                           prodh	equ	0xFF4
  4989                           prodl	equ	0xFF3
  4990                           intcon	equ	0xFF2
  4991                           postinc0	equ	0xFEE
  4992                           wreg	equ	0xFE8
  4993                           postdec1	equ	0xFE5
  4994                           fsr1l	equ	0xFE1
  4995                           indf2	equ	0xFDF
  4996                           postinc2	equ	0xFDE
  4997                           postdec2	equ	0xFDD
  4998                           plusw2	equ	0xFDB
  4999                           fsr2h	equ	0xFDA
  5000                           fsr2l	equ	0xFD9
  5001                           status	equ	0xFD8
  5002                           
  5003 ;; *************** function _UART_buff_size *****************
  5004 ;; Defined at:
  5005 ;;		line 102 in file "UART.c"
  5006 ;; Parameters:    Size  Location     Type
  5007 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  5008 ;;		 -> output_buffer(206), input_buffer(206), 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;		None
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  2   26[COMRAM] int 
  5013 ;; Registers used:
  5014 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5020 ;;      Params:         2       0       0       0       0       0       0
  5021 ;;      Locals:         0       0       0       0       0       0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0
  5023 ;;      Totals:         2       0       0       0       0       0       0
  5024 ;;Total ram usage:        2 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    4
  5027 ;; This function calls:
  5028 ;;		Nothing
  5029 ;; This function is called by:
  5030 ;;		_Receive_available
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text17
  5035  003B7A                     __ptext17:
  5036                           	opt stack 0
  5037  003B7A                     _UART_buff_size:
  5038                           	opt stack 23
  5039                           
  5040                           ;UART.c: 103: return (_this->count);
  5041                           
  5042                           ;incstack = 0
  5043  003B7A  EE20 F0CC          	lfsr	2,204
  5044  003B7E  501B               	movf	UART_buff_size@_this,w,c
  5045  003B80  26D9               	addwf	fsr2l,f,c
  5046  003B82  501C               	movf	UART_buff_size@_this+1,w,c
  5047  003B84  22DA               	addwfc	fsr2h,f,c
  5048  003B86  CFDE F01B          	movff	postinc2,?_UART_buff_size
  5049  003B8A  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  5050  003B8E  0012               	return	
  5051  003B90  0012               	return		;funcret
  5052  003B92                     __end_of_UART_buff_size:
  5053                           	opt stack 0
  5054                           tosu	equ	0xFFF
  5055                           tosh	equ	0xFFE
  5056                           tosl	equ	0xFFD
  5057                           pclath	equ	0xFFA
  5058                           tblptru	equ	0xFF8
  5059                           tblptrh	equ	0xFF7
  5060                           tblptrl	equ	0xFF6
  5061                           tablat	equ	0xFF5
  5062                           prodh	equ	0xFF4
  5063                           prodl	equ	0xFF3
  5064                           intcon	equ	0xFF2
  5065                           postinc0	equ	0xFEE
  5066                           wreg	equ	0xFE8
  5067                           postdec1	equ	0xFE5
  5068                           fsr1l	equ	0xFE1
  5069                           indf2	equ	0xFDF
  5070                           postinc2	equ	0xFDE
  5071                           postdec2	equ	0xFDD
  5072                           plusw2	equ	0xFDB
  5073                           fsr2h	equ	0xFDA
  5074                           fsr2l	equ	0xFD9
  5075                           status	equ	0xFD8
  5076                           
  5077 ;; *************** function _CRC8 *****************
  5078 ;; Defined at:
  5079 ;;		line 34 in file "FastTransfer.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;  data            2   26[COMRAM] PTR const unsigned char 
  5082 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1129(3), receiveData@holder(3), 
  5083 ;;		 -> rx_buffer(200), ring_buffer(206), 
  5084 ;;  len             1   28[COMRAM] unsigned char 
  5085 ;; Auto vars:     Size  Location     Type
  5086 ;;  sum             1   29[COMRAM] unsigned char 
  5087 ;;  tempI           1   31[COMRAM] unsigned char 
  5088 ;;  extract         1   30[COMRAM] unsigned char 
  5089 ;;  crc             1   32[COMRAM] unsigned char 
  5090 ;; Return value:  Size  Location     Type
  5091 ;;                  1    wreg      unsigned char 
  5092 ;; Registers used:
  5093 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5094 ;; Tracked objects:
  5095 ;;		On entry : 0/0
  5096 ;;		On exit  : 0/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5099 ;;      Params:         3       0       0       0       0       0       0
  5100 ;;      Locals:         4       0       0       0       0       0       0
  5101 ;;      Temps:          0       0       0       0       0       0       0
  5102 ;;      Totals:         7       0       0       0       0       0       0
  5103 ;;Total ram usage:        7 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:    4
  5106 ;; This function calls:
  5107 ;;		Nothing
  5108 ;; This function is called by:
  5109 ;;		_sendData
  5110 ;;		_receiveData
  5111 ;;		_CRCcheck
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text18
  5116  003628                     __ptext18:
  5117                           	opt stack 0
  5118  003628                     _CRC8:
  5119                           	opt stack 24
  5120                           
  5121                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  5122                           
  5123                           ;incstack = 0
  5124  003628  0E00               	movlw	0
  5125  00362A  6E21               	movwf	CRC8@crc,c
  5126                           
  5127                           ;FastTransfer.c: 36: while (len--) {
  5128  00362C  D01F               	goto	l4557
  5129  00362E                     l4541:
  5130                           
  5131                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  5132  00362E  C01B  FFD9         	movff	CRC8@data,fsr2l
  5133  003632  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  5134  003636  50DF               	movf	indf2,w,c
  5135  003638  6E1F               	movwf	CRC8@extract,c
  5136  00363A  4A1B               	infsnz	CRC8@data,f,c
  5137  00363C  2A1C               	incf	CRC8@data+1,f,c
  5138                           
  5139                           ;FastTransfer.c: 38: unsigned char tempI;
  5140                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  5141  00363E  0E08               	movlw	8
  5142  003640  6E20               	movwf	CRC8@tempI,c
  5143  003642  D00F               	goto	l4555
  5144  003644                     l4547:
  5145                           
  5146                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  5147  003644  5021               	movf	CRC8@crc,w,c
  5148  003646  181F               	xorwf	CRC8@extract,w,c
  5149  003648  0B01               	andlw	1
  5150  00364A  6E1E               	movwf	CRC8@sum,c
  5151                           
  5152                           ;FastTransfer.c: 41: crc >>= 1;
  5153  00364C  90D8               	bcf	status,0,c
  5154  00364E  3221               	rrcf	CRC8@crc,f,c
  5155                           
  5156                           ;FastTransfer.c: 42: if (sum) {
  5157  003650  501E               	movf	CRC8@sum,w,c
  5158  003652  B4D8               	btfsc	status,2,c
  5159  003654  D002               	goto	l599
  5160                           
  5161                           ;FastTransfer.c: 43: crc ^= 0x8C;
  5162  003656  0E8C               	movlw	140
  5163  003658  1A21               	xorwf	CRC8@crc,f,c
  5164  00365A                     l599:
  5165                           
  5166                           ;FastTransfer.c: 44: }
  5167                           ;FastTransfer.c: 45: extract >>= 1;
  5168  00365A  90D8               	bcf	status,0,c
  5169  00365C  321F               	rrcf	CRC8@extract,f,c
  5170  00365E  0620               	decf	CRC8@tempI,f,c
  5171  003660  D000               	goto	l4555
  5172  003662                     l4555:
  5173  003662  5020               	movf	CRC8@tempI,w,c
  5174  003664  B4D8               	btfsc	status,2,c
  5175  003666  D002               	goto	l4557
  5176  003668  D7ED               	goto	l4547
  5177  00366A  D000               	goto	l4557
  5178  00366C                     l4557:
  5179  00366C  061D               	decf	CRC8@len,f,c
  5180  00366E  281D               	incf	CRC8@len,w,c
  5181  003670  A4D8               	btfss	status,2,c
  5182  003672  D7DD               	goto	l4541
  5183                           
  5184                           ;FastTransfer.c: 46: }
  5185                           ;FastTransfer.c: 47: }
  5186                           ;FastTransfer.c: 48: return crc;
  5187  003674  5021               	movf	CRC8@crc,w,c
  5188  003676  0012               	return	
  5189  003678  0012               	return		;funcret
  5190  00367A                     __end_of_CRC8:
  5191                           	opt stack 0
  5192                           tosu	equ	0xFFF
  5193                           tosh	equ	0xFFE
  5194                           tosl	equ	0xFFD
  5195                           pclath	equ	0xFFA
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           postinc0	equ	0xFEE
  5204                           wreg	equ	0xFE8
  5205                           postdec1	equ	0xFE5
  5206                           fsr1l	equ	0xFE1
  5207                           indf2	equ	0xFDF
  5208                           postinc2	equ	0xFDE
  5209                           postdec2	equ	0xFDD
  5210                           plusw2	equ	0xFDB
  5211                           fsr2h	equ	0xFDA
  5212                           fsr2l	equ	0xFD9
  5213                           status	equ	0xFD8
  5214                           
  5215 ;; *************** function ___fttol *****************
  5216 ;; Defined at:
  5217 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  f1              3   33[BANK0 ] float 
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;  lval            4   43[BANK0 ] unsigned long 
  5222 ;;  exp1            1   47[BANK0 ] unsigned char 
  5223 ;;  sign1           1   42[BANK0 ] unsigned char 
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  4   33[BANK0 ] long 
  5226 ;; Registers used:
  5227 ;;		wreg, status,2, status,0
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5233 ;;      Params:         0       4       0       0       0       0       0
  5234 ;;      Locals:         0       6       0       0       0       0       0
  5235 ;;      Temps:          0       5       0       0       0       0       0
  5236 ;;      Totals:         0      15       0       0       0       0       0
  5237 ;;Total ram usage:       15 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    4
  5240 ;; This function calls:
  5241 ;;		Nothing
  5242 ;; This function is called by:
  5243 ;;		_updateComms
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           	psect	text19
  5248  00216A                     __ptext19:
  5249                           	opt stack 0
  5250  00216A                     ___fttol:
  5251                           	opt stack 25
  5252                           
  5253                           ;incstack = 0
  5254  00216A  C0E4  F0E6         	movff	___fttol@f1+2,??___fttol
  5255  00216E  0100               	movlb	0	; () banked
  5256  002170  6BE7               	clrf	(??___fttol+1)& (0+255),b
  5257  002172  6BE8               	clrf	(??___fttol+2)& (0+255),b
  5258  002174  0100               	movlb	0	; () banked
  5259  002176  35E3               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5260  002178  0100               	movlb	0	; () banked
  5261  00217A  37E6               	rlcf	??___fttol& (0+255),f,b
  5262  00217C  E301               	bnc	u3871
  5263  00217E  81E7               	bsf	(??___fttol+1)& (0+255),0,b
  5264  002180                     u3871:
  5265  002180  0100               	movlb	0	; () banked
  5266  002182  51E6               	movf	??___fttol& (0+255),w,b
  5267  002184  0100               	movlb	0	; () banked
  5268  002186  6FF0               	movwf	___fttol@exp1& (0+255),b
  5269  002188  0100               	movlb	0	; () banked
  5270  00218A  51F0               	movf	___fttol@exp1& (0+255),w,b
  5271  00218C  A4D8               	btfss	status,2,c
  5272  00218E  D00A               	goto	l3943
  5273                           
  5274                           ; BSR set to: 0
  5275  002190  0E00               	movlw	0
  5276  002192  0100               	movlb	0	; () banked
  5277  002194  6FE2               	movwf	?___fttol& (0+255),b
  5278  002196  0E00               	movlw	0
  5279  002198  6FE3               	movwf	(?___fttol+1)& (0+255),b
  5280  00219A  0E00               	movlw	0
  5281  00219C  6FE4               	movwf	(?___fttol+2)& (0+255),b
  5282  00219E  0E00               	movlw	0
  5283  0021A0  6FE5               	movwf	(?___fttol+3)& (0+255),b
  5284                           
  5285                           ; BSR set to: 0
  5286  0021A2  0012               	return	
  5287  0021A4                     l3943:
  5288                           
  5289                           ; BSR set to: 0
  5290  0021A4  0E17               	movlw	23
  5291  0021A6  0100               	movlb	0	; () banked
  5292  0021A8  6FE6               	movwf	??___fttol& (0+255),b
  5293  0021AA  C0E2  F0E7         	movff	___fttol@f1,??___fttol+1
  5294  0021AE  C0E3  F0E8         	movff	___fttol@f1+1,??___fttol+2
  5295  0021B2  C0E4  F0E9         	movff	___fttol@f1+2,??___fttol+3
  5296  0021B6  0100               	movlb	0	; () banked
  5297  0021B8  29E6               	incf	??___fttol& (0+255),w,b
  5298  0021BA  0100               	movlb	0	; () banked
  5299  0021BC  6FEA               	movwf	(??___fttol+4)& (0+255),b
  5300  0021BE  D005               	goto	u3890
  5301  0021C0                     u3895:
  5302  0021C0  0100               	movlb	0	; () banked
  5303  0021C2  90D8               	bcf	status,0,c
  5304  0021C4  33E9               	rrcf	(??___fttol+3)& (0+255),f,b
  5305  0021C6  33E8               	rrcf	(??___fttol+2)& (0+255),f,b
  5306  0021C8  33E7               	rrcf	(??___fttol+1)& (0+255),f,b
  5307  0021CA                     u3890:
  5308  0021CA  0100               	movlb	0	; () banked
  5309  0021CC  2FEA               	decfsz	(??___fttol+4)& (0+255),f,b
  5310  0021CE  D7F8               	goto	u3895
  5311  0021D0  0100               	movlb	0	; () banked
  5312  0021D2  51E7               	movf	(??___fttol+1)& (0+255),w,b
  5313  0021D4  0100               	movlb	0	; () banked
  5314  0021D6  6FEB               	movwf	___fttol@sign1& (0+255),b
  5315                           
  5316                           ; BSR set to: 0
  5317  0021D8  0100               	movlb	0	; () banked
  5318  0021DA  8FE3               	bsf	(___fttol@f1+1)& (0+255),7,b
  5319                           
  5320                           ; BSR set to: 0
  5321  0021DC  0EFF               	movlw	255
  5322  0021DE  0100               	movlb	0	; () banked
  5323  0021E0  17E2               	andwf	___fttol@f1& (0+255),f,b
  5324  0021E2  0EFF               	movlw	255
  5325  0021E4  0100               	movlb	0	; () banked
  5326  0021E6  17E3               	andwf	(___fttol@f1+1)& (0+255),f,b
  5327  0021E8  0E00               	movlw	0
  5328  0021EA  0100               	movlb	0	; () banked
  5329  0021EC  17E4               	andwf	(___fttol@f1+2)& (0+255),f,b
  5330                           
  5331                           ; BSR set to: 0
  5332  0021EE  0100               	movlb	0	; () banked
  5333  0021F0  51E2               	movf	___fttol@f1& (0+255),w,b
  5334  0021F2  0100               	movlb	0	; () banked
  5335  0021F4  6FEC               	movwf	___fttol@lval& (0+255),b
  5336  0021F6  0100               	movlb	0	; () banked
  5337  0021F8  51E3               	movf	(___fttol@f1+1)& (0+255),w,b
  5338  0021FA  0100               	movlb	0	; () banked
  5339  0021FC  6FED               	movwf	(___fttol@lval+1)& (0+255),b
  5340  0021FE  0100               	movlb	0	; () banked
  5341  002200  51E4               	movf	(___fttol@f1+2)& (0+255),w,b
  5342  002202  0100               	movlb	0	; () banked
  5343  002204  6FEE               	movwf	(___fttol@lval+2)& (0+255),b
  5344  002206  0100               	movlb	0	; () banked
  5345  002208  6BEF               	clrf	(___fttol@lval+3)& (0+255),b
  5346                           
  5347                           ; BSR set to: 0
  5348  00220A  0E8E               	movlw	142
  5349  00220C  0100               	movlb	0	; () banked
  5350  00220E  5FF0               	subwf	___fttol@exp1& (0+255),f,b
  5351                           
  5352                           ; BSR set to: 0
  5353  002210  0100               	movlb	0	; () banked
  5354  002212  AFF0               	btfss	___fttol@exp1& (0+255),7,b
  5355  002214  D01B               	goto	l3965
  5356                           
  5357                           ; BSR set to: 0
  5358  002216  0100               	movlb	0	; () banked
  5359  002218  51F0               	movf	___fttol@exp1& (0+255),w,b
  5360  00221A  0A80               	xorlw	128
  5361  00221C  0F8F               	addlw	143
  5362  00221E  B0D8               	btfsc	status,0,c
  5363  002220  D00B               	goto	l3961
  5364                           
  5365                           ; BSR set to: 0
  5366  002222  0E00               	movlw	0
  5367  002224  0100               	movlb	0	; () banked
  5368  002226  6FE2               	movwf	?___fttol& (0+255),b
  5369  002228  0E00               	movlw	0
  5370  00222A  6FE3               	movwf	(?___fttol+1)& (0+255),b
  5371  00222C  0E00               	movlw	0
  5372  00222E  6FE4               	movwf	(?___fttol+2)& (0+255),b
  5373  002230  0E00               	movlw	0
  5374  002232  6FE5               	movwf	(?___fttol+3)& (0+255),b
  5375                           
  5376                           ; BSR set to: 0
  5377  002234  0012               	return	
  5378                           
  5379                           ; BSR set to: 0
  5380  002236  D000               	goto	l3961
  5381  002238                     l3961:
  5382                           
  5383                           ; BSR set to: 0
  5384  002238  0100               	movlb	0	; () banked
  5385  00223A  90D8               	bcf	status,0,c
  5386  00223C  33EF               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5387  00223E  33EE               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5388  002240  33ED               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5389  002242  33EC               	rrcf	___fttol@lval& (0+255),f,b
  5390                           
  5391                           ; BSR set to: 0
  5392  002244  0100               	movlb	0	; () banked
  5393  002246  3FF0               	incfsz	___fttol@exp1& (0+255),f,b
  5394  002248  D7F7               	goto	l3961
  5395                           
  5396                           ; BSR set to: 0
  5397  00224A  D01F               	goto	l3975
  5398  00224C                     l3965:
  5399                           
  5400                           ; BSR set to: 0
  5401  00224C  0E17               	movlw	23
  5402  00224E  0100               	movlb	0	; () banked
  5403  002250  65F0               	cpfsgt	___fttol@exp1& (0+255),b
  5404  002252  D014               	goto	l3973
  5405                           
  5406                           ; BSR set to: 0
  5407  002254  0E00               	movlw	0
  5408  002256  0100               	movlb	0	; () banked
  5409  002258  6FE2               	movwf	?___fttol& (0+255),b
  5410  00225A  0E00               	movlw	0
  5411  00225C  6FE3               	movwf	(?___fttol+1)& (0+255),b
  5412  00225E  0E00               	movlw	0
  5413  002260  6FE4               	movwf	(?___fttol+2)& (0+255),b
  5414  002262  0E00               	movlw	0
  5415  002264  6FE5               	movwf	(?___fttol+3)& (0+255),b
  5416                           
  5417                           ; BSR set to: 0
  5418  002266  0012               	return	
  5419                           
  5420                           ; BSR set to: 0
  5421  002268  D009               	goto	l3973
  5422  00226A                     l3971:
  5423                           
  5424                           ; BSR set to: 0
  5425  00226A  0100               	movlb	0	; () banked
  5426  00226C  90D8               	bcf	status,0,c
  5427  00226E  37EC               	rlcf	___fttol@lval& (0+255),f,b
  5428  002270  37ED               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5429  002272  37EE               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5430  002274  37EF               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5431  002276  0100               	movlb	0	; () banked
  5432  002278  07F0               	decf	___fttol@exp1& (0+255),f,b
  5433  00227A  D000               	goto	l3973
  5434  00227C                     l3973:
  5435                           
  5436                           ; BSR set to: 0
  5437  00227C  0100               	movlb	0	; () banked
  5438  00227E  51F0               	movf	___fttol@exp1& (0+255),w,b
  5439  002280  0100               	movlb	0	; () banked
  5440  002282  B4D8               	btfsc	status,2,c
  5441  002284  D002               	goto	l3975
  5442  002286  D7F1               	goto	l3971
  5443                           
  5444                           ; BSR set to: 0
  5445  002288  D000               	goto	l3975
  5446  00228A                     l3975:
  5447                           
  5448                           ; BSR set to: 0
  5449  00228A  0100               	movlb	0	; () banked
  5450  00228C  51EB               	movf	___fttol@sign1& (0+255),w,b
  5451  00228E  0100               	movlb	0	; () banked
  5452  002290  B4D8               	btfsc	status,2,c
  5453  002292  D00A               	goto	l3979
  5454                           
  5455                           ; BSR set to: 0
  5456  002294  0100               	movlb	0	; () banked
  5457  002296  1FEF               	comf	(___fttol@lval+3)& (0+255),f,b
  5458  002298  1FEE               	comf	(___fttol@lval+2)& (0+255),f,b
  5459  00229A  1FED               	comf	(___fttol@lval+1)& (0+255),f,b
  5460  00229C  6DEC               	negf	___fttol@lval& (0+255),b
  5461  00229E  0E00               	movlw	0
  5462  0022A0  23ED               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5463  0022A2  23EE               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5464  0022A4  23EF               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5465  0022A6  D000               	goto	l3979
  5466  0022A8                     l3979:
  5467                           
  5468                           ; BSR set to: 0
  5469  0022A8  C0EC  F0E2         	movff	___fttol@lval,?___fttol
  5470  0022AC  C0ED  F0E3         	movff	___fttol@lval+1,?___fttol+1
  5471  0022B0  C0EE  F0E4         	movff	___fttol@lval+2,?___fttol+2
  5472  0022B4  C0EF  F0E5         	movff	___fttol@lval+3,?___fttol+3
  5473  0022B8  0012               	return	
  5474                           
  5475                           ; BSR set to: 0
  5476                           
  5477                           ; BSR set to: 0
  5478  0022BA  0012               	return		;funcret
  5479  0022BC                     __end_of___fttol:
  5480                           	opt stack 0
  5481                           tosu	equ	0xFFF
  5482                           tosh	equ	0xFFE
  5483                           tosl	equ	0xFFD
  5484                           pclath	equ	0xFFA
  5485                           tblptru	equ	0xFF8
  5486                           tblptrh	equ	0xFF7
  5487                           tblptrl	equ	0xFF6
  5488                           tablat	equ	0xFF5
  5489                           prodh	equ	0xFF4
  5490                           prodl	equ	0xFF3
  5491                           intcon	equ	0xFF2
  5492                           postinc0	equ	0xFEE
  5493                           wreg	equ	0xFE8
  5494                           postdec1	equ	0xFE5
  5495                           fsr1l	equ	0xFE1
  5496                           indf2	equ	0xFDF
  5497                           postinc2	equ	0xFDE
  5498                           postdec2	equ	0xFDD
  5499                           plusw2	equ	0xFDB
  5500                           fsr2h	equ	0xFDA
  5501                           fsr2l	equ	0xFD9
  5502                           status	equ	0xFD8
  5503                           
  5504 ;; *************** function _ToSend *****************
  5505 ;; Defined at:
  5506 ;;		line 216 in file "FastTransfer.c"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;  where           1    wreg     unsigned char 
  5509 ;;  what            2   48[BANK0 ] unsigned int 
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;  where           1   50[BANK0 ] unsigned char 
  5512 ;; Return value:  Size  Location     Type
  5513 ;;		None               void
  5514 ;; Registers used:
  5515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5521 ;;      Params:         0       2       0       0       0       0       0
  5522 ;;      Locals:         0       1       0       0       0       0       0
  5523 ;;      Temps:          0       0       0       0       0       0       0
  5524 ;;      Totals:         0       3       0       0       0       0       0
  5525 ;;Total ram usage:        3 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; Hardware stack levels required when called:    6
  5528 ;; This function calls:
  5529 ;;		_FastTransfer_buffer_put
  5530 ;; This function is called by:
  5531 ;;		_updateComms
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           	psect	text20
  5536  003AEE                     __ptext20:
  5537                           	opt stack 0
  5538  003AEE                     _ToSend:
  5539                           	opt stack 23
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;incstack = 0
  5543                           ;ToSend@where stored from wreg
  5544  003AEE  0100               	movlb	0	; () banked
  5545  003AF0  6FF3               	movwf	ToSend@where& (0+255),b
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  5549  003AF2  0E00               	movlw	low _ring_buffer
  5550  003AF4  6E21               	movwf	FastTransfer_buffer_put@_this,c
  5551  003AF6  0E02               	movlw	high _ring_buffer
  5552  003AF8  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  5553  003AFA  C0F3  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  5554  003AFE  C0F1  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  5555  003B02  C0F2  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  5556  003B06  EC00  F010         	call	_FastTransfer_buffer_put	;wreg free
  5557  003B0A  0012               	return		;funcret
  5558  003B0C                     __end_of_ToSend:
  5559                           	opt stack 0
  5560                           tosu	equ	0xFFF
  5561                           tosh	equ	0xFFE
  5562                           tosl	equ	0xFFD
  5563                           pclath	equ	0xFFA
  5564                           tblptru	equ	0xFF8
  5565                           tblptrh	equ	0xFF7
  5566                           tblptrl	equ	0xFF6
  5567                           tablat	equ	0xFF5
  5568                           prodh	equ	0xFF4
  5569                           prodl	equ	0xFF3
  5570                           intcon	equ	0xFF2
  5571                           postinc0	equ	0xFEE
  5572                           wreg	equ	0xFE8
  5573                           postdec1	equ	0xFE5
  5574                           fsr1l	equ	0xFE1
  5575                           indf2	equ	0xFDF
  5576                           postinc2	equ	0xFDE
  5577                           postdec2	equ	0xFDD
  5578                           plusw2	equ	0xFDB
  5579                           fsr2h	equ	0xFDA
  5580                           fsr2l	equ	0xFD9
  5581                           status	equ	0xFD8
  5582                           
  5583 ;; *************** function _FastTransfer_buffer_put *****************
  5584 ;; Defined at:
  5585 ;;		line 223 in file "FastTransfer.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  5588 ;;		 -> ring_buffer(206), 
  5589 ;;  towhere         1   34[COMRAM] unsigned char 
  5590 ;;  towhat          2   35[COMRAM] unsigned int 
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;		None
  5593 ;; Return value:  Size  Location     Type
  5594 ;;		None               void
  5595 ;; Registers used:
  5596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5602 ;;      Params:         5       0       0       0       0       0       0
  5603 ;;      Locals:         0       0       0       0       0       0       0
  5604 ;;      Temps:          2       0       0       0       0       0       0
  5605 ;;      Totals:         7       0       0       0       0       0       0
  5606 ;;Total ram usage:        7 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:    5
  5609 ;; This function calls:
  5610 ;;		_FastTransfer_buffer_modulo_inc
  5611 ;; This function is called by:
  5612 ;;		_ToSend
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text21
  5617  002000                     __ptext21:
  5618                           	opt stack 0
  5619  002000                     _FastTransfer_buffer_put:
  5620                           	opt stack 23
  5621                           
  5622                           ;FastTransfer.c: 225: group.integer = towhat;
  5623                           
  5624                           ;incstack = 0
  5625  002000  C024  F043         	movff	FastTransfer_buffer_put@towhat,_group
  5626  002004  C025  F044         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  5627                           
  5628                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  5629  002008  EE20 F0CC          	lfsr	2,204
  5630  00200C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5631  00200E  26D9               	addwf	fsr2l,f,c
  5632  002010  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5633  002012  22DA               	addwfc	fsr2h,f,c
  5634  002014  0E01               	movlw	1
  5635  002016  BEDB               	btfsc	plusw2,7,c
  5636  002018  D007               	goto	l4799
  5637  00201A  0E01               	movlw	1
  5638  00201C  50DB               	movf	plusw2,w,c
  5639  00201E  E103               	bnz	u4951
  5640  002020  0EC5               	movlw	197
  5641  002022  5CDE               	subwf	postinc2,w,c
  5642  002024  B0D8               	btfsc	status,0,c
  5643  002026                     u4951:
  5644  002026  0012               	return	
  5645  002028                     l4799:
  5646                           
  5647                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  5648  002028  EE20 F0C8          	lfsr	2,200
  5649  00202C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5650  00202E  26D9               	addwf	fsr2l,f,c
  5651  002030  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5652  002032  22DA               	addwfc	fsr2h,f,c
  5653  002034  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5654  002038  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5655  00203C  5026               	movf	??_FastTransfer_buffer_put,w,c
  5656  00203E  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5657  002040  6ED9               	movwf	fsr2l,c
  5658  002042  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5659  002044  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5660  002046  6EDA               	movwf	fsr2h,c
  5661  002048  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  5662                           
  5663                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5664  00204C  EE20 F0C8          	lfsr	2,200
  5665  002050  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5666  002052  26D9               	addwf	fsr2l,f,c
  5667  002054  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5668  002056  22DA               	addwfc	fsr2h,f,c
  5669  002058  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5670  00205C  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5671  002060  0E00               	movlw	0
  5672  002062  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5673  002064  0EC8               	movlw	200
  5674  002066  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5675  002068  ECFA  F01C         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5676  00206C  EE20 F0C8          	lfsr	2,200
  5677  002070  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5678  002072  26D9               	addwf	fsr2l,f,c
  5679  002074  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5680  002076  22DA               	addwfc	fsr2h,f,c
  5681  002078  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5682  00207C  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5683                           
  5684                           ;FastTransfer.c: 230: ++_this->count;
  5685  002080  EE20 F0CC          	lfsr	2,204
  5686  002084  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5687  002086  26D9               	addwf	fsr2l,f,c
  5688  002088  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5689  00208A  22DA               	addwfc	fsr2h,f,c
  5690  00208C  2ADE               	incf	postinc2,f,c
  5691  00208E  0E00               	movlw	0
  5692  002090  22DD               	addwfc	postdec2,f,c
  5693                           
  5694                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  5695  002092  EE20 F0C8          	lfsr	2,200
  5696  002096  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5697  002098  26D9               	addwf	fsr2l,f,c
  5698  00209A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5699  00209C  22DA               	addwfc	fsr2h,f,c
  5700  00209E  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5701  0020A2  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5702  0020A6  5026               	movf	??_FastTransfer_buffer_put,w,c
  5703  0020A8  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5704  0020AA  6ED9               	movwf	fsr2l,c
  5705  0020AC  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5706  0020AE  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5707  0020B0  6EDA               	movwf	fsr2h,c
  5708  0020B2  C043  FFDF         	movff	_group,indf2
  5709                           
  5710                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5711  0020B6  EE20 F0C8          	lfsr	2,200
  5712  0020BA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5713  0020BC  26D9               	addwf	fsr2l,f,c
  5714  0020BE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5715  0020C0  22DA               	addwfc	fsr2h,f,c
  5716  0020C2  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5717  0020C6  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5718  0020CA  0E00               	movlw	0
  5719  0020CC  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5720  0020CE  0EC8               	movlw	200
  5721  0020D0  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5722  0020D2  ECFA  F01C         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5723  0020D6  EE20 F0C8          	lfsr	2,200
  5724  0020DA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5725  0020DC  26D9               	addwf	fsr2l,f,c
  5726  0020DE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5727  0020E0  22DA               	addwfc	fsr2h,f,c
  5728  0020E2  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5729  0020E6  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5730                           
  5731                           ;FastTransfer.c: 233: ++_this->count;
  5732  0020EA  EE20 F0CC          	lfsr	2,204
  5733  0020EE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5734  0020F0  26D9               	addwf	fsr2l,f,c
  5735  0020F2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5736  0020F4  22DA               	addwfc	fsr2h,f,c
  5737  0020F6  2ADE               	incf	postinc2,f,c
  5738  0020F8  0E00               	movlw	0
  5739  0020FA  22DD               	addwfc	postdec2,f,c
  5740                           
  5741                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  5742  0020FC  EE20 F0C8          	lfsr	2,200
  5743  002100  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5744  002102  26D9               	addwf	fsr2l,f,c
  5745  002104  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5746  002106  22DA               	addwfc	fsr2h,f,c
  5747  002108  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5748  00210C  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5749  002110  5026               	movf	??_FastTransfer_buffer_put,w,c
  5750  002112  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5751  002114  6ED9               	movwf	fsr2l,c
  5752  002116  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5753  002118  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5754  00211A  6EDA               	movwf	fsr2h,c
  5755  00211C  C044  FFDF         	movff	_group+1,indf2
  5756                           
  5757                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5758  002120  EE20 F0C8          	lfsr	2,200
  5759  002124  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5760  002126  26D9               	addwf	fsr2l,f,c
  5761  002128  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5762  00212A  22DA               	addwfc	fsr2h,f,c
  5763  00212C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5764  002130  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5765  002134  0E00               	movlw	0
  5766  002136  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5767  002138  0EC8               	movlw	200
  5768  00213A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5769  00213C  ECFA  F01C         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5770  002140  EE20 F0C8          	lfsr	2,200
  5771  002144  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5772  002146  26D9               	addwf	fsr2l,f,c
  5773  002148  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5774  00214A  22DA               	addwfc	fsr2h,f,c
  5775  00214C  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5776  002150  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5777                           
  5778                           ;FastTransfer.c: 236: ++_this->count;
  5779  002154  EE20 F0CC          	lfsr	2,204
  5780  002158  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5781  00215A  26D9               	addwf	fsr2l,f,c
  5782  00215C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5783  00215E  22DA               	addwfc	fsr2h,f,c
  5784  002160  2ADE               	incf	postinc2,f,c
  5785  002162  0E00               	movlw	0
  5786  002164  22DD               	addwfc	postdec2,f,c
  5787  002166  0012               	return	
  5788  002168  0012               	return		;funcret
  5789  00216A                     __end_of_FastTransfer_buffer_put:
  5790                           	opt stack 0
  5791                           tosu	equ	0xFFF
  5792                           tosh	equ	0xFFE
  5793                           tosl	equ	0xFFD
  5794                           pclath	equ	0xFFA
  5795                           tblptru	equ	0xFF8
  5796                           tblptrh	equ	0xFF7
  5797                           tblptrl	equ	0xFF6
  5798                           tablat	equ	0xFF5
  5799                           prodh	equ	0xFF4
  5800                           prodl	equ	0xFF3
  5801                           intcon	equ	0xFF2
  5802                           postinc0	equ	0xFEE
  5803                           wreg	equ	0xFE8
  5804                           postdec1	equ	0xFE5
  5805                           fsr1l	equ	0xFE1
  5806                           indf2	equ	0xFDF
  5807                           postinc2	equ	0xFDE
  5808                           postdec2	equ	0xFDD
  5809                           plusw2	equ	0xFDB
  5810                           fsr2h	equ	0xFDA
  5811                           fsr2l	equ	0xFD9
  5812                           status	equ	0xFD8
  5813                           
  5814 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  5815 ;; Defined at:
  5816 ;;		line 273 in file "FastTransfer.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;  value           2   26[COMRAM] const unsigned int 
  5819 ;;  modulus         2   28[COMRAM] const unsigned int 
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;  my_value        2   30[COMRAM] unsigned int 
  5822 ;; Return value:  Size  Location     Type
  5823 ;;                  2   26[COMRAM] unsigned int 
  5824 ;; Registers used:
  5825 ;;		wreg, status,2, status,0
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5831 ;;      Params:         4       0       0       0       0       0       0
  5832 ;;      Locals:         2       0       0       0       0       0       0
  5833 ;;      Temps:          0       0       0       0       0       0       0
  5834 ;;      Totals:         6       0       0       0       0       0       0
  5835 ;;Total ram usage:        6 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    4
  5838 ;; This function calls:
  5839 ;;		Nothing
  5840 ;; This function is called by:
  5841 ;;		_FastTransfer_buffer_put
  5842 ;;		_FastTransfer_buffer_get
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           	psect	text22
  5847  0039F4                     __ptext22:
  5848                           	opt stack 0
  5849  0039F4                     _FastTransfer_buffer_modulo_inc:
  5850                           	opt stack 23
  5851                           
  5852                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  5853                           
  5854                           ;incstack = 0
  5855  0039F4  0E01               	movlw	1
  5856  0039F6  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  5857  0039F8  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5858  0039FA  0E00               	movlw	0
  5859  0039FC  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  5860  0039FE  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5861                           
  5862                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  5863  003A00  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  5864  003A02  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  5865  003A04  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  5866  003A06  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  5867  003A08  A0D8               	btfss	status,0,c
  5868  003A0A  D005               	goto	l4567
  5869                           
  5870                           ;FastTransfer.c: 276: my_value = 0;
  5871  003A0C  0E00               	movlw	0
  5872  003A0E  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5873  003A10  0E00               	movlw	0
  5874  003A12  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5875  003A14  D000               	goto	l4567
  5876  003A16                     l4567:
  5877                           
  5878                           ;FastTransfer.c: 277: }
  5879                           ;FastTransfer.c: 278: return (my_value);
  5880  003A16  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  5881  003A1A  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  5882  003A1E  0012               	return	
  5883  003A20  0012               	return		;funcret
  5884  003A22                     __end_of_FastTransfer_buffer_modulo_inc:
  5885                           	opt stack 0
  5886                           tosu	equ	0xFFF
  5887                           tosh	equ	0xFFE
  5888                           tosl	equ	0xFFD
  5889                           pclath	equ	0xFFA
  5890                           tblptru	equ	0xFF8
  5891                           tblptrh	equ	0xFF7
  5892                           tblptrl	equ	0xFF6
  5893                           tablat	equ	0xFF5
  5894                           prodh	equ	0xFF4
  5895                           prodl	equ	0xFF3
  5896                           intcon	equ	0xFF2
  5897                           postinc0	equ	0xFEE
  5898                           wreg	equ	0xFE8
  5899                           postdec1	equ	0xFE5
  5900                           fsr1l	equ	0xFE1
  5901                           indf2	equ	0xFDF
  5902                           postinc2	equ	0xFDE
  5903                           postdec2	equ	0xFDD
  5904                           plusw2	equ	0xFDB
  5905                           fsr2h	equ	0xFDA
  5906                           fsr2l	equ	0xFD9
  5907                           status	equ	0xFD8
  5908                           
  5909 ;; *************** function _Tempeture_Get *****************
  5910 ;; Defined at:
  5911 ;;		line 91 in file "Tempeture.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;  channelnum      2   32[COMRAM] int 
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;		None
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  3   32[COMRAM] float 
  5918 ;; Registers used:
  5919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5925 ;;      Params:         3       0       0       0       0       0       0
  5926 ;;      Locals:         0       0       0       0       0       0       0
  5927 ;;      Temps:          0       0       0       0       0       0       0
  5928 ;;      Totals:         3       0       0       0       0       0       0
  5929 ;;Total ram usage:        3 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; Hardware stack levels required when called:    5
  5932 ;; This function calls:
  5933 ;;		___wmul
  5934 ;; This function is called by:
  5935 ;;		_updateComms
  5936 ;; This function uses a non-reentrant model
  5937 ;;
  5938                           
  5939                           	psect	text23
  5940  003996                     __ptext23:
  5941                           	opt stack 0
  5942  003996                     _Tempeture_Get:
  5943                           	opt stack 24
  5944                           
  5945                           ;Tempeture.c: 93: return Temp_DegF[channelnum];
  5946                           
  5947                           ;incstack = 0
  5948  003996  C021  F01B         	movff	Tempeture_Get@channelnum,___wmul@multiplier
  5949  00399A  C022  F01C         	movff	Tempeture_Get@channelnum+1,___wmul@multiplier+1
  5950  00399E  0E00               	movlw	0
  5951  0039A0  6E1E               	movwf	___wmul@multiplicand+1,c
  5952  0039A2  0E03               	movlw	3
  5953  0039A4  6E1D               	movwf	___wmul@multiplicand,c
  5954  0039A6  EC3F  F01D         	call	___wmul	;wreg free
  5955  0039AA  0EBE               	movlw	low _Temp_DegF
  5956  0039AC  241B               	addwf	?___wmul,w,c
  5957  0039AE  6ED9               	movwf	fsr2l,c
  5958  0039B0  0E01               	movlw	high _Temp_DegF
  5959  0039B2  201C               	addwfc	?___wmul+1,w,c
  5960  0039B4  6EDA               	movwf	fsr2h,c
  5961  0039B6  CFDE F021          	movff	postinc2,?_Tempeture_Get
  5962  0039BA  CFDE F022          	movff	postinc2,?_Tempeture_Get+1
  5963  0039BE  CFDD F023          	movff	postdec2,?_Tempeture_Get+2
  5964  0039C2  0012               	return	
  5965  0039C4  0012               	return		;funcret
  5966  0039C6                     __end_of_Tempeture_Get:
  5967                           	opt stack 0
  5968                           tosu	equ	0xFFF
  5969                           tosh	equ	0xFFE
  5970                           tosl	equ	0xFFD
  5971                           pclath	equ	0xFFA
  5972                           tblptru	equ	0xFF8
  5973                           tblptrh	equ	0xFF7
  5974                           tblptrl	equ	0xFF6
  5975                           tablat	equ	0xFF5
  5976                           prodh	equ	0xFF4
  5977                           prodl	equ	0xFF3
  5978                           intcon	equ	0xFF2
  5979                           postinc0	equ	0xFEE
  5980                           wreg	equ	0xFE8
  5981                           postdec1	equ	0xFE5
  5982                           fsr1l	equ	0xFE1
  5983                           indf2	equ	0xFDF
  5984                           postinc2	equ	0xFDE
  5985                           postdec2	equ	0xFDD
  5986                           plusw2	equ	0xFDB
  5987                           fsr2h	equ	0xFDA
  5988                           fsr2l	equ	0xFD9
  5989                           status	equ	0xFD8
  5990                           
  5991 ;; *************** function _Delay *****************
  5992 ;; Defined at:
  5993 ;;		line 37 in file "Functions.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;  d_lenth         4   26[COMRAM] long 
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;  wait            4   31[COMRAM] long 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;		None               void
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6007 ;;      Params:         4       0       0       0       0       0       0
  6008 ;;      Locals:         4       0       0       0       0       0       0
  6009 ;;      Temps:          1       0       0       0       0       0       0
  6010 ;;      Totals:         9       0       0       0       0       0       0
  6011 ;;Total ram usage:        9 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    4
  6014 ;; This function calls:
  6015 ;;		Nothing
  6016 ;; This function is called by:
  6017 ;;		_updateComms
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           	psect	text24
  6022  00376E                     __ptext24:
  6023                           	opt stack 0
  6024  00376E                     _Delay:
  6025                           	opt stack 25
  6026                           
  6027                           ;Functions.c: 39: long int wait = 0;
  6028                           
  6029                           ;incstack = 0
  6030  00376E  0E00               	movlw	0
  6031  003770  6E20               	movwf	Delay@wait,c
  6032  003772  0E00               	movlw	0
  6033  003774  6E21               	movwf	Delay@wait+1,c
  6034  003776  0E00               	movlw	0
  6035  003778  6E22               	movwf	Delay@wait+2,c
  6036  00377A  0E00               	movlw	0
  6037  00377C  6E23               	movwf	Delay@wait+3,c
  6038  00377E  D00E               	goto	l3623
  6039  003780                     l3619:
  6040                           
  6041                           ;Functions.c: 41: {
  6042                           ;Functions.c: 42: _delay((unsigned long)((1)*(8000000/4000.0)));
  6043  003780  0E03               	movlw	3
  6044  003782  6E1F               	movwf	??_Delay& (0+255),c
  6045  003784  0E98               	movlw	152
  6046  003786                     u6047:
  6047  003786  2EE8               	decfsz	wreg,f,c
  6048  003788  D7FE               	goto	u6047
  6049  00378A  2E1F               	decfsz	??_Delay& (0+255),f,c
  6050  00378C  D7FC               	goto	u6047
  6051  00378E  0E01               	movlw	1
  6052  003790  2620               	addwf	Delay@wait,f,c
  6053  003792  0E00               	movlw	0
  6054  003794  2221               	addwfc	Delay@wait+1,f,c
  6055  003796  2222               	addwfc	Delay@wait+2,f,c
  6056  003798  2223               	addwfc	Delay@wait+3,f,c
  6057  00379A  D000               	goto	l3623
  6058  00379C                     l3623:
  6059  00379C  501B               	movf	Delay@d_lenth,w,c
  6060  00379E  5C20               	subwf	Delay@wait,w,c
  6061  0037A0  501C               	movf	Delay@d_lenth+1,w,c
  6062  0037A2  5821               	subwfb	Delay@wait+1,w,c
  6063  0037A4  501D               	movf	Delay@d_lenth+2,w,c
  6064  0037A6  5822               	subwfb	Delay@wait+2,w,c
  6065  0037A8  5023               	movf	Delay@wait+3,w,c
  6066  0037AA  0A80               	xorlw	128
  6067  0037AC  6E1F               	movwf	??_Delay& (0+255),c
  6068  0037AE  501E               	movf	Delay@d_lenth+3,w,c
  6069  0037B0  0A80               	xorlw	128
  6070  0037B2  581F               	subwfb	??_Delay& (0+255),w,c
  6071  0037B4  A0D8               	btfss	status,0,c
  6072  0037B6  D7E4               	goto	l3619
  6073  0037B8  0012               	return		;funcret
  6074  0037BA                     __end_of_Delay:
  6075                           	opt stack 0
  6076                           tosu	equ	0xFFF
  6077                           tosh	equ	0xFFE
  6078                           tosl	equ	0xFFD
  6079                           pclath	equ	0xFFA
  6080                           tblptru	equ	0xFF8
  6081                           tblptrh	equ	0xFF7
  6082                           tblptrl	equ	0xFF6
  6083                           tablat	equ	0xFF5
  6084                           prodh	equ	0xFF4
  6085                           prodl	equ	0xFF3
  6086                           intcon	equ	0xFF2
  6087                           postinc0	equ	0xFEE
  6088                           wreg	equ	0xFE8
  6089                           postdec1	equ	0xFE5
  6090                           fsr1l	equ	0xFE1
  6091                           indf2	equ	0xFDF
  6092                           postinc2	equ	0xFDE
  6093                           postdec2	equ	0xFDD
  6094                           plusw2	equ	0xFDB
  6095                           fsr2h	equ	0xFDA
  6096                           fsr2l	equ	0xFD9
  6097                           status	equ	0xFD8
  6098                           
  6099 ;; *************** function _Temp_Fault *****************
  6100 ;; Defined at:
  6101 ;;		line 16 in file "Tempeture.c"
  6102 ;; Parameters:    Size  Location     Type
  6103 ;;		None
  6104 ;; Auto vars:     Size  Location     Type
  6105 ;;  i               2   42[COMRAM] int 
  6106 ;;  fault           1   41[COMRAM] unsigned char 
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  1    wreg      unsigned char 
  6109 ;; Registers used:
  6110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6116 ;;      Params:         0       0       0       0       0       0       0
  6117 ;;      Locals:         3       0       0       0       0       0       0
  6118 ;;      Temps:          0       0       0       0       0       0       0
  6119 ;;      Totals:         3       0       0       0       0       0       0
  6120 ;;Total ram usage:        3 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; Hardware stack levels required when called:    5
  6123 ;; This function calls:
  6124 ;;		___ftge
  6125 ;;		___wmul
  6126 ;; This function is called by:
  6127 ;;		_main
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           	psect	text25
  6132  00348A                     __ptext25:
  6133                           	opt stack 0
  6134  00348A                     _Temp_Fault:
  6135                           	opt stack 25
  6136                           
  6137                           ;Tempeture.c: 19: char fault = 0;
  6138                           
  6139                           ;incstack = 0
  6140  00348A  0E00               	movlw	0
  6141  00348C  6E2A               	movwf	Temp_Fault@fault,c
  6142                           
  6143                           ;Tempeture.c: 20: for(int i = 0;i<9;i++)
  6144  00348E  0E00               	movlw	0
  6145  003490  6E2C               	movwf	Temp_Fault@i+1,c
  6146  003492  0E00               	movlw	0
  6147  003494  6E2B               	movwf	Temp_Fault@i,c
  6148  003496                     l5307:
  6149  003496  BE2C               	btfsc	Temp_Fault@i+1,7,c
  6150  003498  D008               	goto	l5311
  6151  00349A  502C               	movf	Temp_Fault@i+1,w,c
  6152  00349C  E12D               	bnz	l341
  6153  00349E  0E09               	movlw	9
  6154  0034A0  5C2B               	subwf	Temp_Fault@i,w,c
  6155  0034A2  B0D8               	btfsc	status,0,c
  6156  0034A4  0012               	return	
  6157  0034A6  D001               	goto	l5311
  6158  0034A8  0012               	return	
  6159  0034AA                     l5311:
  6160                           
  6161                           ;Tempeture.c: 21: {
  6162                           ;Tempeture.c: 22: if (60.5 > Temp_DegF[i])
  6163  0034AA  C02B  F01B         	movff	Temp_Fault@i,___wmul@multiplier
  6164  0034AE  C02C  F01C         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  6165  0034B2  0E00               	movlw	0
  6166  0034B4  6E1E               	movwf	___wmul@multiplicand+1,c
  6167  0034B6  0E03               	movlw	3
  6168  0034B8  6E1D               	movwf	___wmul@multiplicand,c
  6169  0034BA  EC3F  F01D         	call	___wmul	;wreg free
  6170  0034BE  0EBE               	movlw	low _Temp_DegF
  6171  0034C0  241B               	addwf	?___wmul,w,c
  6172  0034C2  6ED9               	movwf	fsr2l,c
  6173  0034C4  0E01               	movlw	high _Temp_DegF
  6174  0034C6  201C               	addwfc	?___wmul+1,w,c
  6175  0034C8  6EDA               	movwf	fsr2h,c
  6176  0034CA  CFDE F021          	movff	postinc2,___ftge@ff1
  6177  0034CE  CFDE F022          	movff	postinc2,___ftge@ff1+1
  6178  0034D2  CFDD F023          	movff	postdec2,___ftge@ff1+2
  6179  0034D6  0E00               	movlw	0
  6180  0034D8  6E24               	movwf	___ftge@ff2,c
  6181  0034DA  0E72               	movlw	114
  6182  0034DC  6E25               	movwf	___ftge@ff2+1,c
  6183  0034DE  0E42               	movlw	66
  6184  0034E0  6E26               	movwf	___ftge@ff2+2,c
  6185  0034E2  EC97  F018         	call	___ftge	;wreg free
  6186  0034E6  B0D8               	btfsc	status,0,c
  6187  0034E8  D003               	goto	l5315
  6188                           
  6189                           ;Tempeture.c: 23: {
  6190                           ;Tempeture.c: 24: fault = 1;
  6191  0034EA  0E01               	movlw	1
  6192  0034EC  6E2A               	movwf	Temp_Fault@fault,c
  6193  0034EE  D000               	goto	l5315
  6194  0034F0                     l5315:
  6195  0034F0  4A2B               	infsnz	Temp_Fault@i,f,c
  6196  0034F2  2A2C               	incf	Temp_Fault@i+1,f,c
  6197  0034F4  D7D0               	goto	l5307
  6198  0034F6  0012               	return	
  6199  0034F8                     l341:
  6200  0034F8  0012               	return		;funcret
  6201  0034FA                     __end_of_Temp_Fault:
  6202                           	opt stack 0
  6203                           tosu	equ	0xFFF
  6204                           tosh	equ	0xFFE
  6205                           tosl	equ	0xFFD
  6206                           pclath	equ	0xFFA
  6207                           tblptru	equ	0xFF8
  6208                           tblptrh	equ	0xFF7
  6209                           tblptrl	equ	0xFF6
  6210                           tablat	equ	0xFF5
  6211                           prodh	equ	0xFF4
  6212                           prodl	equ	0xFF3
  6213                           intcon	equ	0xFF2
  6214                           postinc0	equ	0xFEE
  6215                           wreg	equ	0xFE8
  6216                           postdec1	equ	0xFE5
  6217                           fsr1l	equ	0xFE1
  6218                           indf2	equ	0xFDF
  6219                           postinc2	equ	0xFDE
  6220                           postdec2	equ	0xFDD
  6221                           plusw2	equ	0xFDB
  6222                           fsr2h	equ	0xFDA
  6223                           fsr2l	equ	0xFD9
  6224                           status	equ	0xFD8
  6225                           
  6226 ;; *************** function _Temp_Convert *****************
  6227 ;; Defined at:
  6228 ;;		line 68 in file "Tempeture.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;		None
  6231 ;; Auto vars:     Size  Location     Type
  6232 ;;  steinhart       3    6[BANK1 ] float 
  6233 ;;  x               2    4[BANK1 ] int 
  6234 ;; Return value:  Size  Location     Type
  6235 ;;		None               void
  6236 ;; Registers used:
  6237 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6238 ;; Tracked objects:
  6239 ;;		On entry : 0/0
  6240 ;;		On exit  : 0/0
  6241 ;;		Unchanged: 0/0
  6242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6243 ;;      Params:         0       0       0       0       0       0       0
  6244 ;;      Locals:         0       0       9       0       0       0       0
  6245 ;;      Temps:          0       0       0       0       0       0       0
  6246 ;;      Totals:         0       0       9       0       0       0       0
  6247 ;;Total ram usage:        9 bytes
  6248 ;; Hardware stack levels used:    1
  6249 ;; Hardware stack levels required when called:    8
  6250 ;; This function calls:
  6251 ;;		_Temp_Filter
  6252 ;;		___awdiv
  6253 ;;		___awtoft
  6254 ;;		___ftadd
  6255 ;;		___ftdiv
  6256 ;;		___ftmul
  6257 ;;		___ftsub
  6258 ;;		___wmul
  6259 ;;		_log
  6260 ;; This function is called by:
  6261 ;;		_main
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           	psect	text26
  6266  00182A                     __ptext26:
  6267                           	opt stack 0
  6268  00182A                     _Temp_Convert:
  6269                           	opt stack 22
  6270                           
  6271                           ;Tempeture.c: 70: int x;
  6272                           ;Tempeture.c: 71: float steinhart;
  6273                           ;Tempeture.c: 72: for(x = 0; x < 10; x++)
  6274                           
  6275                           ;incstack = 0
  6276  00182A  0E00               	movlw	0
  6277  00182C  0101               	movlb	1	; () banked
  6278  00182E  6FE1               	movwf	(Temp_Convert@x+1)& (0+255),b
  6279  001830  0E00               	movlw	0
  6280  001832  6FE0               	movwf	Temp_Convert@x& (0+255),b
  6281                           
  6282                           ; BSR set to: 1
  6283  001834  0101               	movlb	1	; () banked
  6284  001836  BFE1               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  6285  001838  D00A               	goto	l5325
  6286  00183A  0101               	movlb	1	; () banked
  6287  00183C  51E1               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6288  00183E  E106               	bnz	u5910
  6289  001840  0E0A               	movlw	10
  6290  001842  0101               	movlb	1	; () banked
  6291  001844  5DE0               	subwf	Temp_Convert@x& (0+255),w,b
  6292  001846  B0D8               	btfsc	status,0,c
  6293  001848  D0F5               	goto	l5349
  6294  00184A  D001               	goto	l5325
  6295  00184C                     u5910:
  6296                           
  6297                           ; BSR set to: 1
  6298  00184C  D0F3               	goto	l5349
  6299  00184E                     l5325:
  6300                           
  6301                           ; BSR set to: 1
  6302                           ;Tempeture.c: 73: {
  6303                           ;Tempeture.c: 74: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6304  00184E  90D8               	bcf	status,0,c
  6305  001850  0101               	movlb	1	; () banked
  6306  001852  35E0               	rlcf	Temp_Convert@x& (0+255),w,b
  6307  001854  6ED9               	movwf	fsr2l,c
  6308  001856  0101               	movlb	1	; () banked
  6309  001858  35E1               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  6310  00185A  6EDA               	movwf	fsr2h,c
  6311  00185C  0E9C               	movlw	low _Temp_Adc
  6312  00185E  26D9               	addwf	fsr2l,f,c
  6313  001860  0E00               	movlw	high _Temp_Adc
  6314  001862  22DA               	addwfc	fsr2h,f,c
  6315  001864  CFDE F01D          	movff	postinc2,___awdiv@divisor
  6316  001868  CFDD F01E          	movff	postdec2,___awdiv@divisor+1
  6317  00186C  0E03               	movlw	3
  6318  00186E  6E1C               	movwf	___awdiv@dividend+1,c
  6319  001870  681B               	setf	___awdiv@dividend,c
  6320  001872  EC4C  F018         	call	___awdiv	;wreg free
  6321  001876  0EFF               	movlw	255
  6322  001878  241B               	addwf	?___awdiv,w,c
  6323  00187A  0101               	movlb	1	; () banked
  6324  00187C  6FDC               	movwf	_Temp_Convert$2200& (0+255),b
  6325  00187E  0EFF               	movlw	255
  6326  001880  201C               	addwfc	?___awdiv+1,w,c
  6327  001882  0101               	movlb	1	; () banked
  6328  001884  6FDD               	movwf	(_Temp_Convert$2200+1)& (0+255),b
  6329                           
  6330                           ; BSR set to: 1
  6331                           ;Tempeture.c: 73: {
  6332                           ;Tempeture.c: 74: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6333  001886  C1DC  F01D         	movff	_Temp_Convert$2200,___awdiv@divisor
  6334  00188A  C1DD  F01E         	movff	_Temp_Convert$2200+1,___awdiv@divisor+1
  6335  00188E  0E27               	movlw	39
  6336  001890  6E1C               	movwf	___awdiv@dividend+1,c
  6337  001892  0E10               	movlw	16
  6338  001894  6E1B               	movwf	___awdiv@dividend,c
  6339  001896  EC4C  F018         	call	___awdiv	;wreg free
  6340  00189A  C01B  F1DE         	movff	?___awdiv,_Temp_Convert$2201
  6341  00189E  C01C  F1DF         	movff	?___awdiv+1,_Temp_Convert$2201+1
  6342                           
  6343                           ;Tempeture.c: 73: {
  6344                           ;Tempeture.c: 74: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6345  0018A2  0E27               	movlw	39
  6346  0018A4  6E1E               	movwf	___awdiv@divisor+1,c
  6347  0018A6  0E10               	movlw	16
  6348  0018A8  6E1D               	movwf	___awdiv@divisor,c
  6349  0018AA  C1DE  F01B         	movff	_Temp_Convert$2201,___awdiv@dividend
  6350  0018AE  C1DF  F01C         	movff	_Temp_Convert$2201+1,___awdiv@dividend+1
  6351  0018B2  EC4C  F018         	call	___awdiv	;wreg free
  6352  0018B6  C01B  F023         	movff	?___awdiv,___awtoft@c
  6353  0018BA  C01C  F024         	movff	?___awdiv+1,___awtoft@c+1
  6354  0018BE  EC41  F01C         	call	___awtoft	;wreg free
  6355  0018C2  C023  F1E2         	movff	?___awtoft,Temp_Convert@steinhart
  6356  0018C6  C024  F1E3         	movff	?___awtoft+1,Temp_Convert@steinhart+1
  6357  0018CA  C025  F1E4         	movff	?___awtoft+2,Temp_Convert@steinhart+2
  6358                           
  6359                           ;Tempeture.c: 75: steinhart = log(steinhart);
  6360  0018CE  C1E2  F0F7         	movff	Temp_Convert@steinhart,log@x
  6361  0018D2  C1E3  F0F8         	movff	Temp_Convert@steinhart+1,log@x+1
  6362  0018D6  C1E4  F0F9         	movff	Temp_Convert@steinhart+2,log@x+2
  6363  0018DA  EC07  F012         	call	_log	;wreg free
  6364  0018DE  C0F7  F1E2         	movff	?_log,Temp_Convert@steinhart
  6365  0018E2  C0F8  F1E3         	movff	?_log+1,Temp_Convert@steinhart+1
  6366  0018E6  C0F9  F1E4         	movff	?_log+2,Temp_Convert@steinhart+2
  6367                           
  6368                           ;Tempeture.c: 76: steinhart /= 3950;
  6369  0018EA  C1E2  F0C1         	movff	Temp_Convert@steinhart,___ftdiv@f1
  6370  0018EE  C1E3  F0C2         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  6371  0018F2  C1E4  F0C3         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  6372  0018F6  0EE0               	movlw	224
  6373  0018F8  0100               	movlb	0	; () banked
  6374  0018FA  6FC4               	movwf	___ftdiv@f2& (0+255),b
  6375  0018FC  0E76               	movlw	118
  6376  0018FE  0100               	movlb	0	; () banked
  6377  001900  6FC5               	movwf	(___ftdiv@f2+1)& (0+255),b
  6378  001902  0E45               	movlw	69
  6379  001904  0100               	movlb	0	; () banked
  6380  001906  6FC6               	movwf	(___ftdiv@f2+2)& (0+255),b
  6381  001908  EC5E  F011         	call	___ftdiv	;wreg free
  6382  00190C  C0C1  F1E2         	movff	?___ftdiv,Temp_Convert@steinhart
  6383  001910  C0C2  F1E3         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6384  001914  C0C3  F1E4         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6385                           
  6386                           ;Tempeture.c: 77: steinhart += 1.0 / (25 + 273.15);
  6387  001918  C1E2  F0DF         	movff	Temp_Convert@steinhart,___ftadd@f1
  6388  00191C  C1E3  F0E0         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  6389  001920  C1E4  F0E1         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  6390  001924  0ECF               	movlw	207
  6391  001926  0100               	movlb	0	; () banked
  6392  001928  6FE2               	movwf	___ftadd@f2& (0+255),b
  6393  00192A  0E5B               	movlw	91
  6394  00192C  0100               	movlb	0	; () banked
  6395  00192E  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  6396  001930  0E3B               	movlw	59
  6397  001932  0100               	movlb	0	; () banked
  6398  001934  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  6399  001936  ECD6  F00A         	call	___ftadd	;wreg free
  6400  00193A  C0DF  F1E2         	movff	?___ftadd,Temp_Convert@steinhart
  6401  00193E  C0E0  F1E3         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6402  001942  C0E1  F1E4         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6403                           
  6404                           ;Tempeture.c: 78: steinhart = 1.0 / steinhart;
  6405  001946  0E00               	movlw	0
  6406  001948  0100               	movlb	0	; () banked
  6407  00194A  6FC1               	movwf	___ftdiv@f1& (0+255),b
  6408  00194C  0E80               	movlw	128
  6409  00194E  0100               	movlb	0	; () banked
  6410  001950  6FC2               	movwf	(___ftdiv@f1+1)& (0+255),b
  6411  001952  0E3F               	movlw	63
  6412  001954  0100               	movlb	0	; () banked
  6413  001956  6FC3               	movwf	(___ftdiv@f1+2)& (0+255),b
  6414  001958  C1E2  F0C4         	movff	Temp_Convert@steinhart,___ftdiv@f2
  6415  00195C  C1E3  F0C5         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  6416  001960  C1E4  F0C6         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  6417  001964  EC5E  F011         	call	___ftdiv	;wreg free
  6418  001968  C0C1  F1E2         	movff	?___ftdiv,Temp_Convert@steinhart
  6419  00196C  C0C2  F1E3         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6420  001970  C0C3  F1E4         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6421                           
  6422                           ;Tempeture.c: 79: steinhart -= 273.15;
  6423  001974  C1E2  F0EB         	movff	Temp_Convert@steinhart,___ftsub@f1
  6424  001978  C1E3  F0EC         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  6425  00197C  C1E4  F0ED         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  6426  001980  0E93               	movlw	147
  6427  001982  0100               	movlb	0	; () banked
  6428  001984  6FEE               	movwf	___ftsub@f2& (0+255),b
  6429  001986  0E88               	movlw	136
  6430  001988  0100               	movlb	0	; () banked
  6431  00198A  6FEF               	movwf	(___ftsub@f2+1)& (0+255),b
  6432  00198C  0E43               	movlw	67
  6433  00198E  0100               	movlb	0	; () banked
  6434  001990  6FF0               	movwf	(___ftsub@f2+2)& (0+255),b
  6435  001992  EC8F  F01B         	call	___ftsub	;wreg free
  6436  001996  C0EB  F1E2         	movff	?___ftsub,Temp_Convert@steinhart
  6437  00199A  C0EC  F1E3         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  6438  00199E  C0ED  F1E4         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  6439                           
  6440                           ;Tempeture.c: 80: steinhart = (steinhart*1.800) + 32.00;
  6441  0019A2  0E66               	movlw	102
  6442  0019A4  0100               	movlb	0	; () banked
  6443  0019A6  6FD3               	movwf	___ftmul@f2& (0+255),b
  6444  0019A8  0EE6               	movlw	230
  6445  0019AA  0100               	movlb	0	; () banked
  6446  0019AC  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  6447  0019AE  0E3F               	movlw	63
  6448  0019B0  0100               	movlb	0	; () banked
  6449  0019B2  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  6450  0019B4  C1E2  F0D0         	movff	Temp_Convert@steinhart,___ftmul@f1
  6451  0019B8  C1E3  F0D1         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  6452  0019BC  C1E4  F0D2         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  6453  0019C0  EC4A  F00F         	call	___ftmul	;wreg free
  6454  0019C4  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6455  0019C8  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6456  0019CC  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6457  0019D0  0E00               	movlw	0
  6458  0019D2  0100               	movlb	0	; () banked
  6459  0019D4  6FE2               	movwf	___ftadd@f2& (0+255),b
  6460  0019D6  0E00               	movlw	0
  6461  0019D8  0100               	movlb	0	; () banked
  6462  0019DA  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  6463  0019DC  0E42               	movlw	66
  6464  0019DE  0100               	movlb	0	; () banked
  6465  0019E0  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  6466  0019E2  ECD6  F00A         	call	___ftadd	;wreg free
  6467  0019E6  C0DF  F1E2         	movff	?___ftadd,Temp_Convert@steinhart
  6468  0019EA  C0E0  F1E3         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6469  0019EE  C0E1  F1E4         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6470                           
  6471                           ;Tempeture.c: 81: TmpTemp_DegF[x] = steinhart;
  6472  0019F2  C1E0  F01B         	movff	Temp_Convert@x,___wmul@multiplier
  6473  0019F6  C1E1  F01C         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  6474  0019FA  0E00               	movlw	0
  6475  0019FC  6E1E               	movwf	___wmul@multiplicand+1,c
  6476  0019FE  0E03               	movlw	3
  6477  001A00  6E1D               	movwf	___wmul@multiplicand,c
  6478  001A02  EC3F  F01D         	call	___wmul	;wreg free
  6479  001A06  0E82               	movlw	low _TmpTemp_DegF
  6480  001A08  241B               	addwf	?___wmul,w,c
  6481  001A0A  6ED9               	movwf	fsr2l,c
  6482  001A0C  0E01               	movlw	high _TmpTemp_DegF
  6483  001A0E  201C               	addwfc	?___wmul+1,w,c
  6484  001A10  6EDA               	movwf	fsr2h,c
  6485  001A12  C1E2  FFDE         	movff	Temp_Convert@steinhart,postinc2
  6486  001A16  C1E3  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  6487  001A1A  C1E4  FFDE         	movff	Temp_Convert@steinhart+2,postinc2
  6488  001A1E  0101               	movlb	1	; () banked
  6489  001A20  4BE0               	infsnz	Temp_Convert@x& (0+255),f,b
  6490  001A22  2BE1               	incf	(Temp_Convert@x+1)& (0+255),f,b
  6491                           
  6492                           ; BSR set to: 1
  6493  001A24  0101               	movlb	1	; () banked
  6494  001A26  BFE1               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  6495  001A28  D712               	goto	l5325
  6496  001A2A  0101               	movlb	1	; () banked
  6497  001A2C  51E1               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6498  001A2E  E102               	bnz	l5349
  6499  001A30  D707               	goto	L1
  6500  001A32  D000               	goto	l5349
  6501  001A34                     l5349:
  6502                           
  6503                           ; BSR set to: 1
  6504                           ;Tempeture.c: 82: }
  6505                           ;Tempeture.c: 83: Temp_Filter();
  6506  001A34  EC1D  F00D         	call	_Temp_Filter	;wreg free
  6507  001A38  0012               	return		;funcret
  6508  001A3A                     __end_of_Temp_Convert:
  6509                           	opt stack 0
  6510                           tosu	equ	0xFFF
  6511                           tosh	equ	0xFFE
  6512                           tosl	equ	0xFFD
  6513                           pclath	equ	0xFFA
  6514                           tblptru	equ	0xFF8
  6515                           tblptrh	equ	0xFF7
  6516                           tblptrl	equ	0xFF6
  6517                           tablat	equ	0xFF5
  6518                           prodh	equ	0xFF4
  6519                           prodl	equ	0xFF3
  6520                           intcon	equ	0xFF2
  6521                           postinc0	equ	0xFEE
  6522                           wreg	equ	0xFE8
  6523                           postdec1	equ	0xFE5
  6524                           fsr1l	equ	0xFE1
  6525                           indf2	equ	0xFDF
  6526                           postinc2	equ	0xFDE
  6527                           postdec2	equ	0xFDD
  6528                           plusw2	equ	0xFDB
  6529                           fsr2h	equ	0xFDA
  6530                           fsr2l	equ	0xFD9
  6531                           status	equ	0xFD8
  6532                           
  6533 ;; *************** function _log *****************
  6534 ;; Defined at:
  6535 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;  x               3   54[BANK0 ] int 
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;  exponent        2   57[BANK0 ] int 
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  3   54[BANK0 ] int 
  6542 ;; Registers used:
  6543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6549 ;;      Params:         0       3       0       0       0       0       0
  6550 ;;      Locals:         0       2       0       0       0       0       0
  6551 ;;      Temps:          0       0       0       0       0       0       0
  6552 ;;      Totals:         0       5       0       0       0       0       0
  6553 ;;Total ram usage:        5 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    7
  6556 ;; This function calls:
  6557 ;;		___awtoft
  6558 ;;		___ftadd
  6559 ;;		___ftmul
  6560 ;;		_eval_poly
  6561 ;;		_frexp
  6562 ;; This function is called by:
  6563 ;;		_Temp_Convert
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           	psect	text27
  6568  00240E                     __ptext27:
  6569                           	opt stack 0
  6570  00240E                     _log:
  6571                           	opt stack 22
  6572                           
  6573                           ;incstack = 0
  6574  00240E  0100               	movlb	0	; () banked
  6575  002410  AFF9               	btfss	(log@x+2)& (0+255),7,b
  6576  002412  D00F               	goto	l4979
  6577                           
  6578                           ; BSR set to: 0
  6579  002414  0E00               	movlw	0
  6580  002416  0100               	movlb	0	; () banked
  6581  002418  6F95               	movwf	(_errno+1)& (0+255),b
  6582  00241A  0E21               	movlw	33
  6583  00241C  6F94               	movwf	_errno& (0+255),b
  6584  00241E  0E00               	movlw	0
  6585  002420  0100               	movlb	0	; () banked
  6586  002422  6FF7               	movwf	?_log& (0+255),b
  6587  002424  0E00               	movlw	0
  6588  002426  0100               	movlb	0	; () banked
  6589  002428  6FF8               	movwf	(?_log+1)& (0+255),b
  6590  00242A  0E00               	movlw	0
  6591  00242C  0100               	movlb	0	; () banked
  6592  00242E  6FF9               	movwf	(?_log+2)& (0+255),b
  6593                           
  6594                           ; BSR set to: 0
  6595  002430  0012               	return	
  6596  002432                     l4979:
  6597                           
  6598                           ; BSR set to: 0
  6599  002432  0100               	movlb	0	; () banked
  6600  002434  51F7               	movf	log@x& (0+255),w,b
  6601  002436  0100               	movlb	0	; () banked
  6602  002438  11F8               	iorwf	(log@x+1)& (0+255),w,b
  6603  00243A  0100               	movlb	0	; () banked
  6604  00243C  11F9               	iorwf	(log@x+2)& (0+255),w,b
  6605  00243E  A4D8               	btfss	status,2,c
  6606  002440  D00F               	goto	l4985
  6607                           
  6608                           ; BSR set to: 0
  6609  002442  0E00               	movlw	0
  6610  002444  0100               	movlb	0	; () banked
  6611  002446  6F95               	movwf	(_errno+1)& (0+255),b
  6612  002448  0E22               	movlw	34
  6613  00244A  6F94               	movwf	_errno& (0+255),b
  6614  00244C  0E00               	movlw	0
  6615  00244E  0100               	movlb	0	; () banked
  6616  002450  6FF7               	movwf	?_log& (0+255),b
  6617  002452  0E00               	movlw	0
  6618  002454  0100               	movlb	0	; () banked
  6619  002456  6FF8               	movwf	(?_log+1)& (0+255),b
  6620  002458  0E00               	movlw	0
  6621  00245A  0100               	movlb	0	; () banked
  6622  00245C  6FF9               	movwf	(?_log+2)& (0+255),b
  6623                           
  6624                           ; BSR set to: 0
  6625  00245E  0012               	return	
  6626  002460                     l4985:
  6627                           
  6628                           ; BSR set to: 0
  6629  002460  0E00               	movlw	0
  6630  002462  0100               	movlb	0	; () banked
  6631  002464  6FD3               	movwf	___ftmul@f2& (0+255),b
  6632  002466  0E00               	movlw	0
  6633  002468  0100               	movlb	0	; () banked
  6634  00246A  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  6635  00246C  0E40               	movlw	64
  6636  00246E  0100               	movlb	0	; () banked
  6637  002470  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  6638  002472  0EFA               	movlw	low log@exponent
  6639  002474  6E1E               	movwf	frexp@eptr,c
  6640  002476  0E00               	movlw	high log@exponent
  6641  002478  6E1F               	movwf	frexp@eptr+1,c
  6642  00247A  C0F7  F01B         	movff	log@x,frexp@value
  6643  00247E  C0F8  F01C         	movff	log@x+1,frexp@value+1
  6644  002482  C0F9  F01D         	movff	log@x+2,frexp@value+2
  6645  002486  EC76  F019         	call	_frexp	;wreg free
  6646  00248A  C01B  F0D0         	movff	?_frexp,___ftmul@f1
  6647  00248E  C01C  F0D1         	movff	?_frexp+1,___ftmul@f1+1
  6648  002492  C01D  F0D2         	movff	?_frexp+2,___ftmul@f1+2
  6649  002496  EC4A  F00F         	call	___ftmul	;wreg free
  6650  00249A  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6651  00249E  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6652  0024A2  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6653  0024A6  0E00               	movlw	0
  6654  0024A8  0100               	movlb	0	; () banked
  6655  0024AA  6FE2               	movwf	___ftadd@f2& (0+255),b
  6656  0024AC  0E80               	movlw	128
  6657  0024AE  0100               	movlb	0	; () banked
  6658  0024B0  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  6659  0024B2  0EBF               	movlw	191
  6660  0024B4  0100               	movlb	0	; () banked
  6661  0024B6  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  6662  0024B8  ECD6  F00A         	call	___ftadd	;wreg free
  6663  0024BC  C0DF  F0F7         	movff	?___ftadd,log@x
  6664  0024C0  C0E0  F0F8         	movff	?___ftadd+1,log@x+1
  6665  0024C4  C0E1  F0F9         	movff	?___ftadd+2,log@x+2
  6666  0024C8  0100               	movlb	0	; () banked
  6667  0024CA  07FA               	decf	log@exponent& (0+255),f,b
  6668  0024CC  A0D8               	btfss	status,0,c
  6669  0024CE  07FB               	decf	(log@exponent+1)& (0+255),f,b
  6670                           
  6671                           ; BSR set to: 0
  6672  0024D0  C0F7  F0EB         	movff	log@x,eval_poly@x
  6673  0024D4  C0F8  F0EC         	movff	log@x+1,eval_poly@x+1
  6674  0024D8  C0F9  F0ED         	movff	log@x+2,eval_poly@x+2
  6675  0024DC  0E01               	movlw	low log@coeff
  6676  0024DE  0100               	movlb	0	; () banked
  6677  0024E0  6FEE               	movwf	eval_poly@d& (0+255),b
  6678  0024E2  0E06               	movlw	high log@coeff
  6679  0024E4  0100               	movlb	0	; () banked
  6680  0024E6  6FEF               	movwf	(eval_poly@d+1)& (0+255),b
  6681  0024E8  0E00               	movlw	0
  6682  0024EA  0100               	movlb	0	; () banked
  6683  0024EC  6FF1               	movwf	(eval_poly@n+1)& (0+255),b
  6684  0024EE  0E08               	movlw	8
  6685  0024F0  6FF0               	movwf	eval_poly@n& (0+255),b
  6686  0024F2  EC46  F016         	call	_eval_poly	;wreg free
  6687  0024F6  C0EB  F0F7         	movff	?_eval_poly,log@x
  6688  0024FA  C0EC  F0F8         	movff	?_eval_poly+1,log@x+1
  6689  0024FE  C0ED  F0F9         	movff	?_eval_poly+2,log@x+2
  6690  002502  0E72               	movlw	114
  6691  002504  0100               	movlb	0	; () banked
  6692  002506  6FD3               	movwf	___ftmul@f2& (0+255),b
  6693  002508  0E31               	movlw	49
  6694  00250A  0100               	movlb	0	; () banked
  6695  00250C  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  6696  00250E  0E3F               	movlw	63
  6697  002510  0100               	movlb	0	; () banked
  6698  002512  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  6699  002514  C0FA  F023         	movff	log@exponent,___awtoft@c
  6700  002518  C0FB  F024         	movff	log@exponent+1,___awtoft@c+1
  6701  00251C  EC41  F01C         	call	___awtoft	;wreg free
  6702  002520  C023  F0D0         	movff	?___awtoft,___ftmul@f1
  6703  002524  C024  F0D1         	movff	?___awtoft+1,___ftmul@f1+1
  6704  002528  C025  F0D2         	movff	?___awtoft+2,___ftmul@f1+2
  6705  00252C  EC4A  F00F         	call	___ftmul	;wreg free
  6706  002530  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6707  002534  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6708  002538  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6709  00253C  C0F7  F0E2         	movff	log@x,___ftadd@f2
  6710  002540  C0F8  F0E3         	movff	log@x+1,___ftadd@f2+1
  6711  002544  C0F9  F0E4         	movff	log@x+2,___ftadd@f2+2
  6712  002548  ECD6  F00A         	call	___ftadd	;wreg free
  6713  00254C  C0DF  F0F7         	movff	?___ftadd,?_log
  6714  002550  C0E0  F0F8         	movff	?___ftadd+1,?_log+1
  6715  002554  C0E1  F0F9         	movff	?___ftadd+2,?_log+2
  6716  002558  0012               	return	
  6717  00255A  0012               	return		;funcret
  6718  00255C                     __end_of_log:
  6719                           	opt stack 0
  6720                           tosu	equ	0xFFF
  6721                           tosh	equ	0xFFE
  6722                           tosl	equ	0xFFD
  6723                           pclath	equ	0xFFA
  6724                           tblptru	equ	0xFF8
  6725                           tblptrh	equ	0xFF7
  6726                           tblptrl	equ	0xFF6
  6727                           tablat	equ	0xFF5
  6728                           prodh	equ	0xFF4
  6729                           prodl	equ	0xFF3
  6730                           intcon	equ	0xFF2
  6731                           postinc0	equ	0xFEE
  6732                           wreg	equ	0xFE8
  6733                           postdec1	equ	0xFE5
  6734                           fsr1l	equ	0xFE1
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           plusw2	equ	0xFDB
  6739                           fsr2h	equ	0xFDA
  6740                           fsr2l	equ	0xFD9
  6741                           status	equ	0xFD8
  6742                           
  6743 ;; *************** function _frexp *****************
  6744 ;; Defined at:
  6745 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;  value           3   26[COMRAM] int 
  6748 ;;  eptr            2   29[COMRAM] PTR int 
  6749 ;;		 -> log@exponent(2), 
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;		None
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  3   26[COMRAM] PTR int 
  6754 ;; Registers used:
  6755 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6761 ;;      Params:         5       0       0       0       0       0       0
  6762 ;;      Locals:         0       0       0       0       0       0       0
  6763 ;;      Temps:          2       0       0       0       0       0       0
  6764 ;;      Totals:         7       0       0       0       0       0       0
  6765 ;;Total ram usage:        7 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    4
  6768 ;; This function calls:
  6769 ;;		Nothing
  6770 ;; This function is called by:
  6771 ;;		_log
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text28
  6776  0032EC                     __ptext28:
  6777                           	opt stack 0
  6778  0032EC                     _frexp:
  6779                           	opt stack 24
  6780                           
  6781                           ;incstack = 0
  6782  0032EC  501B               	movf	frexp@value,w,c
  6783  0032EE  101C               	iorwf	frexp@value+1,w,c
  6784  0032F0  101D               	iorwf	frexp@value+2,w,c
  6785  0032F2  A4D8               	btfss	status,2,c
  6786  0032F4  D00F               	goto	l4891
  6787  0032F6  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6788  0032FA  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6789  0032FE  0E00               	movlw	0
  6790  003300  6EDE               	movwf	postinc2,c
  6791  003302  0E00               	movlw	0
  6792  003304  6EDD               	movwf	postdec2,c
  6793  003306  0E00               	movlw	0
  6794  003308  6E1B               	movwf	?_frexp,c
  6795  00330A  0E00               	movlw	0
  6796  00330C  6E1C               	movwf	?_frexp+1,c
  6797  00330E  0E00               	movlw	0
  6798  003310  6E1D               	movwf	?_frexp+2,c
  6799  003312  0012               	return	
  6800  003314                     l4891:
  6801  003314  501D               	movf	frexp@value+2,w,c
  6802  003316  0B7F               	andlw	127
  6803  003318  6E20               	movwf	??_frexp& (0+255),c
  6804  00331A  6A21               	clrf	(??_frexp+1)& (0+255),c
  6805  00331C  90D8               	bcf	status,0,c
  6806  00331E  3620               	rlcf	??_frexp,f,c
  6807  003320  3621               	rlcf	??_frexp+1,f,c
  6808  003322  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6809  003326  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6810  00332A  C020  FFDE         	movff	??_frexp,postinc2
  6811  00332E  C021  FFDD         	movff	??_frexp+1,postdec2
  6812  003332  AE1C               	btfss	frexp@value+1,7,c
  6813  003334  D003               	goto	u5050
  6814  003336  6A20               	clrf	??_frexp& (0+255),c
  6815  003338  2A20               	incf	??_frexp& (0+255),f,c
  6816  00333A  D001               	goto	u5058
  6817  00333C                     u5050:
  6818  00333C  6A20               	clrf	??_frexp& (0+255),c
  6819  00333E                     u5058:
  6820  00333E  5020               	movf	??_frexp,w,c
  6821  003340  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6822  003344  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6823  003348  12DE               	iorwf	postinc2,f,c
  6824  00334A  0E00               	movlw	0
  6825  00334C  12DD               	iorwf	postdec2,f,c
  6826  00334E  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6827  003352  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6828  003356  0E82               	movlw	130
  6829  003358  26DE               	addwf	postinc2,f,c
  6830  00335A  0EFF               	movlw	255
  6831  00335C  22DD               	addwfc	postdec2,f,c
  6832  00335E  801D               	bsf	frexp@value+2,0,c
  6833  003360  821D               	bsf	frexp@value+2,1,c
  6834  003362  841D               	bsf	frexp@value+2,2,c
  6835  003364  861D               	bsf	frexp@value+2,3,c
  6836  003366  881D               	bsf	frexp@value+2,4,c
  6837  003368  8A1D               	bsf	frexp@value+2,5,c
  6838  00336A  9C1D               	bcf	frexp@value+2,6,c
  6839  00336C  9E1C               	bcf	frexp@value+1,7,c
  6840  00336E  C01B  F01B         	movff	frexp@value,?_frexp
  6841  003372  C01C  F01C         	movff	frexp@value+1,?_frexp+1
  6842  003376  C01D  F01D         	movff	frexp@value+2,?_frexp+2
  6843  00337A  0012               	return	
  6844  00337C  0012               	return		;funcret
  6845  00337E                     __end_of_frexp:
  6846                           	opt stack 0
  6847                           tosu	equ	0xFFF
  6848                           tosh	equ	0xFFE
  6849                           tosl	equ	0xFFD
  6850                           pclath	equ	0xFFA
  6851                           tblptru	equ	0xFF8
  6852                           tblptrh	equ	0xFF7
  6853                           tblptrl	equ	0xFF6
  6854                           tablat	equ	0xFF5
  6855                           prodh	equ	0xFF4
  6856                           prodl	equ	0xFF3
  6857                           intcon	equ	0xFF2
  6858                           postinc0	equ	0xFEE
  6859                           wreg	equ	0xFE8
  6860                           postdec1	equ	0xFE5
  6861                           fsr1l	equ	0xFE1
  6862                           indf2	equ	0xFDF
  6863                           postinc2	equ	0xFDE
  6864                           postdec2	equ	0xFDD
  6865                           plusw2	equ	0xFDB
  6866                           fsr2h	equ	0xFDA
  6867                           fsr2l	equ	0xFD9
  6868                           status	equ	0xFD8
  6869                           
  6870 ;; *************** function _eval_poly *****************
  6871 ;; Defined at:
  6872 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;  x               3   42[BANK0 ] PTR int 
  6875 ;;  d               2   45[BANK0 ] PTR const 
  6876 ;;		 -> log@coeff(27), 
  6877 ;;  n               2   47[BANK0 ] int 
  6878 ;; Auto vars:     Size  Location     Type
  6879 ;;  res             3   51[BANK0 ] int 
  6880 ;; Return value:  Size  Location     Type
  6881 ;;                  3   42[BANK0 ] int 
  6882 ;; Registers used:
  6883 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6884 ;; Tracked objects:
  6885 ;;		On entry : 0/0
  6886 ;;		On exit  : 0/0
  6887 ;;		Unchanged: 0/0
  6888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6889 ;;      Params:         0       7       0       0       0       0       0
  6890 ;;      Locals:         0       3       0       0       0       0       0
  6891 ;;      Temps:          0       2       0       0       0       0       0
  6892 ;;      Totals:         0      12       0       0       0       0       0
  6893 ;;Total ram usage:       12 bytes
  6894 ;; Hardware stack levels used:    1
  6895 ;; Hardware stack levels required when called:    6
  6896 ;; This function calls:
  6897 ;;		___ftadd
  6898 ;;		___ftmul
  6899 ;;		___wmul
  6900 ;; This function is called by:
  6901 ;;		_log
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           	psect	text29
  6906  002C8C                     __ptext29:
  6907                           	opt stack 0
  6908  002C8C                     _eval_poly:
  6909                           	opt stack 22
  6910                           
  6911                           ;incstack = 0
  6912  002C8C  C0F0  F01B         	movff	eval_poly@n,___wmul@multiplier
  6913  002C90  C0F1  F01C         	movff	eval_poly@n+1,___wmul@multiplier+1
  6914  002C94  0E00               	movlw	0
  6915  002C96  6E1E               	movwf	___wmul@multiplicand+1,c
  6916  002C98  0E03               	movlw	3
  6917  002C9A  6E1D               	movwf	___wmul@multiplicand,c
  6918  002C9C  EC3F  F01D         	call	___wmul	;wreg free
  6919  002CA0  C0EE  F0F2         	movff	eval_poly@d,??_eval_poly
  6920  002CA4  C0EF  F0F3         	movff	eval_poly@d+1,??_eval_poly+1
  6921  002CA8  501B               	movf	?___wmul,w,c
  6922  002CAA  0100               	movlb	0	; () banked
  6923  002CAC  27F2               	addwf	??_eval_poly& (0+255),f,b
  6924  002CAE  501C               	movf	?___wmul+1,w,c
  6925  002CB0  0100               	movlb	0	; () banked
  6926  002CB2  23F3               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6927  002CB4  C0F2  FFF6         	movff	??_eval_poly,tblptrl
  6928  002CB8  C0F3  FFF7         	movff	??_eval_poly+1,tblptrh
  6929  002CBC                     	if	0	;tblptru may be non-zero
  6930  002CBC                     	endif
  6931  002CBC                     	if	0	;tblptru may be non-zero
  6932  002CBC                     	endif
  6933  002CBC  0009               	tblrd		*+
  6934  002CBE  CFF5 F0F4          	movff	tablat,eval_poly@res
  6935  002CC2  0009               	tblrd		*+
  6936  002CC4  CFF5 F0F5          	movff	tablat,eval_poly@res+1
  6937  002CC8  000A               	tblrd		*-
  6938  002CCA  CFF5 F0F6          	movff	tablat,eval_poly@res+2
  6939  002CCE  D042               	goto	l4907
  6940  002CD0                     l4905:
  6941                           
  6942                           ; BSR set to: 0
  6943  002CD0  C0F4  F0D3         	movff	eval_poly@res,___ftmul@f2
  6944  002CD4  C0F5  F0D4         	movff	eval_poly@res+1,___ftmul@f2+1
  6945  002CD8  C0F6  F0D5         	movff	eval_poly@res+2,___ftmul@f2+2
  6946  002CDC  C0EB  F0D0         	movff	eval_poly@x,___ftmul@f1
  6947  002CE0  C0EC  F0D1         	movff	eval_poly@x+1,___ftmul@f1+1
  6948  002CE4  C0ED  F0D2         	movff	eval_poly@x+2,___ftmul@f1+2
  6949  002CE8  EC4A  F00F         	call	___ftmul	;wreg free
  6950  002CEC  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6951  002CF0  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6952  002CF4  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6953  002CF8  0E00               	movlw	0
  6954  002CFA  6E1E               	movwf	___wmul@multiplicand+1,c
  6955  002CFC  0E03               	movlw	3
  6956  002CFE  6E1D               	movwf	___wmul@multiplicand,c
  6957  002D00  0100               	movlb	0	; () banked
  6958  002D02  07F0               	decf	eval_poly@n& (0+255),f,b
  6959  002D04  A0D8               	btfss	status,0,c
  6960  002D06  07F1               	decf	(eval_poly@n+1)& (0+255),f,b
  6961  002D08  C0F0  F01B         	movff	eval_poly@n,___wmul@multiplier
  6962  002D0C  C0F1  F01C         	movff	eval_poly@n+1,___wmul@multiplier+1
  6963  002D10  EC3F  F01D         	call	___wmul	;wreg free
  6964  002D14  C0EE  F0F2         	movff	eval_poly@d,??_eval_poly
  6965  002D18  C0EF  F0F3         	movff	eval_poly@d+1,??_eval_poly+1
  6966  002D1C  501B               	movf	?___wmul,w,c
  6967  002D1E  0100               	movlb	0	; () banked
  6968  002D20  27F2               	addwf	??_eval_poly& (0+255),f,b
  6969  002D22  501C               	movf	?___wmul+1,w,c
  6970  002D24  0100               	movlb	0	; () banked
  6971  002D26  23F3               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6972  002D28  C0F2  FFF6         	movff	??_eval_poly,tblptrl
  6973  002D2C  C0F3  FFF7         	movff	??_eval_poly+1,tblptrh
  6974  002D30                     	if	0	;tblptru may be non-zero
  6975  002D30                     	endif
  6976  002D30                     	if	0	;tblptru may be non-zero
  6977  002D30                     	endif
  6978  002D30  0009               	tblrd		*+
  6979  002D32  CFF5 F0E2          	movff	tablat,___ftadd@f2
  6980  002D36  0009               	tblrd		*+
  6981  002D38  CFF5 F0E3          	movff	tablat,___ftadd@f2+1
  6982  002D3C  000A               	tblrd		*-
  6983  002D3E  CFF5 F0E4          	movff	tablat,___ftadd@f2+2
  6984  002D42  ECD6  F00A         	call	___ftadd	;wreg free
  6985  002D46  C0DF  F0F4         	movff	?___ftadd,eval_poly@res
  6986  002D4A  C0E0  F0F5         	movff	?___ftadd+1,eval_poly@res+1
  6987  002D4E  C0E1  F0F6         	movff	?___ftadd+2,eval_poly@res+2
  6988  002D52  D000               	goto	l4907
  6989  002D54                     l4907:
  6990  002D54  0100               	movlb	0	; () banked
  6991  002D56  51F0               	movf	eval_poly@n& (0+255),w,b
  6992  002D58  0100               	movlb	0	; () banked
  6993  002D5A  11F1               	iorwf	(eval_poly@n+1)& (0+255),w,b
  6994  002D5C  A4D8               	btfss	status,2,c
  6995  002D5E  D7B8               	goto	l4905
  6996                           
  6997                           ; BSR set to: 0
  6998  002D60  C0F4  F0EB         	movff	eval_poly@res,?_eval_poly
  6999  002D64  C0F5  F0EC         	movff	eval_poly@res+1,?_eval_poly+1
  7000  002D68  C0F6  F0ED         	movff	eval_poly@res+2,?_eval_poly+2
  7001                           
  7002                           ; BSR set to: 0
  7003  002D6C  0012               	return		;funcret
  7004  002D6E                     __end_of_eval_poly:
  7005                           	opt stack 0
  7006                           tosu	equ	0xFFF
  7007                           tosh	equ	0xFFE
  7008                           tosl	equ	0xFFD
  7009                           pclath	equ	0xFFA
  7010                           tblptru	equ	0xFF8
  7011                           tblptrh	equ	0xFF7
  7012                           tblptrl	equ	0xFF6
  7013                           tablat	equ	0xFF5
  7014                           prodh	equ	0xFF4
  7015                           prodl	equ	0xFF3
  7016                           intcon	equ	0xFF2
  7017                           postinc0	equ	0xFEE
  7018                           wreg	equ	0xFE8
  7019                           postdec1	equ	0xFE5
  7020                           fsr1l	equ	0xFE1
  7021                           indf2	equ	0xFDF
  7022                           postinc2	equ	0xFDE
  7023                           postdec2	equ	0xFDD
  7024                           plusw2	equ	0xFDB
  7025                           fsr2h	equ	0xFDA
  7026                           fsr2l	equ	0xFD9
  7027                           status	equ	0xFD8
  7028                           
  7029 ;; *************** function ___awtoft *****************
  7030 ;; Defined at:
  7031 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  7032 ;; Parameters:    Size  Location     Type
  7033 ;;  c               2   34[COMRAM] int 
  7034 ;; Auto vars:     Size  Location     Type
  7035 ;;  sign            1   37[COMRAM] unsigned char 
  7036 ;; Return value:  Size  Location     Type
  7037 ;;                  3   34[COMRAM] float 
  7038 ;; Registers used:
  7039 ;;		wreg, status,2, status,0, cstack
  7040 ;; Tracked objects:
  7041 ;;		On entry : 0/0
  7042 ;;		On exit  : 0/0
  7043 ;;		Unchanged: 0/0
  7044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7045 ;;      Params:         3       0       0       0       0       0       0
  7046 ;;      Locals:         1       0       0       0       0       0       0
  7047 ;;      Temps:          0       0       0       0       0       0       0
  7048 ;;      Totals:         4       0       0       0       0       0       0
  7049 ;;Total ram usage:        4 bytes
  7050 ;; Hardware stack levels used:    1
  7051 ;; Hardware stack levels required when called:    5
  7052 ;; This function calls:
  7053 ;;		___ftpack
  7054 ;; This function is called by:
  7055 ;;		_Temp_Convert
  7056 ;;		_log
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           	psect	text30
  7061  003882                     __ptext30:
  7062                           	opt stack 0
  7063  003882                     ___awtoft:
  7064                           	opt stack 23
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;incstack = 0
  7068  003882  0E00               	movlw	0
  7069  003884  6E26               	movwf	___awtoft@sign,c
  7070  003886  AE24               	btfss	___awtoft@c+1,7,c
  7071  003888  D007               	goto	l4879
  7072  00388A  6C23               	negf	___awtoft@c,c
  7073  00388C  1E24               	comf	___awtoft@c+1,f,c
  7074  00388E  B0D8               	btfsc	status,0,c
  7075  003890  2A24               	incf	___awtoft@c+1,f,c
  7076  003892  0E01               	movlw	1
  7077  003894  6E26               	movwf	___awtoft@sign,c
  7078  003896  D000               	goto	l4879
  7079  003898                     l4879:
  7080  003898  C023  F01B         	movff	___awtoft@c,___ftpack@arg
  7081  00389C  C024  F01C         	movff	___awtoft@c+1,___ftpack@arg+1
  7082  0038A0  6A1D               	clrf	___ftpack@arg+2,c
  7083  0038A2  0E8E               	movlw	142
  7084  0038A4  6E1E               	movwf	___ftpack@exp,c
  7085  0038A6  C026  F01F         	movff	___awtoft@sign,___ftpack@sign
  7086  0038AA  EC91  F017         	call	___ftpack	;wreg free
  7087  0038AE  C01B  F023         	movff	?___ftpack,?___awtoft
  7088  0038B2  C01C  F024         	movff	?___ftpack+1,?___awtoft+1
  7089  0038B6  C01D  F025         	movff	?___ftpack+2,?___awtoft+2
  7090  0038BA  0012               	return	
  7091  0038BC  0012               	return		;funcret
  7092  0038BE                     __end_of___awtoft:
  7093                           	opt stack 0
  7094                           tosu	equ	0xFFF
  7095                           tosh	equ	0xFFE
  7096                           tosl	equ	0xFFD
  7097                           pclath	equ	0xFFA
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           postinc0	equ	0xFEE
  7106                           wreg	equ	0xFE8
  7107                           postdec1	equ	0xFE5
  7108                           fsr1l	equ	0xFE1
  7109                           indf2	equ	0xFDF
  7110                           postinc2	equ	0xFDE
  7111                           postdec2	equ	0xFDD
  7112                           plusw2	equ	0xFDB
  7113                           fsr2h	equ	0xFDA
  7114                           fsr2l	equ	0xFD9
  7115                           status	equ	0xFD8
  7116                           
  7117 ;; *************** function ___ftsub *****************
  7118 ;; Defined at:
  7119 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;  f1              3   42[BANK0 ] float 
  7122 ;;  f2              3   45[BANK0 ] float 
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;		None
  7125 ;; Return value:  Size  Location     Type
  7126 ;;                  3   42[BANK0 ] float 
  7127 ;; Registers used:
  7128 ;;		wreg, status,2, status,0, cstack
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7134 ;;      Params:         0       6       0       0       0       0       0
  7135 ;;      Locals:         0       0       0       0       0       0       0
  7136 ;;      Temps:          0       0       0       0       0       0       0
  7137 ;;      Totals:         0       6       0       0       0       0       0
  7138 ;;Total ram usage:        6 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    6
  7141 ;; This function calls:
  7142 ;;		___ftadd
  7143 ;; This function is called by:
  7144 ;;		_Temp_Convert
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text31
  7149  00371E                     __ptext31:
  7150                           	opt stack 0
  7151  00371E                     ___ftsub:
  7152                           	opt stack 23
  7153                           
  7154                           ;incstack = 0
  7155  00371E  0100               	movlb	0	; () banked
  7156  003720  51EE               	movf	___ftsub@f2& (0+255),w,b
  7157  003722  0100               	movlb	0	; () banked
  7158  003724  11EF               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7159  003726  0100               	movlb	0	; () banked
  7160  003728  11F0               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7161  00372A  B4D8               	btfsc	status,2,c
  7162  00372C  D00A               	goto	l5259
  7163                           
  7164                           ; BSR set to: 0
  7165  00372E  0E00               	movlw	0
  7166  003730  0100               	movlb	0	; () banked
  7167  003732  1BEE               	xorwf	___ftsub@f2& (0+255),f,b
  7168  003734  0E00               	movlw	0
  7169  003736  0100               	movlb	0	; () banked
  7170  003738  1BEF               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7171  00373A  0E80               	movlw	128
  7172  00373C  0100               	movlb	0	; () banked
  7173  00373E  1BF0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7174  003740  D000               	goto	l5259
  7175  003742                     l5259:
  7176                           
  7177                           ; BSR set to: 0
  7178  003742  C0EB  F0DF         	movff	___ftsub@f1,___ftadd@f1
  7179  003746  C0EC  F0E0         	movff	___ftsub@f1+1,___ftadd@f1+1
  7180  00374A  C0ED  F0E1         	movff	___ftsub@f1+2,___ftadd@f1+2
  7181  00374E  C0EE  F0E2         	movff	___ftsub@f2,___ftadd@f2
  7182  003752  C0EF  F0E3         	movff	___ftsub@f2+1,___ftadd@f2+1
  7183  003756  C0F0  F0E4         	movff	___ftsub@f2+2,___ftadd@f2+2
  7184  00375A  ECD6  F00A         	call	___ftadd	;wreg free
  7185  00375E  C0DF  F0EB         	movff	?___ftadd,?___ftsub
  7186  003762  C0E0  F0EC         	movff	?___ftadd+1,?___ftsub+1
  7187  003766  C0E1  F0ED         	movff	?___ftadd+2,?___ftsub+2
  7188  00376A  0012               	return	
  7189  00376C  0012               	return		;funcret
  7190  00376E                     __end_of___ftsub:
  7191                           	opt stack 0
  7192                           tosu	equ	0xFFF
  7193                           tosh	equ	0xFFE
  7194                           tosl	equ	0xFFD
  7195                           pclath	equ	0xFFA
  7196                           tblptru	equ	0xFF8
  7197                           tblptrh	equ	0xFF7
  7198                           tblptrl	equ	0xFF6
  7199                           tablat	equ	0xFF5
  7200                           prodh	equ	0xFF4
  7201                           prodl	equ	0xFF3
  7202                           intcon	equ	0xFF2
  7203                           postinc0	equ	0xFEE
  7204                           wreg	equ	0xFE8
  7205                           postdec1	equ	0xFE5
  7206                           fsr1l	equ	0xFE1
  7207                           indf2	equ	0xFDF
  7208                           postinc2	equ	0xFDE
  7209                           postdec2	equ	0xFDD
  7210                           plusw2	equ	0xFDB
  7211                           fsr2h	equ	0xFDA
  7212                           fsr2l	equ	0xFD9
  7213                           status	equ	0xFD8
  7214                           
  7215 ;; *************** function _Temp_Filter *****************
  7216 ;; Defined at:
  7217 ;;		line 49 in file "Tempeture.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;		None
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;  x               2   42[BANK0 ] int 
  7222 ;; Return value:  Size  Location     Type
  7223 ;;		None               void
  7224 ;; Registers used:
  7225 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7226 ;; Tracked objects:
  7227 ;;		On entry : 0/0
  7228 ;;		On exit  : 0/0
  7229 ;;		Unchanged: 0/0
  7230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7231 ;;      Params:         0       0       0       0       0       0       0
  7232 ;;      Locals:         0       2       0       0       0       0       0
  7233 ;;      Temps:          0       0       0       0       0       0       0
  7234 ;;      Totals:         0       2       0       0       0       0       0
  7235 ;;Total ram usage:        2 bytes
  7236 ;; Hardware stack levels used:    1
  7237 ;; Hardware stack levels required when called:    6
  7238 ;; This function calls:
  7239 ;;		___ftadd
  7240 ;;		___ftmul
  7241 ;;		___wmul
  7242 ;; This function is called by:
  7243 ;;		_Temp_Convert
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           	psect	text32
  7248  001A3A                     __ptext32:
  7249                           	opt stack 0
  7250  001A3A                     _Temp_Filter:
  7251                           	opt stack 23
  7252                           
  7253                           ;Tempeture.c: 52: int x;
  7254                           ;Tempeture.c: 53: for(x = 0; x < 10; x++)
  7255                           
  7256                           ;incstack = 0
  7257  001A3A  0E00               	movlw	0
  7258  001A3C  0100               	movlb	0	; () banked
  7259  001A3E  6FEC               	movwf	(Temp_Filter@x+1)& (0+255),b
  7260  001A40  0E00               	movlw	0
  7261  001A42  6FEB               	movwf	Temp_Filter@x& (0+255),b
  7262  001A44                     l4951:
  7263                           
  7264                           ; BSR set to: 0
  7265  001A44  0100               	movlb	0	; () banked
  7266  001A46  BFEC               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  7267  001A48  D00A               	goto	l4955
  7268  001A4A  0100               	movlb	0	; () banked
  7269  001A4C  51EC               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7270  001A4E  E172               	bnz	l4961
  7271  001A50  0E0A               	movlw	10
  7272  001A52  0100               	movlb	0	; () banked
  7273  001A54  5DEB               	subwf	Temp_Filter@x& (0+255),w,b
  7274  001A56  B0D8               	btfsc	status,0,c
  7275  001A58  D06D               	goto	l4961
  7276  001A5A  D001               	goto	l4955
  7277                           
  7278                           ; BSR set to: 0
  7279  001A5C  D06B               	goto	l4961
  7280  001A5E                     l4955:
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;Tempeture.c: 54: {
  7284                           ;Tempeture.c: 55: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  7285  001A5E  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7286  001A62  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7287  001A66  0E00               	movlw	0
  7288  001A68  6E1E               	movwf	___wmul@multiplicand+1,c
  7289  001A6A  0E03               	movlw	3
  7290  001A6C  6E1D               	movwf	___wmul@multiplicand,c
  7291  001A6E  EC3F  F01D         	call	___wmul	;wreg free
  7292  001A72  0EBE               	movlw	low _Temp_DegF
  7293  001A74  241B               	addwf	?___wmul,w,c
  7294  001A76  6ED9               	movwf	fsr2l,c
  7295  001A78  0E01               	movlw	high _Temp_DegF
  7296  001A7A  201C               	addwfc	?___wmul+1,w,c
  7297  001A7C  6EDA               	movwf	fsr2h,c
  7298  001A7E  0E48               	movlw	72
  7299  001A80  0100               	movlb	0	; () banked
  7300  001A82  6FD3               	movwf	___ftmul@f2& (0+255),b
  7301  001A84  0E61               	movlw	97
  7302  001A86  0100               	movlb	0	; () banked
  7303  001A88  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  7304  001A8A  0E3F               	movlw	63
  7305  001A8C  0100               	movlb	0	; () banked
  7306  001A8E  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  7307  001A90  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7308  001A94  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7309  001A98  0E00               	movlw	0
  7310  001A9A  6E1E               	movwf	___wmul@multiplicand+1,c
  7311  001A9C  0E03               	movlw	3
  7312  001A9E  6E1D               	movwf	___wmul@multiplicand,c
  7313  001AA0  EC3F  F01D         	call	___wmul	;wreg free
  7314  001AA4  0E82               	movlw	low _TmpTemp_DegF
  7315  001AA6  241B               	addwf	?___wmul,w,c
  7316  001AA8  6EE1               	movwf	fsr1l,c
  7317  001AAA  0E01               	movlw	high _TmpTemp_DegF
  7318  001AAC  201C               	addwfc	?___wmul+1,w,c
  7319  001AAE  6EE2               	movwf	fsr1h,c
  7320  001AB0  CFE6 F0D0          	movff	postinc1,___ftmul@f1
  7321  001AB4  CFE6 F0D1          	movff	postinc1,___ftmul@f1+1
  7322  001AB8  CFE5 F0D2          	movff	postdec1,___ftmul@f1+2
  7323  001ABC  EC4A  F00F         	call	___ftmul	;wreg free
  7324  001AC0  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  7325  001AC4  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  7326  001AC8  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  7327  001ACC  0EC3               	movlw	195
  7328  001ACE  0100               	movlb	0	; () banked
  7329  001AD0  6FD3               	movwf	___ftmul@f2& (0+255),b
  7330  001AD2  0EF5               	movlw	245
  7331  001AD4  0100               	movlb	0	; () banked
  7332  001AD6  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  7333  001AD8  0E3D               	movlw	61
  7334  001ADA  0100               	movlb	0	; () banked
  7335  001ADC  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  7336  001ADE  0E00               	movlw	0
  7337  001AE0  6E1E               	movwf	___wmul@multiplicand+1,c
  7338  001AE2  0E03               	movlw	3
  7339  001AE4  6E1D               	movwf	___wmul@multiplicand,c
  7340  001AE6  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7341  001AEA  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7342  001AEE  EC3F  F01D         	call	___wmul	;wreg free
  7343  001AF2  0E1E               	movlw	low _PrevTemp_DegF
  7344  001AF4  241B               	addwf	?___wmul,w,c
  7345  001AF6  6EE1               	movwf	fsr1l,c
  7346  001AF8  0E01               	movlw	high _PrevTemp_DegF
  7347  001AFA  201C               	addwfc	?___wmul+1,w,c
  7348  001AFC  6EE2               	movwf	fsr1h,c
  7349  001AFE  CFE6 F0D0          	movff	postinc1,___ftmul@f1
  7350  001B02  CFE6 F0D1          	movff	postinc1,___ftmul@f1+1
  7351  001B06  CFE5 F0D2          	movff	postdec1,___ftmul@f1+2
  7352  001B0A  EC4A  F00F         	call	___ftmul	;wreg free
  7353  001B0E  C0D0  F0E2         	movff	?___ftmul,___ftadd@f2
  7354  001B12  C0D1  F0E3         	movff	?___ftmul+1,___ftadd@f2+1
  7355  001B16  C0D2  F0E4         	movff	?___ftmul+2,___ftadd@f2+2
  7356  001B1A  ECD6  F00A         	call	___ftadd	;wreg free
  7357  001B1E  C0DF  FFDE         	movff	?___ftadd,postinc2
  7358  001B22  C0E0  FFDE         	movff	?___ftadd+1,postinc2
  7359  001B26  C0E1  FFDE         	movff	?___ftadd+2,postinc2
  7360  001B2A  0100               	movlb	0	; () banked
  7361  001B2C  4BEB               	infsnz	Temp_Filter@x& (0+255),f,b
  7362  001B2E  2BEC               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7363  001B30  D789               	goto	l4951
  7364                           
  7365                           ; BSR set to: 0
  7366  001B32  D000               	goto	l4961
  7367  001B34                     l4961:
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;Tempeture.c: 56: }
  7371                           ;Tempeture.c: 57: for(x = 0; x < 10; x++)
  7372  001B34  0E00               	movlw	0
  7373  001B36  0100               	movlb	0	; () banked
  7374  001B38  6FEC               	movwf	(Temp_Filter@x+1)& (0+255),b
  7375  001B3A  0E00               	movlw	0
  7376  001B3C  6FEB               	movwf	Temp_Filter@x& (0+255),b
  7377  001B3E                     l4963:
  7378                           
  7379                           ; BSR set to: 0
  7380  001B3E  0100               	movlb	0	; () banked
  7381  001B40  BFEC               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  7382  001B42  D00A               	goto	l4967
  7383  001B44  0100               	movlb	0	; () banked
  7384  001B46  51EC               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7385  001B48  E132               	bnz	l351
  7386  001B4A  0E0A               	movlw	10
  7387  001B4C  0100               	movlb	0	; () banked
  7388  001B4E  5DEB               	subwf	Temp_Filter@x& (0+255),w,b
  7389  001B50  B0D8               	btfsc	status,0,c
  7390  001B52  0012               	return	
  7391  001B54  D001               	goto	l4967
  7392                           
  7393                           ; BSR set to: 0
  7394  001B56  0012               	return	
  7395  001B58                     l4967:
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;Tempeture.c: 58: {
  7399                           ;Tempeture.c: 59: PrevTemp_DegF[x] = Temp_DegF[x];
  7400  001B58  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7401  001B5C  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7402  001B60  0E00               	movlw	0
  7403  001B62  6E1E               	movwf	___wmul@multiplicand+1,c
  7404  001B64  0E03               	movlw	3
  7405  001B66  6E1D               	movwf	___wmul@multiplicand,c
  7406  001B68  EC3F  F01D         	call	___wmul	;wreg free
  7407  001B6C  0EBE               	movlw	low _Temp_DegF
  7408  001B6E  241B               	addwf	?___wmul,w,c
  7409  001B70  6ED9               	movwf	fsr2l,c
  7410  001B72  0E01               	movlw	high _Temp_DegF
  7411  001B74  201C               	addwfc	?___wmul+1,w,c
  7412  001B76  6EDA               	movwf	fsr2h,c
  7413  001B78  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7414  001B7C  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7415  001B80  0E00               	movlw	0
  7416  001B82  6E1E               	movwf	___wmul@multiplicand+1,c
  7417  001B84  0E03               	movlw	3
  7418  001B86  6E1D               	movwf	___wmul@multiplicand,c
  7419  001B88  EC3F  F01D         	call	___wmul	;wreg free
  7420  001B8C  0E1E               	movlw	low _PrevTemp_DegF
  7421  001B8E  241B               	addwf	?___wmul,w,c
  7422  001B90  6EE1               	movwf	fsr1l,c
  7423  001B92  0E01               	movlw	high _PrevTemp_DegF
  7424  001B94  201C               	addwfc	?___wmul+1,w,c
  7425  001B96  6EE2               	movwf	fsr1h,c
  7426  001B98  CFDE FFE6          	movff	postinc2,postinc1
  7427  001B9C  CFDE FFE6          	movff	postinc2,postinc1
  7428  001BA0  CFDE FFE6          	movff	postinc2,postinc1
  7429  001BA4  0100               	movlb	0	; () banked
  7430  001BA6  4BEB               	infsnz	Temp_Filter@x& (0+255),f,b
  7431  001BA8  2BEC               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7432  001BAA  D7C9               	goto	l4963
  7433                           
  7434                           ; BSR set to: 0
  7435  001BAC  0012               	return	
  7436  001BAE                     l351:
  7437                           
  7438                           ; BSR set to: 0
  7439  001BAE  0012               	return		;funcret
  7440  001BB0                     __end_of_Temp_Filter:
  7441                           	opt stack 0
  7442                           tosu	equ	0xFFF
  7443                           tosh	equ	0xFFE
  7444                           tosl	equ	0xFFD
  7445                           pclath	equ	0xFFA
  7446                           tblptru	equ	0xFF8
  7447                           tblptrh	equ	0xFF7
  7448                           tblptrl	equ	0xFF6
  7449                           tablat	equ	0xFF5
  7450                           prodh	equ	0xFF4
  7451                           prodl	equ	0xFF3
  7452                           intcon	equ	0xFF2
  7453                           postinc0	equ	0xFEE
  7454                           wreg	equ	0xFE8
  7455                           postinc1	equ	0xFE6
  7456                           postdec1	equ	0xFE5
  7457                           fsr1h	equ	0xFE2
  7458                           fsr1l	equ	0xFE1
  7459                           indf2	equ	0xFDF
  7460                           postinc2	equ	0xFDE
  7461                           postdec2	equ	0xFDD
  7462                           plusw2	equ	0xFDB
  7463                           fsr2h	equ	0xFDA
  7464                           fsr2l	equ	0xFD9
  7465                           status	equ	0xFD8
  7466                           
  7467 ;; *************** function _SYSTEM_Initialize *****************
  7468 ;; Defined at:
  7469 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;		None
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;		None
  7474 ;; Return value:  Size  Location     Type
  7475 ;;		None               void
  7476 ;; Registers used:
  7477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7483 ;;      Params:         0       0       0       0       0       0       0
  7484 ;;      Locals:         0       0       0       0       0       0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0
  7486 ;;      Totals:         0       0       0       0       0       0       0
  7487 ;;Total ram usage:        0 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    7
  7490 ;; This function calls:
  7491 ;;		_ADC_Initialize
  7492 ;;		_EUSART1_Initialize
  7493 ;;		_INTERRUPT_Initialize
  7494 ;;		_OSCILLATOR_Initialize
  7495 ;;		_PIN_MANAGER_Initialize
  7496 ;;		_TMR1_Initialize
  7497 ;;		_begin
  7498 ;; This function is called by:
  7499 ;;		_main
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           	psect	text33
  7504  0034FA                     __ptext33:
  7505                           	opt stack 0
  7506  0034FA                     _SYSTEM_Initialize:
  7507                           	opt stack 23
  7508                           
  7509                           ;mcc.c: 113: OSCILLATOR_Initialize();
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;incstack = 0
  7513  0034FA  EC14  F01E         	call	_OSCILLATOR_Initialize	;wreg free
  7514                           
  7515                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  7516  0034FE  EC3D  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
  7517                           
  7518                           ;mcc.c: 115: INTERRUPT_Initialize();
  7519  003502  EC1B  F01E         	call	_INTERRUPT_Initialize	;wreg free
  7520                           
  7521                           ;mcc.c: 116: ADC_Initialize();
  7522  003506  ECC9  F01D         	call	_ADC_Initialize	;wreg free
  7523                           
  7524                           ;mcc.c: 117: EUSART1_Initialize();
  7525  00350A  EC5F  F01C         	call	_EUSART1_Initialize	;wreg free
  7526                           
  7527                           ;mcc.c: 118: TMR1_Initialize();
  7528  00350E  EC66  F01D         	call	_TMR1_Initialize	;wreg free
  7529                           
  7530                           ;mcc.c: 119: begin(receiveArray, sizeof (receiveArray), 2, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  7531  003512  0E3C               	movlw	low _receiveArray
  7532  003514  0100               	movlb	0	; () banked
  7533  003516  6FC1               	movwf	begin@ptr& (0+255),b
  7534  003518  0E01               	movlw	high _receiveArray
  7535  00351A  0100               	movlb	0	; () banked
  7536  00351C  6FC2               	movwf	(begin@ptr+1)& (0+255),b
  7537  00351E  0E28               	movlw	40
  7538  003520  0100               	movlb	0	; () banked
  7539  003522  6FC3               	movwf	begin@maxSize& (0+255),b
  7540  003524  0E02               	movlw	2
  7541  003526  0100               	movlb	0	; () banked
  7542  003528  6FC4               	movwf	begin@givenAddress& (0+255),b
  7543  00352A  0E00               	movlw	0
  7544  00352C  0100               	movlb	0	; () banked
  7545  00352E  6FC5               	movwf	begin@error& (0+255),b
  7546  003530  0E66               	movlw	low _Send_put
  7547  003532  0100               	movlb	0	; () banked
  7548  003534  6FC6               	movwf	begin@stufftosend& (0+255),b
  7549  003536  0E39               	movlw	high _Send_put
  7550  003538  0100               	movlb	0	; () banked
  7551  00353A  6FC7               	movwf	(begin@stufftosend+1)& (0+255),b
  7552  00353C  0E18               	movlw	low _Receive_get
  7553  00353E  0100               	movlb	0	; () banked
  7554  003540  6FC8               	movwf	begin@stufftoreceive& (0+255),b
  7555  003542  0E3C               	movlw	high _Receive_get
  7556  003544  0100               	movlb	0	; () banked
  7557  003546  6FC9               	movwf	(begin@stufftoreceive+1)& (0+255),b
  7558  003548  0E62               	movlw	low _Receive_available
  7559  00354A  0100               	movlb	0	; () banked
  7560  00354C  6FCA               	movwf	begin@stuffavailable& (0+255),b
  7561  00354E  0E3B               	movlw	high _Receive_available
  7562  003550  0100               	movlb	0	; () banked
  7563  003552  6FCB               	movwf	(begin@stuffavailable+1)& (0+255),b
  7564  003554  0E08               	movlw	low _Receive_peek
  7565  003556  0100               	movlb	0	; () banked
  7566  003558  6FCC               	movwf	begin@stuffpeek& (0+255),b
  7567  00355A  0E3C               	movlw	high _Receive_peek
  7568  00355C  0100               	movlb	0	; () banked
  7569  00355E  6FCD               	movwf	(begin@stuffpeek+1)& (0+255),b
  7570  003560  ECE5  F01A         	call	_begin	;wreg free
  7571  003564  0012               	return		;funcret
  7572  003566                     __end_of_SYSTEM_Initialize:
  7573                           	opt stack 0
  7574                           tosu	equ	0xFFF
  7575                           tosh	equ	0xFFE
  7576                           tosl	equ	0xFFD
  7577                           pclath	equ	0xFFA
  7578                           tblptru	equ	0xFF8
  7579                           tblptrh	equ	0xFF7
  7580                           tblptrl	equ	0xFF6
  7581                           tablat	equ	0xFF5
  7582                           prodh	equ	0xFF4
  7583                           prodl	equ	0xFF3
  7584                           intcon	equ	0xFF2
  7585                           postinc0	equ	0xFEE
  7586                           wreg	equ	0xFE8
  7587                           postinc1	equ	0xFE6
  7588                           postdec1	equ	0xFE5
  7589                           fsr1h	equ	0xFE2
  7590                           fsr1l	equ	0xFE1
  7591                           indf2	equ	0xFDF
  7592                           postinc2	equ	0xFDE
  7593                           postdec2	equ	0xFDD
  7594                           plusw2	equ	0xFDB
  7595                           fsr2h	equ	0xFDA
  7596                           fsr2l	equ	0xFD9
  7597                           status	equ	0xFD8
  7598                           
  7599 ;; *************** function _begin *****************
  7600 ;; Defined at:
  7601 ;;		line 18 in file "FastTransfer.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  7604 ;;		 -> receiveArray(40), 
  7605 ;;  maxSize         1    2[BANK0 ] unsigned char 
  7606 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  7607 ;;  error           1    4[BANK0 ] unsigned char 
  7608 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  7609 ;;		 -> Send_put(0), 
  7610 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  7611 ;;		 -> Receive_get(1), 
  7612 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  7613 ;;		 -> Receive_available(2), 
  7614 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  7615 ;;		 -> Receive_peek(1), 
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;		None
  7618 ;; Return value:  Size  Location     Type
  7619 ;;		None               void
  7620 ;; Registers used:
  7621 ;;		wreg, status,2, status,0, cstack
  7622 ;; Tracked objects:
  7623 ;;		On entry : 0/0
  7624 ;;		On exit  : 0/0
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7627 ;;      Params:         0      13       0       0       0       0       0
  7628 ;;      Locals:         0       0       0       0       0       0       0
  7629 ;;      Temps:          0       0       0       0       0       0       0
  7630 ;;      Totals:         0      13       0       0       0       0       0
  7631 ;;Total ram usage:       13 bytes
  7632 ;; Hardware stack levels used:    1
  7633 ;; Hardware stack levels required when called:    5
  7634 ;; This function calls:
  7635 ;;		___awdiv
  7636 ;; This function is called by:
  7637 ;;		_SYSTEM_Initialize
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           	psect	text34
  7642  0035CA                     __ptext34:
  7643                           	opt stack 0
  7644  0035CA                     _begin:
  7645                           	opt stack 24
  7646                           
  7647                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  7648                           
  7649                           ;incstack = 0
  7650  0035CA  C0C1  F096         	movff	begin@ptr,_receiveArrayAddress
  7651  0035CE  C0C2  F097         	movff	begin@ptr+1,_receiveArrayAddress+1
  7652                           
  7653                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  7654  0035D2  C0C4  F03E         	movff	begin@givenAddress,_moduleAddress
  7655                           
  7656                           ;FastTransfer.c: 21: serial_write = stufftosend;
  7657  0035D6  C0C6  F035         	movff	begin@stufftosend,_serial_write
  7658  0035DA  C0C7  F036         	movff	begin@stufftosend+1,_serial_write+1
  7659                           
  7660                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  7661  0035DE  C0CA  F031         	movff	begin@stuffavailable,_serial_available
  7662  0035E2  C0CB  F032         	movff	begin@stuffavailable+1,_serial_available+1
  7663                           
  7664                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  7665  0035E6  C0CC  F09A         	movff	begin@stuffpeek,_serial_peek
  7666  0035EA  C0CD  F09B         	movff	begin@stuffpeek+1,_serial_peek+1
  7667                           
  7668                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  7669  0035EE  C0C8  F033         	movff	begin@stufftoreceive,_serial_read
  7670  0035F2  C0C9  F034         	movff	begin@stufftoreceive+1,_serial_read+1
  7671                           
  7672                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  7673  0035F6  C0C3  F01B         	movff	begin@maxSize,___awdiv@dividend
  7674  0035FA  6A1C               	clrf	___awdiv@dividend+1,c
  7675  0035FC  0E00               	movlw	0
  7676  0035FE  6E1E               	movwf	___awdiv@divisor+1,c
  7677  003600  0E02               	movlw	2
  7678  003602  6E1D               	movwf	___awdiv@divisor,c
  7679  003604  EC4C  F018         	call	___awdiv	;wreg free
  7680  003608  501B               	movf	?___awdiv,w,c
  7681  00360A  6E3D               	movwf	_maxDataAddress,c
  7682                           
  7683                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  7684  00360C  0E00               	movlw	low _ring_buffer
  7685  00360E  0100               	movlb	0	; () banked
  7686  003610  6F98               	movwf	_sendStructAddress& (0+255),b
  7687  003612  0E02               	movlw	high _ring_buffer
  7688  003614  0100               	movlb	0	; () banked
  7689  003616  6F99               	movwf	(_sendStructAddress+1)& (0+255),b
  7690                           
  7691                           ; BSR set to: 0
  7692                           ;FastTransfer.c: 27: AKNAKsend = error;
  7693  003618  C0C5  F039         	movff	begin@error,_AKNAKsend
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  7697  00361C  0E00               	movlw	0
  7698  00361E  0100               	movlb	0	; () banked
  7699  003620  6F8F               	movwf	(_alignErrorCounter+1)& (0+255),b
  7700  003622  0E00               	movlw	0
  7701  003624  6F8E               	movwf	_alignErrorCounter& (0+255),b
  7702                           
  7703                           ; BSR set to: 0
  7704  003626  0012               	return		;funcret
  7705  003628                     __end_of_begin:
  7706                           	opt stack 0
  7707                           tosu	equ	0xFFF
  7708                           tosh	equ	0xFFE
  7709                           tosl	equ	0xFFD
  7710                           pclath	equ	0xFFA
  7711                           tblptru	equ	0xFF8
  7712                           tblptrh	equ	0xFF7
  7713                           tblptrl	equ	0xFF6
  7714                           tablat	equ	0xFF5
  7715                           prodh	equ	0xFF4
  7716                           prodl	equ	0xFF3
  7717                           intcon	equ	0xFF2
  7718                           postinc0	equ	0xFEE
  7719                           wreg	equ	0xFE8
  7720                           postinc1	equ	0xFE6
  7721                           postdec1	equ	0xFE5
  7722                           fsr1h	equ	0xFE2
  7723                           fsr1l	equ	0xFE1
  7724                           indf2	equ	0xFDF
  7725                           postinc2	equ	0xFDE
  7726                           postdec2	equ	0xFDD
  7727                           plusw2	equ	0xFDB
  7728                           fsr2h	equ	0xFDA
  7729                           fsr2l	equ	0xFD9
  7730                           status	equ	0xFD8
  7731                           
  7732 ;; *************** function ___awdiv *****************
  7733 ;; Defined at:
  7734 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7735 ;; Parameters:    Size  Location     Type
  7736 ;;  dividend        2   26[COMRAM] int 
  7737 ;;  divisor         2   28[COMRAM] int 
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;  quotient        2   32[COMRAM] int 
  7740 ;;  sign            1   31[COMRAM] unsigned char 
  7741 ;;  counter         1   30[COMRAM] unsigned char 
  7742 ;; Return value:  Size  Location     Type
  7743 ;;                  2   26[COMRAM] int 
  7744 ;; Registers used:
  7745 ;;		wreg, status,2, status,0
  7746 ;; Tracked objects:
  7747 ;;		On entry : 0/0
  7748 ;;		On exit  : 0/0
  7749 ;;		Unchanged: 0/0
  7750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7751 ;;      Params:         4       0       0       0       0       0       0
  7752 ;;      Locals:         4       0       0       0       0       0       0
  7753 ;;      Temps:          0       0       0       0       0       0       0
  7754 ;;      Totals:         8       0       0       0       0       0       0
  7755 ;;Total ram usage:        8 bytes
  7756 ;; Hardware stack levels used:    1
  7757 ;; Hardware stack levels required when called:    4
  7758 ;; This function calls:
  7759 ;;		Nothing
  7760 ;; This function is called by:
  7761 ;;		_Temp_Convert
  7762 ;;		_begin
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           	psect	text35
  7767  003098                     __ptext35:
  7768                           	opt stack 0
  7769  003098                     ___awdiv:
  7770                           	opt stack 25
  7771                           
  7772                           ; BSR set to: 0
  7773                           ;incstack = 0
  7774  003098  0E00               	movlw	0
  7775  00309A  6E20               	movwf	___awdiv@sign,c
  7776  00309C  AE1E               	btfss	___awdiv@divisor+1,7,c
  7777  00309E  D007               	goto	l4835
  7778  0030A0  6C1D               	negf	___awdiv@divisor,c
  7779  0030A2  1E1E               	comf	___awdiv@divisor+1,f,c
  7780  0030A4  B0D8               	btfsc	status,0,c
  7781  0030A6  2A1E               	incf	___awdiv@divisor+1,f,c
  7782  0030A8  0E01               	movlw	1
  7783  0030AA  6E20               	movwf	___awdiv@sign,c
  7784  0030AC  D000               	goto	l4835
  7785  0030AE                     l4835:
  7786  0030AE  AE1C               	btfss	___awdiv@dividend+1,7,c
  7787  0030B0  D007               	goto	l4841
  7788  0030B2  6C1B               	negf	___awdiv@dividend,c
  7789  0030B4  1E1C               	comf	___awdiv@dividend+1,f,c
  7790  0030B6  B0D8               	btfsc	status,0,c
  7791  0030B8  2A1C               	incf	___awdiv@dividend+1,f,c
  7792  0030BA  0E01               	movlw	1
  7793  0030BC  1A20               	xorwf	___awdiv@sign,f,c
  7794  0030BE  D000               	goto	l4841
  7795  0030C0                     l4841:
  7796  0030C0  0E00               	movlw	0
  7797  0030C2  6E22               	movwf	___awdiv@quotient+1,c
  7798  0030C4  0E00               	movlw	0
  7799  0030C6  6E21               	movwf	___awdiv@quotient,c
  7800  0030C8  501D               	movf	___awdiv@divisor,w,c
  7801  0030CA  101E               	iorwf	___awdiv@divisor+1,w,c
  7802  0030CC  B4D8               	btfsc	status,2,c
  7803  0030CE  D021               	goto	l4863
  7804  0030D0  0E01               	movlw	1
  7805  0030D2  6E1F               	movwf	___awdiv@counter,c
  7806  0030D4  D005               	goto	l4849
  7807  0030D6                     l4847:
  7808  0030D6  90D8               	bcf	status,0,c
  7809  0030D8  361D               	rlcf	___awdiv@divisor,f,c
  7810  0030DA  361E               	rlcf	___awdiv@divisor+1,f,c
  7811  0030DC  2A1F               	incf	___awdiv@counter,f,c
  7812  0030DE  D000               	goto	l4849
  7813  0030E0                     l4849:
  7814  0030E0  BE1E               	btfsc	___awdiv@divisor+1,7,c
  7815  0030E2  D002               	goto	l4851
  7816  0030E4  D7F8               	goto	l4847
  7817  0030E6  D000               	goto	l4851
  7818  0030E8                     l4851:
  7819  0030E8  90D8               	bcf	status,0,c
  7820  0030EA  3621               	rlcf	___awdiv@quotient,f,c
  7821  0030EC  3622               	rlcf	___awdiv@quotient+1,f,c
  7822  0030EE  501D               	movf	___awdiv@divisor,w,c
  7823  0030F0  5C1B               	subwf	___awdiv@dividend,w,c
  7824  0030F2  501E               	movf	___awdiv@divisor+1,w,c
  7825  0030F4  581C               	subwfb	___awdiv@dividend+1,w,c
  7826  0030F6  A0D8               	btfss	status,0,c
  7827  0030F8  D006               	goto	l4859
  7828  0030FA  501D               	movf	___awdiv@divisor,w,c
  7829  0030FC  5E1B               	subwf	___awdiv@dividend,f,c
  7830  0030FE  501E               	movf	___awdiv@divisor+1,w,c
  7831  003100  5A1C               	subwfb	___awdiv@dividend+1,f,c
  7832  003102  8021               	bsf	___awdiv@quotient,0,c
  7833  003104  D000               	goto	l4859
  7834  003106                     l4859:
  7835  003106  90D8               	bcf	status,0,c
  7836  003108  321E               	rrcf	___awdiv@divisor+1,f,c
  7837  00310A  321D               	rrcf	___awdiv@divisor,f,c
  7838  00310C  2E1F               	decfsz	___awdiv@counter,f,c
  7839  00310E  D7EC               	goto	l4851
  7840  003110  D000               	goto	l4863
  7841  003112                     l4863:
  7842  003112  5020               	movf	___awdiv@sign,w,c
  7843  003114  B4D8               	btfsc	status,2,c
  7844  003116  D005               	goto	l4867
  7845  003118  6C21               	negf	___awdiv@quotient,c
  7846  00311A  1E22               	comf	___awdiv@quotient+1,f,c
  7847  00311C  B0D8               	btfsc	status,0,c
  7848  00311E  2A22               	incf	___awdiv@quotient+1,f,c
  7849  003120  D000               	goto	l4867
  7850  003122                     l4867:
  7851  003122  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  7852  003126  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  7853  00312A  0012               	return	
  7854  00312C  0012               	return		;funcret
  7855  00312E                     __end_of___awdiv:
  7856                           	opt stack 0
  7857                           tosu	equ	0xFFF
  7858                           tosh	equ	0xFFE
  7859                           tosl	equ	0xFFD
  7860                           pclath	equ	0xFFA
  7861                           tblptru	equ	0xFF8
  7862                           tblptrh	equ	0xFF7
  7863                           tblptrl	equ	0xFF6
  7864                           tablat	equ	0xFF5
  7865                           prodh	equ	0xFF4
  7866                           prodl	equ	0xFF3
  7867                           intcon	equ	0xFF2
  7868                           postinc0	equ	0xFEE
  7869                           wreg	equ	0xFE8
  7870                           postinc1	equ	0xFE6
  7871                           postdec1	equ	0xFE5
  7872                           fsr1h	equ	0xFE2
  7873                           fsr1l	equ	0xFE1
  7874                           indf2	equ	0xFDF
  7875                           postinc2	equ	0xFDE
  7876                           postdec2	equ	0xFDD
  7877                           plusw2	equ	0xFDB
  7878                           fsr2h	equ	0xFDA
  7879                           fsr2l	equ	0xFD9
  7880                           status	equ	0xFD8
  7881                           
  7882 ;; *************** function _TMR1_Initialize *****************
  7883 ;; Defined at:
  7884 ;;		line 18 in file "mcc_generated_files/tmr1.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;		None
  7887 ;; Auto vars:     Size  Location     Type
  7888 ;;		None
  7889 ;; Return value:  Size  Location     Type
  7890 ;;		None               void
  7891 ;; Registers used:
  7892 ;;		wreg, status,2, cstack
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7898 ;;      Params:         0       0       0       0       0       0       0
  7899 ;;      Locals:         0       0       0       0       0       0       0
  7900 ;;      Temps:          0       0       0       0       0       0       0
  7901 ;;      Totals:         0       0       0       0       0       0       0
  7902 ;;Total ram usage:        0 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:    5
  7905 ;; This function calls:
  7906 ;;		_TMR1_StartTimer
  7907 ;; This function is called by:
  7908 ;;		_SYSTEM_Initialize
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           	psect	text36
  7913  003ACC                     __ptext36:
  7914                           	opt stack 0
  7915  003ACC                     _TMR1_Initialize:
  7916                           	opt stack 24
  7917                           
  7918                           ;tmr1.c: 23: T1CON = 0x30;
  7919                           
  7920                           ;incstack = 0
  7921  003ACC  0E30               	movlw	48
  7922  003ACE  6ECD               	movwf	4045,c	;volatile
  7923                           
  7924                           ;tmr1.c: 26: T1GCON = 0x00;
  7925  003AD0  0E00               	movlw	0
  7926  003AD2  6ECC               	movwf	4044,c	;volatile
  7927                           
  7928                           ;tmr1.c: 29: TMR1H = 0x0B;
  7929  003AD4  0E0B               	movlw	11
  7930  003AD6  6ECF               	movwf	4047,c	;volatile
  7931                           
  7932                           ;tmr1.c: 32: TMR1L = 0xDC;
  7933  003AD8  0EDC               	movlw	220
  7934  003ADA  6ECE               	movwf	4046,c	;volatile
  7935                           
  7936                           ;tmr1.c: 35: timer1ReloadVal=TMR1;
  7937  003ADC  CFCE F037          	movff	4046,_timer1ReloadVal	;volatile
  7938  003AE0  CFCF F038          	movff	4047,_timer1ReloadVal+1	;volatile
  7939                           
  7940                           ;tmr1.c: 38: PIR1bits.TMR1IF = 0;
  7941  003AE4  909E               	bcf	3998,0,c	;volatile
  7942                           
  7943                           ;tmr1.c: 41: PIE1bits.TMR1IE = 1;
  7944  003AE6  809D               	bsf	3997,0,c	;volatile
  7945                           
  7946                           ;tmr1.c: 44: TMR1_StartTimer();
  7947  003AE8  EC21  F01E         	call	_TMR1_StartTimer	;wreg free
  7948  003AEC  0012               	return		;funcret
  7949  003AEE                     __end_of_TMR1_Initialize:
  7950                           	opt stack 0
  7951                           tosu	equ	0xFFF
  7952                           tosh	equ	0xFFE
  7953                           tosl	equ	0xFFD
  7954                           pclath	equ	0xFFA
  7955                           tblptru	equ	0xFF8
  7956                           tblptrh	equ	0xFF7
  7957                           tblptrl	equ	0xFF6
  7958                           tablat	equ	0xFF5
  7959                           prodh	equ	0xFF4
  7960                           prodl	equ	0xFF3
  7961                           intcon	equ	0xFF2
  7962                           postinc0	equ	0xFEE
  7963                           wreg	equ	0xFE8
  7964                           postinc1	equ	0xFE6
  7965                           postdec1	equ	0xFE5
  7966                           fsr1h	equ	0xFE2
  7967                           fsr1l	equ	0xFE1
  7968                           indf2	equ	0xFDF
  7969                           postinc2	equ	0xFDE
  7970                           postdec2	equ	0xFDD
  7971                           plusw2	equ	0xFDB
  7972                           fsr2h	equ	0xFDA
  7973                           fsr2l	equ	0xFD9
  7974                           status	equ	0xFD8
  7975                           
  7976 ;; *************** function _TMR1_StartTimer *****************
  7977 ;; Defined at:
  7978 ;;		line 47 in file "mcc_generated_files/tmr1.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;		None
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;		None
  7983 ;; Return value:  Size  Location     Type
  7984 ;;		None               void
  7985 ;; Registers used:
  7986 ;;		None
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7992 ;;      Params:         0       0       0       0       0       0       0
  7993 ;;      Locals:         0       0       0       0       0       0       0
  7994 ;;      Temps:          0       0       0       0       0       0       0
  7995 ;;      Totals:         0       0       0       0       0       0       0
  7996 ;;Total ram usage:        0 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; Hardware stack levels required when called:    4
  7999 ;; This function calls:
  8000 ;;		Nothing
  8001 ;; This function is called by:
  8002 ;;		_TMR1_Initialize
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           	psect	text37
  8007  003C42                     __ptext37:
  8008                           	opt stack 0
  8009  003C42                     _TMR1_StartTimer:
  8010                           	opt stack 24
  8011                           
  8012                           ;tmr1.c: 50: T1CONbits.TMR1ON = 1;
  8013                           
  8014                           ;incstack = 0
  8015  003C42  80CD               	bsf	4045,0,c	;volatile
  8016  003C44  0012               	return		;funcret
  8017  003C46                     __end_of_TMR1_StartTimer:
  8018                           	opt stack 0
  8019                           tosu	equ	0xFFF
  8020                           tosh	equ	0xFFE
  8021                           tosl	equ	0xFFD
  8022                           pclath	equ	0xFFA
  8023                           tblptru	equ	0xFF8
  8024                           tblptrh	equ	0xFF7
  8025                           tblptrl	equ	0xFF6
  8026                           tablat	equ	0xFF5
  8027                           prodh	equ	0xFF4
  8028                           prodl	equ	0xFF3
  8029                           intcon	equ	0xFF2
  8030                           postinc0	equ	0xFEE
  8031                           wreg	equ	0xFE8
  8032                           postinc1	equ	0xFE6
  8033                           postdec1	equ	0xFE5
  8034                           fsr1h	equ	0xFE2
  8035                           fsr1l	equ	0xFE1
  8036                           indf2	equ	0xFDF
  8037                           postinc2	equ	0xFDE
  8038                           postdec2	equ	0xFDD
  8039                           plusw2	equ	0xFDB
  8040                           fsr2h	equ	0xFDA
  8041                           fsr2l	equ	0xFD9
  8042                           status	equ	0xFD8
  8043                           
  8044 ;; *************** function _PIN_MANAGER_Initialize *****************
  8045 ;; Defined at:
  8046 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;		None
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;		None
  8051 ;; Return value:  Size  Location     Type
  8052 ;;		None               void
  8053 ;; Registers used:
  8054 ;;		wreg, status,2
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8060 ;;      Params:         0       0       0       0       0       0       0
  8061 ;;      Locals:         0       0       0       0       0       0       0
  8062 ;;      Temps:          0       0       0       0       0       0       0
  8063 ;;      Totals:         0       0       0       0       0       0       0
  8064 ;;Total ram usage:        0 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; Hardware stack levels required when called:    4
  8067 ;; This function calls:
  8068 ;;		Nothing
  8069 ;; This function is called by:
  8070 ;;		_SYSTEM_Initialize
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           	psect	text38
  8075  00367A                     __ptext38:
  8076                           	opt stack 0
  8077  00367A                     _PIN_MANAGER_Initialize:
  8078                           	opt stack 25
  8079                           
  8080                           ;pin_manager.c: 8: LATA = 0x00;
  8081                           
  8082                           ;incstack = 0
  8083  00367A  0E00               	movlw	0
  8084  00367C  6E89               	movwf	3977,c	;volatile
  8085                           
  8086                           ;pin_manager.c: 9: TRISA = 0xAE;
  8087  00367E  0EAE               	movlw	174
  8088  003680  6E92               	movwf	3986,c	;volatile
  8089                           
  8090                           ;pin_manager.c: 10: ANSELA = 0x2E;
  8091  003682  0E2E               	movlw	46
  8092  003684  010F               	movlb	15	; () banked
  8093  003686  6F38               	movwf	56,b	;volatile
  8094                           
  8095                           ;pin_manager.c: 12: LATB = 0x00;
  8096  003688  0E00               	movlw	0
  8097  00368A  6E8A               	movwf	3978,c	;volatile
  8098                           
  8099                           ;pin_manager.c: 13: TRISB = 0xF4;
  8100  00368C  0EF4               	movlw	244
  8101  00368E  6E93               	movwf	3987,c	;volatile
  8102                           
  8103                           ;pin_manager.c: 14: ANSELB = 0x34;
  8104  003690  0E34               	movlw	52
  8105  003692  010F               	movlb	15	; () banked
  8106  003694  6F39               	movwf	57,b	;volatile
  8107                           
  8108                           ;pin_manager.c: 15: WPUB = 0x00;
  8109  003696  0E00               	movlw	0
  8110  003698  6E61               	movwf	3937,c	;volatile
  8111                           
  8112                           ;pin_manager.c: 17: LATC = 0x48;
  8113  00369A  0E48               	movlw	72
  8114  00369C  6E8B               	movwf	3979,c	;volatile
  8115                           
  8116                           ;pin_manager.c: 18: TRISC = 0xC4;
  8117  00369E  0EC4               	movlw	196
  8118  0036A0  6E94               	movwf	3988,c	;volatile
  8119                           
  8120                           ;pin_manager.c: 19: ANSELC = 0x04;
  8121  0036A2  0E04               	movlw	4
  8122  0036A4  010F               	movlb	15	; () banked
  8123  0036A6  6F3A               	movwf	58,b	;volatile
  8124                           
  8125                           ;pin_manager.c: 21: LATD = 0x00;
  8126  0036A8  0E00               	movlw	0
  8127  0036AA  6E8C               	movwf	3980,c	;volatile
  8128                           
  8129                           ;pin_manager.c: 22: TRISD = 0xD1;
  8130  0036AC  0ED1               	movlw	209
  8131  0036AE  6E95               	movwf	3989,c	;volatile
  8132                           
  8133                           ;pin_manager.c: 23: ANSELD = 0xD1;
  8134  0036B0  0ED1               	movlw	209
  8135  0036B2  010F               	movlb	15	; () banked
  8136  0036B4  6F3B               	movwf	59,b	;volatile
  8137                           
  8138                           ;pin_manager.c: 25: LATE = 0x00;
  8139  0036B6  0E00               	movlw	0
  8140  0036B8  6E8D               	movwf	3981,c	;volatile
  8141                           
  8142                           ;pin_manager.c: 26: TRISE = 0x04;
  8143  0036BA  0E04               	movlw	4
  8144  0036BC  6E96               	movwf	3990,c	;volatile
  8145                           
  8146                           ;pin_manager.c: 27: ANSELE = 0x04;
  8147  0036BE  0E04               	movlw	4
  8148  0036C0  010F               	movlb	15	; () banked
  8149  0036C2  6F3C               	movwf	60,b	;volatile
  8150                           
  8151                           ; BSR set to: 15
  8152                           ;pin_manager.c: 29: TRISCbits.TRISC6 = 1;
  8153  0036C4  8C94               	bsf	3988,6,c	;volatile
  8154                           
  8155                           ; BSR set to: 15
  8156                           ;pin_manager.c: 30: TRISCbits.TRISC7 = 1;
  8157  0036C6  8E94               	bsf	3988,7,c	;volatile
  8158                           
  8159                           ; BSR set to: 15
  8160                           ;pin_manager.c: 34: INTCON2bits.nRBPU = 0x01;
  8161  0036C8  8EF1               	bsf	intcon2,7,c	;volatile
  8162                           
  8163                           ; BSR set to: 15
  8164  0036CA  0012               	return		;funcret
  8165  0036CC                     __end_of_PIN_MANAGER_Initialize:
  8166                           	opt stack 0
  8167                           tosu	equ	0xFFF
  8168                           tosh	equ	0xFFE
  8169                           tosl	equ	0xFFD
  8170                           pclath	equ	0xFFA
  8171                           tblptru	equ	0xFF8
  8172                           tblptrh	equ	0xFF7
  8173                           tblptrl	equ	0xFF6
  8174                           tablat	equ	0xFF5
  8175                           prodh	equ	0xFF4
  8176                           prodl	equ	0xFF3
  8177                           intcon	equ	0xFF2
  8178                           intcon2	equ	0xFF1
  8179                           postinc0	equ	0xFEE
  8180                           wreg	equ	0xFE8
  8181                           postinc1	equ	0xFE6
  8182                           postdec1	equ	0xFE5
  8183                           fsr1h	equ	0xFE2
  8184                           fsr1l	equ	0xFE1
  8185                           indf2	equ	0xFDF
  8186                           postinc2	equ	0xFDE
  8187                           postdec2	equ	0xFDD
  8188                           plusw2	equ	0xFDB
  8189                           fsr2h	equ	0xFDA
  8190                           fsr2l	equ	0xFD9
  8191                           status	equ	0xFD8
  8192                           
  8193 ;; *************** function _OSCILLATOR_Initialize *****************
  8194 ;; Defined at:
  8195 ;;		line 124 in file "mcc_generated_files/mcc.c"
  8196 ;; Parameters:    Size  Location     Type
  8197 ;;		None
  8198 ;; Auto vars:     Size  Location     Type
  8199 ;;		None
  8200 ;; Return value:  Size  Location     Type
  8201 ;;		None               void
  8202 ;; Registers used:
  8203 ;;		wreg, status,2
  8204 ;; Tracked objects:
  8205 ;;		On entry : 0/0
  8206 ;;		On exit  : 0/0
  8207 ;;		Unchanged: 0/0
  8208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8209 ;;      Params:         0       0       0       0       0       0       0
  8210 ;;      Locals:         0       0       0       0       0       0       0
  8211 ;;      Temps:          0       0       0       0       0       0       0
  8212 ;;      Totals:         0       0       0       0       0       0       0
  8213 ;;Total ram usage:        0 bytes
  8214 ;; Hardware stack levels used:    1
  8215 ;; Hardware stack levels required when called:    4
  8216 ;; This function calls:
  8217 ;;		Nothing
  8218 ;; This function is called by:
  8219 ;;		_SYSTEM_Initialize
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           	psect	text39
  8224  003C28                     __ptext39:
  8225                           	opt stack 0
  8226  003C28                     _OSCILLATOR_Initialize:
  8227                           	opt stack 25
  8228                           
  8229                           ;mcc.c: 126: OSCCON = 0x62;
  8230                           
  8231                           ; BSR set to: 15
  8232                           ;incstack = 0
  8233  003C28  0E62               	movlw	98
  8234  003C2A  6ED3               	movwf	4051,c	;volatile
  8235                           
  8236                           ;mcc.c: 128: OSCCON2 = 0x04;
  8237  003C2C  0E04               	movlw	4
  8238  003C2E  6ED2               	movwf	4050,c	;volatile
  8239                           
  8240                           ;mcc.c: 130: OSCTUNE = 0x00;
  8241  003C30  0E00               	movlw	0
  8242  003C32  6E9B               	movwf	3995,c	;volatile
  8243  003C34  0012               	return		;funcret
  8244  003C36                     __end_of_OSCILLATOR_Initialize:
  8245                           	opt stack 0
  8246                           tosu	equ	0xFFF
  8247                           tosh	equ	0xFFE
  8248                           tosl	equ	0xFFD
  8249                           pclath	equ	0xFFA
  8250                           tblptru	equ	0xFF8
  8251                           tblptrh	equ	0xFF7
  8252                           tblptrl	equ	0xFF6
  8253                           tablat	equ	0xFF5
  8254                           prodh	equ	0xFF4
  8255                           prodl	equ	0xFF3
  8256                           intcon	equ	0xFF2
  8257                           intcon2	equ	0xFF1
  8258                           postinc0	equ	0xFEE
  8259                           wreg	equ	0xFE8
  8260                           postinc1	equ	0xFE6
  8261                           postdec1	equ	0xFE5
  8262                           fsr1h	equ	0xFE2
  8263                           fsr1l	equ	0xFE1
  8264                           indf2	equ	0xFDF
  8265                           postinc2	equ	0xFDE
  8266                           postdec2	equ	0xFDD
  8267                           plusw2	equ	0xFDB
  8268                           fsr2h	equ	0xFDA
  8269                           fsr2l	equ	0xFD9
  8270                           status	equ	0xFD8
  8271                           
  8272 ;; *************** function _INTERRUPT_Initialize *****************
  8273 ;; Defined at:
  8274 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8275 ;; Parameters:    Size  Location     Type
  8276 ;;		None
  8277 ;; Auto vars:     Size  Location     Type
  8278 ;;		None
  8279 ;; Return value:  Size  Location     Type
  8280 ;;		None               void
  8281 ;; Registers used:
  8282 ;;		None
  8283 ;; Tracked objects:
  8284 ;;		On entry : 0/0
  8285 ;;		On exit  : 0/0
  8286 ;;		Unchanged: 0/0
  8287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8288 ;;      Params:         0       0       0       0       0       0       0
  8289 ;;      Locals:         0       0       0       0       0       0       0
  8290 ;;      Temps:          0       0       0       0       0       0       0
  8291 ;;      Totals:         0       0       0       0       0       0       0
  8292 ;;Total ram usage:        0 bytes
  8293 ;; Hardware stack levels used:    1
  8294 ;; Hardware stack levels required when called:    4
  8295 ;; This function calls:
  8296 ;;		Nothing
  8297 ;; This function is called by:
  8298 ;;		_SYSTEM_Initialize
  8299 ;; This function uses a non-reentrant model
  8300 ;;
  8301                           
  8302                           	psect	text40
  8303  003C36                     __ptext40:
  8304                           	opt stack 0
  8305  003C36                     _INTERRUPT_Initialize:
  8306                           	opt stack 25
  8307                           
  8308                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  8309                           
  8310                           ;incstack = 0
  8311  003C36  9ED0               	bcf	4048,7,c	;volatile
  8312                           
  8313                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  8314  003C38  9A9F               	bcf	3999,5,c	;volatile
  8315                           
  8316                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  8317  003C3A  9C9F               	bcf	3999,6,c	;volatile
  8318                           
  8319                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  8320  003C3C  909F               	bcf	3999,0,c	;volatile
  8321                           
  8322                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  8323  003C3E  989F               	bcf	3999,4,c	;volatile
  8324  003C40  0012               	return		;funcret
  8325  003C42                     __end_of_INTERRUPT_Initialize:
  8326                           	opt stack 0
  8327                           tosu	equ	0xFFF
  8328                           tosh	equ	0xFFE
  8329                           tosl	equ	0xFFD
  8330                           pclath	equ	0xFFA
  8331                           tblptru	equ	0xFF8
  8332                           tblptrh	equ	0xFF7
  8333                           tblptrl	equ	0xFF6
  8334                           tablat	equ	0xFF5
  8335                           prodh	equ	0xFF4
  8336                           prodl	equ	0xFF3
  8337                           intcon	equ	0xFF2
  8338                           intcon2	equ	0xFF1
  8339                           postinc0	equ	0xFEE
  8340                           wreg	equ	0xFE8
  8341                           postinc1	equ	0xFE6
  8342                           postdec1	equ	0xFE5
  8343                           fsr1h	equ	0xFE2
  8344                           fsr1l	equ	0xFE1
  8345                           indf2	equ	0xFDF
  8346                           postinc2	equ	0xFDE
  8347                           postdec2	equ	0xFDD
  8348                           plusw2	equ	0xFDB
  8349                           fsr2h	equ	0xFDA
  8350                           fsr2l	equ	0xFD9
  8351                           status	equ	0xFD8
  8352                           
  8353 ;; *************** function _EUSART1_Initialize *****************
  8354 ;; Defined at:
  8355 ;;		line 21 in file "UART.c"
  8356 ;; Parameters:    Size  Location     Type
  8357 ;;		None
  8358 ;; Auto vars:     Size  Location     Type
  8359 ;;		None
  8360 ;; Return value:  Size  Location     Type
  8361 ;;		None               void
  8362 ;; Registers used:
  8363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8364 ;; Tracked objects:
  8365 ;;		On entry : 0/0
  8366 ;;		On exit  : 0/0
  8367 ;;		Unchanged: 0/0
  8368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8369 ;;      Params:         0       0       0       0       0       0       0
  8370 ;;      Locals:         0       0       0       0       0       0       0
  8371 ;;      Temps:          0       0       0       0       0       0       0
  8372 ;;      Totals:         0       0       0       0       0       0       0
  8373 ;;Total ram usage:        0 bytes
  8374 ;; Hardware stack levels used:    1
  8375 ;; Hardware stack levels required when called:    6
  8376 ;; This function calls:
  8377 ;;		_UART_buff_init
  8378 ;; This function is called by:
  8379 ;;		_SYSTEM_Initialize
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           	psect	text41
  8384  0038BE                     __ptext41:
  8385                           	opt stack 0
  8386  0038BE                     _EUSART1_Initialize:
  8387                           	opt stack 23
  8388                           
  8389                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  8390                           
  8391                           ;incstack = 0
  8392  0038BE  9A9D               	bcf	3997,5,c	;volatile
  8393                           
  8394                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  8395  0038C0  989D               	bcf	3997,4,c	;volatile
  8396                           
  8397                           ;UART.c: 29: BAUD1CON = 0x48;
  8398  0038C2  0E48               	movlw	72
  8399  0038C4  6EB8               	movwf	4024,c	;volatile
  8400                           
  8401                           ;UART.c: 32: RC1STA = 0x98;
  8402  0038C6  0E98               	movlw	152
  8403  0038C8  6EAB               	movwf	4011,c	;volatile
  8404                           
  8405                           ;UART.c: 35: TX1STA = 0x26;
  8406  0038CA  0E26               	movlw	38
  8407  0038CC  6EAC               	movwf	4012,c	;volatile
  8408                           
  8409                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  8410  0038CE  0E33               	movlw	51
  8411  0038D0  6EAF               	movwf	4015,c	;volatile
  8412                           
  8413                           ;UART.c: 41: SPBRGH1 = 0x00;
  8414  0038D2  0E00               	movlw	0
  8415  0038D4  6EB0               	movwf	4016,c	;volatile
  8416                           
  8417                           ;UART.c: 44: TXREG1 = 0x00;
  8418  0038D6  0E00               	movlw	0
  8419  0038D8  6EAD               	movwf	4013,c	;volatile
  8420                           
  8421                           ;UART.c: 47: RCREG1 = 0x00;
  8422  0038DA  0E00               	movlw	0
  8423  0038DC  6EAE               	movwf	4014,c	;volatile
  8424                           
  8425                           ;UART.c: 49: UART_buff_init(&input_buffer);
  8426  0038DE  0E00               	movlw	low _input_buffer
  8427  0038E0  6E23               	movwf	UART_buff_init@_this,c
  8428  0038E2  0E04               	movlw	high _input_buffer
  8429  0038E4  6E24               	movwf	UART_buff_init@_this+1,c
  8430  0038E6  EC86  F01D         	call	_UART_buff_init	;wreg free
  8431                           
  8432                           ;UART.c: 50: UART_buff_init(&output_buffer);
  8433  0038EA  0E00               	movlw	low _output_buffer
  8434  0038EC  6E23               	movwf	UART_buff_init@_this,c
  8435  0038EE  0E05               	movlw	high _output_buffer
  8436  0038F0  6E24               	movwf	UART_buff_init@_this+1,c
  8437  0038F2  EC86  F01D         	call	_UART_buff_init	;wreg free
  8438                           
  8439                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  8440  0038F6  8A9D               	bsf	3997,5,c	;volatile
  8441  0038F8  0012               	return		;funcret
  8442  0038FA                     __end_of_EUSART1_Initialize:
  8443                           	opt stack 0
  8444                           tosu	equ	0xFFF
  8445                           tosh	equ	0xFFE
  8446                           tosl	equ	0xFFD
  8447                           pclath	equ	0xFFA
  8448                           tblptru	equ	0xFF8
  8449                           tblptrh	equ	0xFF7
  8450                           tblptrl	equ	0xFF6
  8451                           tablat	equ	0xFF5
  8452                           prodh	equ	0xFF4
  8453                           prodl	equ	0xFF3
  8454                           intcon	equ	0xFF2
  8455                           intcon2	equ	0xFF1
  8456                           postinc0	equ	0xFEE
  8457                           wreg	equ	0xFE8
  8458                           postinc1	equ	0xFE6
  8459                           postdec1	equ	0xFE5
  8460                           fsr1h	equ	0xFE2
  8461                           fsr1l	equ	0xFE1
  8462                           indf2	equ	0xFDF
  8463                           postinc2	equ	0xFDE
  8464                           postdec2	equ	0xFDD
  8465                           plusw2	equ	0xFDB
  8466                           fsr2h	equ	0xFDA
  8467                           fsr2l	equ	0xFD9
  8468                           status	equ	0xFD8
  8469                           
  8470 ;; *************** function _UART_buff_init *****************
  8471 ;; Defined at:
  8472 ;;		line 56 in file "UART.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  8475 ;;		 -> output_buffer(206), input_buffer(206), 
  8476 ;; Auto vars:     Size  Location     Type
  8477 ;;		None
  8478 ;; Return value:  Size  Location     Type
  8479 ;;		None               void
  8480 ;; Registers used:
  8481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 0/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8487 ;;      Params:         2       0       0       0       0       0       0
  8488 ;;      Locals:         0       0       0       0       0       0       0
  8489 ;;      Temps:          0       0       0       0       0       0       0
  8490 ;;      Totals:         2       0       0       0       0       0       0
  8491 ;;Total ram usage:        2 bytes
  8492 ;; Hardware stack levels used:    1
  8493 ;; Hardware stack levels required when called:    5
  8494 ;; This function calls:
  8495 ;;		_memset
  8496 ;; This function is called by:
  8497 ;;		_EUSART1_Initialize
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501                           	psect	text42
  8502  003B0C                     __ptext42:
  8503                           	opt stack 0
  8504  003B0C                     _UART_buff_init:
  8505                           	opt stack 23
  8506                           
  8507                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  8508                           
  8509                           ;incstack = 0
  8510  003B0C  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  8511  003B10  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  8512  003B14  0E00               	movlw	0
  8513  003B16  6E1E               	movwf	memset@c+1,c
  8514  003B18  0E00               	movlw	0
  8515  003B1A  6E1D               	movwf	memset@c,c
  8516  003B1C  0E00               	movlw	0
  8517  003B1E  6E20               	movwf	memset@n+1,c
  8518  003B20  0ECE               	movlw	206
  8519  003B22  6E1F               	movwf	memset@n,c
  8520  003B24  EC11  F01D         	call	_memset	;wreg free
  8521  003B28  0012               	return		;funcret
  8522  003B2A                     __end_of_UART_buff_init:
  8523                           	opt stack 0
  8524                           tosu	equ	0xFFF
  8525                           tosh	equ	0xFFE
  8526                           tosl	equ	0xFFD
  8527                           pclath	equ	0xFFA
  8528                           tblptru	equ	0xFF8
  8529                           tblptrh	equ	0xFF7
  8530                           tblptrl	equ	0xFF6
  8531                           tablat	equ	0xFF5
  8532                           prodh	equ	0xFF4
  8533                           prodl	equ	0xFF3
  8534                           intcon	equ	0xFF2
  8535                           intcon2	equ	0xFF1
  8536                           postinc0	equ	0xFEE
  8537                           wreg	equ	0xFE8
  8538                           postinc1	equ	0xFE6
  8539                           postdec1	equ	0xFE5
  8540                           fsr1h	equ	0xFE2
  8541                           fsr1l	equ	0xFE1
  8542                           indf2	equ	0xFDF
  8543                           postinc2	equ	0xFDE
  8544                           postdec2	equ	0xFDD
  8545                           plusw2	equ	0xFDB
  8546                           fsr2h	equ	0xFDA
  8547                           fsr2l	equ	0xFD9
  8548                           status	equ	0xFD8
  8549                           
  8550 ;; *************** function _memset *****************
  8551 ;; Defined at:
  8552 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\memset.c"
  8553 ;; Parameters:    Size  Location     Type
  8554 ;;  p1              2   26[COMRAM] PTR void 
  8555 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8556 ;;  c               2   28[COMRAM] int 
  8557 ;;  n               2   30[COMRAM] unsigned int 
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;  p               2   32[COMRAM] PTR unsigned char 
  8560 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8561 ;; Return value:  Size  Location     Type
  8562 ;;                  2   26[COMRAM] PTR void 
  8563 ;; Registers used:
  8564 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8565 ;; Tracked objects:
  8566 ;;		On entry : 0/0
  8567 ;;		On exit  : 0/0
  8568 ;;		Unchanged: 0/0
  8569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8570 ;;      Params:         6       0       0       0       0       0       0
  8571 ;;      Locals:         2       0       0       0       0       0       0
  8572 ;;      Temps:          0       0       0       0       0       0       0
  8573 ;;      Totals:         8       0       0       0       0       0       0
  8574 ;;Total ram usage:        8 bytes
  8575 ;; Hardware stack levels used:    1
  8576 ;; Hardware stack levels required when called:    4
  8577 ;; This function calls:
  8578 ;;		Nothing
  8579 ;; This function is called by:
  8580 ;;		_FastTransfer_buffer_flush
  8581 ;;		_UART_buff_init
  8582 ;;		_UART_buff_flush
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           	psect	text43
  8587  003A22                     __ptext43:
  8588                           	opt stack 0
  8589  003A22                     _memset:
  8590                           	opt stack 23
  8591                           
  8592                           ;incstack = 0
  8593  003A22  C01B  F021         	movff	memset@p1,memset@p
  8594  003A26  C01C  F022         	movff	memset@p1+1,memset@p+1
  8595  003A2A  D009               	goto	l3105
  8596  003A2C                     l3101:
  8597  003A2C  C021  FFD9         	movff	memset@p,fsr2l
  8598  003A30  C022  FFDA         	movff	memset@p+1,fsr2h
  8599  003A34  C01D  FFDF         	movff	memset@c,indf2
  8600  003A38  4A21               	infsnz	memset@p,f,c
  8601  003A3A  2A22               	incf	memset@p+1,f,c
  8602  003A3C  D000               	goto	l3105
  8603  003A3E                     l3105:
  8604  003A3E  061F               	decf	memset@n,f,c
  8605  003A40  A0D8               	btfss	status,0,c
  8606  003A42  0620               	decf	memset@n+1,f,c
  8607  003A44  281F               	incf	memset@n,w,c
  8608  003A46  E1F2               	bnz	l3101
  8609  003A48  2820               	incf	memset@n+1,w,c
  8610  003A4A  A4D8               	btfss	status,2,c
  8611  003A4C  D7EF               	goto	l3101
  8612                           
  8613                           ;	Return value of _memset is never used
  8614  003A4E  0012               	return		;funcret
  8615  003A50                     __end_of_memset:
  8616                           	opt stack 0
  8617                           tosu	equ	0xFFF
  8618                           tosh	equ	0xFFE
  8619                           tosl	equ	0xFFD
  8620                           pclath	equ	0xFFA
  8621                           tblptru	equ	0xFF8
  8622                           tblptrh	equ	0xFF7
  8623                           tblptrl	equ	0xFF6
  8624                           tablat	equ	0xFF5
  8625                           prodh	equ	0xFF4
  8626                           prodl	equ	0xFF3
  8627                           intcon	equ	0xFF2
  8628                           intcon2	equ	0xFF1
  8629                           postinc0	equ	0xFEE
  8630                           wreg	equ	0xFE8
  8631                           postinc1	equ	0xFE6
  8632                           postdec1	equ	0xFE5
  8633                           fsr1h	equ	0xFE2
  8634                           fsr1l	equ	0xFE1
  8635                           indf2	equ	0xFDF
  8636                           postinc2	equ	0xFDE
  8637                           postdec2	equ	0xFDD
  8638                           plusw2	equ	0xFDB
  8639                           fsr2h	equ	0xFDA
  8640                           fsr2l	equ	0xFD9
  8641                           status	equ	0xFD8
  8642                           
  8643 ;; *************** function _ADC_Initialize *****************
  8644 ;; Defined at:
  8645 ;;		line 13 in file "mcc_generated_files/adc.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;		None
  8648 ;; Auto vars:     Size  Location     Type
  8649 ;;		None
  8650 ;; Return value:  Size  Location     Type
  8651 ;;		None               void
  8652 ;; Registers used:
  8653 ;;		wreg, status,2
  8654 ;; Tracked objects:
  8655 ;;		On entry : 0/0
  8656 ;;		On exit  : 0/0
  8657 ;;		Unchanged: 0/0
  8658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8659 ;;      Params:         0       0       0       0       0       0       0
  8660 ;;      Locals:         0       0       0       0       0       0       0
  8661 ;;      Temps:          0       0       0       0       0       0       0
  8662 ;;      Totals:         0       0       0       0       0       0       0
  8663 ;;Total ram usage:        0 bytes
  8664 ;; Hardware stack levels used:    1
  8665 ;; Hardware stack levels required when called:    4
  8666 ;; This function calls:
  8667 ;;		Nothing
  8668 ;; This function is called by:
  8669 ;;		_SYSTEM_Initialize
  8670 ;; This function uses a non-reentrant model
  8671 ;;
  8672                           
  8673                           	psect	text44
  8674  003B92                     __ptext44:
  8675                           	opt stack 0
  8676  003B92                     _ADC_Initialize:
  8677                           	opt stack 25
  8678                           
  8679                           ;adc.c: 18: ADCON0 = 0x01;
  8680                           
  8681                           ;incstack = 0
  8682  003B92  0E01               	movlw	1
  8683  003B94  6EC2               	movwf	4034,c	;volatile
  8684                           
  8685                           ;adc.c: 21: ADCON1 = 0x80;
  8686  003B96  0E80               	movlw	128
  8687  003B98  6EC1               	movwf	4033,c	;volatile
  8688                           
  8689                           ;adc.c: 24: ADCON2 = 0xA9;
  8690  003B9A  0EA9               	movlw	169
  8691  003B9C  6EC0               	movwf	4032,c	;volatile
  8692                           
  8693                           ;adc.c: 27: ADRESL = 0x00;
  8694  003B9E  0E00               	movlw	0
  8695  003BA0  6EC3               	movwf	4035,c	;volatile
  8696                           
  8697                           ;adc.c: 30: ADRESH = 0x00;
  8698  003BA2  0E00               	movlw	0
  8699  003BA4  6EC4               	movwf	4036,c	;volatile
  8700                           
  8701                           ;adc.c: 33: PIE1bits.ADIE = 1;
  8702  003BA6  8C9D               	bsf	3997,6,c	;volatile
  8703  003BA8  0012               	return		;funcret
  8704  003BAA                     __end_of_ADC_Initialize:
  8705                           	opt stack 0
  8706                           tosu	equ	0xFFF
  8707                           tosh	equ	0xFFE
  8708                           tosl	equ	0xFFD
  8709                           pclath	equ	0xFFA
  8710                           tblptru	equ	0xFF8
  8711                           tblptrh	equ	0xFF7
  8712                           tblptrl	equ	0xFF6
  8713                           tablat	equ	0xFF5
  8714                           prodh	equ	0xFF4
  8715                           prodl	equ	0xFF3
  8716                           intcon	equ	0xFF2
  8717                           intcon2	equ	0xFF1
  8718                           postinc0	equ	0xFEE
  8719                           wreg	equ	0xFE8
  8720                           postinc1	equ	0xFE6
  8721                           postdec1	equ	0xFE5
  8722                           fsr1h	equ	0xFE2
  8723                           fsr1l	equ	0xFE1
  8724                           indf2	equ	0xFDF
  8725                           postinc2	equ	0xFDE
  8726                           postdec2	equ	0xFDD
  8727                           plusw2	equ	0xFDB
  8728                           fsr2h	equ	0xFDA
  8729                           fsr2l	equ	0xFD9
  8730                           status	equ	0xFD8
  8731                           
  8732 ;; *************** function _RunBypas *****************
  8733 ;; Defined at:
  8734 ;;		line 129 in file "Bypass.c"
  8735 ;; Parameters:    Size  Location     Type
  8736 ;;		None
  8737 ;; Auto vars:     Size  Location     Type
  8738 ;;  batvolt         3   35[BANK0 ] float 
  8739 ;;  i               2   38[BANK0 ] int 
  8740 ;;  cellbyp         2   33[BANK0 ] int 
  8741 ;; Return value:  Size  Location     Type
  8742 ;;                  2  409[None  ] int 
  8743 ;; Registers used:
  8744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8745 ;; Tracked objects:
  8746 ;;		On entry : 0/0
  8747 ;;		On exit  : 0/0
  8748 ;;		Unchanged: 0/0
  8749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8750 ;;      Params:         0       0       0       0       0       0       0
  8751 ;;      Locals:         0       7       0       0       0       0       0
  8752 ;;      Temps:          0       0       0       0       0       0       0
  8753 ;;      Totals:         0       7       0       0       0       0       0
  8754 ;;Total ram usage:        7 bytes
  8755 ;; Hardware stack levels used:    1
  8756 ;; Hardware stack levels required when called:    7
  8757 ;; This function calls:
  8758 ;;		_Battery_Get
  8759 ;;		_SetBypass
  8760 ;;		___ftge
  8761 ;; This function is called by:
  8762 ;;		_main
  8763 ;; This function uses a non-reentrant model
  8764 ;;
  8765                           
  8766                           	psect	text45
  8767  002BA8                     __ptext45:
  8768                           	opt stack 0
  8769  002BA8                     _RunBypas:
  8770                           	opt stack 23
  8771                           
  8772                           ;Bypass.c: 131: int cellbyp = 0;
  8773                           
  8774                           ;incstack = 0
  8775  002BA8  0E00               	movlw	0
  8776  002BAA  0100               	movlb	0	; () banked
  8777  002BAC  6FE3               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  8778  002BAE  0E00               	movlw	0
  8779  002BB0  6FE2               	movwf	RunBypas@cellbyp& (0+255),b
  8780                           
  8781                           ;Bypass.c: 132: int i = 0;
  8782  002BB2  0E00               	movlw	0
  8783  002BB4  0100               	movlb	0	; () banked
  8784  002BB6  6FE8               	movwf	(RunBypas@i+1)& (0+255),b
  8785  002BB8  0E00               	movlw	0
  8786  002BBA  6FE7               	movwf	RunBypas@i& (0+255),b
  8787                           
  8788                           ;Bypass.c: 133: float batvolt = 0;
  8789  002BBC  0E00               	movlw	0
  8790  002BBE  0100               	movlb	0	; () banked
  8791  002BC0  6FE4               	movwf	RunBypas@batvolt& (0+255),b
  8792  002BC2  0E00               	movlw	0
  8793  002BC4  0100               	movlb	0	; () banked
  8794  002BC6  6FE5               	movwf	(RunBypas@batvolt+1)& (0+255),b
  8795  002BC8  0E00               	movlw	0
  8796  002BCA  0100               	movlb	0	; () banked
  8797  002BCC  6FE6               	movwf	(RunBypas@batvolt+2)& (0+255),b
  8798                           
  8799                           ;Bypass.c: 135: for(i = 0; i<9;i++)
  8800  002BCE  0E00               	movlw	0
  8801  002BD0  0100               	movlb	0	; () banked
  8802  002BD2  6FE8               	movwf	(RunBypas@i+1)& (0+255),b
  8803  002BD4  0E00               	movlw	0
  8804  002BD6  6FE7               	movwf	RunBypas@i& (0+255),b
  8805  002BD8                     l5353:
  8806                           
  8807                           ; BSR set to: 0
  8808  002BD8  0100               	movlb	0	; () banked
  8809  002BDA  BFE8               	btfsc	(RunBypas@i+1)& (0+255),7,b
  8810  002BDC  D00A               	goto	l5357
  8811  002BDE  0100               	movlb	0	; () banked
  8812  002BE0  51E8               	movf	(RunBypas@i+1)& (0+255),w,b
  8813  002BE2  E153               	bnz	l529
  8814  002BE4  0E09               	movlw	9
  8815  002BE6  0100               	movlb	0	; () banked
  8816  002BE8  5DE7               	subwf	RunBypas@i& (0+255),w,b
  8817  002BEA  B0D8               	btfsc	status,0,c
  8818  002BEC  0012               	return	
  8819  002BEE  D001               	goto	l5357
  8820                           
  8821                           ; BSR set to: 0
  8822  002BF0  0012               	return	
  8823  002BF2                     l5357:
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;Bypass.c: 136: {
  8827                           ;Bypass.c: 137: batvolt = Battery_Get(i);
  8828  002BF2  C0E7  F0DF         	movff	RunBypas@i,Battery_Get@channelnum
  8829  002BF6  C0E8  F0E0         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  8830  002BFA  EC66  F01B         	call	_Battery_Get	;wreg free
  8831  002BFE  C0DF  F0E4         	movff	?_Battery_Get,RunBypas@batvolt
  8832  002C02  C0E0  F0E5         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  8833  002C06  C0E1  F0E6         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  8834                           
  8835                           ;Bypass.c: 139: if(batvolt >= 4.18)
  8836  002C0A  C0E4  F021         	movff	RunBypas@batvolt,___ftge@ff1
  8837  002C0E  C0E5  F022         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  8838  002C12  C0E6  F023         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  8839  002C16  0EC3               	movlw	195
  8840  002C18  6E24               	movwf	___ftge@ff2,c
  8841  002C1A  0E85               	movlw	133
  8842  002C1C  6E25               	movwf	___ftge@ff2+1,c
  8843  002C1E  0E40               	movlw	64
  8844  002C20  6E26               	movwf	___ftge@ff2+2,c
  8845  002C22  EC97  F018         	call	___ftge	;wreg free
  8846  002C26  A0D8               	btfss	status,0,c
  8847  002C28  D010               	goto	l5365
  8848                           
  8849                           ;Bypass.c: 140: {
  8850                           ;Bypass.c: 141: SetBypass(i,1);
  8851  002C2A  C0E7  F01B         	movff	RunBypas@i,SetBypass@pin
  8852  002C2E  C0E8  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8853  002C32  0E00               	movlw	0
  8854  002C34  6E1E               	movwf	SetBypass@state+1,c
  8855  002C36  0E01               	movlw	1
  8856  002C38  6E1D               	movwf	SetBypass@state,c
  8857  002C3A  ECE6  F014         	call	_SetBypass	;wreg free
  8858                           
  8859                           ;Bypass.c: 142: cellbyp = 1;
  8860  002C3E  0E00               	movlw	0
  8861  002C40  0100               	movlb	0	; () banked
  8862  002C42  6FE3               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  8863  002C44  0E01               	movlw	1
  8864  002C46  6FE2               	movwf	RunBypas@cellbyp& (0+255),b
  8865  002C48  D000               	goto	l5365
  8866  002C4A                     l5365:
  8867                           
  8868                           ;Bypass.c: 143: }
  8869                           ;Bypass.c: 144: if(batvolt <= 4.15)
  8870  002C4A  0ECD               	movlw	205
  8871  002C4C  6E21               	movwf	___ftge@ff1,c
  8872  002C4E  0E84               	movlw	132
  8873  002C50  6E22               	movwf	___ftge@ff1+1,c
  8874  002C52  0E40               	movlw	64
  8875  002C54  6E23               	movwf	___ftge@ff1+2,c
  8876  002C56  C0E4  F024         	movff	RunBypas@batvolt,___ftge@ff2
  8877  002C5A  C0E5  F025         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  8878  002C5E  C0E6  F026         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  8879  002C62  EC97  F018         	call	___ftge	;wreg free
  8880  002C66  A0D8               	btfss	status,0,c
  8881  002C68  D00B               	goto	l5369
  8882                           
  8883                           ;Bypass.c: 145: {
  8884                           ;Bypass.c: 146: SetBypass(i,0);
  8885  002C6A  C0E7  F01B         	movff	RunBypas@i,SetBypass@pin
  8886  002C6E  C0E8  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8887  002C72  0E00               	movlw	0
  8888  002C74  6E1E               	movwf	SetBypass@state+1,c
  8889  002C76  0E00               	movlw	0
  8890  002C78  6E1D               	movwf	SetBypass@state,c
  8891  002C7A  ECE6  F014         	call	_SetBypass	;wreg free
  8892  002C7E  D000               	goto	l5369
  8893  002C80                     l5369:
  8894  002C80  0100               	movlb	0	; () banked
  8895  002C82  4BE7               	infsnz	RunBypas@i& (0+255),f,b
  8896  002C84  2BE8               	incf	(RunBypas@i+1)& (0+255),f,b
  8897  002C86  D7A8               	goto	l5353
  8898                           
  8899                           ; BSR set to: 0
  8900  002C88  0012               	return	
  8901  002C8A                     l529:
  8902                           
  8903                           ; BSR set to: 0
  8904  002C8A  0012               	return		;funcret
  8905  002C8C                     __end_of_RunBypas:
  8906                           	opt stack 0
  8907                           tosu	equ	0xFFF
  8908                           tosh	equ	0xFFE
  8909                           tosl	equ	0xFFD
  8910                           pclath	equ	0xFFA
  8911                           tblptru	equ	0xFF8
  8912                           tblptrh	equ	0xFF7
  8913                           tblptrl	equ	0xFF6
  8914                           tablat	equ	0xFF5
  8915                           prodh	equ	0xFF4
  8916                           prodl	equ	0xFF3
  8917                           intcon	equ	0xFF2
  8918                           intcon2	equ	0xFF1
  8919                           postinc0	equ	0xFEE
  8920                           wreg	equ	0xFE8
  8921                           postinc1	equ	0xFE6
  8922                           postdec1	equ	0xFE5
  8923                           fsr1h	equ	0xFE2
  8924                           fsr1l	equ	0xFE1
  8925                           indf2	equ	0xFDF
  8926                           postinc2	equ	0xFDE
  8927                           postdec2	equ	0xFDD
  8928                           plusw2	equ	0xFDB
  8929                           fsr2h	equ	0xFDA
  8930                           fsr2l	equ	0xFD9
  8931                           status	equ	0xFD8
  8932                           
  8933 ;; *************** function _SetBypass *****************
  8934 ;; Defined at:
  8935 ;;		line 18 in file "Bypass.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;  pin             2   26[COMRAM] int 
  8938 ;;  state           2   28[COMRAM] int 
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;		None
  8941 ;; Return value:  Size  Location     Type
  8942 ;;                  2   26[COMRAM] int 
  8943 ;; Registers used:
  8944 ;;		wreg, status,2, status,0
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8950 ;;      Params:         4       0       0       0       0       0       0
  8951 ;;      Locals:         0       0       0       0       0       0       0
  8952 ;;      Temps:          2       0       0       0       0       0       0
  8953 ;;      Totals:         6       0       0       0       0       0       0
  8954 ;;Total ram usage:        6 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; Hardware stack levels required when called:    4
  8957 ;; This function calls:
  8958 ;;		Nothing
  8959 ;; This function is called by:
  8960 ;;		_RunBypas
  8961 ;; This function uses a non-reentrant model
  8962 ;;
  8963                           
  8964                           	psect	text46
  8965  0029CC                     __ptext46:
  8966                           	opt stack 0
  8967  0029CC                     _SetBypass:
  8968                           	opt stack 25
  8969                           
  8970                           ;Bypass.c: 20: switch (pin) {
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;incstack = 0
  8974  0029CC  D050               	goto	l3649
  8975  0029CE                     l3627:
  8976                           
  8977                           ;Bypass.c: 22: if (state)
  8978  0029CE  501D               	movf	SetBypass@state,w,c
  8979  0029D0  101E               	iorwf	SetBypass@state+1,w,c
  8980  0029D2  B4D8               	btfsc	status,2,c
  8981  0029D4  D002               	goto	l456
  8982                           
  8983                           ;Bypass.c: 23: {
  8984                           ;Bypass.c: 24: do { LATC5 = 1; } while(0);
  8985  0029D6  8A8B               	bsf	3979,5,c	;volatile
  8986                           
  8987                           ;Bypass.c: 25: }
  8988  0029D8  0012               	return	
  8989  0029DA                     l456:
  8990  0029DA  9A8B               	bcf	3979,5,c	;volatile
  8991                           
  8992                           ;Bypass.c: 29: }
  8993                           ;Bypass.c: 30: break;
  8994  0029DC  0012               	return	
  8995  0029DE                     l3629:
  8996                           
  8997                           ;Bypass.c: 32: if (state)
  8998  0029DE  501D               	movf	SetBypass@state,w,c
  8999  0029E0  101E               	iorwf	SetBypass@state+1,w,c
  9000  0029E2  B4D8               	btfsc	status,2,c
  9001  0029E4  D002               	goto	l464
  9002                           
  9003                           ;Bypass.c: 33: {
  9004                           ;Bypass.c: 34: do { LATC4 = 1; } while(0);
  9005  0029E6  888B               	bsf	3979,4,c	;volatile
  9006                           
  9007                           ;Bypass.c: 35: }
  9008  0029E8  0012               	return	
  9009  0029EA                     l464:
  9010  0029EA  988B               	bcf	3979,4,c	;volatile
  9011                           
  9012                           ;Bypass.c: 39: }
  9013                           ;Bypass.c: 40: break;
  9014  0029EC  0012               	return	
  9015  0029EE                     l3631:
  9016                           
  9017                           ;Bypass.c: 42: if (state)
  9018  0029EE  501D               	movf	SetBypass@state,w,c
  9019  0029F0  101E               	iorwf	SetBypass@state+1,w,c
  9020  0029F2  B4D8               	btfsc	status,2,c
  9021  0029F4  D002               	goto	l471
  9022                           
  9023                           ;Bypass.c: 43: {
  9024                           ;Bypass.c: 44: do { LATD3 = 1; } while(0);
  9025  0029F6  868C               	bsf	3980,3,c	;volatile
  9026                           
  9027                           ;Bypass.c: 45: }
  9028  0029F8  0012               	return	
  9029  0029FA                     l471:
  9030  0029FA  968C               	bcf	3980,3,c	;volatile
  9031                           
  9032                           ;Bypass.c: 49: }
  9033                           ;Bypass.c: 50: break;
  9034  0029FC  0012               	return	
  9035  0029FE                     l3633:
  9036                           
  9037                           ;Bypass.c: 52: if (state)
  9038  0029FE  501D               	movf	SetBypass@state,w,c
  9039  002A00  101E               	iorwf	SetBypass@state+1,w,c
  9040  002A02  B4D8               	btfsc	status,2,c
  9041  002A04  D002               	goto	l478
  9042                           
  9043                           ;Bypass.c: 53: {
  9044                           ;Bypass.c: 54: do { LATD2 = 1; } while(0);
  9045  002A06  848C               	bsf	3980,2,c	;volatile
  9046                           
  9047                           ;Bypass.c: 55: }
  9048  002A08  0012               	return	
  9049  002A0A                     l478:
  9050  002A0A  948C               	bcf	3980,2,c	;volatile
  9051                           
  9052                           ;Bypass.c: 59: }
  9053                           ;Bypass.c: 60: break;
  9054  002A0C  0012               	return	
  9055  002A0E                     l3635:
  9056                           
  9057                           ;Bypass.c: 62: if (state)
  9058  002A0E  501D               	movf	SetBypass@state,w,c
  9059  002A10  101E               	iorwf	SetBypass@state+1,w,c
  9060  002A12  B4D8               	btfsc	status,2,c
  9061  002A14  D002               	goto	l485
  9062                           
  9063                           ;Bypass.c: 63: {
  9064                           ;Bypass.c: 64: do { LATD1 = 1; } while(0);
  9065  002A16  828C               	bsf	3980,1,c	;volatile
  9066                           
  9067                           ;Bypass.c: 65: }
  9068  002A18  0012               	return	
  9069  002A1A                     l485:
  9070  002A1A  928C               	bcf	3980,1,c	;volatile
  9071                           
  9072                           ;Bypass.c: 69: }
  9073                           ;Bypass.c: 70: break;
  9074  002A1C  0012               	return	
  9075  002A1E                     l3637:
  9076                           
  9077                           ;Bypass.c: 72: if (state)
  9078  002A1E  501D               	movf	SetBypass@state,w,c
  9079  002A20  101E               	iorwf	SetBypass@state+1,w,c
  9080  002A22  B4D8               	btfsc	status,2,c
  9081  002A24  D002               	goto	l492
  9082                           
  9083                           ;Bypass.c: 73: {
  9084                           ;Bypass.c: 74: do { LATD5 = 1; } while(0);
  9085  002A26  8A8C               	bsf	3980,5,c	;volatile
  9086                           
  9087                           ;Bypass.c: 75: }
  9088  002A28  0012               	return	
  9089  002A2A                     l492:
  9090  002A2A  9A8C               	bcf	3980,5,c	;volatile
  9091                           
  9092                           ;Bypass.c: 79: }
  9093                           ;Bypass.c: 80: break;
  9094  002A2C  0012               	return	
  9095  002A2E                     l3639:
  9096                           
  9097                           ;Bypass.c: 82: if (state)
  9098  002A2E  501D               	movf	SetBypass@state,w,c
  9099  002A30  101E               	iorwf	SetBypass@state+1,w,c
  9100  002A32  B4D8               	btfsc	status,2,c
  9101  002A34  D002               	goto	l499
  9102                           
  9103                           ;Bypass.c: 83: {
  9104                           ;Bypass.c: 84: do { LATB0 = 1; } while(0);
  9105  002A36  808A               	bsf	3978,0,c	;volatile
  9106                           
  9107                           ;Bypass.c: 85: }
  9108  002A38  0012               	return	
  9109  002A3A                     l499:
  9110  002A3A  908A               	bcf	3978,0,c	;volatile
  9111                           
  9112                           ;Bypass.c: 89: }
  9113                           ;Bypass.c: 90: break;
  9114  002A3C  0012               	return	
  9115  002A3E                     l3641:
  9116                           
  9117                           ;Bypass.c: 92: if (state)
  9118  002A3E  501D               	movf	SetBypass@state,w,c
  9119  002A40  101E               	iorwf	SetBypass@state+1,w,c
  9120  002A42  B4D8               	btfsc	status,2,c
  9121  002A44  D002               	goto	l506
  9122                           
  9123                           ;Bypass.c: 93: {
  9124                           ;Bypass.c: 94: do { LATB1 = 1; } while(0);
  9125  002A46  828A               	bsf	3978,1,c	;volatile
  9126                           
  9127                           ;Bypass.c: 95: }
  9128  002A48  0012               	return	
  9129  002A4A                     l506:
  9130  002A4A  928A               	bcf	3978,1,c	;volatile
  9131                           
  9132                           ;Bypass.c: 99: }
  9133                           ;Bypass.c: 100: break;
  9134  002A4C  0012               	return	
  9135  002A4E                     l3643:
  9136                           
  9137                           ;Bypass.c: 102: if (state)
  9138  002A4E  501D               	movf	SetBypass@state,w,c
  9139  002A50  101E               	iorwf	SetBypass@state+1,w,c
  9140  002A52  B4D8               	btfsc	status,2,c
  9141  002A54  D002               	goto	l513
  9142                           
  9143                           ;Bypass.c: 103: {
  9144                           ;Bypass.c: 104: do { LATB3 = 1; } while(0);
  9145  002A56  868A               	bsf	3978,3,c	;volatile
  9146                           
  9147                           ;Bypass.c: 105: }
  9148  002A58  0012               	return	
  9149  002A5A                     l513:
  9150  002A5A  968A               	bcf	3978,3,c	;volatile
  9151                           
  9152                           ;Bypass.c: 109: }
  9153                           ;Bypass.c: 110: break;
  9154  002A5C  0012               	return	
  9155  002A5E                     l3645:
  9156                           
  9157                           ;Bypass.c: 112: if (state)
  9158  002A5E  501D               	movf	SetBypass@state,w,c
  9159  002A60  101E               	iorwf	SetBypass@state+1,w,c
  9160  002A62  B4D8               	btfsc	status,2,c
  9161  002A64  D002               	goto	l520
  9162                           
  9163                           ;Bypass.c: 113: {
  9164                           ;Bypass.c: 114: do { LATA0 = 1; } while(0);
  9165  002A66  8089               	bsf	3977,0,c	;volatile
  9166                           
  9167                           ;Bypass.c: 115: }
  9168  002A68  0012               	return	
  9169  002A6A                     l520:
  9170  002A6A  9089               	bcf	3977,0,c	;volatile
  9171                           
  9172                           ;Bypass.c: 121: }
  9173                           
  9174                           ;Bypass.c: 119: }
  9175                           ;Bypass.c: 120: break;
  9176  002A6C  0012               	return	
  9177  002A6E                     l3649:
  9178  002A6E  C01B  F01F         	movff	SetBypass@pin,??_SetBypass
  9179  002A72  C01C  F020         	movff	SetBypass@pin+1,??_SetBypass+1
  9180                           
  9181                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9182                           ; Switch size 1, requested type "space"
  9183                           ; Number of cases is 1, Range of values is 0 to 0
  9184                           ; switch strategies available:
  9185                           ; Name         Instructions Cycles
  9186                           ; simple_byte            4     3 (average)
  9187                           ;	Chosen strategy is simple_byte
  9188  002A76  5020               	movf	??_SetBypass+1,w,c
  9189  002A78  0A00               	xorlw	0	; case 0
  9190  002A7A  A4D8               	btfss	status,2,c
  9191  002A7C  0012               	return	
  9192                           
  9193                           ; Switch size 1, requested type "space"
  9194                           ; Number of cases is 10, Range of values is 0 to 9
  9195                           ; switch strategies available:
  9196                           ; Name         Instructions Cycles
  9197                           ; simple_byte           31    16 (average)
  9198                           ;	Chosen strategy is simple_byte
  9199  002A7E  501F               	movf	??_SetBypass,w,c
  9200  002A80  0A00               	xorlw	0	; case 0
  9201  002A82  B4D8               	btfsc	status,2,c
  9202  002A84  D7A4               	goto	l3627
  9203  002A86  0A01               	xorlw	1	; case 1
  9204  002A88  B4D8               	btfsc	status,2,c
  9205  002A8A  D7A9               	goto	l3629
  9206  002A8C  0A03               	xorlw	3	; case 2
  9207  002A8E  B4D8               	btfsc	status,2,c
  9208  002A90  D7AE               	goto	l3631
  9209  002A92  0A01               	xorlw	1	; case 3
  9210  002A94  B4D8               	btfsc	status,2,c
  9211  002A96  D7B3               	goto	l3633
  9212  002A98  0A07               	xorlw	7	; case 4
  9213  002A9A  B4D8               	btfsc	status,2,c
  9214  002A9C  D7B8               	goto	l3635
  9215  002A9E  0A01               	xorlw	1	; case 5
  9216  002AA0  B4D8               	btfsc	status,2,c
  9217  002AA2  D7BD               	goto	l3637
  9218  002AA4  0A03               	xorlw	3	; case 6
  9219  002AA6  B4D8               	btfsc	status,2,c
  9220  002AA8  D7C2               	goto	l3639
  9221  002AAA  0A01               	xorlw	1	; case 7
  9222  002AAC  B4D8               	btfsc	status,2,c
  9223  002AAE  D7C7               	goto	l3641
  9224  002AB0  0A0F               	xorlw	15	; case 8
  9225  002AB2  B4D8               	btfsc	status,2,c
  9226  002AB4  D7CC               	goto	l3643
  9227  002AB6  0A01               	xorlw	1	; case 9
  9228  002AB8  A4D8               	btfss	status,2,c
  9229  002ABA  0012               	return	
  9230  002ABC  D7D0               	goto	l3645
  9231  002ABE  0012               	return		;funcret
  9232  002AC0                     __end_of_SetBypass:
  9233                           	opt stack 0
  9234                           tosu	equ	0xFFF
  9235                           tosh	equ	0xFFE
  9236                           tosl	equ	0xFFD
  9237                           pclath	equ	0xFFA
  9238                           tblptru	equ	0xFF8
  9239                           tblptrh	equ	0xFF7
  9240                           tblptrl	equ	0xFF6
  9241                           tablat	equ	0xFF5
  9242                           prodh	equ	0xFF4
  9243                           prodl	equ	0xFF3
  9244                           intcon	equ	0xFF2
  9245                           intcon2	equ	0xFF1
  9246                           postinc0	equ	0xFEE
  9247                           wreg	equ	0xFE8
  9248                           postinc1	equ	0xFE6
  9249                           postdec1	equ	0xFE5
  9250                           fsr1h	equ	0xFE2
  9251                           fsr1l	equ	0xFE1
  9252                           indf2	equ	0xFDF
  9253                           postinc2	equ	0xFDE
  9254                           postdec2	equ	0xFDD
  9255                           plusw2	equ	0xFDB
  9256                           fsr2h	equ	0xFDA
  9257                           fsr2l	equ	0xFD9
  9258                           status	equ	0xFD8
  9259                           
  9260 ;; *************** function _Battery_Get *****************
  9261 ;; Defined at:
  9262 ;;		line 84 in file "Battery.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;  channelnum      2   30[BANK0 ] int 
  9265 ;; Auto vars:     Size  Location     Type
  9266 ;;		None
  9267 ;; Return value:  Size  Location     Type
  9268 ;;                  3   30[BANK0 ] float 
  9269 ;; Registers used:
  9270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9271 ;; Tracked objects:
  9272 ;;		On entry : 0/0
  9273 ;;		On exit  : 0/0
  9274 ;;		Unchanged: 0/0
  9275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9276 ;;      Params:         0       3       0       0       0       0       0
  9277 ;;      Locals:         0       0       0       0       0       0       0
  9278 ;;      Temps:          0       0       0       0       0       0       0
  9279 ;;      Totals:         0       3       0       0       0       0       0
  9280 ;;Total ram usage:        3 bytes
  9281 ;; Hardware stack levels used:    1
  9282 ;; Hardware stack levels required when called:    6
  9283 ;; This function calls:
  9284 ;;		___ftmul
  9285 ;;		___wmul
  9286 ;; This function is called by:
  9287 ;;		_RunBypas
  9288 ;;		_updateComms
  9289 ;; This function uses a non-reentrant model
  9290 ;;
  9291                           
  9292                           	psect	text47
  9293  0036CC                     __ptext47:
  9294                           	opt stack 0
  9295  0036CC                     _Battery_Get:
  9296                           	opt stack 23
  9297                           
  9298                           ;Battery.c: 86: return Battery_Volt[channelnum]*1000.0;
  9299                           
  9300                           ;incstack = 0
  9301  0036CC  C0DF  F01B         	movff	Battery_Get@channelnum,___wmul@multiplier
  9302  0036D0  C0E0  F01C         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  9303  0036D4  0E00               	movlw	0
  9304  0036D6  6E1E               	movwf	___wmul@multiplicand+1,c
  9305  0036D8  0E03               	movlw	3
  9306  0036DA  6E1D               	movwf	___wmul@multiplicand,c
  9307  0036DC  EC3F  F01D         	call	___wmul	;wreg free
  9308  0036E0  0EA0               	movlw	low _Battery_Volt
  9309  0036E2  241B               	addwf	?___wmul,w,c
  9310  0036E4  6ED9               	movwf	fsr2l,c
  9311  0036E6  0E01               	movlw	high _Battery_Volt
  9312  0036E8  201C               	addwfc	?___wmul+1,w,c
  9313  0036EA  6EDA               	movwf	fsr2h,c
  9314  0036EC  CFDE F0D0          	movff	postinc2,___ftmul@f1
  9315  0036F0  CFDE F0D1          	movff	postinc2,___ftmul@f1+1
  9316  0036F4  CFDD F0D2          	movff	postdec2,___ftmul@f1+2
  9317  0036F8  0E00               	movlw	0
  9318  0036FA  0100               	movlb	0	; () banked
  9319  0036FC  6FD3               	movwf	___ftmul@f2& (0+255),b
  9320  0036FE  0E7A               	movlw	122
  9321  003700  0100               	movlb	0	; () banked
  9322  003702  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  9323  003704  0E44               	movlw	68
  9324  003706  0100               	movlb	0	; () banked
  9325  003708  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  9326  00370A  EC4A  F00F         	call	___ftmul	;wreg free
  9327  00370E  C0D0  F0DF         	movff	?___ftmul,?_Battery_Get
  9328  003712  C0D1  F0E0         	movff	?___ftmul+1,?_Battery_Get+1
  9329  003716  C0D2  F0E1         	movff	?___ftmul+2,?_Battery_Get+2
  9330  00371A  0012               	return	
  9331  00371C  0012               	return		;funcret
  9332  00371E                     __end_of_Battery_Get:
  9333                           	opt stack 0
  9334                           tosu	equ	0xFFF
  9335                           tosh	equ	0xFFE
  9336                           tosl	equ	0xFFD
  9337                           pclath	equ	0xFFA
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           intcon2	equ	0xFF1
  9346                           postinc0	equ	0xFEE
  9347                           wreg	equ	0xFE8
  9348                           postinc1	equ	0xFE6
  9349                           postdec1	equ	0xFE5
  9350                           fsr1h	equ	0xFE2
  9351                           fsr1l	equ	0xFE1
  9352                           indf2	equ	0xFDF
  9353                           postinc2	equ	0xFDE
  9354                           postdec2	equ	0xFDD
  9355                           plusw2	equ	0xFDB
  9356                           fsr2h	equ	0xFDA
  9357                           fsr2l	equ	0xFD9
  9358                           status	equ	0xFD8
  9359                           
  9360 ;; *************** function _Battery_Fault *****************
  9361 ;; Defined at:
  9362 ;;		line 66 in file "Battery.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;		None
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  i               2   42[COMRAM] int 
  9367 ;;  fault           1   41[COMRAM] unsigned char 
  9368 ;; Return value:  Size  Location     Type
  9369 ;;                  1    wreg      unsigned char 
  9370 ;; Registers used:
  9371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9372 ;; Tracked objects:
  9373 ;;		On entry : 0/0
  9374 ;;		On exit  : 0/0
  9375 ;;		Unchanged: 0/0
  9376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9377 ;;      Params:         0       0       0       0       0       0       0
  9378 ;;      Locals:         3       0       0       0       0       0       0
  9379 ;;      Temps:          0       0       0       0       0       0       0
  9380 ;;      Totals:         3       0       0       0       0       0       0
  9381 ;;Total ram usage:        3 bytes
  9382 ;; Hardware stack levels used:    1
  9383 ;; Hardware stack levels required when called:    5
  9384 ;; This function calls:
  9385 ;;		___ftge
  9386 ;;		___wmul
  9387 ;; This function is called by:
  9388 ;;		_main
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           	psect	text48
  9393  002FE8                     __ptext48:
  9394                           	opt stack 0
  9395  002FE8                     _Battery_Fault:
  9396                           	opt stack 25
  9397                           
  9398                           ;Battery.c: 67: char fault = 0;
  9399                           
  9400                           ;incstack = 0
  9401  002FE8  0E00               	movlw	0
  9402  002FEA  6E2A               	movwf	Battery_Fault@fault,c
  9403                           
  9404                           ;Battery.c: 68: for (int i = 0; i < 9; i++) {
  9405  002FEC  0E00               	movlw	0
  9406  002FEE  6E2C               	movwf	Battery_Fault@i+1,c
  9407  002FF0  0E00               	movlw	0
  9408  002FF2  6E2B               	movwf	Battery_Fault@i,c
  9409  002FF4                     l5291:
  9410  002FF4  BE2C               	btfsc	Battery_Fault@i+1,7,c
  9411  002FF6  D008               	goto	l5295
  9412  002FF8  502C               	movf	Battery_Fault@i+1,w,c
  9413  002FFA  E14D               	bnz	l298
  9414  002FFC  0E09               	movlw	9
  9415  002FFE  5C2B               	subwf	Battery_Fault@i,w,c
  9416  003000  B0D8               	btfsc	status,0,c
  9417  003002  0012               	return	
  9418  003004  D001               	goto	l5295
  9419  003006  0012               	return	
  9420  003008                     l5295:
  9421                           
  9422                           ;Battery.c: 69: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i])) {
  9423  003008  0E00               	movlw	0
  9424  00300A  6E21               	movwf	___ftge@ff1,c
  9425  00300C  0E40               	movlw	64
  9426  00300E  6E22               	movwf	___ftge@ff1+1,c
  9427  003010  0E40               	movlw	64
  9428  003012  6E23               	movwf	___ftge@ff1+2,c
  9429  003014  C02B  F01B         	movff	Battery_Fault@i,___wmul@multiplier
  9430  003018  C02C  F01C         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9431  00301C  0E00               	movlw	0
  9432  00301E  6E1E               	movwf	___wmul@multiplicand+1,c
  9433  003020  0E03               	movlw	3
  9434  003022  6E1D               	movwf	___wmul@multiplicand,c
  9435  003024  EC3F  F01D         	call	___wmul	;wreg free
  9436  003028  0EA0               	movlw	low _Battery_Volt
  9437  00302A  241B               	addwf	?___wmul,w,c
  9438  00302C  6ED9               	movwf	fsr2l,c
  9439  00302E  0E01               	movlw	high _Battery_Volt
  9440  003030  201C               	addwfc	?___wmul+1,w,c
  9441  003032  6EDA               	movwf	fsr2h,c
  9442  003034  CFDE F024          	movff	postinc2,___ftge@ff2
  9443  003038  CFDE F025          	movff	postinc2,___ftge@ff2+1
  9444  00303C  CFDD F026          	movff	postdec2,___ftge@ff2+2
  9445  003040  EC97  F018         	call	___ftge	;wreg free
  9446  003044  B0D8               	btfsc	status,0,c
  9447  003046  D023               	goto	l5301
  9448  003048  C02B  F01B         	movff	Battery_Fault@i,___wmul@multiplier
  9449  00304C  C02C  F01C         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9450  003050  0E00               	movlw	0
  9451  003052  6E1E               	movwf	___wmul@multiplicand+1,c
  9452  003054  0E03               	movlw	3
  9453  003056  6E1D               	movwf	___wmul@multiplicand,c
  9454  003058  EC3F  F01D         	call	___wmul	;wreg free
  9455  00305C  0EA0               	movlw	low _Battery_Volt
  9456  00305E  241B               	addwf	?___wmul,w,c
  9457  003060  6ED9               	movwf	fsr2l,c
  9458  003062  0E01               	movlw	high _Battery_Volt
  9459  003064  201C               	addwfc	?___wmul+1,w,c
  9460  003066  6EDA               	movwf	fsr2h,c
  9461  003068  CFDE F021          	movff	postinc2,___ftge@ff1
  9462  00306C  CFDE F022          	movff	postinc2,___ftge@ff1+1
  9463  003070  CFDD F023          	movff	postdec2,___ftge@ff1+2
  9464  003074  0EB8               	movlw	184
  9465  003076  6E24               	movwf	___ftge@ff2,c
  9466  003078  0E86               	movlw	134
  9467  00307A  6E25               	movwf	___ftge@ff2+1,c
  9468  00307C  0E40               	movlw	64
  9469  00307E  6E26               	movwf	___ftge@ff2+2,c
  9470  003080  EC97  F018         	call	___ftge	;wreg free
  9471  003084  B0D8               	btfsc	status,0,c
  9472  003086  D003               	goto	l5301
  9473                           
  9474                           ;Battery.c: 70: fault = 1;
  9475  003088  0E01               	movlw	1
  9476  00308A  6E2A               	movwf	Battery_Fault@fault,c
  9477  00308C  D000               	goto	l5301
  9478  00308E                     l5301:
  9479  00308E  4A2B               	infsnz	Battery_Fault@i,f,c
  9480  003090  2A2C               	incf	Battery_Fault@i+1,f,c
  9481  003092  D7B0               	goto	l5291
  9482  003094  0012               	return	
  9483  003096                     l298:
  9484  003096  0012               	return		;funcret
  9485  003098                     __end_of_Battery_Fault:
  9486                           	opt stack 0
  9487                           tosu	equ	0xFFF
  9488                           tosh	equ	0xFFE
  9489                           tosl	equ	0xFFD
  9490                           pclath	equ	0xFFA
  9491                           tblptru	equ	0xFF8
  9492                           tblptrh	equ	0xFF7
  9493                           tblptrl	equ	0xFF6
  9494                           tablat	equ	0xFF5
  9495                           prodh	equ	0xFF4
  9496                           prodl	equ	0xFF3
  9497                           intcon	equ	0xFF2
  9498                           intcon2	equ	0xFF1
  9499                           postinc0	equ	0xFEE
  9500                           wreg	equ	0xFE8
  9501                           postinc1	equ	0xFE6
  9502                           postdec1	equ	0xFE5
  9503                           fsr1h	equ	0xFE2
  9504                           fsr1l	equ	0xFE1
  9505                           indf2	equ	0xFDF
  9506                           postinc2	equ	0xFDE
  9507                           postdec2	equ	0xFDD
  9508                           plusw2	equ	0xFDB
  9509                           fsr2h	equ	0xFDA
  9510                           fsr2l	equ	0xFD9
  9511                           status	equ	0xFD8
  9512                           
  9513 ;; *************** function ___ftge *****************
  9514 ;; Defined at:
  9515 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;  ff1             3   32[COMRAM] float 
  9518 ;;  ff2             3   35[COMRAM] float 
  9519 ;; Auto vars:     Size  Location     Type
  9520 ;;		None
  9521 ;; Return value:  Size  Location     Type
  9522 ;;		None               void
  9523 ;; Registers used:
  9524 ;;		wreg, status,2, status,0
  9525 ;; Tracked objects:
  9526 ;;		On entry : 0/0
  9527 ;;		On exit  : 0/0
  9528 ;;		Unchanged: 0/0
  9529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9530 ;;      Params:         6       0       0       0       0       0       0
  9531 ;;      Locals:         0       0       0       0       0       0       0
  9532 ;;      Temps:          3       0       0       0       0       0       0
  9533 ;;      Totals:         9       0       0       0       0       0       0
  9534 ;;Total ram usage:        9 bytes
  9535 ;; Hardware stack levels used:    1
  9536 ;; Hardware stack levels required when called:    4
  9537 ;; This function calls:
  9538 ;;		Nothing
  9539 ;; This function is called by:
  9540 ;;		_Battery_Fault
  9541 ;;		_Temp_Fault
  9542 ;;		_RunBypas
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           	psect	text49
  9547  00312E                     __ptext49:
  9548                           	opt stack 0
  9549  00312E                     ___ftge:
  9550                           	opt stack 25
  9551                           
  9552                           ;incstack = 0
  9553  00312E  AE23               	btfss	___ftge@ff1+2,7,c
  9554  003130  D017               	goto	l3923
  9555  003132  C021  F027         	movff	___ftge@ff1,??___ftge
  9556  003136  C022  F028         	movff	___ftge@ff1+1,??___ftge+1
  9557  00313A  C023  F029         	movff	___ftge@ff1+2,??___ftge+2
  9558  00313E  1E27               	comf	??___ftge,f,c
  9559  003140  1E28               	comf	??___ftge+1,f,c
  9560  003142  1E29               	comf	??___ftge+2,f,c
  9561  003144  2A27               	incf	??___ftge,f,c
  9562  003146  0E00               	movlw	0
  9563  003148  2228               	addwfc	??___ftge+1,f,c
  9564  00314A  2229               	addwfc	??___ftge+2,f,c
  9565  00314C  0E00               	movlw	0
  9566  00314E  2427               	addwf	??___ftge,w,c
  9567  003150  6E21               	movwf	___ftge@ff1,c
  9568  003152  0E00               	movlw	0
  9569  003154  2028               	addwfc	??___ftge+1,w,c
  9570  003156  6E22               	movwf	___ftge@ff1+1,c
  9571  003158  0E80               	movlw	128
  9572  00315A  2029               	addwfc	??___ftge+2,w,c
  9573  00315C  6E23               	movwf	___ftge@ff1+2,c
  9574  00315E  D000               	goto	l3923
  9575  003160                     l3923:
  9576  003160  AE26               	btfss	___ftge@ff2+2,7,c
  9577  003162  D017               	goto	l3927
  9578  003164  C024  F027         	movff	___ftge@ff2,??___ftge
  9579  003168  C025  F028         	movff	___ftge@ff2+1,??___ftge+1
  9580  00316C  C026  F029         	movff	___ftge@ff2+2,??___ftge+2
  9581  003170  1E27               	comf	??___ftge,f,c
  9582  003172  1E28               	comf	??___ftge+1,f,c
  9583  003174  1E29               	comf	??___ftge+2,f,c
  9584  003176  2A27               	incf	??___ftge,f,c
  9585  003178  0E00               	movlw	0
  9586  00317A  2228               	addwfc	??___ftge+1,f,c
  9587  00317C  2229               	addwfc	??___ftge+2,f,c
  9588  00317E  0E00               	movlw	0
  9589  003180  2427               	addwf	??___ftge,w,c
  9590  003182  6E24               	movwf	___ftge@ff2,c
  9591  003184  0E00               	movlw	0
  9592  003186  2028               	addwfc	??___ftge+1,w,c
  9593  003188  6E25               	movwf	___ftge@ff2+1,c
  9594  00318A  0E80               	movlw	128
  9595  00318C  2029               	addwfc	??___ftge+2,w,c
  9596  00318E  6E26               	movwf	___ftge@ff2+2,c
  9597  003190  D000               	goto	l3927
  9598  003192                     l3927:
  9599  003192  0E00               	movlw	0
  9600  003194  1A21               	xorwf	___ftge@ff1,f,c
  9601  003196  0E00               	movlw	0
  9602  003198  1A22               	xorwf	___ftge@ff1+1,f,c
  9603  00319A  0E80               	movlw	128
  9604  00319C  1A23               	xorwf	___ftge@ff1+2,f,c
  9605  00319E  0E00               	movlw	0
  9606  0031A0  1A24               	xorwf	___ftge@ff2,f,c
  9607  0031A2  0E00               	movlw	0
  9608  0031A4  1A25               	xorwf	___ftge@ff2+1,f,c
  9609  0031A6  0E80               	movlw	128
  9610  0031A8  1A26               	xorwf	___ftge@ff2+2,f,c
  9611  0031AA  5024               	movf	___ftge@ff2,w,c
  9612  0031AC  5C21               	subwf	___ftge@ff1,w,c
  9613  0031AE  5025               	movf	___ftge@ff2+1,w,c
  9614  0031B0  5822               	subwfb	___ftge@ff1+1,w,c
  9615  0031B2  5026               	movf	___ftge@ff2+2,w,c
  9616  0031B4  5823               	subwfb	___ftge@ff1+2,w,c
  9617  0031B6  B0D8               	btfsc	status,0,c
  9618  0031B8  D002               	goto	l3933
  9619  0031BA  90D8               	bcf	status,0,c
  9620  0031BC  0012               	return	
  9621  0031BE                     l3933:
  9622  0031BE  80D8               	bsf	status,0,c
  9623  0031C0  0012               	return	
  9624  0031C2  0012               	return		;funcret
  9625  0031C4                     __end_of___ftge:
  9626                           	opt stack 0
  9627                           tosu	equ	0xFFF
  9628                           tosh	equ	0xFFE
  9629                           tosl	equ	0xFFD
  9630                           pclath	equ	0xFFA
  9631                           tblptru	equ	0xFF8
  9632                           tblptrh	equ	0xFF7
  9633                           tblptrl	equ	0xFF6
  9634                           tablat	equ	0xFF5
  9635                           prodh	equ	0xFF4
  9636                           prodl	equ	0xFF3
  9637                           intcon	equ	0xFF2
  9638                           intcon2	equ	0xFF1
  9639                           postinc0	equ	0xFEE
  9640                           wreg	equ	0xFE8
  9641                           postinc1	equ	0xFE6
  9642                           postdec1	equ	0xFE5
  9643                           fsr1h	equ	0xFE2
  9644                           fsr1l	equ	0xFE1
  9645                           indf2	equ	0xFDF
  9646                           postinc2	equ	0xFDE
  9647                           postdec2	equ	0xFDD
  9648                           plusw2	equ	0xFDB
  9649                           fsr2h	equ	0xFDA
  9650                           fsr2l	equ	0xFD9
  9651                           status	equ	0xFD8
  9652                           
  9653 ;; *************** function _Battery_Convert *****************
  9654 ;; Defined at:
  9655 ;;		line 33 in file "Battery.c"
  9656 ;; Parameters:    Size  Location     Type
  9657 ;;		None
  9658 ;; Auto vars:     Size  Location     Type
  9659 ;;  x               2   46[BANK0 ] int 
  9660 ;; Return value:  Size  Location     Type
  9661 ;;		None               void
  9662 ;; Registers used:
  9663 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9664 ;; Tracked objects:
  9665 ;;		On entry : 0/0
  9666 ;;		On exit  : 0/0
  9667 ;;		Unchanged: 0/0
  9668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9669 ;;      Params:         0       0       0       0       0       0       0
  9670 ;;      Locals:         0       2       0       0       0       0       0
  9671 ;;      Temps:          0       2       0       0       0       0       0
  9672 ;;      Totals:         0       4       0       0       0       0       0
  9673 ;;Total ram usage:        4 bytes
  9674 ;; Hardware stack levels used:    1
  9675 ;; Hardware stack levels required when called:    7
  9676 ;; This function calls:
  9677 ;;		_Battery_Filter
  9678 ;;		___altoft
  9679 ;;		___ftadd
  9680 ;;		___ftdiv
  9681 ;;		___ftmul
  9682 ;;		___wmul
  9683 ;; This function is called by:
  9684 ;;		_main
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           	psect	text50
  9689  0028C6                     __ptext50:
  9690                           	opt stack 0
  9691  0028C6                     _Battery_Convert:
  9692                           	opt stack 23
  9693                           
  9694                           ;Battery.c: 34: int x;
  9695                           ;Battery.c: 35: for (x = 0; x < 9; x++) {
  9696                           
  9697                           ;incstack = 0
  9698  0028C6  0E00               	movlw	0
  9699  0028C8  0100               	movlb	0	; () banked
  9700  0028CA  6FF0               	movwf	(Battery_Convert@x+1)& (0+255),b
  9701  0028CC  0E00               	movlw	0
  9702  0028CE  6FEF               	movwf	Battery_Convert@x& (0+255),b
  9703  0028D0                     l5277:
  9704                           
  9705                           ; BSR set to: 0
  9706  0028D0  0100               	movlb	0	; () banked
  9707  0028D2  BFF0               	btfsc	(Battery_Convert@x+1)& (0+255),7,b
  9708  0028D4  D00A               	goto	l5281
  9709  0028D6  0100               	movlb	0	; () banked
  9710  0028D8  51F0               	movf	(Battery_Convert@x+1)& (0+255),w,b
  9711  0028DA  E175               	bnz	l5287
  9712  0028DC  0E09               	movlw	9
  9713  0028DE  0100               	movlb	0	; () banked
  9714  0028E0  5DEF               	subwf	Battery_Convert@x& (0+255),w,b
  9715  0028E2  B0D8               	btfsc	status,0,c
  9716  0028E4  D070               	goto	l5287
  9717  0028E6  D001               	goto	l5281
  9718                           
  9719                           ; BSR set to: 0
  9720  0028E8  D06E               	goto	l5287
  9721  0028EA                     l5281:
  9722                           
  9723                           ; BSR set to: 0
  9724                           ;Battery.c: 36: TempBattery_Volt[x] = ((Battery_Adc[x] / 1024.0)*5.0) + 0.05;
  9725  0028EA  C0EF  F01B         	movff	Battery_Convert@x,___wmul@multiplier
  9726  0028EE  C0F0  F01C         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  9727  0028F2  0E00               	movlw	0
  9728  0028F4  6E1E               	movwf	___wmul@multiplicand+1,c
  9729  0028F6  0E03               	movlw	3
  9730  0028F8  6E1D               	movwf	___wmul@multiplicand,c
  9731  0028FA  EC3F  F01D         	call	___wmul	;wreg free
  9732  0028FE  0E64               	movlw	low _TempBattery_Volt
  9733  002900  241B               	addwf	?___wmul,w,c
  9734  002902  6ED9               	movwf	fsr2l,c
  9735  002904  0E01               	movlw	high _TempBattery_Volt
  9736  002906  201C               	addwfc	?___wmul+1,w,c
  9737  002908  6EDA               	movwf	fsr2h,c
  9738  00290A  0E00               	movlw	0
  9739  00290C  0100               	movlb	0	; () banked
  9740  00290E  6FD3               	movwf	___ftmul@f2& (0+255),b
  9741  002910  0EA0               	movlw	160
  9742  002912  0100               	movlb	0	; () banked
  9743  002914  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  9744  002916  0E40               	movlw	64
  9745  002918  0100               	movlb	0	; () banked
  9746  00291A  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  9747  00291C  0E00               	movlw	0
  9748  00291E  0100               	movlb	0	; () banked
  9749  002920  6FC4               	movwf	___ftdiv@f2& (0+255),b
  9750  002922  0E80               	movlw	128
  9751  002924  0100               	movlb	0	; () banked
  9752  002926  6FC5               	movwf	(___ftdiv@f2+1)& (0+255),b
  9753  002928  0E44               	movlw	68
  9754  00292A  0100               	movlb	0	; () banked
  9755  00292C  6FC6               	movwf	(___ftdiv@f2+2)& (0+255),b
  9756  00292E  0E60               	movlw	low _Battery_Adc
  9757  002930  0100               	movlb	0	; () banked
  9758  002932  6FED               	movwf	??_Battery_Convert& (0+255),b
  9759  002934  0E00               	movlw	high _Battery_Adc
  9760  002936  0100               	movlb	0	; () banked
  9761  002938  6FEE               	movwf	(??_Battery_Convert+1)& (0+255),b
  9762  00293A  90D8               	bcf	status,0,c
  9763  00293C  0100               	movlb	0	; () banked
  9764  00293E  35EF               	rlcf	Battery_Convert@x& (0+255),w,b
  9765  002940  6EE1               	movwf	fsr1l,c
  9766  002942  0100               	movlb	0	; () banked
  9767  002944  35F0               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  9768  002946  6EE2               	movwf	fsr1h,c
  9769  002948  90D8               	bcf	status,0,c
  9770  00294A  36E1               	rlcf	fsr1l,f,c
  9771  00294C  36E2               	rlcf	fsr1h,f,c
  9772  00294E  0100               	movlb	0	; () banked
  9773  002950  51ED               	movf	??_Battery_Convert& (0+255),w,b
  9774  002952  26E1               	addwf	fsr1l,f,c
  9775  002954  0100               	movlb	0	; () banked
  9776  002956  51EE               	movf	(??_Battery_Convert+1)& (0+255),w,b
  9777  002958  22E2               	addwfc	fsr1h,f,c
  9778  00295A  CFE6 F023          	movff	postinc1,___altoft@c
  9779  00295E  CFE6 F024          	movff	postinc1,___altoft@c+1
  9780  002962  CFE6 F025          	movff	postinc1,___altoft@c+2
  9781  002966  CFE6 F026          	movff	postinc1,___altoft@c+3
  9782  00296A  EC07  F01A         	call	___altoft	;wreg free
  9783  00296E  C023  F0C1         	movff	?___altoft,___ftdiv@f1
  9784  002972  C024  F0C2         	movff	?___altoft+1,___ftdiv@f1+1
  9785  002976  C025  F0C3         	movff	?___altoft+2,___ftdiv@f1+2
  9786  00297A  EC5E  F011         	call	___ftdiv	;wreg free
  9787  00297E  C0C1  F0D0         	movff	?___ftdiv,___ftmul@f1
  9788  002982  C0C2  F0D1         	movff	?___ftdiv+1,___ftmul@f1+1
  9789  002986  C0C3  F0D2         	movff	?___ftdiv+2,___ftmul@f1+2
  9790  00298A  EC4A  F00F         	call	___ftmul	;wreg free
  9791  00298E  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  9792  002992  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  9793  002996  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  9794  00299A  0ECD               	movlw	205
  9795  00299C  0100               	movlb	0	; () banked
  9796  00299E  6FE2               	movwf	___ftadd@f2& (0+255),b
  9797  0029A0  0E4C               	movlw	76
  9798  0029A2  0100               	movlb	0	; () banked
  9799  0029A4  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  9800  0029A6  0E3D               	movlw	61
  9801  0029A8  0100               	movlb	0	; () banked
  9802  0029AA  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  9803  0029AC  ECD6  F00A         	call	___ftadd	;wreg free
  9804  0029B0  C0DF  FFDE         	movff	?___ftadd,postinc2
  9805  0029B4  C0E0  FFDE         	movff	?___ftadd+1,postinc2
  9806  0029B8  C0E1  FFDE         	movff	?___ftadd+2,postinc2
  9807  0029BC  0100               	movlb	0	; () banked
  9808  0029BE  4BEF               	infsnz	Battery_Convert@x& (0+255),f,b
  9809  0029C0  2BF0               	incf	(Battery_Convert@x+1)& (0+255),f,b
  9810  0029C2  D786               	goto	l5277
  9811                           
  9812                           ; BSR set to: 0
  9813  0029C4  D000               	goto	l5287
  9814  0029C6                     l5287:
  9815                           
  9816                           ; BSR set to: 0
  9817                           ;Battery.c: 37: }
  9818                           ;Battery.c: 38: Battery_Filter();
  9819  0029C6  ECD8  F00D         	call	_Battery_Filter	;wreg free
  9820  0029CA  0012               	return		;funcret
  9821  0029CC                     __end_of_Battery_Convert:
  9822                           	opt stack 0
  9823                           tosu	equ	0xFFF
  9824                           tosh	equ	0xFFE
  9825                           tosl	equ	0xFFD
  9826                           pclath	equ	0xFFA
  9827                           tblptru	equ	0xFF8
  9828                           tblptrh	equ	0xFF7
  9829                           tblptrl	equ	0xFF6
  9830                           tablat	equ	0xFF5
  9831                           prodh	equ	0xFF4
  9832                           prodl	equ	0xFF3
  9833                           intcon	equ	0xFF2
  9834                           intcon2	equ	0xFF1
  9835                           postinc0	equ	0xFEE
  9836                           wreg	equ	0xFE8
  9837                           postinc1	equ	0xFE6
  9838                           postdec1	equ	0xFE5
  9839                           fsr1h	equ	0xFE2
  9840                           fsr1l	equ	0xFE1
  9841                           indf2	equ	0xFDF
  9842                           postinc2	equ	0xFDE
  9843                           postdec2	equ	0xFDD
  9844                           plusw2	equ	0xFDB
  9845                           fsr2h	equ	0xFDA
  9846                           fsr2l	equ	0xFD9
  9847                           status	equ	0xFD8
  9848                           
  9849 ;; *************** function ___ftdiv *****************
  9850 ;; Defined at:
  9851 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9852 ;; Parameters:    Size  Location     Type
  9853 ;;  f1              3    0[BANK0 ] float 
  9854 ;;  f2              3    3[BANK0 ] float 
  9855 ;; Auto vars:     Size  Location     Type
  9856 ;;  f3              3   10[BANK0 ] float 
  9857 ;;  sign            1   14[BANK0 ] unsigned char 
  9858 ;;  exp             1   13[BANK0 ] unsigned char 
  9859 ;;  cntr            1    9[BANK0 ] unsigned char 
  9860 ;; Return value:  Size  Location     Type
  9861 ;;                  3    0[BANK0 ] float 
  9862 ;; Registers used:
  9863 ;;		wreg, status,2, status,0, cstack
  9864 ;; Tracked objects:
  9865 ;;		On entry : 0/0
  9866 ;;		On exit  : 0/0
  9867 ;;		Unchanged: 0/0
  9868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9869 ;;      Params:         0       6       0       0       0       0       0
  9870 ;;      Locals:         0       6       0       0       0       0       0
  9871 ;;      Temps:          0       3       0       0       0       0       0
  9872 ;;      Totals:         0      15       0       0       0       0       0
  9873 ;;Total ram usage:       15 bytes
  9874 ;; Hardware stack levels used:    1
  9875 ;; Hardware stack levels required when called:    5
  9876 ;; This function calls:
  9877 ;;		___ftpack
  9878 ;; This function is called by:
  9879 ;;		_Battery_Convert
  9880 ;;		_Temp_Convert
  9881 ;; This function uses a non-reentrant model
  9882 ;;
  9883                           
  9884                           	psect	text51
  9885  0022BC                     __ptext51:
  9886                           	opt stack 0
  9887  0022BC                     ___ftdiv:
  9888                           	opt stack 24
  9889                           
  9890                           ;incstack = 0
  9891  0022BC  C0C3  F0C7         	movff	___ftdiv@f1+2,??___ftdiv
  9892  0022C0  0100               	movlb	0	; () banked
  9893  0022C2  6BC8               	clrf	(??___ftdiv+1)& (0+255),b
  9894  0022C4  6BC9               	clrf	(??___ftdiv+2)& (0+255),b
  9895  0022C6  0100               	movlb	0	; () banked
  9896  0022C8  35C2               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  9897  0022CA  0100               	movlb	0	; () banked
  9898  0022CC  37C7               	rlcf	??___ftdiv& (0+255),f,b
  9899  0022CE  E301               	bnc	u5761
  9900  0022D0  81C8               	bsf	(??___ftdiv+1)& (0+255),0,b
  9901  0022D2                     u5761:
  9902  0022D2  0100               	movlb	0	; () banked
  9903  0022D4  51C7               	movf	??___ftdiv& (0+255),w,b
  9904  0022D6  0100               	movlb	0	; () banked
  9905  0022D8  6FCE               	movwf	___ftdiv@exp& (0+255),b
  9906  0022DA  0100               	movlb	0	; () banked
  9907  0022DC  51CE               	movf	___ftdiv@exp& (0+255),w,b
  9908  0022DE  A4D8               	btfss	status,2,c
  9909  0022E0  D00A               	goto	l5215
  9910                           
  9911                           ; BSR set to: 0
  9912  0022E2  0E00               	movlw	0
  9913  0022E4  0100               	movlb	0	; () banked
  9914  0022E6  6FC1               	movwf	?___ftdiv& (0+255),b
  9915  0022E8  0E00               	movlw	0
  9916  0022EA  0100               	movlb	0	; () banked
  9917  0022EC  6FC2               	movwf	(?___ftdiv+1)& (0+255),b
  9918  0022EE  0E00               	movlw	0
  9919  0022F0  0100               	movlb	0	; () banked
  9920  0022F2  6FC3               	movwf	(?___ftdiv+2)& (0+255),b
  9921                           
  9922                           ; BSR set to: 0
  9923  0022F4  0012               	return	
  9924  0022F6                     l5215:
  9925                           
  9926                           ; BSR set to: 0
  9927  0022F6  C0C6  F0C7         	movff	___ftdiv@f2+2,??___ftdiv
  9928  0022FA  0100               	movlb	0	; () banked
  9929  0022FC  6BC8               	clrf	(??___ftdiv+1)& (0+255),b
  9930  0022FE  6BC9               	clrf	(??___ftdiv+2)& (0+255),b
  9931  002300  0100               	movlb	0	; () banked
  9932  002302  35C5               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  9933  002304  0100               	movlb	0	; () banked
  9934  002306  37C7               	rlcf	??___ftdiv& (0+255),f,b
  9935  002308  E301               	bnc	u5781
  9936  00230A  81C8               	bsf	(??___ftdiv+1)& (0+255),0,b
  9937  00230C                     u5781:
  9938  00230C  0100               	movlb	0	; () banked
  9939  00230E  51C7               	movf	??___ftdiv& (0+255),w,b
  9940  002310  0100               	movlb	0	; () banked
  9941  002312  6FCF               	movwf	___ftdiv@sign& (0+255),b
  9942  002314  0100               	movlb	0	; () banked
  9943  002316  51CF               	movf	___ftdiv@sign& (0+255),w,b
  9944  002318  A4D8               	btfss	status,2,c
  9945  00231A  D00A               	goto	l5221
  9946                           
  9947                           ; BSR set to: 0
  9948  00231C  0E00               	movlw	0
  9949  00231E  0100               	movlb	0	; () banked
  9950  002320  6FC1               	movwf	?___ftdiv& (0+255),b
  9951  002322  0E00               	movlw	0
  9952  002324  0100               	movlb	0	; () banked
  9953  002326  6FC2               	movwf	(?___ftdiv+1)& (0+255),b
  9954  002328  0E00               	movlw	0
  9955  00232A  0100               	movlb	0	; () banked
  9956  00232C  6FC3               	movwf	(?___ftdiv+2)& (0+255),b
  9957                           
  9958                           ; BSR set to: 0
  9959  00232E  0012               	return	
  9960  002330                     l5221:
  9961                           
  9962                           ; BSR set to: 0
  9963  002330  0E00               	movlw	0
  9964  002332  0100               	movlb	0	; () banked
  9965  002334  6FCB               	movwf	___ftdiv@f3& (0+255),b
  9966  002336  0E00               	movlw	0
  9967  002338  0100               	movlb	0	; () banked
  9968  00233A  6FCC               	movwf	(___ftdiv@f3+1)& (0+255),b
  9969  00233C  0E00               	movlw	0
  9970  00233E  0100               	movlb	0	; () banked
  9971  002340  6FCD               	movwf	(___ftdiv@f3+2)& (0+255),b
  9972                           
  9973                           ; BSR set to: 0
  9974  002342  0100               	movlb	0	; () banked
  9975  002344  51CF               	movf	___ftdiv@sign& (0+255),w,b
  9976  002346  0F89               	addlw	137
  9977  002348  0100               	movlb	0	; () banked
  9978  00234A  5FCE               	subwf	___ftdiv@exp& (0+255),f,b
  9979                           
  9980                           ; BSR set to: 0
  9981  00234C  C0C3  F0CF         	movff	___ftdiv@f1+2,___ftdiv@sign
  9982                           
  9983                           ; BSR set to: 0
  9984  002350  0100               	movlb	0	; () banked
  9985  002352  51C6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9986  002354  0100               	movlb	0	; () banked
  9987  002356  1BCF               	xorwf	___ftdiv@sign& (0+255),f,b
  9988                           
  9989                           ; BSR set to: 0
  9990  002358  0E80               	movlw	128
  9991  00235A  0100               	movlb	0	; () banked
  9992  00235C  17CF               	andwf	___ftdiv@sign& (0+255),f,b
  9993                           
  9994                           ; BSR set to: 0
  9995  00235E  0100               	movlb	0	; () banked
  9996  002360  8FC2               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  9997                           
  9998                           ; BSR set to: 0
  9999  002362  0EFF               	movlw	255
 10000  002364  0100               	movlb	0	; () banked
 10001  002366  17C1               	andwf	___ftdiv@f1& (0+255),f,b
 10002  002368  0EFF               	movlw	255
 10003  00236A  0100               	movlb	0	; () banked
 10004  00236C  17C2               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 10005  00236E  0E00               	movlw	0
 10006  002370  0100               	movlb	0	; () banked
 10007  002372  17C3               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 10008                           
 10009                           ; BSR set to: 0
 10010  002374  0100               	movlb	0	; () banked
 10011  002376  8FC5               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 10012                           
 10013                           ; BSR set to: 0
 10014  002378  0EFF               	movlw	255
 10015  00237A  0100               	movlb	0	; () banked
 10016  00237C  17C4               	andwf	___ftdiv@f2& (0+255),f,b
 10017  00237E  0EFF               	movlw	255
 10018  002380  0100               	movlb	0	; () banked
 10019  002382  17C5               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 10020  002384  0E00               	movlw	0
 10021  002386  0100               	movlb	0	; () banked
 10022  002388  17C6               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 10023                           
 10024                           ; BSR set to: 0
 10025  00238A  0E18               	movlw	24
 10026  00238C  0100               	movlb	0	; () banked
 10027  00238E  6FCA               	movwf	___ftdiv@cntr& (0+255),b
 10028  002390  D000               	goto	l5241
 10029  002392                     l5241:
 10030                           
 10031                           ; BSR set to: 0
 10032  002392  0100               	movlb	0	; () banked
 10033  002394  90D8               	bcf	status,0,c
 10034  002396  37CB               	rlcf	___ftdiv@f3& (0+255),f,b
 10035  002398  37CC               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10036  00239A  37CD               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10037                           
 10038                           ; BSR set to: 0
 10039  00239C  0100               	movlb	0	; () banked
 10040  00239E  51C4               	movf	___ftdiv@f2& (0+255),w,b
 10041  0023A0  0100               	movlb	0	; () banked
 10042  0023A2  5DC1               	subwf	___ftdiv@f1& (0+255),w,b
 10043  0023A4  0100               	movlb	0	; () banked
 10044  0023A6  51C5               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10045  0023A8  0100               	movlb	0	; () banked
 10046  0023AA  59C2               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 10047  0023AC  0100               	movlb	0	; () banked
 10048  0023AE  51C6               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10049  0023B0  0100               	movlb	0	; () banked
 10050  0023B2  59C3               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 10051  0023B4  A0D8               	btfss	status,0,c
 10052  0023B6  D00E               	goto	l1207
 10053                           
 10054                           ; BSR set to: 0
 10055  0023B8  0100               	movlb	0	; () banked
 10056  0023BA  51C4               	movf	___ftdiv@f2& (0+255),w,b
 10057  0023BC  0100               	movlb	0	; () banked
 10058  0023BE  5FC1               	subwf	___ftdiv@f1& (0+255),f,b
 10059  0023C0  0100               	movlb	0	; () banked
 10060  0023C2  51C5               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10061  0023C4  0100               	movlb	0	; () banked
 10062  0023C6  5BC2               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10063  0023C8  0100               	movlb	0	; () banked
 10064  0023CA  51C6               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10065  0023CC  0100               	movlb	0	; () banked
 10066  0023CE  5BC3               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10067                           
 10068                           ; BSR set to: 0
 10069  0023D0  0100               	movlb	0	; () banked
 10070  0023D2  81CB               	bsf	___ftdiv@f3& (0+255),0,b
 10071  0023D4                     l1207:
 10072                           
 10073                           ; BSR set to: 0
 10074  0023D4  0100               	movlb	0	; () banked
 10075  0023D6  90D8               	bcf	status,0,c
 10076  0023D8  37C1               	rlcf	___ftdiv@f1& (0+255),f,b
 10077  0023DA  37C2               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10078  0023DC  37C3               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10079                           
 10080                           ; BSR set to: 0
 10081  0023DE  0100               	movlb	0	; () banked
 10082  0023E0  2FCA               	decfsz	___ftdiv@cntr& (0+255),f,b
 10083  0023E2  D7D7               	goto	l5241
 10084  0023E4  D000               	goto	l5251
 10085  0023E6                     l5251:
 10086                           
 10087                           ; BSR set to: 0
 10088  0023E6  C0CB  F01B         	movff	___ftdiv@f3,___ftpack@arg
 10089  0023EA  C0CC  F01C         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10090  0023EE  C0CD  F01D         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10091  0023F2  C0CE  F01E         	movff	___ftdiv@exp,___ftpack@exp
 10092  0023F6  C0CF  F01F         	movff	___ftdiv@sign,___ftpack@sign
 10093  0023FA  EC91  F017         	call	___ftpack	;wreg free
 10094  0023FE  C01B  F0C1         	movff	?___ftpack,?___ftdiv
 10095  002402  C01C  F0C2         	movff	?___ftpack+1,?___ftdiv+1
 10096  002406  C01D  F0C3         	movff	?___ftpack+2,?___ftdiv+2
 10097  00240A  0012               	return	
 10098  00240C  0012               	return		;funcret
 10099  00240E                     __end_of___ftdiv:
 10100                           	opt stack 0
 10101                           tosu	equ	0xFFF
 10102                           tosh	equ	0xFFE
 10103                           tosl	equ	0xFFD
 10104                           pclath	equ	0xFFA
 10105                           tblptru	equ	0xFF8
 10106                           tblptrh	equ	0xFF7
 10107                           tblptrl	equ	0xFF6
 10108                           tablat	equ	0xFF5
 10109                           prodh	equ	0xFF4
 10110                           prodl	equ	0xFF3
 10111                           intcon	equ	0xFF2
 10112                           intcon2	equ	0xFF1
 10113                           postinc0	equ	0xFEE
 10114                           wreg	equ	0xFE8
 10115                           postinc1	equ	0xFE6
 10116                           postdec1	equ	0xFE5
 10117                           fsr1h	equ	0xFE2
 10118                           fsr1l	equ	0xFE1
 10119                           indf2	equ	0xFDF
 10120                           postinc2	equ	0xFDE
 10121                           postdec2	equ	0xFDD
 10122                           plusw2	equ	0xFDB
 10123                           fsr2h	equ	0xFDA
 10124                           fsr2l	equ	0xFD9
 10125                           status	equ	0xFD8
 10126                           
 10127 ;; *************** function ___altoft *****************
 10128 ;; Defined at:
 10129 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altoft.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;  c               4   34[COMRAM] long 
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;  sign            1   43[COMRAM] unsigned char 
 10134 ;;  exp             1   42[COMRAM] unsigned char 
 10135 ;; Return value:  Size  Location     Type
 10136 ;;                  3   34[COMRAM] float 
 10137 ;; Registers used:
 10138 ;;		wreg, status,2, status,0, cstack
 10139 ;; Tracked objects:
 10140 ;;		On entry : 0/0
 10141 ;;		On exit  : 0/0
 10142 ;;		Unchanged: 0/0
 10143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10144 ;;      Params:         4       0       0       0       0       0       0
 10145 ;;      Locals:         2       0       0       0       0       0       0
 10146 ;;      Temps:          4       0       0       0       0       0       0
 10147 ;;      Totals:        10       0       0       0       0       0       0
 10148 ;;Total ram usage:       10 bytes
 10149 ;; Hardware stack levels used:    1
 10150 ;; Hardware stack levels required when called:    5
 10151 ;; This function calls:
 10152 ;;		___ftpack
 10153 ;; This function is called by:
 10154 ;;		_Battery_Convert
 10155 ;; This function uses a non-reentrant model
 10156 ;;
 10157                           
 10158                           	psect	text52
 10159  00340E                     __ptext52:
 10160                           	opt stack 0
 10161  00340E                     ___altoft:
 10162                           	opt stack 24
 10163                           
 10164                           ;incstack = 0
 10165  00340E  0E00               	movlw	0
 10166  003410  6E2C               	movwf	___altoft@sign,c
 10167  003412  0E8E               	movlw	142
 10168  003414  6E2B               	movwf	___altoft@exp,c
 10169  003416  AE26               	btfss	___altoft@c+3,7,c
 10170  003418  D012               	goto	l5203
 10171  00341A  1E26               	comf	___altoft@c+3,f,c
 10172  00341C  1E25               	comf	___altoft@c+2,f,c
 10173  00341E  1E24               	comf	___altoft@c+1,f,c
 10174  003420  6C23               	negf	___altoft@c,c
 10175  003422  0E00               	movlw	0
 10176  003424  2224               	addwfc	___altoft@c+1,f,c
 10177  003426  2225               	addwfc	___altoft@c+2,f,c
 10178  003428  2226               	addwfc	___altoft@c+3,f,c
 10179  00342A  0E01               	movlw	1
 10180  00342C  6E2C               	movwf	___altoft@sign,c
 10181  00342E  D007               	goto	l5203
 10182  003430                     l5201:
 10183  003430  90D8               	bcf	status,0,c
 10184  003432  3226               	rrcf	___altoft@c+3,f,c
 10185  003434  3225               	rrcf	___altoft@c+2,f,c
 10186  003436  3224               	rrcf	___altoft@c+1,f,c
 10187  003438  3223               	rrcf	___altoft@c,f,c
 10188  00343A  2A2B               	incf	___altoft@exp,f,c
 10189  00343C  D000               	goto	l5203
 10190  00343E                     l5203:
 10191  00343E  0E00               	movlw	0
 10192  003440  1423               	andwf	___altoft@c,w,c
 10193  003442  6E27               	movwf	??___altoft& (0+255),c
 10194  003444  0E00               	movlw	0
 10195  003446  1424               	andwf	___altoft@c+1,w,c
 10196  003448  6E28               	movwf	(??___altoft+1)& (0+255),c
 10197  00344A  0E00               	movlw	0
 10198  00344C  1425               	andwf	___altoft@c+2,w,c
 10199  00344E  6E29               	movwf	(??___altoft+2)& (0+255),c
 10200  003450  0EFF               	movlw	255
 10201  003452  1426               	andwf	___altoft@c+3,w,c
 10202  003454  6E2A               	movwf	(??___altoft+3)& (0+255),c
 10203  003456  5027               	movf	??___altoft,w,c
 10204  003458  1028               	iorwf	??___altoft+1,w,c
 10205  00345A  1029               	iorwf	??___altoft+2,w,c
 10206  00345C  102A               	iorwf	??___altoft+3,w,c
 10207  00345E  A4D8               	btfss	status,2,c
 10208  003460  D7E7               	goto	l5201
 10209  003462  C023  F01B         	movff	___altoft@c,___ftpack@arg
 10210  003466  C024  F01C         	movff	___altoft@c+1,___ftpack@arg+1
 10211  00346A  C025  F01D         	movff	___altoft@c+2,___ftpack@arg+2
 10212  00346E  C02B  F01E         	movff	___altoft@exp,___ftpack@exp
 10213  003472  C02C  F01F         	movff	___altoft@sign,___ftpack@sign
 10214  003476  EC91  F017         	call	___ftpack	;wreg free
 10215  00347A  C01B  F023         	movff	?___ftpack,?___altoft
 10216  00347E  C01C  F024         	movff	?___ftpack+1,?___altoft+1
 10217  003482  C01D  F025         	movff	?___ftpack+2,?___altoft+2
 10218  003486  0012               	return	
 10219  003488  0012               	return		;funcret
 10220  00348A                     __end_of___altoft:
 10221                           	opt stack 0
 10222                           tosu	equ	0xFFF
 10223                           tosh	equ	0xFFE
 10224                           tosl	equ	0xFFD
 10225                           pclath	equ	0xFFA
 10226                           tblptru	equ	0xFF8
 10227                           tblptrh	equ	0xFF7
 10228                           tblptrl	equ	0xFF6
 10229                           tablat	equ	0xFF5
 10230                           prodh	equ	0xFF4
 10231                           prodl	equ	0xFF3
 10232                           intcon	equ	0xFF2
 10233                           intcon2	equ	0xFF1
 10234                           postinc0	equ	0xFEE
 10235                           wreg	equ	0xFE8
 10236                           postinc1	equ	0xFE6
 10237                           postdec1	equ	0xFE5
 10238                           fsr1h	equ	0xFE2
 10239                           fsr1l	equ	0xFE1
 10240                           indf2	equ	0xFDF
 10241                           postinc2	equ	0xFDE
 10242                           postdec2	equ	0xFDD
 10243                           plusw2	equ	0xFDB
 10244                           fsr2h	equ	0xFDA
 10245                           fsr2l	equ	0xFD9
 10246                           status	equ	0xFD8
 10247                           
 10248 ;; *************** function _Battery_Filter *****************
 10249 ;; Defined at:
 10250 ;;		line 48 in file "Battery.c"
 10251 ;; Parameters:    Size  Location     Type
 10252 ;;		None
 10253 ;; Auto vars:     Size  Location     Type
 10254 ;;  x               2   42[BANK0 ] int 
 10255 ;; Return value:  Size  Location     Type
 10256 ;;		None               void
 10257 ;; Registers used:
 10258 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10259 ;; Tracked objects:
 10260 ;;		On entry : 0/0
 10261 ;;		On exit  : 0/0
 10262 ;;		Unchanged: 0/0
 10263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10264 ;;      Params:         0       0       0       0       0       0       0
 10265 ;;      Locals:         0       2       0       0       0       0       0
 10266 ;;      Temps:          0       0       0       0       0       0       0
 10267 ;;      Totals:         0       2       0       0       0       0       0
 10268 ;;Total ram usage:        2 bytes
 10269 ;; Hardware stack levels used:    1
 10270 ;; Hardware stack levels required when called:    6
 10271 ;; This function calls:
 10272 ;;		___ftadd
 10273 ;;		___ftmul
 10274 ;;		___wmul
 10275 ;; This function is called by:
 10276 ;;		_Battery_Convert
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280                           	psect	text53
 10281  001BB0                     __ptext53:
 10282                           	opt stack 0
 10283  001BB0                     _Battery_Filter:
 10284                           	opt stack 23
 10285                           
 10286                           ;Battery.c: 50: int x;
 10287                           ;Battery.c: 51: for (x = 0; x < 9; x++) {
 10288                           
 10289                           ;incstack = 0
 10290  001BB0  0E00               	movlw	0
 10291  001BB2  0100               	movlb	0	; () banked
 10292  001BB4  6FEC               	movwf	(Battery_Filter@x+1)& (0+255),b
 10293  001BB6  0E00               	movlw	0
 10294  001BB8  6FEB               	movwf	Battery_Filter@x& (0+255),b
 10295  001BBA                     l4923:
 10296                           
 10297                           ; BSR set to: 0
 10298  001BBA  0100               	movlb	0	; () banked
 10299  001BBC  BFEC               	btfsc	(Battery_Filter@x+1)& (0+255),7,b
 10300  001BBE  D00A               	goto	l4927
 10301  001BC0  0100               	movlb	0	; () banked
 10302  001BC2  51EC               	movf	(Battery_Filter@x+1)& (0+255),w,b
 10303  001BC4  E172               	bnz	l4933
 10304  001BC6  0E09               	movlw	9
 10305  001BC8  0100               	movlb	0	; () banked
 10306  001BCA  5DEB               	subwf	Battery_Filter@x& (0+255),w,b
 10307  001BCC  B0D8               	btfsc	status,0,c
 10308  001BCE  D06D               	goto	l4933
 10309  001BD0  D001               	goto	l4927
 10310                           
 10311                           ; BSR set to: 0
 10312  001BD2  D06B               	goto	l4933
 10313  001BD4                     l4927:
 10314                           
 10315                           ; BSR set to: 0
 10316                           ;Battery.c: 52: Battery_Volt[x] = (0.88 * TempBattery_Volt[x] + ((1 - 0.88) * PrevBatter
      +                          y_Volt[x]));
 10317  001BD4  C0EB  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10318  001BD8  C0EC  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10319  001BDC  0E00               	movlw	0
 10320  001BDE  6E1E               	movwf	___wmul@multiplicand+1,c
 10321  001BE0  0E03               	movlw	3
 10322  001BE2  6E1D               	movwf	___wmul@multiplicand,c
 10323  001BE4  EC3F  F01D         	call	___wmul	;wreg free
 10324  001BE8  0EA0               	movlw	low _Battery_Volt
 10325  001BEA  241B               	addwf	?___wmul,w,c
 10326  001BEC  6ED9               	movwf	fsr2l,c
 10327  001BEE  0E01               	movlw	high _Battery_Volt
 10328  001BF0  201C               	addwfc	?___wmul+1,w,c
 10329  001BF2  6EDA               	movwf	fsr2h,c
 10330  001BF4  0E48               	movlw	72
 10331  001BF6  0100               	movlb	0	; () banked
 10332  001BF8  6FD3               	movwf	___ftmul@f2& (0+255),b
 10333  001BFA  0E61               	movlw	97
 10334  001BFC  0100               	movlb	0	; () banked
 10335  001BFE  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
 10336  001C00  0E3F               	movlw	63
 10337  001C02  0100               	movlb	0	; () banked
 10338  001C04  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
 10339  001C06  C0EB  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10340  001C0A  C0EC  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10341  001C0E  0E00               	movlw	0
 10342  001C10  6E1E               	movwf	___wmul@multiplicand+1,c
 10343  001C12  0E03               	movlw	3
 10344  001C14  6E1D               	movwf	___wmul@multiplicand,c
 10345  001C16  EC3F  F01D         	call	___wmul	;wreg free
 10346  001C1A  0E64               	movlw	low _TempBattery_Volt
 10347  001C1C  241B               	addwf	?___wmul,w,c
 10348  001C1E  6EE1               	movwf	fsr1l,c
 10349  001C20  0E01               	movlw	high _TempBattery_Volt
 10350  001C22  201C               	addwfc	?___wmul+1,w,c
 10351  001C24  6EE2               	movwf	fsr1h,c
 10352  001C26  CFE6 F0D0          	movff	postinc1,___ftmul@f1
 10353  001C2A  CFE6 F0D1          	movff	postinc1,___ftmul@f1+1
 10354  001C2E  CFE5 F0D2          	movff	postdec1,___ftmul@f1+2
 10355  001C32  EC4A  F00F         	call	___ftmul	;wreg free
 10356  001C36  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
 10357  001C3A  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
 10358  001C3E  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
 10359  001C42  0EC3               	movlw	195
 10360  001C44  0100               	movlb	0	; () banked
 10361  001C46  6FD3               	movwf	___ftmul@f2& (0+255),b
 10362  001C48  0EF5               	movlw	245
 10363  001C4A  0100               	movlb	0	; () banked
 10364  001C4C  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
 10365  001C4E  0E3D               	movlw	61
 10366  001C50  0100               	movlb	0	; () banked
 10367  001C52  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
 10368  001C54  0E00               	movlw	0
 10369  001C56  6E1E               	movwf	___wmul@multiplicand+1,c
 10370  001C58  0E03               	movlw	3
 10371  001C5A  6E1D               	movwf	___wmul@multiplicand,c
 10372  001C5C  C0EB  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10373  001C60  C0EC  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10374  001C64  EC3F  F01D         	call	___wmul	;wreg free
 10375  001C68  0E00               	movlw	low _PrevBattery_Volt
 10376  001C6A  241B               	addwf	?___wmul,w,c
 10377  001C6C  6EE1               	movwf	fsr1l,c
 10378  001C6E  0E01               	movlw	high _PrevBattery_Volt
 10379  001C70  201C               	addwfc	?___wmul+1,w,c
 10380  001C72  6EE2               	movwf	fsr1h,c
 10381  001C74  CFE6 F0D0          	movff	postinc1,___ftmul@f1
 10382  001C78  CFE6 F0D1          	movff	postinc1,___ftmul@f1+1
 10383  001C7C  CFE5 F0D2          	movff	postdec1,___ftmul@f1+2
 10384  001C80  EC4A  F00F         	call	___ftmul	;wreg free
 10385  001C84  C0D0  F0E2         	movff	?___ftmul,___ftadd@f2
 10386  001C88  C0D1  F0E3         	movff	?___ftmul+1,___ftadd@f2+1
 10387  001C8C  C0D2  F0E4         	movff	?___ftmul+2,___ftadd@f2+2
 10388  001C90  ECD6  F00A         	call	___ftadd	;wreg free
 10389  001C94  C0DF  FFDE         	movff	?___ftadd,postinc2
 10390  001C98  C0E0  FFDE         	movff	?___ftadd+1,postinc2
 10391  001C9C  C0E1  FFDE         	movff	?___ftadd+2,postinc2
 10392  001CA0  0100               	movlb	0	; () banked
 10393  001CA2  4BEB               	infsnz	Battery_Filter@x& (0+255),f,b
 10394  001CA4  2BEC               	incf	(Battery_Filter@x+1)& (0+255),f,b
 10395  001CA6  D789               	goto	l4923
 10396                           
 10397                           ; BSR set to: 0
 10398  001CA8  D000               	goto	l4933
 10399  001CAA                     l4933:
 10400                           
 10401                           ; BSR set to: 0
 10402                           ;Battery.c: 53: }
 10403                           ;Battery.c: 54: for (x = 0; x < 9; x++) {
 10404  001CAA  0E00               	movlw	0
 10405  001CAC  0100               	movlb	0	; () banked
 10406  001CAE  6FEC               	movwf	(Battery_Filter@x+1)& (0+255),b
 10407  001CB0  0E00               	movlw	0
 10408  001CB2  6FEB               	movwf	Battery_Filter@x& (0+255),b
 10409  001CB4                     l4935:
 10410                           
 10411                           ; BSR set to: 0
 10412  001CB4  0100               	movlb	0	; () banked
 10413  001CB6  BFEC               	btfsc	(Battery_Filter@x+1)& (0+255),7,b
 10414  001CB8  D00A               	goto	l4939
 10415  001CBA  0100               	movlb	0	; () banked
 10416  001CBC  51EC               	movf	(Battery_Filter@x+1)& (0+255),w,b
 10417  001CBE  E132               	bnz	l292
 10418  001CC0  0E09               	movlw	9
 10419  001CC2  0100               	movlb	0	; () banked
 10420  001CC4  5DEB               	subwf	Battery_Filter@x& (0+255),w,b
 10421  001CC6  B0D8               	btfsc	status,0,c
 10422  001CC8  0012               	return	
 10423  001CCA  D001               	goto	l4939
 10424                           
 10425                           ; BSR set to: 0
 10426  001CCC  0012               	return	
 10427  001CCE                     l4939:
 10428                           
 10429                           ; BSR set to: 0
 10430                           ;Battery.c: 55: PrevBattery_Volt[x] = Battery_Volt[x];
 10431  001CCE  C0EB  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10432  001CD2  C0EC  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10433  001CD6  0E00               	movlw	0
 10434  001CD8  6E1E               	movwf	___wmul@multiplicand+1,c
 10435  001CDA  0E03               	movlw	3
 10436  001CDC  6E1D               	movwf	___wmul@multiplicand,c
 10437  001CDE  EC3F  F01D         	call	___wmul	;wreg free
 10438  001CE2  0EA0               	movlw	low _Battery_Volt
 10439  001CE4  241B               	addwf	?___wmul,w,c
 10440  001CE6  6ED9               	movwf	fsr2l,c
 10441  001CE8  0E01               	movlw	high _Battery_Volt
 10442  001CEA  201C               	addwfc	?___wmul+1,w,c
 10443  001CEC  6EDA               	movwf	fsr2h,c
 10444  001CEE  C0EB  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10445  001CF2  C0EC  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10446  001CF6  0E00               	movlw	0
 10447  001CF8  6E1E               	movwf	___wmul@multiplicand+1,c
 10448  001CFA  0E03               	movlw	3
 10449  001CFC  6E1D               	movwf	___wmul@multiplicand,c
 10450  001CFE  EC3F  F01D         	call	___wmul	;wreg free
 10451  001D02  0E00               	movlw	low _PrevBattery_Volt
 10452  001D04  241B               	addwf	?___wmul,w,c
 10453  001D06  6EE1               	movwf	fsr1l,c
 10454  001D08  0E01               	movlw	high _PrevBattery_Volt
 10455  001D0A  201C               	addwfc	?___wmul+1,w,c
 10456  001D0C  6EE2               	movwf	fsr1h,c
 10457  001D0E  CFDE FFE6          	movff	postinc2,postinc1
 10458  001D12  CFDE FFE6          	movff	postinc2,postinc1
 10459  001D16  CFDE FFE6          	movff	postinc2,postinc1
 10460  001D1A  0100               	movlb	0	; () banked
 10461  001D1C  4BEB               	infsnz	Battery_Filter@x& (0+255),f,b
 10462  001D1E  2BEC               	incf	(Battery_Filter@x+1)& (0+255),f,b
 10463  001D20  D7C9               	goto	l4935
 10464                           
 10465                           ; BSR set to: 0
 10466  001D22  0012               	return	
 10467  001D24                     l292:
 10468                           
 10469                           ; BSR set to: 0
 10470  001D24  0012               	return		;funcret
 10471  001D26                     __end_of_Battery_Filter:
 10472                           	opt stack 0
 10473                           tosu	equ	0xFFF
 10474                           tosh	equ	0xFFE
 10475                           tosl	equ	0xFFD
 10476                           pclath	equ	0xFFA
 10477                           tblptru	equ	0xFF8
 10478                           tblptrh	equ	0xFF7
 10479                           tblptrl	equ	0xFF6
 10480                           tablat	equ	0xFF5
 10481                           prodh	equ	0xFF4
 10482                           prodl	equ	0xFF3
 10483                           intcon	equ	0xFF2
 10484                           intcon2	equ	0xFF1
 10485                           postinc0	equ	0xFEE
 10486                           wreg	equ	0xFE8
 10487                           postinc1	equ	0xFE6
 10488                           postdec1	equ	0xFE5
 10489                           fsr1h	equ	0xFE2
 10490                           fsr1l	equ	0xFE1
 10491                           indf2	equ	0xFDF
 10492                           postinc2	equ	0xFDE
 10493                           postdec2	equ	0xFDD
 10494                           plusw2	equ	0xFDB
 10495                           fsr2h	equ	0xFDA
 10496                           fsr2l	equ	0xFD9
 10497                           status	equ	0xFD8
 10498                           
 10499 ;; *************** function ___wmul *****************
 10500 ;; Defined at:
 10501 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;  multiplier      2   26[COMRAM] unsigned int 
 10504 ;;  multiplicand    2   28[COMRAM] unsigned int 
 10505 ;; Auto vars:     Size  Location     Type
 10506 ;;  product         2   30[COMRAM] unsigned int 
 10507 ;; Return value:  Size  Location     Type
 10508 ;;                  2   26[COMRAM] unsigned int 
 10509 ;; Registers used:
 10510 ;;		wreg, status,2, status,0, prodl, prodh
 10511 ;; Tracked objects:
 10512 ;;		On entry : 0/0
 10513 ;;		On exit  : 0/0
 10514 ;;		Unchanged: 0/0
 10515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10516 ;;      Params:         4       0       0       0       0       0       0
 10517 ;;      Locals:         2       0       0       0       0       0       0
 10518 ;;      Temps:          0       0       0       0       0       0       0
 10519 ;;      Totals:         6       0       0       0       0       0       0
 10520 ;;Total ram usage:        6 bytes
 10521 ;; Hardware stack levels used:    1
 10522 ;; Hardware stack levels required when called:    4
 10523 ;; This function calls:
 10524 ;;		Nothing
 10525 ;; This function is called by:
 10526 ;;		_Battery_Convert
 10527 ;;		_Battery_Filter
 10528 ;;		_Battery_Fault
 10529 ;;		_Battery_Get
 10530 ;;		_Temp_Fault
 10531 ;;		_Temp_Filter
 10532 ;;		_Temp_Convert
 10533 ;;		_Tempeture_Get
 10534 ;;		_eval_poly
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           	psect	text54
 10539  003A7E                     __ptext54:
 10540                           	opt stack 0
 10541  003A7E                     ___wmul:
 10542                           	opt stack 24
 10543                           
 10544                           ; BSR set to: 0
 10545                           ;incstack = 0
 10546  003A7E  501B               	movf	___wmul@multiplier,w,c
 10547  003A80  021D               	mulwf	___wmul@multiplicand,c
 10548  003A82  CFF3 F01F          	movff	prodl,___wmul@product
 10549  003A86  CFF4 F020          	movff	prodh,___wmul@product+1
 10550  003A8A  501B               	movf	___wmul@multiplier,w,c
 10551  003A8C  021E               	mulwf	___wmul@multiplicand+1,c
 10552  003A8E  50F3               	movf	prodl,w,c
 10553  003A90  2620               	addwf	___wmul@product+1,f,c
 10554  003A92  501C               	movf	___wmul@multiplier+1,w,c
 10555  003A94  021D               	mulwf	___wmul@multiplicand,c
 10556  003A96  50F3               	movf	prodl,w,c
 10557  003A98  2620               	addwf	___wmul@product+1,f,c
 10558  003A9A  C01F  F01B         	movff	___wmul@product,?___wmul
 10559  003A9E  C020  F01C         	movff	___wmul@product+1,?___wmul+1
 10560  003AA2  0012               	return	
 10561  003AA4  0012               	return		;funcret
 10562  003AA6                     __end_of___wmul:
 10563                           	opt stack 0
 10564                           tosu	equ	0xFFF
 10565                           tosh	equ	0xFFE
 10566                           tosl	equ	0xFFD
 10567                           pclath	equ	0xFFA
 10568                           tblptru	equ	0xFF8
 10569                           tblptrh	equ	0xFF7
 10570                           tblptrl	equ	0xFF6
 10571                           tablat	equ	0xFF5
 10572                           prodh	equ	0xFF4
 10573                           prodl	equ	0xFF3
 10574                           intcon	equ	0xFF2
 10575                           intcon2	equ	0xFF1
 10576                           postinc0	equ	0xFEE
 10577                           wreg	equ	0xFE8
 10578                           postinc1	equ	0xFE6
 10579                           postdec1	equ	0xFE5
 10580                           fsr1h	equ	0xFE2
 10581                           fsr1l	equ	0xFE1
 10582                           indf2	equ	0xFDF
 10583                           postinc2	equ	0xFDE
 10584                           postdec2	equ	0xFDD
 10585                           plusw2	equ	0xFDB
 10586                           fsr2h	equ	0xFDA
 10587                           fsr2l	equ	0xFD9
 10588                           status	equ	0xFD8
 10589                           
 10590 ;; *************** function ___ftmul *****************
 10591 ;; Defined at:
 10592 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 10593 ;; Parameters:    Size  Location     Type
 10594 ;;  f1              3   15[BANK0 ] float 
 10595 ;;  f2              3   18[BANK0 ] float 
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 10598 ;;  sign            1   29[BANK0 ] unsigned char 
 10599 ;;  cntr            1   28[BANK0 ] unsigned char 
 10600 ;;  exp             1   24[BANK0 ] unsigned char 
 10601 ;; Return value:  Size  Location     Type
 10602 ;;                  3   15[BANK0 ] float 
 10603 ;; Registers used:
 10604 ;;		wreg, status,2, status,0, cstack
 10605 ;; Tracked objects:
 10606 ;;		On entry : 0/0
 10607 ;;		On exit  : 0/0
 10608 ;;		Unchanged: 0/0
 10609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10610 ;;      Params:         0       6       0       0       0       0       0
 10611 ;;      Locals:         0       6       0       0       0       0       0
 10612 ;;      Temps:          0       3       0       0       0       0       0
 10613 ;;      Totals:         0      15       0       0       0       0       0
 10614 ;;Total ram usage:       15 bytes
 10615 ;; Hardware stack levels used:    1
 10616 ;; Hardware stack levels required when called:    5
 10617 ;; This function calls:
 10618 ;;		___ftpack
 10619 ;; This function is called by:
 10620 ;;		_Battery_Convert
 10621 ;;		_Battery_Filter
 10622 ;;		_Battery_Get
 10623 ;;		_Temp_Filter
 10624 ;;		_Temp_Convert
 10625 ;;		_log
 10626 ;;		_eval_poly
 10627 ;; This function uses a non-reentrant model
 10628 ;;
 10629                           
 10630                           	psect	text55
 10631  001E94                     __ptext55:
 10632                           	opt stack 0
 10633  001E94                     ___ftmul:
 10634                           	opt stack 23
 10635                           
 10636                           ;incstack = 0
 10637  001E94  C0D2  F0D6         	movff	___ftmul@f1+2,??___ftmul
 10638  001E98  0100               	movlb	0	; () banked
 10639  001E9A  6BD7               	clrf	(??___ftmul+1)& (0+255),b
 10640  001E9C  6BD8               	clrf	(??___ftmul+2)& (0+255),b
 10641  001E9E  0100               	movlb	0	; () banked
 10642  001EA0  35D1               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10643  001EA2  0100               	movlb	0	; () banked
 10644  001EA4  37D6               	rlcf	??___ftmul& (0+255),f,b
 10645  001EA6  E301               	bnc	u4761
 10646  001EA8  81D7               	bsf	(??___ftmul+1)& (0+255),0,b
 10647  001EAA                     u4761:
 10648  001EAA  0100               	movlb	0	; () banked
 10649  001EAC  51D6               	movf	??___ftmul& (0+255),w,b
 10650  001EAE  0100               	movlb	0	; () banked
 10651  001EB0  6FD9               	movwf	___ftmul@exp& (0+255),b
 10652  001EB2  0100               	movlb	0	; () banked
 10653  001EB4  51D9               	movf	___ftmul@exp& (0+255),w,b
 10654  001EB6  A4D8               	btfss	status,2,c
 10655  001EB8  D00A               	goto	l4717
 10656                           
 10657                           ; BSR set to: 0
 10658  001EBA  0E00               	movlw	0
 10659  001EBC  0100               	movlb	0	; () banked
 10660  001EBE  6FD0               	movwf	?___ftmul& (0+255),b
 10661  001EC0  0E00               	movlw	0
 10662  001EC2  0100               	movlb	0	; () banked
 10663  001EC4  6FD1               	movwf	(?___ftmul+1)& (0+255),b
 10664  001EC6  0E00               	movlw	0
 10665  001EC8  0100               	movlb	0	; () banked
 10666  001ECA  6FD2               	movwf	(?___ftmul+2)& (0+255),b
 10667                           
 10668                           ; BSR set to: 0
 10669  001ECC  0012               	return	
 10670  001ECE                     l4717:
 10671                           
 10672                           ; BSR set to: 0
 10673  001ECE  C0D5  F0D6         	movff	___ftmul@f2+2,??___ftmul
 10674  001ED2  0100               	movlb	0	; () banked
 10675  001ED4  6BD7               	clrf	(??___ftmul+1)& (0+255),b
 10676  001ED6  6BD8               	clrf	(??___ftmul+2)& (0+255),b
 10677  001ED8  0100               	movlb	0	; () banked
 10678  001EDA  35D4               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10679  001EDC  0100               	movlb	0	; () banked
 10680  001EDE  37D6               	rlcf	??___ftmul& (0+255),f,b
 10681  001EE0  E301               	bnc	u4781
 10682  001EE2  81D7               	bsf	(??___ftmul+1)& (0+255),0,b
 10683  001EE4                     u4781:
 10684  001EE4  0100               	movlb	0	; () banked
 10685  001EE6  51D6               	movf	??___ftmul& (0+255),w,b
 10686  001EE8  0100               	movlb	0	; () banked
 10687  001EEA  6FDE               	movwf	___ftmul@sign& (0+255),b
 10688  001EEC  0100               	movlb	0	; () banked
 10689  001EEE  51DE               	movf	___ftmul@sign& (0+255),w,b
 10690  001EF0  A4D8               	btfss	status,2,c
 10691  001EF2  D00A               	goto	l4723
 10692                           
 10693                           ; BSR set to: 0
 10694  001EF4  0E00               	movlw	0
 10695  001EF6  0100               	movlb	0	; () banked
 10696  001EF8  6FD0               	movwf	?___ftmul& (0+255),b
 10697  001EFA  0E00               	movlw	0
 10698  001EFC  0100               	movlb	0	; () banked
 10699  001EFE  6FD1               	movwf	(?___ftmul+1)& (0+255),b
 10700  001F00  0E00               	movlw	0
 10701  001F02  0100               	movlb	0	; () banked
 10702  001F04  6FD2               	movwf	(?___ftmul+2)& (0+255),b
 10703                           
 10704                           ; BSR set to: 0
 10705  001F06  0012               	return	
 10706  001F08                     l4723:
 10707                           
 10708                           ; BSR set to: 0
 10709  001F08  0100               	movlb	0	; () banked
 10710  001F0A  51DE               	movf	___ftmul@sign& (0+255),w,b
 10711  001F0C  0F7B               	addlw	123
 10712  001F0E  0100               	movlb	0	; () banked
 10713  001F10  27D9               	addwf	___ftmul@exp& (0+255),f,b
 10714                           
 10715                           ; BSR set to: 0
 10716  001F12  C0D2  F0DE         	movff	___ftmul@f1+2,___ftmul@sign
 10717  001F16  0100               	movlb	0	; () banked
 10718  001F18  51D5               	movf	(___ftmul@f2+2)& (0+255),w,b
 10719  001F1A  0100               	movlb	0	; () banked
 10720  001F1C  1BDE               	xorwf	___ftmul@sign& (0+255),f,b
 10721  001F1E  0E80               	movlw	128
 10722  001F20  0100               	movlb	0	; () banked
 10723  001F22  17DE               	andwf	___ftmul@sign& (0+255),f,b
 10724                           
 10725                           ; BSR set to: 0
 10726  001F24  0100               	movlb	0	; () banked
 10727  001F26  8FD1               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10728                           
 10729                           ; BSR set to: 0
 10730  001F28  0100               	movlb	0	; () banked
 10731  001F2A  8FD4               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10732                           
 10733                           ; BSR set to: 0
 10734  001F2C  0EFF               	movlw	255
 10735  001F2E  0100               	movlb	0	; () banked
 10736  001F30  17D3               	andwf	___ftmul@f2& (0+255),f,b
 10737  001F32  0EFF               	movlw	255
 10738  001F34  0100               	movlb	0	; () banked
 10739  001F36  17D4               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10740  001F38  0E00               	movlw	0
 10741  001F3A  0100               	movlb	0	; () banked
 10742  001F3C  17D5               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10743                           
 10744                           ; BSR set to: 0
 10745  001F3E  0E00               	movlw	0
 10746  001F40  0100               	movlb	0	; () banked
 10747  001F42  6FDA               	movwf	___ftmul@f3_as_product& (0+255),b
 10748  001F44  0E00               	movlw	0
 10749  001F46  0100               	movlb	0	; () banked
 10750  001F48  6FDB               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10751  001F4A  0E00               	movlw	0
 10752  001F4C  0100               	movlb	0	; () banked
 10753  001F4E  6FDC               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10754                           
 10755                           ; BSR set to: 0
 10756  001F50  0E07               	movlw	7
 10757  001F52  0100               	movlb	0	; () banked
 10758  001F54  6FDD               	movwf	___ftmul@cntr& (0+255),b
 10759  001F56  D000               	goto	l4737
 10760  001F58                     l4737:
 10761                           
 10762                           ; BSR set to: 0
 10763  001F58  0100               	movlb	0	; () banked
 10764  001F5A  A1D0               	btfss	___ftmul@f1& (0+255),0,b
 10765  001F5C  D00D               	goto	l4741
 10766                           
 10767                           ; BSR set to: 0
 10768  001F5E  0100               	movlb	0	; () banked
 10769  001F60  51D3               	movf	___ftmul@f2& (0+255),w,b
 10770  001F62  0100               	movlb	0	; () banked
 10771  001F64  27DA               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10772  001F66  0100               	movlb	0	; () banked
 10773  001F68  51D4               	movf	(___ftmul@f2+1)& (0+255),w,b
 10774  001F6A  0100               	movlb	0	; () banked
 10775  001F6C  23DB               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10776  001F6E  0100               	movlb	0	; () banked
 10777  001F70  51D5               	movf	(___ftmul@f2+2)& (0+255),w,b
 10778  001F72  0100               	movlb	0	; () banked
 10779  001F74  23DC               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10780  001F76  D000               	goto	l4741
 10781  001F78                     l4741:
 10782                           
 10783                           ; BSR set to: 0
 10784  001F78  0100               	movlb	0	; () banked
 10785  001F7A  90D8               	bcf	status,0,c
 10786  001F7C  33D2               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10787  001F7E  33D1               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10788  001F80  33D0               	rrcf	___ftmul@f1& (0+255),f,b
 10789  001F82  0100               	movlb	0	; () banked
 10790  001F84  90D8               	bcf	status,0,c
 10791  001F86  37D3               	rlcf	___ftmul@f2& (0+255),f,b
 10792  001F88  37D4               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10793  001F8A  37D5               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10794                           
 10795                           ; BSR set to: 0
 10796  001F8C  0100               	movlb	0	; () banked
 10797  001F8E  2FDD               	decfsz	___ftmul@cntr& (0+255),f,b
 10798  001F90  D7E3               	goto	l4737
 10799  001F92  D000               	goto	l4745
 10800  001F94                     l4745:
 10801                           
 10802                           ; BSR set to: 0
 10803  001F94  0E09               	movlw	9
 10804  001F96  0100               	movlb	0	; () banked
 10805  001F98  6FDD               	movwf	___ftmul@cntr& (0+255),b
 10806  001F9A  D000               	goto	l4747
 10807  001F9C                     l4747:
 10808                           
 10809                           ; BSR set to: 0
 10810  001F9C  0100               	movlb	0	; () banked
 10811  001F9E  A1D0               	btfss	___ftmul@f1& (0+255),0,b
 10812  001FA0  D00D               	goto	l4751
 10813                           
 10814                           ; BSR set to: 0
 10815  001FA2  0100               	movlb	0	; () banked
 10816  001FA4  51D3               	movf	___ftmul@f2& (0+255),w,b
 10817  001FA6  0100               	movlb	0	; () banked
 10818  001FA8  27DA               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10819  001FAA  0100               	movlb	0	; () banked
 10820  001FAC  51D4               	movf	(___ftmul@f2+1)& (0+255),w,b
 10821  001FAE  0100               	movlb	0	; () banked
 10822  001FB0  23DB               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10823  001FB2  0100               	movlb	0	; () banked
 10824  001FB4  51D5               	movf	(___ftmul@f2+2)& (0+255),w,b
 10825  001FB6  0100               	movlb	0	; () banked
 10826  001FB8  23DC               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10827  001FBA  D000               	goto	l4751
 10828  001FBC                     l4751:
 10829                           
 10830                           ; BSR set to: 0
 10831  001FBC  0100               	movlb	0	; () banked
 10832  001FBE  90D8               	bcf	status,0,c
 10833  001FC0  33D2               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10834  001FC2  33D1               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10835  001FC4  33D0               	rrcf	___ftmul@f1& (0+255),f,b
 10836  001FC6  0100               	movlb	0	; () banked
 10837  001FC8  90D8               	bcf	status,0,c
 10838  001FCA  33DC               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10839  001FCC  33DB               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10840  001FCE  33DA               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10841                           
 10842                           ; BSR set to: 0
 10843  001FD0  0100               	movlb	0	; () banked
 10844  001FD2  2FDD               	decfsz	___ftmul@cntr& (0+255),f,b
 10845  001FD4  D7E3               	goto	l4747
 10846  001FD6  D000               	goto	l4755
 10847  001FD8                     l4755:
 10848                           
 10849                           ; BSR set to: 0
 10850  001FD8  C0DA  F01B         	movff	___ftmul@f3_as_product,___ftpack@arg
 10851  001FDC  C0DB  F01C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10852  001FE0  C0DC  F01D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10853  001FE4  C0D9  F01E         	movff	___ftmul@exp,___ftpack@exp
 10854  001FE8  C0DE  F01F         	movff	___ftmul@sign,___ftpack@sign
 10855  001FEC  EC91  F017         	call	___ftpack	;wreg free
 10856  001FF0  C01B  F0D0         	movff	?___ftpack,?___ftmul
 10857  001FF4  C01C  F0D1         	movff	?___ftpack+1,?___ftmul+1
 10858  001FF8  C01D  F0D2         	movff	?___ftpack+2,?___ftmul+2
 10859  001FFC  0012               	return	
 10860  001FFE  0012               	return		;funcret
 10861  002000                     __end_of___ftmul:
 10862                           	opt stack 0
 10863                           tosu	equ	0xFFF
 10864                           tosh	equ	0xFFE
 10865                           tosl	equ	0xFFD
 10866                           pclath	equ	0xFFA
 10867                           tblptru	equ	0xFF8
 10868                           tblptrh	equ	0xFF7
 10869                           tblptrl	equ	0xFF6
 10870                           tablat	equ	0xFF5
 10871                           prodh	equ	0xFF4
 10872                           prodl	equ	0xFF3
 10873                           intcon	equ	0xFF2
 10874                           intcon2	equ	0xFF1
 10875                           postinc0	equ	0xFEE
 10876                           wreg	equ	0xFE8
 10877                           postinc1	equ	0xFE6
 10878                           postdec1	equ	0xFE5
 10879                           fsr1h	equ	0xFE2
 10880                           fsr1l	equ	0xFE1
 10881                           indf2	equ	0xFDF
 10882                           postinc2	equ	0xFDE
 10883                           postdec2	equ	0xFDD
 10884                           plusw2	equ	0xFDB
 10885                           fsr2h	equ	0xFDA
 10886                           fsr2l	equ	0xFD9
 10887                           status	equ	0xFD8
 10888                           
 10889 ;; *************** function ___ftadd *****************
 10890 ;; Defined at:
 10891 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 10892 ;; Parameters:    Size  Location     Type
 10893 ;;  f1              3   30[BANK0 ] float 
 10894 ;;  f2              3   33[BANK0 ] float 
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;  exp1            1   41[BANK0 ] unsigned char 
 10897 ;;  exp2            1   40[BANK0 ] unsigned char 
 10898 ;;  sign            1   39[BANK0 ] unsigned char 
 10899 ;; Return value:  Size  Location     Type
 10900 ;;                  3   30[BANK0 ] float 
 10901 ;; Registers used:
 10902 ;;		wreg, status,2, status,0, cstack
 10903 ;; Tracked objects:
 10904 ;;		On entry : 0/0
 10905 ;;		On exit  : 0/0
 10906 ;;		Unchanged: 0/0
 10907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10908 ;;      Params:         0       6       0       0       0       0       0
 10909 ;;      Locals:         0       3       0       0       0       0       0
 10910 ;;      Temps:          0       3       0       0       0       0       0
 10911 ;;      Totals:         0      12       0       0       0       0       0
 10912 ;;Total ram usage:       12 bytes
 10913 ;; Hardware stack levels used:    1
 10914 ;; Hardware stack levels required when called:    5
 10915 ;; This function calls:
 10916 ;;		___ftpack
 10917 ;; This function is called by:
 10918 ;;		_Battery_Convert
 10919 ;;		_Battery_Filter
 10920 ;;		_Temp_Filter
 10921 ;;		_Temp_Convert
 10922 ;;		___ftsub
 10923 ;;		_log
 10924 ;;		_eval_poly
 10925 ;; This function uses a non-reentrant model
 10926 ;;
 10927                           
 10928                           	psect	text56
 10929  0015AC                     __ptext56:
 10930                           	opt stack 0
 10931  0015AC                     ___ftadd:
 10932                           	opt stack 22
 10933                           
 10934                           ;incstack = 0
 10935  0015AC  C0E1  F0E5         	movff	___ftadd@f1+2,??___ftadd
 10936  0015B0  0100               	movlb	0	; () banked
 10937  0015B2  6BE6               	clrf	(??___ftadd+1)& (0+255),b
 10938  0015B4  6BE7               	clrf	(??___ftadd+2)& (0+255),b
 10939  0015B6  0100               	movlb	0	; () banked
 10940  0015B8  35E0               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10941  0015BA  0100               	movlb	0	; () banked
 10942  0015BC  37E5               	rlcf	??___ftadd& (0+255),f,b
 10943  0015BE  E301               	bnc	u4551
 10944  0015C0  81E6               	bsf	(??___ftadd+1)& (0+255),0,b
 10945  0015C2                     u4551:
 10946  0015C2  0100               	movlb	0	; () banked
 10947  0015C4  51E5               	movf	??___ftadd& (0+255),w,b
 10948  0015C6  0100               	movlb	0	; () banked
 10949  0015C8  6FEA               	movwf	___ftadd@exp1& (0+255),b
 10950  0015CA  C0E4  F0E5         	movff	___ftadd@f2+2,??___ftadd
 10951  0015CE  0100               	movlb	0	; () banked
 10952  0015D0  6BE6               	clrf	(??___ftadd+1)& (0+255),b
 10953  0015D2  6BE7               	clrf	(??___ftadd+2)& (0+255),b
 10954  0015D4  0100               	movlb	0	; () banked
 10955  0015D6  35E3               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10956  0015D8  0100               	movlb	0	; () banked
 10957  0015DA  37E5               	rlcf	??___ftadd& (0+255),f,b
 10958  0015DC  E301               	bnc	u4561
 10959  0015DE  81E6               	bsf	(??___ftadd+1)& (0+255),0,b
 10960  0015E0                     u4561:
 10961  0015E0  0100               	movlb	0	; () banked
 10962  0015E2  51E5               	movf	??___ftadd& (0+255),w,b
 10963  0015E4  0100               	movlb	0	; () banked
 10964  0015E6  6FE9               	movwf	___ftadd@exp2& (0+255),b
 10965                           
 10966                           ; BSR set to: 0
 10967  0015E8  0100               	movlb	0	; () banked
 10968  0015EA  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10969  0015EC  0100               	movlb	0	; () banked
 10970  0015EE  B4D8               	btfsc	status,2,c
 10971  0015F0  D011               	goto	l1172
 10972                           
 10973                           ; BSR set to: 0
 10974  0015F2  0100               	movlb	0	; () banked
 10975  0015F4  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10976  0015F6  0100               	movlb	0	; () banked
 10977  0015F8  5DEA               	subwf	___ftadd@exp1& (0+255),w,b
 10978  0015FA  B0D8               	btfsc	status,0,c
 10979  0015FC  D012               	goto	l4649
 10980                           
 10981                           ; BSR set to: 0
 10982  0015FE  0100               	movlb	0	; () banked
 10983  001600  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10984  001602  0800               	sublw	0
 10985  001604  0100               	movlb	0	; () banked
 10986  001606  25E9               	addwf	___ftadd@exp2& (0+255),w,b
 10987  001608  0100               	movlb	0	; () banked
 10988  00160A  6FE5               	movwf	??___ftadd& (0+255),b
 10989  00160C  0E18               	movlw	24
 10990  00160E  0100               	movlb	0	; () banked
 10991  001610  65E5               	cpfsgt	??___ftadd& (0+255),b
 10992  001612  D007               	goto	l4649
 10993  001614                     l1172:
 10994                           
 10995                           ; BSR set to: 0
 10996  001614  C0E2  F0DF         	movff	___ftadd@f2,?___ftadd
 10997  001618  C0E3  F0E0         	movff	___ftadd@f2+1,?___ftadd+1
 10998  00161C  C0E4  F0E1         	movff	___ftadd@f2+2,?___ftadd+2
 10999  001620  0012               	return	
 11000  001622                     l4649:
 11001                           
 11002                           ; BSR set to: 0
 11003  001622  0100               	movlb	0	; () banked
 11004  001624  51E9               	movf	___ftadd@exp2& (0+255),w,b
 11005  001626  0100               	movlb	0	; () banked
 11006  001628  B4D8               	btfsc	status,2,c
 11007  00162A  D011               	goto	l1176
 11008                           
 11009                           ; BSR set to: 0
 11010  00162C  0100               	movlb	0	; () banked
 11011  00162E  51EA               	movf	___ftadd@exp1& (0+255),w,b
 11012  001630  0100               	movlb	0	; () banked
 11013  001632  5DE9               	subwf	___ftadd@exp2& (0+255),w,b
 11014  001634  B0D8               	btfsc	status,0,c
 11015  001636  D012               	goto	l4655
 11016                           
 11017                           ; BSR set to: 0
 11018  001638  0100               	movlb	0	; () banked
 11019  00163A  51E9               	movf	___ftadd@exp2& (0+255),w,b
 11020  00163C  0800               	sublw	0
 11021  00163E  0100               	movlb	0	; () banked
 11022  001640  25EA               	addwf	___ftadd@exp1& (0+255),w,b
 11023  001642  0100               	movlb	0	; () banked
 11024  001644  6FE5               	movwf	??___ftadd& (0+255),b
 11025  001646  0E18               	movlw	24
 11026  001648  0100               	movlb	0	; () banked
 11027  00164A  65E5               	cpfsgt	??___ftadd& (0+255),b
 11028  00164C  D007               	goto	l4655
 11029  00164E                     l1176:
 11030                           
 11031                           ; BSR set to: 0
 11032  00164E  C0DF  F0DF         	movff	___ftadd@f1,?___ftadd
 11033  001652  C0E0  F0E0         	movff	___ftadd@f1+1,?___ftadd+1
 11034  001656  C0E1  F0E1         	movff	___ftadd@f1+2,?___ftadd+2
 11035  00165A  0012               	return	
 11036  00165C                     l4655:
 11037                           
 11038                           ; BSR set to: 0
 11039  00165C  0E06               	movlw	6
 11040  00165E  0100               	movlb	0	; () banked
 11041  001660  6FE8               	movwf	___ftadd@sign& (0+255),b
 11042                           
 11043                           ; BSR set to: 0
 11044  001662  0100               	movlb	0	; () banked
 11045  001664  AFE1               	btfss	(___ftadd@f1+2)& (0+255),7,b
 11046  001666  D003               	goto	l4661
 11047                           
 11048                           ; BSR set to: 0
 11049  001668  0100               	movlb	0	; () banked
 11050  00166A  8FE8               	bsf	___ftadd@sign& (0+255),7,b
 11051  00166C  D000               	goto	l4661
 11052  00166E                     l4661:
 11053                           
 11054                           ; BSR set to: 0
 11055  00166E  0100               	movlb	0	; () banked
 11056  001670  AFE4               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11057  001672  D002               	goto	l1178
 11058                           
 11059                           ; BSR set to: 0
 11060  001674  0100               	movlb	0	; () banked
 11061  001676  8DE8               	bsf	___ftadd@sign& (0+255),6,b
 11062  001678                     l1178:
 11063                           
 11064                           ; BSR set to: 0
 11065  001678  0100               	movlb	0	; () banked
 11066  00167A  8FE0               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11067                           
 11068                           ; BSR set to: 0
 11069  00167C  0EFF               	movlw	255
 11070  00167E  0100               	movlb	0	; () banked
 11071  001680  17DF               	andwf	___ftadd@f1& (0+255),f,b
 11072  001682  0EFF               	movlw	255
 11073  001684  0100               	movlb	0	; () banked
 11074  001686  17E0               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11075  001688  0E00               	movlw	0
 11076  00168A  0100               	movlb	0	; () banked
 11077  00168C  17E1               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11078  00168E  0100               	movlb	0	; () banked
 11079  001690  8FE3               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11080                           
 11081                           ; BSR set to: 0
 11082  001692  0EFF               	movlw	255
 11083  001694  0100               	movlb	0	; () banked
 11084  001696  17E2               	andwf	___ftadd@f2& (0+255),f,b
 11085  001698  0EFF               	movlw	255
 11086  00169A  0100               	movlb	0	; () banked
 11087  00169C  17E3               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11088  00169E  0E00               	movlw	0
 11089  0016A0  0100               	movlb	0	; () banked
 11090  0016A2  17E4               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11091                           
 11092                           ; BSR set to: 0
 11093  0016A4  0100               	movlb	0	; () banked
 11094  0016A6  51E9               	movf	___ftadd@exp2& (0+255),w,b
 11095  0016A8  0100               	movlb	0	; () banked
 11096  0016AA  5DEA               	subwf	___ftadd@exp1& (0+255),w,b
 11097  0016AC  B0D8               	btfsc	status,0,c
 11098  0016AE  D028               	goto	l4681
 11099  0016B0                     l4671:
 11100                           
 11101                           ; BSR set to: 0
 11102  0016B0  0100               	movlb	0	; () banked
 11103  0016B2  90D8               	bcf	status,0,c
 11104  0016B4  37E2               	rlcf	___ftadd@f2& (0+255),f,b
 11105  0016B6  37E3               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11106  0016B8  37E4               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11107  0016BA  0100               	movlb	0	; () banked
 11108  0016BC  07E9               	decf	___ftadd@exp2& (0+255),f,b
 11109                           
 11110                           ; BSR set to: 0
 11111  0016BE  0100               	movlb	0	; () banked
 11112  0016C0  51EA               	movf	___ftadd@exp1& (0+255),w,b
 11113  0016C2  0100               	movlb	0	; () banked
 11114  0016C4  19E9               	xorwf	___ftadd@exp2& (0+255),w,b
 11115  0016C6  B4D8               	btfsc	status,2,c
 11116  0016C8  D013               	goto	l4679
 11117                           
 11118                           ; BSR set to: 0
 11119  0016CA  0100               	movlb	0	; () banked
 11120  0016CC  07E8               	decf	___ftadd@sign& (0+255),f,b
 11121  0016CE  C0E8  F0E5         	movff	___ftadd@sign,??___ftadd
 11122  0016D2  0E07               	movlw	7
 11123  0016D4  0100               	movlb	0	; () banked
 11124  0016D6  17E5               	andwf	??___ftadd& (0+255),f,b
 11125  0016D8  B4D8               	btfsc	status,2,c
 11126  0016DA  D00A               	goto	l4679
 11127  0016DC  D7E9               	goto	l4671
 11128                           
 11129                           ; BSR set to: 0
 11130                           
 11131                           ; BSR set to: 0
 11132  0016DE  D008               	goto	l4679
 11133  0016E0                     l4677:
 11134                           
 11135                           ; BSR set to: 0
 11136  0016E0  0100               	movlb	0	; () banked
 11137  0016E2  90D8               	bcf	status,0,c
 11138  0016E4  33E1               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11139  0016E6  33E0               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11140  0016E8  33DF               	rrcf	___ftadd@f1& (0+255),f,b
 11141  0016EA  0100               	movlb	0	; () banked
 11142  0016EC  2BEA               	incf	___ftadd@exp1& (0+255),f,b
 11143  0016EE  D000               	goto	l4679
 11144  0016F0                     l4679:
 11145                           
 11146                           ; BSR set to: 0
 11147  0016F0  0100               	movlb	0	; () banked
 11148  0016F2  51E9               	movf	___ftadd@exp2& (0+255),w,b
 11149  0016F4  0100               	movlb	0	; () banked
 11150  0016F6  19EA               	xorwf	___ftadd@exp1& (0+255),w,b
 11151  0016F8  B4D8               	btfsc	status,2,c
 11152  0016FA  D030               	goto	l1187
 11153  0016FC  D7F1               	goto	l4677
 11154                           
 11155                           ; BSR set to: 0
 11156  0016FE  D02E               	goto	l1187
 11157  001700                     l4681:
 11158                           
 11159                           ; BSR set to: 0
 11160  001700  0100               	movlb	0	; () banked
 11161  001702  51EA               	movf	___ftadd@exp1& (0+255),w,b
 11162  001704  0100               	movlb	0	; () banked
 11163  001706  5DE9               	subwf	___ftadd@exp2& (0+255),w,b
 11164  001708  B0D8               	btfsc	status,0,c
 11165  00170A  D028               	goto	l1187
 11166  00170C                     l4683:
 11167                           
 11168                           ; BSR set to: 0
 11169  00170C  0100               	movlb	0	; () banked
 11170  00170E  90D8               	bcf	status,0,c
 11171  001710  37DF               	rlcf	___ftadd@f1& (0+255),f,b
 11172  001712  37E0               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11173  001714  37E1               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11174  001716  0100               	movlb	0	; () banked
 11175  001718  07EA               	decf	___ftadd@exp1& (0+255),f,b
 11176                           
 11177                           ; BSR set to: 0
 11178  00171A  0100               	movlb	0	; () banked
 11179  00171C  51EA               	movf	___ftadd@exp1& (0+255),w,b
 11180  00171E  0100               	movlb	0	; () banked
 11181  001720  19E9               	xorwf	___ftadd@exp2& (0+255),w,b
 11182  001722  B4D8               	btfsc	status,2,c
 11183  001724  D013               	goto	l4691
 11184                           
 11185                           ; BSR set to: 0
 11186  001726  0100               	movlb	0	; () banked
 11187  001728  07E8               	decf	___ftadd@sign& (0+255),f,b
 11188  00172A  C0E8  F0E5         	movff	___ftadd@sign,??___ftadd
 11189  00172E  0E07               	movlw	7
 11190  001730  0100               	movlb	0	; () banked
 11191  001732  17E5               	andwf	??___ftadd& (0+255),f,b
 11192  001734  B4D8               	btfsc	status,2,c
 11193  001736  D00A               	goto	l4691
 11194  001738  D7E9               	goto	l4683
 11195                           
 11196                           ; BSR set to: 0
 11197                           
 11198                           ; BSR set to: 0
 11199  00173A  D008               	goto	l4691
 11200  00173C                     l4689:
 11201                           
 11202                           ; BSR set to: 0
 11203  00173C  0100               	movlb	0	; () banked
 11204  00173E  90D8               	bcf	status,0,c
 11205  001740  33E4               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11206  001742  33E3               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11207  001744  33E2               	rrcf	___ftadd@f2& (0+255),f,b
 11208  001746  0100               	movlb	0	; () banked
 11209  001748  2BE9               	incf	___ftadd@exp2& (0+255),f,b
 11210  00174A  D000               	goto	l4691
 11211  00174C                     l4691:
 11212                           
 11213                           ; BSR set to: 0
 11214  00174C  0100               	movlb	0	; () banked
 11215  00174E  51E9               	movf	___ftadd@exp2& (0+255),w,b
 11216  001750  0100               	movlb	0	; () banked
 11217  001752  19EA               	xorwf	___ftadd@exp1& (0+255),w,b
 11218  001754  B4D8               	btfsc	status,2,c
 11219  001756  D002               	goto	l1187
 11220  001758  D7F1               	goto	l4689
 11221                           
 11222                           ; BSR set to: 0
 11223  00175A  D000               	goto	l1187
 11224  00175C                     l1187:
 11225                           
 11226                           ; BSR set to: 0
 11227  00175C  0100               	movlb	0	; () banked
 11228  00175E  AFE8               	btfss	___ftadd@sign& (0+255),7,b
 11229  001760  D012               	goto	l1196
 11230                           
 11231                           ; BSR set to: 0
 11232  001762  0EFF               	movlw	255
 11233  001764  0100               	movlb	0	; () banked
 11234  001766  1BDF               	xorwf	___ftadd@f1& (0+255),f,b
 11235  001768  0EFF               	movlw	255
 11236  00176A  0100               	movlb	0	; () banked
 11237  00176C  1BE0               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11238  00176E  0EFF               	movlw	255
 11239  001770  0100               	movlb	0	; () banked
 11240  001772  1BE1               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11241  001774  0E01               	movlw	1
 11242  001776  0100               	movlb	0	; () banked
 11243  001778  27DF               	addwf	___ftadd@f1& (0+255),f,b
 11244  00177A  0E00               	movlw	0
 11245  00177C  0100               	movlb	0	; () banked
 11246  00177E  23E0               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11247  001780  0E00               	movlw	0
 11248  001782  0100               	movlb	0	; () banked
 11249  001784  23E1               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11250  001786                     l1196:
 11251                           
 11252                           ; BSR set to: 0
 11253  001786  0100               	movlb	0	; () banked
 11254  001788  ADE8               	btfss	___ftadd@sign& (0+255),6,b
 11255  00178A  D013               	goto	l4697
 11256                           
 11257                           ; BSR set to: 0
 11258  00178C  0EFF               	movlw	255
 11259  00178E  0100               	movlb	0	; () banked
 11260  001790  1BE2               	xorwf	___ftadd@f2& (0+255),f,b
 11261  001792  0EFF               	movlw	255
 11262  001794  0100               	movlb	0	; () banked
 11263  001796  1BE3               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11264  001798  0EFF               	movlw	255
 11265  00179A  0100               	movlb	0	; () banked
 11266  00179C  1BE4               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11267  00179E  0E01               	movlw	1
 11268  0017A0  0100               	movlb	0	; () banked
 11269  0017A2  27E2               	addwf	___ftadd@f2& (0+255),f,b
 11270  0017A4  0E00               	movlw	0
 11271  0017A6  0100               	movlb	0	; () banked
 11272  0017A8  23E3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11273  0017AA  0E00               	movlw	0
 11274  0017AC  0100               	movlb	0	; () banked
 11275  0017AE  23E4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11276  0017B0  D000               	goto	l4697
 11277  0017B2                     l4697:
 11278                           
 11279                           ; BSR set to: 0
 11280  0017B2  0E00               	movlw	0
 11281  0017B4  0100               	movlb	0	; () banked
 11282  0017B6  6FE8               	movwf	___ftadd@sign& (0+255),b
 11283                           
 11284                           ; BSR set to: 0
 11285  0017B8  0100               	movlb	0	; () banked
 11286  0017BA  51DF               	movf	___ftadd@f1& (0+255),w,b
 11287  0017BC  0100               	movlb	0	; () banked
 11288  0017BE  27E2               	addwf	___ftadd@f2& (0+255),f,b
 11289  0017C0  0100               	movlb	0	; () banked
 11290  0017C2  51E0               	movf	(___ftadd@f1+1)& (0+255),w,b
 11291  0017C4  0100               	movlb	0	; () banked
 11292  0017C6  23E3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11293  0017C8  0100               	movlb	0	; () banked
 11294  0017CA  51E1               	movf	(___ftadd@f1+2)& (0+255),w,b
 11295  0017CC  0100               	movlb	0	; () banked
 11296  0017CE  23E4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11297                           
 11298                           ; BSR set to: 0
 11299  0017D0  0100               	movlb	0	; () banked
 11300  0017D2  AFE4               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11301  0017D4  D016               	goto	l4707
 11302                           
 11303                           ; BSR set to: 0
 11304  0017D6  0EFF               	movlw	255
 11305  0017D8  0100               	movlb	0	; () banked
 11306  0017DA  1BE2               	xorwf	___ftadd@f2& (0+255),f,b
 11307  0017DC  0EFF               	movlw	255
 11308  0017DE  0100               	movlb	0	; () banked
 11309  0017E0  1BE3               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11310  0017E2  0EFF               	movlw	255
 11311  0017E4  0100               	movlb	0	; () banked
 11312  0017E6  1BE4               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11313  0017E8  0E01               	movlw	1
 11314  0017EA  0100               	movlb	0	; () banked
 11315  0017EC  27E2               	addwf	___ftadd@f2& (0+255),f,b
 11316  0017EE  0E00               	movlw	0
 11317  0017F0  0100               	movlb	0	; () banked
 11318  0017F2  23E3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11319  0017F4  0E00               	movlw	0
 11320  0017F6  0100               	movlb	0	; () banked
 11321  0017F8  23E4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11322                           
 11323                           ; BSR set to: 0
 11324  0017FA  0E01               	movlw	1
 11325  0017FC  0100               	movlb	0	; () banked
 11326  0017FE  6FE8               	movwf	___ftadd@sign& (0+255),b
 11327  001800  D000               	goto	l4707
 11328  001802                     l4707:
 11329                           
 11330                           ; BSR set to: 0
 11331  001802  C0E2  F01B         	movff	___ftadd@f2,___ftpack@arg
 11332  001806  C0E3  F01C         	movff	___ftadd@f2+1,___ftpack@arg+1
 11333  00180A  C0E4  F01D         	movff	___ftadd@f2+2,___ftpack@arg+2
 11334  00180E  C0EA  F01E         	movff	___ftadd@exp1,___ftpack@exp
 11335  001812  C0E8  F01F         	movff	___ftadd@sign,___ftpack@sign
 11336  001816  EC91  F017         	call	___ftpack	;wreg free
 11337  00181A  C01B  F0DF         	movff	?___ftpack,?___ftadd
 11338  00181E  C01C  F0E0         	movff	?___ftpack+1,?___ftadd+1
 11339  001822  C01D  F0E1         	movff	?___ftpack+2,?___ftadd+2
 11340  001826  0012               	return	
 11341  001828  0012               	return		;funcret
 11342  00182A                     __end_of___ftadd:
 11343                           	opt stack 0
 11344                           tosu	equ	0xFFF
 11345                           tosh	equ	0xFFE
 11346                           tosl	equ	0xFFD
 11347                           pclath	equ	0xFFA
 11348                           tblptru	equ	0xFF8
 11349                           tblptrh	equ	0xFF7
 11350                           tblptrl	equ	0xFF6
 11351                           tablat	equ	0xFF5
 11352                           prodh	equ	0xFF4
 11353                           prodl	equ	0xFF3
 11354                           intcon	equ	0xFF2
 11355                           intcon2	equ	0xFF1
 11356                           postinc0	equ	0xFEE
 11357                           wreg	equ	0xFE8
 11358                           postinc1	equ	0xFE6
 11359                           postdec1	equ	0xFE5
 11360                           fsr1h	equ	0xFE2
 11361                           fsr1l	equ	0xFE1
 11362                           indf2	equ	0xFDF
 11363                           postinc2	equ	0xFDE
 11364                           postdec2	equ	0xFDD
 11365                           plusw2	equ	0xFDB
 11366                           fsr2h	equ	0xFDA
 11367                           fsr2l	equ	0xFD9
 11368                           status	equ	0xFD8
 11369                           
 11370 ;; *************** function ___ftpack *****************
 11371 ;; Defined at:
 11372 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;  arg             3   26[COMRAM] unsigned um
 11375 ;;  exp             1   29[COMRAM] unsigned char 
 11376 ;;  sign            1   30[COMRAM] unsigned char 
 11377 ;; Auto vars:     Size  Location     Type
 11378 ;;		None
 11379 ;; Return value:  Size  Location     Type
 11380 ;;                  3   26[COMRAM] float 
 11381 ;; Registers used:
 11382 ;;		wreg, status,2, status,0
 11383 ;; Tracked objects:
 11384 ;;		On entry : 0/0
 11385 ;;		On exit  : 0/0
 11386 ;;		Unchanged: 0/0
 11387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11388 ;;      Params:         5       0       0       0       0       0       0
 11389 ;;      Locals:         0       0       0       0       0       0       0
 11390 ;;      Temps:          3       0       0       0       0       0       0
 11391 ;;      Totals:         8       0       0       0       0       0       0
 11392 ;;Total ram usage:        8 bytes
 11393 ;; Hardware stack levels used:    1
 11394 ;; Hardware stack levels required when called:    4
 11395 ;; This function calls:
 11396 ;;		Nothing
 11397 ;; This function is called by:
 11398 ;;		___altoft
 11399 ;;		___awtoft
 11400 ;;		___ftadd
 11401 ;;		___ftdiv
 11402 ;;		___ftmul
 11403 ;; This function uses a non-reentrant model
 11404 ;;
 11405                           
 11406                           	psect	text57
 11407  002F22                     __ptext57:
 11408                           	opt stack 0
 11409  002F22                     ___ftpack:
 11410                           	opt stack 23
 11411                           
 11412                           ;incstack = 0
 11413  002F22  501E               	movf	___ftpack@exp,w,c
 11414  002F24  B4D8               	btfsc	status,2,c
 11415  002F26  D005               	goto	l4507
 11416  002F28  501B               	movf	___ftpack@arg,w,c
 11417  002F2A  101C               	iorwf	___ftpack@arg+1,w,c
 11418  002F2C  101D               	iorwf	___ftpack@arg+2,w,c
 11419  002F2E  A4D8               	btfss	status,2,c
 11420  002F30  D00E               	goto	l4513
 11421  002F32                     l4507:
 11422  002F32  0E00               	movlw	0
 11423  002F34  6E1B               	movwf	?___ftpack,c
 11424  002F36  0E00               	movlw	0
 11425  002F38  6E1C               	movwf	?___ftpack+1,c
 11426  002F3A  0E00               	movlw	0
 11427  002F3C  6E1D               	movwf	?___ftpack+2,c
 11428  002F3E  0012               	return	
 11429  002F40  D006               	goto	l4513
 11430  002F42                     l4511:
 11431  002F42  2A1E               	incf	___ftpack@exp,f,c
 11432  002F44  90D8               	bcf	status,0,c
 11433  002F46  321D               	rrcf	___ftpack@arg+2,f,c
 11434  002F48  321C               	rrcf	___ftpack@arg+1,f,c
 11435  002F4A  321B               	rrcf	___ftpack@arg,f,c
 11436  002F4C  D000               	goto	l4513
 11437  002F4E                     l4513:
 11438  002F4E  0E00               	movlw	0
 11439  002F50  141B               	andwf	___ftpack@arg,w,c
 11440  002F52  6E20               	movwf	??___ftpack& (0+255),c
 11441  002F54  0E00               	movlw	0
 11442  002F56  141C               	andwf	___ftpack@arg+1,w,c
 11443  002F58  6E21               	movwf	(??___ftpack+1)& (0+255),c
 11444  002F5A  0EFE               	movlw	254
 11445  002F5C  141D               	andwf	___ftpack@arg+2,w,c
 11446  002F5E  6E22               	movwf	(??___ftpack+2)& (0+255),c
 11447  002F60  5020               	movf	??___ftpack,w,c
 11448  002F62  1021               	iorwf	??___ftpack+1,w,c
 11449  002F64  1022               	iorwf	??___ftpack+2,w,c
 11450  002F66  B4D8               	btfsc	status,2,c
 11451  002F68  D00E               	goto	l4519
 11452  002F6A  D7EB               	goto	l4511
 11453  002F6C  D00C               	goto	l4519
 11454  002F6E                     l4515:
 11455  002F6E  2A1E               	incf	___ftpack@exp,f,c
 11456  002F70  0E01               	movlw	1
 11457  002F72  261B               	addwf	___ftpack@arg,f,c
 11458  002F74  0E00               	movlw	0
 11459  002F76  221C               	addwfc	___ftpack@arg+1,f,c
 11460  002F78  0E00               	movlw	0
 11461  002F7A  221D               	addwfc	___ftpack@arg+2,f,c
 11462  002F7C  90D8               	bcf	status,0,c
 11463  002F7E  321D               	rrcf	___ftpack@arg+2,f,c
 11464  002F80  321C               	rrcf	___ftpack@arg+1,f,c
 11465  002F82  321B               	rrcf	___ftpack@arg,f,c
 11466  002F84  D000               	goto	l4519
 11467  002F86                     l4519:
 11468  002F86  0E00               	movlw	0
 11469  002F88  141B               	andwf	___ftpack@arg,w,c
 11470  002F8A  6E20               	movwf	??___ftpack& (0+255),c
 11471  002F8C  0E00               	movlw	0
 11472  002F8E  141C               	andwf	___ftpack@arg+1,w,c
 11473  002F90  6E21               	movwf	(??___ftpack+1)& (0+255),c
 11474  002F92  0EFF               	movlw	255
 11475  002F94  141D               	andwf	___ftpack@arg+2,w,c
 11476  002F96  6E22               	movwf	(??___ftpack+2)& (0+255),c
 11477  002F98  5020               	movf	??___ftpack,w,c
 11478  002F9A  1021               	iorwf	??___ftpack+1,w,c
 11479  002F9C  1022               	iorwf	??___ftpack+2,w,c
 11480  002F9E  B4D8               	btfsc	status,2,c
 11481  002FA0  D008               	goto	l4523
 11482  002FA2  D7E5               	goto	l4515
 11483  002FA4  D006               	goto	l4523
 11484  002FA6                     l4521:
 11485  002FA6  061E               	decf	___ftpack@exp,f,c
 11486  002FA8  90D8               	bcf	status,0,c
 11487  002FAA  361B               	rlcf	___ftpack@arg,f,c
 11488  002FAC  361C               	rlcf	___ftpack@arg+1,f,c
 11489  002FAE  361D               	rlcf	___ftpack@arg+2,f,c
 11490  002FB0  D000               	goto	l4523
 11491  002FB2                     l4523:
 11492  002FB2  BE1C               	btfsc	___ftpack@arg+1,7,c
 11493  002FB4  D004               	goto	l1143
 11494  002FB6  0E02               	movlw	2
 11495  002FB8  601E               	cpfslt	___ftpack@exp,c
 11496  002FBA  D7F5               	goto	l4521
 11497  002FBC  D000               	goto	l1143
 11498  002FBE                     l1143:
 11499  002FBE  B01E               	btfsc	___ftpack@exp,0,c
 11500  002FC0  D002               	goto	l4529
 11501  002FC2  9E1C               	bcf	___ftpack@arg+1,7,c
 11502  002FC4  D000               	goto	l4529
 11503  002FC6                     l4529:
 11504  002FC6  90D8               	bcf	status,0,c
 11505  002FC8  321E               	rrcf	___ftpack@exp,f,c
 11506  002FCA  501E               	movf	___ftpack@exp,w,c
 11507  002FCC  121D               	iorwf	___ftpack@arg+2,f,c
 11508  002FCE  501F               	movf	___ftpack@sign,w,c
 11509  002FD0  B4D8               	btfsc	status,2,c
 11510  002FD2  D002               	goto	l4535
 11511  002FD4  8E1D               	bsf	___ftpack@arg+2,7,c
 11512  002FD6  D000               	goto	l4535
 11513  002FD8                     l4535:
 11514  002FD8  C01B  F01B         	movff	___ftpack@arg,?___ftpack
 11515  002FDC  C01C  F01C         	movff	___ftpack@arg+1,?___ftpack+1
 11516  002FE0  C01D  F01D         	movff	___ftpack@arg+2,?___ftpack+2
 11517  002FE4  0012               	return	
 11518  002FE6  0012               	return		;funcret
 11519  002FE8                     __end_of___ftpack:
 11520                           	opt stack 0
 11521                           tosu	equ	0xFFF
 11522                           tosh	equ	0xFFE
 11523                           tosl	equ	0xFFD
 11524                           pclath	equ	0xFFA
 11525                           tblptru	equ	0xFF8
 11526                           tblptrh	equ	0xFF7
 11527                           tblptrl	equ	0xFF6
 11528                           tablat	equ	0xFF5
 11529                           prodh	equ	0xFF4
 11530                           prodl	equ	0xFF3
 11531                           intcon	equ	0xFF2
 11532                           intcon2	equ	0xFF1
 11533                           postinc0	equ	0xFEE
 11534                           wreg	equ	0xFE8
 11535                           postinc1	equ	0xFE6
 11536                           postdec1	equ	0xFE5
 11537                           fsr1h	equ	0xFE2
 11538                           fsr1l	equ	0xFE1
 11539                           indf2	equ	0xFDF
 11540                           postinc2	equ	0xFDE
 11541                           postdec2	equ	0xFDD
 11542                           plusw2	equ	0xFDB
 11543                           fsr2h	equ	0xFDA
 11544                           fsr2l	equ	0xFD9
 11545                           status	equ	0xFD8
 11546                           
 11547 ;; *************** function _INTERRUPT_InterruptManager *****************
 11548 ;; Defined at:
 11549 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
 11550 ;; Parameters:    Size  Location     Type
 11551 ;;		None
 11552 ;; Auto vars:     Size  Location     Type
 11553 ;;		None
 11554 ;; Return value:  Size  Location     Type
 11555 ;;		None               void
 11556 ;; Registers used:
 11557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11563 ;;      Params:         0       0       0       0       0       0       0
 11564 ;;      Locals:         0       0       0       0       0       0       0
 11565 ;;      Temps:         14       0       0       0       0       0       0
 11566 ;;      Totals:        14       0       0       0       0       0       0
 11567 ;;Total ram usage:       14 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; Hardware stack levels required when called:    3
 11570 ;; This function calls:
 11571 ;;		_ADC_ISR
 11572 ;;		_EUSART1_Receive_ISR
 11573 ;;		_EUSART1_Transmit_ISR
 11574 ;;		_TMR1_ISR
 11575 ;; This function is called by:
 11576 ;;		Interrupt level 2
 11577 ;; This function uses a non-reentrant model
 11578 ;;
 11579                           
 11580                           	psect	intcode
 11581  000008                     __pintcode:
 11582                           	opt stack 0
 11583  000008                     _INTERRUPT_InterruptManager:
 11584                           	opt stack 21
 11585                           
 11586                           ;incstack = 0
 11587  000008  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
 11588  00000C  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 11589  000010  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 11590  000014  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 11591  000018  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 11592  00001C  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 11593  000020  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 11594  000024  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 11595  000028  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
 11596  00002C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
 11597  000030  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 11598  000034  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 11599  000038  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 11600  00003C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
 11601                           
 11602                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 11603  000040  BA9D               	btfsc	3997,5,c	;volatile
 11604  000042  AA9E               	btfss	3998,5,c	;volatile
 11605  000044  D003               	goto	i2l209
 11606                           
 11607                           ;interrupt_manager.c: 73: {
 11608                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
 11609  000046  EC95  F01D         	call	_EUSART1_Receive_ISR	;wreg free
 11610                           
 11611                           ;interrupt_manager.c: 75: }
 11612  00004A  D012               	goto	i2l217
 11613  00004C                     i2l209:
 11614                           
 11615                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 11616  00004C  BC9D               	btfsc	3997,6,c	;volatile
 11617  00004E  AC9E               	btfss	3998,6,c	;volatile
 11618  000050  D003               	goto	i2l211
 11619                           
 11620                           ;interrupt_manager.c: 77: {
 11621                           ;interrupt_manager.c: 78: ADC_ISR();
 11622  000052  EC2B  F006         	call	_ADC_ISR	;wreg free
 11623                           
 11624                           ;interrupt_manager.c: 79: }
 11625  000056  D00C               	goto	i2l217
 11626  000058                     i2l211:
 11627                           
 11628                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 11629  000058  B09D               	btfsc	3997,0,c	;volatile
 11630  00005A  A09E               	btfss	3998,0,c	;volatile
 11631  00005C  D003               	goto	i2l213
 11632                           
 11633                           ;interrupt_manager.c: 81: {
 11634                           ;interrupt_manager.c: 82: TMR1_ISR();
 11635  00005E  ECDD  F01B         	call	_TMR1_ISR	;wreg free
 11636                           
 11637                           ;interrupt_manager.c: 83: }
 11638  000062  D006               	goto	i2l217
 11639  000064                     i2l213:
 11640                           
 11641                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 11642  000064  B89D               	btfsc	3997,4,c	;volatile
 11643  000066  A89E               	btfss	3998,4,c	;volatile
 11644  000068  D003               	goto	i2l217
 11645                           
 11646                           ;interrupt_manager.c: 85: {
 11647                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
 11648  00006A  EC99  F01C         	call	_EUSART1_Transmit_ISR	;wreg free
 11649                           
 11650                           ;interrupt_manager.c: 88: else
 11651                           ;interrupt_manager.c: 89: {
 11652                           
 11653                           ;interrupt_manager.c: 87: }
 11654  00006E  D000               	goto	i2l217
 11655  000070                     i2l217:
 11656  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 11657  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 11658  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 11659  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 11660  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 11661  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 11662  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 11663  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 11664  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 11665  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 11666  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 11667  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 11668  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 11669  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 11670  0000A8  0011               	retfie		f
 11671  0000AA                     __end_of_INTERRUPT_InterruptManager:
 11672                           	opt stack 0
 11673                           tosu	equ	0xFFF
 11674                           tosh	equ	0xFFE
 11675                           tosl	equ	0xFFD
 11676                           pclatu	equ	0xFFB
 11677                           pclath	equ	0xFFA
 11678                           tblptru	equ	0xFF8
 11679                           tblptrh	equ	0xFF7
 11680                           tblptrl	equ	0xFF6
 11681                           tablat	equ	0xFF5
 11682                           prodh	equ	0xFF4
 11683                           prodl	equ	0xFF3
 11684                           intcon	equ	0xFF2
 11685                           intcon2	equ	0xFF1
 11686                           postinc0	equ	0xFEE
 11687                           fsr0h	equ	0xFEA
 11688                           fsr0l	equ	0xFE9
 11689                           wreg	equ	0xFE8
 11690                           postinc1	equ	0xFE6
 11691                           postdec1	equ	0xFE5
 11692                           fsr1h	equ	0xFE2
 11693                           fsr1l	equ	0xFE1
 11694                           indf2	equ	0xFDF
 11695                           postinc2	equ	0xFDE
 11696                           postdec2	equ	0xFDD
 11697                           plusw2	equ	0xFDB
 11698                           fsr2h	equ	0xFDA
 11699                           fsr2l	equ	0xFD9
 11700                           status	equ	0xFD8
 11701                           
 11702 ;; *************** function _TMR1_ISR *****************
 11703 ;; Defined at:
 11704 ;;		line 112 in file "mcc_generated_files/tmr1.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;		None
 11707 ;; Auto vars:     Size  Location     Type
 11708 ;;		None
 11709 ;; Return value:  Size  Location     Type
 11710 ;;		None               void
 11711 ;; Registers used:
 11712 ;;		wreg, status,2, status,0, cstack
 11713 ;; Tracked objects:
 11714 ;;		On entry : 0/0
 11715 ;;		On exit  : 0/0
 11716 ;;		Unchanged: 0/0
 11717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11718 ;;      Params:         0       0       0       0       0       0       0
 11719 ;;      Locals:         0       0       0       0       0       0       0
 11720 ;;      Temps:          0       0       0       0       0       0       0
 11721 ;;      Totals:         0       0       0       0       0       0       0
 11722 ;;Total ram usage:        0 bytes
 11723 ;; Hardware stack levels used:    1
 11724 ;; Hardware stack levels required when called:    2
 11725 ;; This function calls:
 11726 ;;		_Battery_Read
 11727 ;;		_Temp_Read
 11728 ;; This function is called by:
 11729 ;;		_INTERRUPT_InterruptManager
 11730 ;; This function uses a non-reentrant model
 11731 ;;
 11732                           
 11733                           	psect	text59
 11734  0037BA                     __ptext59:
 11735                           	opt stack 0
 11736  0037BA                     _TMR1_ISR:
 11737                           	opt stack 21
 11738                           
 11739                           ;tmr1.c: 116: PIR1bits.TMR1IF = 0;
 11740                           
 11741                           ;incstack = 0
 11742  0037BA  909E               	bcf	3998,0,c	;volatile
 11743                           
 11744                           ;tmr1.c: 119: TMR1H = (timer1ReloadVal >> 8);
 11745  0037BC  5038               	movf	_timer1ReloadVal+1,w,c	;volatile
 11746  0037BE  6ECF               	movwf	4047,c	;volatile
 11747                           
 11748                           ;tmr1.c: 120: TMR1L = (uint8_t) timer1ReloadVal;
 11749  0037C0  C037  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 11750                           
 11751                           ;tmr1.c: 123: if (++CountCallBack >= 4)
 11752  0037C4  4A2F               	infsnz	_CountCallBack,f,c
 11753  0037C6  2A30               	incf	_CountCallBack+1,f,c
 11754  0037C8  BE30               	btfsc	_CountCallBack+1,7,c
 11755  0037CA  D00B               	goto	i2l4023
 11756  0037CC  5030               	movf	_CountCallBack+1,w,c
 11757  0037CE  E104               	bnz	i2u397_40
 11758  0037D0  0E04               	movlw	4
 11759  0037D2  5C2F               	subwf	_CountCallBack,w,c
 11760  0037D4  A0D8               	btfss	status,0,c
 11761  0037D6  D005               	goto	i2l4023
 11762  0037D8                     i2u397_40:
 11763                           
 11764                           ;tmr1.c: 124: {
 11765                           ;tmr1.c: 129: CountCallBack = 0;
 11766  0037D8  0E00               	movlw	0
 11767  0037DA  6E30               	movwf	_CountCallBack+1,c
 11768  0037DC  0E00               	movlw	0
 11769  0037DE  6E2F               	movwf	_CountCallBack,c
 11770  0037E0  D000               	goto	i2l4023
 11771  0037E2                     i2l4023:
 11772                           
 11773                           ;tmr1.c: 130: }
 11774                           ;tmr1.c: 135: if(CountCallBack == 1)
 11775  0037E2  042F               	decf	_CountCallBack,w,c
 11776  0037E4  1030               	iorwf	_CountCallBack+1,w,c
 11777  0037E6  A4D8               	btfss	status,2,c
 11778  0037E8  D003               	goto	i2l4027
 11779                           
 11780                           ;tmr1.c: 136: {
 11781                           ;tmr1.c: 137: Battery_Read();
 11782  0037EA  ECE1  F01D         	call	_Battery_Read	;wreg free
 11783  0037EE  D000               	goto	i2l4027
 11784  0037F0                     i2l4027:
 11785                           
 11786                           ;tmr1.c: 138: }
 11787                           ;tmr1.c: 139: if(CountCallBack == 3)
 11788  0037F0  0E03               	movlw	3
 11789  0037F2  182F               	xorwf	_CountCallBack,w,c
 11790  0037F4  1030               	iorwf	_CountCallBack+1,w,c
 11791  0037F6  A4D8               	btfss	status,2,c
 11792  0037F8  0012               	return	
 11793                           
 11794                           ;tmr1.c: 140: {
 11795                           ;tmr1.c: 141: Temp_Read();
 11796  0037FA  ECD5  F01D         	call	_Temp_Read	;wreg free
 11797  0037FE  0012               	return	
 11798  003800  0012               	return		;funcret
 11799  003802                     __end_of_TMR1_ISR:
 11800                           	opt stack 0
 11801                           tosu	equ	0xFFF
 11802                           tosh	equ	0xFFE
 11803                           tosl	equ	0xFFD
 11804                           pclatu	equ	0xFFB
 11805                           pclath	equ	0xFFA
 11806                           tblptru	equ	0xFF8
 11807                           tblptrh	equ	0xFF7
 11808                           tblptrl	equ	0xFF6
 11809                           tablat	equ	0xFF5
 11810                           prodh	equ	0xFF4
 11811                           prodl	equ	0xFF3
 11812                           intcon	equ	0xFF2
 11813                           intcon2	equ	0xFF1
 11814                           postinc0	equ	0xFEE
 11815                           fsr0h	equ	0xFEA
 11816                           fsr0l	equ	0xFE9
 11817                           wreg	equ	0xFE8
 11818                           postinc1	equ	0xFE6
 11819                           postdec1	equ	0xFE5
 11820                           fsr1h	equ	0xFE2
 11821                           fsr1l	equ	0xFE1
 11822                           indf2	equ	0xFDF
 11823                           postinc2	equ	0xFDE
 11824                           postdec2	equ	0xFDD
 11825                           plusw2	equ	0xFDB
 11826                           fsr2h	equ	0xFDA
 11827                           fsr2l	equ	0xFD9
 11828                           status	equ	0xFD8
 11829                           
 11830 ;; *************** function _Temp_Read *****************
 11831 ;; Defined at:
 11832 ;;		line 36 in file "Tempeture.c"
 11833 ;; Parameters:    Size  Location     Type
 11834 ;;		None
 11835 ;; Auto vars:     Size  Location     Type
 11836 ;;		None
 11837 ;; Return value:  Size  Location     Type
 11838 ;;		None               void
 11839 ;; Registers used:
 11840 ;;		wreg, status,2, status,0, cstack
 11841 ;; Tracked objects:
 11842 ;;		On entry : 0/0
 11843 ;;		On exit  : 0/0
 11844 ;;		Unchanged: 0/0
 11845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11846 ;;      Params:         0       0       0       0       0       0       0
 11847 ;;      Locals:         0       0       0       0       0       0       0
 11848 ;;      Temps:          0       0       0       0       0       0       0
 11849 ;;      Totals:         0       0       0       0       0       0       0
 11850 ;;Total ram usage:        0 bytes
 11851 ;; Hardware stack levels used:    1
 11852 ;; Hardware stack levels required when called:    1
 11853 ;; This function calls:
 11854 ;;		_ADC_StartConversion
 11855 ;; This function is called by:
 11856 ;;		_TMR1_ISR
 11857 ;; This function uses a non-reentrant model
 11858 ;;
 11859                           
 11860                           	psect	text60
 11861  003BAA                     __ptext60:
 11862                           	opt stack 0
 11863  003BAA                     _Temp_Read:
 11864                           	opt stack 21
 11865                           
 11866                           ;Tempeture.c: 39: ADC_Buffer_Point = 0;
 11867                           
 11868                           ;incstack = 0
 11869  003BAA  0E00               	movlw	0
 11870  003BAC  6E2E               	movwf	_ADC_Buffer_Point+1,c
 11871  003BAE  0E00               	movlw	0
 11872  003BB0  6E2D               	movwf	_ADC_Buffer_Point,c
 11873                           
 11874                           ;Tempeture.c: 40: Temp_Aquire = 1;
 11875  003BB2  0E01               	movlw	1
 11876  003BB4  6E3A               	movwf	_Temp_Aquire,c
 11877                           
 11878                           ;Tempeture.c: 41: ADCON1 = 0x80;
 11879  003BB6  0E80               	movlw	128
 11880  003BB8  6EC1               	movwf	4033,c	;volatile
 11881                           
 11882                           ;Tempeture.c: 42: ADC_StartConversion(Temp1);
 11883  003BBA  0E0E               	movlw	14
 11884  003BBC  ECA4  F01D         	call	_ADC_StartConversion
 11885  003BC0  0012               	return		;funcret
 11886  003BC2                     __end_of_Temp_Read:
 11887                           	opt stack 0
 11888                           tosu	equ	0xFFF
 11889                           tosh	equ	0xFFE
 11890                           tosl	equ	0xFFD
 11891                           pclatu	equ	0xFFB
 11892                           pclath	equ	0xFFA
 11893                           tblptru	equ	0xFF8
 11894                           tblptrh	equ	0xFF7
 11895                           tblptrl	equ	0xFF6
 11896                           tablat	equ	0xFF5
 11897                           prodh	equ	0xFF4
 11898                           prodl	equ	0xFF3
 11899                           intcon	equ	0xFF2
 11900                           intcon2	equ	0xFF1
 11901                           postinc0	equ	0xFEE
 11902                           fsr0h	equ	0xFEA
 11903                           fsr0l	equ	0xFE9
 11904                           wreg	equ	0xFE8
 11905                           postinc1	equ	0xFE6
 11906                           postdec1	equ	0xFE5
 11907                           fsr1h	equ	0xFE2
 11908                           fsr1l	equ	0xFE1
 11909                           indf2	equ	0xFDF
 11910                           postinc2	equ	0xFDE
 11911                           postdec2	equ	0xFDD
 11912                           plusw2	equ	0xFDB
 11913                           fsr2h	equ	0xFDA
 11914                           fsr2l	equ	0xFD9
 11915                           status	equ	0xFD8
 11916                           
 11917 ;; *************** function _Battery_Read *****************
 11918 ;; Defined at:
 11919 ;;		line 18 in file "Battery.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;		None
 11922 ;; Auto vars:     Size  Location     Type
 11923 ;;		None
 11924 ;; Return value:  Size  Location     Type
 11925 ;;		None               void
 11926 ;; Registers used:
 11927 ;;		wreg, status,2, status,0, cstack
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11933 ;;      Params:         0       0       0       0       0       0       0
 11934 ;;      Locals:         0       0       0       0       0       0       0
 11935 ;;      Temps:          0       0       0       0       0       0       0
 11936 ;;      Totals:         0       0       0       0       0       0       0
 11937 ;;Total ram usage:        0 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:    1
 11940 ;; This function calls:
 11941 ;;		_ADC_StartConversion
 11942 ;; This function is called by:
 11943 ;;		_TMR1_ISR
 11944 ;; This function uses a non-reentrant model
 11945 ;;
 11946                           
 11947                           	psect	text61
 11948  003BC2                     __ptext61:
 11949                           	opt stack 0
 11950  003BC2                     _Battery_Read:
 11951                           	opt stack 21
 11952                           
 11953                           ;Battery.c: 20: ADC_Buffer_Point = 0;
 11954                           
 11955                           ;incstack = 0
 11956  003BC2  0E00               	movlw	0
 11957  003BC4  6E2E               	movwf	_ADC_Buffer_Point+1,c
 11958  003BC6  0E00               	movlw	0
 11959  003BC8  6E2D               	movwf	_ADC_Buffer_Point,c
 11960                           
 11961                           ;Battery.c: 21: Volt_Aquire = 1;
 11962  003BCA  0E01               	movlw	1
 11963  003BCC  6E3B               	movwf	_Volt_Aquire,c
 11964                           
 11965                           ;Battery.c: 22: ADCON1 = 0x80;
 11966  003BCE  0E80               	movlw	128
 11967  003BD0  6EC1               	movwf	4033,c	;volatile
 11968                           
 11969                           ;Battery.c: 23: ADC_StartConversion(Battery1);
 11970  003BD2  0E01               	movlw	1
 11971  003BD4  ECA4  F01D         	call	_ADC_StartConversion
 11972  003BD8  0012               	return		;funcret
 11973  003BDA                     __end_of_Battery_Read:
 11974                           	opt stack 0
 11975                           tosu	equ	0xFFF
 11976                           tosh	equ	0xFFE
 11977                           tosl	equ	0xFFD
 11978                           pclatu	equ	0xFFB
 11979                           pclath	equ	0xFFA
 11980                           tblptru	equ	0xFF8
 11981                           tblptrh	equ	0xFF7
 11982                           tblptrl	equ	0xFF6
 11983                           tablat	equ	0xFF5
 11984                           prodh	equ	0xFF4
 11985                           prodl	equ	0xFF3
 11986                           intcon	equ	0xFF2
 11987                           intcon2	equ	0xFF1
 11988                           postinc0	equ	0xFEE
 11989                           fsr0h	equ	0xFEA
 11990                           fsr0l	equ	0xFE9
 11991                           wreg	equ	0xFE8
 11992                           postinc1	equ	0xFE6
 11993                           postdec1	equ	0xFE5
 11994                           fsr1h	equ	0xFE2
 11995                           fsr1l	equ	0xFE1
 11996                           indf2	equ	0xFDF
 11997                           postinc2	equ	0xFDE
 11998                           postdec2	equ	0xFDD
 11999                           plusw2	equ	0xFDB
 12000                           fsr2h	equ	0xFDA
 12001                           fsr2l	equ	0xFD9
 12002                           status	equ	0xFD8
 12003                           
 12004 ;; *************** function _EUSART1_Transmit_ISR *****************
 12005 ;; Defined at:
 12006 ;;		line 157 in file "UART.c"
 12007 ;; Parameters:    Size  Location     Type
 12008 ;;		None
 12009 ;; Auto vars:     Size  Location     Type
 12010 ;;		None
 12011 ;; Return value:  Size  Location     Type
 12012 ;;		None               void
 12013 ;; Registers used:
 12014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12015 ;; Tracked objects:
 12016 ;;		On entry : 0/0
 12017 ;;		On exit  : 0/0
 12018 ;;		Unchanged: 0/0
 12019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12020 ;;      Params:         0       0       0       0       0       0       0
 12021 ;;      Locals:         0       0       0       0       0       0       0
 12022 ;;      Temps:          0       0       0       0       0       0       0
 12023 ;;      Totals:         0       0       0       0       0       0       0
 12024 ;;Total ram usage:        0 bytes
 12025 ;; Hardware stack levels used:    1
 12026 ;; Hardware stack levels required when called:    2
 12027 ;; This function calls:
 12028 ;;		i2_UART_buff_get
 12029 ;;		i2_UART_buff_size
 12030 ;; This function is called by:
 12031 ;;		_INTERRUPT_InterruptManager
 12032 ;; This function uses a non-reentrant model
 12033 ;;
 12034                           
 12035                           	psect	text62
 12036  003932                     __ptext62:
 12037                           	opt stack 0
 12038  003932                     _EUSART1_Transmit_ISR:
 12039                           	opt stack 21
 12040                           
 12041                           ;UART.c: 159: if (UART_buff_size(&output_buffer) > 0) {
 12042                           
 12043                           ;incstack = 0
 12044  003932  0E00               	movlw	low _output_buffer
 12045  003934  6E01               	movwf	i2UART_buff_size@_this,c
 12046  003936  0E05               	movlw	high _output_buffer
 12047  003938  6E02               	movwf	i2UART_buff_size@_this+1,c
 12048  00393A  ECED  F01D         	call	i2_UART_buff_size	;wreg free
 12049  00393E  BE02               	btfsc	?i2_UART_buff_size+1,7,c
 12050  003940  D00D               	goto	i2l4173
 12051  003942  5002               	movf	?i2_UART_buff_size+1,w,c
 12052  003944  E103               	bnz	i2u403_40
 12053  003946  0401               	decf	?i2_UART_buff_size,w,c
 12054  003948  A0D8               	btfss	status,0,c
 12055  00394A  D008               	goto	i2l4173
 12056  00394C                     i2u403_40:
 12057                           
 12058                           ;UART.c: 160: TXREG1 = UART_buff_get(&output_buffer);
 12059  00394C  0E00               	movlw	low _output_buffer
 12060  00394E  6E07               	movwf	i2UART_buff_get@_this,c
 12061  003950  0E05               	movlw	high _output_buffer
 12062  003952  6E08               	movwf	i2UART_buff_get@_this+1,c
 12063  003954  EC2C  F019         	call	i2_UART_buff_get	;wreg free
 12064  003958  6EAD               	movwf	4013,c	;volatile
 12065                           
 12066                           ;UART.c: 161: } else {
 12067  00395A  0012               	return	
 12068  00395C                     i2l4173:
 12069                           
 12070                           ;UART.c: 162: Transmit_stall = 1;
 12071  00395C  0E01               	movlw	1
 12072  00395E  6E45               	movwf	_Transmit_stall,c
 12073                           
 12074                           ;UART.c: 163: PIE1bits.TX1IE = 0;
 12075  003960  989D               	bcf	3997,4,c	;volatile
 12076  003962  0012               	return	
 12077  003964  0012               	return		;funcret
 12078  003966                     __end_of_EUSART1_Transmit_ISR:
 12079                           	opt stack 0
 12080                           tosu	equ	0xFFF
 12081                           tosh	equ	0xFFE
 12082                           tosl	equ	0xFFD
 12083                           pclatu	equ	0xFFB
 12084                           pclath	equ	0xFFA
 12085                           tblptru	equ	0xFF8
 12086                           tblptrh	equ	0xFF7
 12087                           tblptrl	equ	0xFF6
 12088                           tablat	equ	0xFF5
 12089                           prodh	equ	0xFF4
 12090                           prodl	equ	0xFF3
 12091                           intcon	equ	0xFF2
 12092                           intcon2	equ	0xFF1
 12093                           postinc0	equ	0xFEE
 12094                           fsr0h	equ	0xFEA
 12095                           fsr0l	equ	0xFE9
 12096                           wreg	equ	0xFE8
 12097                           postinc1	equ	0xFE6
 12098                           postdec1	equ	0xFE5
 12099                           fsr1h	equ	0xFE2
 12100                           fsr1l	equ	0xFE1
 12101                           indf2	equ	0xFDF
 12102                           postinc2	equ	0xFDE
 12103                           postdec2	equ	0xFDD
 12104                           plusw2	equ	0xFDB
 12105                           fsr2h	equ	0xFDA
 12106                           fsr2l	equ	0xFD9
 12107                           status	equ	0xFD8
 12108                           
 12109 ;; *************** function i2_UART_buff_size *****************
 12110 ;; Defined at:
 12111 ;;		line 102 in file "UART.c"
 12112 ;; Parameters:    Size  Location     Type
 12113 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
 12114 ;;		 -> output_buffer(206), input_buffer(206), 
 12115 ;; Auto vars:     Size  Location     Type
 12116 ;;		None
 12117 ;; Return value:  Size  Location     Type
 12118 ;;                  2    0[COMRAM] int 
 12119 ;; Registers used:
 12120 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12121 ;; Tracked objects:
 12122 ;;		On entry : 0/0
 12123 ;;		On exit  : 0/0
 12124 ;;		Unchanged: 0/0
 12125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12126 ;;      Params:         2       0       0       0       0       0       0
 12127 ;;      Locals:         0       0       0       0       0       0       0
 12128 ;;      Temps:          0       0       0       0       0       0       0
 12129 ;;      Totals:         2       0       0       0       0       0       0
 12130 ;;Total ram usage:        2 bytes
 12131 ;; Hardware stack levels used:    1
 12132 ;; This function calls:
 12133 ;;		Nothing
 12134 ;; This function is called by:
 12135 ;;		_EUSART1_Transmit_ISR
 12136 ;; This function uses a non-reentrant model
 12137 ;;
 12138                           
 12139                           	psect	text63
 12140  003BDA                     __ptext63:
 12141                           	opt stack 0
 12142  003BDA                     i2_UART_buff_size:
 12143                           	opt stack 22
 12144                           
 12145                           ;UART.c: 103: return (_this->count);
 12146                           
 12147                           ;incstack = 0
 12148  003BDA  EE20 F0CC          	lfsr	2,204
 12149  003BDE  5001               	movf	i2UART_buff_size@_this,w,c
 12150  003BE0  26D9               	addwf	fsr2l,f,c
 12151  003BE2  5002               	movf	i2UART_buff_size@_this+1,w,c
 12152  003BE4  22DA               	addwfc	fsr2h,f,c
 12153  003BE6  CFDE F001          	movff	postinc2,?i2_UART_buff_size
 12154  003BEA  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
 12155  003BEE  0012               	return	
 12156  003BF0  0012               	return		;funcret
 12157  003BF2                     __end_ofi2_UART_buff_size:
 12158                           	opt stack 0
 12159                           tosu	equ	0xFFF
 12160                           tosh	equ	0xFFE
 12161                           tosl	equ	0xFFD
 12162                           pclatu	equ	0xFFB
 12163                           pclath	equ	0xFFA
 12164                           tblptru	equ	0xFF8
 12165                           tblptrh	equ	0xFF7
 12166                           tblptrl	equ	0xFF6
 12167                           tablat	equ	0xFF5
 12168                           prodh	equ	0xFF4
 12169                           prodl	equ	0xFF3
 12170                           intcon	equ	0xFF2
 12171                           intcon2	equ	0xFF1
 12172                           postinc0	equ	0xFEE
 12173                           fsr0h	equ	0xFEA
 12174                           fsr0l	equ	0xFE9
 12175                           wreg	equ	0xFE8
 12176                           postinc1	equ	0xFE6
 12177                           postdec1	equ	0xFE5
 12178                           fsr1h	equ	0xFE2
 12179                           fsr1l	equ	0xFE1
 12180                           indf2	equ	0xFDF
 12181                           postinc2	equ	0xFDE
 12182                           postdec2	equ	0xFDD
 12183                           plusw2	equ	0xFDB
 12184                           fsr2h	equ	0xFDA
 12185                           fsr2l	equ	0xFD9
 12186                           status	equ	0xFD8
 12187                           
 12188 ;; *************** function i2_UART_buff_get *****************
 12189 ;; Defined at:
 12190 ;;		line 81 in file "UART.c"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 12193 ;;		 -> output_buffer(206), input_buffer(206), 
 12194 ;; Auto vars:     Size  Location     Type
 12195 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 12196 ;; Return value:  Size  Location     Type
 12197 ;;                  1    wreg      unsigned char 
 12198 ;; Registers used:
 12199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12200 ;; Tracked objects:
 12201 ;;		On entry : 0/0
 12202 ;;		On exit  : 0/0
 12203 ;;		Unchanged: 0/0
 12204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12205 ;;      Params:         2       0       0       0       0       0       0
 12206 ;;      Locals:         1       0       0       0       0       0       0
 12207 ;;      Temps:          2       0       0       0       0       0       0
 12208 ;;      Totals:         5       0       0       0       0       0       0
 12209 ;;Total ram usage:        5 bytes
 12210 ;; Hardware stack levels used:    1
 12211 ;; Hardware stack levels required when called:    1
 12212 ;; This function calls:
 12213 ;;		i2_UART_buff_modulo_inc
 12214 ;; This function is called by:
 12215 ;;		_EUSART1_Transmit_ISR
 12216 ;; This function uses a non-reentrant model
 12217 ;;
 12218                           
 12219                           	psect	text64
 12220  003258                     __ptext64:
 12221                           	opt stack 0
 12222  003258                     i2_UART_buff_get:
 12223                           	opt stack 21
 12224                           
 12225                           ;UART.c: 82: unsigned char c;
 12226                           ;UART.c: 83: if (_this->count > 0) {
 12227                           
 12228                           ;incstack = 0
 12229  003258  EE20 F0CC          	lfsr	2,204
 12230  00325C  5007               	movf	i2UART_buff_get@_this,w,c
 12231  00325E  26D9               	addwf	fsr2l,f,c
 12232  003260  5008               	movf	i2UART_buff_get@_this+1,w,c
 12233  003262  22DA               	addwfc	fsr2h,f,c
 12234  003264  0E01               	movlw	1
 12235  003266  BEDB               	btfsc	plusw2,7,c
 12236  003268  D03C               	goto	i2l4005
 12237  00326A  0E01               	movlw	1
 12238  00326C  50DB               	movf	plusw2,w,c
 12239  00326E  E103               	bnz	i2u396_40
 12240  003270  04DE               	decf	postinc2,w,c
 12241  003272  A0D8               	btfss	status,0,c
 12242  003274  D036               	goto	i2l4005
 12243  003276                     i2u396_40:
 12244                           
 12245                           ;UART.c: 84: c = _this->buf[_this->tail];
 12246  003276  EE20 F0CA          	lfsr	2,202
 12247  00327A  5007               	movf	i2UART_buff_get@_this,w,c
 12248  00327C  26D9               	addwf	fsr2l,f,c
 12249  00327E  5008               	movf	i2UART_buff_get@_this+1,w,c
 12250  003280  22DA               	addwfc	fsr2h,f,c
 12251  003282  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 12252  003286  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 12253  00328A  5009               	movf	??i2_UART_buff_get,w,c
 12254  00328C  2407               	addwf	i2UART_buff_get@_this,w,c
 12255  00328E  6ED9               	movwf	fsr2l,c
 12256  003290  500A               	movf	??i2_UART_buff_get+1,w,c
 12257  003292  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 12258  003294  6EDA               	movwf	fsr2h,c
 12259  003296  50DF               	movf	indf2,w,c
 12260  003298  6E0B               	movwf	i2UART_buff_get@c,c
 12261                           
 12262                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 12263  00329A  EE20 F0CA          	lfsr	2,202
 12264  00329E  5007               	movf	i2UART_buff_get@_this,w,c
 12265  0032A0  26D9               	addwf	fsr2l,f,c
 12266  0032A2  5008               	movf	i2UART_buff_get@_this+1,w,c
 12267  0032A4  22DA               	addwfc	fsr2h,f,c
 12268  0032A6  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12269  0032AA  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12270  0032AE  0E00               	movlw	0
 12271  0032B0  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12272  0032B2  0EC8               	movlw	200
 12273  0032B4  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12274  0032B6  EC28  F01D         	call	i2_UART_buff_modulo_inc	;wreg free
 12275  0032BA  EE20 F0CA          	lfsr	2,202
 12276  0032BE  5007               	movf	i2UART_buff_get@_this,w,c
 12277  0032C0  26D9               	addwf	fsr2l,f,c
 12278  0032C2  5008               	movf	i2UART_buff_get@_this+1,w,c
 12279  0032C4  22DA               	addwfc	fsr2h,f,c
 12280  0032C6  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12281  0032CA  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12282                           
 12283                           ;UART.c: 86: --_this->count;
 12284  0032CE  EE20 F0CC          	lfsr	2,204
 12285  0032D2  5007               	movf	i2UART_buff_get@_this,w,c
 12286  0032D4  26D9               	addwf	fsr2l,f,c
 12287  0032D6  5008               	movf	i2UART_buff_get@_this+1,w,c
 12288  0032D8  22DA               	addwfc	fsr2h,f,c
 12289  0032DA  06DE               	decf	postinc2,f,c
 12290  0032DC  0E00               	movlw	0
 12291  0032DE  5ADD               	subwfb	postdec2,f,c
 12292                           
 12293                           ;UART.c: 87: } else {
 12294  0032E0  D002               	goto	i2l778
 12295  0032E2                     i2l4005:
 12296                           
 12297                           ;UART.c: 88: c = 0;
 12298  0032E2  0E00               	movlw	0
 12299  0032E4  6E0B               	movwf	i2UART_buff_get@c,c
 12300  0032E6                     i2l778:
 12301                           
 12302                           ;UART.c: 89: }
 12303                           ;UART.c: 90: return (c);
 12304  0032E6  500B               	movf	i2UART_buff_get@c,w,c
 12305  0032E8  0012               	return	
 12306  0032EA  0012               	return		;funcret
 12307  0032EC                     __end_ofi2_UART_buff_get:
 12308                           	opt stack 0
 12309                           tosu	equ	0xFFF
 12310                           tosh	equ	0xFFE
 12311                           tosl	equ	0xFFD
 12312                           pclatu	equ	0xFFB
 12313                           pclath	equ	0xFFA
 12314                           tblptru	equ	0xFF8
 12315                           tblptrh	equ	0xFF7
 12316                           tblptrl	equ	0xFF6
 12317                           tablat	equ	0xFF5
 12318                           prodh	equ	0xFF4
 12319                           prodl	equ	0xFF3
 12320                           intcon	equ	0xFF2
 12321                           intcon2	equ	0xFF1
 12322                           postinc0	equ	0xFEE
 12323                           fsr0h	equ	0xFEA
 12324                           fsr0l	equ	0xFE9
 12325                           wreg	equ	0xFE8
 12326                           postinc1	equ	0xFE6
 12327                           postdec1	equ	0xFE5
 12328                           fsr1h	equ	0xFE2
 12329                           fsr1l	equ	0xFE1
 12330                           indf2	equ	0xFDF
 12331                           postinc2	equ	0xFDE
 12332                           postdec2	equ	0xFDD
 12333                           plusw2	equ	0xFDB
 12334                           fsr2h	equ	0xFDA
 12335                           fsr2l	equ	0xFD9
 12336                           status	equ	0xFD8
 12337                           
 12338 ;; *************** function _EUSART1_Receive_ISR *****************
 12339 ;; Defined at:
 12340 ;;		line 139 in file "UART.c"
 12341 ;; Parameters:    Size  Location     Type
 12342 ;;		None
 12343 ;; Auto vars:     Size  Location     Type
 12344 ;;  data            1   11[COMRAM] unsigned char 
 12345 ;; Return value:  Size  Location     Type
 12346 ;;		None               void
 12347 ;; Registers used:
 12348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12349 ;; Tracked objects:
 12350 ;;		On entry : 0/0
 12351 ;;		On exit  : 0/0
 12352 ;;		Unchanged: 0/0
 12353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12354 ;;      Params:         0       0       0       0       0       0       0
 12355 ;;      Locals:         1       0       0       0       0       0       0
 12356 ;;      Temps:          0       0       0       0       0       0       0
 12357 ;;      Totals:         1       0       0       0       0       0       0
 12358 ;;Total ram usage:        1 bytes
 12359 ;; Hardware stack levels used:    1
 12360 ;; Hardware stack levels required when called:    2
 12361 ;; This function calls:
 12362 ;;		i2_UART_buff_put
 12363 ;; This function is called by:
 12364 ;;		_INTERRUPT_InterruptManager
 12365 ;; This function uses a non-reentrant model
 12366 ;;
 12367                           
 12368                           	psect	text65
 12369  003B2A                     __ptext65:
 12370                           	opt stack 0
 12371  003B2A                     _EUSART1_Receive_ISR:
 12372                           	opt stack 21
 12373                           
 12374                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
 12375                           
 12376                           ;incstack = 0
 12377  003B2A  A2AB               	btfss	4011,1,c	;volatile
 12378  003B2C  D002               	goto	i2l809
 12379                           
 12380                           ;UART.c: 143: RC1STAbits.CREN = 0;
 12381  003B2E  98AB               	bcf	4011,4,c	;volatile
 12382                           
 12383                           ;UART.c: 144: RC1STAbits.CREN = 1;
 12384  003B30  88AB               	bsf	4011,4,c	;volatile
 12385  003B32                     i2l809:
 12386                           
 12387                           ;UART.c: 145: }
 12388                           ;UART.c: 153: unsigned char data = RCREG1;
 12389  003B32  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 12390                           
 12391                           ;UART.c: 154: UART_buff_put(&input_buffer, data);
 12392  003B36  0E00               	movlw	low _input_buffer
 12393  003B38  6E07               	movwf	i2UART_buff_put@_this,c
 12394  003B3A  0E04               	movlw	high _input_buffer
 12395  003B3C  6E08               	movwf	i2UART_buff_put@_this+1,c
 12396  003B3E  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 12397  003B42  ECD5  F013         	call	i2_UART_buff_put	;wreg free
 12398  003B46  0012               	return		;funcret
 12399  003B48                     __end_of_EUSART1_Receive_ISR:
 12400                           	opt stack 0
 12401                           tosu	equ	0xFFF
 12402                           tosh	equ	0xFFE
 12403                           tosl	equ	0xFFD
 12404                           pclatu	equ	0xFFB
 12405                           pclath	equ	0xFFA
 12406                           tblptru	equ	0xFF8
 12407                           tblptrh	equ	0xFF7
 12408                           tblptrl	equ	0xFF6
 12409                           tablat	equ	0xFF5
 12410                           prodh	equ	0xFF4
 12411                           prodl	equ	0xFF3
 12412                           intcon	equ	0xFF2
 12413                           intcon2	equ	0xFF1
 12414                           postinc0	equ	0xFEE
 12415                           fsr0h	equ	0xFEA
 12416                           fsr0l	equ	0xFE9
 12417                           wreg	equ	0xFE8
 12418                           postinc1	equ	0xFE6
 12419                           postdec1	equ	0xFE5
 12420                           fsr1h	equ	0xFE2
 12421                           fsr1l	equ	0xFE1
 12422                           indf2	equ	0xFDF
 12423                           postinc2	equ	0xFDE
 12424                           postdec2	equ	0xFDD
 12425                           plusw2	equ	0xFDB
 12426                           fsr2h	equ	0xFDA
 12427                           fsr2l	equ	0xFD9
 12428                           status	equ	0xFD8
 12429                           
 12430 ;; *************** function i2_UART_buff_put *****************
 12431 ;; Defined at:
 12432 ;;		line 68 in file "UART.c"
 12433 ;; Parameters:    Size  Location     Type
 12434 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 12435 ;;		 -> output_buffer(206), input_buffer(206), 
 12436 ;;  c               1    8[COMRAM] const unsigned char 
 12437 ;; Auto vars:     Size  Location     Type
 12438 ;;		None
 12439 ;; Return value:  Size  Location     Type
 12440 ;;		None               void
 12441 ;; Registers used:
 12442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12443 ;; Tracked objects:
 12444 ;;		On entry : 0/0
 12445 ;;		On exit  : 0/0
 12446 ;;		Unchanged: 0/0
 12447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12448 ;;      Params:         3       0       0       0       0       0       0
 12449 ;;      Locals:         0       0       0       0       0       0       0
 12450 ;;      Temps:          2       0       0       0       0       0       0
 12451 ;;      Totals:         5       0       0       0       0       0       0
 12452 ;;Total ram usage:        5 bytes
 12453 ;; Hardware stack levels used:    1
 12454 ;; Hardware stack levels required when called:    1
 12455 ;; This function calls:
 12456 ;;		i2_UART_buff_modulo_inc
 12457 ;; This function is called by:
 12458 ;;		_EUSART1_Receive_ISR
 12459 ;; This function uses a non-reentrant model
 12460 ;;
 12461                           
 12462                           	psect	text66
 12463  0027AA                     __ptext66:
 12464                           	opt stack 0
 12465  0027AA                     i2_UART_buff_put:
 12466                           	opt stack 21
 12467                           
 12468                           ;UART.c: 69: if (_this->count < 200) {
 12469                           
 12470                           ;incstack = 0
 12471  0027AA  EE20 F0CC          	lfsr	2,204
 12472  0027AE  5007               	movf	i2UART_buff_put@_this,w,c
 12473  0027B0  26D9               	addwf	fsr2l,f,c
 12474  0027B2  5008               	movf	i2UART_buff_put@_this+1,w,c
 12475  0027B4  22DA               	addwfc	fsr2h,f,c
 12476  0027B6  0E01               	movlw	1
 12477  0027B8  BEDB               	btfsc	plusw2,7,c
 12478  0027BA  D007               	goto	i2l3985
 12479  0027BC  0E01               	movlw	1
 12480  0027BE  50DB               	movf	plusw2,w,c
 12481  0027C0  E13A               	bnz	i2l3991
 12482  0027C2  0EC8               	movlw	200
 12483  0027C4  5CDE               	subwf	postinc2,w,c
 12484  0027C6  B0D8               	btfsc	status,0,c
 12485  0027C8  D036               	goto	i2l3991
 12486  0027CA                     i2l3985:
 12487                           
 12488                           ;UART.c: 70: _this->buf[_this->head] = c;
 12489  0027CA  EE20 F0C8          	lfsr	2,200
 12490  0027CE  5007               	movf	i2UART_buff_put@_this,w,c
 12491  0027D0  26D9               	addwf	fsr2l,f,c
 12492  0027D2  5008               	movf	i2UART_buff_put@_this+1,w,c
 12493  0027D4  22DA               	addwfc	fsr2h,f,c
 12494  0027D6  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 12495  0027DA  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 12496  0027DE  500A               	movf	??i2_UART_buff_put,w,c
 12497  0027E0  2407               	addwf	i2UART_buff_put@_this,w,c
 12498  0027E2  6ED9               	movwf	fsr2l,c
 12499  0027E4  500B               	movf	??i2_UART_buff_put+1,w,c
 12500  0027E6  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 12501  0027E8  6EDA               	movwf	fsr2h,c
 12502  0027EA  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 12503                           
 12504                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
 12505  0027EE  EE20 F0C8          	lfsr	2,200
 12506  0027F2  5007               	movf	i2UART_buff_put@_this,w,c
 12507  0027F4  26D9               	addwf	fsr2l,f,c
 12508  0027F6  5008               	movf	i2UART_buff_put@_this+1,w,c
 12509  0027F8  22DA               	addwfc	fsr2h,f,c
 12510  0027FA  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12511  0027FE  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12512  002802  0E00               	movlw	0
 12513  002804  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12514  002806  0EC8               	movlw	200
 12515  002808  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12516  00280A  EC28  F01D         	call	i2_UART_buff_modulo_inc	;wreg free
 12517  00280E  EE20 F0C8          	lfsr	2,200
 12518  002812  5007               	movf	i2UART_buff_put@_this,w,c
 12519  002814  26D9               	addwf	fsr2l,f,c
 12520  002816  5008               	movf	i2UART_buff_put@_this+1,w,c
 12521  002818  22DA               	addwfc	fsr2h,f,c
 12522  00281A  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12523  00281E  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12524                           
 12525                           ;UART.c: 72: ++_this->count;
 12526  002822  EE20 F0CC          	lfsr	2,204
 12527  002826  5007               	movf	i2UART_buff_put@_this,w,c
 12528  002828  26D9               	addwf	fsr2l,f,c
 12529  00282A  5008               	movf	i2UART_buff_put@_this+1,w,c
 12530  00282C  22DA               	addwfc	fsr2h,f,c
 12531  00282E  2ADE               	incf	postinc2,f,c
 12532  002830  0E00               	movlw	0
 12533  002832  22DD               	addwfc	postdec2,f,c
 12534                           
 12535                           ;UART.c: 73: } else {
 12536  002834  0012               	return	
 12537  002836                     i2l3991:
 12538                           
 12539                           ;UART.c: 74: _this->buf[_this->head] = c;
 12540  002836  EE20 F0C8          	lfsr	2,200
 12541  00283A  5007               	movf	i2UART_buff_put@_this,w,c
 12542  00283C  26D9               	addwf	fsr2l,f,c
 12543  00283E  5008               	movf	i2UART_buff_put@_this+1,w,c
 12544  002840  22DA               	addwfc	fsr2h,f,c
 12545  002842  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 12546  002846  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 12547  00284A  500A               	movf	??i2_UART_buff_put,w,c
 12548  00284C  2407               	addwf	i2UART_buff_put@_this,w,c
 12549  00284E  6ED9               	movwf	fsr2l,c
 12550  002850  500B               	movf	??i2_UART_buff_put+1,w,c
 12551  002852  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 12552  002854  6EDA               	movwf	fsr2h,c
 12553  002856  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 12554                           
 12555                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
 12556  00285A  EE20 F0C8          	lfsr	2,200
 12557  00285E  5007               	movf	i2UART_buff_put@_this,w,c
 12558  002860  26D9               	addwf	fsr2l,f,c
 12559  002862  5008               	movf	i2UART_buff_put@_this+1,w,c
 12560  002864  22DA               	addwfc	fsr2h,f,c
 12561  002866  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12562  00286A  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12563  00286E  0E00               	movlw	0
 12564  002870  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12565  002872  0EC8               	movlw	200
 12566  002874  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12567  002876  EC28  F01D         	call	i2_UART_buff_modulo_inc	;wreg free
 12568  00287A  EE20 F0C8          	lfsr	2,200
 12569  00287E  5007               	movf	i2UART_buff_put@_this,w,c
 12570  002880  26D9               	addwf	fsr2l,f,c
 12571  002882  5008               	movf	i2UART_buff_put@_this+1,w,c
 12572  002884  22DA               	addwfc	fsr2h,f,c
 12573  002886  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12574  00288A  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12575                           
 12576                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 12577  00288E  EE20 F0CA          	lfsr	2,202
 12578  002892  5007               	movf	i2UART_buff_put@_this,w,c
 12579  002894  26D9               	addwf	fsr2l,f,c
 12580  002896  5008               	movf	i2UART_buff_put@_this+1,w,c
 12581  002898  22DA               	addwfc	fsr2h,f,c
 12582  00289A  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12583  00289E  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12584  0028A2  0E00               	movlw	0
 12585  0028A4  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12586  0028A6  0EC8               	movlw	200
 12587  0028A8  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12588  0028AA  EC28  F01D         	call	i2_UART_buff_modulo_inc	;wreg free
 12589  0028AE  EE20 F0CA          	lfsr	2,202
 12590  0028B2  5007               	movf	i2UART_buff_put@_this,w,c
 12591  0028B4  26D9               	addwf	fsr2l,f,c
 12592  0028B6  5008               	movf	i2UART_buff_put@_this+1,w,c
 12593  0028B8  22DA               	addwfc	fsr2h,f,c
 12594  0028BA  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12595  0028BE  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12596  0028C2  0012               	return	
 12597  0028C4  0012               	return		;funcret
 12598  0028C6                     __end_ofi2_UART_buff_put:
 12599                           	opt stack 0
 12600                           tosu	equ	0xFFF
 12601                           tosh	equ	0xFFE
 12602                           tosl	equ	0xFFD
 12603                           pclatu	equ	0xFFB
 12604                           pclath	equ	0xFFA
 12605                           tblptru	equ	0xFF8
 12606                           tblptrh	equ	0xFF7
 12607                           tblptrl	equ	0xFF6
 12608                           tablat	equ	0xFF5
 12609                           prodh	equ	0xFF4
 12610                           prodl	equ	0xFF3
 12611                           intcon	equ	0xFF2
 12612                           intcon2	equ	0xFF1
 12613                           postinc0	equ	0xFEE
 12614                           fsr0h	equ	0xFEA
 12615                           fsr0l	equ	0xFE9
 12616                           wreg	equ	0xFE8
 12617                           postinc1	equ	0xFE6
 12618                           postdec1	equ	0xFE5
 12619                           fsr1h	equ	0xFE2
 12620                           fsr1l	equ	0xFE1
 12621                           indf2	equ	0xFDF
 12622                           postinc2	equ	0xFDE
 12623                           postdec2	equ	0xFDD
 12624                           plusw2	equ	0xFDB
 12625                           fsr2h	equ	0xFDA
 12626                           fsr2l	equ	0xFD9
 12627                           status	equ	0xFD8
 12628                           
 12629 ;; *************** function i2_UART_buff_modulo_inc *****************
 12630 ;; Defined at:
 12631 ;;		line 106 in file "UART.c"
 12632 ;; Parameters:    Size  Location     Type
 12633 ;;  value           2    0[COMRAM] const unsigned int 
 12634 ;;  modulus         2    2[COMRAM] const unsigned int 
 12635 ;; Auto vars:     Size  Location     Type
 12636 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 12637 ;; Return value:  Size  Location     Type
 12638 ;;                  2    0[COMRAM] unsigned int 
 12639 ;; Registers used:
 12640 ;;		wreg, status,2, status,0
 12641 ;; Tracked objects:
 12642 ;;		On entry : 0/0
 12643 ;;		On exit  : 0/0
 12644 ;;		Unchanged: 0/0
 12645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12646 ;;      Params:         4       0       0       0       0       0       0
 12647 ;;      Locals:         2       0       0       0       0       0       0
 12648 ;;      Temps:          0       0       0       0       0       0       0
 12649 ;;      Totals:         6       0       0       0       0       0       0
 12650 ;;Total ram usage:        6 bytes
 12651 ;; Hardware stack levels used:    1
 12652 ;; This function calls:
 12653 ;;		Nothing
 12654 ;; This function is called by:
 12655 ;;		i2_UART_buff_put
 12656 ;;		i2_UART_buff_get
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           	psect	text67
 12661  003A50                     __ptext67:
 12662                           	opt stack 0
 12663  003A50                     i2_UART_buff_modulo_inc:
 12664                           	opt stack 21
 12665                           
 12666                           ;UART.c: 107: unsigned int my_value = value + 1;
 12667                           
 12668                           ;incstack = 0
 12669  003A50  0E01               	movlw	1
 12670  003A52  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 12671  003A54  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 12672  003A56  0E00               	movlw	0
 12673  003A58  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 12674  003A5A  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 12675                           
 12676                           ;UART.c: 108: if (my_value >= modulus) {
 12677  003A5C  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 12678  003A5E  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 12679  003A60  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 12680  003A62  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 12681  003A64  A0D8               	btfss	status,0,c
 12682  003A66  D005               	goto	i2l3469
 12683                           
 12684                           ;UART.c: 109: my_value = 0;
 12685  003A68  0E00               	movlw	0
 12686  003A6A  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 12687  003A6C  0E00               	movlw	0
 12688  003A6E  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 12689  003A70  D000               	goto	i2l3469
 12690  003A72                     i2l3469:
 12691                           
 12692                           ;UART.c: 110: }
 12693                           ;UART.c: 111: return (my_value);
 12694  003A72  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 12695  003A76  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 12696  003A7A  0012               	return	
 12697  003A7C  0012               	return		;funcret
 12698  003A7E                     __end_ofi2_UART_buff_modulo_inc:
 12699                           	opt stack 0
 12700                           tosu	equ	0xFFF
 12701                           tosh	equ	0xFFE
 12702                           tosl	equ	0xFFD
 12703                           pclatu	equ	0xFFB
 12704                           pclath	equ	0xFFA
 12705                           tblptru	equ	0xFF8
 12706                           tblptrh	equ	0xFF7
 12707                           tblptrl	equ	0xFF6
 12708                           tablat	equ	0xFF5
 12709                           prodh	equ	0xFF4
 12710                           prodl	equ	0xFF3
 12711                           intcon	equ	0xFF2
 12712                           intcon2	equ	0xFF1
 12713                           postinc0	equ	0xFEE
 12714                           fsr0h	equ	0xFEA
 12715                           fsr0l	equ	0xFE9
 12716                           wreg	equ	0xFE8
 12717                           postinc1	equ	0xFE6
 12718                           postdec1	equ	0xFE5
 12719                           fsr1h	equ	0xFE2
 12720                           fsr1l	equ	0xFE1
 12721                           indf2	equ	0xFDF
 12722                           postinc2	equ	0xFDE
 12723                           postdec2	equ	0xFDD
 12724                           plusw2	equ	0xFDB
 12725                           fsr2h	equ	0xFDA
 12726                           fsr2l	equ	0xFD9
 12727                           status	equ	0xFD8
 12728                           
 12729 ;; *************** function _ADC_ISR *****************
 12730 ;; Defined at:
 12731 ;;		line 82 in file "mcc_generated_files/adc.c"
 12732 ;; Parameters:    Size  Location     Type
 12733 ;;		None
 12734 ;; Auto vars:     Size  Location     Type
 12735 ;;  ADC_Result      2   10[COMRAM] int 
 12736 ;; Return value:  Size  Location     Type
 12737 ;;		None               void
 12738 ;; Registers used:
 12739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12740 ;; Tracked objects:
 12741 ;;		On entry : 0/0
 12742 ;;		On exit  : 0/0
 12743 ;;		Unchanged: 0/0
 12744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12745 ;;      Params:         0       0       0       0       0       0       0
 12746 ;;      Locals:         2       0       0       0       0       0       0
 12747 ;;      Temps:          6       0       0       0       0       0       0
 12748 ;;      Totals:         8       0       0       0       0       0       0
 12749 ;;Total ram usage:        8 bytes
 12750 ;; Hardware stack levels used:    1
 12751 ;; Hardware stack levels required when called:    1
 12752 ;; This function calls:
 12753 ;;		_ADC_GetConversionResult
 12754 ;;		_ADC_StartConversion
 12755 ;;		_Set_4051
 12756 ;; This function is called by:
 12757 ;;		_INTERRUPT_InterruptManager
 12758 ;; This function uses a non-reentrant model
 12759 ;;
 12760                           
 12761                           	psect	text68
 12762  000C56                     __ptext68:
 12763                           	opt stack 0
 12764  000C56                     _ADC_ISR:
 12765                           	opt stack 22
 12766                           
 12767                           ;adc.c: 85: PIR1bits.ADIF = 0;
 12768                           
 12769                           ;incstack = 0
 12770  000C56  9C9E               	bcf	3998,6,c	;volatile
 12771                           
 12772                           ;adc.c: 86: int ADC_Result = 0;
 12773  000C58  0E00               	movlw	0
 12774  000C5A  6E0C               	movwf	ADC_ISR@ADC_Result+1,c
 12775  000C5C  0E00               	movlw	0
 12776  000C5E  6E0B               	movwf	ADC_ISR@ADC_Result,c
 12777                           
 12778                           ;adc.c: 87: if (Temp_Aquire){
 12779  000C60  503A               	movf	_Temp_Aquire,w,c
 12780  000C62  B4D8               	btfsc	status,2,c
 12781  000C64  D116               	goto	i2l4103
 12782                           
 12783                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
 12784  000C66  ECF9  F01D         	call	_ADC_GetConversionResult	;wreg free
 12785  000C6A  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 12786  000C6E  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 12787                           
 12788                           ;adc.c: 90: switch ( ADC_Buffer_Point )
 12789  000C72  D0E4               	goto	i2l4099
 12790  000C74                     i2l4037:
 12791                           
 12792                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12793  000C74  90D8               	bcf	status,0,c
 12794  000C76  342D               	rlcf	_ADC_Buffer_Point,w,c
 12795  000C78  6ED9               	movwf	fsr2l,c
 12796  000C7A  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12797  000C7C  6EDA               	movwf	fsr2h,c
 12798  000C7E  0E9C               	movlw	low _Temp_Adc
 12799  000C80  26D9               	addwf	fsr2l,f,c
 12800  000C82  0E00               	movlw	high _Temp_Adc
 12801  000C84  22DA               	addwfc	fsr2h,f,c
 12802  000C86  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12803  000C8A  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12804                           
 12805                           ;adc.c: 94: Set_4051(1);
 12806  000C8E  0E00               	movlw	0
 12807  000C90  6E02               	movwf	Set_4051@Channel+1,c
 12808  000C92  0E01               	movlw	1
 12809  000C94  6E01               	movwf	Set_4051@Channel,c
 12810  000C96  EC7D  F01C         	call	_Set_4051	;wreg free
 12811                           
 12812                           ;adc.c: 95: ADC_StartConversion(Temp1);
 12813  000C9A  0E0E               	movlw	14
 12814  000C9C  ECA4  F01D         	call	_ADC_StartConversion
 12815                           
 12816                           ;adc.c: 96: break;
 12817  000CA0  D0F5               	goto	i2l4101
 12818  000CA2                     i2l4043:
 12819                           
 12820                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12821  000CA2  90D8               	bcf	status,0,c
 12822  000CA4  342D               	rlcf	_ADC_Buffer_Point,w,c
 12823  000CA6  6ED9               	movwf	fsr2l,c
 12824  000CA8  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12825  000CAA  6EDA               	movwf	fsr2h,c
 12826  000CAC  0E9C               	movlw	low _Temp_Adc
 12827  000CAE  26D9               	addwf	fsr2l,f,c
 12828  000CB0  0E00               	movlw	high _Temp_Adc
 12829  000CB2  22DA               	addwfc	fsr2h,f,c
 12830  000CB4  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12831  000CB8  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12832                           
 12833                           ;adc.c: 99: Set_4051(2);
 12834  000CBC  0E00               	movlw	0
 12835  000CBE  6E02               	movwf	Set_4051@Channel+1,c
 12836  000CC0  0E02               	movlw	2
 12837  000CC2  6E01               	movwf	Set_4051@Channel,c
 12838  000CC4  EC7D  F01C         	call	_Set_4051	;wreg free
 12839                           
 12840                           ;adc.c: 100: ADC_StartConversion(Temp1);
 12841  000CC8  0E0E               	movlw	14
 12842  000CCA  ECA4  F01D         	call	_ADC_StartConversion
 12843                           
 12844                           ;adc.c: 101: break;
 12845  000CCE  D0DE               	goto	i2l4101
 12846  000CD0                     i2l4049:
 12847                           
 12848                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12849  000CD0  90D8               	bcf	status,0,c
 12850  000CD2  342D               	rlcf	_ADC_Buffer_Point,w,c
 12851  000CD4  6ED9               	movwf	fsr2l,c
 12852  000CD6  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12853  000CD8  6EDA               	movwf	fsr2h,c
 12854  000CDA  0E9C               	movlw	low _Temp_Adc
 12855  000CDC  26D9               	addwf	fsr2l,f,c
 12856  000CDE  0E00               	movlw	high _Temp_Adc
 12857  000CE0  22DA               	addwfc	fsr2h,f,c
 12858  000CE2  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12859  000CE6  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12860                           
 12861                           ;adc.c: 104: Set_4051(3);
 12862  000CEA  0E00               	movlw	0
 12863  000CEC  6E02               	movwf	Set_4051@Channel+1,c
 12864  000CEE  0E03               	movlw	3
 12865  000CF0  6E01               	movwf	Set_4051@Channel,c
 12866  000CF2  EC7D  F01C         	call	_Set_4051	;wreg free
 12867                           
 12868                           ;adc.c: 105: ADC_StartConversion(Temp1);
 12869  000CF6  0E0E               	movlw	14
 12870  000CF8  ECA4  F01D         	call	_ADC_StartConversion
 12871                           
 12872                           ;adc.c: 106: break;
 12873  000CFC  D0C7               	goto	i2l4101
 12874  000CFE                     i2l4055:
 12875                           
 12876                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12877  000CFE  90D8               	bcf	status,0,c
 12878  000D00  342D               	rlcf	_ADC_Buffer_Point,w,c
 12879  000D02  6ED9               	movwf	fsr2l,c
 12880  000D04  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12881  000D06  6EDA               	movwf	fsr2h,c
 12882  000D08  0E9C               	movlw	low _Temp_Adc
 12883  000D0A  26D9               	addwf	fsr2l,f,c
 12884  000D0C  0E00               	movlw	high _Temp_Adc
 12885  000D0E  22DA               	addwfc	fsr2h,f,c
 12886  000D10  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12887  000D14  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12888                           
 12889                           ;adc.c: 109: Set_4051(4);
 12890  000D18  0E00               	movlw	0
 12891  000D1A  6E02               	movwf	Set_4051@Channel+1,c
 12892  000D1C  0E04               	movlw	4
 12893  000D1E  6E01               	movwf	Set_4051@Channel,c
 12894  000D20  EC7D  F01C         	call	_Set_4051	;wreg free
 12895                           
 12896                           ;adc.c: 110: ADC_StartConversion(Temp1);
 12897  000D24  0E0E               	movlw	14
 12898  000D26  ECA4  F01D         	call	_ADC_StartConversion
 12899                           
 12900                           ;adc.c: 111: break;
 12901  000D2A  D0B0               	goto	i2l4101
 12902  000D2C                     i2l4061:
 12903                           
 12904                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12905  000D2C  90D8               	bcf	status,0,c
 12906  000D2E  342D               	rlcf	_ADC_Buffer_Point,w,c
 12907  000D30  6ED9               	movwf	fsr2l,c
 12908  000D32  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12909  000D34  6EDA               	movwf	fsr2h,c
 12910  000D36  0E9C               	movlw	low _Temp_Adc
 12911  000D38  26D9               	addwf	fsr2l,f,c
 12912  000D3A  0E00               	movlw	high _Temp_Adc
 12913  000D3C  22DA               	addwfc	fsr2h,f,c
 12914  000D3E  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12915  000D42  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12916                           
 12917                           ;adc.c: 114: Set_4051(5);
 12918  000D46  0E00               	movlw	0
 12919  000D48  6E02               	movwf	Set_4051@Channel+1,c
 12920  000D4A  0E05               	movlw	5
 12921  000D4C  6E01               	movwf	Set_4051@Channel,c
 12922  000D4E  EC7D  F01C         	call	_Set_4051	;wreg free
 12923                           
 12924                           ;adc.c: 115: ADC_StartConversion(Temp1);
 12925  000D52  0E0E               	movlw	14
 12926  000D54  ECA4  F01D         	call	_ADC_StartConversion
 12927                           
 12928                           ;adc.c: 116: break;
 12929  000D58  D099               	goto	i2l4101
 12930  000D5A                     i2l4067:
 12931                           
 12932                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12933  000D5A  90D8               	bcf	status,0,c
 12934  000D5C  342D               	rlcf	_ADC_Buffer_Point,w,c
 12935  000D5E  6ED9               	movwf	fsr2l,c
 12936  000D60  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12937  000D62  6EDA               	movwf	fsr2h,c
 12938  000D64  0E9C               	movlw	low _Temp_Adc
 12939  000D66  26D9               	addwf	fsr2l,f,c
 12940  000D68  0E00               	movlw	high _Temp_Adc
 12941  000D6A  22DA               	addwfc	fsr2h,f,c
 12942  000D6C  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12943  000D70  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12944                           
 12945                           ;adc.c: 119: Set_4051(6);
 12946  000D74  0E00               	movlw	0
 12947  000D76  6E02               	movwf	Set_4051@Channel+1,c
 12948  000D78  0E06               	movlw	6
 12949  000D7A  6E01               	movwf	Set_4051@Channel,c
 12950  000D7C  EC7D  F01C         	call	_Set_4051	;wreg free
 12951                           
 12952                           ;adc.c: 120: ADC_StartConversion(Temp1);
 12953  000D80  0E0E               	movlw	14
 12954  000D82  ECA4  F01D         	call	_ADC_StartConversion
 12955                           
 12956                           ;adc.c: 121: break;
 12957  000D86  D082               	goto	i2l4101
 12958  000D88                     i2l4073:
 12959                           
 12960                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12961  000D88  90D8               	bcf	status,0,c
 12962  000D8A  342D               	rlcf	_ADC_Buffer_Point,w,c
 12963  000D8C  6ED9               	movwf	fsr2l,c
 12964  000D8E  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12965  000D90  6EDA               	movwf	fsr2h,c
 12966  000D92  0E9C               	movlw	low _Temp_Adc
 12967  000D94  26D9               	addwf	fsr2l,f,c
 12968  000D96  0E00               	movlw	high _Temp_Adc
 12969  000D98  22DA               	addwfc	fsr2h,f,c
 12970  000D9A  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12971  000D9E  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12972                           
 12973                           ;adc.c: 124: Set_4051(7);
 12974  000DA2  0E00               	movlw	0
 12975  000DA4  6E02               	movwf	Set_4051@Channel+1,c
 12976  000DA6  0E07               	movlw	7
 12977  000DA8  6E01               	movwf	Set_4051@Channel,c
 12978  000DAA  EC7D  F01C         	call	_Set_4051	;wreg free
 12979                           
 12980                           ;adc.c: 125: ADC_StartConversion(Temp1);
 12981  000DAE  0E0E               	movlw	14
 12982  000DB0  ECA4  F01D         	call	_ADC_StartConversion
 12983                           
 12984                           ;adc.c: 126: break;
 12985  000DB4  D06B               	goto	i2l4101
 12986  000DB6                     i2l4079:
 12987                           
 12988                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12989  000DB6  90D8               	bcf	status,0,c
 12990  000DB8  342D               	rlcf	_ADC_Buffer_Point,w,c
 12991  000DBA  6ED9               	movwf	fsr2l,c
 12992  000DBC  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12993  000DBE  6EDA               	movwf	fsr2h,c
 12994  000DC0  0E9C               	movlw	low _Temp_Adc
 12995  000DC2  26D9               	addwf	fsr2l,f,c
 12996  000DC4  0E00               	movlw	high _Temp_Adc
 12997  000DC6  22DA               	addwfc	fsr2h,f,c
 12998  000DC8  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12999  000DCC  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 13000                           
 13001                           ;adc.c: 129: Set_4051(0);
 13002  000DD0  0E00               	movlw	0
 13003  000DD2  6E02               	movwf	Set_4051@Channel+1,c
 13004  000DD4  0E00               	movlw	0
 13005  000DD6  6E01               	movwf	Set_4051@Channel,c
 13006  000DD8  EC7D  F01C         	call	_Set_4051	;wreg free
 13007                           
 13008                           ;adc.c: 130: ADC_StartConversion(Temp1);
 13009  000DDC  0E0E               	movlw	14
 13010  000DDE  ECA4  F01D         	call	_ADC_StartConversion
 13011                           
 13012                           ;adc.c: 131: break;
 13013  000DE2  D054               	goto	i2l4101
 13014  000DE4                     i2l4085:
 13015                           
 13016                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 13017  000DE4  90D8               	bcf	status,0,c
 13018  000DE6  342D               	rlcf	_ADC_Buffer_Point,w,c
 13019  000DE8  6ED9               	movwf	fsr2l,c
 13020  000DEA  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13021  000DEC  6EDA               	movwf	fsr2h,c
 13022  000DEE  0E9C               	movlw	low _Temp_Adc
 13023  000DF0  26D9               	addwf	fsr2l,f,c
 13024  000DF2  0E00               	movlw	high _Temp_Adc
 13025  000DF4  22DA               	addwfc	fsr2h,f,c
 13026  000DF6  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 13027  000DFA  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 13028                           
 13029                           ;adc.c: 134: Set_4051(1);
 13030  000DFE  0E00               	movlw	0
 13031  000E00  6E02               	movwf	Set_4051@Channel+1,c
 13032  000E02  0E01               	movlw	1
 13033  000E04  6E01               	movwf	Set_4051@Channel,c
 13034  000E06  EC7D  F01C         	call	_Set_4051	;wreg free
 13035                           
 13036                           ;adc.c: 135: ADC_StartConversion(Temp2);
 13037  000E0A  0E14               	movlw	20
 13038  000E0C  ECA4  F01D         	call	_ADC_StartConversion
 13039                           
 13040                           ;adc.c: 136: break;
 13041  000E10  D03D               	goto	i2l4101
 13042  000E12                     i2l4091:
 13043                           
 13044                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 13045  000E12  90D8               	bcf	status,0,c
 13046  000E14  342D               	rlcf	_ADC_Buffer_Point,w,c
 13047  000E16  6ED9               	movwf	fsr2l,c
 13048  000E18  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13049  000E1A  6EDA               	movwf	fsr2h,c
 13050  000E1C  0E9C               	movlw	low _Temp_Adc
 13051  000E1E  26D9               	addwf	fsr2l,f,c
 13052  000E20  0E00               	movlw	high _Temp_Adc
 13053  000E22  22DA               	addwfc	fsr2h,f,c
 13054  000E24  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 13055  000E28  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 13056                           
 13057                           ;adc.c: 139: Temp_Aquire = 0;
 13058  000E2C  0E00               	movlw	0
 13059  000E2E  6E3A               	movwf	_Temp_Aquire,c
 13060                           
 13061                           ;adc.c: 140: Temp_Done = 1;
 13062  000E30  0E00               	movlw	0
 13063  000E32  0100               	movlb	0	; () banked
 13064  000E34  6F89               	movwf	(_Temp_Done+1)& (0+255),b
 13065  000E36  0E01               	movlw	1
 13066  000E38  6F88               	movwf	_Temp_Done& (0+255),b
 13067                           
 13068                           ; BSR set to: 0
 13069                           ;adc.c: 142: }
 13070                           
 13071                           ;adc.c: 141: break;
 13072  000E3A  D028               	goto	i2l4101
 13073  000E3C                     i2l4099:
 13074  000E3C  C02D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 13075  000E40  C02E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 13076                           
 13077                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13078                           ; Switch size 1, requested type "space"
 13079                           ; Number of cases is 1, Range of values is 0 to 0
 13080                           ; switch strategies available:
 13081                           ; Name         Instructions Cycles
 13082                           ; simple_byte            4     3 (average)
 13083                           ;	Chosen strategy is simple_byte
 13084  000E44  5006               	movf	??_ADC_ISR+1,w,c
 13085  000E46  0A00               	xorlw	0	; case 0
 13086  000E48  A4D8               	btfss	status,2,c
 13087  000E4A  D020               	goto	i2l4101
 13088                           
 13089                           ; Switch size 1, requested type "space"
 13090                           ; Number of cases is 10, Range of values is 0 to 9
 13091                           ; switch strategies available:
 13092                           ; Name         Instructions Cycles
 13093                           ; simple_byte           31    16 (average)
 13094                           ;	Chosen strategy is simple_byte
 13095  000E4C  5005               	movf	??_ADC_ISR,w,c
 13096  000E4E  0A00               	xorlw	0	; case 0
 13097  000E50  B4D8               	btfsc	status,2,c
 13098  000E52  D710               	goto	i2l4037
 13099  000E54  0A01               	xorlw	1	; case 1
 13100  000E56  B4D8               	btfsc	status,2,c
 13101  000E58  D724               	goto	i2l4043
 13102  000E5A  0A03               	xorlw	3	; case 2
 13103  000E5C  B4D8               	btfsc	status,2,c
 13104  000E5E  D738               	goto	i2l4049
 13105  000E60  0A01               	xorlw	1	; case 3
 13106  000E62  B4D8               	btfsc	status,2,c
 13107  000E64  D74C               	goto	i2l4055
 13108  000E66  0A07               	xorlw	7	; case 4
 13109  000E68  B4D8               	btfsc	status,2,c
 13110  000E6A  D760               	goto	i2l4061
 13111  000E6C  0A01               	xorlw	1	; case 5
 13112  000E6E  B4D8               	btfsc	status,2,c
 13113  000E70  D774               	goto	i2l4067
 13114  000E72  0A03               	xorlw	3	; case 6
 13115  000E74  B4D8               	btfsc	status,2,c
 13116  000E76  D788               	goto	i2l4073
 13117  000E78  0A01               	xorlw	1	; case 7
 13118  000E7A  B4D8               	btfsc	status,2,c
 13119  000E7C  D79C               	goto	i2l4079
 13120  000E7E  0A0F               	xorlw	15	; case 8
 13121  000E80  B4D8               	btfsc	status,2,c
 13122  000E82  D7B0               	goto	i2l4085
 13123  000E84  0A01               	xorlw	1	; case 9
 13124  000E86  B4D8               	btfsc	status,2,c
 13125  000E88  D7C4               	goto	i2l4091
 13126  000E8A  D000               	goto	i2l4101
 13127  000E8C                     i2l4101:
 13128                           
 13129                           ;adc.c: 143: ADC_Buffer_Point++;
 13130  000E8C  4A2D               	infsnz	_ADC_Buffer_Point,f,c
 13131  000E8E  2A2E               	incf	_ADC_Buffer_Point+1,f,c
 13132  000E90  D000               	goto	i2l4103
 13133  000E92                     i2l4103:
 13134                           
 13135                           ;adc.c: 144: }
 13136                           ;adc.c: 145: if (Volt_Aquire){
 13137  000E92  503B               	movf	_Volt_Aquire,w,c
 13138  000E94  B4D8               	btfsc	status,2,c
 13139  000E96  0012               	return	
 13140                           
 13141                           ;adc.c: 147: ADC_Result = ADC_GetConversionResult();
 13142  000E98  ECF9  F01D         	call	_ADC_GetConversionResult	;wreg free
 13143  000E9C  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 13144  000EA0  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 13145                           
 13146                           ;adc.c: 148: switch ( ADC_Buffer_Point )
 13147  000EA4  D176               	goto	i2l4151
 13148  000EA6                     i2l4107:
 13149                           
 13150                           ;adc.c: 151: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13151  000EA6  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13152  000EAA  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13153  000EAE  0E00               	movlw	0
 13154  000EB0  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13155  000EB2  0EFF               	movlw	255
 13156  000EB4  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13157  000EB6  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13158  000EB8  0E60               	movlw	low _Battery_Adc
 13159  000EBA  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13160  000EBC  0E00               	movlw	high _Battery_Adc
 13161  000EBE  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13162  000EC0  90D8               	bcf	status,0,c
 13163  000EC2  342D               	rlcf	_ADC_Buffer_Point,w,c
 13164  000EC4  6ED9               	movwf	fsr2l,c
 13165  000EC6  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13166  000EC8  6EDA               	movwf	fsr2h,c
 13167  000ECA  90D8               	bcf	status,0,c
 13168  000ECC  36D9               	rlcf	fsr2l,f,c
 13169  000ECE  36DA               	rlcf	fsr2h,f,c
 13170  000ED0  5009               	movf	??_ADC_ISR+4,w,c
 13171  000ED2  26D9               	addwf	fsr2l,f,c
 13172  000ED4  500A               	movf	??_ADC_ISR+5,w,c
 13173  000ED6  22DA               	addwfc	fsr2h,f,c
 13174  000ED8  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13175  000EDC  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13176  000EE0  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13177  000EE4  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13178                           
 13179                           ;adc.c: 152: ADC_StartConversion(Battery2);
 13180  000EE8  0E03               	movlw	3
 13181  000EEA  ECA4  F01D         	call	_ADC_StartConversion
 13182                           
 13183                           ;adc.c: 153: break;
 13184  000EEE  D179               	goto	i2l4153
 13185  000EF0                     i2l4111:
 13186                           
 13187                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13188  000EF0  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13189  000EF4  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13190  000EF8  0E00               	movlw	0
 13191  000EFA  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13192  000EFC  0EFF               	movlw	255
 13193  000EFE  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13194  000F00  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13195  000F02  0E60               	movlw	low _Battery_Adc
 13196  000F04  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13197  000F06  0E00               	movlw	high _Battery_Adc
 13198  000F08  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13199  000F0A  90D8               	bcf	status,0,c
 13200  000F0C  342D               	rlcf	_ADC_Buffer_Point,w,c
 13201  000F0E  6ED9               	movwf	fsr2l,c
 13202  000F10  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13203  000F12  6EDA               	movwf	fsr2h,c
 13204  000F14  90D8               	bcf	status,0,c
 13205  000F16  36D9               	rlcf	fsr2l,f,c
 13206  000F18  36DA               	rlcf	fsr2h,f,c
 13207  000F1A  5009               	movf	??_ADC_ISR+4,w,c
 13208  000F1C  26D9               	addwf	fsr2l,f,c
 13209  000F1E  500A               	movf	??_ADC_ISR+5,w,c
 13210  000F20  22DA               	addwfc	fsr2h,f,c
 13211  000F22  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13212  000F26  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13213  000F2A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13214  000F2E  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13215                           
 13216                           ;adc.c: 156: ADC_StartConversion(Battery3);
 13217  000F32  0E04               	movlw	4
 13218  000F34  ECA4  F01D         	call	_ADC_StartConversion
 13219                           
 13220                           ;adc.c: 157: break;
 13221  000F38  D154               	goto	i2l4153
 13222  000F3A                     i2l4115:
 13223                           
 13224                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13225  000F3A  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13226  000F3E  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13227  000F42  0E00               	movlw	0
 13228  000F44  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13229  000F46  0EFF               	movlw	255
 13230  000F48  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13231  000F4A  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13232  000F4C  0E60               	movlw	low _Battery_Adc
 13233  000F4E  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13234  000F50  0E00               	movlw	high _Battery_Adc
 13235  000F52  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13236  000F54  90D8               	bcf	status,0,c
 13237  000F56  342D               	rlcf	_ADC_Buffer_Point,w,c
 13238  000F58  6ED9               	movwf	fsr2l,c
 13239  000F5A  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13240  000F5C  6EDA               	movwf	fsr2h,c
 13241  000F5E  90D8               	bcf	status,0,c
 13242  000F60  36D9               	rlcf	fsr2l,f,c
 13243  000F62  36DA               	rlcf	fsr2h,f,c
 13244  000F64  5009               	movf	??_ADC_ISR+4,w,c
 13245  000F66  26D9               	addwf	fsr2l,f,c
 13246  000F68  500A               	movf	??_ADC_ISR+5,w,c
 13247  000F6A  22DA               	addwfc	fsr2h,f,c
 13248  000F6C  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13249  000F70  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13250  000F74  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13251  000F78  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13252                           
 13253                           ;adc.c: 160: ADC_StartConversion(Battery4);
 13254  000F7C  0E05               	movlw	5
 13255  000F7E  ECA4  F01D         	call	_ADC_StartConversion
 13256                           
 13257                           ;adc.c: 161: break;
 13258  000F82  D12F               	goto	i2l4153
 13259  000F84                     i2l4119:
 13260                           
 13261                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13262  000F84  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13263  000F88  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13264  000F8C  0E00               	movlw	0
 13265  000F8E  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13266  000F90  0EFF               	movlw	255
 13267  000F92  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13268  000F94  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13269  000F96  0E60               	movlw	low _Battery_Adc
 13270  000F98  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13271  000F9A  0E00               	movlw	high _Battery_Adc
 13272  000F9C  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13273  000F9E  90D8               	bcf	status,0,c
 13274  000FA0  342D               	rlcf	_ADC_Buffer_Point,w,c
 13275  000FA2  6ED9               	movwf	fsr2l,c
 13276  000FA4  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13277  000FA6  6EDA               	movwf	fsr2h,c
 13278  000FA8  90D8               	bcf	status,0,c
 13279  000FAA  36D9               	rlcf	fsr2l,f,c
 13280  000FAC  36DA               	rlcf	fsr2h,f,c
 13281  000FAE  5009               	movf	??_ADC_ISR+4,w,c
 13282  000FB0  26D9               	addwf	fsr2l,f,c
 13283  000FB2  500A               	movf	??_ADC_ISR+5,w,c
 13284  000FB4  22DA               	addwfc	fsr2h,f,c
 13285  000FB6  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13286  000FBA  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13287  000FBE  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13288  000FC2  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13289                           
 13290                           ;adc.c: 164: ADC_StartConversion(Battery5);
 13291  000FC6  0E18               	movlw	24
 13292  000FC8  ECA4  F01D         	call	_ADC_StartConversion
 13293                           
 13294                           ;adc.c: 165: break;
 13295  000FCC  D10A               	goto	i2l4153
 13296  000FCE                     i2l4123:
 13297                           
 13298                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13299  000FCE  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13300  000FD2  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13301  000FD6  0E00               	movlw	0
 13302  000FD8  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13303  000FDA  0EFF               	movlw	255
 13304  000FDC  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13305  000FDE  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13306  000FE0  0E60               	movlw	low _Battery_Adc
 13307  000FE2  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13308  000FE4  0E00               	movlw	high _Battery_Adc
 13309  000FE6  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13310  000FE8  90D8               	bcf	status,0,c
 13311  000FEA  342D               	rlcf	_ADC_Buffer_Point,w,c
 13312  000FEC  6ED9               	movwf	fsr2l,c
 13313  000FEE  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13314  000FF0  6EDA               	movwf	fsr2h,c
 13315  000FF2  90D8               	bcf	status,0,c
 13316  000FF4  36D9               	rlcf	fsr2l,f,c
 13317  000FF6  36DA               	rlcf	fsr2h,f,c
 13318  000FF8  5009               	movf	??_ADC_ISR+4,w,c
 13319  000FFA  26D9               	addwf	fsr2l,f,c
 13320  000FFC  500A               	movf	??_ADC_ISR+5,w,c
 13321  000FFE  22DA               	addwfc	fsr2h,f,c
 13322  001000  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13323  001004  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13324  001008  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13325  00100C  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13326                           
 13327                           ;adc.c: 168: ADC_StartConversion(Battery6);
 13328  001010  0E1A               	movlw	26
 13329  001012  ECA4  F01D         	call	_ADC_StartConversion
 13330                           
 13331                           ;adc.c: 169: break;
 13332  001016  D0E5               	goto	i2l4153
 13333  001018                     i2l4127:
 13334                           
 13335                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13336  001018  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13337  00101C  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13338  001020  0E00               	movlw	0
 13339  001022  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13340  001024  0EFF               	movlw	255
 13341  001026  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13342  001028  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13343  00102A  0E60               	movlw	low _Battery_Adc
 13344  00102C  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13345  00102E  0E00               	movlw	high _Battery_Adc
 13346  001030  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13347  001032  90D8               	bcf	status,0,c
 13348  001034  342D               	rlcf	_ADC_Buffer_Point,w,c
 13349  001036  6ED9               	movwf	fsr2l,c
 13350  001038  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13351  00103A  6EDA               	movwf	fsr2h,c
 13352  00103C  90D8               	bcf	status,0,c
 13353  00103E  36D9               	rlcf	fsr2l,f,c
 13354  001040  36DA               	rlcf	fsr2h,f,c
 13355  001042  5009               	movf	??_ADC_ISR+4,w,c
 13356  001044  26D9               	addwf	fsr2l,f,c
 13357  001046  500A               	movf	??_ADC_ISR+5,w,c
 13358  001048  22DA               	addwfc	fsr2h,f,c
 13359  00104A  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13360  00104E  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13361  001052  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13362  001056  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13363                           
 13364                           ;adc.c: 172: ADC_StartConversion(Battery7);
 13365  00105A  0E1B               	movlw	27
 13366  00105C  ECA4  F01D         	call	_ADC_StartConversion
 13367                           
 13368                           ;adc.c: 173: break;
 13369  001060  D0C0               	goto	i2l4153
 13370  001062                     i2l4131:
 13371                           
 13372                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13373  001062  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13374  001066  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13375  00106A  0E00               	movlw	0
 13376  00106C  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13377  00106E  0EFF               	movlw	255
 13378  001070  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13379  001072  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13380  001074  0E60               	movlw	low _Battery_Adc
 13381  001076  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13382  001078  0E00               	movlw	high _Battery_Adc
 13383  00107A  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13384  00107C  90D8               	bcf	status,0,c
 13385  00107E  342D               	rlcf	_ADC_Buffer_Point,w,c
 13386  001080  6ED9               	movwf	fsr2l,c
 13387  001082  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13388  001084  6EDA               	movwf	fsr2h,c
 13389  001086  90D8               	bcf	status,0,c
 13390  001088  36D9               	rlcf	fsr2l,f,c
 13391  00108A  36DA               	rlcf	fsr2h,f,c
 13392  00108C  5009               	movf	??_ADC_ISR+4,w,c
 13393  00108E  26D9               	addwf	fsr2l,f,c
 13394  001090  500A               	movf	??_ADC_ISR+5,w,c
 13395  001092  22DA               	addwfc	fsr2h,f,c
 13396  001094  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13397  001098  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13398  00109C  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13399  0010A0  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13400                           
 13401                           ;adc.c: 176: ADC_StartConversion(Battery8);
 13402  0010A4  0E08               	movlw	8
 13403  0010A6  ECA4  F01D         	call	_ADC_StartConversion
 13404                           
 13405                           ;adc.c: 177: break;
 13406  0010AA  D09B               	goto	i2l4153
 13407  0010AC                     i2l4135:
 13408                           
 13409                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13410  0010AC  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13411  0010B0  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13412  0010B4  0E00               	movlw	0
 13413  0010B6  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13414  0010B8  0EFF               	movlw	255
 13415  0010BA  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13416  0010BC  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13417  0010BE  0E60               	movlw	low _Battery_Adc
 13418  0010C0  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13419  0010C2  0E00               	movlw	high _Battery_Adc
 13420  0010C4  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13421  0010C6  90D8               	bcf	status,0,c
 13422  0010C8  342D               	rlcf	_ADC_Buffer_Point,w,c
 13423  0010CA  6ED9               	movwf	fsr2l,c
 13424  0010CC  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13425  0010CE  6EDA               	movwf	fsr2h,c
 13426  0010D0  90D8               	bcf	status,0,c
 13427  0010D2  36D9               	rlcf	fsr2l,f,c
 13428  0010D4  36DA               	rlcf	fsr2h,f,c
 13429  0010D6  5009               	movf	??_ADC_ISR+4,w,c
 13430  0010D8  26D9               	addwf	fsr2l,f,c
 13431  0010DA  500A               	movf	??_ADC_ISR+5,w,c
 13432  0010DC  22DA               	addwfc	fsr2h,f,c
 13433  0010DE  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13434  0010E2  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13435  0010E6  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13436  0010EA  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13437                           
 13438                           ;adc.c: 180: ADC_StartConversion(Battery9);
 13439  0010EE  0E0B               	movlw	11
 13440  0010F0  ECA4  F01D         	call	_ADC_StartConversion
 13441                           
 13442                           ;adc.c: 181: break;
 13443  0010F4  D076               	goto	i2l4153
 13444  0010F6                     i2l4139:
 13445                           
 13446                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13447  0010F6  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13448  0010FA  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13449  0010FE  0E00               	movlw	0
 13450  001100  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13451  001102  0EFF               	movlw	255
 13452  001104  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13453  001106  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13454  001108  0E60               	movlw	low _Battery_Adc
 13455  00110A  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13456  00110C  0E00               	movlw	high _Battery_Adc
 13457  00110E  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13458  001110  90D8               	bcf	status,0,c
 13459  001112  342D               	rlcf	_ADC_Buffer_Point,w,c
 13460  001114  6ED9               	movwf	fsr2l,c
 13461  001116  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13462  001118  6EDA               	movwf	fsr2h,c
 13463  00111A  90D8               	bcf	status,0,c
 13464  00111C  36D9               	rlcf	fsr2l,f,c
 13465  00111E  36DA               	rlcf	fsr2h,f,c
 13466  001120  5009               	movf	??_ADC_ISR+4,w,c
 13467  001122  26D9               	addwf	fsr2l,f,c
 13468  001124  500A               	movf	??_ADC_ISR+5,w,c
 13469  001126  22DA               	addwfc	fsr2h,f,c
 13470  001128  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13471  00112C  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13472  001130  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13473  001134  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13474                           
 13475                           ;adc.c: 184: ADC_StartConversion(Battery10);
 13476  001138  0E0D               	movlw	13
 13477  00113A  ECA4  F01D         	call	_ADC_StartConversion
 13478                           
 13479                           ;adc.c: 185: break;
 13480  00113E  D051               	goto	i2l4153
 13481  001140                     i2l4143:
 13482                           
 13483                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13484  001140  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13485  001144  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13486  001148  0E00               	movlw	0
 13487  00114A  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13488  00114C  0EFF               	movlw	255
 13489  00114E  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13490  001150  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13491  001152  0E60               	movlw	low _Battery_Adc
 13492  001154  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13493  001156  0E00               	movlw	high _Battery_Adc
 13494  001158  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13495  00115A  90D8               	bcf	status,0,c
 13496  00115C  342D               	rlcf	_ADC_Buffer_Point,w,c
 13497  00115E  6ED9               	movwf	fsr2l,c
 13498  001160  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13499  001162  6EDA               	movwf	fsr2h,c
 13500  001164  90D8               	bcf	status,0,c
 13501  001166  36D9               	rlcf	fsr2l,f,c
 13502  001168  36DA               	rlcf	fsr2h,f,c
 13503  00116A  5009               	movf	??_ADC_ISR+4,w,c
 13504  00116C  26D9               	addwf	fsr2l,f,c
 13505  00116E  500A               	movf	??_ADC_ISR+5,w,c
 13506  001170  22DA               	addwfc	fsr2h,f,c
 13507  001172  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13508  001176  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13509  00117A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13510  00117E  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13511                           
 13512                           ;adc.c: 188: Volt_Aquire = 0;
 13513  001182  0E00               	movlw	0
 13514  001184  6E3B               	movwf	_Volt_Aquire,c
 13515                           
 13516                           ;adc.c: 189: Volt_Done = 1;
 13517  001186  0E00               	movlw	0
 13518  001188  0100               	movlb	0	; () banked
 13519  00118A  6F8B               	movwf	(_Volt_Done+1)& (0+255),b
 13520  00118C  0E01               	movlw	1
 13521  00118E  6F8A               	movwf	_Volt_Done& (0+255),b
 13522                           
 13523                           ; BSR set to: 0
 13524                           ;adc.c: 191: }
 13525                           
 13526                           ;adc.c: 190: break;
 13527  001190  D028               	goto	i2l4153
 13528  001192                     i2l4151:
 13529  001192  C02D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 13530  001196  C02E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 13531                           
 13532                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13533                           ; Switch size 1, requested type "space"
 13534                           ; Number of cases is 1, Range of values is 0 to 0
 13535                           ; switch strategies available:
 13536                           ; Name         Instructions Cycles
 13537                           ; simple_byte            4     3 (average)
 13538                           ;	Chosen strategy is simple_byte
 13539  00119A  5006               	movf	??_ADC_ISR+1,w,c
 13540  00119C  0A00               	xorlw	0	; case 0
 13541  00119E  A4D8               	btfss	status,2,c
 13542  0011A0  D020               	goto	i2l4153
 13543                           
 13544                           ; Switch size 1, requested type "space"
 13545                           ; Number of cases is 10, Range of values is 0 to 9
 13546                           ; switch strategies available:
 13547                           ; Name         Instructions Cycles
 13548                           ; simple_byte           31    16 (average)
 13549                           ;	Chosen strategy is simple_byte
 13550  0011A2  5005               	movf	??_ADC_ISR,w,c
 13551  0011A4  0A00               	xorlw	0	; case 0
 13552  0011A6  B4D8               	btfsc	status,2,c
 13553  0011A8  D67E               	goto	i2l4107
 13554  0011AA  0A01               	xorlw	1	; case 1
 13555  0011AC  B4D8               	btfsc	status,2,c
 13556  0011AE  D6A0               	goto	i2l4111
 13557  0011B0  0A03               	xorlw	3	; case 2
 13558  0011B2  B4D8               	btfsc	status,2,c
 13559  0011B4  D6C2               	goto	i2l4115
 13560  0011B6  0A01               	xorlw	1	; case 3
 13561  0011B8  B4D8               	btfsc	status,2,c
 13562  0011BA  D6E4               	goto	i2l4119
 13563  0011BC  0A07               	xorlw	7	; case 4
 13564  0011BE  B4D8               	btfsc	status,2,c
 13565  0011C0  D706               	goto	i2l4123
 13566  0011C2  0A01               	xorlw	1	; case 5
 13567  0011C4  B4D8               	btfsc	status,2,c
 13568  0011C6  D728               	goto	i2l4127
 13569  0011C8  0A03               	xorlw	3	; case 6
 13570  0011CA  B4D8               	btfsc	status,2,c
 13571  0011CC  D74A               	goto	i2l4131
 13572  0011CE  0A01               	xorlw	1	; case 7
 13573  0011D0  B4D8               	btfsc	status,2,c
 13574  0011D2  D76C               	goto	i2l4135
 13575  0011D4  0A0F               	xorlw	15	; case 8
 13576  0011D6  B4D8               	btfsc	status,2,c
 13577  0011D8  D78E               	goto	i2l4139
 13578  0011DA  0A01               	xorlw	1	; case 9
 13579  0011DC  B4D8               	btfsc	status,2,c
 13580  0011DE  D7B0               	goto	i2l4143
 13581  0011E0  D000               	goto	i2l4153
 13582  0011E2                     i2l4153:
 13583                           
 13584                           ;adc.c: 192: ADC_Buffer_Point++;
 13585  0011E2  4A2D               	infsnz	_ADC_Buffer_Point,f,c
 13586  0011E4  2A2E               	incf	_ADC_Buffer_Point+1,f,c
 13587  0011E6  0012               	return	
 13588  0011E8  0012               	return		;funcret
 13589  0011EA                     __end_of_ADC_ISR:
 13590                           	opt stack 0
 13591                           tosu	equ	0xFFF
 13592                           tosh	equ	0xFFE
 13593                           tosl	equ	0xFFD
 13594                           pclatu	equ	0xFFB
 13595                           pclath	equ	0xFFA
 13596                           tblptru	equ	0xFF8
 13597                           tblptrh	equ	0xFF7
 13598                           tblptrl	equ	0xFF6
 13599                           tablat	equ	0xFF5
 13600                           prodh	equ	0xFF4
 13601                           prodl	equ	0xFF3
 13602                           intcon	equ	0xFF2
 13603                           intcon2	equ	0xFF1
 13604                           postinc0	equ	0xFEE
 13605                           fsr0h	equ	0xFEA
 13606                           fsr0l	equ	0xFE9
 13607                           wreg	equ	0xFE8
 13608                           postinc1	equ	0xFE6
 13609                           postdec1	equ	0xFE5
 13610                           fsr1h	equ	0xFE2
 13611                           fsr1l	equ	0xFE1
 13612                           indf2	equ	0xFDF
 13613                           postinc2	equ	0xFDE
 13614                           postdec2	equ	0xFDD
 13615                           plusw2	equ	0xFDB
 13616                           fsr2h	equ	0xFDA
 13617                           fsr2l	equ	0xFD9
 13618                           status	equ	0xFD8
 13619                           
 13620 ;; *************** function _Set_4051 *****************
 13621 ;; Defined at:
 13622 ;;		line 15 in file "Functions.c"
 13623 ;; Parameters:    Size  Location     Type
 13624 ;;  Channel         2    0[COMRAM] int 
 13625 ;; Auto vars:     Size  Location     Type
 13626 ;;		None
 13627 ;; Return value:  Size  Location     Type
 13628 ;;		None               void
 13629 ;; Registers used:
 13630 ;;		wreg, status,2, status,0
 13631 ;; Tracked objects:
 13632 ;;		On entry : 0/0
 13633 ;;		On exit  : 0/0
 13634 ;;		Unchanged: 0/0
 13635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13636 ;;      Params:         2       0       0       0       0       0       0
 13637 ;;      Locals:         0       0       0       0       0       0       0
 13638 ;;      Temps:          2       0       0       0       0       0       0
 13639 ;;      Totals:         4       0       0       0       0       0       0
 13640 ;;Total ram usage:        4 bytes
 13641 ;; Hardware stack levels used:    1
 13642 ;; This function calls:
 13643 ;;		Nothing
 13644 ;; This function is called by:
 13645 ;;		_ADC_ISR
 13646 ;; This function uses a non-reentrant model
 13647 ;;
 13648                           
 13649                           	psect	text69
 13650  0038FA                     __ptext69:
 13651                           	opt stack 0
 13652  0038FA                     _Set_4051:
 13653                           	opt stack 22
 13654                           
 13655                           ;Functions.c: 17: if (Channel & 0x01)
 13656                           
 13657                           ;incstack = 0
 13658  0038FA  A001               	btfss	Set_4051@Channel,0,c
 13659  0038FC  D002               	goto	i2l3501
 13660                           
 13661                           ;Functions.c: 18: {
 13662                           ;Functions.c: 19: do { LATA6 = ~LATA6; } while(0);
 13663  0038FE  7C89               	btg	3977,6,c	;volatile
 13664  003900  D000               	goto	i2l3501
 13665  003902                     i2l3501:
 13666                           
 13667                           ;Functions.c: 20: }
 13668                           ;Functions.c: 21: if ((Channel>>1) & 0x01)
 13669  003902  3402               	rlcf	Set_4051@Channel+1,w,c
 13670  003904  3002               	rrcf	Set_4051@Channel+1,w,c
 13671  003906  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 13672  003908  3001               	rrcf	Set_4051@Channel,w,c
 13673  00390A  6E03               	movwf	??_Set_4051& (0+255),c
 13674  00390C  A003               	btfss	??_Set_4051,0,c
 13675  00390E  D002               	goto	i2l3503
 13676                           
 13677                           ;Functions.c: 22: {
 13678                           ;Functions.c: 23: do { LATC0 = ~LATC0; } while(0);
 13679  003910  708B               	btg	3979,0,c	;volatile
 13680  003912  D000               	goto	i2l3503
 13681  003914                     i2l3503:
 13682                           
 13683                           ;Functions.c: 24: }
 13684                           ;Functions.c: 25: if ((Channel>>2) & 0x01)
 13685  003914  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 13686  003918  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 13687  00391C  3404               	rlcf	??_Set_4051+1,w,c
 13688  00391E  3204               	rrcf	??_Set_4051+1,f,c
 13689  003920  3203               	rrcf	??_Set_4051,f,c
 13690  003922  3404               	rlcf	??_Set_4051+1,w,c
 13691  003924  3204               	rrcf	??_Set_4051+1,f,c
 13692  003926  3203               	rrcf	??_Set_4051,f,c
 13693  003928  A003               	btfss	??_Set_4051,0,c
 13694  00392A  0012               	return	
 13695                           
 13696                           ;Functions.c: 26: {
 13697                           ;Functions.c: 27: do { LATC1 = ~LATC1; } while(0);
 13698  00392C  728B               	btg	3979,1,c	;volatile
 13699  00392E  0012               	return	
 13700  003930  0012               	return		;funcret
 13701  003932                     __end_of_Set_4051:
 13702                           	opt stack 0
 13703                           tosu	equ	0xFFF
 13704                           tosh	equ	0xFFE
 13705                           tosl	equ	0xFFD
 13706                           pclatu	equ	0xFFB
 13707                           pclath	equ	0xFFA
 13708                           tblptru	equ	0xFF8
 13709                           tblptrh	equ	0xFF7
 13710                           tblptrl	equ	0xFF6
 13711                           tablat	equ	0xFF5
 13712                           prodh	equ	0xFF4
 13713                           prodl	equ	0xFF3
 13714                           intcon	equ	0xFF2
 13715                           intcon2	equ	0xFF1
 13716                           postinc0	equ	0xFEE
 13717                           fsr0h	equ	0xFEA
 13718                           fsr0l	equ	0xFE9
 13719                           wreg	equ	0xFE8
 13720                           postinc1	equ	0xFE6
 13721                           postdec1	equ	0xFE5
 13722                           fsr1h	equ	0xFE2
 13723                           fsr1l	equ	0xFE1
 13724                           indf2	equ	0xFDF
 13725                           postinc2	equ	0xFDE
 13726                           postdec2	equ	0xFDD
 13727                           plusw2	equ	0xFDB
 13728                           fsr2h	equ	0xFDA
 13729                           fsr2l	equ	0xFD9
 13730                           status	equ	0xFD8
 13731                           
 13732 ;; *************** function _ADC_StartConversion *****************
 13733 ;; Defined at:
 13734 ;;		line 36 in file "mcc_generated_files/adc.c"
 13735 ;; Parameters:    Size  Location     Type
 13736 ;;  channel         1    wreg     enum E8837
 13737 ;; Auto vars:     Size  Location     Type
 13738 ;;  channel         1    1[COMRAM] enum E8837
 13739 ;; Return value:  Size  Location     Type
 13740 ;;		None               void
 13741 ;; Registers used:
 13742 ;;		wreg, status,2, status,0
 13743 ;; Tracked objects:
 13744 ;;		On entry : 0/0
 13745 ;;		On exit  : 0/0
 13746 ;;		Unchanged: 0/0
 13747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13748 ;;      Params:         0       0       0       0       0       0       0
 13749 ;;      Locals:         1       0       0       0       0       0       0
 13750 ;;      Temps:          1       0       0       0       0       0       0
 13751 ;;      Totals:         2       0       0       0       0       0       0
 13752 ;;Total ram usage:        2 bytes
 13753 ;; Hardware stack levels used:    1
 13754 ;; This function calls:
 13755 ;;		Nothing
 13756 ;; This function is called by:
 13757 ;;		_ADC_ISR
 13758 ;;		_Battery_Read
 13759 ;;		_Temp_Read
 13760 ;; This function uses a non-reentrant model
 13761 ;;
 13762                           
 13763                           	psect	text70
 13764  003B48                     __ptext70:
 13765                           	opt stack 0
 13766  003B48                     _ADC_StartConversion:
 13767                           	opt stack 21
 13768                           
 13769                           ;incstack = 0
 13770                           ;ADC_StartConversion@channel stored from wreg
 13771  003B48  6E02               	movwf	ADC_StartConversion@channel,c
 13772                           
 13773                           ;adc.c: 39: ADCON0bits.CHS = channel;
 13774  003B4A  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 13775  003B4E  4601               	rlncf	??_ADC_StartConversion,f,c
 13776  003B50  4601               	rlncf	??_ADC_StartConversion,f,c
 13777  003B52  50C2               	movf	4034,w,c	;volatile
 13778  003B54  1801               	xorwf	??_ADC_StartConversion,w,c
 13779  003B56  0B83               	andlw	-125
 13780  003B58  1801               	xorwf	??_ADC_StartConversion,w,c
 13781  003B5A  6EC2               	movwf	4034,c	;volatile
 13782                           
 13783                           ;adc.c: 42: ADCON0bits.ADON = 1;
 13784  003B5C  80C2               	bsf	4034,0,c	;volatile
 13785                           
 13786                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
 13787  003B5E  82C2               	bsf	4034,1,c	;volatile
 13788  003B60  0012               	return		;funcret
 13789  003B62                     __end_of_ADC_StartConversion:
 13790                           	opt stack 0
 13791                           tosu	equ	0xFFF
 13792                           tosh	equ	0xFFE
 13793                           tosl	equ	0xFFD
 13794                           pclatu	equ	0xFFB
 13795                           pclath	equ	0xFFA
 13796                           tblptru	equ	0xFF8
 13797                           tblptrh	equ	0xFF7
 13798                           tblptrl	equ	0xFF6
 13799                           tablat	equ	0xFF5
 13800                           prodh	equ	0xFF4
 13801                           prodl	equ	0xFF3
 13802                           intcon	equ	0xFF2
 13803                           intcon2	equ	0xFF1
 13804                           postinc0	equ	0xFEE
 13805                           fsr0h	equ	0xFEA
 13806                           fsr0l	equ	0xFE9
 13807                           wreg	equ	0xFE8
 13808                           postinc1	equ	0xFE6
 13809                           postdec1	equ	0xFE5
 13810                           fsr1h	equ	0xFE2
 13811                           fsr1l	equ	0xFE1
 13812                           indf2	equ	0xFDF
 13813                           postinc2	equ	0xFDE
 13814                           postdec2	equ	0xFDD
 13815                           plusw2	equ	0xFDB
 13816                           fsr2h	equ	0xFDA
 13817                           fsr2l	equ	0xFD9
 13818                           status	equ	0xFD8
 13819                           
 13820 ;; *************** function _ADC_GetConversionResult *****************
 13821 ;; Defined at:
 13822 ;;		line 55 in file "mcc_generated_files/adc.c"
 13823 ;; Parameters:    Size  Location     Type
 13824 ;;		None
 13825 ;; Auto vars:     Size  Location     Type
 13826 ;;		None
 13827 ;; Return value:  Size  Location     Type
 13828 ;;                  2    0[COMRAM] unsigned int 
 13829 ;; Registers used:
 13830 ;;		wreg, status,2, status,0
 13831 ;; Tracked objects:
 13832 ;;		On entry : 0/0
 13833 ;;		On exit  : 0/0
 13834 ;;		Unchanged: 0/0
 13835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13836 ;;      Params:         2       0       0       0       0       0       0
 13837 ;;      Locals:         0       0       0       0       0       0       0
 13838 ;;      Temps:          2       0       0       0       0       0       0
 13839 ;;      Totals:         4       0       0       0       0       0       0
 13840 ;;Total ram usage:        4 bytes
 13841 ;; Hardware stack levels used:    1
 13842 ;; This function calls:
 13843 ;;		Nothing
 13844 ;; This function is called by:
 13845 ;;		_ADC_ISR
 13846 ;; This function uses a non-reentrant model
 13847 ;;
 13848                           
 13849                           	psect	text71
 13850  003BF2                     __ptext71:
 13851                           	opt stack 0
 13852  003BF2                     _ADC_GetConversionResult:
 13853                           	opt stack 22
 13854                           
 13855                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
 13856                           
 13857                           ;incstack = 0
 13858  003BF2  50C4               	movf	4036,w,c	;volatile
 13859  003BF4  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 13860  003BF6  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 13861  003BF8  50C3               	movf	4035,w,c	;volatile
 13862  003BFA  2403               	addwf	??_ADC_GetConversionResult,w,c
 13863  003BFC  6E01               	movwf	?_ADC_GetConversionResult,c
 13864  003BFE  0E00               	movlw	0
 13865  003C00  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 13866  003C02  6E02               	movwf	?_ADC_GetConversionResult+1,c
 13867  003C04  0012               	return	
 13868  003C06  0012               	return		;funcret
 13869  003C08                     __end_of_ADC_GetConversionResult:
 13870                           	opt stack 0
 13871                           tosu	equ	0xFFF
 13872                           tosh	equ	0xFFE
 13873                           tosl	equ	0xFFD
 13874                           pclatu	equ	0xFFB
 13875                           pclath	equ	0xFFA
 13876                           tblptru	equ	0xFF8
 13877                           tblptrh	equ	0xFF7
 13878                           tblptrl	equ	0xFF6
 13879                           tablat	equ	0xFF5
 13880                           prodh	equ	0xFF4
 13881                           prodl	equ	0xFF3
 13882                           intcon	equ	0xFF2
 13883                           intcon2	equ	0xFF1
 13884                           postinc0	equ	0xFEE
 13885                           fsr0h	equ	0xFEA
 13886                           fsr0l	equ	0xFE9
 13887                           wreg	equ	0xFE8
 13888                           postinc1	equ	0xFE6
 13889                           postdec1	equ	0xFE5
 13890                           fsr1h	equ	0xFE2
 13891                           fsr1l	equ	0xFE1
 13892                           indf2	equ	0xFDF
 13893                           postinc2	equ	0xFDE
 13894                           postdec2	equ	0xFDD
 13895                           plusw2	equ	0xFDB
 13896                           fsr2h	equ	0xFDA
 13897                           fsr2l	equ	0xFD9
 13898                           status	equ	0xFD8
 13899                           tosu	equ	0xFFF
 13900                           tosh	equ	0xFFE
 13901                           tosl	equ	0xFFD
 13902                           pclatu	equ	0xFFB
 13903                           pclath	equ	0xFFA
 13904                           tblptru	equ	0xFF8
 13905                           tblptrh	equ	0xFF7
 13906                           tblptrl	equ	0xFF6
 13907                           tablat	equ	0xFF5
 13908                           prodh	equ	0xFF4
 13909                           prodl	equ	0xFF3
 13910                           intcon	equ	0xFF2
 13911                           intcon2	equ	0xFF1
 13912                           postinc0	equ	0xFEE
 13913                           fsr0h	equ	0xFEA
 13914                           fsr0l	equ	0xFE9
 13915                           wreg	equ	0xFE8
 13916                           postinc1	equ	0xFE6
 13917                           postdec1	equ	0xFE5
 13918                           fsr1h	equ	0xFE2
 13919                           fsr1l	equ	0xFE1
 13920                           indf2	equ	0xFDF
 13921                           postinc2	equ	0xFDE
 13922                           postdec2	equ	0xFDD
 13923                           plusw2	equ	0xFDB
 13924                           fsr2h	equ	0xFDA
 13925                           fsr2l	equ	0xFD9
 13926                           status	equ	0xFD8
 13927                           
 13928                           	psect	text72
 13929  000000                     __ptext72:
 13930                           	opt stack 0
 13931                           tosu	equ	0xFFF
 13932                           tosh	equ	0xFFE
 13933                           tosl	equ	0xFFD
 13934                           pclatu	equ	0xFFB
 13935                           pclath	equ	0xFFA
 13936                           tblptru	equ	0xFF8
 13937                           tblptrh	equ	0xFF7
 13938                           tblptrl	equ	0xFF6
 13939                           tablat	equ	0xFF5
 13940                           prodh	equ	0xFF4
 13941                           prodl	equ	0xFF3
 13942                           intcon	equ	0xFF2
 13943                           intcon2	equ	0xFF1
 13944                           postinc0	equ	0xFEE
 13945                           fsr0h	equ	0xFEA
 13946                           fsr0l	equ	0xFE9
 13947                           wreg	equ	0xFE8
 13948                           postinc1	equ	0xFE6
 13949                           postdec1	equ	0xFE5
 13950                           fsr1h	equ	0xFE2
 13951                           fsr1l	equ	0xFE1
 13952                           indf2	equ	0xFDF
 13953                           postinc2	equ	0xFDE
 13954                           postdec2	equ	0xFDD
 13955                           plusw2	equ	0xFDB
 13956                           fsr2h	equ	0xFDA
 13957                           fsr2l	equ	0xFD9
 13958                           status	equ	0xFD8
 13959                           
 13960                           	psect	rparam
 13961  0000                     tosu	equ	0xFFF
 13962                           tosh	equ	0xFFE
 13963                           tosl	equ	0xFFD
 13964                           pclatu	equ	0xFFB
 13965                           pclath	equ	0xFFA
 13966                           tblptru	equ	0xFF8
 13967                           tblptrh	equ	0xFF7
 13968                           tblptrl	equ	0xFF6
 13969                           tablat	equ	0xFF5
 13970                           prodh	equ	0xFF4
 13971                           prodl	equ	0xFF3
 13972                           intcon	equ	0xFF2
 13973                           intcon2	equ	0xFF1
 13974                           postinc0	equ	0xFEE
 13975                           fsr0h	equ	0xFEA
 13976                           fsr0l	equ	0xFE9
 13977                           wreg	equ	0xFE8
 13978                           postinc1	equ	0xFE6
 13979                           postdec1	equ	0xFE5
 13980                           fsr1h	equ	0xFE2
 13981                           fsr1l	equ	0xFE1
 13982                           indf2	equ	0xFDF
 13983                           postinc2	equ	0xFDE
 13984                           postdec2	equ	0xFDD
 13985                           plusw2	equ	0xFDB
 13986                           fsr2h	equ	0xFDA
 13987                           fsr2l	equ	0xFD9
 13988                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        61
    BSS         1099
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      69
    BANK0           160     59     156
    BANK1           256     14     234
    BANK2           256      0     206
    BANK3           256      0     200
    BANK4           256      0     206
    BANK5           256      0     206

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK4[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1129(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK3[200]), ring_buffer(BANK2[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK2[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK1[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK1[40]), 


Critical Paths under _main in COMRAM

    _main->_Battery_Fault
    _main->_Temp_Fault
    _updateComms->_receiveData
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _receiveData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Tempeture_Get->___wmul
    _Temp_Fault->___ftge
    ___awtoft->___awdiv
    ___awtoft->___ftpack
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___altoft
    ___ftdiv->___altoft
    ___altoft->___ftpack
    ___ftmul->___altoft
    ___ftadd->___altoft

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _Temp_Read->_ADC_StartConversion
    _Battery_Read->_ADC_StartConversion
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _updateComms->_ToSend
    _receiveData->_CRCcheck
    ___fttol->_Battery_Get
    _ToSend->___fttol
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _SYSTEM_Initialize->_begin
    _RunBypas->_Battery_Get
    _Battery_Get->___ftmul
    _Battery_Convert->_Battery_Filter
    _Battery_Filter->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Temp_Convert

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  155574
                                              9 BANK1      5     0      5
                    _Battery_Convert
                      _Battery_Fault
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   33771
                        _Battery_Get
                              _Delay
                      _Tempeture_Get
                             _ToSend
                            ___fttol
                        _receiveData
                           _sendData
 ---------------------------------------------------------------------------------
 (2) _sendData                                             5     5      0    5297
                                             38 COMRAM     5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (3) _crcBufS_put                                          7     2      5     564
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_flush                            4     0      4     910
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                             38 COMRAM     6     6      0
                                              7 BANK0     12    12      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (3) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (4) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              0 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1532
                                             33 BANK0     15    11      4
                        _Battery_Get (ARG)
                      _Tempeture_Get (ARG)
 ---------------------------------------------------------------------------------
 (2) _ToSend                                               3     1      2    3214
                                             48 BANK0      3     1      2
                        _Battery_Get (ARG)
            _FastTransfer_buffer_put
                      _Tempeture_Get (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Tempeture_Get                                        3     0      3    3959
                                             32 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Delay                                                9     5      4     238
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    4046
                                             41 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                         9     9      0   67478
                                              0 BANK1      9     9      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   27372
                                             54 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     476
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   13672
                                             42 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2811
                                             34 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5613
                                             42 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   13478
                                             42 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2747
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1925
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1061
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     822
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     822
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     672
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0   10335
                                             33 BANK0      7     7      0
                        _Battery_Get
                          _SetBypass
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypass                                            6     2      4     498
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    8816
                                             30 BANK0      3     0      3
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    4077
                                             41 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     776
                                             32 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   33120
                                             44 BANK0      4     4      0
                     _Battery_Filter
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3520
                                              0 BANK0     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2805
                                             34 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   13478
                                             42 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3158
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4780
                                             15 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5249
                                             30 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                             26 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    2360
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0      44
                       _Battery_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (9) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (9) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              8     8      0    1107
                                              4 COMRAM     8     8      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (9) _Set_4051                                             4     2      2     642
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _ADC_StartConversion                                 2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___wmul
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _RunBypas
     _Battery_Get
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     _SetBypass
     ___ftge
       ___wmul (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _begin
       ___awdiv
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___wmul
     _log
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _updateComms
     _Battery_Get
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     _Delay
     _Tempeture_Get
       ___wmul
     _ToSend
       _Battery_Get (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul
       _FastTransfer_buffer_put (ARG)
         _FastTransfer_buffer_modulo_inc
       _Tempeture_Get (ARG)
         ___wmul
       ___fttol (ARG)
         _Battery_Get (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul
         _Tempeture_Get (ARG)
           ___wmul
     ___fttol
       _Battery_Get (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul
       _Tempeture_Get (ARG)
         ___wmul
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _sendData
       Absolute function(Fake) *
       _CRC8 *
       _FastTransfer_buffer_flush *
         _memset
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
       _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0      CE      15       80.5%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      E      EA       6       91.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     3B      9C       4       97.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4FD       9        0.0%
DATA                 0      0     4FD      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Jun 13 20:12:41 2015

      __end_of_FastTransfer_buffer_flush 35CA                   i2_UART_buff_modulo_inc 3A50  
                           ___altoft@exp 002B                             _rx_array_inx 0041  
                          ___altoft@sign 002C                             ___awdiv@sign 0020  
                    ___wmul@multiplicand 001D                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                             ___ftadd@exp1 00EA  
                           ___ftadd@exp2 00E9                             ___ftadd@sign 00E8  
                                    l341 34F8                                      l351 1BAE  
                                    l520 2A6A                                      l513 2A5A  
                                    l506 2A4A                                      l292 1D24  
                                    l471 29FA                                      l464 29EA  
                                    l456 29DA                                      l529 2C8A  
                                    l713 1E92                                      l298 3096  
                                    l492 2A2A                                      l485 2A1A  
                                    l478 2A0A                                      l499 2A3A  
                                    l599 365A                                      l778 3252  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0037                                      _log 240E  
                        __end_of_ADC_ISR 11EA     FastTransfer_buffer_flush@clearBuffer 0025  
                                    prod 000FF3                                      tosl 000FFD  
                                    wreg 000FE8            i2UART_buff_modulo_inc@modulus 0003  
                           __CFG_LVP$OFF 000000                          ?_Battery_Filter 0001  
                           ___ftdiv@cntr 00CA                             ___ftdiv@sign 00CF  
                                   l1143 2FBE                                     l1207 23D4  
                                   l1172 1614                                     l3101 3A2C  
                                   l1176 164E                                     l3105 3A3E  
                                   l1178 1678                                     l1187 175C  
                                   l1196 1786                                     l5011 25F4  
                                   l5003 258A                                     l5021 2660  
                                   l5013 25FE                                     l5005 25A4  
                                   l5031 0650                                     l5015 2628  
                                   l5007 25BE                                     l5201 3430  
                                   l5105 093E                                     l5017 262E  
                                   l5009 25D8                                     l5203 343E  
                                   l5131 0A48                                     l5123 09E0  
                                   l5107 0946                                     l5051 0728  
                                   l5035 067E                                     l5221 2330  
                                   l5301 308E                                     l5133 0A62  
                                   l5125 09FA                                     l5109 095C  
                                   l5053 0740                                     l4511 2F42  
                                   l5215 22F6                                     l3631 29EE  
                                   l5311 34AA                                     l3623 379C  
                                   l5135 0A7C                                     l5127 0A14  
                                   l5071 07B2                                     l5055 0748  
                                   l5039 0684                                     l5063 0778  
                                   l4521 2FA6                                     l4513 2F4E  
                                   l5241 2392                                     l3641 2A3E  
                                   l3633 29FE                                     l5137 0AB8  
                                   l5129 0A2E                                     l4523 2FB2  
                                   l4515 2F6E                                     l4507 2F32  
                                   l5251 23E6                                     l3643 2A4E  
                                   l3635 2A0E                                     l3627 29CE  
                                   l5315 34F0                                     l5307 3496  
                                   l3619 3780                                     l4611 26AE  
                                   l5171 0BB6                                     l5163 0B4E  
                                   l5139 0AD4                                     l5091 0842  
                                   l5083 07E4                                     l3645 2A5E  
                                   l3637 2A1E                                     l3629 29DE  
                                   l5325 184E                                     l4541 362E  
                                   l5173 0BD0                                     l5165 0B68  
                                   l5149 0AE2                                     l5069 0788  
                                   l4535 2FD8                                     l4519 2F86  
                                   l3639 2A2E                                     l4607 2EDA  
                                   l5175 0BEA                                     l5167 0B82  
                                   l5087 0816                                     l4529 2FC6  
                                   l5281 28EA                                     l3649 2A6E  
                                   l5353 2BD8                                     l4617 271A  
                                   l5177 0C26                                     l5169 0B9C  
                                   l5441 3822                                     l4707 1802  
                                   l4723 1F08                                     l3923 3160  
                                   l5291 2FF4                                     l5259 3742  
                                   l4547 3644                                     l4555 3662  
                                   l4483 39E8                                     l5179 0C42  
                                   l5099 08B4                                     l5187 0C50  
                                   l5435 380C                                     l4661 166E  
                                   l4741 1F78                                     l4717 1ECE  
                                   l5277 28D0                                     l3933 31BE  
                                   l5365 2C4A                                     l5357 2BF2  
                                   l5349 1A34                                     l4557 366C  
                                   l4671 16B0                                     l4655 165C  
                                   l4751 1FBC                                     l5287 29C6  
                                   l3927 3192                                     l5295 3008  
                                   l4567 3A16                                     l3943 21A4  
                                   l4495 324E                                     l4591 2B5C  
                                   l4575 2ACC                                     l4681 1700  
                                   l4649 1622                                     l4745 1F94  
                                   l4737 1F58                                     l5369 2C80  
                                   l4841 30C0                                     l4905 2CD0  
                                   l3961 2238                                     l4761 1D28  
                                   l5449 383C                     receiveData@crcHolder 00CE  
                                   l4691 174C                                     l4683 170C  
                                   l4755 1FD8                                     l4747 1F9C  
                                   l4923 1BBA                                     l4851 30E8  
                                   l4835 30AE                                     l4907 2D54  
                                   l3971 226A                                     l4579 2AD8  
                                   l4771 1DEE                                     l4763 1D54  
                                   l4677 16E0                                     l4933 1CAA  
                                   l3973 227C                                     l3965 224C  
                                   ?_log 00F7                                     l4679 16F0  
                                   l4935 1CB4                                     l4927 1BD4  
                                   l4847 30D6                                     l4863 3112  
                                   l4951 1A44                                     l3975 228A  
                                   l4599 2E54                                     l4775 1E08  
                                   l4697 17B2                                     l4689 173C  
                                   l4849 30E0                                     l4961 1B34  
                                   l4785 1E5E                                     l4793 1E8A  
                                   l4939 1CCE                                     l4867 3122  
                                   l4859 3106                                     l4963 1B3E  
                                   l4955 1A5E                                     l4891 3314  
                                   l3979 22A8                                     l4789 1E80  
                                   l4967 1B58                                     l4879 3898  
                                   l4799 2028                                     l4985 2460  
                                   l4979 2432                                     _CRC8 3628  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     u5050 333C  
                                   u2670 2E30                                     u4360 31E2  
                                   u5208 25C2                                     u5058 333E  
                                   u5218 25DC                                     u5308 0688  
                                   u5228 2602                                     u5501 086A  
                                   u5309 069C                                     u4551 15C2  
                                   u6047 3786                                     u5328 06A6  
                                   u5248 264A                                     u4561 15E0  
                                   u5329 06BA                                     u5178 2574  
                                   u5428 078C                                     u5348 06C4  
                                   u5268 0628                                     u5188 258E  
                                   u5429 07A0                                     u5349 06D8  
                                   u5269 063C                                     u5358 06DE  
                                   u5198 25A8                                     u3871 2180  
                                   u5359 06F2                                     u5608 0A4C  
                                   u5448 07B6                                     u5368 06F8  
                                   u5288 065A                                     u4761 1EAA  
                                   u5449 07CC                                     u5369 070C  
                                   u5289 066E                                     u3890 21CA  
                                   u5618 0A66                                     u4828 1D2C  
                                   u5708 0BBA                                     u5628 0A80  
                                   u5468 07E8                                     u5388 072C  
                                   u4781 1EE4                                     u4829 1D40  
                                   u5469 07FC                                     u5910 184C  
                                   u5718 0BD4                                     u5638 0ABC  
                                   u5558 09CA                                     u5478 081A  
                                   u4951 2026                                     u3895 21C0  
                                   u5479 082E                                     u4848 1D58  
                                   u5728 0BEE                                     u5568 09E4  
                                   u5761 22D2                                     u4849 1D6C  
                                   u4858 1D74                                     u5738 0C2A  
                                   u5658 0B38                                     u5578 09FE  
                                   u4859 1D88                                     u4868 1D90  
                                   u5668 0B52                                     u5588 0A18  
                                   u5781 230C                                     u4869 1DA4  
                                   u4878 1DAC                                     u5678 0B6C  
                                   u5598 0A32                                     u4879 1DC0  
                                   u5688 0B86                                     u5698 0BA0  
                                   _TMR1 000FCE                                     _WPUB 000F61  
                Tempeture_Get@channelnum 0021                                     _main 3802  
                           ___ftpack@arg 001B                             ___ftpack@exp 001E  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                            __CFG_BORV$190 000000  
                                   log@x 00F7                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 216A                                     start 00AA  
                          __CFG_IESO$OFF 000000                             ___ftmul@cntr 00DD  
                           ___param_bank 000010                             ___ftmul@sign 00DE  
         i2UART_buff_modulo_inc@my_value 0005                        ADC_ISR@ADC_Result 000B  
                           ___fttol@exp1 00F0                                    ??_log 002D  
                           ___fttol@lval 00EC                                    ?_CRC8 001B  
                       __end_of_CRCcheck 1E94                         ?_Battery_Convert 0001  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 3C36  
                     crcBufS_put@address 001D                                    ?_main 01E5  
                        __end_of___awdiv 312E                          __end_of___ftadd 182A  
                        __end_of___ftdiv 240E                          _TMR1_StartTimer 3C42  
                        __end_of___ftmul 2000                          ___awdiv@divisor 001D  
                                  _T1CON 000FCD                          __end_of___ftsub 376E  
                        __end_of___fttol 22BC                                    _LATA0 007C48  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATC0 007C58                                    _LATC1 007C59  
                                  _LATB3 007C53                                    _LATA6 007C4E  
                                  _LATD1 007C61                                    _LATD2 007C62  
                                  _LATC4 007C5C                                    _LATD3 007C63  
                                  _LATC5 007C5D                                    _LATD5 007C65  
                         __CFG_DEBUG$OFF 000000                                    i2l211 0058  
                                  i2l213 0064                                    i2l217 0070  
                                  i2l209 004C                                    i2l809 3B32  
                                  i2l778 32E6                          ___awdiv@counter 001F  
                                  _TMR1H 000FCF                                    _TMR1L 000FCE  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96         __size_of_ADC_GetConversionResult 0016  
                                  _Delay 376E                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 3932  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                         __end_of_TMR1_ISR 3802  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 35CA  
                         __CFG_EBTRB$OFF 000000                            ___awtoft@sign 0026  
                                  _frexp 32EC                                    _errno 0094  
                                  _group 0043                       __CFG_MCLRE$EXTMCLR 000000  
                          ___ftpack@sign 001F                           SetBypass@state 001D  
                __end_of_TMR1_Initialize 3AEE                                    pclath 000FFA  
                            _Battery_Adc 0060                                    tablat 000FF5  
                            _Battery_Get 36CC                            ??_Receive_get 0026  
                   __size_of_crcBufS_get 00E8                                    plusw2 000FDB  
                         begin@stuffpeek 00CC                     __size_of_crcBufS_put 00DA  
                                  status 000FD8                           __CFG_HFOFST$ON 000000  
                           ?_receiveData 0001                          RunBypas@cellbyp 00E2  
                        RunBypas@batvolt 00E4                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 367A                          CRCcheck@SentCRC 00C1  
                        __initialization 337E                              log@exponent 00FA  
             __end_of_EUSART1_Initialize 38FA                             __end_of_main 3846  
                             ToSend@what 00F1                                   ??_CRC8 001E  
                       __end_of_Set_4051 3932                                ??_ADC_ISR 0005  
            ?_INTERRUPT_InterruptManager 0001                                   ??_main 002D  
                          ___fttol@sign1 00EB                            __activetblptr 000002  
                       __end_of_Send_put 3996               ADC_StartConversion@channel 0002  
              __size_ofi2_UART_buff_size 0018                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 0024  
                       __end_of_RunBypas 2C8C                            ?_Receive_peek 0001  
                                 ?_begin 00C1                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 ?_frexp 001B                         __end_of___altoft 348A  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                       ___awdiv@dividend 001B                         __end_of___awtoft 38BE  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                         __end_of___ftpack 2FE8  
                                 _T1GCON 000FCC                          i2_UART_buff_get 3258  
                                 _RC1STA 000FAB                    __size_of_Battery_Read 0018  
                        i2_UART_buff_put 27AA                                   i2l4101 0E8C  
                                 i2l4005 32E2                                   i2l4111 0EF0  
                                 i2l4103 0E92                                   i2l4023 37E2  
                                 i2l4131 1062                                   i2l4123 0FCE  
                                 i2l4115 0F3A                                   i2l4107 0EA6  
                                 i2l4043 0CA2                                   i2l4027 37F0  
                                 i2l3501 3902                                   i2l4061 0D2C  
                                 i2l4037 0C74                           __CFG_WDTEN$OFF 000000  
                                 i2l3503 3914                                   i2l4143 1140  
                                 i2l4135 10AC                                   i2l4127 1018  
                                 i2l4119 0F84                                   i2l4151 1192  
                                 i2l4055 0CFE                                   i2l4153 11E2  
                                 i2l4073 0D88                                   i2l4049 0CD0  
                                 i2l4139 10F6                                   i2l4091 0E12  
                                 i2l4067 0D5A                                   i2l4085 0DE4  
                                 i2l4173 395C                                   i2l4079 0DB6  
            UART_buff_modulo_inc@modulus 001D                                   i2l4099 0E3C  
                                 i2l3469 3A72                                   i2l3991 2836  
                                 i2l3985 27CA                                   _RCREG1 000FAE  
                          ??_Temp_Filter 002D                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                   _TX1STA 000FAC  
                                 _TXREG1 000FAD                               _Temp_Fault 348A  
                         __CFG_XINST$OFF 000000                                   _ToSend 3AEE  
                    __end_of_Receive_get 3C28                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0027                    __end_of_Tempeture_Get 39C6  
                                 ___ftge 312E                            _output_buffer 0500  
                       crcBufS_get@space 001E                  __end_of_TMR1_StartTimer 3C46  
                     __size_of_SetBypass 00F4                                   ___wmul 3A7E  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                              ??___ftadd 00E5                           __CFG_STVREN$ON 000000  
                              ??___ftdiv 00C7                                ??___ftmul 00D6  
                              ??___ftsub 002D                                ??___fttol 00E6  
                                 _memset 3A22                                   clear_0 3384  
                                 clear_1 3390                                   clear_2 339C  
                                 clear_3 33A8                                   clear_4 33B4  
                                 clear_5 33C0                                   clear_6 33CC  
                       ___awdiv@quotient 0021                       __size_of_Temp_Read 0018  
                                 _rx_len 0042                         __end_of_sendData 268E  
                  ___ftmul@f3_as_product 00DA                             __pdataCOMRAM 0045  
                           _Battery_Read 3BC2                            Send_put@_data 0026  
                           _Battery_Volt 01A0                             __mediumconst 0000  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 016A             __end_of_UART_buff_modulo_inc 39F4  
          __size_of_INTERRUPT_Initialize 000C                         ?_TMR1_Initialize 0001  
                      _SYSTEM_Initialize 34FA                         __end_oflog@coeff 061C  
                             __accesstop 0060                  __end_of__initialization 3404  
                             ___altoft@c 0023                                ?_CRCcheck 0001  
                             ___ftadd@f1 00DF                               ___ftadd@f2 00E2  
                             ___ftge@ff1 0021                               ___ftge@ff2 0024  
                     ?_SYSTEM_Initialize 0001                             eval_poly@res 00F4  
                          ___rparam_used 000001                               ___ftdiv@f1 00C1  
                             ___ftdiv@f2 00C4                               ___ftdiv@f3 00CB  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                             ___awtoft@c 0023                            __end_of_Delay 37BA  
                             ___ftmul@f1 00D0                               ___ftmul@f2 00D3  
                             ___ftsub@f1 00EB                               ___ftsub@f2 00EE  
                    __end_of_Temp_Filter 1BB0                               ___fttol@f1 00E2  
           __size_of_ADC_StartConversion 001A                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 2E48                             __pidataBANK1 3846  
                    ??_SYSTEM_Initialize 0025                         crcBufS_put@_this 001B  
                          __end_of_begin 3628                                ?_TMR1_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 3A22  __size_of_FastTransfer_buffer_modulo_inc 002E  
         _FastTransfer_buffer_modulo_inc 39F4                            __end_of_frexp 337E  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 00F3  
                     UART_buff_get@_this 0021                      ?_crcBufS_status_put 001B  
                  Battery_Get@channelnum 00DF                    __end_of_UART_buff_get 3258  
                 ??_EUSART1_Transmit_ISR 000C                  _ADC_GetConversionResult 3BF2  
                  __end_of_UART_buff_put 27AA                         ??_Battery_Filter 002D  
                                ??_Delay 001F                  __end_ofi2_UART_buff_get 32EC  
                __end_ofi2_UART_buff_put 28C6              __end_of_EUSART1_Receive_ISR 3B48  
              _FastTransfer_buffer_flush 3566                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                            ?_Temp_Convert 0001  
                                ??_frexp 0020                __end_of_SYSTEM_Initialize 3566  
                 receiveData@holder_1129 00CB                        __end_of_SetBypass 2AC0  
                    _addressErrorCounter 008C                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                             __pbssBANK5 0500                       __size_of_eval_poly 00E2  
                        __CFG_PLLCFG$OFF 000000                        __end_of_Temp_Read 3BC2  
                            _Receive_get 3C18                                ?_Set_4051 0001  
                             ??_CRCcheck 0027                     ??_crcBufS_status_put 001F  
         __end_ofi2_UART_buff_modulo_inc 3A7E                        begin@givenAddress 00C4  
                  Temp_Convert@steinhart 01E2                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_peek 0026                              ?_Temp_Fault 0001  
                __size_of_UART_buff_size 0018                                ?_Send_put 0001  
                   __size_of_receiveData 0638                                  ?_ToSend 00F1  
                     __CFG_CCP2MX$PORTC1 000000                              Temp_Fault@i 002B  
                                ?___ftge 0021                                ?_RunBypas 0001  
                                ?___wmul 001B                         ?_TMR1_StartTimer 0001  
                             ??_TMR1_ISR 0003                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                ?___altoft 0023  
                                _ADC_ISR 0C56                                  ?_memset 001B  
                             _crc_buffer 00B0                                ?___awtoft 0023  
                              ?___ftpack 001B                  __size_of_ADC_Initialize 0018  
                          Temp_Convert@x 01E0                   __size_of_Battery_Fault 00B0  
                        Temp_Fault@fault 002A                       UART_buff_put@_this 0021  
                       i2_UART_buff_size 3BDA              i2UART_buff_modulo_inc@value 0001  
                         Battery_Fault@i 002B                                  _OSCCON2 000FD2  
                         ??_Temp_Convert 002D                        _Receive_available 3B62  
           UART_buff_modulo_inc@my_value 001F                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                    sendData@whereToSend 0028                      _receiveArrayAddress 0096  
                     ?_Receive_available 001D                               begin@error 00C5  
                           ?_Battery_Get 00DF                               ??_Set_4051 0003  
                            _Temp_Filter 1A3A                              _Temp_Aquire 003A  
                    ??_Receive_available 001F                                ?_sendData 0001  
                      _alignErrorCounter 008E                          __CFG_PWRTEN$OFF 000000  
                             ??_Send_put 0026                                  __Hparam 0000  
                                __Lparam 0000                          __size_of_ToSend 001E  
                   __end_of_Receive_peek 3C18                                _AKNAKsend 0039  
                             ??_RunBypas 002D                          __size_of___ftge 0096  
                                ___awdiv 3098                                  ___ftadd 15AC  
                   _UART_buff_modulo_inc 39C6                                  ___ftdiv 22BC  
                        __size_of___wmul 0028                                  ___ftmul 1E94  
                                ___ftsub 371E                                  ___fttol 216A  
                                _calc_CS 003C                             __psmallconst 0600  
                             ??___altoft 0027                ??_ADC_GetConversionResult 0003  
                                __pcinit 337E                               ??___awtoft 0026  
                             ??___ftpack 0020                        __end_of_eval_poly 2D6E  
                        __size_of_memset 002E                                  __ramtop 0600  
                       i2UART_buff_get@c 000B                                  __ptext0 3802  
                                __ptext1 11EA                                  __ptext2 255C  
                                __ptext3 2D6E                                  __ptext4 3566  
                                __ptext5 061E                                  __ptext6 3966  
                                __ptext7 268E                                  __ptext8 3C08  
                                __ptext9 3AA6                         i2UART_buff_put@c 0009  
                              _T1CONbits 000FCD                    _OSCILLATOR_Initialize 3C28  
              __end_of_Receive_available 3B7A                             __size_of_log 014E  
                _FastTransfer_buffer_put 2000                      __size_of_Temp_Fault 0070  
                  CRCcheck@calculatedCRC 00C2                       _EUSART1_Initialize 38BE  
                       ?i2_UART_buff_get 0007                 ??_PIN_MANAGER_Initialize 001B  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
               __size_of_Battery_Convert 0106                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020               __size_of_SYSTEM_Initialize 006C  
                   end_of_initialization 3404                                Delay@wait 0020  
                    ?_EUSART1_Initialize 0001                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 0000                            _Battery_Fault 2FE8  
                             ??_sendData 0027                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 03C2                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc1 000FE6                                  postinc2 000FDE  
                       Battery_Convert@x 00EF                         begin@stufftosend 00C6  
                    CRCcheck@arrayHolder 00C3                     ??_EUSART1_Initialize 0025  
                 _dataAdressErrorCounter 0092                               _rx_address 0040  
                              _TRISCbits 000F94                      _ADC_StartConversion 3B48  
                            _Volt_Aquire 003B                             begin@maxSize 00C3  
                         ?_Battery_Fault 0001       __size_of_FastTransfer_buffer_flush 0064  
                            ___ftdiv@exp 00CE                    i2UART_buff_size@_this 0001  
                         _UART_buff_init 3B0C                           _UART_buff_peek 3AA6  
                         _UART_buff_size 3B7A                      __end_of_crcBufS_get 2BA8  
                    __end_of_crcBufS_put 2E48                             SetBypass@pin 001B  
                      __size_of_CRCcheck 016E                             Delay@d_lenth 001B  
                            ___ftmul@exp 00D9                     ?_ADC_StartConversion 0001  
                          _moduleAddress 003E                     __end_of_Temp_Convert 1A3A  
                             CRCcheck@rt 00C6                           __end_of_ToSend 3B0C  
           __end_of_INTERRUPT_Initialize 3C42                           __end_of___ftge 31C4  
                        _crcErrorCounter 0090                           __end_of___wmul 3AA6  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 3C46  
                      __size_of_TMR1_ISR 0048                           _ADC_Initialize 3B92  
              ??_FastTransfer_buffer_put 0026                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 3A50                        crcBufS_put@status 001F  
                           receiveData@r 00D2               __size_of_Receive_available 0018  
                           receiveData@u 00D0                      start_initialization 337E  
                             eval_poly@d 00EE                               eval_poly@n 00F0  
                             eval_poly@x 00EB          __size_of_PIN_MANAGER_Initialize 0052  
                  crcBufS_get@wantedTime 0025                              __end_of_log 255C  
                 __size_of_Tempeture_Get 0030                   __end_of_UART_buff_init 3B2A  
                 __end_of_UART_buff_peek 3ACC                           UART_buff_get@c 0025  
                 __end_of_UART_buff_size 3B92                               frexp@value 001B  
                           ?_Receive_get 0001                        ??_Battery_Convert 00ED  
                         UART_buff_put@c 0023                                _SetBypass 29CC  
                  __size_of_Receive_peek 0010                     __size_of_Battery_Get 0052  
                           ??_Temp_Fault 002A                 __end_ofi2_UART_buff_size 3BF2  
                      __size_of_Set_4051 0038                                _Temp_DegF 01BE  
                       _PrevBattery_Volt 0100                                _Temp_Done 0088  
                              _Temp_Read 3BAA                    ??_ADC_StartConversion 0001  
                               ??_ToSend 002D                   ??_UART_buff_modulo_inc 001F  
               __size_of_TMR1_Initialize 0022                                 CRC8@data 001B  
                        crcBufS_get@time 001D                                 ??___ftge 0027  
                      __size_of_Send_put 0030                                 ??___wmul 001F  
                 __end_of_ADC_Initialize 3BAA                              __pdataBANK1 01A0  
                              RunBypas@i 00E7                                 ?_ADC_ISR 0001  
                               ??_memset 0021                        __size_of_RunBypas 00E4  
                      __size_of___altoft 007C                        __size_of___awtoft 003C  
                      __size_of___ftpack 00C6                                _Volt_Done 008A  
                            __pbssCOMRAM 002D            __size_of_EUSART1_Transmit_ISR 0034  
                          __pcstackBANK0 00C1                            __pcstackBANK1 01DC  
                     __end_of_Temp_Fault 34FA                             _Receive_peek 3C08  
                    UART_buff_init@_this 0023                            _PrevTemp_DegF 011E  
                            _crcBufS_get 2AC0                      UART_buff_peek@_this 001B  
                            _crcBufS_put 2D6E                          ??_Battery_Fault 002A  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B             __size_of_EUSART1_Receive_ISR 001E  
                           ?_Temp_Filter 0001                            ??_receiveData 0027  
                             ?_SetBypass 001B              __size_of_crcBufS_status_put 00DA  
                             sendData@CS 0029                   __size_of_UART_buff_get 0094  
                 __size_of_UART_buff_put 011C                               ?_Temp_Read 0001  
                 _PIN_MANAGER_Initialize 367A                        __size_of_sendData 0132  
                      _Temp_Convert$2200 01DC                        _Temp_Convert$2201 01DE  
                              __pintcode 0008                            _Tempeture_Get 3996  
                               ?___awdiv 001B                                 ?___ftadd 00DF  
                               ?___ftdiv 00C1                                 ?___ftmul 00D0  
                               ?___ftsub 00EB                                 ?___fttol 00E2  
                           Temp_Filter@x 00EB                          ?_ADC_Initialize 0001  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
                               _BAUD1CON 000FB8                              __smallconst 0600  
               __size_of_TMR1_StartTimer 0004                                _eval_poly 2C8C  
                         __size_of_Delay 004C                           __size_of_begin 005E  
                         __size_of_frexp 0092                     _INTERRUPT_Initialize 3C36  
                           _receiveArray 013C                  __size_of_Battery_Filter 0176  
                               _CRCcheck 1D26                           ___wmul@product 001F  
                               _LATAbits 000F89                                 _LATEbits 000F8D  
                  __size_of_Temp_Convert 0210                      UART_buff_size@_this 001B  
                               _IPR1bits 000F9F                                 _PIE1bits 000F9D  
    __size_of_INTERRUPT_InterruptManager 00A2                                 i2u403_40 394C  
                               _PIR1bits 000F9E                                 i2u396_40 3276  
                               i2u397_40 37D8                          Battery_Filter@x 00EB  
                    begin@stuffavailable 00CA                           ?_Tempeture_Get 0021  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0C56                                 _TMR1_ISR 37BA  
         FastTransfer_buffer_flush@_this 0023                             _input_buffer 0400  
                              _rx_buffer 0300                        ??_TMR1_Initialize 001B  
                       __size_of_ADC_ISR 0594                               _ADCON0bits 000FC2  
                      ___wmul@multiplier 001B                     i2UART_buff_put@_this 0007  
                          _UART_buff_get 31C4                            ?_Battery_Read 0001  
                          _UART_buff_put 268E                               ?_eval_poly 00EB  
               ??i2_UART_buff_modulo_inc 0005                             _Temp_Convert 182A  
                            _INTCON2bits 000FF1                                copy_data0 33E6  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 0098  
               __size_ofi2_UART_buff_get 0094                                 _Set_4051 38FA  
               __size_ofi2_UART_buff_put 011C                              ??_SetBypass 001F  
                              frexp@eptr 001E                            ??_updateComms 002D  
                   __size_of_Receive_get 0010                                 __Hrparam 0000  
                            ??_Temp_Read 0003                                 _Send_put 3966  
                               _Temp_Adc 009C                                 __Lrparam 0000  
               ?_ADC_GetConversionResult 0001                       __CFG_BOREN$SBORDIS 000000  
                               _RunBypas 2BA8                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                         __size_of___awdiv 0096  
                       __size_of___ftadd 027E                         __size_of___ftdiv 0152  
                               ___altoft 340E                         __size_of___ftmul 016C  
                       __size_of___ftsub 0050                         __size_of___fttol 0152  
            __size_of_EUSART1_Initialize 003C                      begin@stufftoreceive 00C8  
                               ___awtoft 3882                                 ___ftpack 2F22  
                         ?_UART_buff_get 0021                           ??_Battery_Read 0003  
                         ?_UART_buff_put 0021                              CRC8@extract 001F  
                              sendData@i 002A                          _Battery_Convert 28C6  
                     Battery_Fault@fault 002A                 crcBufS_status_put@status 001E  
                               __ptext10 1D26                                 __ptext11 2E48  
                               __ptext20 3AEE                                 __ptext12 2AC0  
                               __ptext21 2000                                 __ptext13 3C18  
                             _T1GCONbits 000FCC                                 __ptext30 3882  
                               __ptext22 39F4                                 __ptext14 31C4  
                               __ptext31 371E                                 __ptext23 3996  
                               __ptext15 39C6                                 __ptext40 3C36  
                               __ptext32 1A3A                                 __ptext24 376E  
                               __ptext16 3B62                                 __ptext41 38BE  
                               __ptext33 34FA                                 __ptext25 348A  
                               __ptext17 3B7A                                 __ptext50 28C6  
                               __ptext42 3B0C                                 __ptext34 35CA  
                               __ptext26 182A                                 __ptext18 3628  
                               __ptext51 22BC                                 __ptext43 3A22  
                               __ptext35 3098                                 __ptext27 240E  
                               __ptext19 216A                                 __ptext60 3BAA  
                               __ptext52 340E                                 __ptext44 3B92  
                               __ptext36 3ACC                                 __ptext28 32EC  
                               __ptext61 3BC2                                 __ptext53 1BB0  
                               __ptext45 2BA8                                 __ptext37 3C42  
                               __ptext29 2C8C                                 __ptext70 3B48  
                               __ptext62 3932                                 __ptext54 3A7E  
                               __ptext46 29CC                                 __ptext38 367A  
                               __ptext71 3BF2                                 __ptext63 3BDA  
                               __ptext55 1E94                                 __ptext47 36CC  
                               __ptext39 3C28                                 __ptext72 0000  
                               __ptext64 3258                                 __ptext56 15AC  
                               __ptext48 2FE8                                 __ptext65 3B2A  
                               __ptext57 2F22                                 __ptext49 312E  
                               __ptext66 27AA                                 __ptext67 3A50  
                               __ptext59 37BA                                 __ptext68 0C56  
                               __ptext69 38FA                        ??_TMR1_StartTimer 001B  
                          __size_of_CRC8 0052                                 begin@ptr 00C1  
                EUSART1_Receive_ISR@data 000C                            _returnAddress 003F  
                          __size_of_main 0044                              _receiveData 061E  
                         _Transmit_stall 0045                                 _sendData 255C  
                           _TmpTemp_DegF 0182                     __size_of_Temp_Filter 0176  
                        ??_Tempeture_Get 0024                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                       ??i2_UART_buff_size 0003  
                           _serial_write 0035                      __end_of_updateComms 15AC  
     __end_of_INTERRUPT_InterruptManager 00AA               _INTERRUPT_InterruptManager 0008  
                               main@argc 01E5                                 main@argv 01E7  
                    _EUSART1_Receive_ISR 3B2A                        receiveData@holder 00C8  
                               log@coeff 0601                               _INTCONbits 000FF2  
                            ??_eval_poly 00F2                UART_buff_modulo_inc@value 001B  
                       ??_UART_buff_init 0025                         ??_UART_buff_peek 001D  
                       ??_UART_buff_size 001D                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0031  
        __size_ofi2_UART_buff_modulo_inc 002E                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                            ??_Battery_Get 002D  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                         _Battery_Filter 1BB0                            _CountCallBack 002F  
                   ?_EUSART1_Receive_ISR 0001              __end_of_ADC_StartConversion 3B62  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                       _TempBattery_Volt 0164                  ?_PIN_MANAGER_Initialize 0001  
        __end_of_ADC_GetConversionResult 3C08             __end_of_EUSART1_Transmit_ISR 3966  
                            _ring_buffer 0200                         ??_ADC_Initialize 001B  
             ?_FastTransfer_buffer_flush 0023                        ??i2_UART_buff_get 0009  
                            _serial_peek 009A                              _serial_read 0033  
                      ??i2_UART_buff_put 000A                 ?_FastTransfer_buffer_put 0021  
          __size_of_UART_buff_modulo_inc 002E                  __end_of_Battery_Convert 29CC  
                        ??_UART_buff_get 0023                          ??_UART_buff_put 0024  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
              receiveData@crcHolder_1130 00CF                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003D                   __end_of_Battery_Filter 1D26  
             __end_of_crcBufS_status_put 2F22                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 36CC         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                    __end_of_Battery_Fault 3098  
                      __CFG_FOSC$INTIO67 000000                     __end_of_Battery_Read 3BDA  
                        _TMR1_Initialize 3ACC                              _updateComms 11EA  
                       _ADC_Buffer_Point 002D                      __end_of_Battery_Get 371E  
                        Set_4051@Channel 0001  
