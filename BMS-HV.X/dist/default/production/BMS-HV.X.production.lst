

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Mar 27 02:06:10 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           	psect	smallconst
    47  000600                     __psmallconst:
    48                           	opt stack 0
    49  000600  00                 	db	0
    50  000601                     log@coeff:
    51                           	opt stack 0
    52  000601  00                 	db	0
    53  000602  00                 	db	0
    54  000603  00                 	db	0
    55  000604  00                 	db	0
    56  000605  80                 	db	128
    57  000606  3F                 	db	63
    58  000607  F0                 	db	240
    59  000608  FF                 	db	255
    60  000609  BE                 	db	190
    61  00060A  E2                 	db	226
    62  00060B  A9                 	db	169
    63  00060C  3E                 	db	62
    64  00060D  83                 	db	131
    65  00060E  76                 	db	118
    66  00060F  BE                 	db	190
    67  000610  AE                 	db	174
    68  000611  2B                 	db	43
    69  000612  3E                 	db	62
    70  000613  3C                 	db	60
    71  000614  C3                 	db	195
    72  000615  BD                 	db	189
    73  000616  D2                 	db	210
    74  000617  13                 	db	19
    75  000618  3D                 	db	61
    76  000619  78                 	db	120
    77  00061A  D3                 	db	211
    78  00061B  BB                 	db	187
    79  00061C                     __end_oflog@coeff:
    80                           	opt stack 0
    81  0000                     _TMR1	set	4046
    82  0000                     _ADCON0	set	4034
    83  0000                     _ADCON0bits	set	4034
    84  0000                     _ADCON1	set	4033
    85  0000                     _ADCON2	set	4032
    86  0000                     _ADRESH	set	4036
    87  0000                     _ADRESL	set	4035
    88  0000                     _ANSELA	set	3896
    89  0000                     _ANSELB	set	3897
    90  0000                     _ANSELC	set	3898
    91  0000                     _ANSELD	set	3899
    92  0000                     _ANSELE	set	3900
    93  0000                     _BAUD1CON	set	4024
    94  0000                     _INTCON2bits	set	4081
    95  0000                     _INTCONbits	set	4082
    96  0000                     _IPR1bits	set	3999
    97  0000                     _LATA	set	3977
    98  0000                     _LATB	set	3978
    99  0000                     _LATC	set	3979
   100  0000                     _LATD	set	3980
   101  0000                     _LATE	set	3981
   102  0000                     _OSCCON	set	4051
   103  0000                     _OSCCON2	set	4050
   104  0000                     _OSCTUNE	set	3995
   105  0000                     _PIE1bits	set	3997
   106  0000                     _PIR1bits	set	3998
   107  0000                     _RC1REG	set	4014
   108  0000                     _RC1STA	set	4011
   109  0000                     _RC1STAbits	set	4011
   110  0000                     _RCONbits	set	4048
   111  0000                     _RCREG1	set	4014
   112  0000                     _SPBRG1	set	4015
   113  0000                     _SPBRGH1	set	4016
   114  0000                     _T1CON	set	4045
   115  0000                     _T1CONbits	set	4045
   116  0000                     _T1GCON	set	4044
   117  0000                     _T1GCONbits	set	4044
   118  0000                     _TMR1H	set	4047
   119  0000                     _TMR1L	set	4046
   120  0000                     _TRISA	set	3986
   121  0000                     _TRISB	set	3987
   122  0000                     _TRISC	set	3988
   123  0000                     _TRISD	set	3989
   124  0000                     _TRISE	set	3990
   125  0000                     _TX1REG	set	4013
   126  0000                     _TX1STA	set	4012
   127  0000                     _TXREG1	set	4013
   128  0000                     _WPUB	set	3937
   129  0000                     _LATA6	set	31822
   130  0000                     _LATC0	set	31832
   131  0000                     _LATC1	set	31833
   132  00061C  00                 	db	0	; dummy byte at the end
   133  0000                     
   134                           	psect	nvCOMRAM
   135  000047                     __pnvCOMRAM:
   136                           	opt stack 0
   137  000047                     _timer1ReloadVal:
   138                           	opt stack 0
   139  000047                     	ds	2
   140  000049                     _eusart1TxBufferRemaining:
   141                           	opt stack 0
   142  000049                     	ds	1
   143                           
   144                           ; #config settings
   145  0000                     
   146                           	psect	cinit
   147  0014C4                     __pcinit:
   148                           	opt stack 0
   149  0014C4                     start_initialization:
   150                           	opt stack 0
   151  0014C4                     __initialization:
   152                           	opt stack 0
   153                           
   154                           ; Clear objects allocated to BANK1 (90 bytes)
   155  0014C4  EE01  F000         	lfsr	0,__pbssBANK1
   156  0014C8  0E5A               	movlw	90
   157  0014CA                     clear_0:
   158  0014CA  6AEE               	clrf	postinc0,c
   159  0014CC  06E8               	decf	wreg,f,c
   160  0014CE  E1FD               	bnz	clear_0
   161                           
   162                           ; Clear objects allocated to BANK0 (142 bytes)
   163  0014D0  EE00  F060         	lfsr	0,__pbssBANK0
   164  0014D4  0E8E               	movlw	142
   165  0014D6                     clear_1:
   166  0014D6  6AEE               	clrf	postinc0,c
   167  0014D8  06E8               	decf	wreg,f,c
   168  0014DA  E1FD               	bnz	clear_1
   169                           
   170                           ; Clear objects allocated to COMRAM (19 bytes)
   171  0014DC  EE00  F034         	lfsr	0,__pbssCOMRAM
   172  0014E0  0E13               	movlw	19
   173  0014E2                     clear_2:
   174  0014E2  6AEE               	clrf	postinc0,c
   175  0014E4  06E8               	decf	wreg,f,c
   176  0014E6  E1FD               	bnz	clear_2
   177  0014E8                     end_of_initialization:
   178                           	opt stack 0
   179  0014E8                     __end_of__initialization:
   180                           	opt stack 0
   181  0014E8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   182  0014EA  6EF8               	movwf	tblptru,c
   183  0014EC  0100               	movlb	0
   184  0014EE  EF90  F00A         	goto	_main	;jump to C main() function
   185                           tblptru	equ	0xFF8
   186                           postinc0	equ	0xFEE
   187                           wreg	equ	0xFE8
   188                           
   189                           	psect	bssCOMRAM
   190  000034                     __pbssCOMRAM:
   191                           	opt stack 0
   192  000034                     _eusart1TxBuffer:
   193                           	opt stack 0
   194  000034                     	ds	8
   195  00003C                     _ADC_Buffer_Point:
   196                           	opt stack 0
   197  00003C                     	ds	2
   198  00003E                     _errno:
   199                           	opt stack 0
   200  00003E                     	ds	2
   201  000040                     _Temp_Aquire:
   202                           	opt stack 0
   203  000040                     	ds	1
   204  000041                     _Volt_Aquire:
   205                           	opt stack 0
   206  000041                     	ds	1
   207  000042                     _eusart1RxCount:
   208                           	opt stack 0
   209  000042                     	ds	1
   210  000043                     _eusart1RxHead:
   211                           	opt stack 0
   212  000043                     	ds	1
   213  000044                     _eusart1RxTail:
   214                           	opt stack 0
   215  000044                     	ds	1
   216  000045                     _eusart1TxHead:
   217                           	opt stack 0
   218  000045                     	ds	1
   219  000046                     _eusart1TxTail:
   220                           	opt stack 0
   221  000046                     	ds	1
   222                           tblptru	equ	0xFF8
   223                           postinc0	equ	0xFEE
   224                           wreg	equ	0xFE8
   225                           
   226                           	psect	bssBANK0
   227  000060                     __pbssBANK0:
   228                           	opt stack 0
   229  000060                     _Battery_Volt:
   230                           	opt stack 0
   231  000060                     	ds	30
   232  00007E                     _Temp_DegF:
   233                           	opt stack 0
   234  00007E                     	ds	30
   235  00009C                     _Battery_Adc:
   236                           	opt stack 0
   237  00009C                     	ds	20
   238  0000B0                     _eusart1RxBuffer:
   239                           	opt stack 0
   240  0000B0                     	ds	8
   241  0000B8                     _Temp_Done:
   242                           	opt stack 0
   243  0000B8                     	ds	2
   244  0000BA                     _Volt_Done:
   245                           	opt stack 0
   246  0000BA                     	ds	2
   247  0000BC                     _TempBattery_Volt:
   248                           	opt stack 0
   249  0000BC                     	ds	30
   250  0000DA                     _Temp_Adc:
   251                           	opt stack 0
   252  0000DA                     	ds	20
   253                           tblptru	equ	0xFF8
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bssBANK1
   258  000100                     __pbssBANK1:
   259                           	opt stack 0
   260  000100                     _PrevBattery_Volt:
   261                           	opt stack 0
   262  000100                     	ds	30
   263  00011E                     _PrevTemp_DegF:
   264                           	opt stack 0
   265  00011E                     	ds	30
   266  00013C                     _TmpTemp_DegF:
   267                           	opt stack 0
   268  00013C                     	ds	30
   269                           tblptru	equ	0xFF8
   270                           postinc0	equ	0xFEE
   271                           wreg	equ	0xFE8
   272                           
   273                           	psect	cstackBANK1
   274  00015A                     __pcstackBANK1:
   275                           	opt stack 0
   276  00015A                     
   277                           ; 2 bytes @ 0x0
   278  00015A                     	ds	2
   279  00015C                     
   280                           ; 3 bytes @ 0x2
   281  00015C                     	ds	3
   282                           tblptru	equ	0xFF8
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           
   286                           	psect	cstackBANK0
   287  0000EE                     __pcstackBANK0:
   288                           	opt stack 0
   289  0000EE                     ?___ftadd:
   290                           	opt stack 0
   291  0000EE                     ___ftadd@f1:
   292                           	opt stack 0
   293                           
   294                           ; 3 bytes @ 0x0
   295  0000EE                     	ds	3
   296  0000F1                     ___ftadd@f2:
   297                           	opt stack 0
   298                           
   299                           ; 3 bytes @ 0x3
   300  0000F1                     	ds	3
   301  0000F4                     ??___ftadd:
   302                           
   303                           ; 0 bytes @ 0x6
   304  0000F4                     	ds	3
   305  0000F7                     ___ftadd@sign:
   306                           	opt stack 0
   307                           
   308                           ; 1 bytes @ 0x9
   309  0000F7                     	ds	1
   310  0000F8                     ___ftadd@exp2:
   311                           	opt stack 0
   312                           
   313                           ; 1 bytes @ 0xA
   314  0000F8                     	ds	1
   315  0000F9                     ___ftadd@exp1:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0xB
   319  0000F9                     	ds	1
   320  0000FA                     Battery_Filter@x:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0xC
   324  0000FA                     	ds	2
   325  0000FC                     ??_Battery_Convert:
   326                           
   327                           ; 0 bytes @ 0xE
   328  0000FC                     	ds	2
   329  0000FE                     Battery_Convert@x:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x10
   333  0000FE                     	ds	2
   334                           tblptru	equ	0xFF8
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           
   338                           	psect	cstackCOMRAM
   339  000001                     __pcstackCOMRAM:
   340                           	opt stack 0
   341  000001                     ??_TMR1_ISR:
   342  000001                     ??_ADC_StartConversion:
   343  000001                     ?_ADC_GetConversionResult:
   344                           	opt stack 0
   345  000001                     Set_4051@Channel:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x0
   349  000001                     	ds	1
   350  000002                     ADC_StartConversion@channel:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x1
   354  000002                     	ds	1
   355  000003                     ??_Set_4051:
   356  000003                     ??_ADC_GetConversionResult:
   357                           
   358                           ; 0 bytes @ 0x2
   359  000003                     	ds	2
   360  000005                     ??_ADC_ISR:
   361                           
   362                           ; 0 bytes @ 0x4
   363  000005                     	ds	2
   364  000007                     ADC_ISR@ADC_Result:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x6
   368  000007                     	ds	2
   369  000009                     ??_INTERRUPT_InterruptManager:
   370                           
   371                           ; 0 bytes @ 0x8
   372  000009                     	ds	14
   373  000017                     ?___awdiv:
   374                           	opt stack 0
   375  000017                     ?___ftpack:
   376                           	opt stack 0
   377  000017                     ___awdiv@dividend:
   378                           	opt stack 0
   379  000017                     ___ftpack@arg:
   380                           	opt stack 0
   381                           
   382                           ; 3 bytes @ 0x16
   383  000017                     	ds	2
   384  000019                     ___awdiv@divisor:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x18
   388  000019                     	ds	1
   389  00001A                     ___ftpack@exp:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x19
   393  00001A                     	ds	1
   394  00001B                     ___awdiv@counter:
   395                           	opt stack 0
   396  00001B                     ___ftpack@sign:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x1A
   400  00001B                     	ds	1
   401  00001C                     ??___ftpack:
   402  00001C                     ___awdiv@sign:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x1B
   406  00001C                     	ds	1
   407  00001D                     ___awdiv@quotient:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x1C
   411  00001D                     	ds	2
   412  00001F                     ?___wmul:
   413                           	opt stack 0
   414  00001F                     ___wmul@multiplier:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x1E
   418  00001F                     	ds	2
   419  000021                     ___wmul@multiplicand:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x20
   423  000021                     	ds	2
   424  000023                     ___wmul@product:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x22
   428  000023                     	ds	2
   429  000025                     ?___ftmul:
   430                           	opt stack 0
   431  000025                     ?___awtoft:
   432                           	opt stack 0
   433  000025                     ___awtoft@c:
   434                           	opt stack 0
   435  000025                     ___ftge@ff1:
   436                           	opt stack 0
   437  000025                     ___ftmul@f1:
   438                           	opt stack 0
   439                           
   440                           ; 3 bytes @ 0x24
   441  000025                     	ds	3
   442  000028                     ___awtoft@sign:
   443                           	opt stack 0
   444  000028                     ___ftge@ff2:
   445                           	opt stack 0
   446  000028                     ___ftmul@f2:
   447                           	opt stack 0
   448                           
   449                           ; 3 bytes @ 0x27
   450  000028                     	ds	3
   451  00002B                     ??___ftmul:
   452  00002B                     ??___ftge:
   453                           
   454                           ; 0 bytes @ 0x2A
   455  00002B                     	ds	3
   456  00002E                     Battery_Fault@fault:
   457                           	opt stack 0
   458  00002E                     Temp_Fault@fault:
   459                           	opt stack 0
   460  00002E                     ___ftmul@exp:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x2D
   464  00002E                     	ds	1
   465  00002F                     Battery_Fault@i:
   466                           	opt stack 0
   467  00002F                     Temp_Fault@i:
   468                           	opt stack 0
   469  00002F                     ___ftmul@f3_as_product:
   470                           	opt stack 0
   471                           
   472                           ; 3 bytes @ 0x2E
   473  00002F                     	ds	3
   474  000032                     ___ftmul@cntr:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x31
   478  000032                     	ds	1
   479  000033                     ___ftmul@sign:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x32
   483  000033                     	ds	1
   484  000034                     tblptru	equ	0xFF8
   485                           postinc0	equ	0xFEE
   486                           wreg	equ	0xFE8
   487                           
   488                           ; 0 bytes @ 0x33
   489 ;;
   490 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   491 ;;
   492 ;; *************** function _main *****************
   493 ;; Defined at:
   494 ;;		line 31 in file "Main.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;  argc            2    0[BANK1 ] int 
   497 ;;  argv            3    2[BANK1 ] PTR PTR unsigned char 
   498 ;; Auto vars:     Size  Location     Type
   499 ;;		None
   500 ;; Return value:  Size  Location     Type
   501 ;;                  2    0[BANK1 ] int 
   502 ;; Registers used:
   503 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   504 ;; Tracked objects:
   505 ;;		On entry : 0/0
   506 ;;		On exit  : 0/0
   507 ;;		Unchanged: 0/0
   508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   509 ;;      Params:         0       0       5       0       0       0       0
   510 ;;      Locals:         0       0       0       0       0       0       0
   511 ;;      Temps:          0       0       0       0       0       0       0
   512 ;;      Totals:         0       0       5       0       0       0       0
   513 ;;Total ram usage:        5 bytes
   514 ;; Hardware stack levels required when called:    7
   515 ;; This function calls:
   516 ;;		_Battery_Convert
   517 ;;		_Battery_Fault
   518 ;;		_SYSTEM_Initialize
   519 ;;		_Temp_Fault
   520 ;; This function is called by:
   521 ;;		Startup code after reset
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525                           	psect	text0
   526  001520                     __ptext0:
   527                           	opt stack 0
   528  001520                     _main:
   529                           	opt stack 24
   530                           
   531                           ;Main.c: 33: SYSTEM_Initialize();
   532                           
   533                           ;incstack = 0
   534  001520  ECC8  F00A         	call	_SYSTEM_Initialize	;wreg free
   535                           
   536                           ;Main.c: 52: (INTCONbits.GIE = 1);
   537  001524  8EF2               	bsf	intcon,7,c	;volatile
   538                           
   539                           ;Main.c: 55: (INTCONbits.PEIE = 1);
   540  001526  8CF2               	bsf	intcon,6,c	;volatile
   541  001528                     l2994:
   542                           
   543                           ;Main.c: 65: {
   544                           ;Main.c: 66: if (Temp_Done)
   545  001528  0100               	movlb	0	; () banked
   546  00152A  51B9               	movf	(_Temp_Done+1)& (0+255),w,b
   547  00152C  11B8               	iorwf	_Temp_Done& (0+255),w,b
   548  00152E  A4D8               	btfss	status,2,c
   549                           
   550                           ; BSR set to: 0
   551                           ;Main.c: 67: {
   552                           ;Main.c: 68: Temp_Fault();
   553  001530  EC94  F009         	call	_Temp_Fault	;wreg free
   554                           
   555                           ;Main.c: 69: }
   556                           ;Main.c: 70: if (Volt_Done)
   557  001534  0100               	movlb	0	; () banked
   558  001536  51BB               	movf	(_Volt_Done+1)& (0+255),w,b
   559  001538  11BA               	iorwf	_Volt_Done& (0+255),w,b
   560  00153A  B4D8               	btfsc	status,2,c
   561  00153C  D7F5               	goto	l2994
   562                           
   563                           ; BSR set to: 0
   564                           ;Main.c: 71: {
   565                           ;Main.c: 72: Battery_Convert();
   566  00153E  ECE3  F007         	call	_Battery_Convert	;wreg free
   567                           
   568                           ;Main.c: 73: Battery_Fault();
   569  001542  EC4F  F008         	call	_Battery_Fault	;wreg free
   570  001546  D7F0               	goto	l2994
   571  001548                     __end_of_main:
   572                           	opt stack 0
   573                           tblptru	equ	0xFF8
   574                           intcon	equ	0xFF2
   575                           postinc0	equ	0xFEE
   576                           wreg	equ	0xFE8
   577                           status	equ	0xFD8
   578                           
   579 ;; *************** function _Temp_Fault *****************
   580 ;; Defined at:
   581 ;;		line 12 in file "Tempeture.c"
   582 ;; Parameters:    Size  Location     Type
   583 ;;		None
   584 ;; Auto vars:     Size  Location     Type
   585 ;;  i               2   46[COMRAM] int 
   586 ;;  fault           1   45[COMRAM] unsigned char 
   587 ;; Return value:  Size  Location     Type
   588 ;;                  1    wreg      unsigned char 
   589 ;; Registers used:
   590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   591 ;; Tracked objects:
   592 ;;		On entry : 0/0
   593 ;;		On exit  : 0/0
   594 ;;		Unchanged: 0/0
   595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   596 ;;      Params:         0       0       0       0       0       0       0
   597 ;;      Locals:         3       0       0       0       0       0       0
   598 ;;      Temps:          0       0       0       0       0       0       0
   599 ;;      Totals:         3       0       0       0       0       0       0
   600 ;;Total ram usage:        3 bytes
   601 ;; Hardware stack levels used:    1
   602 ;; Hardware stack levels required when called:    4
   603 ;; This function calls:
   604 ;;		___ftge
   605 ;;		___wmul
   606 ;; This function is called by:
   607 ;;		_main
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           	psect	text1
   612  001328                     __ptext1:
   613                           	opt stack 0
   614  001328                     _Temp_Fault:
   615                           	opt stack 26
   616                           
   617                           ;Tempeture.c: 15: char fault = 0;
   618                           
   619                           ;incstack = 0
   620  001328  0E00               	movlw	0
   621  00132A  6E2E               	movwf	Temp_Fault@fault,c
   622                           
   623                           ;Tempeture.c: 16: for(int i = 0;i<9;i++)
   624  00132C  0E00               	movlw	0
   625  00132E  6E30               	movwf	Temp_Fault@i+1,c
   626  001330  0E00               	movlw	0
   627  001332  6E2F               	movwf	Temp_Fault@i,c
   628  001334  5030               	movf	Temp_Fault@i+1,w,c
   629  001336  0A80               	xorlw	128
   630  001338  0F80               	addlw	-128
   631  00133A  0E09               	movlw	9
   632  00133C  B4D8               	btfsc	status,2,c
   633  00133E  5C2F               	subwf	Temp_Fault@i,w,c
   634  001340  B0D8               	btfsc	status,0,c
   635  001342  0012               	return	
   636                           
   637                           ;Tempeture.c: 17: {
   638                           ;Tempeture.c: 18: if (60.5 > Temp_DegF[i])
   639  001344  C02F  F01F         	movff	Temp_Fault@i,___wmul@multiplier
   640  001348  C030  F020         	movff	Temp_Fault@i+1,___wmul@multiplier+1
   641  00134C  0E00               	movlw	0
   642  00134E  6E22               	movwf	___wmul@multiplicand+1,c
   643  001350  0E03               	movlw	3
   644  001352  6E21               	movwf	___wmul@multiplicand,c
   645  001354  ECA4  F00A         	call	___wmul	;wreg free
   646  001358  0100               	movlb	0	; () banked
   647  00135A  0E7E               	movlw	low _Temp_DegF
   648  00135C  241F               	addwf	?___wmul,w,c
   649  00135E  6ED9               	movwf	fsr2l,c
   650  001360  0100               	movlb	0	; () banked
   651  001362  0E00               	movlw	high _Temp_DegF
   652  001364  2020               	addwfc	?___wmul+1,w,c
   653  001366  6EDA               	movwf	fsr2h,c
   654  001368  CFDE F025          	movff	postinc2,___ftge@ff1
   655  00136C  CFDE F026          	movff	postinc2,___ftge@ff1+1
   656  001370  CFDD F027          	movff	postdec2,___ftge@ff1+2
   657  001374  0E00               	movlw	0
   658  001376  6E28               	movwf	___ftge@ff2,c
   659  001378  0E72               	movlw	114
   660  00137A  6E29               	movwf	___ftge@ff2+1,c
   661  00137C  0E42               	movlw	66
   662  00137E  6E2A               	movwf	___ftge@ff2+2,c
   663  001380  EC4C  F009         	call	___ftge	;wreg free
   664  001384  B0D8               	btfsc	status,0,c
   665  001386  D002               	goto	l2898
   666                           
   667                           ;Tempeture.c: 19: {
   668                           ;Tempeture.c: 20: fault = 1;
   669  001388  0E01               	movlw	1
   670  00138A  6E2E               	movwf	Temp_Fault@fault,c
   671  00138C                     l2898:
   672  00138C  4A2F               	infsnz	Temp_Fault@i,f,c
   673  00138E  2A30               	incf	Temp_Fault@i+1,f,c
   674  001390  D7D1               	goto	L1
   675  001392                     __end_of_Temp_Fault:
   676                           	opt stack 0
   677                           tblptru	equ	0xFF8
   678                           intcon	equ	0xFF2
   679                           postinc0	equ	0xFEE
   680                           wreg	equ	0xFE8
   681                           postinc2	equ	0xFDE
   682                           postdec2	equ	0xFDD
   683                           fsr2h	equ	0xFDA
   684                           fsr2l	equ	0xFD9
   685                           status	equ	0xFD8
   686                           
   687 ;; *************** function _SYSTEM_Initialize *****************
   688 ;; Defined at:
   689 ;;		line 112 in file "mcc_generated_files/mcc.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;		None
   692 ;; Auto vars:     Size  Location     Type
   693 ;;		None
   694 ;; Return value:  Size  Location     Type
   695 ;;		None               void
   696 ;; Registers used:
   697 ;;		wreg, status,2, cstack
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   703 ;;      Params:         0       0       0       0       0       0       0
   704 ;;      Locals:         0       0       0       0       0       0       0
   705 ;;      Temps:          0       0       0       0       0       0       0
   706 ;;      Totals:         0       0       0       0       0       0       0
   707 ;;Total ram usage:        0 bytes
   708 ;; Hardware stack levels used:    1
   709 ;; Hardware stack levels required when called:    5
   710 ;; This function calls:
   711 ;;		_ADC_Initialize
   712 ;;		_EUSART1_Initialize
   713 ;;		_INTERRUPT_Initialize
   714 ;;		_OSCILLATOR_Initialize
   715 ;;		_PIN_MANAGER_Initialize
   716 ;;		_TMR1_Initialize
   717 ;; This function is called by:
   718 ;;		_main
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text2
   723  001590                     __ptext2:
   724                           	opt stack 0
   725  001590                     _SYSTEM_Initialize:
   726                           	opt stack 25
   727                           
   728                           ;mcc.c: 114: OSCILLATOR_Initialize();
   729                           
   730                           ;incstack = 0
   731  001590  EC05  F00B         	call	_OSCILLATOR_Initialize	;wreg free
   732                           
   733                           ;mcc.c: 115: PIN_MANAGER_Initialize();
   734  001594  ECC9  F009         	call	_PIN_MANAGER_Initialize	;wreg free
   735                           
   736                           ;mcc.c: 116: INTERRUPT_Initialize();
   737  001598  EC0C  F00B         	call	_INTERRUPT_Initialize	;wreg free
   738                           
   739                           ;mcc.c: 117: ADC_Initialize();
   740  00159C  ECEF  F00A         	call	_ADC_Initialize	;wreg free
   741                           
   742                           ;mcc.c: 118: EUSART1_Initialize();
   743  0015A0  EC14  F00A         	call	_EUSART1_Initialize	;wreg free
   744                           
   745                           ;mcc.c: 119: TMR1_Initialize();
   746  0015A4  ECB7  F00A         	call	_TMR1_Initialize	;wreg free
   747  0015A8  0012               	return	
   748  0015AA                     __end_of_SYSTEM_Initialize:
   749                           	opt stack 0
   750                           tblptru	equ	0xFF8
   751                           intcon	equ	0xFF2
   752                           postinc0	equ	0xFEE
   753                           wreg	equ	0xFE8
   754                           postinc2	equ	0xFDE
   755                           postdec2	equ	0xFDD
   756                           fsr2h	equ	0xFDA
   757                           fsr2l	equ	0xFD9
   758                           status	equ	0xFD8
   759                           
   760 ;; *************** function _TMR1_Initialize *****************
   761 ;; Defined at:
   762 ;;		line 63 in file "mcc_generated_files/tmr1.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;		None
   765 ;; Auto vars:     Size  Location     Type
   766 ;;		None
   767 ;; Return value:  Size  Location     Type
   768 ;;		None               void
   769 ;; Registers used:
   770 ;;		wreg, status,2, cstack
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   776 ;;      Params:         0       0       0       0       0       0       0
   777 ;;      Locals:         0       0       0       0       0       0       0
   778 ;;      Temps:          0       0       0       0       0       0       0
   779 ;;      Totals:         0       0       0       0       0       0       0
   780 ;;Total ram usage:        0 bytes
   781 ;; Hardware stack levels used:    1
   782 ;; Hardware stack levels required when called:    4
   783 ;; This function calls:
   784 ;;		_TMR1_StartTimer
   785 ;; This function is called by:
   786 ;;		_SYSTEM_Initialize
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           	psect	text3
   791  00156E                     __ptext3:
   792                           	opt stack 0
   793  00156E                     _TMR1_Initialize:
   794                           	opt stack 25
   795                           
   796                           ;tmr1.c: 68: T1CON = 0x00;
   797                           
   798                           ;incstack = 0
   799  00156E  0E00               	movlw	0
   800  001570  6ECD               	movwf	4045,c	;volatile
   801                           
   802                           ;tmr1.c: 71: T1GCON = 0x00;
   803  001572  0E00               	movlw	0
   804  001574  6ECC               	movwf	4044,c	;volatile
   805                           
   806                           ;tmr1.c: 74: TMR1H = 0xB1;
   807  001576  0EB1               	movlw	177
   808  001578  6ECF               	movwf	4047,c	;volatile
   809                           
   810                           ;tmr1.c: 77: TMR1L = 0xE0;
   811  00157A  0EE0               	movlw	224
   812  00157C  6ECE               	movwf	4046,c	;volatile
   813                           
   814                           ;tmr1.c: 80: timer1ReloadVal=TMR1;
   815  00157E  CFCE F047          	movff	4046,_timer1ReloadVal	;volatile
   816  001582  CFCF F048          	movff	4047,_timer1ReloadVal+1	;volatile
   817                           
   818                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
   819  001586  909E               	bcf	3998,0,c	;volatile
   820                           
   821                           ;tmr1.c: 86: PIE1bits.TMR1IE = 1;
   822  001588  809D               	bsf	3997,0,c	;volatile
   823                           
   824                           ;tmr1.c: 89: TMR1_StartTimer();
   825  00158A  EC12  F00B         	call	_TMR1_StartTimer	;wreg free
   826  00158E  0012               	return	
   827  001590                     __end_of_TMR1_Initialize:
   828                           	opt stack 0
   829                           tblptru	equ	0xFF8
   830                           intcon	equ	0xFF2
   831                           postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           postinc2	equ	0xFDE
   834                           postdec2	equ	0xFDD
   835                           fsr2h	equ	0xFDA
   836                           fsr2l	equ	0xFD9
   837                           status	equ	0xFD8
   838                           
   839 ;; *************** function _TMR1_StartTimer *****************
   840 ;; Defined at:
   841 ;;		line 92 in file "mcc_generated_files/tmr1.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;		None
   844 ;; Auto vars:     Size  Location     Type
   845 ;;		None
   846 ;; Return value:  Size  Location     Type
   847 ;;		None               void
   848 ;; Registers used:
   849 ;;		None
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   855 ;;      Params:         0       0       0       0       0       0       0
   856 ;;      Locals:         0       0       0       0       0       0       0
   857 ;;      Temps:          0       0       0       0       0       0       0
   858 ;;      Totals:         0       0       0       0       0       0       0
   859 ;;Total ram usage:        0 bytes
   860 ;; Hardware stack levels used:    1
   861 ;; Hardware stack levels required when called:    3
   862 ;; This function calls:
   863 ;;		Nothing
   864 ;; This function is called by:
   865 ;;		_TMR1_Initialize
   866 ;; This function uses a non-reentrant model
   867 ;;
   868                           
   869                           	psect	text4
   870  001624                     __ptext4:
   871                           	opt stack 0
   872  001624                     _TMR1_StartTimer:
   873                           	opt stack 25
   874                           
   875                           ;tmr1.c: 95: T1CONbits.TMR1ON = 1;
   876                           
   877                           ;incstack = 0
   878  001624  80CD               	bsf	4045,0,c	;volatile
   879  001626  0012               	return	
   880  001628                     __end_of_TMR1_StartTimer:
   881                           	opt stack 0
   882                           tblptru	equ	0xFF8
   883                           intcon	equ	0xFF2
   884                           postinc0	equ	0xFEE
   885                           wreg	equ	0xFE8
   886                           postinc2	equ	0xFDE
   887                           postdec2	equ	0xFDD
   888                           fsr2h	equ	0xFDA
   889                           fsr2l	equ	0xFD9
   890                           status	equ	0xFD8
   891                           
   892 ;; *************** function _PIN_MANAGER_Initialize *****************
   893 ;; Defined at:
   894 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;		None
   899 ;; Return value:  Size  Location     Type
   900 ;;		None               void
   901 ;; Registers used:
   902 ;;		wreg, status,2
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   908 ;;      Params:         0       0       0       0       0       0       0
   909 ;;      Locals:         0       0       0       0       0       0       0
   910 ;;      Temps:          0       0       0       0       0       0       0
   911 ;;      Totals:         0       0       0       0       0       0       0
   912 ;;Total ram usage:        0 bytes
   913 ;; Hardware stack levels used:    1
   914 ;; Hardware stack levels required when called:    3
   915 ;; This function calls:
   916 ;;		Nothing
   917 ;; This function is called by:
   918 ;;		_SYSTEM_Initialize
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           	psect	text5
   923  001392                     __ptext5:
   924                           	opt stack 0
   925  001392                     _PIN_MANAGER_Initialize:
   926                           	opt stack 26
   927                           
   928                           ;pin_manager.c: 52: LATA = 0x00;
   929                           
   930                           ;incstack = 0
   931  001392  0E00               	movlw	0
   932  001394  6E89               	movwf	3977,c	;volatile
   933                           
   934                           ;pin_manager.c: 53: TRISA = 0xAE;
   935  001396  0EAE               	movlw	174
   936  001398  6E92               	movwf	3986,c	;volatile
   937                           
   938                           ;pin_manager.c: 54: ANSELA = 0x2E;
   939  00139A  0E2E               	movlw	46
   940  00139C  010F               	movlb	15	; () banked
   941  00139E  6F38               	movwf	56,b	;volatile
   942                           
   943                           ;pin_manager.c: 56: LATB = 0x00;
   944  0013A0  0E00               	movlw	0
   945  0013A2  6E8A               	movwf	3978,c	;volatile
   946                           
   947                           ;pin_manager.c: 57: TRISB = 0xF4;
   948  0013A4  0EF4               	movlw	244
   949  0013A6  6E93               	movwf	3987,c	;volatile
   950                           
   951                           ;pin_manager.c: 58: ANSELB = 0x34;
   952  0013A8  0E34               	movlw	52
   953  0013AA  010F               	movlb	15	; () banked
   954  0013AC  6F39               	movwf	57,b	;volatile
   955                           
   956                           ;pin_manager.c: 59: WPUB = 0x00;
   957  0013AE  0E00               	movlw	0
   958  0013B0  6E61               	movwf	3937,c	;volatile
   959                           
   960                           ;pin_manager.c: 61: LATC = 0x08;
   961  0013B2  0E08               	movlw	8
   962  0013B4  6E8B               	movwf	3979,c	;volatile
   963                           
   964                           ;pin_manager.c: 62: TRISC = 0xC4;
   965  0013B6  0EC4               	movlw	196
   966  0013B8  6E94               	movwf	3988,c	;volatile
   967                           
   968                           ;pin_manager.c: 63: ANSELC = 0x04;
   969  0013BA  0E04               	movlw	4
   970  0013BC  010F               	movlb	15	; () banked
   971  0013BE  6F3A               	movwf	58,b	;volatile
   972                           
   973                           ;pin_manager.c: 65: LATD = 0x00;
   974  0013C0  0E00               	movlw	0
   975  0013C2  6E8C               	movwf	3980,c	;volatile
   976                           
   977                           ;pin_manager.c: 66: TRISD = 0xD1;
   978  0013C4  0ED1               	movlw	209
   979  0013C6  6E95               	movwf	3989,c	;volatile
   980                           
   981                           ;pin_manager.c: 67: ANSELD = 0xD1;
   982  0013C8  0ED1               	movlw	209
   983  0013CA  010F               	movlb	15	; () banked
   984  0013CC  6F3B               	movwf	59,b	;volatile
   985                           
   986                           ;pin_manager.c: 69: LATE = 0x00;
   987  0013CE  0E00               	movlw	0
   988  0013D0  6E8D               	movwf	3981,c	;volatile
   989                           
   990                           ;pin_manager.c: 70: TRISE = 0x05;
   991  0013D2  0E05               	movlw	5
   992  0013D4  6E96               	movwf	3990,c	;volatile
   993                           
   994                           ;pin_manager.c: 71: ANSELE = 0x05;
   995  0013D6  0E05               	movlw	5
   996  0013D8  010F               	movlb	15	; () banked
   997  0013DA  6F3C               	movwf	60,b	;volatile
   998                           
   999                           ; BSR set to: 15
  1000                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
  1001  0013DC  8EF1               	bsf	intcon2,7,c	;volatile
  1002                           
  1003                           ; BSR set to: 15
  1004  0013DE  0012               	return	
  1005  0013E0                     __end_of_PIN_MANAGER_Initialize:
  1006                           	opt stack 0
  1007                           tblptru	equ	0xFF8
  1008                           intcon	equ	0xFF2
  1009                           intcon2	equ	0xFF1
  1010                           postinc0	equ	0xFEE
  1011                           wreg	equ	0xFE8
  1012                           postinc2	equ	0xFDE
  1013                           postdec2	equ	0xFDD
  1014                           fsr2h	equ	0xFDA
  1015                           fsr2l	equ	0xFD9
  1016                           status	equ	0xFD8
  1017                           
  1018 ;; *************** function _OSCILLATOR_Initialize *****************
  1019 ;; Defined at:
  1020 ;;		line 122 in file "mcc_generated_files/mcc.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;		None
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;		None
  1025 ;; Return value:  Size  Location     Type
  1026 ;;		None               void
  1027 ;; Registers used:
  1028 ;;		wreg, status,2
  1029 ;; Tracked objects:
  1030 ;;		On entry : 0/0
  1031 ;;		On exit  : 0/0
  1032 ;;		Unchanged: 0/0
  1033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1034 ;;      Params:         0       0       0       0       0       0       0
  1035 ;;      Locals:         0       0       0       0       0       0       0
  1036 ;;      Temps:          0       0       0       0       0       0       0
  1037 ;;      Totals:         0       0       0       0       0       0       0
  1038 ;;Total ram usage:        0 bytes
  1039 ;; Hardware stack levels used:    1
  1040 ;; Hardware stack levels required when called:    3
  1041 ;; This function calls:
  1042 ;;		Nothing
  1043 ;; This function is called by:
  1044 ;;		_SYSTEM_Initialize
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           	psect	text6
  1049  00160A                     __ptext6:
  1050                           	opt stack 0
  1051  00160A                     _OSCILLATOR_Initialize:
  1052                           	opt stack 26
  1053                           
  1054                           ;mcc.c: 125: OSCCON = 0x62;
  1055                           
  1056                           ; BSR set to: 15
  1057                           ;incstack = 0
  1058  00160A  0E62               	movlw	98
  1059  00160C  6ED3               	movwf	4051,c	;volatile
  1060                           
  1061                           ;mcc.c: 127: OSCCON2 = 0x04;
  1062  00160E  0E04               	movlw	4
  1063  001610  6ED2               	movwf	4050,c	;volatile
  1064                           
  1065                           ;mcc.c: 129: OSCTUNE = 0x00;
  1066  001612  0E00               	movlw	0
  1067  001614  6E9B               	movwf	3995,c	;volatile
  1068  001616  0012               	return	
  1069  001618                     __end_of_OSCILLATOR_Initialize:
  1070                           	opt stack 0
  1071                           tblptru	equ	0xFF8
  1072                           intcon	equ	0xFF2
  1073                           intcon2	equ	0xFF1
  1074                           postinc0	equ	0xFEE
  1075                           wreg	equ	0xFE8
  1076                           postinc2	equ	0xFDE
  1077                           postdec2	equ	0xFDD
  1078                           fsr2h	equ	0xFDA
  1079                           fsr2l	equ	0xFD9
  1080                           status	equ	0xFD8
  1081                           
  1082 ;; *************** function _INTERRUPT_Initialize *****************
  1083 ;; Defined at:
  1084 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;		None
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;		None
  1089 ;; Return value:  Size  Location     Type
  1090 ;;		None               void
  1091 ;; Registers used:
  1092 ;;		None
  1093 ;; Tracked objects:
  1094 ;;		On entry : 0/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1098 ;;      Params:         0       0       0       0       0       0       0
  1099 ;;      Locals:         0       0       0       0       0       0       0
  1100 ;;      Temps:          0       0       0       0       0       0       0
  1101 ;;      Totals:         0       0       0       0       0       0       0
  1102 ;;Total ram usage:        0 bytes
  1103 ;; Hardware stack levels used:    1
  1104 ;; Hardware stack levels required when called:    3
  1105 ;; This function calls:
  1106 ;;		Nothing
  1107 ;; This function is called by:
  1108 ;;		_SYSTEM_Initialize
  1109 ;; This function uses a non-reentrant model
  1110 ;;
  1111                           
  1112                           	psect	text7
  1113  001618                     __ptext7:
  1114                           	opt stack 0
  1115  001618                     _INTERRUPT_Initialize:
  1116                           	opt stack 26
  1117                           
  1118                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  1119                           
  1120                           ;incstack = 0
  1121  001618  9ED0               	bcf	4048,7,c	;volatile
  1122                           
  1123                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  1124  00161A  9A9F               	bcf	3999,5,c	;volatile
  1125                           
  1126                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  1127  00161C  9C9F               	bcf	3999,6,c	;volatile
  1128                           
  1129                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  1130  00161E  909F               	bcf	3999,0,c	;volatile
  1131                           
  1132                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  1133  001620  989F               	bcf	3999,4,c	;volatile
  1134  001622  0012               	return	
  1135  001624                     __end_of_INTERRUPT_Initialize:
  1136                           	opt stack 0
  1137                           tblptru	equ	0xFF8
  1138                           intcon	equ	0xFF2
  1139                           intcon2	equ	0xFF1
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           postinc2	equ	0xFDE
  1143                           postdec2	equ	0xFDD
  1144                           fsr2h	equ	0xFDA
  1145                           fsr2l	equ	0xFD9
  1146                           status	equ	0xFD8
  1147                           
  1148 ;; *************** function _EUSART1_Initialize *****************
  1149 ;; Defined at:
  1150 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;		None
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;		None
  1155 ;; Return value:  Size  Location     Type
  1156 ;;		None               void
  1157 ;; Registers used:
  1158 ;;		wreg, status,2
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1164 ;;      Params:         0       0       0       0       0       0       0
  1165 ;;      Locals:         0       0       0       0       0       0       0
  1166 ;;      Temps:          0       0       0       0       0       0       0
  1167 ;;      Totals:         0       0       0       0       0       0       0
  1168 ;;Total ram usage:        0 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    3
  1171 ;; This function calls:
  1172 ;;		Nothing
  1173 ;; This function is called by:
  1174 ;;		_SYSTEM_Initialize
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text8
  1179  001428                     __ptext8:
  1180                           	opt stack 0
  1181  001428                     _EUSART1_Initialize:
  1182                           	opt stack 26
  1183                           
  1184                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  1185                           
  1186                           ;incstack = 0
  1187  001428  9A9D               	bcf	3997,5,c	;volatile
  1188                           
  1189                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  1190  00142A  989D               	bcf	3997,4,c	;volatile
  1191                           
  1192                           ;eusart1.c: 85: BAUD1CON = 0x48;
  1193  00142C  0E48               	movlw	72
  1194  00142E  6EB8               	movwf	4024,c	;volatile
  1195                           
  1196                           ;eusart1.c: 88: RC1STA = 0x98;
  1197  001430  0E98               	movlw	152
  1198  001432  6EAB               	movwf	4011,c	;volatile
  1199                           
  1200                           ;eusart1.c: 91: TX1STA = 0x26;
  1201  001434  0E26               	movlw	38
  1202  001436  6EAC               	movwf	4012,c	;volatile
  1203                           
  1204                           ;eusart1.c: 94: SPBRG1 = 0x22;
  1205  001438  0E22               	movlw	34
  1206  00143A  6EAF               	movwf	4015,c	;volatile
  1207                           
  1208                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  1209  00143C  0E00               	movlw	0
  1210  00143E  6EB0               	movwf	4016,c	;volatile
  1211                           
  1212                           ;eusart1.c: 100: TXREG1 = 0x00;
  1213  001440  0E00               	movlw	0
  1214  001442  6EAD               	movwf	4013,c	;volatile
  1215                           
  1216                           ;eusart1.c: 103: RCREG1 = 0x00;
  1217  001444  0E00               	movlw	0
  1218  001446  6EAE               	movwf	4014,c	;volatile
  1219                           
  1220                           ;eusart1.c: 107: eusart1TxHead = 0;
  1221  001448  0E00               	movlw	0
  1222  00144A  6E45               	movwf	_eusart1TxHead,c
  1223                           
  1224                           ;eusart1.c: 108: eusart1TxTail = 0;
  1225  00144C  0E00               	movlw	0
  1226  00144E  6E46               	movwf	_eusart1TxTail,c
  1227                           
  1228                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1229  001450  0E08               	movlw	8
  1230  001452  6E49               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1231                           
  1232                           ;eusart1.c: 111: eusart1RxHead = 0;
  1233  001454  0E00               	movlw	0
  1234  001456  6E43               	movwf	_eusart1RxHead,c
  1235                           
  1236                           ;eusart1.c: 112: eusart1RxTail = 0;
  1237  001458  0E00               	movlw	0
  1238  00145A  6E44               	movwf	_eusart1RxTail,c
  1239                           
  1240                           ;eusart1.c: 113: eusart1RxCount = 0;
  1241  00145C  0E00               	movlw	0
  1242  00145E  6E42               	movwf	_eusart1RxCount,c	;volatile
  1243                           
  1244                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  1245  001460  8A9D               	bsf	3997,5,c	;volatile
  1246  001462  0012               	return	
  1247  001464                     __end_of_EUSART1_Initialize:
  1248                           	opt stack 0
  1249                           tblptru	equ	0xFF8
  1250                           intcon	equ	0xFF2
  1251                           intcon2	equ	0xFF1
  1252                           postinc0	equ	0xFEE
  1253                           wreg	equ	0xFE8
  1254                           postinc2	equ	0xFDE
  1255                           postdec2	equ	0xFDD
  1256                           fsr2h	equ	0xFDA
  1257                           fsr2l	equ	0xFD9
  1258                           status	equ	0xFD8
  1259                           
  1260 ;; *************** function _ADC_Initialize *****************
  1261 ;; Defined at:
  1262 ;;		line 13 in file "mcc_generated_files/adc.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;		None
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;		None               void
  1269 ;; Registers used:
  1270 ;;		wreg, status,2
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1276 ;;      Params:         0       0       0       0       0       0       0
  1277 ;;      Locals:         0       0       0       0       0       0       0
  1278 ;;      Temps:          0       0       0       0       0       0       0
  1279 ;;      Totals:         0       0       0       0       0       0       0
  1280 ;;Total ram usage:        0 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    3
  1283 ;; This function calls:
  1284 ;;		Nothing
  1285 ;; This function is called by:
  1286 ;;		_SYSTEM_Initialize
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           	psect	text9
  1291  0015DE                     __ptext9:
  1292                           	opt stack 0
  1293  0015DE                     _ADC_Initialize:
  1294                           	opt stack 26
  1295                           
  1296                           ;adc.c: 18: ADCON0 = 0x01;
  1297                           
  1298                           ;incstack = 0
  1299  0015DE  0E01               	movlw	1
  1300  0015E0  6EC2               	movwf	4034,c	;volatile
  1301                           
  1302                           ;adc.c: 21: ADCON1 = 0x80;
  1303  0015E2  0E80               	movlw	128
  1304  0015E4  6EC1               	movwf	4033,c	;volatile
  1305                           
  1306                           ;adc.c: 24: ADCON2 = 0x0A;
  1307  0015E6  0E0A               	movlw	10
  1308  0015E8  6EC0               	movwf	4032,c	;volatile
  1309                           
  1310                           ;adc.c: 27: ADRESL = 0x00;
  1311  0015EA  0E00               	movlw	0
  1312  0015EC  6EC3               	movwf	4035,c	;volatile
  1313                           
  1314                           ;adc.c: 30: ADRESH = 0x00;
  1315  0015EE  0E00               	movlw	0
  1316  0015F0  6EC4               	movwf	4036,c	;volatile
  1317                           
  1318                           ;adc.c: 33: PIE1bits.ADIE = 1;
  1319  0015F2  8C9D               	bsf	3997,6,c	;volatile
  1320  0015F4  0012               	return	
  1321  0015F6                     __end_of_ADC_Initialize:
  1322                           	opt stack 0
  1323                           tblptru	equ	0xFF8
  1324                           intcon	equ	0xFF2
  1325                           intcon2	equ	0xFF1
  1326                           postinc0	equ	0xFEE
  1327                           wreg	equ	0xFE8
  1328                           postinc2	equ	0xFDE
  1329                           postdec2	equ	0xFDD
  1330                           fsr2h	equ	0xFDA
  1331                           fsr2l	equ	0xFD9
  1332                           status	equ	0xFD8
  1333                           
  1334 ;; *************** function _Battery_Fault *****************
  1335 ;; Defined at:
  1336 ;;		line 11 in file "Battery.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;		None
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;  i               2   46[COMRAM] int 
  1341 ;;  fault           1   45[COMRAM] unsigned char 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      unsigned char 
  1344 ;; Registers used:
  1345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1351 ;;      Params:         0       0       0       0       0       0       0
  1352 ;;      Locals:         3       0       0       0       0       0       0
  1353 ;;      Temps:          0       0       0       0       0       0       0
  1354 ;;      Totals:         3       0       0       0       0       0       0
  1355 ;;Total ram usage:        3 bytes
  1356 ;; Hardware stack levels used:    1
  1357 ;; Hardware stack levels required when called:    4
  1358 ;; This function calls:
  1359 ;;		___ftge
  1360 ;;		___wmul
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text10
  1367  00109E                     __ptext10:
  1368                           	opt stack 0
  1369  00109E                     _Battery_Fault:
  1370                           	opt stack 26
  1371                           
  1372                           ;Battery.c: 13: char fault = 0;
  1373                           
  1374                           ;incstack = 0
  1375  00109E  0E00               	movlw	0
  1376  0010A0  6E2E               	movwf	Battery_Fault@fault,c
  1377                           
  1378                           ;Battery.c: 14: for(int i = 0;i<9;i++)
  1379  0010A2  0E00               	movlw	0
  1380  0010A4  6E30               	movwf	Battery_Fault@i+1,c
  1381  0010A6  0E00               	movlw	0
  1382  0010A8  6E2F               	movwf	Battery_Fault@i,c
  1383  0010AA  5030               	movf	Battery_Fault@i+1,w,c
  1384  0010AC  0A80               	xorlw	128
  1385  0010AE  0F80               	addlw	-128
  1386  0010B0  0E09               	movlw	9
  1387  0010B2  B4D8               	btfsc	status,2,c
  1388  0010B4  5C2F               	subwf	Battery_Fault@i,w,c
  1389  0010B6  B0D8               	btfsc	status,0,c
  1390  0010B8  0012               	return	
  1391                           
  1392                           ;Battery.c: 15: {
  1393                           ;Battery.c: 16: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  1394  0010BA  0E00               	movlw	0
  1395  0010BC  6E25               	movwf	___ftge@ff1,c
  1396  0010BE  0E40               	movlw	64
  1397  0010C0  6E26               	movwf	___ftge@ff1+1,c
  1398  0010C2  0E40               	movlw	64
  1399  0010C4  6E27               	movwf	___ftge@ff1+2,c
  1400  0010C6  C02F  F01F         	movff	Battery_Fault@i,___wmul@multiplier
  1401  0010CA  C030  F020         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  1402  0010CE  0E00               	movlw	0
  1403  0010D0  6E22               	movwf	___wmul@multiplicand+1,c
  1404  0010D2  0E03               	movlw	3
  1405  0010D4  6E21               	movwf	___wmul@multiplicand,c
  1406  0010D6  ECA4  F00A         	call	___wmul	;wreg free
  1407  0010DA  0100               	movlb	0	; () banked
  1408  0010DC  0E60               	movlw	low _Battery_Volt
  1409  0010DE  241F               	addwf	?___wmul,w,c
  1410  0010E0  6ED9               	movwf	fsr2l,c
  1411  0010E2  0100               	movlb	0	; () banked
  1412  0010E4  0E00               	movlw	high _Battery_Volt
  1413  0010E6  2020               	addwfc	?___wmul+1,w,c
  1414  0010E8  6EDA               	movwf	fsr2h,c
  1415  0010EA  CFDE F028          	movff	postinc2,___ftge@ff2
  1416  0010EE  CFDE F029          	movff	postinc2,___ftge@ff2+1
  1417  0010F2  CFDD F02A          	movff	postdec2,___ftge@ff2+2
  1418  0010F6  EC4C  F009         	call	___ftge	;wreg free
  1419  0010FA  B0D8               	btfsc	status,0,c
  1420  0010FC  D024               	goto	l2870
  1421  0010FE  C02F  F01F         	movff	Battery_Fault@i,___wmul@multiplier
  1422  001102  C030  F020         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  1423  001106  0E00               	movlw	0
  1424  001108  6E22               	movwf	___wmul@multiplicand+1,c
  1425  00110A  0E03               	movlw	3
  1426  00110C  6E21               	movwf	___wmul@multiplicand,c
  1427  00110E  ECA4  F00A         	call	___wmul	;wreg free
  1428  001112  0100               	movlb	0	; () banked
  1429  001114  0E60               	movlw	low _Battery_Volt
  1430  001116  241F               	addwf	?___wmul,w,c
  1431  001118  6ED9               	movwf	fsr2l,c
  1432  00111A  0100               	movlb	0	; () banked
  1433  00111C  0E00               	movlw	high _Battery_Volt
  1434  00111E  2020               	addwfc	?___wmul+1,w,c
  1435  001120  6EDA               	movwf	fsr2h,c
  1436  001122  CFDE F025          	movff	postinc2,___ftge@ff1
  1437  001126  CFDE F026          	movff	postinc2,___ftge@ff1+1
  1438  00112A  CFDD F027          	movff	postdec2,___ftge@ff1+2
  1439  00112E  0EB8               	movlw	184
  1440  001130  6E28               	movwf	___ftge@ff2,c
  1441  001132  0E86               	movlw	134
  1442  001134  6E29               	movwf	___ftge@ff2+1,c
  1443  001136  0E40               	movlw	64
  1444  001138  6E2A               	movwf	___ftge@ff2+2,c
  1445  00113A  EC4C  F009         	call	___ftge	;wreg free
  1446  00113E  B0D8               	btfsc	status,0,c
  1447  001140  D002               	goto	l2870
  1448                           
  1449                           ;Battery.c: 17: {
  1450                           ;Battery.c: 18: fault = 1;
  1451  001142  0E01               	movlw	1
  1452  001144  6E2E               	movwf	Battery_Fault@fault,c
  1453  001146                     l2870:
  1454  001146  4A2F               	infsnz	Battery_Fault@i,f,c
  1455  001148  2A30               	incf	Battery_Fault@i+1,f,c
  1456  00114A  D7AF               	goto	L2
  1457  00114C                     __end_of_Battery_Fault:
  1458                           	opt stack 0
  1459                           tblptru	equ	0xFF8
  1460                           intcon	equ	0xFF2
  1461                           intcon2	equ	0xFF1
  1462                           postinc0	equ	0xFEE
  1463                           wreg	equ	0xFE8
  1464                           postinc2	equ	0xFDE
  1465                           postdec2	equ	0xFDD
  1466                           fsr2h	equ	0xFDA
  1467                           fsr2l	equ	0xFD9
  1468                           status	equ	0xFD8
  1469                           
  1470 ;; *************** function ___ftge *****************
  1471 ;; Defined at:
  1472 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;  ff1             3   36[COMRAM] float 
  1475 ;;  ff2             3   39[COMRAM] float 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;		None
  1478 ;; Return value:  Size  Location     Type
  1479 ;;		None               void
  1480 ;; Registers used:
  1481 ;;		wreg, status,2, status,0
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1487 ;;      Params:         6       0       0       0       0       0       0
  1488 ;;      Locals:         0       0       0       0       0       0       0
  1489 ;;      Temps:          3       0       0       0       0       0       0
  1490 ;;      Totals:         9       0       0       0       0       0       0
  1491 ;;Total ram usage:        9 bytes
  1492 ;; Hardware stack levels used:    1
  1493 ;; Hardware stack levels required when called:    3
  1494 ;; This function calls:
  1495 ;;		Nothing
  1496 ;; This function is called by:
  1497 ;;		_Battery_Fault
  1498 ;;		_Temp_Fault
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text11
  1503  001298                     __ptext11:
  1504                           	opt stack 0
  1505  001298                     ___ftge:
  1506                           	opt stack 26
  1507                           
  1508                           ;incstack = 0
  1509  001298  AE27               	btfss	___ftge@ff1+2,7,c
  1510  00129A  D016               	goto	l2134
  1511  00129C  C025  F02B         	movff	___ftge@ff1,??___ftge
  1512  0012A0  C026  F02C         	movff	___ftge@ff1+1,??___ftge+1
  1513  0012A4  C027  F02D         	movff	___ftge@ff1+2,??___ftge+2
  1514  0012A8  1E2B               	comf	??___ftge,f,c
  1515  0012AA  1E2C               	comf	??___ftge+1,f,c
  1516  0012AC  1E2D               	comf	??___ftge+2,f,c
  1517  0012AE  2A2B               	incf	??___ftge,f,c
  1518  0012B0  0E00               	movlw	0
  1519  0012B2  222C               	addwfc	??___ftge+1,f,c
  1520  0012B4  222D               	addwfc	??___ftge+2,f,c
  1521  0012B6  0E00               	movlw	0
  1522  0012B8  242B               	addwf	??___ftge,w,c
  1523  0012BA  6E25               	movwf	___ftge@ff1,c
  1524  0012BC  0E00               	movlw	0
  1525  0012BE  202C               	addwfc	??___ftge+1,w,c
  1526  0012C0  6E26               	movwf	___ftge@ff1+1,c
  1527  0012C2  0E80               	movlw	128
  1528  0012C4  202D               	addwfc	??___ftge+2,w,c
  1529  0012C6  6E27               	movwf	___ftge@ff1+2,c
  1530  0012C8                     l2134:
  1531  0012C8  AE2A               	btfss	___ftge@ff2+2,7,c
  1532  0012CA  D016               	goto	l2138
  1533  0012CC  C028  F02B         	movff	___ftge@ff2,??___ftge
  1534  0012D0  C029  F02C         	movff	___ftge@ff2+1,??___ftge+1
  1535  0012D4  C02A  F02D         	movff	___ftge@ff2+2,??___ftge+2
  1536  0012D8  1E2B               	comf	??___ftge,f,c
  1537  0012DA  1E2C               	comf	??___ftge+1,f,c
  1538  0012DC  1E2D               	comf	??___ftge+2,f,c
  1539  0012DE  2A2B               	incf	??___ftge,f,c
  1540  0012E0  0E00               	movlw	0
  1541  0012E2  222C               	addwfc	??___ftge+1,f,c
  1542  0012E4  222D               	addwfc	??___ftge+2,f,c
  1543  0012E6  0E00               	movlw	0
  1544  0012E8  242B               	addwf	??___ftge,w,c
  1545  0012EA  6E28               	movwf	___ftge@ff2,c
  1546  0012EC  0E00               	movlw	0
  1547  0012EE  202C               	addwfc	??___ftge+1,w,c
  1548  0012F0  6E29               	movwf	___ftge@ff2+1,c
  1549  0012F2  0E80               	movlw	128
  1550  0012F4  202D               	addwfc	??___ftge+2,w,c
  1551  0012F6  6E2A               	movwf	___ftge@ff2+2,c
  1552  0012F8                     l2138:
  1553  0012F8  0E00               	movlw	0
  1554  0012FA  1A25               	xorwf	___ftge@ff1,f,c
  1555  0012FC  0E00               	movlw	0
  1556  0012FE  1A26               	xorwf	___ftge@ff1+1,f,c
  1557  001300  0E80               	movlw	128
  1558  001302  1A27               	xorwf	___ftge@ff1+2,f,c
  1559  001304  0E00               	movlw	0
  1560  001306  1A28               	xorwf	___ftge@ff2,f,c
  1561  001308  0E00               	movlw	0
  1562  00130A  1A29               	xorwf	___ftge@ff2+1,f,c
  1563  00130C  0E80               	movlw	128
  1564  00130E  1A2A               	xorwf	___ftge@ff2+2,f,c
  1565  001310  5028               	movf	___ftge@ff2,w,c
  1566  001312  5C25               	subwf	___ftge@ff1,w,c
  1567  001314  5029               	movf	___ftge@ff2+1,w,c
  1568  001316  5826               	subwfb	___ftge@ff1+1,w,c
  1569  001318  502A               	movf	___ftge@ff2+2,w,c
  1570  00131A  5827               	subwfb	___ftge@ff1+2,w,c
  1571  00131C  B0D8               	btfsc	status,0,c
  1572  00131E  D002               	goto	l2144
  1573  001320  90D8               	bcf	status,0,c
  1574  001322  0012               	return	
  1575  001324                     l2144:
  1576  001324  80D8               	bsf	status,0,c
  1577  001326  0012               	return	
  1578  001328                     __end_of___ftge:
  1579                           	opt stack 0
  1580                           tblptru	equ	0xFF8
  1581                           intcon	equ	0xFF2
  1582                           intcon2	equ	0xFF1
  1583                           postinc0	equ	0xFEE
  1584                           wreg	equ	0xFE8
  1585                           postinc2	equ	0xFDE
  1586                           postdec2	equ	0xFDD
  1587                           fsr2h	equ	0xFDA
  1588                           fsr2l	equ	0xFD9
  1589                           status	equ	0xFD8
  1590                           
  1591 ;; *************** function _Battery_Convert *****************
  1592 ;; Defined at:
  1593 ;;		line 47 in file "Battery.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;		None
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;  x               2   16[BANK0 ] int 
  1598 ;; Return value:  Size  Location     Type
  1599 ;;		None               void
  1600 ;; Registers used:
  1601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1607 ;;      Params:         0       0       0       0       0       0       0
  1608 ;;      Locals:         0       2       0       0       0       0       0
  1609 ;;      Temps:          0       2       0       0       0       0       0
  1610 ;;      Totals:         0       4       0       0       0       0       0
  1611 ;;Total ram usage:        4 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; Hardware stack levels required when called:    6
  1614 ;; This function calls:
  1615 ;;		_Battery_Filter
  1616 ;;		___awdiv
  1617 ;;		___awtoft
  1618 ;;		___ftadd
  1619 ;;		___wmul
  1620 ;; This function is called by:
  1621 ;;		_main
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text12
  1626  000FC6                     __ptext12:
  1627                           	opt stack 0
  1628  000FC6                     _Battery_Convert:
  1629                           	opt stack 24
  1630                           
  1631                           ;Battery.c: 49: int x;
  1632                           ;Battery.c: 50: for(x = 0; x < 10; x++)
  1633                           
  1634                           ;incstack = 0
  1635  000FC6  0E00               	movlw	0
  1636  000FC8  0100               	movlb	0	; () banked
  1637  000FCA  6FFF               	movwf	(Battery_Convert@x+1)& (0+255),b
  1638  000FCC  0E00               	movlw	0
  1639  000FCE  0100               	movlb	0	; () banked
  1640  000FD0  6FFE               	movwf	Battery_Convert@x& (0+255),b
  1641  000FD2                     
  1642                           ; BSR set to: 0
  1643  000FD2  0100               	movlb	0	; () banked
  1644  000FD4  51FF               	movf	(Battery_Convert@x+1)& (0+255),w,b
  1645  000FD6  0A80               	xorlw	128
  1646  000FD8  0F80               	addlw	-128
  1647  000FDA  0E0A               	movlw	10
  1648  000FDC  B4D8               	btfsc	status,2,c
  1649  000FDE  5DFE               	subwf	Battery_Convert@x& (0+255),w,b
  1650  000FE0  B0D8               	btfsc	status,0,c
  1651  000FE2  D05A               	goto	l2886
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;Battery.c: 51: {
  1655                           ;Battery.c: 52: TempBattery_Volt[x] = ((Battery_Adc[x]/1024)*5) + 2.5;
  1656                           
  1657                           ; BSR set to: 0
  1658                           
  1659                           ; BSR set to: 0
  1660  000FE4  C0FE  F01F         	movff	Battery_Convert@x,___wmul@multiplier
  1661  000FE8  C0FF  F020         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  1662  000FEC  0E00               	movlw	0
  1663  000FEE  6E22               	movwf	___wmul@multiplicand+1,c
  1664  000FF0  0E03               	movlw	3
  1665  000FF2  6E21               	movwf	___wmul@multiplicand,c
  1666  000FF4  ECA4  F00A         	call	___wmul	;wreg free
  1667  000FF8  0100               	movlb	0	; () banked
  1668  000FFA  0EBC               	movlw	low _TempBattery_Volt
  1669  000FFC  241F               	addwf	?___wmul,w,c
  1670  000FFE  6ED9               	movwf	fsr2l,c
  1671  001000  0100               	movlb	0	; () banked
  1672  001002  0E00               	movlw	high _TempBattery_Volt
  1673  001004  2020               	addwfc	?___wmul+1,w,c
  1674  001006  6EDA               	movwf	fsr2h,c
  1675  001008  0E04               	movlw	4
  1676  00100A  6E1A               	movwf	___awdiv@divisor+1,c
  1677  00100C  0E00               	movlw	0
  1678  00100E  6E19               	movwf	___awdiv@divisor,c
  1679  001010  0E9C               	movlw	low _Battery_Adc
  1680  001012  0100               	movlb	0	; () banked
  1681  001014  6FFC               	movwf	??_Battery_Convert& (0+255),b
  1682  001016  0E00               	movlw	high _Battery_Adc
  1683  001018  6FFD               	movwf	(??_Battery_Convert+1)& (0+255),b
  1684  00101A  90D8               	bcf	status,0,c
  1685  00101C  0100               	movlb	0	; () banked
  1686  00101E  35FE               	rlcf	Battery_Convert@x& (0+255),w,b
  1687  001020  6EE1               	movwf	fsr1l,c
  1688  001022  0100               	movlb	0	; () banked
  1689  001024  35FF               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  1690  001026  6EE2               	movwf	fsr1h,c
  1691  001028  0100               	movlb	0	; () banked
  1692  00102A  51FC               	movf	??_Battery_Convert& (0+255),w,b
  1693  00102C  26E1               	addwf	fsr1l,f,c
  1694  00102E  0100               	movlb	0	; () banked
  1695  001030  51FD               	movf	(??_Battery_Convert+1)& (0+255),w,b
  1696  001032  22E2               	addwfc	fsr1h,f,c
  1697  001034  CFE6 F017          	movff	postinc1,___awdiv@dividend
  1698  001038  CFE5 F018          	movff	postdec1,___awdiv@dividend+1
  1699  00103C  ECFA  F008         	call	___awdiv	;wreg free
  1700  001040  C017  F01F         	movff	?___awdiv,___wmul@multiplier
  1701  001044  C018  F020         	movff	?___awdiv+1,___wmul@multiplier+1
  1702  001048  0E00               	movlw	0
  1703  00104A  6E22               	movwf	___wmul@multiplicand+1,c
  1704  00104C  0E05               	movlw	5
  1705  00104E  6E21               	movwf	___wmul@multiplicand,c
  1706  001050  ECA4  F00A         	call	___wmul	;wreg free
  1707  001054  C01F  F025         	movff	?___wmul,___awtoft@c
  1708  001058  C020  F026         	movff	?___wmul+1,___awtoft@c+1
  1709  00105C  ECF0  F009         	call	___awtoft	;wreg free
  1710  001060  C025  F0EE         	movff	?___awtoft,___ftadd@f1
  1711  001064  C026  F0EF         	movff	?___awtoft+1,___ftadd@f1+1
  1712  001068  C027  F0F0         	movff	?___awtoft+2,___ftadd@f1+2
  1713  00106C  0E00               	movlw	0
  1714  00106E  0100               	movlb	0	; () banked
  1715  001070  6FF1               	movwf	___ftadd@f2& (0+255),b
  1716  001072  0E20               	movlw	32
  1717  001074  0100               	movlb	0	; () banked
  1718  001076  6FF2               	movwf	(___ftadd@f2+1)& (0+255),b
  1719  001078  0E40               	movlw	64
  1720  00107A  0100               	movlb	0	; () banked
  1721  00107C  6FF3               	movwf	(___ftadd@f2+2)& (0+255),b
  1722  00107E  EC73  F005         	call	___ftadd	;wreg free
  1723  001082  C0EE  FFDE         	movff	?___ftadd,postinc2
  1724  001086  C0EF  FFDE         	movff	?___ftadd+1,postinc2
  1725  00108A  C0F0  FFDD         	movff	?___ftadd+2,postdec2
  1726  00108E  52DD               	movf	postdec2,f,c
  1727  001090  0100               	movlb	0	; () banked
  1728  001092  4BFE               	infsnz	Battery_Convert@x& (0+255),f,b
  1729  001094  2BFF               	incf	(Battery_Convert@x+1)& (0+255),f,b
  1730  001096  D79D               	goto	L3
  1731  001098                     l2886:
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;Battery.c: 53: }
  1735                           ;Battery.c: 54: Battery_Filter();
  1736  001098  ECB3  F006         	call	_Battery_Filter	;wreg free
  1737  00109C  0012               	return	
  1738  00109E                     __end_of_Battery_Convert:
  1739                           	opt stack 0
  1740                           tblptru	equ	0xFF8
  1741                           intcon	equ	0xFF2
  1742                           intcon2	equ	0xFF1
  1743                           postinc0	equ	0xFEE
  1744                           wreg	equ	0xFE8
  1745                           postinc1	equ	0xFE6
  1746                           postdec1	equ	0xFE5
  1747                           fsr1h	equ	0xFE2
  1748                           fsr1l	equ	0xFE1
  1749                           postinc2	equ	0xFDE
  1750                           postdec2	equ	0xFDD
  1751                           fsr2h	equ	0xFDA
  1752                           fsr2l	equ	0xFD9
  1753                           status	equ	0xFD8
  1754                           
  1755 ;; *************** function ___awtoft *****************
  1756 ;; Defined at:
  1757 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;  c               2   36[COMRAM] int 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  sign            1   39[COMRAM] unsigned char 
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  3   36[COMRAM] float 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0, prodl, cstack
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1771 ;;      Params:         3       0       0       0       0       0       0
  1772 ;;      Locals:         1       0       0       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0       0       0
  1774 ;;      Totals:         4       0       0       0       0       0       0
  1775 ;;Total ram usage:        4 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    4
  1778 ;; This function calls:
  1779 ;;		___ftpack
  1780 ;; This function is called by:
  1781 ;;		_Battery_Convert
  1782 ;;		_Temp_Convert
  1783 ;;		_log
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           	psect	text13
  1788  0013E0                     __ptext13:
  1789                           	opt stack 0
  1790  0013E0                     ___awtoft:
  1791                           	opt stack 25
  1792                           
  1793                           ;incstack = 0
  1794  0013E0  0E00               	movlw	0
  1795  0013E2  6E28               	movwf	___awtoft@sign,c
  1796  0013E4  5026               	movf	___awtoft@c+1,w,c
  1797  0013E6  0A80               	xorlw	128
  1798  0013E8  6EF3               	movwf	prodl,c
  1799  0013EA  0E80               	movlw	128
  1800  0013EC  5CF3               	subwf	prodl,w,c
  1801  0013EE  0E00               	movlw	0
  1802  0013F0  B4D8               	btfsc	status,2,c
  1803  0013F2  5C25               	subwf	___awtoft@c,w,c
  1804  0013F4  B0D8               	btfsc	status,0,c
  1805  0013F6  D006               	goto	l2854
  1806  0013F8  6C25               	negf	___awtoft@c,c
  1807  0013FA  1E26               	comf	___awtoft@c+1,f,c
  1808  0013FC  B0D8               	btfsc	status,0,c
  1809  0013FE  2A26               	incf	___awtoft@c+1,f,c
  1810  001400  0E01               	movlw	1
  1811  001402  6E28               	movwf	___awtoft@sign,c
  1812  001404                     l2854:
  1813  001404  C025  F017         	movff	___awtoft@c,___ftpack@arg
  1814  001408  C026  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  1815  00140C  6A19               	clrf	___ftpack@arg+2,c
  1816  00140E  0E8E               	movlw	142
  1817  001410  6E1A               	movwf	___ftpack@exp,c
  1818  001412  C028  F01B         	movff	___awtoft@sign,___ftpack@sign
  1819  001416  ECA6  F008         	call	___ftpack	;wreg free
  1820  00141A  C017  F025         	movff	?___ftpack,?___awtoft
  1821  00141E  C018  F026         	movff	?___ftpack+1,?___awtoft+1
  1822  001422  C019  F027         	movff	?___ftpack+2,?___awtoft+2
  1823  001426  0012               	return	
  1824  001428                     __end_of___awtoft:
  1825                           	opt stack 0
  1826                           tblptru	equ	0xFF8
  1827                           prodl	equ	0xFF3
  1828                           intcon	equ	0xFF2
  1829                           intcon2	equ	0xFF1
  1830                           postinc0	equ	0xFEE
  1831                           wreg	equ	0xFE8
  1832                           postinc1	equ	0xFE6
  1833                           postdec1	equ	0xFE5
  1834                           fsr1h	equ	0xFE2
  1835                           fsr1l	equ	0xFE1
  1836                           postinc2	equ	0xFDE
  1837                           postdec2	equ	0xFDD
  1838                           fsr2h	equ	0xFDA
  1839                           fsr2l	equ	0xFD9
  1840                           status	equ	0xFD8
  1841                           
  1842 ;; *************** function ___awdiv *****************
  1843 ;; Defined at:
  1844 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;  dividend        2   22[COMRAM] int 
  1847 ;;  divisor         2   24[COMRAM] int 
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;  quotient        2   28[COMRAM] int 
  1850 ;;  sign            1   27[COMRAM] unsigned char 
  1851 ;;  counter         1   26[COMRAM] unsigned char 
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  2   22[COMRAM] int 
  1854 ;; Registers used:
  1855 ;;		wreg, status,2, status,0, prodl
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1861 ;;      Params:         4       0       0       0       0       0       0
  1862 ;;      Locals:         4       0       0       0       0       0       0
  1863 ;;      Temps:          0       0       0       0       0       0       0
  1864 ;;      Totals:         8       0       0       0       0       0       0
  1865 ;;Total ram usage:        8 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    3
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_Battery_Convert
  1872 ;;		_Temp_Convert
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           	psect	text14
  1877  0011F4                     __ptext14:
  1878                           	opt stack 0
  1879  0011F4                     ___awdiv:
  1880                           	opt stack 26
  1881                           
  1882                           ;incstack = 0
  1883  0011F4  0E00               	movlw	0
  1884  0011F6  6E1C               	movwf	___awdiv@sign,c
  1885  0011F8  501A               	movf	___awdiv@divisor+1,w,c
  1886  0011FA  0A80               	xorlw	128
  1887  0011FC  6EF3               	movwf	prodl,c
  1888  0011FE  0E80               	movlw	128
  1889  001200  5CF3               	subwf	prodl,w,c
  1890  001202  0E00               	movlw	0
  1891  001204  B4D8               	btfsc	status,2,c
  1892  001206  5C19               	subwf	___awdiv@divisor,w,c
  1893  001208  B0D8               	btfsc	status,0,c
  1894  00120A  D006               	goto	l2810
  1895  00120C  6C19               	negf	___awdiv@divisor,c
  1896  00120E  1E1A               	comf	___awdiv@divisor+1,f,c
  1897  001210  B0D8               	btfsc	status,0,c
  1898  001212  2A1A               	incf	___awdiv@divisor+1,f,c
  1899  001214  0E01               	movlw	1
  1900  001216  6E1C               	movwf	___awdiv@sign,c
  1901  001218                     l2810:
  1902  001218  5018               	movf	___awdiv@dividend+1,w,c
  1903  00121A  0A80               	xorlw	128
  1904  00121C  6EF3               	movwf	prodl,c
  1905  00121E  0E80               	movlw	128
  1906  001220  5CF3               	subwf	prodl,w,c
  1907  001222  0E00               	movlw	0
  1908  001224  B4D8               	btfsc	status,2,c
  1909  001226  5C17               	subwf	___awdiv@dividend,w,c
  1910  001228  B0D8               	btfsc	status,0,c
  1911  00122A  D006               	goto	l2816
  1912  00122C  6C17               	negf	___awdiv@dividend,c
  1913  00122E  1E18               	comf	___awdiv@dividend+1,f,c
  1914  001230  B0D8               	btfsc	status,0,c
  1915  001232  2A18               	incf	___awdiv@dividend+1,f,c
  1916  001234  0E01               	movlw	1
  1917  001236  1A1C               	xorwf	___awdiv@sign,f,c
  1918  001238                     l2816:
  1919  001238  0E00               	movlw	0
  1920  00123A  6E1E               	movwf	___awdiv@quotient+1,c
  1921  00123C  0E00               	movlw	0
  1922  00123E  6E1D               	movwf	___awdiv@quotient,c
  1923  001240  501A               	movf	___awdiv@divisor+1,w,c
  1924  001242  1019               	iorwf	___awdiv@divisor,w,c
  1925  001244  B4D8               	btfsc	status,2,c
  1926  001246  D01C               	goto	l2838
  1927  001248  0E01               	movlw	1
  1928  00124A  6E1B               	movwf	___awdiv@counter,c
  1929  00124C  D004               	goto	l2824
  1930  00124E                     l2822:
  1931  00124E  90D8               	bcf	status,0,c
  1932  001250  3619               	rlcf	___awdiv@divisor,f,c
  1933  001252  361A               	rlcf	___awdiv@divisor+1,f,c
  1934  001254  2A1B               	incf	___awdiv@counter,f,c
  1935  001256                     l2824:
  1936  001256  AE1A               	btfss	___awdiv@divisor+1,7,c
  1937  001258  D7FA               	goto	l2822
  1938  00125A                     l2826:
  1939  00125A  90D8               	bcf	status,0,c
  1940  00125C  361D               	rlcf	___awdiv@quotient,f,c
  1941  00125E  361E               	rlcf	___awdiv@quotient+1,f,c
  1942  001260  5019               	movf	___awdiv@divisor,w,c
  1943  001262  5C17               	subwf	___awdiv@dividend,w,c
  1944  001264  501A               	movf	___awdiv@divisor+1,w,c
  1945  001266  5818               	subwfb	___awdiv@dividend+1,w,c
  1946  001268  A0D8               	btfss	status,0,c
  1947  00126A  D005               	goto	l2834
  1948  00126C  5019               	movf	___awdiv@divisor,w,c
  1949  00126E  5E17               	subwf	___awdiv@dividend,f,c
  1950  001270  501A               	movf	___awdiv@divisor+1,w,c
  1951  001272  5A18               	subwfb	___awdiv@dividend+1,f,c
  1952  001274  801D               	bsf	___awdiv@quotient,0,c
  1953  001276                     l2834:
  1954  001276  90D8               	bcf	status,0,c
  1955  001278  321A               	rrcf	___awdiv@divisor+1,f,c
  1956  00127A  3219               	rrcf	___awdiv@divisor,f,c
  1957  00127C  2E1B               	decfsz	___awdiv@counter,f,c
  1958  00127E  D7ED               	goto	l2826
  1959  001280                     l2838:
  1960  001280  501C               	movf	___awdiv@sign,w,c
  1961  001282  B4D8               	btfsc	status,2,c
  1962  001284  D004               	goto	l2842
  1963  001286  6C1D               	negf	___awdiv@quotient,c
  1964  001288  1E1E               	comf	___awdiv@quotient+1,f,c
  1965  00128A  B0D8               	btfsc	status,0,c
  1966  00128C  2A1E               	incf	___awdiv@quotient+1,f,c
  1967  00128E                     l2842:
  1968  00128E  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  1969  001292  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  1970  001296  0012               	return	
  1971  001298                     __end_of___awdiv:
  1972                           	opt stack 0
  1973                           tblptru	equ	0xFF8
  1974                           prodl	equ	0xFF3
  1975                           intcon	equ	0xFF2
  1976                           intcon2	equ	0xFF1
  1977                           postinc0	equ	0xFEE
  1978                           wreg	equ	0xFE8
  1979                           postinc1	equ	0xFE6
  1980                           postdec1	equ	0xFE5
  1981                           fsr1h	equ	0xFE2
  1982                           fsr1l	equ	0xFE1
  1983                           postinc2	equ	0xFDE
  1984                           postdec2	equ	0xFDD
  1985                           fsr2h	equ	0xFDA
  1986                           fsr2l	equ	0xFD9
  1987                           status	equ	0xFD8
  1988                           
  1989 ;; *************** function _Battery_Filter *****************
  1990 ;; Defined at:
  1991 ;;		line 33 in file "Battery.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;		None
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  x               2   12[BANK0 ] int 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;		None               void
  1998 ;; Registers used:
  1999 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2005 ;;      Params:         0       0       0       0       0       0       0
  2006 ;;      Locals:         0       2       0       0       0       0       0
  2007 ;;      Temps:          0       0       0       0       0       0       0
  2008 ;;      Totals:         0       2       0       0       0       0       0
  2009 ;;Total ram usage:        2 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    5
  2012 ;; This function calls:
  2013 ;;		___ftadd
  2014 ;;		___ftmul
  2015 ;;		___wmul
  2016 ;; This function is called by:
  2017 ;;		_Battery_Convert
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           	psect	text15
  2022  000D66                     __ptext15:
  2023                           	opt stack 0
  2024  000D66                     _Battery_Filter:
  2025                           	opt stack 24
  2026                           
  2027                           ;Battery.c: 36: int x;
  2028                           ;Battery.c: 37: for(x = 0; x < 10; x++)
  2029                           
  2030                           ;incstack = 0
  2031  000D66  0E00               	movlw	0
  2032  000D68  0100               	movlb	0	; () banked
  2033  000D6A  6FFB               	movwf	(Battery_Filter@x+1)& (0+255),b
  2034  000D6C  0E00               	movlw	0
  2035  000D6E  0100               	movlb	0	; () banked
  2036  000D70  6FFA               	movwf	Battery_Filter@x& (0+255),b
  2037  000D72                     
  2038                           ; BSR set to: 0
  2039  000D72  0100               	movlb	0	; () banked
  2040  000D74  51FB               	movf	(Battery_Filter@x+1)& (0+255),w,b
  2041  000D76  0A80               	xorlw	128
  2042  000D78  0F80               	addlw	-128
  2043  000D7A  0E0A               	movlw	10
  2044  000D7C  B4D8               	btfsc	status,2,c
  2045  000D7E  5DFA               	subwf	Battery_Filter@x& (0+255),w,b
  2046  000D80  B0D8               	btfsc	status,0,c
  2047  000D82  D06B               	goto	l2790
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;Battery.c: 38: {
  2051                           ;Battery.c: 39: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
  2052                           
  2053                           ; BSR set to: 0
  2054                           
  2055                           ; BSR set to: 0
  2056  000D84  C0FA  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  2057  000D88  C0FB  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  2058  000D8C  0E00               	movlw	0
  2059  000D8E  6E22               	movwf	___wmul@multiplicand+1,c
  2060  000D90  0E03               	movlw	3
  2061  000D92  6E21               	movwf	___wmul@multiplicand,c
  2062  000D94  ECA4  F00A         	call	___wmul	;wreg free
  2063  000D98  0100               	movlb	0	; () banked
  2064  000D9A  0E60               	movlw	low _Battery_Volt
  2065  000D9C  241F               	addwf	?___wmul,w,c
  2066  000D9E  6ED9               	movwf	fsr2l,c
  2067  000DA0  0100               	movlb	0	; () banked
  2068  000DA2  0E00               	movlw	high _Battery_Volt
  2069  000DA4  2020               	addwfc	?___wmul+1,w,c
  2070  000DA6  6EDA               	movwf	fsr2h,c
  2071  000DA8  0E48               	movlw	72
  2072  000DAA  6E28               	movwf	___ftmul@f2,c
  2073  000DAC  0E61               	movlw	97
  2074  000DAE  6E29               	movwf	___ftmul@f2+1,c
  2075  000DB0  0E3F               	movlw	63
  2076  000DB2  6E2A               	movwf	___ftmul@f2+2,c
  2077  000DB4  C0FA  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  2078  000DB8  C0FB  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  2079  000DBC  0E00               	movlw	0
  2080  000DBE  6E22               	movwf	___wmul@multiplicand+1,c
  2081  000DC0  0E03               	movlw	3
  2082  000DC2  6E21               	movwf	___wmul@multiplicand,c
  2083  000DC4  ECA4  F00A         	call	___wmul	;wreg free
  2084  000DC8  0100               	movlb	0	; () banked
  2085  000DCA  0EBC               	movlw	low _TempBattery_Volt
  2086  000DCC  241F               	addwf	?___wmul,w,c
  2087  000DCE  6EE1               	movwf	fsr1l,c
  2088  000DD0  0100               	movlb	0	; () banked
  2089  000DD2  0E00               	movlw	high _TempBattery_Volt
  2090  000DD4  2020               	addwfc	?___wmul+1,w,c
  2091  000DD6  6EE2               	movwf	fsr1h,c
  2092  000DD8  CFE6 F025          	movff	postinc1,___ftmul@f1
  2093  000DDC  CFE6 F026          	movff	postinc1,___ftmul@f1+1
  2094  000DE0  CFE5 F027          	movff	postdec1,___ftmul@f1+2
  2095  000DE4  EC6B  F007         	call	___ftmul	;wreg free
  2096  000DE8  C025  F0EE         	movff	?___ftmul,___ftadd@f1
  2097  000DEC  C026  F0EF         	movff	?___ftmul+1,___ftadd@f1+1
  2098  000DF0  C027  F0F0         	movff	?___ftmul+2,___ftadd@f1+2
  2099  000DF4  0EC3               	movlw	195
  2100  000DF6  6E28               	movwf	___ftmul@f2,c
  2101  000DF8  0EF5               	movlw	245
  2102  000DFA  6E29               	movwf	___ftmul@f2+1,c
  2103  000DFC  0E3D               	movlw	61
  2104  000DFE  6E2A               	movwf	___ftmul@f2+2,c
  2105  000E00  0E00               	movlw	0
  2106  000E02  6E22               	movwf	___wmul@multiplicand+1,c
  2107  000E04  0E03               	movlw	3
  2108  000E06  6E21               	movwf	___wmul@multiplicand,c
  2109  000E08  C0FA  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  2110  000E0C  C0FB  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  2111  000E10  ECA4  F00A         	call	___wmul	;wreg free
  2112  000E14  0101               	movlb	1	; () banked
  2113  000E16  0E00               	movlw	low _PrevBattery_Volt
  2114  000E18  241F               	addwf	?___wmul,w,c
  2115  000E1A  6EE1               	movwf	fsr1l,c
  2116  000E1C  0101               	movlb	1	; () banked
  2117  000E1E  0E01               	movlw	high _PrevBattery_Volt
  2118  000E20  2020               	addwfc	?___wmul+1,w,c
  2119  000E22  6EE2               	movwf	fsr1h,c
  2120  000E24  CFE6 F025          	movff	postinc1,___ftmul@f1
  2121  000E28  CFE6 F026          	movff	postinc1,___ftmul@f1+1
  2122  000E2C  CFE5 F027          	movff	postdec1,___ftmul@f1+2
  2123  000E30  EC6B  F007         	call	___ftmul	;wreg free
  2124  000E34  C025  F0F1         	movff	?___ftmul,___ftadd@f2
  2125  000E38  C026  F0F2         	movff	?___ftmul+1,___ftadd@f2+1
  2126  000E3C  C027  F0F3         	movff	?___ftmul+2,___ftadd@f2+2
  2127  000E40  EC73  F005         	call	___ftadd	;wreg free
  2128  000E44  C0EE  FFDE         	movff	?___ftadd,postinc2
  2129  000E48  C0EF  FFDE         	movff	?___ftadd+1,postinc2
  2130  000E4C  C0F0  FFDD         	movff	?___ftadd+2,postdec2
  2131  000E50  52DD               	movf	postdec2,f,c
  2132  000E52  0100               	movlb	0	; () banked
  2133  000E54  4BFA               	infsnz	Battery_Filter@x& (0+255),f,b
  2134  000E56  2BFB               	incf	(Battery_Filter@x+1)& (0+255),f,b
  2135  000E58  D78C               	goto	L4
  2136  000E5A                     l2790:
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;Battery.c: 40: }
  2140                           ;Battery.c: 41: for(x = 0; x < 10; x++)
  2141  000E5A  0E00               	movlw	0
  2142  000E5C  0100               	movlb	0	; () banked
  2143  000E5E  6FFB               	movwf	(Battery_Filter@x+1)& (0+255),b
  2144  000E60  0E00               	movlw	0
  2145  000E62  0100               	movlb	0	; () banked
  2146  000E64  6FFA               	movwf	Battery_Filter@x& (0+255),b
  2147  000E66                     
  2148                           ; BSR set to: 0
  2149  000E66  0100               	movlb	0	; () banked
  2150  000E68  51FB               	movf	(Battery_Filter@x+1)& (0+255),w,b
  2151  000E6A  0A80               	xorlw	128
  2152  000E6C  0F80               	addlw	-128
  2153  000E6E  0E0A               	movlw	10
  2154  000E70  B4D8               	btfsc	status,2,c
  2155  000E72  5DFA               	subwf	Battery_Filter@x& (0+255),w,b
  2156  000E74  B0D8               	btfsc	status,0,c
  2157  000E76  0012               	return	
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;Battery.c: 42: {
  2161                           ;Battery.c: 43: PrevBattery_Volt[x] = Battery_Volt[x];
  2162                           
  2163                           ; BSR set to: 0
  2164                           
  2165                           ; BSR set to: 0
  2166  000E78  C0FA  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  2167  000E7C  C0FB  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  2168  000E80  0E00               	movlw	0
  2169  000E82  6E22               	movwf	___wmul@multiplicand+1,c
  2170  000E84  0E03               	movlw	3
  2171  000E86  6E21               	movwf	___wmul@multiplicand,c
  2172  000E88  ECA4  F00A         	call	___wmul	;wreg free
  2173  000E8C  0100               	movlb	0	; () banked
  2174  000E8E  0E60               	movlw	low _Battery_Volt
  2175  000E90  241F               	addwf	?___wmul,w,c
  2176  000E92  6ED9               	movwf	fsr2l,c
  2177  000E94  0100               	movlb	0	; () banked
  2178  000E96  0E00               	movlw	high _Battery_Volt
  2179  000E98  2020               	addwfc	?___wmul+1,w,c
  2180  000E9A  6EDA               	movwf	fsr2h,c
  2181  000E9C  C0FA  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  2182  000EA0  C0FB  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  2183  000EA4  0E00               	movlw	0
  2184  000EA6  6E22               	movwf	___wmul@multiplicand+1,c
  2185  000EA8  0E03               	movlw	3
  2186  000EAA  6E21               	movwf	___wmul@multiplicand,c
  2187  000EAC  ECA4  F00A         	call	___wmul	;wreg free
  2188  000EB0  0101               	movlb	1	; () banked
  2189  000EB2  0E00               	movlw	low _PrevBattery_Volt
  2190  000EB4  241F               	addwf	?___wmul,w,c
  2191  000EB6  6EE1               	movwf	fsr1l,c
  2192  000EB8  0101               	movlb	1	; () banked
  2193  000EBA  0E01               	movlw	high _PrevBattery_Volt
  2194  000EBC  2020               	addwfc	?___wmul+1,w,c
  2195  000EBE  6EE2               	movwf	fsr1h,c
  2196  000EC0  CFDE FFE6          	movff	postinc2,postinc1
  2197  000EC4  CFDE FFE6          	movff	postinc2,postinc1
  2198  000EC8  CFDE FFE5          	movff	postinc2,postdec1
  2199  000ECC  52E5               	movf	postdec1,f,c
  2200                           
  2201                           ; BSR set to: 1
  2202  000ECE  0100               	movlb	0	; () banked
  2203  000ED0  4BFA               	infsnz	Battery_Filter@x& (0+255),f,b
  2204  000ED2  2BFB               	incf	(Battery_Filter@x+1)& (0+255),f,b
  2205  000ED4  D7C8               	goto	L5
  2206  000ED6                     __end_of_Battery_Filter:
  2207                           	opt stack 0
  2208                           tblptru	equ	0xFF8
  2209                           prodl	equ	0xFF3
  2210                           intcon	equ	0xFF2
  2211                           intcon2	equ	0xFF1
  2212                           postinc0	equ	0xFEE
  2213                           wreg	equ	0xFE8
  2214                           postinc1	equ	0xFE6
  2215                           postdec1	equ	0xFE5
  2216                           fsr1h	equ	0xFE2
  2217                           fsr1l	equ	0xFE1
  2218                           postinc2	equ	0xFDE
  2219                           postdec2	equ	0xFDD
  2220                           fsr2h	equ	0xFDA
  2221                           fsr2l	equ	0xFD9
  2222                           status	equ	0xFD8
  2223                           
  2224 ;; *************** function ___wmul *****************
  2225 ;; Defined at:
  2226 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;  multiplier      2   30[COMRAM] unsigned int 
  2229 ;;  multiplicand    2   32[COMRAM] unsigned int 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;  product         2   34[COMRAM] unsigned int 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  2   30[COMRAM] unsigned int 
  2234 ;; Registers used:
  2235 ;;		wreg, status,2, status,0, prodl, prodh
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2241 ;;      Params:         4       0       0       0       0       0       0
  2242 ;;      Locals:         2       0       0       0       0       0       0
  2243 ;;      Temps:          0       0       0       0       0       0       0
  2244 ;;      Totals:         6       0       0       0       0       0       0
  2245 ;;Total ram usage:        6 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:    3
  2248 ;; This function calls:
  2249 ;;		Nothing
  2250 ;; This function is called by:
  2251 ;;		_Battery_Fault
  2252 ;;		_Battery_Filter
  2253 ;;		_Battery_Convert
  2254 ;;		_Temp_Fault
  2255 ;;		_Battery_Get
  2256 ;;		_Temp_Filter
  2257 ;;		_Temp_Convert
  2258 ;;		_Tempeture_Get
  2259 ;;		_eval_poly
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text16
  2264  001548                     __ptext16:
  2265                           	opt stack 0
  2266  001548                     ___wmul:
  2267                           	opt stack 26
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;incstack = 0
  2271  001548  501F               	movf	___wmul@multiplier,w,c
  2272  00154A  0221               	mulwf	___wmul@multiplicand,c
  2273  00154C  CFF3 F023          	movff	prodl,___wmul@product
  2274  001550  CFF4 F024          	movff	prodh,___wmul@product+1
  2275  001554  501F               	movf	___wmul@multiplier,w,c
  2276  001556  0222               	mulwf	___wmul@multiplicand+1,c
  2277  001558  50F3               	movf	prodl,w,c
  2278  00155A  2624               	addwf	___wmul@product+1,f,c
  2279  00155C  5020               	movf	___wmul@multiplier+1,w,c
  2280  00155E  0221               	mulwf	___wmul@multiplicand,c
  2281  001560  50F3               	movf	prodl,w,c
  2282  001562  2624               	addwf	___wmul@product+1,f,c
  2283  001564  C023  F01F         	movff	___wmul@product,?___wmul
  2284  001568  C024  F020         	movff	___wmul@product+1,?___wmul+1
  2285  00156C  0012               	return	
  2286  00156E                     __end_of___wmul:
  2287                           	opt stack 0
  2288                           tblptru	equ	0xFF8
  2289                           prodh	equ	0xFF4
  2290                           prodl	equ	0xFF3
  2291                           intcon	equ	0xFF2
  2292                           intcon2	equ	0xFF1
  2293                           postinc0	equ	0xFEE
  2294                           wreg	equ	0xFE8
  2295                           postinc1	equ	0xFE6
  2296                           postdec1	equ	0xFE5
  2297                           fsr1h	equ	0xFE2
  2298                           fsr1l	equ	0xFE1
  2299                           postinc2	equ	0xFDE
  2300                           postdec2	equ	0xFDD
  2301                           fsr2h	equ	0xFDA
  2302                           fsr2l	equ	0xFD9
  2303                           status	equ	0xFD8
  2304                           
  2305 ;; *************** function ___ftmul *****************
  2306 ;; Defined at:
  2307 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;  f1              3   36[COMRAM] float 
  2310 ;;  f2              3   39[COMRAM] float 
  2311 ;; Auto vars:     Size  Location     Type
  2312 ;;  f3_as_produc    3   46[COMRAM] unsigned um
  2313 ;;  sign            1   50[COMRAM] unsigned char 
  2314 ;;  cntr            1   49[COMRAM] unsigned char 
  2315 ;;  exp             1   45[COMRAM] unsigned char 
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  3   36[COMRAM] float 
  2318 ;; Registers used:
  2319 ;;		wreg, status,2, status,0, cstack
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2325 ;;      Params:         6       0       0       0       0       0       0
  2326 ;;      Locals:         6       0       0       0       0       0       0
  2327 ;;      Temps:          3       0       0       0       0       0       0
  2328 ;;      Totals:        15       0       0       0       0       0       0
  2329 ;;Total ram usage:       15 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; Hardware stack levels required when called:    4
  2332 ;; This function calls:
  2333 ;;		___ftpack
  2334 ;; This function is called by:
  2335 ;;		_Battery_Filter
  2336 ;;		_Temp_Filter
  2337 ;;		_Temp_Convert
  2338 ;;		_log
  2339 ;;		_eval_poly
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text17
  2344  000ED6                     __ptext17:
  2345                           	opt stack 0
  2346  000ED6                     ___ftmul:
  2347                           	opt stack 24
  2348                           
  2349                           ;incstack = 0
  2350  000ED6  C027  F02B         	movff	___ftmul@f1+2,??___ftmul
  2351  000EDA  6A2C               	clrf	(??___ftmul+1)& (0+255),c
  2352  000EDC  6A2D               	clrf	(??___ftmul+2)& (0+255),c
  2353  000EDE  3426               	rlcf	___ftmul@f1+1,w,c
  2354  000EE0  362B               	rlcf	??___ftmul& (0+255),f,c
  2355  000EE2  E301               	bnc	u2101
  2356  000EE4  802C               	bsf	(??___ftmul+1)& (0+255),0,c
  2357  000EE6                     u2101:
  2358  000EE6  502B               	movf	??___ftmul,w,c
  2359  000EE8  6E2E               	movwf	___ftmul@exp,c
  2360  000EEA  662E               	tstfsz	___ftmul@exp& (0+255),c
  2361  000EEC  D007               	goto	l2736
  2362  000EEE  0E00               	movlw	0
  2363  000EF0  6E25               	movwf	?___ftmul,c
  2364  000EF2  0E00               	movlw	0
  2365  000EF4  6E26               	movwf	?___ftmul+1,c
  2366  000EF6  0E00               	movlw	0
  2367  000EF8  6E27               	movwf	?___ftmul+2,c
  2368  000EFA  0012               	return	
  2369  000EFC                     l2736:
  2370  000EFC  C02A  F02B         	movff	___ftmul@f2+2,??___ftmul
  2371  000F00  6A2C               	clrf	(??___ftmul+1)& (0+255),c
  2372  000F02  6A2D               	clrf	(??___ftmul+2)& (0+255),c
  2373  000F04  3429               	rlcf	___ftmul@f2+1,w,c
  2374  000F06  362B               	rlcf	??___ftmul& (0+255),f,c
  2375  000F08  E301               	bnc	u2121
  2376  000F0A  802C               	bsf	(??___ftmul+1)& (0+255),0,c
  2377  000F0C                     u2121:
  2378  000F0C  502B               	movf	??___ftmul,w,c
  2379  000F0E  6E33               	movwf	___ftmul@sign,c
  2380  000F10  6633               	tstfsz	___ftmul@sign& (0+255),c
  2381  000F12  D007               	goto	l2742
  2382  000F14  0E00               	movlw	0
  2383  000F16  6E25               	movwf	?___ftmul,c
  2384  000F18  0E00               	movlw	0
  2385  000F1A  6E26               	movwf	?___ftmul+1,c
  2386  000F1C  0E00               	movlw	0
  2387  000F1E  6E27               	movwf	?___ftmul+2,c
  2388  000F20  0012               	return	
  2389  000F22                     l2742:
  2390  000F22  5033               	movf	___ftmul@sign,w,c
  2391  000F24  0F7B               	addlw	123
  2392  000F26  262E               	addwf	___ftmul@exp,f,c
  2393  000F28  C027  F033         	movff	___ftmul@f1+2,___ftmul@sign
  2394  000F2C  502A               	movf	___ftmul@f2+2,w,c
  2395  000F2E  1A33               	xorwf	___ftmul@sign,f,c
  2396  000F30  0E80               	movlw	128
  2397  000F32  1633               	andwf	___ftmul@sign,f,c
  2398  000F34  8E26               	bsf	___ftmul@f1+1,7,c
  2399  000F36  8E29               	bsf	___ftmul@f2+1,7,c
  2400  000F38  0EFF               	movlw	255
  2401  000F3A  1628               	andwf	___ftmul@f2,f,c
  2402  000F3C  0EFF               	movlw	255
  2403  000F3E  1629               	andwf	___ftmul@f2+1,f,c
  2404  000F40  0E00               	movlw	0
  2405  000F42  162A               	andwf	___ftmul@f2+2,f,c
  2406  000F44  0E00               	movlw	0
  2407  000F46  6E2F               	movwf	___ftmul@f3_as_product,c
  2408  000F48  0E00               	movlw	0
  2409  000F4A  6E30               	movwf	___ftmul@f3_as_product+1,c
  2410  000F4C  0E00               	movlw	0
  2411  000F4E  6E31               	movwf	___ftmul@f3_as_product+2,c
  2412  000F50  0E07               	movlw	7
  2413  000F52  6E32               	movwf	___ftmul@cntr,c
  2414  000F54                     l2756:
  2415  000F54  A025               	btfss	___ftmul@f1,0,c
  2416  000F56  D006               	goto	l2760
  2417  000F58  5028               	movf	___ftmul@f2,w,c
  2418  000F5A  262F               	addwf	___ftmul@f3_as_product,f,c
  2419  000F5C  5029               	movf	___ftmul@f2+1,w,c
  2420  000F5E  2230               	addwfc	___ftmul@f3_as_product+1,f,c
  2421  000F60  502A               	movf	___ftmul@f2+2,w,c
  2422  000F62  2231               	addwfc	___ftmul@f3_as_product+2,f,c
  2423  000F64                     l2760:
  2424  000F64  90D8               	bcf	status,0,c
  2425  000F66  3227               	rrcf	___ftmul@f1+2,f,c
  2426  000F68  3226               	rrcf	___ftmul@f1+1,f,c
  2427  000F6A  3225               	rrcf	___ftmul@f1,f,c
  2428  000F6C  90D8               	bcf	status,0,c
  2429  000F6E  3628               	rlcf	___ftmul@f2,f,c
  2430  000F70  3629               	rlcf	___ftmul@f2+1,f,c
  2431  000F72  362A               	rlcf	___ftmul@f2+2,f,c
  2432  000F74  2E32               	decfsz	___ftmul@cntr,f,c
  2433  000F76  D7EE               	goto	l2756
  2434  000F78  0E09               	movlw	9
  2435  000F7A  6E32               	movwf	___ftmul@cntr,c
  2436  000F7C                     l2766:
  2437  000F7C  A025               	btfss	___ftmul@f1,0,c
  2438  000F7E  D006               	goto	l2770
  2439  000F80  5028               	movf	___ftmul@f2,w,c
  2440  000F82  262F               	addwf	___ftmul@f3_as_product,f,c
  2441  000F84  5029               	movf	___ftmul@f2+1,w,c
  2442  000F86  2230               	addwfc	___ftmul@f3_as_product+1,f,c
  2443  000F88  502A               	movf	___ftmul@f2+2,w,c
  2444  000F8A  2231               	addwfc	___ftmul@f3_as_product+2,f,c
  2445  000F8C                     l2770:
  2446  000F8C  90D8               	bcf	status,0,c
  2447  000F8E  3227               	rrcf	___ftmul@f1+2,f,c
  2448  000F90  3226               	rrcf	___ftmul@f1+1,f,c
  2449  000F92  3225               	rrcf	___ftmul@f1,f,c
  2450  000F94  90D8               	bcf	status,0,c
  2451  000F96  3231               	rrcf	___ftmul@f3_as_product+2,f,c
  2452  000F98  3230               	rrcf	___ftmul@f3_as_product+1,f,c
  2453  000F9A  322F               	rrcf	___ftmul@f3_as_product,f,c
  2454  000F9C  2E32               	decfsz	___ftmul@cntr,f,c
  2455  000F9E  D7EE               	goto	l2766
  2456  000FA0  C02F  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  2457  000FA4  C030  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2458  000FA8  C031  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2459  000FAC  C02E  F01A         	movff	___ftmul@exp,___ftpack@exp
  2460  000FB0  C033  F01B         	movff	___ftmul@sign,___ftpack@sign
  2461  000FB4  ECA6  F008         	call	___ftpack	;wreg free
  2462  000FB8  C017  F025         	movff	?___ftpack,?___ftmul
  2463  000FBC  C018  F026         	movff	?___ftpack+1,?___ftmul+1
  2464  000FC0  C019  F027         	movff	?___ftpack+2,?___ftmul+2
  2465  000FC4  0012               	return	
  2466  000FC6                     __end_of___ftmul:
  2467                           	opt stack 0
  2468                           tblptru	equ	0xFF8
  2469                           prodh	equ	0xFF4
  2470                           prodl	equ	0xFF3
  2471                           intcon	equ	0xFF2
  2472                           intcon2	equ	0xFF1
  2473                           postinc0	equ	0xFEE
  2474                           wreg	equ	0xFE8
  2475                           postinc1	equ	0xFE6
  2476                           postdec1	equ	0xFE5
  2477                           fsr1h	equ	0xFE2
  2478                           fsr1l	equ	0xFE1
  2479                           postinc2	equ	0xFDE
  2480                           postdec2	equ	0xFDD
  2481                           fsr2h	equ	0xFDA
  2482                           fsr2l	equ	0xFD9
  2483                           status	equ	0xFD8
  2484                           
  2485 ;; *************** function ___ftadd *****************
  2486 ;; Defined at:
  2487 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;  f1              3    0[BANK0 ] float 
  2490 ;;  f2              3    3[BANK0 ] float 
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;  exp1            1   11[BANK0 ] unsigned char 
  2493 ;;  exp2            1   10[BANK0 ] unsigned char 
  2494 ;;  sign            1    9[BANK0 ] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  3    0[BANK0 ] float 
  2497 ;; Registers used:
  2498 ;;		wreg, status,2, status,0, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2504 ;;      Params:         0       6       0       0       0       0       0
  2505 ;;      Locals:         0       3       0       0       0       0       0
  2506 ;;      Temps:          0       3       0       0       0       0       0
  2507 ;;      Totals:         0      12       0       0       0       0       0
  2508 ;;Total ram usage:       12 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    4
  2511 ;; This function calls:
  2512 ;;		___ftpack
  2513 ;; This function is called by:
  2514 ;;		_Battery_Filter
  2515 ;;		_Battery_Convert
  2516 ;;		_Temp_Filter
  2517 ;;		_Temp_Convert
  2518 ;;		_log
  2519 ;;		_eval_poly
  2520 ;;		___ftsub
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text18
  2525  000AE6                     __ptext18:
  2526                           	opt stack 0
  2527  000AE6                     ___ftadd:
  2528                           	opt stack 25
  2529                           
  2530                           ;incstack = 0
  2531  000AE6  0100               	movlb	0	; () banked
  2532  000AE8  C0F0  F0F4         	movff	___ftadd@f1+2,??___ftadd
  2533  000AEC  0100               	movlb	0	; () banked
  2534  000AEE  6BF5               	clrf	(??___ftadd+1)& (0+255),b
  2535  000AF0  6BF6               	clrf	(??___ftadd+2)& (0+255),b
  2536  000AF2  0100               	movlb	0	; () banked
  2537  000AF4  35EF               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  2538  000AF6  0100               	movlb	0	; () banked
  2539  000AF8  37F4               	rlcf	??___ftadd& (0+255),f,b
  2540  000AFA  E301               	bnc	u1891
  2541  000AFC  81F5               	bsf	(??___ftadd+1)& (0+255),0,b
  2542  000AFE                     u1891:
  2543  000AFE  0100               	movlb	0	; () banked
  2544  000B00  51F4               	movf	??___ftadd& (0+255),w,b
  2545  000B02  0100               	movlb	0	; () banked
  2546  000B04  6FF9               	movwf	___ftadd@exp1& (0+255),b
  2547  000B06  0100               	movlb	0	; () banked
  2548  000B08  C0F3  F0F4         	movff	___ftadd@f2+2,??___ftadd
  2549  000B0C  0100               	movlb	0	; () banked
  2550  000B0E  6BF5               	clrf	(??___ftadd+1)& (0+255),b
  2551  000B10  6BF6               	clrf	(??___ftadd+2)& (0+255),b
  2552  000B12  0100               	movlb	0	; () banked
  2553  000B14  35F2               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  2554  000B16  0100               	movlb	0	; () banked
  2555  000B18  37F4               	rlcf	??___ftadd& (0+255),f,b
  2556  000B1A  E301               	bnc	u1901
  2557  000B1C  81F5               	bsf	(??___ftadd+1)& (0+255),0,b
  2558  000B1E                     u1901:
  2559  000B1E  0100               	movlb	0	; () banked
  2560  000B20  51F4               	movf	??___ftadd& (0+255),w,b
  2561  000B22  0100               	movlb	0	; () banked
  2562  000B24  6FF8               	movwf	___ftadd@exp2& (0+255),b
  2563                           
  2564                           ; BSR set to: 0
  2565  000B26  0100               	movlb	0	; () banked
  2566  000B28  51F9               	movf	___ftadd@exp1& (0+255),w,b
  2567  000B2A  B4D8               	btfsc	status,2,c
  2568  000B2C  D012               	goto	l784
  2569                           
  2570                           ; BSR set to: 0
  2571  000B2E  0100               	movlb	0	; () banked
  2572  000B30  51F8               	movf	___ftadd@exp2& (0+255),w,b
  2573  000B32  0100               	movlb	0	; () banked
  2574  000B34  5DF9               	subwf	___ftadd@exp1& (0+255),w,b
  2575  000B36  B0D8               	btfsc	status,0,c
  2576  000B38  D013               	goto	l2668
  2577                           
  2578                           ; BSR set to: 0
  2579  000B3A  0100               	movlb	0	; () banked
  2580  000B3C  51F9               	movf	___ftadd@exp1& (0+255),w,b
  2581  000B3E  0800               	sublw	0
  2582  000B40  0100               	movlb	0	; () banked
  2583  000B42  25F8               	addwf	___ftadd@exp2& (0+255),w,b
  2584  000B44  0100               	movlb	0	; () banked
  2585  000B46  6FF4               	movwf	??___ftadd& (0+255),b
  2586  000B48  0E19               	movlw	25
  2587  000B4A  0100               	movlb	0	; () banked
  2588  000B4C  5DF4               	subwf	??___ftadd& (0+255),w,b
  2589  000B4E  A0D8               	btfss	status,0,c
  2590  000B50  D007               	goto	l2668
  2591  000B52                     l784:
  2592                           
  2593                           ; BSR set to: 0
  2594  000B52  C0F1  F0EE         	movff	___ftadd@f2,?___ftadd
  2595  000B56  C0F2  F0EF         	movff	___ftadd@f2+1,?___ftadd+1
  2596  000B5A  C0F3  F0F0         	movff	___ftadd@f2+2,?___ftadd+2
  2597  000B5E  0012               	return	
  2598  000B60                     l2668:
  2599                           
  2600                           ; BSR set to: 0
  2601  000B60  0100               	movlb	0	; () banked
  2602  000B62  51F8               	movf	___ftadd@exp2& (0+255),w,b
  2603  000B64  B4D8               	btfsc	status,2,c
  2604  000B66  D012               	goto	l788
  2605                           
  2606                           ; BSR set to: 0
  2607  000B68  0100               	movlb	0	; () banked
  2608  000B6A  51F9               	movf	___ftadd@exp1& (0+255),w,b
  2609  000B6C  0100               	movlb	0	; () banked
  2610  000B6E  5DF8               	subwf	___ftadd@exp2& (0+255),w,b
  2611  000B70  B0D8               	btfsc	status,0,c
  2612  000B72  D013               	goto	l2674
  2613                           
  2614                           ; BSR set to: 0
  2615  000B74  0100               	movlb	0	; () banked
  2616  000B76  51F8               	movf	___ftadd@exp2& (0+255),w,b
  2617  000B78  0800               	sublw	0
  2618  000B7A  0100               	movlb	0	; () banked
  2619  000B7C  25F9               	addwf	___ftadd@exp1& (0+255),w,b
  2620  000B7E  0100               	movlb	0	; () banked
  2621  000B80  6FF4               	movwf	??___ftadd& (0+255),b
  2622  000B82  0E19               	movlw	25
  2623  000B84  0100               	movlb	0	; () banked
  2624  000B86  5DF4               	subwf	??___ftadd& (0+255),w,b
  2625  000B88  A0D8               	btfss	status,0,c
  2626  000B8A  D007               	goto	l2674
  2627  000B8C                     l788:
  2628                           
  2629                           ; BSR set to: 0
  2630  000B8C  C0EE  F0EE         	movff	___ftadd@f1,?___ftadd
  2631  000B90  C0EF  F0EF         	movff	___ftadd@f1+1,?___ftadd+1
  2632  000B94  C0F0  F0F0         	movff	___ftadd@f1+2,?___ftadd+2
  2633  000B98  0012               	return	
  2634  000B9A                     l2674:
  2635                           
  2636                           ; BSR set to: 0
  2637  000B9A  0E06               	movlw	6
  2638  000B9C  0100               	movlb	0	; () banked
  2639  000B9E  6FF7               	movwf	___ftadd@sign& (0+255),b
  2640                           
  2641                           ; BSR set to: 0
  2642  000BA0  0100               	movlb	0	; () banked
  2643  000BA2  AFF0               	btfss	(___ftadd@f1+2)& (0+255),7,b
  2644  000BA4  D002               	goto	l2680
  2645                           
  2646                           ; BSR set to: 0
  2647  000BA6  0100               	movlb	0	; () banked
  2648  000BA8  8FF7               	bsf	___ftadd@sign& (0+255),7,b
  2649  000BAA                     l2680:
  2650                           
  2651                           ; BSR set to: 0
  2652  000BAA  0100               	movlb	0	; () banked
  2653  000BAC  AFF3               	btfss	(___ftadd@f2+2)& (0+255),7,b
  2654  000BAE  D002               	goto	l790
  2655                           
  2656                           ; BSR set to: 0
  2657  000BB0  0100               	movlb	0	; () banked
  2658  000BB2  8DF7               	bsf	___ftadd@sign& (0+255),6,b
  2659  000BB4                     l790:
  2660                           
  2661                           ; BSR set to: 0
  2662  000BB4  0100               	movlb	0	; () banked
  2663  000BB6  8FEF               	bsf	(___ftadd@f1+1)& (0+255),7,b
  2664                           
  2665                           ; BSR set to: 0
  2666  000BB8  0EFF               	movlw	255
  2667  000BBA  0100               	movlb	0	; () banked
  2668  000BBC  17EE               	andwf	___ftadd@f1& (0+255),f,b
  2669  000BBE  0EFF               	movlw	255
  2670  000BC0  0100               	movlb	0	; () banked
  2671  000BC2  17EF               	andwf	(___ftadd@f1+1)& (0+255),f,b
  2672  000BC4  0E00               	movlw	0
  2673  000BC6  0100               	movlb	0	; () banked
  2674  000BC8  17F0               	andwf	(___ftadd@f1+2)& (0+255),f,b
  2675  000BCA  0100               	movlb	0	; () banked
  2676  000BCC  8FF2               	bsf	(___ftadd@f2+1)& (0+255),7,b
  2677                           
  2678                           ; BSR set to: 0
  2679  000BCE  0EFF               	movlw	255
  2680  000BD0  0100               	movlb	0	; () banked
  2681  000BD2  17F1               	andwf	___ftadd@f2& (0+255),f,b
  2682  000BD4  0EFF               	movlw	255
  2683  000BD6  0100               	movlb	0	; () banked
  2684  000BD8  17F2               	andwf	(___ftadd@f2+1)& (0+255),f,b
  2685  000BDA  0E00               	movlw	0
  2686  000BDC  0100               	movlb	0	; () banked
  2687  000BDE  17F3               	andwf	(___ftadd@f2+2)& (0+255),f,b
  2688                           
  2689                           ; BSR set to: 0
  2690  000BE0  0100               	movlb	0	; () banked
  2691  000BE2  51F8               	movf	___ftadd@exp2& (0+255),w,b
  2692  000BE4  0100               	movlb	0	; () banked
  2693  000BE6  5DF9               	subwf	___ftadd@exp1& (0+255),w,b
  2694  000BE8  B0D8               	btfsc	status,0,c
  2695  000BEA  D02A               	goto	l2700
  2696  000BEC                     l2690:
  2697                           
  2698                           ; BSR set to: 0
  2699  000BEC  0100               	movlb	0	; () banked
  2700  000BEE  90D8               	bcf	status,0,c
  2701  000BF0  0100               	movlb	0	; () banked
  2702  000BF2  37F1               	rlcf	___ftadd@f2& (0+255),f,b
  2703  000BF4  0100               	movlb	0	; () banked
  2704  000BF6  37F2               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  2705  000BF8  0100               	movlb	0	; () banked
  2706  000BFA  37F3               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  2707  000BFC  0100               	movlb	0	; () banked
  2708  000BFE  07F8               	decf	___ftadd@exp2& (0+255),f,b
  2709                           
  2710                           ; BSR set to: 0
  2711  000C00  0100               	movlb	0	; () banked
  2712  000C02  51F8               	movf	___ftadd@exp2& (0+255),w,b
  2713  000C04  0100               	movlb	0	; () banked
  2714  000C06  19F9               	xorwf	___ftadd@exp1& (0+255),w,b
  2715  000C08  B4D8               	btfsc	status,2,c
  2716  000C0A  D014               	goto	l2698
  2717                           
  2718                           ; BSR set to: 0
  2719  000C0C  0100               	movlb	0	; () banked
  2720  000C0E  07F7               	decf	___ftadd@sign& (0+255),f,b
  2721  000C10  C0F7  F0F4         	movff	___ftadd@sign,??___ftadd
  2722  000C14  0E07               	movlw	7
  2723  000C16  0100               	movlb	0	; () banked
  2724  000C18  17F4               	andwf	??___ftadd& (0+255),f,b
  2725  000C1A  B4D8               	btfsc	status,2,c
  2726  000C1C  D00B               	goto	l2698
  2727  000C1E  D7E6               	goto	l2690
  2728  000C20                     l2696:
  2729                           
  2730                           ; BSR set to: 0
  2731  000C20  0100               	movlb	0	; () banked
  2732  000C22  90D8               	bcf	status,0,c
  2733  000C24  0100               	movlb	0	; () banked
  2734  000C26  33F0               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  2735  000C28  0100               	movlb	0	; () banked
  2736  000C2A  33EF               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  2737  000C2C  0100               	movlb	0	; () banked
  2738  000C2E  33EE               	rrcf	___ftadd@f1& (0+255),f,b
  2739  000C30  0100               	movlb	0	; () banked
  2740  000C32  2BF9               	incf	___ftadd@exp1& (0+255),f,b
  2741  000C34                     l2698:
  2742                           
  2743                           ; BSR set to: 0
  2744  000C34  0100               	movlb	0	; () banked
  2745  000C36  51F8               	movf	___ftadd@exp2& (0+255),w,b
  2746  000C38  0100               	movlb	0	; () banked
  2747  000C3A  63F9               	cpfseq	___ftadd@exp1& (0+255),b
  2748  000C3C  D7F1               	goto	l2696
  2749  000C3E  D02F               	goto	l799
  2750  000C40                     l2700:
  2751                           
  2752                           ; BSR set to: 0
  2753  000C40  0100               	movlb	0	; () banked
  2754  000C42  51F9               	movf	___ftadd@exp1& (0+255),w,b
  2755  000C44  0100               	movlb	0	; () banked
  2756  000C46  5DF8               	subwf	___ftadd@exp2& (0+255),w,b
  2757  000C48  B0D8               	btfsc	status,0,c
  2758  000C4A  D029               	goto	l799
  2759  000C4C                     l2702:
  2760                           
  2761                           ; BSR set to: 0
  2762  000C4C  0100               	movlb	0	; () banked
  2763  000C4E  90D8               	bcf	status,0,c
  2764  000C50  0100               	movlb	0	; () banked
  2765  000C52  37EE               	rlcf	___ftadd@f1& (0+255),f,b
  2766  000C54  0100               	movlb	0	; () banked
  2767  000C56  37EF               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  2768  000C58  0100               	movlb	0	; () banked
  2769  000C5A  37F0               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  2770  000C5C  0100               	movlb	0	; () banked
  2771  000C5E  07F9               	decf	___ftadd@exp1& (0+255),f,b
  2772                           
  2773                           ; BSR set to: 0
  2774  000C60  0100               	movlb	0	; () banked
  2775  000C62  51F8               	movf	___ftadd@exp2& (0+255),w,b
  2776  000C64  0100               	movlb	0	; () banked
  2777  000C66  19F9               	xorwf	___ftadd@exp1& (0+255),w,b
  2778  000C68  B4D8               	btfsc	status,2,c
  2779  000C6A  D014               	goto	l2710
  2780                           
  2781                           ; BSR set to: 0
  2782  000C6C  0100               	movlb	0	; () banked
  2783  000C6E  07F7               	decf	___ftadd@sign& (0+255),f,b
  2784  000C70  C0F7  F0F4         	movff	___ftadd@sign,??___ftadd
  2785  000C74  0E07               	movlw	7
  2786  000C76  0100               	movlb	0	; () banked
  2787  000C78  17F4               	andwf	??___ftadd& (0+255),f,b
  2788  000C7A  B4D8               	btfsc	status,2,c
  2789  000C7C  D00B               	goto	l2710
  2790  000C7E  D7E6               	goto	l2702
  2791  000C80                     l2708:
  2792                           
  2793                           ; BSR set to: 0
  2794  000C80  0100               	movlb	0	; () banked
  2795  000C82  90D8               	bcf	status,0,c
  2796  000C84  0100               	movlb	0	; () banked
  2797  000C86  33F3               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  2798  000C88  0100               	movlb	0	; () banked
  2799  000C8A  33F2               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  2800  000C8C  0100               	movlb	0	; () banked
  2801  000C8E  33F1               	rrcf	___ftadd@f2& (0+255),f,b
  2802  000C90  0100               	movlb	0	; () banked
  2803  000C92  2BF8               	incf	___ftadd@exp2& (0+255),f,b
  2804  000C94                     l2710:
  2805                           
  2806                           ; BSR set to: 0
  2807  000C94  0100               	movlb	0	; () banked
  2808  000C96  51F8               	movf	___ftadd@exp2& (0+255),w,b
  2809  000C98  0100               	movlb	0	; () banked
  2810  000C9A  63F9               	cpfseq	___ftadd@exp1& (0+255),b
  2811  000C9C  D7F1               	goto	l2708
  2812  000C9E                     l799:
  2813                           
  2814                           ; BSR set to: 0
  2815  000C9E  0100               	movlb	0	; () banked
  2816  000CA0  AFF7               	btfss	___ftadd@sign& (0+255),7,b
  2817  000CA2  D012               	goto	l808
  2818                           
  2819                           ; BSR set to: 0
  2820  000CA4  0EFF               	movlw	255
  2821  000CA6  0100               	movlb	0	; () banked
  2822  000CA8  1BEE               	xorwf	___ftadd@f1& (0+255),f,b
  2823  000CAA  0EFF               	movlw	255
  2824  000CAC  0100               	movlb	0	; () banked
  2825  000CAE  1BEF               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  2826  000CB0  0EFF               	movlw	255
  2827  000CB2  0100               	movlb	0	; () banked
  2828  000CB4  1BF0               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  2829  000CB6  0E01               	movlw	1
  2830  000CB8  0100               	movlb	0	; () banked
  2831  000CBA  27EE               	addwf	___ftadd@f1& (0+255),f,b
  2832  000CBC  0E00               	movlw	0
  2833  000CBE  0100               	movlb	0	; () banked
  2834  000CC0  23EF               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  2835  000CC2  0E00               	movlw	0
  2836  000CC4  0100               	movlb	0	; () banked
  2837  000CC6  23F0               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  2838  000CC8                     l808:
  2839                           
  2840                           ; BSR set to: 0
  2841  000CC8  0100               	movlb	0	; () banked
  2842  000CCA  ADF7               	btfss	___ftadd@sign& (0+255),6,b
  2843  000CCC  D012               	goto	l2716
  2844                           
  2845                           ; BSR set to: 0
  2846  000CCE  0EFF               	movlw	255
  2847  000CD0  0100               	movlb	0	; () banked
  2848  000CD2  1BF1               	xorwf	___ftadd@f2& (0+255),f,b
  2849  000CD4  0EFF               	movlw	255
  2850  000CD6  0100               	movlb	0	; () banked
  2851  000CD8  1BF2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2852  000CDA  0EFF               	movlw	255
  2853  000CDC  0100               	movlb	0	; () banked
  2854  000CDE  1BF3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2855  000CE0  0E01               	movlw	1
  2856  000CE2  0100               	movlb	0	; () banked
  2857  000CE4  27F1               	addwf	___ftadd@f2& (0+255),f,b
  2858  000CE6  0E00               	movlw	0
  2859  000CE8  0100               	movlb	0	; () banked
  2860  000CEA  23F2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2861  000CEC  0E00               	movlw	0
  2862  000CEE  0100               	movlb	0	; () banked
  2863  000CF0  23F3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2864  000CF2                     l2716:
  2865                           
  2866                           ; BSR set to: 0
  2867  000CF2  0E00               	movlw	0
  2868  000CF4  0100               	movlb	0	; () banked
  2869  000CF6  6FF7               	movwf	___ftadd@sign& (0+255),b
  2870                           
  2871                           ; BSR set to: 0
  2872  000CF8  0100               	movlb	0	; () banked
  2873  000CFA  51EE               	movf	___ftadd@f1& (0+255),w,b
  2874  000CFC  0100               	movlb	0	; () banked
  2875  000CFE  27F1               	addwf	___ftadd@f2& (0+255),f,b
  2876  000D00  0100               	movlb	0	; () banked
  2877  000D02  51EF               	movf	(___ftadd@f1+1)& (0+255),w,b
  2878  000D04  0100               	movlb	0	; () banked
  2879  000D06  23F2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2880  000D08  0100               	movlb	0	; () banked
  2881  000D0A  51F0               	movf	(___ftadd@f1+2)& (0+255),w,b
  2882  000D0C  0100               	movlb	0	; () banked
  2883  000D0E  23F3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2884                           
  2885                           ; BSR set to: 0
  2886  000D10  0100               	movlb	0	; () banked
  2887  000D12  AFF3               	btfss	(___ftadd@f2+2)& (0+255),7,b
  2888  000D14  D015               	goto	l2726
  2889                           
  2890                           ; BSR set to: 0
  2891  000D16  0EFF               	movlw	255
  2892  000D18  0100               	movlb	0	; () banked
  2893  000D1A  1BF1               	xorwf	___ftadd@f2& (0+255),f,b
  2894  000D1C  0EFF               	movlw	255
  2895  000D1E  0100               	movlb	0	; () banked
  2896  000D20  1BF2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2897  000D22  0EFF               	movlw	255
  2898  000D24  0100               	movlb	0	; () banked
  2899  000D26  1BF3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2900  000D28  0E01               	movlw	1
  2901  000D2A  0100               	movlb	0	; () banked
  2902  000D2C  27F1               	addwf	___ftadd@f2& (0+255),f,b
  2903  000D2E  0E00               	movlw	0
  2904  000D30  0100               	movlb	0	; () banked
  2905  000D32  23F2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2906  000D34  0E00               	movlw	0
  2907  000D36  0100               	movlb	0	; () banked
  2908  000D38  23F3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2909                           
  2910                           ; BSR set to: 0
  2911  000D3A  0E01               	movlw	1
  2912  000D3C  0100               	movlb	0	; () banked
  2913  000D3E  6FF7               	movwf	___ftadd@sign& (0+255),b
  2914  000D40                     l2726:
  2915                           
  2916                           ; BSR set to: 0
  2917  000D40  C0F1  F017         	movff	___ftadd@f2,___ftpack@arg
  2918  000D44  C0F2  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  2919  000D48  C0F3  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  2920  000D4C  C0F9  F01A         	movff	___ftadd@exp1,___ftpack@exp
  2921  000D50  C0F7  F01B         	movff	___ftadd@sign,___ftpack@sign
  2922  000D54  ECA6  F008         	call	___ftpack	;wreg free
  2923  000D58  C017  F0EE         	movff	?___ftpack,?___ftadd
  2924  000D5C  C018  F0EF         	movff	?___ftpack+1,?___ftadd+1
  2925  000D60  C019  F0F0         	movff	?___ftpack+2,?___ftadd+2
  2926  000D64  0012               	return	
  2927  000D66                     __end_of___ftadd:
  2928                           	opt stack 0
  2929                           tblptru	equ	0xFF8
  2930                           prodh	equ	0xFF4
  2931                           prodl	equ	0xFF3
  2932                           intcon	equ	0xFF2
  2933                           intcon2	equ	0xFF1
  2934                           postinc0	equ	0xFEE
  2935                           wreg	equ	0xFE8
  2936                           postinc1	equ	0xFE6
  2937                           postdec1	equ	0xFE5
  2938                           fsr1h	equ	0xFE2
  2939                           fsr1l	equ	0xFE1
  2940                           postinc2	equ	0xFDE
  2941                           postdec2	equ	0xFDD
  2942                           fsr2h	equ	0xFDA
  2943                           fsr2l	equ	0xFD9
  2944                           status	equ	0xFD8
  2945                           
  2946 ;; *************** function ___ftpack *****************
  2947 ;; Defined at:
  2948 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  arg             3   22[COMRAM] unsigned um
  2951 ;;  exp             1   25[COMRAM] unsigned char 
  2952 ;;  sign            1   26[COMRAM] unsigned char 
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;		None
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  3   22[COMRAM] float 
  2957 ;; Registers used:
  2958 ;;		wreg, status,2, status,0
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2964 ;;      Params:         5       0       0       0       0       0       0
  2965 ;;      Locals:         0       0       0       0       0       0       0
  2966 ;;      Temps:          3       0       0       0       0       0       0
  2967 ;;      Totals:         8       0       0       0       0       0       0
  2968 ;;Total ram usage:        8 bytes
  2969 ;; Hardware stack levels used:    1
  2970 ;; Hardware stack levels required when called:    3
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		___awtoft
  2975 ;;		___ftadd
  2976 ;;		___ftmul
  2977 ;;		___ftdiv
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text19
  2982  00114C                     __ptext19:
  2983                           	opt stack 0
  2984  00114C                     ___ftpack:
  2985                           	opt stack 25
  2986                           
  2987                           ;incstack = 0
  2988  00114C  501A               	movf	___ftpack@exp,w,c
  2989  00114E  B4D8               	btfsc	status,2,c
  2990  001150  D005               	goto	l2624
  2991  001152  5017               	movf	___ftpack@arg,w,c
  2992  001154  1018               	iorwf	___ftpack@arg+1,w,c
  2993  001156  1019               	iorwf	___ftpack@arg+2,w,c
  2994  001158  A4D8               	btfss	status,2,c
  2995  00115A  D00C               	goto	l2630
  2996  00115C                     l2624:
  2997  00115C  0E00               	movlw	0
  2998  00115E  6E17               	movwf	?___ftpack,c
  2999  001160  0E00               	movlw	0
  3000  001162  6E18               	movwf	?___ftpack+1,c
  3001  001164  0E00               	movlw	0
  3002  001166  6E19               	movwf	?___ftpack+2,c
  3003  001168  0012               	return	
  3004  00116A                     l2628:
  3005  00116A  2A1A               	incf	___ftpack@exp,f,c
  3006  00116C  90D8               	bcf	status,0,c
  3007  00116E  3219               	rrcf	___ftpack@arg+2,f,c
  3008  001170  3218               	rrcf	___ftpack@arg+1,f,c
  3009  001172  3217               	rrcf	___ftpack@arg,f,c
  3010  001174                     l2630:
  3011  001174  0E00               	movlw	0
  3012  001176  1417               	andwf	___ftpack@arg,w,c
  3013  001178  6E1C               	movwf	??___ftpack& (0+255),c
  3014  00117A  0E00               	movlw	0
  3015  00117C  1418               	andwf	___ftpack@arg+1,w,c
  3016  00117E  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  3017  001180  0EFE               	movlw	254
  3018  001182  1419               	andwf	___ftpack@arg+2,w,c
  3019  001184  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  3020  001186  501C               	movf	??___ftpack,w,c
  3021  001188  101D               	iorwf	??___ftpack+1,w,c
  3022  00118A  101E               	iorwf	??___ftpack+2,w,c
  3023  00118C  B4D8               	btfsc	status,2,c
  3024  00118E  D00C               	goto	l2636
  3025  001190  D7EC               	goto	l2628
  3026  001192                     l2632:
  3027  001192  2A1A               	incf	___ftpack@exp,f,c
  3028  001194  0E01               	movlw	1
  3029  001196  2617               	addwf	___ftpack@arg,f,c
  3030  001198  0E00               	movlw	0
  3031  00119A  2218               	addwfc	___ftpack@arg+1,f,c
  3032  00119C  0E00               	movlw	0
  3033  00119E  2219               	addwfc	___ftpack@arg+2,f,c
  3034  0011A0  90D8               	bcf	status,0,c
  3035  0011A2  3219               	rrcf	___ftpack@arg+2,f,c
  3036  0011A4  3218               	rrcf	___ftpack@arg+1,f,c
  3037  0011A6  3217               	rrcf	___ftpack@arg,f,c
  3038  0011A8                     l2636:
  3039  0011A8  0E00               	movlw	0
  3040  0011AA  1417               	andwf	___ftpack@arg,w,c
  3041  0011AC  6E1C               	movwf	??___ftpack& (0+255),c
  3042  0011AE  0E00               	movlw	0
  3043  0011B0  1418               	andwf	___ftpack@arg+1,w,c
  3044  0011B2  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  3045  0011B4  0EFF               	movlw	255
  3046  0011B6  1419               	andwf	___ftpack@arg+2,w,c
  3047  0011B8  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  3048  0011BA  501C               	movf	??___ftpack,w,c
  3049  0011BC  101D               	iorwf	??___ftpack+1,w,c
  3050  0011BE  101E               	iorwf	??___ftpack+2,w,c
  3051  0011C0  B4D8               	btfsc	status,2,c
  3052  0011C2  D006               	goto	l2640
  3053  0011C4  D7E6               	goto	l2632
  3054  0011C6                     l2638:
  3055  0011C6  061A               	decf	___ftpack@exp,f,c
  3056  0011C8  90D8               	bcf	status,0,c
  3057  0011CA  3617               	rlcf	___ftpack@arg,f,c
  3058  0011CC  3618               	rlcf	___ftpack@arg+1,f,c
  3059  0011CE  3619               	rlcf	___ftpack@arg+2,f,c
  3060  0011D0                     l2640:
  3061  0011D0  AE18               	btfss	___ftpack@arg+1,7,c
  3062  0011D2  D7F9               	goto	l2638
  3063  0011D4  A01A               	btfss	___ftpack@exp,0,c
  3064  0011D6  9E18               	bcf	___ftpack@arg+1,7,c
  3065  0011D8  90D8               	bcf	status,0,c
  3066  0011DA  321A               	rrcf	___ftpack@exp,f,c
  3067  0011DC  501A               	movf	___ftpack@exp,w,c
  3068  0011DE  1219               	iorwf	___ftpack@arg+2,f,c
  3069  0011E0  501B               	movf	___ftpack@sign,w,c
  3070  0011E2  A4D8               	btfss	status,2,c
  3071  0011E4  8E19               	bsf	___ftpack@arg+2,7,c
  3072  0011E6  C017  F017         	movff	___ftpack@arg,?___ftpack
  3073  0011EA  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  3074  0011EE  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  3075  0011F2  0012               	return	
  3076  0011F4                     __end_of___ftpack:
  3077                           	opt stack 0
  3078                           tblptru	equ	0xFF8
  3079                           prodh	equ	0xFF4
  3080                           prodl	equ	0xFF3
  3081                           intcon	equ	0xFF2
  3082                           intcon2	equ	0xFF1
  3083                           postinc0	equ	0xFEE
  3084                           wreg	equ	0xFE8
  3085                           postinc1	equ	0xFE6
  3086                           postdec1	equ	0xFE5
  3087                           fsr1h	equ	0xFE2
  3088                           fsr1l	equ	0xFE1
  3089                           postinc2	equ	0xFDE
  3090                           postdec2	equ	0xFDD
  3091                           fsr2h	equ	0xFDA
  3092                           fsr2l	equ	0xFD9
  3093                           status	equ	0xFD8
  3094                           
  3095 ;; *************** function _INTERRUPT_InterruptManager *****************
  3096 ;; Defined at:
  3097 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;		None
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;		None
  3102 ;; Return value:  Size  Location     Type
  3103 ;;		None               void
  3104 ;; Registers used:
  3105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3106 ;; Tracked objects:
  3107 ;;		On entry : 0/0
  3108 ;;		On exit  : 0/0
  3109 ;;		Unchanged: 0/0
  3110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3111 ;;      Params:         0       0       0       0       0       0       0
  3112 ;;      Locals:         0       0       0       0       0       0       0
  3113 ;;      Temps:         14       0       0       0       0       0       0
  3114 ;;      Totals:        14       0       0       0       0       0       0
  3115 ;;Total ram usage:       14 bytes
  3116 ;; Hardware stack levels used:    1
  3117 ;; Hardware stack levels required when called:    2
  3118 ;; This function calls:
  3119 ;;		_ADC_ISR
  3120 ;;		_EUSART1_Receive_ISR
  3121 ;;		_EUSART1_Transmit_ISR
  3122 ;;		_TMR1_ISR
  3123 ;; This function is called by:
  3124 ;;		Interrupt level 2
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           	psect	intcode
  3129  000008                     __pintcode:
  3130                           	opt stack 0
  3131  000008                     _INTERRUPT_InterruptManager:
  3132                           	opt stack 24
  3133                           
  3134                           ;incstack = 0
  3135  000008  CFFA F009          	movff	pclath,??_INTERRUPT_InterruptManager
  3136  00000C  CFFB F00A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  3137  000010  CFE9 F00B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  3138  000014  CFEA F00C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  3139  000018  CFE1 F00D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  3140  00001C  CFE2 F00E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  3141  000020  CFD9 F00F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  3142  000024  CFDA F010          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  3143  000028  CFF3 F011          	movff	prodl,??_INTERRUPT_InterruptManager+8
  3144  00002C  CFF4 F012          	movff	prodh,??_INTERRUPT_InterruptManager+9
  3145  000030  CFF6 F013          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  3146  000034  CFF7 F014          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  3147  000038  CFF8 F015          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  3148  00003C  CFF5 F016          	movff	tablat,??_INTERRUPT_InterruptManager+13
  3149                           
  3150                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  3151  000040  BA9D               	btfsc	3997,5,c	;volatile
  3152  000042  AA9E               	btfss	3998,5,c	;volatile
  3153  000044  D003               	goto	i2l270
  3154                           
  3155                           ;interrupt_manager.c: 73: {
  3156                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
  3157  000046  EC4A  F00A         	call	_EUSART1_Receive_ISR	;wreg free
  3158                           
  3159                           ;interrupt_manager.c: 75: }
  3160  00004A  D011               	goto	i2l278
  3161  00004C                     i2l270:
  3162                           
  3163                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  3164  00004C  BC9D               	btfsc	3997,6,c	;volatile
  3165  00004E  AC9E               	btfss	3998,6,c	;volatile
  3166  000050  D003               	goto	i2l272
  3167                           
  3168                           ;interrupt_manager.c: 77: {
  3169                           ;interrupt_manager.c: 78: ADC_ISR();
  3170  000052  EC0F  F003         	call	_ADC_ISR	;wreg free
  3171                           
  3172                           ;interrupt_manager.c: 79: }
  3173  000056  D00B               	goto	i2l278
  3174  000058                     i2l272:
  3175                           
  3176                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  3177  000058  B09D               	btfsc	3997,0,c	;volatile
  3178  00005A  A09E               	btfss	3998,0,c	;volatile
  3179  00005C  D003               	goto	i2l274
  3180                           
  3181                           ;interrupt_manager.c: 81: {
  3182                           ;interrupt_manager.c: 82: TMR1_ISR();
  3183  00005E  ECD5  F00A         	call	_TMR1_ISR	;wreg free
  3184                           
  3185                           ;interrupt_manager.c: 83: }
  3186  000062  D005               	goto	i2l278
  3187  000064                     i2l274:
  3188                           
  3189                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  3190  000064  B89D               	btfsc	3997,4,c	;volatile
  3191  000066  A89E               	btfss	3998,4,c	;volatile
  3192  000068  D002               	goto	i2l278
  3193                           
  3194                           ;interrupt_manager.c: 85: {
  3195                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
  3196  00006A  EC32  F00A         	call	_EUSART1_Transmit_ISR	;wreg free
  3197  00006E                     i2l278:
  3198  00006E  C016  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  3199  000072  C015  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  3200  000076  C014  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  3201  00007A  C013  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  3202  00007E  C012  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  3203  000082  C011  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  3204  000086  C010  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  3205  00008A  C00F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  3206  00008E  C00E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  3207  000092  C00D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  3208  000096  C00C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  3209  00009A  C00B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  3210  00009E  C00A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3211  0000A2  C009  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3212  0000A6  0011               	retfie		f
  3213  0000A8                     __end_of_INTERRUPT_InterruptManager:
  3214                           	opt stack 0
  3215                           pclatu	equ	0xFFB
  3216                           pclath	equ	0xFFA
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           prodh	equ	0xFF4
  3222                           prodl	equ	0xFF3
  3223                           intcon	equ	0xFF2
  3224                           intcon2	equ	0xFF1
  3225                           postinc0	equ	0xFEE
  3226                           fsr0h	equ	0xFEA
  3227                           fsr0l	equ	0xFE9
  3228                           wreg	equ	0xFE8
  3229                           postinc1	equ	0xFE6
  3230                           postdec1	equ	0xFE5
  3231                           fsr1h	equ	0xFE2
  3232                           fsr1l	equ	0xFE1
  3233                           postinc2	equ	0xFDE
  3234                           postdec2	equ	0xFDD
  3235                           fsr2h	equ	0xFDA
  3236                           fsr2l	equ	0xFD9
  3237                           status	equ	0xFD8
  3238                           
  3239 ;; *************** function _TMR1_ISR *****************
  3240 ;; Defined at:
  3241 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;		None
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;		None
  3246 ;; Return value:  Size  Location     Type
  3247 ;;		None               void
  3248 ;; Registers used:
  3249 ;;		wreg, status,2, cstack
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3255 ;;      Params:         0       0       0       0       0       0       0
  3256 ;;      Locals:         0       0       0       0       0       0       0
  3257 ;;      Temps:          3       0       0       0       0       0       0
  3258 ;;      Totals:         3       0       0       0       0       0       0
  3259 ;;Total ram usage:        3 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    1
  3262 ;; This function calls:
  3263 ;;		_TMR1_CallBack
  3264 ;; This function is called by:
  3265 ;;		_INTERRUPT_InterruptManager
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           	psect	text21
  3270  0015AA                     __ptext21:
  3271                           	opt stack 0
  3272  0015AA                     _TMR1_ISR:
  3273                           	opt stack 24
  3274                           
  3275                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
  3276                           
  3277                           ;incstack = 0
  3278  0015AA  909E               	bcf	3998,0,c	;volatile
  3279                           
  3280                           ;tmr1.c: 164: TMR1H = (timer1ReloadVal >> 8);
  3281  0015AC  C048  F001         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
  3282  0015B0  C001  F002         	movff	??_TMR1_ISR,??_TMR1_ISR+1
  3283  0015B4  6A03               	clrf	(??_TMR1_ISR+2)& (0+255),c
  3284  0015B6  5002               	movf	??_TMR1_ISR+1,w,c
  3285  0015B8  6ECF               	movwf	4047,c	;volatile
  3286                           
  3287                           ;tmr1.c: 165: TMR1L = (uint8_t) timer1ReloadVal;
  3288  0015BA  C047  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  3289                           
  3290                           ;tmr1.c: 169: TMR1_CallBack();
  3291  0015BE  EC14  F00B         	call	_TMR1_CallBack	;wreg free
  3292  0015C2  0012               	return	
  3293  0015C4                     __end_of_TMR1_ISR:
  3294                           	opt stack 0
  3295                           pclatu	equ	0xFFB
  3296                           pclath	equ	0xFFA
  3297                           tblptru	equ	0xFF8
  3298                           tblptrh	equ	0xFF7
  3299                           tblptrl	equ	0xFF6
  3300                           tablat	equ	0xFF5
  3301                           prodh	equ	0xFF4
  3302                           prodl	equ	0xFF3
  3303                           intcon	equ	0xFF2
  3304                           intcon2	equ	0xFF1
  3305                           postinc0	equ	0xFEE
  3306                           fsr0h	equ	0xFEA
  3307                           fsr0l	equ	0xFE9
  3308                           wreg	equ	0xFE8
  3309                           postinc1	equ	0xFE6
  3310                           postdec1	equ	0xFE5
  3311                           fsr1h	equ	0xFE2
  3312                           fsr1l	equ	0xFE1
  3313                           postinc2	equ	0xFDE
  3314                           postdec2	equ	0xFDD
  3315                           fsr2h	equ	0xFDA
  3316                           fsr2l	equ	0xFD9
  3317                           status	equ	0xFD8
  3318                           
  3319 ;; *************** function _TMR1_CallBack *****************
  3320 ;; Defined at:
  3321 ;;		line 173 in file "mcc_generated_files/tmr1.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;		None
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;		None
  3326 ;; Return value:  Size  Location     Type
  3327 ;;		None               void
  3328 ;; Registers used:
  3329 ;;		None
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3335 ;;      Params:         0       0       0       0       0       0       0
  3336 ;;      Locals:         0       0       0       0       0       0       0
  3337 ;;      Temps:          0       0       0       0       0       0       0
  3338 ;;      Totals:         0       0       0       0       0       0       0
  3339 ;;Total ram usage:        0 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; This function calls:
  3342 ;;		Nothing
  3343 ;; This function is called by:
  3344 ;;		_TMR1_ISR
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text22
  3349  001628                     __ptext22:
  3350                           	opt stack 0
  3351  001628                     _TMR1_CallBack:
  3352                           	opt stack 24
  3353                           
  3354                           ;incstack = 0
  3355  001628  0012               	return	
  3356  00162A                     __end_of_TMR1_CallBack:
  3357                           	opt stack 0
  3358                           pclatu	equ	0xFFB
  3359                           pclath	equ	0xFFA
  3360                           tblptru	equ	0xFF8
  3361                           tblptrh	equ	0xFF7
  3362                           tblptrl	equ	0xFF6
  3363                           tablat	equ	0xFF5
  3364                           prodh	equ	0xFF4
  3365                           prodl	equ	0xFF3
  3366                           intcon	equ	0xFF2
  3367                           intcon2	equ	0xFF1
  3368                           postinc0	equ	0xFEE
  3369                           fsr0h	equ	0xFEA
  3370                           fsr0l	equ	0xFE9
  3371                           wreg	equ	0xFE8
  3372                           postinc1	equ	0xFE6
  3373                           postdec1	equ	0xFE5
  3374                           fsr1h	equ	0xFE2
  3375                           fsr1l	equ	0xFE1
  3376                           postinc2	equ	0xFDE
  3377                           postdec2	equ	0xFDD
  3378                           fsr2h	equ	0xFDA
  3379                           fsr2l	equ	0xFD9
  3380                           status	equ	0xFD8
  3381                           
  3382 ;; *************** function _EUSART1_Transmit_ISR *****************
  3383 ;; Defined at:
  3384 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;		None
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;		None
  3389 ;; Return value:  Size  Location     Type
  3390 ;;		None               void
  3391 ;; Registers used:
  3392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3398 ;;      Params:         0       0       0       0       0       0       0
  3399 ;;      Locals:         0       0       0       0       0       0       0
  3400 ;;      Temps:          0       0       0       0       0       0       0
  3401 ;;      Totals:         0       0       0       0       0       0       0
  3402 ;;Total ram usage:        0 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; This function calls:
  3405 ;;		Nothing
  3406 ;; This function is called by:
  3407 ;;		_INTERRUPT_InterruptManager
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text23
  3412  001464                     __ptext23:
  3413                           	opt stack 0
  3414  001464                     _EUSART1_Transmit_ISR:
  3415                           	opt stack 25
  3416                           
  3417                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  3418                           
  3419                           ;incstack = 0
  3420  001464  0E08               	movlw	8
  3421  001466  5C49               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
  3422  001468  B0D8               	btfsc	status,0,c
  3423  00146A  D012               	goto	i2l122
  3424                           
  3425                           ;eusart1.c: 178: {
  3426                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
  3427  00146C  5046               	movf	_eusart1TxTail,w,c
  3428  00146E  0D01               	mullw	1
  3429  001470  0E34               	movlw	low _eusart1TxBuffer
  3430  001472  24F3               	addwf	prodl,w,c
  3431  001474  6ED9               	movwf	fsr2l,c
  3432  001476  0E00               	movlw	high _eusart1TxBuffer
  3433  001478  20F4               	addwfc	prodh,w,c
  3434  00147A  6EDA               	movwf	fsr2h,c
  3435  00147C  50DF               	movf	indf2,w,c
  3436  00147E  6EAD               	movwf	4013,c	;volatile
  3437  001480  2A46               	incf	_eusart1TxTail,f,c
  3438                           
  3439                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  3440  001482  0E07               	movlw	7
  3441  001484  6446               	cpfsgt	_eusart1TxTail,c
  3442  001486  D002               	goto	i2l1440
  3443                           
  3444                           ;eusart1.c: 181: {
  3445                           ;eusart1.c: 182: eusart1TxTail = 0;
  3446  001488  0E00               	movlw	0
  3447  00148A  6E46               	movwf	_eusart1TxTail,c
  3448  00148C                     i2l1440:
  3449                           
  3450                           ;eusart1.c: 183: }
  3451                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
  3452  00148C  2A49               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  3453                           
  3454                           ;eusart1.c: 185: }
  3455  00148E  0012               	return	
  3456  001490                     i2l122:
  3457                           
  3458                           ;eusart1.c: 186: else
  3459                           ;eusart1.c: 187: {
  3460                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
  3461  001490  989D               	bcf	3997,4,c	;volatile
  3462  001492  0012               	return	
  3463  001494                     __end_of_EUSART1_Transmit_ISR:
  3464                           	opt stack 0
  3465                           pclatu	equ	0xFFB
  3466                           pclath	equ	0xFFA
  3467                           tblptru	equ	0xFF8
  3468                           tblptrh	equ	0xFF7
  3469                           tblptrl	equ	0xFF6
  3470                           tablat	equ	0xFF5
  3471                           prodh	equ	0xFF4
  3472                           prodl	equ	0xFF3
  3473                           intcon	equ	0xFF2
  3474                           intcon2	equ	0xFF1
  3475                           postinc0	equ	0xFEE
  3476                           fsr0h	equ	0xFEA
  3477                           fsr0l	equ	0xFE9
  3478                           wreg	equ	0xFE8
  3479                           postinc1	equ	0xFE6
  3480                           postdec1	equ	0xFE5
  3481                           fsr1h	equ	0xFE2
  3482                           fsr1l	equ	0xFE1
  3483                           indf2	equ	0xFDF
  3484                           postinc2	equ	0xFDE
  3485                           postdec2	equ	0xFDD
  3486                           fsr2h	equ	0xFDA
  3487                           fsr2l	equ	0xFD9
  3488                           status	equ	0xFD8
  3489                           
  3490 ;; *************** function _EUSART1_Receive_ISR *****************
  3491 ;; Defined at:
  3492 ;;		line 192 in file "mcc_generated_files/eusart1.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;		None
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;		None
  3497 ;; Return value:  Size  Location     Type
  3498 ;;		None               void
  3499 ;; Registers used:
  3500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3506 ;;      Params:         0       0       0       0       0       0       0
  3507 ;;      Locals:         0       0       0       0       0       0       0
  3508 ;;      Temps:          0       0       0       0       0       0       0
  3509 ;;      Totals:         0       0       0       0       0       0       0
  3510 ;;Total ram usage:        0 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; This function calls:
  3513 ;;		Nothing
  3514 ;; This function is called by:
  3515 ;;		_INTERRUPT_InterruptManager
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           	psect	text24
  3520  001494                     __ptext24:
  3521                           	opt stack 0
  3522  001494                     _EUSART1_Receive_ISR:
  3523                           	opt stack 25
  3524                           
  3525                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
  3526                           
  3527                           ;incstack = 0
  3528  001494  A2AB               	btfss	4011,1,c	;volatile
  3529  001496  D002               	goto	i2l2172
  3530                           
  3531                           ;eusart1.c: 195: {
  3532                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
  3533  001498  98AB               	bcf	4011,4,c	;volatile
  3534                           
  3535                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
  3536  00149A  88AB               	bsf	4011,4,c	;volatile
  3537  00149C                     i2l2172:
  3538                           
  3539                           ;eusart1.c: 200: }
  3540                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
  3541  00149C  5043               	movf	_eusart1RxHead,w,c
  3542  00149E  0D01               	mullw	1
  3543  0014A0  0100               	movlb	0	; () banked
  3544  0014A2  0EB0               	movlw	low _eusart1RxBuffer
  3545  0014A4  24F3               	addwf	prodl,w,c
  3546  0014A6  6ED9               	movwf	fsr2l,c
  3547  0014A8  0100               	movlb	0	; () banked
  3548  0014AA  0E00               	movlw	high _eusart1RxBuffer
  3549  0014AC  20F4               	addwfc	prodh,w,c
  3550  0014AE  6EDA               	movwf	fsr2h,c
  3551  0014B0  CFAE FFDF          	movff	4014,indf2	;volatile
  3552                           
  3553                           ; BSR set to: 0
  3554  0014B4  2A43               	incf	_eusart1RxHead,f,c
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  3558  0014B6  0E07               	movlw	7
  3559  0014B8  6443               	cpfsgt	_eusart1RxHead,c
  3560  0014BA  D002               	goto	i2l2180
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;eusart1.c: 205: {
  3564                           ;eusart1.c: 206: eusart1RxHead = 0;
  3565  0014BC  0E00               	movlw	0
  3566  0014BE  6E43               	movwf	_eusart1RxHead,c
  3567  0014C0                     i2l2180:
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;eusart1.c: 207: }
  3571                           ;eusart1.c: 208: eusart1RxCount++;
  3572  0014C0  2A42               	incf	_eusart1RxCount,f,c	;volatile
  3573                           
  3574                           ; BSR set to: 0
  3575  0014C2  0012               	return	
  3576  0014C4                     __end_of_EUSART1_Receive_ISR:
  3577                           	opt stack 0
  3578                           pclatu	equ	0xFFB
  3579                           pclath	equ	0xFFA
  3580                           tblptru	equ	0xFF8
  3581                           tblptrh	equ	0xFF7
  3582                           tblptrl	equ	0xFF6
  3583                           tablat	equ	0xFF5
  3584                           prodh	equ	0xFF4
  3585                           prodl	equ	0xFF3
  3586                           intcon	equ	0xFF2
  3587                           intcon2	equ	0xFF1
  3588                           postinc0	equ	0xFEE
  3589                           fsr0h	equ	0xFEA
  3590                           fsr0l	equ	0xFE9
  3591                           wreg	equ	0xFE8
  3592                           postinc1	equ	0xFE6
  3593                           postdec1	equ	0xFE5
  3594                           fsr1h	equ	0xFE2
  3595                           fsr1l	equ	0xFE1
  3596                           indf2	equ	0xFDF
  3597                           postinc2	equ	0xFDE
  3598                           postdec2	equ	0xFDD
  3599                           fsr2h	equ	0xFDA
  3600                           fsr2l	equ	0xFD9
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _ADC_ISR *****************
  3604 ;; Defined at:
  3605 ;;		line 82 in file "mcc_generated_files/adc.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;		None
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;  ADC_Result      2    6[COMRAM] int 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;		None               void
  3612 ;; Registers used:
  3613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3619 ;;      Params:         0       0       0       0       0       0       0
  3620 ;;      Locals:         2       0       0       0       0       0       0
  3621 ;;      Temps:          2       0       0       0       0       0       0
  3622 ;;      Totals:         4       0       0       0       0       0       0
  3623 ;;Total ram usage:        4 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    1
  3626 ;; This function calls:
  3627 ;;		_ADC_GetConversionResult
  3628 ;;		_ADC_StartConversion
  3629 ;;		_Set_4051
  3630 ;; This function is called by:
  3631 ;;		_INTERRUPT_InterruptManager
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           	psect	text25
  3636  00061E                     __ptext25:
  3637                           	opt stack 0
  3638  00061E                     _ADC_ISR:
  3639                           	opt stack 24
  3640                           
  3641                           ;adc.c: 85: PIR1bits.ADIF = 0;
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;incstack = 0
  3645  00061E  9C9E               	bcf	3998,6,c	;volatile
  3646                           
  3647                           ;adc.c: 86: int ADC_Result = 0;
  3648  000620  0E00               	movlw	0
  3649  000622  6E08               	movwf	ADC_ISR@ADC_Result+1,c
  3650  000624  0E00               	movlw	0
  3651  000626  6E07               	movwf	ADC_ISR@ADC_Result,c
  3652                           
  3653                           ;adc.c: 87: if (Temp_Aquire){
  3654  000628  5040               	movf	_Temp_Aquire,w,c
  3655  00062A  B4D8               	btfsc	status,2,c
  3656  00062C  D14A               	goto	i2l2256
  3657                           
  3658                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
  3659  00062E  ECFB  F00A         	call	_ADC_GetConversionResult	;wreg free
  3660  000632  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  3661  000636  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  3662                           
  3663                           ;adc.c: 90: switch ( ADC_Buffer_Point )
  3664  00063A  D117               	goto	i2l2252
  3665  00063C                     i2l2188:
  3666                           
  3667                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  3668  00063C  0EDA               	movlw	low _Temp_Adc
  3669  00063E  6E05               	movwf	??_ADC_ISR& (0+255),c
  3670  000640  0E00               	movlw	high _Temp_Adc
  3671  000642  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  3672  000644  90D8               	bcf	status,0,c
  3673  000646  343C               	rlcf	_ADC_Buffer_Point,w,c
  3674  000648  6ED9               	movwf	fsr2l,c
  3675  00064A  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  3676  00064C  6EDA               	movwf	fsr2h,c
  3677  00064E  5005               	movf	??_ADC_ISR,w,c
  3678  000650  26D9               	addwf	fsr2l,f,c
  3679  000652  5006               	movf	??_ADC_ISR+1,w,c
  3680  000654  22DA               	addwfc	fsr2h,f,c
  3681  000656  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  3682  00065A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  3683                           
  3684                           ;adc.c: 94: Set_4051(0);
  3685  00065E  0E00               	movlw	0
  3686  000660  6E02               	movwf	Set_4051@Channel+1,c
  3687  000662  0E00               	movlw	0
  3688  000664  6E01               	movwf	Set_4051@Channel,c
  3689  000666  EC79  F00A         	call	_Set_4051	;wreg free
  3690                           
  3691                           ;adc.c: 95: ADC_StartConversion(Temp1);
  3692  00066A  0E0E               	movlw	14
  3693  00066C  ECE2  F00A         	call	_ADC_StartConversion
  3694                           
  3695                           ;adc.c: 96: break;
  3696  000670  D126               	goto	i2l2254
  3697  000672                     i2l2194:
  3698                           
  3699                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  3700  000672  0EDA               	movlw	low _Temp_Adc
  3701  000674  6E05               	movwf	??_ADC_ISR& (0+255),c
  3702  000676  0E00               	movlw	high _Temp_Adc
  3703  000678  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  3704  00067A  90D8               	bcf	status,0,c
  3705  00067C  343C               	rlcf	_ADC_Buffer_Point,w,c
  3706  00067E  6ED9               	movwf	fsr2l,c
  3707  000680  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  3708  000682  6EDA               	movwf	fsr2h,c
  3709  000684  5005               	movf	??_ADC_ISR,w,c
  3710  000686  26D9               	addwf	fsr2l,f,c
  3711  000688  5006               	movf	??_ADC_ISR+1,w,c
  3712  00068A  22DA               	addwfc	fsr2h,f,c
  3713  00068C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  3714  000690  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  3715                           
  3716                           ;adc.c: 99: Set_4051(1);
  3717  000694  0E00               	movlw	0
  3718  000696  6E02               	movwf	Set_4051@Channel+1,c
  3719  000698  0E01               	movlw	1
  3720  00069A  6E01               	movwf	Set_4051@Channel,c
  3721  00069C  EC79  F00A         	call	_Set_4051	;wreg free
  3722                           
  3723                           ;adc.c: 100: ADC_StartConversion(Temp1);
  3724  0006A0  0E0E               	movlw	14
  3725  0006A2  ECE2  F00A         	call	_ADC_StartConversion
  3726                           
  3727                           ;adc.c: 101: break;
  3728  0006A6  D10B               	goto	i2l2254
  3729  0006A8                     i2l2200:
  3730                           
  3731                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  3732  0006A8  0EDA               	movlw	low _Temp_Adc
  3733  0006AA  6E05               	movwf	??_ADC_ISR& (0+255),c
  3734  0006AC  0E00               	movlw	high _Temp_Adc
  3735  0006AE  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  3736  0006B0  90D8               	bcf	status,0,c
  3737  0006B2  343C               	rlcf	_ADC_Buffer_Point,w,c
  3738  0006B4  6ED9               	movwf	fsr2l,c
  3739  0006B6  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  3740  0006B8  6EDA               	movwf	fsr2h,c
  3741  0006BA  5005               	movf	??_ADC_ISR,w,c
  3742  0006BC  26D9               	addwf	fsr2l,f,c
  3743  0006BE  5006               	movf	??_ADC_ISR+1,w,c
  3744  0006C0  22DA               	addwfc	fsr2h,f,c
  3745  0006C2  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  3746  0006C6  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  3747                           
  3748                           ;adc.c: 104: Set_4051(2);
  3749  0006CA  0E00               	movlw	0
  3750  0006CC  6E02               	movwf	Set_4051@Channel+1,c
  3751  0006CE  0E02               	movlw	2
  3752  0006D0  6E01               	movwf	Set_4051@Channel,c
  3753  0006D2  EC79  F00A         	call	_Set_4051	;wreg free
  3754                           
  3755                           ;adc.c: 105: ADC_StartConversion(Temp1);
  3756  0006D6  0E0E               	movlw	14
  3757  0006D8  ECE2  F00A         	call	_ADC_StartConversion
  3758                           
  3759                           ;adc.c: 106: break;
  3760  0006DC  D0F0               	goto	i2l2254
  3761  0006DE                     i2l2206:
  3762                           
  3763                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  3764  0006DE  0EDA               	movlw	low _Temp_Adc
  3765  0006E0  6E05               	movwf	??_ADC_ISR& (0+255),c
  3766  0006E2  0E00               	movlw	high _Temp_Adc
  3767  0006E4  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  3768  0006E6  90D8               	bcf	status,0,c
  3769  0006E8  343C               	rlcf	_ADC_Buffer_Point,w,c
  3770  0006EA  6ED9               	movwf	fsr2l,c
  3771  0006EC  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  3772  0006EE  6EDA               	movwf	fsr2h,c
  3773  0006F0  5005               	movf	??_ADC_ISR,w,c
  3774  0006F2  26D9               	addwf	fsr2l,f,c
  3775  0006F4  5006               	movf	??_ADC_ISR+1,w,c
  3776  0006F6  22DA               	addwfc	fsr2h,f,c
  3777  0006F8  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  3778  0006FC  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  3779                           
  3780                           ;adc.c: 109: Set_4051(3);
  3781  000700  0E00               	movlw	0
  3782  000702  6E02               	movwf	Set_4051@Channel+1,c
  3783  000704  0E03               	movlw	3
  3784  000706  6E01               	movwf	Set_4051@Channel,c
  3785  000708  EC79  F00A         	call	_Set_4051	;wreg free
  3786                           
  3787                           ;adc.c: 110: ADC_StartConversion(Temp1);
  3788  00070C  0E0E               	movlw	14
  3789  00070E  ECE2  F00A         	call	_ADC_StartConversion
  3790                           
  3791                           ;adc.c: 111: break;
  3792  000712  D0D5               	goto	i2l2254
  3793  000714                     i2l2212:
  3794                           
  3795                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  3796  000714  0EDA               	movlw	low _Temp_Adc
  3797  000716  6E05               	movwf	??_ADC_ISR& (0+255),c
  3798  000718  0E00               	movlw	high _Temp_Adc
  3799  00071A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  3800  00071C  90D8               	bcf	status,0,c
  3801  00071E  343C               	rlcf	_ADC_Buffer_Point,w,c
  3802  000720  6ED9               	movwf	fsr2l,c
  3803  000722  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  3804  000724  6EDA               	movwf	fsr2h,c
  3805  000726  5005               	movf	??_ADC_ISR,w,c
  3806  000728  26D9               	addwf	fsr2l,f,c
  3807  00072A  5006               	movf	??_ADC_ISR+1,w,c
  3808  00072C  22DA               	addwfc	fsr2h,f,c
  3809  00072E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  3810  000732  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  3811                           
  3812                           ;adc.c: 114: Set_4051(4);
  3813  000736  0E00               	movlw	0
  3814  000738  6E02               	movwf	Set_4051@Channel+1,c
  3815  00073A  0E04               	movlw	4
  3816  00073C  6E01               	movwf	Set_4051@Channel,c
  3817  00073E  EC79  F00A         	call	_Set_4051	;wreg free
  3818                           
  3819                           ;adc.c: 115: ADC_StartConversion(Temp1);
  3820  000742  0E0E               	movlw	14
  3821  000744  ECE2  F00A         	call	_ADC_StartConversion
  3822                           
  3823                           ;adc.c: 116: break;
  3824  000748  D0BA               	goto	i2l2254
  3825  00074A                     i2l2218:
  3826                           
  3827                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  3828  00074A  0EDA               	movlw	low _Temp_Adc
  3829  00074C  6E05               	movwf	??_ADC_ISR& (0+255),c
  3830  00074E  0E00               	movlw	high _Temp_Adc
  3831  000750  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  3832  000752  90D8               	bcf	status,0,c
  3833  000754  343C               	rlcf	_ADC_Buffer_Point,w,c
  3834  000756  6ED9               	movwf	fsr2l,c
  3835  000758  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  3836  00075A  6EDA               	movwf	fsr2h,c
  3837  00075C  5005               	movf	??_ADC_ISR,w,c
  3838  00075E  26D9               	addwf	fsr2l,f,c
  3839  000760  5006               	movf	??_ADC_ISR+1,w,c
  3840  000762  22DA               	addwfc	fsr2h,f,c
  3841  000764  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  3842  000768  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  3843                           
  3844                           ;adc.c: 119: Set_4051(5);
  3845  00076C  0E00               	movlw	0
  3846  00076E  6E02               	movwf	Set_4051@Channel+1,c
  3847  000770  0E05               	movlw	5
  3848  000772  6E01               	movwf	Set_4051@Channel,c
  3849  000774  EC79  F00A         	call	_Set_4051	;wreg free
  3850                           
  3851                           ;adc.c: 120: ADC_StartConversion(Temp1);
  3852  000778  0E0E               	movlw	14
  3853  00077A  ECE2  F00A         	call	_ADC_StartConversion
  3854                           
  3855                           ;adc.c: 121: break;
  3856  00077E  D09F               	goto	i2l2254
  3857  000780                     i2l2224:
  3858                           
  3859                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  3860  000780  0EDA               	movlw	low _Temp_Adc
  3861  000782  6E05               	movwf	??_ADC_ISR& (0+255),c
  3862  000784  0E00               	movlw	high _Temp_Adc
  3863  000786  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  3864  000788  90D8               	bcf	status,0,c
  3865  00078A  343C               	rlcf	_ADC_Buffer_Point,w,c
  3866  00078C  6ED9               	movwf	fsr2l,c
  3867  00078E  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  3868  000790  6EDA               	movwf	fsr2h,c
  3869  000792  5005               	movf	??_ADC_ISR,w,c
  3870  000794  26D9               	addwf	fsr2l,f,c
  3871  000796  5006               	movf	??_ADC_ISR+1,w,c
  3872  000798  22DA               	addwfc	fsr2h,f,c
  3873  00079A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  3874  00079E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  3875                           
  3876                           ;adc.c: 124: Set_4051(6);
  3877  0007A2  0E00               	movlw	0
  3878  0007A4  6E02               	movwf	Set_4051@Channel+1,c
  3879  0007A6  0E06               	movlw	6
  3880  0007A8  6E01               	movwf	Set_4051@Channel,c
  3881  0007AA  EC79  F00A         	call	_Set_4051	;wreg free
  3882                           
  3883                           ;adc.c: 125: ADC_StartConversion(Temp1);
  3884  0007AE  0E0E               	movlw	14
  3885  0007B0  ECE2  F00A         	call	_ADC_StartConversion
  3886                           
  3887                           ;adc.c: 126: break;
  3888  0007B4  D084               	goto	i2l2254
  3889  0007B6                     i2l2230:
  3890                           
  3891                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  3892  0007B6  0EDA               	movlw	low _Temp_Adc
  3893  0007B8  6E05               	movwf	??_ADC_ISR& (0+255),c
  3894  0007BA  0E00               	movlw	high _Temp_Adc
  3895  0007BC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  3896  0007BE  90D8               	bcf	status,0,c
  3897  0007C0  343C               	rlcf	_ADC_Buffer_Point,w,c
  3898  0007C2  6ED9               	movwf	fsr2l,c
  3899  0007C4  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  3900  0007C6  6EDA               	movwf	fsr2h,c
  3901  0007C8  5005               	movf	??_ADC_ISR,w,c
  3902  0007CA  26D9               	addwf	fsr2l,f,c
  3903  0007CC  5006               	movf	??_ADC_ISR+1,w,c
  3904  0007CE  22DA               	addwfc	fsr2h,f,c
  3905  0007D0  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  3906  0007D4  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  3907                           
  3908                           ;adc.c: 129: Set_4051(7);
  3909  0007D8  0E00               	movlw	0
  3910  0007DA  6E02               	movwf	Set_4051@Channel+1,c
  3911  0007DC  0E07               	movlw	7
  3912  0007DE  6E01               	movwf	Set_4051@Channel,c
  3913  0007E0  EC79  F00A         	call	_Set_4051	;wreg free
  3914                           
  3915                           ;adc.c: 130: ADC_StartConversion(Temp1);
  3916  0007E4  0E0E               	movlw	14
  3917  0007E6  ECE2  F00A         	call	_ADC_StartConversion
  3918                           
  3919                           ;adc.c: 131: break;
  3920  0007EA  D069               	goto	i2l2254
  3921  0007EC                     i2l2236:
  3922                           
  3923                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  3924  0007EC  0EDA               	movlw	low _Temp_Adc
  3925  0007EE  6E05               	movwf	??_ADC_ISR& (0+255),c
  3926  0007F0  0E00               	movlw	high _Temp_Adc
  3927  0007F2  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  3928  0007F4  90D8               	bcf	status,0,c
  3929  0007F6  343C               	rlcf	_ADC_Buffer_Point,w,c
  3930  0007F8  6ED9               	movwf	fsr2l,c
  3931  0007FA  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  3932  0007FC  6EDA               	movwf	fsr2h,c
  3933  0007FE  5005               	movf	??_ADC_ISR,w,c
  3934  000800  26D9               	addwf	fsr2l,f,c
  3935  000802  5006               	movf	??_ADC_ISR+1,w,c
  3936  000804  22DA               	addwfc	fsr2h,f,c
  3937  000806  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  3938  00080A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  3939                           
  3940                           ;adc.c: 134: Set_4051(0);
  3941  00080E  0E00               	movlw	0
  3942  000810  6E02               	movwf	Set_4051@Channel+1,c
  3943  000812  0E00               	movlw	0
  3944  000814  6E01               	movwf	Set_4051@Channel,c
  3945  000816  EC79  F00A         	call	_Set_4051	;wreg free
  3946                           
  3947                           ;adc.c: 135: ADC_StartConversion(Temp2);
  3948  00081A  0E14               	movlw	20
  3949  00081C  ECE2  F00A         	call	_ADC_StartConversion
  3950                           
  3951                           ;adc.c: 136: break;
  3952  000820  D04E               	goto	i2l2254
  3953  000822                     i2l2242:
  3954                           
  3955                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  3956  000822  0EDA               	movlw	low _Temp_Adc
  3957  000824  6E05               	movwf	??_ADC_ISR& (0+255),c
  3958  000826  0E00               	movlw	high _Temp_Adc
  3959  000828  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  3960  00082A  90D8               	bcf	status,0,c
  3961  00082C  343C               	rlcf	_ADC_Buffer_Point,w,c
  3962  00082E  6ED9               	movwf	fsr2l,c
  3963  000830  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  3964  000832  6EDA               	movwf	fsr2h,c
  3965  000834  5005               	movf	??_ADC_ISR,w,c
  3966  000836  26D9               	addwf	fsr2l,f,c
  3967  000838  5006               	movf	??_ADC_ISR+1,w,c
  3968  00083A  22DA               	addwfc	fsr2h,f,c
  3969  00083C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  3970  000840  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  3971                           
  3972                           ;adc.c: 139: Set_4051(1);
  3973  000844  0E00               	movlw	0
  3974  000846  6E02               	movwf	Set_4051@Channel+1,c
  3975  000848  0E01               	movlw	1
  3976  00084A  6E01               	movwf	Set_4051@Channel,c
  3977  00084C  EC79  F00A         	call	_Set_4051	;wreg free
  3978                           
  3979                           ;adc.c: 140: ADC_StartConversion(Temp2);
  3980  000850  0E14               	movlw	20
  3981  000852  ECE2  F00A         	call	_ADC_StartConversion
  3982                           
  3983                           ;adc.c: 141: break;
  3984  000856  D033               	goto	i2l2254
  3985  000858                     i2l2248:
  3986                           
  3987                           ;adc.c: 143: Temp_Aquire = 0;
  3988  000858  0E00               	movlw	0
  3989  00085A  6E40               	movwf	_Temp_Aquire,c
  3990                           
  3991                           ;adc.c: 144: Temp_Done = 1;
  3992  00085C  0E00               	movlw	0
  3993  00085E  0100               	movlb	0	; () banked
  3994  000860  6FB9               	movwf	(_Temp_Done+1)& (0+255),b
  3995  000862  0E01               	movlw	1
  3996  000864  0100               	movlb	0	; () banked
  3997  000866  6FB8               	movwf	_Temp_Done& (0+255),b
  3998                           
  3999                           ;adc.c: 145: break;
  4000  000868  D02A               	goto	i2l2254
  4001  00086A                     i2l2252:
  4002  00086A  C03C  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  4003  00086E  C03D  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  4004                           
  4005                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4006                           ; Switch size 1, requested type "space"
  4007                           ; Number of cases is 1, Range of values is 0 to 0
  4008                           ; switch strategies available:
  4009                           ; Name         Instructions Cycles
  4010                           ; simple_byte            4     3 (average)
  4011                           ;	Chosen strategy is simple_byte
  4012  000872  5006               	movf	??_ADC_ISR+1,w,c
  4013  000874  0A00               	xorlw	0	; case 0
  4014  000876  A4D8               	btfss	status,2,c
  4015  000878  D022               	goto	i2l2254
  4016                           
  4017                           ; Switch size 1, requested type "space"
  4018                           ; Number of cases is 11, Range of values is 0 to 10
  4019                           ; switch strategies available:
  4020                           ; Name         Instructions Cycles
  4021                           ; simple_byte           34    18 (average)
  4022                           ;	Chosen strategy is simple_byte
  4023  00087A  5005               	movf	??_ADC_ISR,w,c
  4024  00087C  0A00               	xorlw	0	; case 0
  4025  00087E  B4D8               	btfsc	status,2,c
  4026  000880  D6DD               	goto	i2l2188
  4027  000882  0A01               	xorlw	1	; case 1
  4028  000884  B4D8               	btfsc	status,2,c
  4029  000886  D6F5               	goto	i2l2194
  4030  000888  0A03               	xorlw	3	; case 2
  4031  00088A  B4D8               	btfsc	status,2,c
  4032  00088C  D70D               	goto	i2l2200
  4033  00088E  0A01               	xorlw	1	; case 3
  4034  000890  B4D8               	btfsc	status,2,c
  4035  000892  D725               	goto	i2l2206
  4036  000894  0A07               	xorlw	7	; case 4
  4037  000896  B4D8               	btfsc	status,2,c
  4038  000898  D73D               	goto	i2l2212
  4039  00089A  0A01               	xorlw	1	; case 5
  4040  00089C  B4D8               	btfsc	status,2,c
  4041  00089E  D755               	goto	i2l2218
  4042  0008A0  0A03               	xorlw	3	; case 6
  4043  0008A2  B4D8               	btfsc	status,2,c
  4044  0008A4  D76D               	goto	i2l2224
  4045  0008A6  0A01               	xorlw	1	; case 7
  4046  0008A8  B4D8               	btfsc	status,2,c
  4047  0008AA  D785               	goto	i2l2230
  4048  0008AC  0A0F               	xorlw	15	; case 8
  4049  0008AE  B4D8               	btfsc	status,2,c
  4050  0008B0  D79D               	goto	i2l2236
  4051  0008B2  0A01               	xorlw	1	; case 9
  4052  0008B4  B4D8               	btfsc	status,2,c
  4053  0008B6  D7B5               	goto	i2l2242
  4054  0008B8  0A03               	xorlw	3	; case 10
  4055  0008BA  B4D8               	btfsc	status,2,c
  4056  0008BC  D7CD               	goto	i2l2248
  4057  0008BE                     i2l2254:
  4058                           
  4059                           ;adc.c: 147: ADC_Buffer_Point++;
  4060  0008BE  4A3C               	infsnz	_ADC_Buffer_Point,f,c
  4061  0008C0  2A3D               	incf	_ADC_Buffer_Point+1,f,c
  4062  0008C2                     i2l2256:
  4063                           
  4064                           ;adc.c: 148: }
  4065                           ;adc.c: 149: if (Volt_Aquire){
  4066  0008C2  5041               	movf	_Volt_Aquire,w,c
  4067  0008C4  B4D8               	btfsc	status,2,c
  4068  0008C6  0012               	return	
  4069                           
  4070                           ;adc.c: 151: ADC_Result = ADC_GetConversionResult();
  4071  0008C8  ECFB  F00A         	call	_ADC_GetConversionResult	;wreg free
  4072  0008CC  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  4073  0008D0  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  4074                           
  4075                           ;adc.c: 152: switch ( ADC_Buffer_Point )
  4076  0008D4  D0DB               	goto	i2l2304
  4077  0008D6                     i2l2260:
  4078                           
  4079                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  4080  0008D6  0E9C               	movlw	low _Battery_Adc
  4081  0008D8  6E05               	movwf	??_ADC_ISR& (0+255),c
  4082  0008DA  0E00               	movlw	high _Battery_Adc
  4083  0008DC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  4084  0008DE  90D8               	bcf	status,0,c
  4085  0008E0  343C               	rlcf	_ADC_Buffer_Point,w,c
  4086  0008E2  6ED9               	movwf	fsr2l,c
  4087  0008E4  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  4088  0008E6  6EDA               	movwf	fsr2h,c
  4089  0008E8  5005               	movf	??_ADC_ISR,w,c
  4090  0008EA  26D9               	addwf	fsr2l,f,c
  4091  0008EC  5006               	movf	??_ADC_ISR+1,w,c
  4092  0008EE  22DA               	addwfc	fsr2h,f,c
  4093  0008F0  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  4094  0008F4  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  4095                           
  4096                           ;adc.c: 156: ADC_StartConversion(Battery1);
  4097  0008F8  0E01               	movlw	1
  4098  0008FA  ECE2  F00A         	call	_ADC_StartConversion
  4099                           
  4100                           ;adc.c: 157: break;
  4101  0008FE  D0F0               	goto	i2l2306
  4102  000900                     i2l2264:
  4103                           
  4104                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  4105  000900  0E9C               	movlw	low _Battery_Adc
  4106  000902  6E05               	movwf	??_ADC_ISR& (0+255),c
  4107  000904  0E00               	movlw	high _Battery_Adc
  4108  000906  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  4109  000908  90D8               	bcf	status,0,c
  4110  00090A  343C               	rlcf	_ADC_Buffer_Point,w,c
  4111  00090C  6ED9               	movwf	fsr2l,c
  4112  00090E  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  4113  000910  6EDA               	movwf	fsr2h,c
  4114  000912  5005               	movf	??_ADC_ISR,w,c
  4115  000914  26D9               	addwf	fsr2l,f,c
  4116  000916  5006               	movf	??_ADC_ISR+1,w,c
  4117  000918  22DA               	addwfc	fsr2h,f,c
  4118  00091A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  4119  00091E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  4120                           
  4121                           ;adc.c: 160: ADC_StartConversion(Battery2);
  4122  000922  0E03               	movlw	3
  4123  000924  ECE2  F00A         	call	_ADC_StartConversion
  4124                           
  4125                           ;adc.c: 161: break;
  4126  000928  D0DB               	goto	i2l2306
  4127  00092A                     i2l2268:
  4128                           
  4129                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  4130  00092A  0E9C               	movlw	low _Battery_Adc
  4131  00092C  6E05               	movwf	??_ADC_ISR& (0+255),c
  4132  00092E  0E00               	movlw	high _Battery_Adc
  4133  000930  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  4134  000932  90D8               	bcf	status,0,c
  4135  000934  343C               	rlcf	_ADC_Buffer_Point,w,c
  4136  000936  6ED9               	movwf	fsr2l,c
  4137  000938  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  4138  00093A  6EDA               	movwf	fsr2h,c
  4139  00093C  5005               	movf	??_ADC_ISR,w,c
  4140  00093E  26D9               	addwf	fsr2l,f,c
  4141  000940  5006               	movf	??_ADC_ISR+1,w,c
  4142  000942  22DA               	addwfc	fsr2h,f,c
  4143  000944  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  4144  000948  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  4145                           
  4146                           ;adc.c: 164: ADC_StartConversion(Battery3);
  4147  00094C  0E04               	movlw	4
  4148  00094E  ECE2  F00A         	call	_ADC_StartConversion
  4149                           
  4150                           ;adc.c: 165: break;
  4151  000952  D0C6               	goto	i2l2306
  4152  000954                     i2l2272:
  4153                           
  4154                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  4155  000954  0E9C               	movlw	low _Battery_Adc
  4156  000956  6E05               	movwf	??_ADC_ISR& (0+255),c
  4157  000958  0E00               	movlw	high _Battery_Adc
  4158  00095A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  4159  00095C  90D8               	bcf	status,0,c
  4160  00095E  343C               	rlcf	_ADC_Buffer_Point,w,c
  4161  000960  6ED9               	movwf	fsr2l,c
  4162  000962  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  4163  000964  6EDA               	movwf	fsr2h,c
  4164  000966  5005               	movf	??_ADC_ISR,w,c
  4165  000968  26D9               	addwf	fsr2l,f,c
  4166  00096A  5006               	movf	??_ADC_ISR+1,w,c
  4167  00096C  22DA               	addwfc	fsr2h,f,c
  4168  00096E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  4169  000972  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  4170                           
  4171                           ;adc.c: 168: ADC_StartConversion(Battery4);
  4172  000976  0E05               	movlw	5
  4173  000978  ECE2  F00A         	call	_ADC_StartConversion
  4174                           
  4175                           ;adc.c: 169: break;
  4176  00097C  D0B1               	goto	i2l2306
  4177  00097E                     i2l2276:
  4178                           
  4179                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  4180  00097E  0E9C               	movlw	low _Battery_Adc
  4181  000980  6E05               	movwf	??_ADC_ISR& (0+255),c
  4182  000982  0E00               	movlw	high _Battery_Adc
  4183  000984  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  4184  000986  90D8               	bcf	status,0,c
  4185  000988  343C               	rlcf	_ADC_Buffer_Point,w,c
  4186  00098A  6ED9               	movwf	fsr2l,c
  4187  00098C  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  4188  00098E  6EDA               	movwf	fsr2h,c
  4189  000990  5005               	movf	??_ADC_ISR,w,c
  4190  000992  26D9               	addwf	fsr2l,f,c
  4191  000994  5006               	movf	??_ADC_ISR+1,w,c
  4192  000996  22DA               	addwfc	fsr2h,f,c
  4193  000998  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  4194  00099C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  4195                           
  4196                           ;adc.c: 172: ADC_StartConversion(Battery5);
  4197  0009A0  0E18               	movlw	24
  4198  0009A2  ECE2  F00A         	call	_ADC_StartConversion
  4199                           
  4200                           ;adc.c: 173: break;
  4201  0009A6  D09C               	goto	i2l2306
  4202  0009A8                     i2l2280:
  4203                           
  4204                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  4205  0009A8  0E9C               	movlw	low _Battery_Adc
  4206  0009AA  6E05               	movwf	??_ADC_ISR& (0+255),c
  4207  0009AC  0E00               	movlw	high _Battery_Adc
  4208  0009AE  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  4209  0009B0  90D8               	bcf	status,0,c
  4210  0009B2  343C               	rlcf	_ADC_Buffer_Point,w,c
  4211  0009B4  6ED9               	movwf	fsr2l,c
  4212  0009B6  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  4213  0009B8  6EDA               	movwf	fsr2h,c
  4214  0009BA  5005               	movf	??_ADC_ISR,w,c
  4215  0009BC  26D9               	addwf	fsr2l,f,c
  4216  0009BE  5006               	movf	??_ADC_ISR+1,w,c
  4217  0009C0  22DA               	addwfc	fsr2h,f,c
  4218  0009C2  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  4219  0009C6  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  4220                           
  4221                           ;adc.c: 176: ADC_StartConversion(Battery6);
  4222  0009CA  0E1A               	movlw	26
  4223  0009CC  ECE2  F00A         	call	_ADC_StartConversion
  4224                           
  4225                           ;adc.c: 177: break;
  4226  0009D0  D087               	goto	i2l2306
  4227  0009D2                     i2l2284:
  4228                           
  4229                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  4230  0009D2  0E9C               	movlw	low _Battery_Adc
  4231  0009D4  6E05               	movwf	??_ADC_ISR& (0+255),c
  4232  0009D6  0E00               	movlw	high _Battery_Adc
  4233  0009D8  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  4234  0009DA  90D8               	bcf	status,0,c
  4235  0009DC  343C               	rlcf	_ADC_Buffer_Point,w,c
  4236  0009DE  6ED9               	movwf	fsr2l,c
  4237  0009E0  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  4238  0009E2  6EDA               	movwf	fsr2h,c
  4239  0009E4  5005               	movf	??_ADC_ISR,w,c
  4240  0009E6  26D9               	addwf	fsr2l,f,c
  4241  0009E8  5006               	movf	??_ADC_ISR+1,w,c
  4242  0009EA  22DA               	addwfc	fsr2h,f,c
  4243  0009EC  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  4244  0009F0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  4245                           
  4246                           ;adc.c: 180: ADC_StartConversion(Battery7);
  4247  0009F4  0E1B               	movlw	27
  4248  0009F6  ECE2  F00A         	call	_ADC_StartConversion
  4249                           
  4250                           ;adc.c: 181: break;
  4251  0009FA  D072               	goto	i2l2306
  4252  0009FC                     i2l2288:
  4253                           
  4254                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  4255  0009FC  0E9C               	movlw	low _Battery_Adc
  4256  0009FE  6E05               	movwf	??_ADC_ISR& (0+255),c
  4257  000A00  0E00               	movlw	high _Battery_Adc
  4258  000A02  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  4259  000A04  90D8               	bcf	status,0,c
  4260  000A06  343C               	rlcf	_ADC_Buffer_Point,w,c
  4261  000A08  6ED9               	movwf	fsr2l,c
  4262  000A0A  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  4263  000A0C  6EDA               	movwf	fsr2h,c
  4264  000A0E  5005               	movf	??_ADC_ISR,w,c
  4265  000A10  26D9               	addwf	fsr2l,f,c
  4266  000A12  5006               	movf	??_ADC_ISR+1,w,c
  4267  000A14  22DA               	addwfc	fsr2h,f,c
  4268  000A16  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  4269  000A1A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  4270                           
  4271                           ;adc.c: 184: ADC_StartConversion(Battery8);
  4272  000A1E  0E08               	movlw	8
  4273  000A20  ECE2  F00A         	call	_ADC_StartConversion
  4274                           
  4275                           ;adc.c: 185: break;
  4276  000A24  D05D               	goto	i2l2306
  4277  000A26                     i2l2292:
  4278                           
  4279                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  4280  000A26  0E9C               	movlw	low _Battery_Adc
  4281  000A28  6E05               	movwf	??_ADC_ISR& (0+255),c
  4282  000A2A  0E00               	movlw	high _Battery_Adc
  4283  000A2C  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  4284  000A2E  90D8               	bcf	status,0,c
  4285  000A30  343C               	rlcf	_ADC_Buffer_Point,w,c
  4286  000A32  6ED9               	movwf	fsr2l,c
  4287  000A34  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  4288  000A36  6EDA               	movwf	fsr2h,c
  4289  000A38  5005               	movf	??_ADC_ISR,w,c
  4290  000A3A  26D9               	addwf	fsr2l,f,c
  4291  000A3C  5006               	movf	??_ADC_ISR+1,w,c
  4292  000A3E  22DA               	addwfc	fsr2h,f,c
  4293  000A40  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  4294  000A44  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  4295                           
  4296                           ;adc.c: 188: ADC_StartConversion(Battery9);
  4297  000A48  0E0B               	movlw	11
  4298  000A4A  ECE2  F00A         	call	_ADC_StartConversion
  4299                           
  4300                           ;adc.c: 189: break;
  4301  000A4E  D048               	goto	i2l2306
  4302  000A50                     i2l2296:
  4303                           
  4304                           ;adc.c: 191: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  4305  000A50  0E9C               	movlw	low _Battery_Adc
  4306  000A52  6E05               	movwf	??_ADC_ISR& (0+255),c
  4307  000A54  0E00               	movlw	high _Battery_Adc
  4308  000A56  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  4309  000A58  90D8               	bcf	status,0,c
  4310  000A5A  343C               	rlcf	_ADC_Buffer_Point,w,c
  4311  000A5C  6ED9               	movwf	fsr2l,c
  4312  000A5E  343D               	rlcf	_ADC_Buffer_Point+1,w,c
  4313  000A60  6EDA               	movwf	fsr2h,c
  4314  000A62  5005               	movf	??_ADC_ISR,w,c
  4315  000A64  26D9               	addwf	fsr2l,f,c
  4316  000A66  5006               	movf	??_ADC_ISR+1,w,c
  4317  000A68  22DA               	addwfc	fsr2h,f,c
  4318  000A6A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  4319  000A6E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  4320                           
  4321                           ;adc.c: 192: ADC_StartConversion(Battery10);
  4322  000A72  0E0D               	movlw	13
  4323  000A74  ECE2  F00A         	call	_ADC_StartConversion
  4324                           
  4325                           ;adc.c: 193: break;
  4326  000A78  D033               	goto	i2l2306
  4327  000A7A                     i2l2300:
  4328                           
  4329                           ;adc.c: 195: Volt_Aquire = 0;
  4330  000A7A  0E00               	movlw	0
  4331  000A7C  6E41               	movwf	_Volt_Aquire,c
  4332                           
  4333                           ;adc.c: 196: Volt_Done = 1;
  4334  000A7E  0E00               	movlw	0
  4335  000A80  0100               	movlb	0	; () banked
  4336  000A82  6FBB               	movwf	(_Volt_Done+1)& (0+255),b
  4337  000A84  0E01               	movlw	1
  4338  000A86  0100               	movlb	0	; () banked
  4339  000A88  6FBA               	movwf	_Volt_Done& (0+255),b
  4340                           
  4341                           ;adc.c: 197: break;
  4342  000A8A  D02A               	goto	i2l2306
  4343  000A8C                     i2l2304:
  4344  000A8C  C03C  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  4345  000A90  C03D  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  4346                           
  4347                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4348                           ; Switch size 1, requested type "space"
  4349                           ; Number of cases is 1, Range of values is 0 to 0
  4350                           ; switch strategies available:
  4351                           ; Name         Instructions Cycles
  4352                           ; simple_byte            4     3 (average)
  4353                           ;	Chosen strategy is simple_byte
  4354  000A94  5006               	movf	??_ADC_ISR+1,w,c
  4355  000A96  0A00               	xorlw	0	; case 0
  4356  000A98  A4D8               	btfss	status,2,c
  4357  000A9A  D022               	goto	i2l2306
  4358                           
  4359                           ; Switch size 1, requested type "space"
  4360                           ; Number of cases is 11, Range of values is 0 to 10
  4361                           ; switch strategies available:
  4362                           ; Name         Instructions Cycles
  4363                           ; simple_byte           34    18 (average)
  4364                           ;	Chosen strategy is simple_byte
  4365  000A9C  5005               	movf	??_ADC_ISR,w,c
  4366  000A9E  0A00               	xorlw	0	; case 0
  4367  000AA0  B4D8               	btfsc	status,2,c
  4368  000AA2  D719               	goto	i2l2260
  4369  000AA4  0A01               	xorlw	1	; case 1
  4370  000AA6  B4D8               	btfsc	status,2,c
  4371  000AA8  D72B               	goto	i2l2264
  4372  000AAA  0A03               	xorlw	3	; case 2
  4373  000AAC  B4D8               	btfsc	status,2,c
  4374  000AAE  D73D               	goto	i2l2268
  4375  000AB0  0A01               	xorlw	1	; case 3
  4376  000AB2  B4D8               	btfsc	status,2,c
  4377  000AB4  D74F               	goto	i2l2272
  4378  000AB6  0A07               	xorlw	7	; case 4
  4379  000AB8  B4D8               	btfsc	status,2,c
  4380  000ABA  D761               	goto	i2l2276
  4381  000ABC  0A01               	xorlw	1	; case 5
  4382  000ABE  B4D8               	btfsc	status,2,c
  4383  000AC0  D773               	goto	i2l2280
  4384  000AC2  0A03               	xorlw	3	; case 6
  4385  000AC4  B4D8               	btfsc	status,2,c
  4386  000AC6  D785               	goto	i2l2284
  4387  000AC8  0A01               	xorlw	1	; case 7
  4388  000ACA  B4D8               	btfsc	status,2,c
  4389  000ACC  D797               	goto	i2l2288
  4390  000ACE  0A0F               	xorlw	15	; case 8
  4391  000AD0  B4D8               	btfsc	status,2,c
  4392  000AD2  D7A9               	goto	i2l2292
  4393  000AD4  0A01               	xorlw	1	; case 9
  4394  000AD6  B4D8               	btfsc	status,2,c
  4395  000AD8  D7BB               	goto	i2l2296
  4396  000ADA  0A03               	xorlw	3	; case 10
  4397  000ADC  B4D8               	btfsc	status,2,c
  4398  000ADE  D7CD               	goto	i2l2300
  4399  000AE0                     i2l2306:
  4400                           
  4401                           ;adc.c: 199: ADC_Buffer_Point++;
  4402  000AE0  4A3C               	infsnz	_ADC_Buffer_Point,f,c
  4403  000AE2  2A3D               	incf	_ADC_Buffer_Point+1,f,c
  4404  000AE4  0012               	return	
  4405  000AE6                     __end_of_ADC_ISR:
  4406                           	opt stack 0
  4407                           pclatu	equ	0xFFB
  4408                           pclath	equ	0xFFA
  4409                           tblptru	equ	0xFF8
  4410                           tblptrh	equ	0xFF7
  4411                           tblptrl	equ	0xFF6
  4412                           tablat	equ	0xFF5
  4413                           prodh	equ	0xFF4
  4414                           prodl	equ	0xFF3
  4415                           intcon	equ	0xFF2
  4416                           intcon2	equ	0xFF1
  4417                           postinc0	equ	0xFEE
  4418                           fsr0h	equ	0xFEA
  4419                           fsr0l	equ	0xFE9
  4420                           wreg	equ	0xFE8
  4421                           postinc1	equ	0xFE6
  4422                           postdec1	equ	0xFE5
  4423                           fsr1h	equ	0xFE2
  4424                           fsr1l	equ	0xFE1
  4425                           indf2	equ	0xFDF
  4426                           postinc2	equ	0xFDE
  4427                           postdec2	equ	0xFDD
  4428                           fsr2h	equ	0xFDA
  4429                           fsr2l	equ	0xFD9
  4430                           status	equ	0xFD8
  4431                           
  4432 ;; *************** function _Set_4051 *****************
  4433 ;; Defined at:
  4434 ;;		line 7 in file "Functions.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;  Channel         2    0[COMRAM] int 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;		None
  4439 ;; Return value:  Size  Location     Type
  4440 ;;		None               void
  4441 ;; Registers used:
  4442 ;;		wreg, status,2, status,0
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4448 ;;      Params:         2       0       0       0       0       0       0
  4449 ;;      Locals:         0       0       0       0       0       0       0
  4450 ;;      Temps:          2       0       0       0       0       0       0
  4451 ;;      Totals:         4       0       0       0       0       0       0
  4452 ;;Total ram usage:        4 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; This function calls:
  4455 ;;		Nothing
  4456 ;; This function is called by:
  4457 ;;		_ADC_ISR
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           	psect	text26
  4462  0014F2                     __ptext26:
  4463                           	opt stack 0
  4464  0014F2                     _Set_4051:
  4465                           	opt stack 24
  4466                           
  4467                           ;Functions.c: 9: if (Channel & 0x01)
  4468                           
  4469                           ;incstack = 0
  4470  0014F2  B001               	btfsc	Set_4051@Channel,0,c
  4471                           
  4472                           ;Functions.c: 10: {
  4473                           ;Functions.c: 11: do { LATA6 = ~LATA6; } while(0);
  4474  0014F4  7C89               	btg	3977,6,c	;volatile
  4475                           
  4476                           ;Functions.c: 12: }
  4477                           ;Functions.c: 13: if ((Channel>>1) & 0x01)
  4478  0014F6  3402               	rlcf	Set_4051@Channel+1,w,c
  4479  0014F8  3002               	rrcf	Set_4051@Channel+1,w,c
  4480  0014FA  6E04               	movwf	(??_Set_4051+1)& (0+255),c
  4481  0014FC  3001               	rrcf	Set_4051@Channel,w,c
  4482  0014FE  6E03               	movwf	??_Set_4051& (0+255),c
  4483  001500  B003               	btfsc	??_Set_4051,0,c
  4484                           
  4485                           ;Functions.c: 14: {
  4486                           ;Functions.c: 15: do { LATC0 = ~LATC0; } while(0);
  4487  001502  708B               	btg	3979,0,c	;volatile
  4488                           
  4489                           ;Functions.c: 16: }
  4490                           ;Functions.c: 17: if ((Channel>>2) & 0x01)
  4491  001504  C001  F003         	movff	Set_4051@Channel,??_Set_4051
  4492  001508  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
  4493  00150C  3404               	rlcf	??_Set_4051+1,w,c
  4494  00150E  3204               	rrcf	??_Set_4051+1,f,c
  4495  001510  3203               	rrcf	??_Set_4051,f,c
  4496  001512  3404               	rlcf	??_Set_4051+1,w,c
  4497  001514  3204               	rrcf	??_Set_4051+1,f,c
  4498  001516  3203               	rrcf	??_Set_4051,f,c
  4499  001518  A003               	btfss	??_Set_4051,0,c
  4500  00151A  0012               	return	
  4501                           
  4502                           ;Functions.c: 18: {
  4503                           ;Functions.c: 19: do { LATC1 = ~LATC1; } while(0);
  4504  00151C  728B               	btg	3979,1,c	;volatile
  4505  00151E  0012               	return	
  4506  001520                     __end_of_Set_4051:
  4507                           	opt stack 0
  4508                           pclatu	equ	0xFFB
  4509                           pclath	equ	0xFFA
  4510                           tblptru	equ	0xFF8
  4511                           tblptrh	equ	0xFF7
  4512                           tblptrl	equ	0xFF6
  4513                           tablat	equ	0xFF5
  4514                           prodh	equ	0xFF4
  4515                           prodl	equ	0xFF3
  4516                           intcon	equ	0xFF2
  4517                           intcon2	equ	0xFF1
  4518                           postinc0	equ	0xFEE
  4519                           fsr0h	equ	0xFEA
  4520                           fsr0l	equ	0xFE9
  4521                           wreg	equ	0xFE8
  4522                           postinc1	equ	0xFE6
  4523                           postdec1	equ	0xFE5
  4524                           fsr1h	equ	0xFE2
  4525                           fsr1l	equ	0xFE1
  4526                           indf2	equ	0xFDF
  4527                           postinc2	equ	0xFDE
  4528                           postdec2	equ	0xFDD
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function _ADC_StartConversion *****************
  4534 ;; Defined at:
  4535 ;;		line 36 in file "mcc_generated_files/adc.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  channel         1    wreg     enum E8837
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  channel         1    1[COMRAM] enum E8837
  4540 ;; Return value:  Size  Location     Type
  4541 ;;		None               void
  4542 ;; Registers used:
  4543 ;;		wreg, status,2, status,0
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4549 ;;      Params:         0       0       0       0       0       0       0
  4550 ;;      Locals:         1       0       0       0       0       0       0
  4551 ;;      Temps:          1       0       0       0       0       0       0
  4552 ;;      Totals:         2       0       0       0       0       0       0
  4553 ;;Total ram usage:        2 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; This function calls:
  4556 ;;		Nothing
  4557 ;; This function is called by:
  4558 ;;		_ADC_ISR
  4559 ;;		_Battery_Read
  4560 ;;		_Temp_Read
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           	psect	text27
  4565  0015C4                     __ptext27:
  4566                           	opt stack 0
  4567  0015C4                     _ADC_StartConversion:
  4568                           	opt stack 24
  4569                           
  4570                           ;incstack = 0
  4571                           ;ADC_StartConversion@channel stored from wreg
  4572  0015C4  6E02               	movwf	ADC_StartConversion@channel,c
  4573                           
  4574                           ;adc.c: 39: ADCON0bits.CHS = channel;
  4575  0015C6  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  4576  0015CA  4601               	rlncf	??_ADC_StartConversion,f,c
  4577  0015CC  4601               	rlncf	??_ADC_StartConversion,f,c
  4578  0015CE  50C2               	movf	4034,w,c	;volatile
  4579  0015D0  1801               	xorwf	??_ADC_StartConversion,w,c
  4580  0015D2  0B83               	andlw	-125
  4581  0015D4  1801               	xorwf	??_ADC_StartConversion,w,c
  4582  0015D6  6EC2               	movwf	4034,c	;volatile
  4583                           
  4584                           ;adc.c: 42: ADCON0bits.ADON = 1;
  4585  0015D8  80C2               	bsf	4034,0,c	;volatile
  4586                           
  4587                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
  4588  0015DA  82C2               	bsf	4034,1,c	;volatile
  4589  0015DC  0012               	return	
  4590  0015DE                     __end_of_ADC_StartConversion:
  4591                           	opt stack 0
  4592                           pclatu	equ	0xFFB
  4593                           pclath	equ	0xFFA
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodh	equ	0xFF4
  4599                           prodl	equ	0xFF3
  4600                           intcon	equ	0xFF2
  4601                           intcon2	equ	0xFF1
  4602                           postinc0	equ	0xFEE
  4603                           fsr0h	equ	0xFEA
  4604                           fsr0l	equ	0xFE9
  4605                           wreg	equ	0xFE8
  4606                           postinc1	equ	0xFE6
  4607                           postdec1	equ	0xFE5
  4608                           fsr1h	equ	0xFE2
  4609                           fsr1l	equ	0xFE1
  4610                           indf2	equ	0xFDF
  4611                           postinc2	equ	0xFDE
  4612                           postdec2	equ	0xFDD
  4613                           fsr2h	equ	0xFDA
  4614                           fsr2l	equ	0xFD9
  4615                           status	equ	0xFD8
  4616                           
  4617 ;; *************** function _ADC_GetConversionResult *****************
  4618 ;; Defined at:
  4619 ;;		line 55 in file "mcc_generated_files/adc.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  2    0[COMRAM] unsigned int 
  4626 ;; Registers used:
  4627 ;;		wreg, status,2, status,0
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4633 ;;      Params:         2       0       0       0       0       0       0
  4634 ;;      Locals:         0       0       0       0       0       0       0
  4635 ;;      Temps:          2       0       0       0       0       0       0
  4636 ;;      Totals:         4       0       0       0       0       0       0
  4637 ;;Total ram usage:        4 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_ADC_ISR
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text28
  4647  0015F6                     __ptext28:
  4648                           	opt stack 0
  4649  0015F6                     _ADC_GetConversionResult:
  4650                           	opt stack 24
  4651                           
  4652                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
  4653                           
  4654                           ;incstack = 0
  4655  0015F6  50C4               	movf	4036,w,c	;volatile
  4656  0015F8  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  4657  0015FA  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
  4658  0015FC  50C3               	movf	4035,w,c	;volatile
  4659  0015FE  2403               	addwf	??_ADC_GetConversionResult,w,c
  4660  001600  6E01               	movwf	?_ADC_GetConversionResult,c
  4661  001602  0E00               	movlw	0
  4662  001604  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
  4663  001606  6E02               	movwf	?_ADC_GetConversionResult+1,c
  4664  001608  0012               	return	
  4665  00160A                     __end_of_ADC_GetConversionResult:
  4666                           	opt stack 0
  4667                           pclatu	equ	0xFFB
  4668                           pclath	equ	0xFFA
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           prodh	equ	0xFF4
  4674                           prodl	equ	0xFF3
  4675                           intcon	equ	0xFF2
  4676                           intcon2	equ	0xFF1
  4677                           postinc0	equ	0xFEE
  4678                           fsr0h	equ	0xFEA
  4679                           fsr0l	equ	0xFE9
  4680                           wreg	equ	0xFE8
  4681                           postinc1	equ	0xFE6
  4682                           postdec1	equ	0xFE5
  4683                           fsr1h	equ	0xFE2
  4684                           fsr1l	equ	0xFE1
  4685                           indf2	equ	0xFDF
  4686                           postinc2	equ	0xFDE
  4687                           postdec2	equ	0xFDD
  4688                           fsr2h	equ	0xFDA
  4689                           fsr2l	equ	0xFD9
  4690                           status	equ	0xFD8
  4691                           pclatu	equ	0xFFB
  4692                           pclath	equ	0xFFA
  4693                           tblptru	equ	0xFF8
  4694                           tblptrh	equ	0xFF7
  4695                           tblptrl	equ	0xFF6
  4696                           tablat	equ	0xFF5
  4697                           prodh	equ	0xFF4
  4698                           prodl	equ	0xFF3
  4699                           intcon	equ	0xFF2
  4700                           intcon2	equ	0xFF1
  4701                           postinc0	equ	0xFEE
  4702                           fsr0h	equ	0xFEA
  4703                           fsr0l	equ	0xFE9
  4704                           wreg	equ	0xFE8
  4705                           postinc1	equ	0xFE6
  4706                           postdec1	equ	0xFE5
  4707                           fsr1h	equ	0xFE2
  4708                           fsr1l	equ	0xFE1
  4709                           indf2	equ	0xFDF
  4710                           postinc2	equ	0xFDE
  4711                           postdec2	equ	0xFDD
  4712                           fsr2h	equ	0xFDA
  4713                           fsr2l	equ	0xFD9
  4714                           status	equ	0xFD8
  4715                           
  4716                           	psect	rparam
  4717  0000                     pclatu	equ	0xFFB
  4718                           pclath	equ	0xFFA
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           intcon	equ	0xFF2
  4726                           intcon2	equ	0xFF1
  4727                           postinc0	equ	0xFEE
  4728                           fsr0h	equ	0xFEA
  4729                           fsr0l	equ	0xFE9
  4730                           wreg	equ	0xFE8
  4731                           postinc1	equ	0xFE6
  4732                           postdec1	equ	0xFE5
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           postinc2	equ	0xFDE
  4737                           postdec2	equ	0xFDD
  4738                           fsr2h	equ	0xFDA
  4739                           fsr2l	equ	0xFD9
  4740                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        0
    BSS         251
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     51      73
    BANK0           160     18     160
    BANK1           256      5      95
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _Temp_Fault->___ftge
    _Battery_Fault->___ftge
    ___ftge->___wmul
    ___awtoft->___wmul
    _Battery_Filter->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Battery_Convert
    _Battery_Convert->_Battery_Filter
    _Battery_Filter->___ftadd

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   32611
                                              0 BANK1      5     0      5
                    _Battery_Convert
                      _Battery_Fault
                  _SYSTEM_Initialize
                         _Temp_Fault
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    3880
                                             45 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    3911
                                             45 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                             36 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   24820
                                             14 BANK0      4     4      0
                     _Battery_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2733
                                             36 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1061
                                             22 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   12712
                                             12 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3248
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4237
                                             36 COMRAM    15     9      6
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    4936
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2385
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                          14    14      0    1171
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             3     3      0       0
                                              0 COMRAM     3     3      0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR1_CallBack                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ADC_ISR                                              4     4      0    1171
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (7) _Set_4051                                             4     2      2     706
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftmul
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      5      5F       6       37.1%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     12      A0       4      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     33      49       1       76.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     148       9        0.0%
DATA                 0      0     148      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Mar 27 02:06:10 2015

           _eusart1TxBufferRemaining 0049                         ___awdiv@sign 001C  
                ___wmul@multiplicand 0021                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                         ___ftadd@exp1 00F9  
                       ___ftadd@exp2 00F8                         ___ftadd@sign 00F7  
                                l808 0CC8                                  l790 0BB4  
                                l784 0B52                                  l788 0B8C  
                                l799 0C9E                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                      _timer1ReloadVal 0047  
                    __end_of_ADC_ISR 0AE6                                  prod 000FF3  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                    ?_Battery_Filter 0001                                 l2134 12C8  
                               l2144 1324                                 l2138 12F8  
                               l2700 0C40                                 l2630 1174  
                               l2710 0C94                                 l2702 0C4C  
                               l2640 11D0                                 l2632 1192  
                               l2624 115C                                 l2810 1218  
                               l2636 11A8                                 l2628 116A  
                               l2716 0CF2                                 l2708 0C80  
                               l2638 11C6                                 l2726 0D40  
                               l2742 0F22                                 l2822 124E  
                               l2680 0BAA                                 l2760 0F64  
                               l2736 0EFC                                 l2824 1256  
                               l2816 1238                                 l2690 0BEC  
                               l2674 0B9A                                 l2770 0F8C  
                               l2842 128E                                 l2834 1276  
                               l2826 125A                                 l2668 0B60  
                               l2756 0F54                                 l2766 0F7C  
                               l2790 0E5A                                 l2838 1280  
                               l2854 1404                                 l2870 1146  
                               l2696 0C20                                 l2698 0C34  
                               l2886 1098                                 l2898 138C  
                               l2994 1528                                 u2101 0EE6  
                               u2121 0F0C                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u1901 0B1E                                 u1891 0AFE  
                               _TMR1 000FCE                                 _WPUB 000F61  
                               _main 1520                         ___ftpack@arg 0017  
                       ___ftpack@exp 001A                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                      __CFG_BORV$190 000000                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A8                        __CFG_IESO$OFF 000000  
                       ___ftmul@cntr 0032                         ___ftmul@sign 0033  
                  ADC_ISR@ADC_Result 0007                     ?_Battery_Convert 0001  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 1618  
                              ?_main 015A                      __end_of___awdiv 1298  
                    __end_of___ftadd 0D66                      _TMR1_StartTimer 1624  
                    __end_of___ftmul 0FC6                      ___awdiv@divisor 0019  
                              _T1CON 000FCD                                _LATC0 007C58  
                              _LATC1 007C59                                _LATA6 007C4E  
                     __CFG_DEBUG$OFF 000000                                i2l122 1490  
                              i2l270 004C                                i2l272 0058  
                              i2l274 0064                                i2l278 006E  
                    ___awdiv@counter 001B                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
   __size_of_ADC_GetConversionResult 0014                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 1464  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     __end_of_TMR1_ISR 15C4  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 0028                                _errno 003E  
                 __CFG_MCLRE$EXTMCLR 000000                        ___ftpack@sign 001B  
            __end_of_TMR1_Initialize 1590                          _Battery_Adc 009C  
                              tablat 000FF5                                status 000FD8  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
                    __initialization 14C4           __end_of_EUSART1_Initialize 1464  
                       __end_of_main 1548                     __end_of_Set_4051 1520  
                          ??_ADC_ISR 0005          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 0034                        __activetblptr 000002  
         ADC_StartConversion@channel 0002                ?_EUSART1_Transmit_ISR 0001  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     ___awdiv@dividend 0017  
                   __end_of___awtoft 1428                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                   __end_of___ftpack 11F4                               _T1GCON 000FCC  
                             _RC1REG 000FAE                               _RC1STA 000FAB  
                             i2l2200 06A8                               i2l2300 0A7A  
                             i2l2212 0714                               i2l2230 07B6  
                             i2l2206 06DE                               i2l2304 0A8C  
                             i2l2224 0780                               i2l1440 148C  
                             i2l2306 0AE0                               i2l2242 0822  
                             i2l2218 074A                               i2l2260 08D6  
                             i2l2236 07EC                               i2l2252 086A  
                             i2l2180 14C0                               i2l2172 149C  
                             i2l2254 08BE                               i2l2280 09A8  
                             i2l2272 0954                               i2l2264 0900  
                             i2l2248 0858                               i2l2256 08C2  
                             i2l2194 0672                               i2l2292 0A26  
                             i2l2284 09D2                               i2l2276 097E  
                             i2l2268 092A                               i2l2188 063C  
                     __CFG_WDTEN$OFF 000000                               i2l2296 0A50  
                             i2l2288 09FC                               _RCREG1 000FAE  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1REG 000FAD                               _TX1STA 000FAC  
                             _TXREG1 000FAD                           _Temp_Fault 1328  
                     __CFG_XINST$OFF 000000                               ___ftge 1298  
            __end_of_TMR1_StartTimer 1628                               ___wmul 1548  
                          ??___awdiv 001B                            ??___ftadd 00F4  
                     __CFG_STVREN$ON 000000                            ??___ftmul 002B  
                             clear_0 14CA                               clear_1 14D6  
                             clear_2 14E2                     ___awdiv@quotient 001D  
              ___ftmul@f3_as_product 002F                         _Battery_Volt 0060  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                    _eusart1RxBuffer 00B0        __size_of_INTERRUPT_Initialize 000C  
              __end_of_TMR1_CallBack 162A                      _eusart1TxBuffer 0034  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 1590  
                   __end_oflog@coeff 061C                           __accesstop 0060  
            __end_of__initialization 14E8                           ___ftadd@f1 00EE  
                         ___ftadd@f2 00F1                           ___ftge@ff1 0025  
                         ___ftge@ff2 0028                   ?_SYSTEM_Initialize 0001  
                         ___awtoft@c 0025                           ___ftmul@f1 0025  
                         ___ftmul@f2 0028         __size_of_ADC_StartConversion 001A  
                     __pcstackCOMRAM 0001                  ??_SYSTEM_Initialize 0017  
                          ?_TMR1_ISR 0001               ??_EUSART1_Transmit_ISR 0001  
            _ADC_GetConversionResult 15F6                     ??_Battery_Filter 0034  
        __end_of_EUSART1_Receive_ISR 14C4            __end_of_SYSTEM_Initialize 15AA  
                      _eusart1RxHead 0043                        _eusart1TxHead 0045  
                      _eusart1RxTail 0044                           __pbssBANK0 0060  
                         __pbssBANK1 0100                        _eusart1TxTail 0046  
                    __CFG_PLLCFG$OFF 000000                            ?_Set_4051 0001  
                         __pnvCOMRAM 0047                          ?_Temp_Fault 0001  
                 __CFG_CCP2MX$PORTC1 000000                          Temp_Fault@i 002F  
                            ?___ftge 0025                              ?___wmul 001F  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 0001  
                 __CFG_CCP3MX$PORTB5 000000                              _ADC_ISR 061E  
                          ?___awtoft 0025                            ?___ftpack 0017  
            __size_of_ADC_Initialize 0018               __size_of_Battery_Fault 00AE  
                    Temp_Fault@fault 002E                       Battery_Fault@i 002F  
                            _OSCCON2 000FD2                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                         ??_Set_4051 0003                          _Temp_Aquire 0040  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
                            __Lparam 0000                      __size_of___ftge 0090  
                            ___awdiv 11F4                              ___ftadd 0AE6  
                    __size_of___wmul 0026                              ___ftmul 0ED6  
                       __psmallconst 0600            ??_ADC_GetConversionResult 0003  
                            __pcinit 14C4                           ??___awtoft 0028  
                         ??___ftpack 001C                              __ramtop 0600  
                            __ptext0 1520                              __ptext1 1328  
                            __ptext2 1590                              __ptext3 156E  
                            __ptext4 1624                              __ptext5 1392  
                            __ptext6 160A                              __ptext7 1618  
                            __ptext8 1428                              __ptext9 15DE  
                          _T1CONbits 000FCD                _OSCILLATOR_Initialize 160A  
                __size_of_Temp_Fault 006A                   _EUSART1_Initialize 1428  
           ??_PIN_MANAGER_Initialize 0017             __size_of_Battery_Convert 00D8  
         __size_of_SYSTEM_Initialize 001A                 end_of_initialization 14E8  
                ?_EUSART1_Initialize 0001                        __Lmediumconst 0000  
                      _Battery_Fault 109E                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                   Battery_Convert@x 00FE                 ??_EUSART1_Initialize 0017  
                _ADC_StartConversion 15C4                          _Volt_Aquire 0041  
                     ?_Battery_Fault 0001                          ___ftmul@exp 002E  
               ?_ADC_StartConversion 0001         __end_of_INTERRUPT_Initialize 1624  
                     __end_of___ftge 1328                       __end_of___wmul 156E  
                  __size_of_TMR1_ISR 001A                       _ADC_Initialize 15DE  
             ?_OSCILLATOR_Initialize 0001                  start_initialization 14C4  
    __size_of_PIN_MANAGER_Initialize 004E                    ??_Battery_Convert 00FC  
                       ??_Temp_Fault 002E                    __size_of_Set_4051 002E  
                          _Temp_DegF 007E                     _PrevBattery_Volt 0100  
                          _Temp_Done 00B8                ??_ADC_StartConversion 0001  
           __size_of_TMR1_Initialize 0022                             ??___ftge 002B  
                           ??___wmul 0023               __end_of_ADC_Initialize 15F6  
                           ?_ADC_ISR 0001               __size_of_TMR1_CallBack 0002  
                     _eusart1RxCount 0042                    __size_of___awtoft 0048  
                  __size_of___ftpack 00A8                            _Volt_Done 00BA  
                        __pbssCOMRAM 0034        __size_of_EUSART1_Transmit_ISR 0030  
                      __pcstackBANK0 00EE                        __pcstackBANK1 015A  
                 __end_of_Temp_Fault 1392                        _PrevTemp_DegF 011E  
                    ??_Battery_Fault 002E         __size_of_EUSART1_Receive_ISR 0030  
             _PIN_MANAGER_Initialize 1392                            __pintcode 0008  
                           ?___awdiv 0017                             ?___ftadd 00EE  
                           ?___ftmul 0025                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 0009                             _BAUD1CON 000FB8  
                        __smallconst 0600             __size_of_TMR1_StartTimer 0004  
               _INTERRUPT_Initialize 1618                        _TMR1_CallBack 1628  
            __size_of_Battery_Filter 0170                       ___wmul@product 0023  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
__size_of_INTERRUPT_InterruptManager 00A0                             _PIR1bits 000F9E  
                    Battery_Filter@x 00FA                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 15AA  
                  ??_TMR1_Initialize 0017                     __size_of_ADC_ISR 04C8  
                         _ADCON0bits 000FC2                    ___wmul@multiplier 001F  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0001  
                     ?_TMR1_CallBack 0001                             _Set_4051 14F2  
                           __Hrparam 0000                             _Temp_Adc 00DA  
                           __Lrparam 0000             ?_ADC_GetConversionResult 0001  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 0017                     __size_of___awdiv 00A4  
                   __size_of___ftadd 0280                     __size_of___ftmul 00F0  
        __size_of_EUSART1_Initialize 003C                             ___awtoft 13E0  
                           ___ftpack 114C                      _Battery_Convert 0FC6  
                 Battery_Fault@fault 002E                             __ptext10 109E  
                           __ptext11 1298                             __ptext12 0FC6  
                           __ptext21 15AA                             __ptext13 13E0  
                         _T1GCONbits 000FCC                             __ptext22 1628  
                           __ptext14 11F4                             __ptext23 1464  
                           __ptext15 0D66                             __ptext24 1494  
                           __ptext16 1548                             __ptext25 061E  
                           __ptext17 0ED6                             __ptext26 14F2  
                           __ptext18 0AE6                             __ptext27 15C4  
                           __ptext19 114C                             __ptext28 15F6  
                  ??_TMR1_StartTimer 0017                        __size_of_main 0028  
                       _TmpTemp_DegF 013C                           _RC1STAbits 000FAB  
 __end_of_INTERRUPT_InterruptManager 00A8           _INTERRUPT_InterruptManager 0008  
                           main@argc 015A                             main@argv 015C  
                _EUSART1_Receive_ISR 1494                             log@coeff 0601  
                         _INTCONbits 000FF2               ??_INTERRUPT_Initialize 0017  
                    ??_TMR1_CallBack 0001                             intlevel2 0000  
                     _Battery_Filter 0D66                 ?_EUSART1_Receive_ISR 0001  
        __end_of_ADC_StartConversion 15DE                     _TempBattery_Volt 00BC  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 160A  
       __end_of_EUSART1_Transmit_ISR 1494                     ??_ADC_Initialize 0017  
            __end_of_Battery_Convert 109E                    __CFG_T3CMX$PORTC0 000000  
             __end_of_Battery_Filter 0ED6                ??_EUSART1_Receive_ISR 0001  
     __end_of_PIN_MANAGER_Initialize 13E0                __end_of_Battery_Fault 114C  
                  __CFG_FOSC$INTIO67 000000                      _TMR1_Initialize 156E  
                   _ADC_Buffer_Point 003C                      Set_4051@Channel 0001  
