

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Mar 25 23:19:25 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    35  0000                     _TMR1	set	4046
    36  0000                     _ADCON0	set	4034
    37  0000                     _ADCON0bits	set	4034
    38  0000                     _ADCON1	set	4033
    39  0000                     _ADCON2	set	4032
    40  0000                     _ADRESH	set	4036
    41  0000                     _ADRESL	set	4035
    42  0000                     _ANSELA	set	3896
    43  0000                     _ANSELB	set	3897
    44  0000                     _ANSELC	set	3898
    45  0000                     _ANSELD	set	3899
    46  0000                     _ANSELE	set	3900
    47  0000                     _BAUD1CON	set	4024
    48  0000                     _INTCON2bits	set	4081
    49  0000                     _INTCONbits	set	4082
    50  0000                     _IPR1bits	set	3999
    51  0000                     _LATA	set	3977
    52  0000                     _LATB	set	3978
    53  0000                     _LATC	set	3979
    54  0000                     _LATD	set	3980
    55  0000                     _LATE	set	3981
    56  0000                     _OSCCON	set	4051
    57  0000                     _OSCCON2	set	4050
    58  0000                     _OSCTUNE	set	3995
    59  0000                     _PIE1bits	set	3997
    60  0000                     _PIR1bits	set	3998
    61  0000                     _RC1REG	set	4014
    62  0000                     _RC1STA	set	4011
    63  0000                     _RC1STAbits	set	4011
    64  0000                     _RCONbits	set	4048
    65  0000                     _RCREG1	set	4014
    66  0000                     _SPBRG1	set	4015
    67  0000                     _SPBRGH1	set	4016
    68  0000                     _T1CON	set	4045
    69  0000                     _T1CONbits	set	4045
    70  0000                     _T1GCON	set	4044
    71  0000                     _T1GCONbits	set	4044
    72  0000                     _TMR1H	set	4047
    73  0000                     _TMR1L	set	4046
    74  0000                     _TRISA	set	3986
    75  0000                     _TRISB	set	3987
    76  0000                     _TRISC	set	3988
    77  0000                     _TRISD	set	3989
    78  0000                     _TRISE	set	3990
    79  0000                     _TX1REG	set	4013
    80  0000                     _TX1STA	set	4012
    81  0000                     _TXREG1	set	4013
    82  0000                     _WPUB	set	3937
    83  0000                     _LATA6	set	31822
    84  0000                     _LATC0	set	31832
    85  0000                     _LATC1	set	31833
    86                           
    87                           	psect	nvCOMRAM
    88  000047                     __pnvCOMRAM:
    89                           	opt stack 0
    90  000047                     _timer1ReloadVal:
    91                           	opt stack 0
    92  000047                     	ds	2
    93  000049                     _eusart1TxBufferRemaining:
    94                           	opt stack 0
    95  000049                     	ds	1
    96                           
    97                           ; #config settings
    98  0000                     
    99                           	psect	cinit
   100  0008FC                     __pcinit:
   101                           	opt stack 0
   102  0008FC                     start_initialization:
   103                           	opt stack 0
   104  0008FC                     __initialization:
   105                           	opt stack 0
   106                           
   107                           ; Clear objects allocated to BANK0 (76 bytes)
   108  0008FC  EE00  F060         	lfsr	0,__pbssBANK0
   109  000900  0E4C               	movlw	76
   110  000902                     clear_0:
   111  000902  6AEE               	clrf	postinc0,c
   112  000904  06E8               	decf	wreg,f,c
   113  000906  E1FD               	bnz	clear_0
   114                           
   115                           ; Clear objects allocated to COMRAM (33 bytes)
   116  000908  EE00  F026         	lfsr	0,__pbssCOMRAM
   117  00090C  0E21               	movlw	33
   118  00090E                     clear_1:
   119  00090E  6AEE               	clrf	postinc0,c
   120  000910  06E8               	decf	wreg,f,c
   121  000912  E1FD               	bnz	clear_1
   122  000914                     end_of_initialization:
   123                           	opt stack 0
   124  000914                     __end_of__initialization:
   125                           	opt stack 0
   126  000914  0E00               	movlw	low (__Lmediumconst shr (0+16))
   127  000916  6EF8               	movwf	tblptru,c
   128  000918  0100               	movlb	0
   129  00091A  EFA0  F004         	goto	_main	;jump to C main() function
   130                           tblptru	equ	0xFF8
   131                           postinc0	equ	0xFEE
   132                           wreg	equ	0xFE8
   133                           
   134                           	psect	bssCOMRAM
   135  000026                     __pbssCOMRAM:
   136                           	opt stack 0
   137  000026                     _Temp_Adc:
   138                           	opt stack 0
   139  000026                     	ds	20
   140  00003A                     _ADC_Buffer_Point:
   141                           	opt stack 0
   142  00003A                     	ds	2
   143  00003C                     _Temp_Done:
   144                           	opt stack 0
   145  00003C                     	ds	2
   146  00003E                     _Volt_Done:
   147                           	opt stack 0
   148  00003E                     	ds	2
   149  000040                     _Temp_Aquire:
   150                           	opt stack 0
   151  000040                     	ds	1
   152  000041                     _Volt_Aquire:
   153                           	opt stack 0
   154  000041                     	ds	1
   155  000042                     _eusart1RxCount:
   156                           	opt stack 0
   157  000042                     	ds	1
   158  000043                     _eusart1RxHead:
   159                           	opt stack 0
   160  000043                     	ds	1
   161  000044                     _eusart1RxTail:
   162                           	opt stack 0
   163  000044                     	ds	1
   164  000045                     _eusart1TxHead:
   165                           	opt stack 0
   166  000045                     	ds	1
   167  000046                     _eusart1TxTail:
   168                           	opt stack 0
   169  000046                     	ds	1
   170                           tblptru	equ	0xFF8
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           
   174                           	psect	bssBANK0
   175  000060                     __pbssBANK0:
   176                           	opt stack 0
   177  000060                     _Battery_Adc:
   178                           	opt stack 0
   179  000060                     	ds	20
   180  000074                     _Battery_Volt:
   181                           	opt stack 0
   182  000074                     	ds	20
   183  000088                     _Temp_DegF:
   184                           	opt stack 0
   185  000088                     	ds	20
   186  00009C                     _eusart1RxBuffer:
   187                           	opt stack 0
   188  00009C                     	ds	8
   189  0000A4                     _eusart1TxBuffer:
   190                           	opt stack 0
   191  0000A4                     	ds	8
   192                           tblptru	equ	0xFF8
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           
   196                           	psect	cstackBANK0
   197  0000AC                     __pcstackBANK0:
   198                           	opt stack 0
   199  0000AC                     ___ftge@ff1:
   200                           	opt stack 0
   201                           
   202                           ; 3 bytes @ 0x0
   203  0000AC                     	ds	3
   204  0000AF                     ___ftge@ff2:
   205                           	opt stack 0
   206                           
   207                           ; 3 bytes @ 0x3
   208  0000AF                     	ds	3
   209  0000B2                     ??_Battery_Fault:
   210  0000B2                     ??_Temp_Fault:
   211                           
   212                           ; 0 bytes @ 0x6
   213  0000B2                     	ds	2
   214  0000B4                     Battery_Fault@fault:
   215                           	opt stack 0
   216  0000B4                     Temp_Fault@fault:
   217                           	opt stack 0
   218                           
   219                           ; 1 bytes @ 0x8
   220  0000B4                     	ds	1
   221  0000B5                     Battery_Fault@i:
   222                           	opt stack 0
   223  0000B5                     Temp_Fault@i:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0x9
   227  0000B5                     	ds	2
   228  0000B7                     
   229                           ; 2 bytes @ 0xB
   230  0000B7                     	ds	2
   231  0000B9                     
   232                           ; 3 bytes @ 0xD
   233  0000B9                     	ds	3
   234                           tblptru	equ	0xFF8
   235                           postinc0	equ	0xFEE
   236                           wreg	equ	0xFE8
   237                           
   238                           	psect	cstackCOMRAM
   239  000001                     __pcstackCOMRAM:
   240                           	opt stack 0
   241  000001                     ??_TMR1_ISR:
   242  000001                     ??_ADC_StartConversion:
   243  000001                     ?_ADC_GetConversionResult:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x0
   247  000001                     	ds	1
   248  000002                     ADC_StartConversion@channel:
   249                           	opt stack 0
   250                           
   251                           ; 1 bytes @ 0x1
   252  000002                     	ds	1
   253  000003                     ??_ADC_GetConversionResult:
   254                           
   255                           ; 0 bytes @ 0x2
   256  000003                     	ds	2
   257  000005                     ??_ADC_ISR:
   258                           
   259                           ; 0 bytes @ 0x4
   260  000005                     	ds	2
   261  000007                     ADC_ISR@ADC_Result:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x6
   265  000007                     	ds	2
   266  000009                     ??_INTERRUPT_InterruptManager:
   267                           
   268                           ; 0 bytes @ 0x8
   269  000009                     	ds	14
   270  000017                     ?___ftpack:
   271                           	opt stack 0
   272  000017                     ___ftpack@arg:
   273                           	opt stack 0
   274                           
   275                           ; 3 bytes @ 0x16
   276  000017                     	ds	3
   277  00001A                     ___ftpack@exp:
   278                           	opt stack 0
   279                           
   280                           ; 1 bytes @ 0x19
   281  00001A                     	ds	1
   282  00001B                     ___ftpack@sign:
   283                           	opt stack 0
   284                           
   285                           ; 1 bytes @ 0x1A
   286  00001B                     	ds	1
   287  00001C                     ??___ftpack:
   288                           
   289                           ; 0 bytes @ 0x1B
   290  00001C                     	ds	3
   291  00001F                     ?___awtoft:
   292                           	opt stack 0
   293  00001F                     ___awtoft@c:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0x1E
   297  00001F                     	ds	3
   298  000022                     ___awtoft@sign:
   299                           	opt stack 0
   300                           
   301                           ; 1 bytes @ 0x21
   302  000022                     	ds	1
   303  000023                     ??___ftge:
   304                           
   305                           ; 0 bytes @ 0x22
   306  000023                     	ds	3
   307  000026                     tblptru	equ	0xFF8
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           
   311                           ; 0 bytes @ 0x25
   312 ;;
   313 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   314 ;;
   315 ;; *************** function _main *****************
   316 ;; Defined at:
   317 ;;		line 31 in file "Main.c"
   318 ;; Parameters:    Size  Location     Type
   319 ;;  argc            2   11[BANK0 ] int 
   320 ;;  argv            3   13[BANK0 ] PTR PTR unsigned char 
   321 ;; Auto vars:     Size  Location     Type
   322 ;;		None
   323 ;; Return value:  Size  Location     Type
   324 ;;                  2   11[BANK0 ] int 
   325 ;; Registers used:
   326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
   327 ;; Tracked objects:
   328 ;;		On entry : 0/0
   329 ;;		On exit  : 0/0
   330 ;;		Unchanged: 0/0
   331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   332 ;;      Params:         0       5       0       0       0       0       0
   333 ;;      Locals:         0       0       0       0       0       0       0
   334 ;;      Temps:          0       0       0       0       0       0       0
   335 ;;      Totals:         0       5       0       0       0       0       0
   336 ;;Total ram usage:        5 bytes
   337 ;; Hardware stack levels required when called:    6
   338 ;; This function calls:
   339 ;;		_Battery_Fault
   340 ;;		_SYSTEM_Initialize
   341 ;;		_Temp_Fault
   342 ;; This function is called by:
   343 ;;		Startup code after reset
   344 ;; This function uses a non-reentrant model
   345 ;;
   346                           
   347                           	psect	text0
   348  000940                     __ptext0:
   349                           	opt stack 0
   350  000940                     _main:
   351                           	opt stack 25
   352                           
   353                           ;Main.c: 33: SYSTEM_Initialize();
   354                           
   355                           ;incstack = 0
   356  000940  ECB0  F004         	call	_SYSTEM_Initialize	;wreg free
   357                           
   358                           ;Main.c: 52: (INTCONbits.GIE = 1);
   359  000944  8EF2               	bsf	intcon,7,c	;volatile
   360                           
   361                           ;Main.c: 55: (INTCONbits.PEIE = 1);
   362  000946  8CF2               	bsf	intcon,6,c	;volatile
   363  000948                     l1938:
   364                           
   365                           ;Main.c: 65: {
   366                           ;Main.c: 66: if (Temp_Done)
   367  000948  503D               	movf	_Temp_Done+1,w,c
   368  00094A  103C               	iorwf	_Temp_Done,w,c
   369  00094C  A4D8               	btfss	status,2,c
   370                           
   371                           ;Main.c: 67: {
   372                           ;Main.c: 68: Temp_Fault();
   373  00094E  EC9F  F003         	call	_Temp_Fault	;wreg free
   374                           
   375                           ;Main.c: 69: }
   376                           ;Main.c: 70: if (Volt_Done)
   377  000952  503F               	movf	_Volt_Done+1,w,c
   378  000954  103E               	iorwf	_Volt_Done,w,c
   379  000956  B4D8               	btfsc	status,2,c
   380  000958  D7F7               	goto	l1938
   381                           
   382                           ;Main.c: 71: {
   383                           ;Main.c: 72: Battery_Fault();
   384  00095A  EC7A  F002         	call	_Battery_Fault	;wreg free
   385  00095E  D7F4               	goto	l1938
   386  000960                     __end_of_main:
   387                           	opt stack 0
   388                           tblptru	equ	0xFF8
   389                           intcon	equ	0xFF2
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           status	equ	0xFD8
   393                           
   394 ;; *************** function _Temp_Fault *****************
   395 ;; Defined at:
   396 ;;		line 9 in file "Tempeture.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;		None
   399 ;; Auto vars:     Size  Location     Type
   400 ;;  i               2    9[BANK0 ] int 
   401 ;;  fault           1    8[BANK0 ] unsigned char 
   402 ;; Return value:  Size  Location     Type
   403 ;;                  1    wreg      unsigned char 
   404 ;; Registers used:
   405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
   406 ;; Tracked objects:
   407 ;;		On entry : 0/0
   408 ;;		On exit  : 0/0
   409 ;;		Unchanged: 0/0
   410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   411 ;;      Params:         0       0       0       0       0       0       0
   412 ;;      Locals:         0       3       0       0       0       0       0
   413 ;;      Temps:          0       2       0       0       0       0       0
   414 ;;      Totals:         0       5       0       0       0       0       0
   415 ;;Total ram usage:        5 bytes
   416 ;; Hardware stack levels used:    1
   417 ;; Hardware stack levels required when called:    5
   418 ;; This function calls:
   419 ;;		___awtoft
   420 ;;		___ftge
   421 ;; This function is called by:
   422 ;;		_main
   423 ;; This function uses a non-reentrant model
   424 ;;
   425                           
   426                           	psect	text1
   427  00073E                     __ptext1:
   428                           	opt stack 0
   429  00073E                     _Temp_Fault:
   430                           	opt stack 25
   431                           
   432                           ;Tempeture.c: 12: char fault = 0;
   433                           
   434                           ;incstack = 0
   435  00073E  0E00               	movlw	0
   436  000740  0100               	movlb	0	; () banked
   437  000742  6FB4               	movwf	Temp_Fault@fault& (0+255),b
   438                           
   439                           ;Tempeture.c: 13: for(int i = 0;i<9;i++)
   440  000744  0E00               	movlw	0
   441  000746  0100               	movlb	0	; () banked
   442  000748  6FB6               	movwf	(Temp_Fault@i+1)& (0+255),b
   443  00074A  0E00               	movlw	0
   444  00074C  0100               	movlb	0	; () banked
   445  00074E  6FB5               	movwf	Temp_Fault@i& (0+255),b
   446  000750                     
   447                           ; BSR set to: 0
   448  000750  0100               	movlb	0	; () banked
   449  000752  51B6               	movf	(Temp_Fault@i+1)& (0+255),w,b
   450  000754  0A80               	xorlw	128
   451  000756  0F80               	addlw	-128
   452  000758  0E09               	movlw	9
   453  00075A  B4D8               	btfsc	status,2,c
   454  00075C  5DB5               	subwf	Temp_Fault@i& (0+255),w,b
   455  00075E  B0D8               	btfsc	status,0,c
   456  000760  0012               	return	
   457                           
   458                           ; BSR set to: 0
   459                           ;Tempeture.c: 14: {
   460                           ;Tempeture.c: 15: if (60.5 > Temp_DegF[i])
   461                           
   462                           ; BSR set to: 0
   463                           
   464                           ; BSR set to: 0
   465  000762  0E88               	movlw	low _Temp_DegF
   466  000764  0100               	movlb	0	; () banked
   467  000766  6FB2               	movwf	??_Temp_Fault& (0+255),b
   468  000768  0E00               	movlw	high _Temp_DegF
   469  00076A  6FB3               	movwf	(??_Temp_Fault+1)& (0+255),b
   470  00076C  90D8               	bcf	status,0,c
   471  00076E  0100               	movlb	0	; () banked
   472  000770  35B5               	rlcf	Temp_Fault@i& (0+255),w,b
   473  000772  6ED9               	movwf	fsr2l,c
   474  000774  0100               	movlb	0	; () banked
   475  000776  35B6               	rlcf	(Temp_Fault@i+1)& (0+255),w,b
   476  000778  6EDA               	movwf	fsr2h,c
   477  00077A  0100               	movlb	0	; () banked
   478  00077C  51B2               	movf	??_Temp_Fault& (0+255),w,b
   479  00077E  26D9               	addwf	fsr2l,f,c
   480  000780  0100               	movlb	0	; () banked
   481  000782  51B3               	movf	(??_Temp_Fault+1)& (0+255),w,b
   482  000784  22DA               	addwfc	fsr2h,f,c
   483  000786  CFDE F01F          	movff	postinc2,___awtoft@c
   484  00078A  CFDD F020          	movff	postdec2,___awtoft@c+1
   485  00078E  EC0A  F004         	call	___awtoft	;wreg free
   486  000792  C01F  F0AC         	movff	?___awtoft,___ftge@ff1
   487  000796  C020  F0AD         	movff	?___awtoft+1,___ftge@ff1+1
   488  00079A  C021  F0AE         	movff	?___awtoft+2,___ftge@ff1+2
   489  00079E  0E00               	movlw	0
   490  0007A0  0100               	movlb	0	; () banked
   491  0007A2  6FAF               	movwf	___ftge@ff2& (0+255),b
   492  0007A4  0E72               	movlw	114
   493  0007A6  0100               	movlb	0	; () banked
   494  0007A8  6FB0               	movwf	(___ftge@ff2+1)& (0+255),b
   495  0007AA  0E42               	movlw	66
   496  0007AC  0100               	movlb	0	; () banked
   497  0007AE  6FB1               	movwf	(___ftge@ff2+2)& (0+255),b
   498  0007B0  ECE9  F002         	call	___ftge	;wreg free
   499  0007B4  B0D8               	btfsc	status,0,c
   500  0007B6  D003               	goto	l1928
   501                           
   502                           ;Tempeture.c: 16: {
   503                           ;Tempeture.c: 17: fault = 1;
   504  0007B8  0E01               	movlw	1
   505  0007BA  0100               	movlb	0	; () banked
   506  0007BC  6FB4               	movwf	Temp_Fault@fault& (0+255),b
   507  0007BE                     l1928:
   508  0007BE  0100               	movlb	0	; () banked
   509  0007C0  4BB5               	infsnz	Temp_Fault@i& (0+255),f,b
   510  0007C2  2BB6               	incf	(Temp_Fault@i+1)& (0+255),f,b
   511  0007C4  D7C5               	goto	L1
   512  0007C6                     __end_of_Temp_Fault:
   513                           	opt stack 0
   514                           tblptru	equ	0xFF8
   515                           intcon	equ	0xFF2
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           postinc2	equ	0xFDE
   519                           postdec2	equ	0xFDD
   520                           fsr2h	equ	0xFDA
   521                           fsr2l	equ	0xFD9
   522                           status	equ	0xFD8
   523                           
   524 ;; *************** function _SYSTEM_Initialize *****************
   525 ;; Defined at:
   526 ;;		line 112 in file "mcc_generated_files/mcc.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;		None
   531 ;; Return value:  Size  Location     Type
   532 ;;		None               void
   533 ;; Registers used:
   534 ;;		wreg, status,2, cstack
   535 ;; Tracked objects:
   536 ;;		On entry : 0/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   540 ;;      Params:         0       0       0       0       0       0       0
   541 ;;      Locals:         0       0       0       0       0       0       0
   542 ;;      Temps:          0       0       0       0       0       0       0
   543 ;;      Totals:         0       0       0       0       0       0       0
   544 ;;Total ram usage:        0 bytes
   545 ;; Hardware stack levels used:    1
   546 ;; Hardware stack levels required when called:    5
   547 ;; This function calls:
   548 ;;		_ADC_Initialize
   549 ;;		_EUSART1_Initialize
   550 ;;		_INTERRUPT_Initialize
   551 ;;		_OSCILLATOR_Initialize
   552 ;;		_PIN_MANAGER_Initialize
   553 ;;		_TMR1_Initialize
   554 ;; This function is called by:
   555 ;;		_main
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559                           	psect	text2
   560  000960                     __ptext2:
   561                           	opt stack 0
   562  000960                     _SYSTEM_Initialize:
   563                           	opt stack 25
   564                           
   565                           ;mcc.c: 114: OSCILLATOR_Initialize();
   566                           
   567                           ; BSR set to: 0
   568                           ;incstack = 0
   569  000960  ECED  F004         	call	_OSCILLATOR_Initialize	;wreg free
   570                           
   571                           ;mcc.c: 115: PIN_MANAGER_Initialize();
   572  000964  ECE3  F003         	call	_PIN_MANAGER_Initialize	;wreg free
   573                           
   574                           ;mcc.c: 116: INTERRUPT_Initialize();
   575  000968  ECF4  F004         	call	_INTERRUPT_Initialize	;wreg free
   576                           
   577                           ;mcc.c: 117: ADC_Initialize();
   578  00096C  ECD7  F004         	call	_ADC_Initialize	;wreg free
   579                           
   580                           ;mcc.c: 118: EUSART1_Initialize();
   581  000970  EC2E  F004         	call	_EUSART1_Initialize	;wreg free
   582                           
   583                           ;mcc.c: 119: TMR1_Initialize();
   584  000974  EC8F  F004         	call	_TMR1_Initialize	;wreg free
   585  000978  0012               	return	
   586  00097A                     __end_of_SYSTEM_Initialize:
   587                           	opt stack 0
   588                           tblptru	equ	0xFF8
   589                           intcon	equ	0xFF2
   590                           postinc0	equ	0xFEE
   591                           wreg	equ	0xFE8
   592                           postinc2	equ	0xFDE
   593                           postdec2	equ	0xFDD
   594                           fsr2h	equ	0xFDA
   595                           fsr2l	equ	0xFD9
   596                           status	equ	0xFD8
   597                           
   598 ;; *************** function _TMR1_Initialize *****************
   599 ;; Defined at:
   600 ;;		line 63 in file "mcc_generated_files/tmr1.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;		None
   603 ;; Auto vars:     Size  Location     Type
   604 ;;		None
   605 ;; Return value:  Size  Location     Type
   606 ;;		None               void
   607 ;; Registers used:
   608 ;;		wreg, status,2, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   614 ;;      Params:         0       0       0       0       0       0       0
   615 ;;      Locals:         0       0       0       0       0       0       0
   616 ;;      Temps:          0       0       0       0       0       0       0
   617 ;;      Totals:         0       0       0       0       0       0       0
   618 ;;Total ram usage:        0 bytes
   619 ;; Hardware stack levels used:    1
   620 ;; Hardware stack levels required when called:    4
   621 ;; This function calls:
   622 ;;		_TMR1_StartTimer
   623 ;; This function is called by:
   624 ;;		_SYSTEM_Initialize
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           	psect	text3
   629  00091E                     __ptext3:
   630                           	opt stack 0
   631  00091E                     _TMR1_Initialize:
   632                           	opt stack 25
   633                           
   634                           ;tmr1.c: 68: T1CON = 0x00;
   635                           
   636                           ;incstack = 0
   637  00091E  0E00               	movlw	0
   638  000920  6ECD               	movwf	4045,c	;volatile
   639                           
   640                           ;tmr1.c: 71: T1GCON = 0x00;
   641  000922  0E00               	movlw	0
   642  000924  6ECC               	movwf	4044,c	;volatile
   643                           
   644                           ;tmr1.c: 74: TMR1H = 0xB1;
   645  000926  0EB1               	movlw	177
   646  000928  6ECF               	movwf	4047,c	;volatile
   647                           
   648                           ;tmr1.c: 77: TMR1L = 0xE0;
   649  00092A  0EE0               	movlw	224
   650  00092C  6ECE               	movwf	4046,c	;volatile
   651                           
   652                           ;tmr1.c: 80: timer1ReloadVal=TMR1;
   653  00092E  CFCE F047          	movff	4046,_timer1ReloadVal	;volatile
   654  000932  CFCF F048          	movff	4047,_timer1ReloadVal+1	;volatile
   655                           
   656                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
   657  000936  909E               	bcf	3998,0,c	;volatile
   658                           
   659                           ;tmr1.c: 86: PIE1bits.TMR1IE = 1;
   660  000938  809D               	bsf	3997,0,c	;volatile
   661                           
   662                           ;tmr1.c: 89: TMR1_StartTimer();
   663  00093A  ECFA  F004         	call	_TMR1_StartTimer	;wreg free
   664  00093E  0012               	return	
   665  000940                     __end_of_TMR1_Initialize:
   666                           	opt stack 0
   667                           tblptru	equ	0xFF8
   668                           intcon	equ	0xFF2
   669                           postinc0	equ	0xFEE
   670                           wreg	equ	0xFE8
   671                           postinc2	equ	0xFDE
   672                           postdec2	equ	0xFDD
   673                           fsr2h	equ	0xFDA
   674                           fsr2l	equ	0xFD9
   675                           status	equ	0xFD8
   676                           
   677 ;; *************** function _TMR1_StartTimer *****************
   678 ;; Defined at:
   679 ;;		line 92 in file "mcc_generated_files/tmr1.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;		None
   682 ;; Auto vars:     Size  Location     Type
   683 ;;		None
   684 ;; Return value:  Size  Location     Type
   685 ;;		None               void
   686 ;; Registers used:
   687 ;;		None
   688 ;; Tracked objects:
   689 ;;		On entry : 0/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   693 ;;      Params:         0       0       0       0       0       0       0
   694 ;;      Locals:         0       0       0       0       0       0       0
   695 ;;      Temps:          0       0       0       0       0       0       0
   696 ;;      Totals:         0       0       0       0       0       0       0
   697 ;;Total ram usage:        0 bytes
   698 ;; Hardware stack levels used:    1
   699 ;; Hardware stack levels required when called:    3
   700 ;; This function calls:
   701 ;;		Nothing
   702 ;; This function is called by:
   703 ;;		_TMR1_Initialize
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           	psect	text4
   708  0009F4                     __ptext4:
   709                           	opt stack 0
   710  0009F4                     _TMR1_StartTimer:
   711                           	opt stack 25
   712                           
   713                           ;tmr1.c: 95: T1CONbits.TMR1ON = 1;
   714                           
   715                           ;incstack = 0
   716  0009F4  80CD               	bsf	4045,0,c	;volatile
   717  0009F6  0012               	return	
   718  0009F8                     __end_of_TMR1_StartTimer:
   719                           	opt stack 0
   720                           tblptru	equ	0xFF8
   721                           intcon	equ	0xFF2
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           postinc2	equ	0xFDE
   725                           postdec2	equ	0xFDD
   726                           fsr2h	equ	0xFDA
   727                           fsr2l	equ	0xFD9
   728                           status	equ	0xFD8
   729                           
   730 ;; *************** function _PIN_MANAGER_Initialize *****************
   731 ;; Defined at:
   732 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;		None
   735 ;; Auto vars:     Size  Location     Type
   736 ;;		None
   737 ;; Return value:  Size  Location     Type
   738 ;;		None               void
   739 ;; Registers used:
   740 ;;		wreg, status,2
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   746 ;;      Params:         0       0       0       0       0       0       0
   747 ;;      Locals:         0       0       0       0       0       0       0
   748 ;;      Temps:          0       0       0       0       0       0       0
   749 ;;      Totals:         0       0       0       0       0       0       0
   750 ;;Total ram usage:        0 bytes
   751 ;; Hardware stack levels used:    1
   752 ;; Hardware stack levels required when called:    3
   753 ;; This function calls:
   754 ;;		Nothing
   755 ;; This function is called by:
   756 ;;		_SYSTEM_Initialize
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           	psect	text5
   761  0007C6                     __ptext5:
   762                           	opt stack 0
   763  0007C6                     _PIN_MANAGER_Initialize:
   764                           	opt stack 26
   765                           
   766                           ;pin_manager.c: 52: LATA = 0x00;
   767                           
   768                           ;incstack = 0
   769  0007C6  0E00               	movlw	0
   770  0007C8  6E89               	movwf	3977,c	;volatile
   771                           
   772                           ;pin_manager.c: 53: TRISA = 0xBE;
   773  0007CA  0EBE               	movlw	190
   774  0007CC  6E92               	movwf	3986,c	;volatile
   775                           
   776                           ;pin_manager.c: 54: ANSELA = 0x2E;
   777  0007CE  0E2E               	movlw	46
   778  0007D0  010F               	movlb	15	; () banked
   779  0007D2  6F38               	movwf	56,b	;volatile
   780                           
   781                           ;pin_manager.c: 56: LATB = 0x00;
   782  0007D4  0E00               	movlw	0
   783  0007D6  6E8A               	movwf	3978,c	;volatile
   784                           
   785                           ;pin_manager.c: 57: TRISB = 0xF4;
   786  0007D8  0EF4               	movlw	244
   787  0007DA  6E93               	movwf	3987,c	;volatile
   788                           
   789                           ;pin_manager.c: 58: ANSELB = 0x34;
   790  0007DC  0E34               	movlw	52
   791  0007DE  010F               	movlb	15	; () banked
   792  0007E0  6F39               	movwf	57,b	;volatile
   793                           
   794                           ;pin_manager.c: 59: WPUB = 0x00;
   795  0007E2  0E00               	movlw	0
   796  0007E4  6E61               	movwf	3937,c	;volatile
   797                           
   798                           ;pin_manager.c: 61: LATC = 0x08;
   799  0007E6  0E08               	movlw	8
   800  0007E8  6E8B               	movwf	3979,c	;volatile
   801                           
   802                           ;pin_manager.c: 62: TRISC = 0xC4;
   803  0007EA  0EC4               	movlw	196
   804  0007EC  6E94               	movwf	3988,c	;volatile
   805                           
   806                           ;pin_manager.c: 63: ANSELC = 0x04;
   807  0007EE  0E04               	movlw	4
   808  0007F0  010F               	movlb	15	; () banked
   809  0007F2  6F3A               	movwf	58,b	;volatile
   810                           
   811                           ;pin_manager.c: 65: LATD = 0x00;
   812  0007F4  0E00               	movlw	0
   813  0007F6  6E8C               	movwf	3980,c	;volatile
   814                           
   815                           ;pin_manager.c: 66: TRISD = 0xD1;
   816  0007F8  0ED1               	movlw	209
   817  0007FA  6E95               	movwf	3989,c	;volatile
   818                           
   819                           ;pin_manager.c: 67: ANSELD = 0xD1;
   820  0007FC  0ED1               	movlw	209
   821  0007FE  010F               	movlb	15	; () banked
   822  000800  6F3B               	movwf	59,b	;volatile
   823                           
   824                           ;pin_manager.c: 69: LATE = 0x00;
   825  000802  0E00               	movlw	0
   826  000804  6E8D               	movwf	3981,c	;volatile
   827                           
   828                           ;pin_manager.c: 70: TRISE = 0x05;
   829  000806  0E05               	movlw	5
   830  000808  6E96               	movwf	3990,c	;volatile
   831                           
   832                           ;pin_manager.c: 71: ANSELE = 0x05;
   833  00080A  0E05               	movlw	5
   834  00080C  010F               	movlb	15	; () banked
   835  00080E  6F3C               	movwf	60,b	;volatile
   836                           
   837                           ; BSR set to: 15
   838                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
   839  000810  8EF1               	bsf	intcon2,7,c	;volatile
   840                           
   841                           ; BSR set to: 15
   842  000812  0012               	return	
   843  000814                     __end_of_PIN_MANAGER_Initialize:
   844                           	opt stack 0
   845                           tblptru	equ	0xFF8
   846                           intcon	equ	0xFF2
   847                           intcon2	equ	0xFF1
   848                           postinc0	equ	0xFEE
   849                           wreg	equ	0xFE8
   850                           postinc2	equ	0xFDE
   851                           postdec2	equ	0xFDD
   852                           fsr2h	equ	0xFDA
   853                           fsr2l	equ	0xFD9
   854                           status	equ	0xFD8
   855                           
   856 ;; *************** function _OSCILLATOR_Initialize *****************
   857 ;; Defined at:
   858 ;;		line 122 in file "mcc_generated_files/mcc.c"
   859 ;; Parameters:    Size  Location     Type
   860 ;;		None
   861 ;; Auto vars:     Size  Location     Type
   862 ;;		None
   863 ;; Return value:  Size  Location     Type
   864 ;;		None               void
   865 ;; Registers used:
   866 ;;		wreg, status,2
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   872 ;;      Params:         0       0       0       0       0       0       0
   873 ;;      Locals:         0       0       0       0       0       0       0
   874 ;;      Temps:          0       0       0       0       0       0       0
   875 ;;      Totals:         0       0       0       0       0       0       0
   876 ;;Total ram usage:        0 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; Hardware stack levels required when called:    3
   879 ;; This function calls:
   880 ;;		Nothing
   881 ;; This function is called by:
   882 ;;		_SYSTEM_Initialize
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           	psect	text6
   887  0009DA                     __ptext6:
   888                           	opt stack 0
   889  0009DA                     _OSCILLATOR_Initialize:
   890                           	opt stack 26
   891                           
   892                           ;mcc.c: 125: OSCCON = 0x62;
   893                           
   894                           ; BSR set to: 15
   895                           ;incstack = 0
   896  0009DA  0E62               	movlw	98
   897  0009DC  6ED3               	movwf	4051,c	;volatile
   898                           
   899                           ;mcc.c: 127: OSCCON2 = 0x04;
   900  0009DE  0E04               	movlw	4
   901  0009E0  6ED2               	movwf	4050,c	;volatile
   902                           
   903                           ;mcc.c: 129: OSCTUNE = 0x00;
   904  0009E2  0E00               	movlw	0
   905  0009E4  6E9B               	movwf	3995,c	;volatile
   906  0009E6  0012               	return	
   907  0009E8                     __end_of_OSCILLATOR_Initialize:
   908                           	opt stack 0
   909                           tblptru	equ	0xFF8
   910                           intcon	equ	0xFF2
   911                           intcon2	equ	0xFF1
   912                           postinc0	equ	0xFEE
   913                           wreg	equ	0xFE8
   914                           postinc2	equ	0xFDE
   915                           postdec2	equ	0xFDD
   916                           fsr2h	equ	0xFDA
   917                           fsr2l	equ	0xFD9
   918                           status	equ	0xFD8
   919                           
   920 ;; *************** function _INTERRUPT_Initialize *****************
   921 ;; Defined at:
   922 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;		None
   925 ;; Auto vars:     Size  Location     Type
   926 ;;		None
   927 ;; Return value:  Size  Location     Type
   928 ;;		None               void
   929 ;; Registers used:
   930 ;;		None
   931 ;; Tracked objects:
   932 ;;		On entry : 0/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   936 ;;      Params:         0       0       0       0       0       0       0
   937 ;;      Locals:         0       0       0       0       0       0       0
   938 ;;      Temps:          0       0       0       0       0       0       0
   939 ;;      Totals:         0       0       0       0       0       0       0
   940 ;;Total ram usage:        0 bytes
   941 ;; Hardware stack levels used:    1
   942 ;; Hardware stack levels required when called:    3
   943 ;; This function calls:
   944 ;;		Nothing
   945 ;; This function is called by:
   946 ;;		_SYSTEM_Initialize
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           	psect	text7
   951  0009E8                     __ptext7:
   952                           	opt stack 0
   953  0009E8                     _INTERRUPT_Initialize:
   954                           	opt stack 26
   955                           
   956                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
   957                           
   958                           ;incstack = 0
   959  0009E8  9ED0               	bcf	4048,7,c	;volatile
   960                           
   961                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
   962  0009EA  9A9F               	bcf	3999,5,c	;volatile
   963                           
   964                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
   965  0009EC  9C9F               	bcf	3999,6,c	;volatile
   966                           
   967                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
   968  0009EE  909F               	bcf	3999,0,c	;volatile
   969                           
   970                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
   971  0009F0  989F               	bcf	3999,4,c	;volatile
   972  0009F2  0012               	return	
   973  0009F4                     __end_of_INTERRUPT_Initialize:
   974                           	opt stack 0
   975                           tblptru	equ	0xFF8
   976                           intcon	equ	0xFF2
   977                           intcon2	equ	0xFF1
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           postinc2	equ	0xFDE
   981                           postdec2	equ	0xFDD
   982                           fsr2h	equ	0xFDA
   983                           fsr2l	equ	0xFD9
   984                           status	equ	0xFD8
   985                           
   986 ;; *************** function _EUSART1_Initialize *****************
   987 ;; Defined at:
   988 ;;		line 76 in file "mcc_generated_files/eusart1.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;		None               void
   995 ;; Registers used:
   996 ;;		wreg, status,2
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1002 ;;      Params:         0       0       0       0       0       0       0
  1003 ;;      Locals:         0       0       0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0       0       0
  1005 ;;      Totals:         0       0       0       0       0       0       0
  1006 ;;Total ram usage:        0 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; Hardware stack levels required when called:    3
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_SYSTEM_Initialize
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text8
  1017  00085C                     __ptext8:
  1018                           	opt stack 0
  1019  00085C                     _EUSART1_Initialize:
  1020                           	opt stack 26
  1021                           
  1022                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  1023                           
  1024                           ;incstack = 0
  1025  00085C  9A9D               	bcf	3997,5,c	;volatile
  1026                           
  1027                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  1028  00085E  989D               	bcf	3997,4,c	;volatile
  1029                           
  1030                           ;eusart1.c: 85: BAUD1CON = 0x48;
  1031  000860  0E48               	movlw	72
  1032  000862  6EB8               	movwf	4024,c	;volatile
  1033                           
  1034                           ;eusart1.c: 88: RC1STA = 0x98;
  1035  000864  0E98               	movlw	152
  1036  000866  6EAB               	movwf	4011,c	;volatile
  1037                           
  1038                           ;eusart1.c: 91: TX1STA = 0x26;
  1039  000868  0E26               	movlw	38
  1040  00086A  6EAC               	movwf	4012,c	;volatile
  1041                           
  1042                           ;eusart1.c: 94: SPBRG1 = 0x22;
  1043  00086C  0E22               	movlw	34
  1044  00086E  6EAF               	movwf	4015,c	;volatile
  1045                           
  1046                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  1047  000870  0E00               	movlw	0
  1048  000872  6EB0               	movwf	4016,c	;volatile
  1049                           
  1050                           ;eusart1.c: 100: TXREG1 = 0x00;
  1051  000874  0E00               	movlw	0
  1052  000876  6EAD               	movwf	4013,c	;volatile
  1053                           
  1054                           ;eusart1.c: 103: RCREG1 = 0x00;
  1055  000878  0E00               	movlw	0
  1056  00087A  6EAE               	movwf	4014,c	;volatile
  1057                           
  1058                           ;eusart1.c: 107: eusart1TxHead = 0;
  1059  00087C  0E00               	movlw	0
  1060  00087E  6E45               	movwf	_eusart1TxHead,c
  1061                           
  1062                           ;eusart1.c: 108: eusart1TxTail = 0;
  1063  000880  0E00               	movlw	0
  1064  000882  6E46               	movwf	_eusart1TxTail,c
  1065                           
  1066                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1067  000884  0E08               	movlw	8
  1068  000886  6E49               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1069                           
  1070                           ;eusart1.c: 111: eusart1RxHead = 0;
  1071  000888  0E00               	movlw	0
  1072  00088A  6E43               	movwf	_eusart1RxHead,c
  1073                           
  1074                           ;eusart1.c: 112: eusart1RxTail = 0;
  1075  00088C  0E00               	movlw	0
  1076  00088E  6E44               	movwf	_eusart1RxTail,c
  1077                           
  1078                           ;eusart1.c: 113: eusart1RxCount = 0;
  1079  000890  0E00               	movlw	0
  1080  000892  6E42               	movwf	_eusart1RxCount,c	;volatile
  1081                           
  1082                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  1083  000894  8A9D               	bsf	3997,5,c	;volatile
  1084  000896  0012               	return	
  1085  000898                     __end_of_EUSART1_Initialize:
  1086                           	opt stack 0
  1087                           tblptru	equ	0xFF8
  1088                           intcon	equ	0xFF2
  1089                           intcon2	equ	0xFF1
  1090                           postinc0	equ	0xFEE
  1091                           wreg	equ	0xFE8
  1092                           postinc2	equ	0xFDE
  1093                           postdec2	equ	0xFDD
  1094                           fsr2h	equ	0xFDA
  1095                           fsr2l	equ	0xFD9
  1096                           status	equ	0xFD8
  1097                           
  1098 ;; *************** function _ADC_Initialize *****************
  1099 ;; Defined at:
  1100 ;;		line 13 in file "mcc_generated_files/adc.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;		None
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;		None
  1105 ;; Return value:  Size  Location     Type
  1106 ;;		None               void
  1107 ;; Registers used:
  1108 ;;		wreg, status,2
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1114 ;;      Params:         0       0       0       0       0       0       0
  1115 ;;      Locals:         0       0       0       0       0       0       0
  1116 ;;      Temps:          0       0       0       0       0       0       0
  1117 ;;      Totals:         0       0       0       0       0       0       0
  1118 ;;Total ram usage:        0 bytes
  1119 ;; Hardware stack levels used:    1
  1120 ;; Hardware stack levels required when called:    3
  1121 ;; This function calls:
  1122 ;;		Nothing
  1123 ;; This function is called by:
  1124 ;;		_SYSTEM_Initialize
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           	psect	text9
  1129  0009AE                     __ptext9:
  1130                           	opt stack 0
  1131  0009AE                     _ADC_Initialize:
  1132                           	opt stack 26
  1133                           
  1134                           ;adc.c: 18: ADCON0 = 0x01;
  1135                           
  1136                           ;incstack = 0
  1137  0009AE  0E01               	movlw	1
  1138  0009B0  6EC2               	movwf	4034,c	;volatile
  1139                           
  1140                           ;adc.c: 21: ADCON1 = 0x80;
  1141  0009B2  0E80               	movlw	128
  1142  0009B4  6EC1               	movwf	4033,c	;volatile
  1143                           
  1144                           ;adc.c: 24: ADCON2 = 0x0A;
  1145  0009B6  0E0A               	movlw	10
  1146  0009B8  6EC0               	movwf	4032,c	;volatile
  1147                           
  1148                           ;adc.c: 27: ADRESL = 0x00;
  1149  0009BA  0E00               	movlw	0
  1150  0009BC  6EC3               	movwf	4035,c	;volatile
  1151                           
  1152                           ;adc.c: 30: ADRESH = 0x00;
  1153  0009BE  0E00               	movlw	0
  1154  0009C0  6EC4               	movwf	4036,c	;volatile
  1155                           
  1156                           ;adc.c: 33: PIE1bits.ADIE = 1;
  1157  0009C2  8C9D               	bsf	3997,6,c	;volatile
  1158  0009C4  0012               	return	
  1159  0009C6                     __end_of_ADC_Initialize:
  1160                           	opt stack 0
  1161                           tblptru	equ	0xFF8
  1162                           intcon	equ	0xFF2
  1163                           intcon2	equ	0xFF1
  1164                           postinc0	equ	0xFEE
  1165                           wreg	equ	0xFE8
  1166                           postinc2	equ	0xFDE
  1167                           postdec2	equ	0xFDD
  1168                           fsr2h	equ	0xFDA
  1169                           fsr2l	equ	0xFD9
  1170                           status	equ	0xFD8
  1171                           
  1172 ;; *************** function _Battery_Fault *****************
  1173 ;; Defined at:
  1174 ;;		line 9 in file "Battery.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;		None
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;  i               2    9[BANK0 ] int 
  1179 ;;  fault           1    8[BANK0 ] unsigned char 
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  1    wreg      unsigned char 
  1182 ;; Registers used:
  1183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1189 ;;      Params:         0       0       0       0       0       0       0
  1190 ;;      Locals:         0       3       0       0       0       0       0
  1191 ;;      Temps:          0       2       0       0       0       0       0
  1192 ;;      Totals:         0       5       0       0       0       0       0
  1193 ;;Total ram usage:        5 bytes
  1194 ;; Hardware stack levels used:    1
  1195 ;; Hardware stack levels required when called:    5
  1196 ;; This function calls:
  1197 ;;		___awtoft
  1198 ;;		___ftge
  1199 ;; This function is called by:
  1200 ;;		_main
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text10
  1205  0004F4                     __ptext10:
  1206                           	opt stack 0
  1207  0004F4                     _Battery_Fault:
  1208                           	opt stack 25
  1209                           
  1210                           ;Battery.c: 12: char fault = 0;
  1211                           
  1212                           ;incstack = 0
  1213  0004F4  0E00               	movlw	0
  1214  0004F6  0100               	movlb	0	; () banked
  1215  0004F8  6FB4               	movwf	Battery_Fault@fault& (0+255),b
  1216                           
  1217                           ;Battery.c: 13: for(int i = 0;i<9;i++)
  1218  0004FA  0E00               	movlw	0
  1219  0004FC  0100               	movlb	0	; () banked
  1220  0004FE  6FB6               	movwf	(Battery_Fault@i+1)& (0+255),b
  1221  000500  0E00               	movlw	0
  1222  000502  0100               	movlb	0	; () banked
  1223  000504  6FB5               	movwf	Battery_Fault@i& (0+255),b
  1224  000506                     
  1225                           ; BSR set to: 0
  1226  000506  0100               	movlb	0	; () banked
  1227  000508  51B6               	movf	(Battery_Fault@i+1)& (0+255),w,b
  1228  00050A  0A80               	xorlw	128
  1229  00050C  0F80               	addlw	-128
  1230  00050E  0E09               	movlw	9
  1231  000510  B4D8               	btfsc	status,2,c
  1232  000512  5DB5               	subwf	Battery_Fault@i& (0+255),w,b
  1233  000514  B0D8               	btfsc	status,0,c
  1234  000516  0012               	return	
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;Battery.c: 14: {
  1238                           ;Battery.c: 15: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  1239                           
  1240                           ; BSR set to: 0
  1241                           
  1242                           ; BSR set to: 0
  1243  000518  0E00               	movlw	0
  1244  00051A  0100               	movlb	0	; () banked
  1245  00051C  6FAC               	movwf	___ftge@ff1& (0+255),b
  1246  00051E  0E40               	movlw	64
  1247  000520  0100               	movlb	0	; () banked
  1248  000522  6FAD               	movwf	(___ftge@ff1+1)& (0+255),b
  1249  000524  0E40               	movlw	64
  1250  000526  0100               	movlb	0	; () banked
  1251  000528  6FAE               	movwf	(___ftge@ff1+2)& (0+255),b
  1252  00052A  0E74               	movlw	low _Battery_Volt
  1253  00052C  0100               	movlb	0	; () banked
  1254  00052E  6FB2               	movwf	??_Battery_Fault& (0+255),b
  1255  000530  0E00               	movlw	high _Battery_Volt
  1256  000532  6FB3               	movwf	(??_Battery_Fault+1)& (0+255),b
  1257  000534  90D8               	bcf	status,0,c
  1258  000536  0100               	movlb	0	; () banked
  1259  000538  35B5               	rlcf	Battery_Fault@i& (0+255),w,b
  1260  00053A  6ED9               	movwf	fsr2l,c
  1261  00053C  0100               	movlb	0	; () banked
  1262  00053E  35B6               	rlcf	(Battery_Fault@i+1)& (0+255),w,b
  1263  000540  6EDA               	movwf	fsr2h,c
  1264  000542  0100               	movlb	0	; () banked
  1265  000544  51B2               	movf	??_Battery_Fault& (0+255),w,b
  1266  000546  26D9               	addwf	fsr2l,f,c
  1267  000548  0100               	movlb	0	; () banked
  1268  00054A  51B3               	movf	(??_Battery_Fault+1)& (0+255),w,b
  1269  00054C  22DA               	addwfc	fsr2h,f,c
  1270  00054E  CFDE F01F          	movff	postinc2,___awtoft@c
  1271  000552  CFDD F020          	movff	postdec2,___awtoft@c+1
  1272  000556  EC0A  F004         	call	___awtoft	;wreg free
  1273  00055A  C01F  F0AF         	movff	?___awtoft,___ftge@ff2
  1274  00055E  C020  F0B0         	movff	?___awtoft+1,___ftge@ff2+1
  1275  000562  C021  F0B1         	movff	?___awtoft+2,___ftge@ff2+2
  1276  000566  ECE9  F002         	call	___ftge	;wreg free
  1277  00056A  B0D8               	btfsc	status,0,c
  1278  00056C  D02E               	goto	l1914
  1279  00056E  0E74               	movlw	low _Battery_Volt
  1280  000570  0100               	movlb	0	; () banked
  1281  000572  6FB2               	movwf	??_Battery_Fault& (0+255),b
  1282  000574  0E00               	movlw	high _Battery_Volt
  1283  000576  6FB3               	movwf	(??_Battery_Fault+1)& (0+255),b
  1284  000578  90D8               	bcf	status,0,c
  1285  00057A  0100               	movlb	0	; () banked
  1286  00057C  35B5               	rlcf	Battery_Fault@i& (0+255),w,b
  1287  00057E  6ED9               	movwf	fsr2l,c
  1288  000580  0100               	movlb	0	; () banked
  1289  000582  35B6               	rlcf	(Battery_Fault@i+1)& (0+255),w,b
  1290  000584  6EDA               	movwf	fsr2h,c
  1291  000586  0100               	movlb	0	; () banked
  1292  000588  51B2               	movf	??_Battery_Fault& (0+255),w,b
  1293  00058A  26D9               	addwf	fsr2l,f,c
  1294  00058C  0100               	movlb	0	; () banked
  1295  00058E  51B3               	movf	(??_Battery_Fault+1)& (0+255),w,b
  1296  000590  22DA               	addwfc	fsr2h,f,c
  1297  000592  CFDE F01F          	movff	postinc2,___awtoft@c
  1298  000596  CFDD F020          	movff	postdec2,___awtoft@c+1
  1299  00059A  EC0A  F004         	call	___awtoft	;wreg free
  1300  00059E  C01F  F0AC         	movff	?___awtoft,___ftge@ff1
  1301  0005A2  C020  F0AD         	movff	?___awtoft+1,___ftge@ff1+1
  1302  0005A6  C021  F0AE         	movff	?___awtoft+2,___ftge@ff1+2
  1303  0005AA  0EB8               	movlw	184
  1304  0005AC  0100               	movlb	0	; () banked
  1305  0005AE  6FAF               	movwf	___ftge@ff2& (0+255),b
  1306  0005B0  0E86               	movlw	134
  1307  0005B2  0100               	movlb	0	; () banked
  1308  0005B4  6FB0               	movwf	(___ftge@ff2+1)& (0+255),b
  1309  0005B6  0E40               	movlw	64
  1310  0005B8  0100               	movlb	0	; () banked
  1311  0005BA  6FB1               	movwf	(___ftge@ff2+2)& (0+255),b
  1312  0005BC  ECE9  F002         	call	___ftge	;wreg free
  1313  0005C0  B0D8               	btfsc	status,0,c
  1314  0005C2  D003               	goto	l1914
  1315                           
  1316                           ;Battery.c: 16: {
  1317                           ;Battery.c: 17: fault = 1;
  1318  0005C4  0E01               	movlw	1
  1319  0005C6  0100               	movlb	0	; () banked
  1320  0005C8  6FB4               	movwf	Battery_Fault@fault& (0+255),b
  1321  0005CA                     l1914:
  1322  0005CA  0100               	movlb	0	; () banked
  1323  0005CC  4BB5               	infsnz	Battery_Fault@i& (0+255),f,b
  1324  0005CE  2BB6               	incf	(Battery_Fault@i+1)& (0+255),f,b
  1325  0005D0  D79A               	goto	L2
  1326  0005D2                     __end_of_Battery_Fault:
  1327                           	opt stack 0
  1328                           tblptru	equ	0xFF8
  1329                           intcon	equ	0xFF2
  1330                           intcon2	equ	0xFF1
  1331                           postinc0	equ	0xFEE
  1332                           wreg	equ	0xFE8
  1333                           postinc2	equ	0xFDE
  1334                           postdec2	equ	0xFDD
  1335                           fsr2h	equ	0xFDA
  1336                           fsr2l	equ	0xFD9
  1337                           status	equ	0xFD8
  1338                           
  1339 ;; *************** function ___ftge *****************
  1340 ;; Defined at:
  1341 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;  ff1             3    0[BANK0 ] float 
  1344 ;;  ff2             3    3[BANK0 ] float 
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;		None               void
  1349 ;; Registers used:
  1350 ;;		wreg, status,2, status,0
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1356 ;;      Params:         0       6       0       0       0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0
  1358 ;;      Temps:          3       0       0       0       0       0       0
  1359 ;;      Totals:         3       6       0       0       0       0       0
  1360 ;;Total ram usage:        9 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; Hardware stack levels required when called:    3
  1363 ;; This function calls:
  1364 ;;		Nothing
  1365 ;; This function is called by:
  1366 ;;		_Battery_Fault
  1367 ;;		_Temp_Fault
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           	psect	text11
  1372  0005D2                     __ptext11:
  1373                           	opt stack 0
  1374  0005D2                     ___ftge:
  1375                           	opt stack 26
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;incstack = 0
  1379  0005D2  0100               	movlb	0	; () banked
  1380  0005D4  AFAE               	btfss	(___ftge@ff1+2)& (0+255),7,b
  1381  0005D6  D01C               	goto	l1888
  1382                           
  1383                           ; BSR set to: 0
  1384  0005D8  0100               	movlb	0	; () banked
  1385  0005DA  C0AC  F023         	movff	___ftge@ff1,??___ftge
  1386  0005DE  0100               	movlb	0	; () banked
  1387  0005E0  C0AD  F024         	movff	___ftge@ff1+1,??___ftge+1
  1388  0005E4  0100               	movlb	0	; () banked
  1389  0005E6  C0AE  F025         	movff	___ftge@ff1+2,??___ftge+2
  1390  0005EA  1E23               	comf	??___ftge,f,c
  1391  0005EC  1E24               	comf	??___ftge+1,f,c
  1392  0005EE  1E25               	comf	??___ftge+2,f,c
  1393  0005F0  2A23               	incf	??___ftge,f,c
  1394  0005F2  0E00               	movlw	0
  1395  0005F4  2224               	addwfc	??___ftge+1,f,c
  1396  0005F6  2225               	addwfc	??___ftge+2,f,c
  1397  0005F8  0E00               	movlw	0
  1398  0005FA  2423               	addwf	??___ftge,w,c
  1399  0005FC  0100               	movlb	0	; () banked
  1400  0005FE  6FAC               	movwf	___ftge@ff1& (0+255),b
  1401  000600  0E00               	movlw	0
  1402  000602  2024               	addwfc	??___ftge+1,w,c
  1403  000604  0100               	movlb	0	; () banked
  1404  000606  6FAD               	movwf	(___ftge@ff1+1)& (0+255),b
  1405  000608  0E80               	movlw	128
  1406  00060A  2025               	addwfc	??___ftge+2,w,c
  1407  00060C  0100               	movlb	0	; () banked
  1408  00060E  6FAE               	movwf	(___ftge@ff1+2)& (0+255),b
  1409  000610                     l1888:
  1410                           
  1411                           ; BSR set to: 0
  1412  000610  0100               	movlb	0	; () banked
  1413  000612  AFB1               	btfss	(___ftge@ff2+2)& (0+255),7,b
  1414  000614  D01C               	goto	l1892
  1415                           
  1416                           ; BSR set to: 0
  1417  000616  0100               	movlb	0	; () banked
  1418  000618  C0AF  F023         	movff	___ftge@ff2,??___ftge
  1419  00061C  0100               	movlb	0	; () banked
  1420  00061E  C0B0  F024         	movff	___ftge@ff2+1,??___ftge+1
  1421  000622  0100               	movlb	0	; () banked
  1422  000624  C0B1  F025         	movff	___ftge@ff2+2,??___ftge+2
  1423  000628  1E23               	comf	??___ftge,f,c
  1424  00062A  1E24               	comf	??___ftge+1,f,c
  1425  00062C  1E25               	comf	??___ftge+2,f,c
  1426  00062E  2A23               	incf	??___ftge,f,c
  1427  000630  0E00               	movlw	0
  1428  000632  2224               	addwfc	??___ftge+1,f,c
  1429  000634  2225               	addwfc	??___ftge+2,f,c
  1430  000636  0E00               	movlw	0
  1431  000638  2423               	addwf	??___ftge,w,c
  1432  00063A  0100               	movlb	0	; () banked
  1433  00063C  6FAF               	movwf	___ftge@ff2& (0+255),b
  1434  00063E  0E00               	movlw	0
  1435  000640  2024               	addwfc	??___ftge+1,w,c
  1436  000642  0100               	movlb	0	; () banked
  1437  000644  6FB0               	movwf	(___ftge@ff2+1)& (0+255),b
  1438  000646  0E80               	movlw	128
  1439  000648  2025               	addwfc	??___ftge+2,w,c
  1440  00064A  0100               	movlb	0	; () banked
  1441  00064C  6FB1               	movwf	(___ftge@ff2+2)& (0+255),b
  1442  00064E                     l1892:
  1443                           
  1444                           ; BSR set to: 0
  1445  00064E  0E00               	movlw	0
  1446  000650  0100               	movlb	0	; () banked
  1447  000652  1BAC               	xorwf	___ftge@ff1& (0+255),f,b
  1448  000654  0E00               	movlw	0
  1449  000656  0100               	movlb	0	; () banked
  1450  000658  1BAD               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  1451  00065A  0E80               	movlw	128
  1452  00065C  0100               	movlb	0	; () banked
  1453  00065E  1BAE               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  1454                           
  1455                           ; BSR set to: 0
  1456  000660  0E00               	movlw	0
  1457  000662  0100               	movlb	0	; () banked
  1458  000664  1BAF               	xorwf	___ftge@ff2& (0+255),f,b
  1459  000666  0E00               	movlw	0
  1460  000668  0100               	movlb	0	; () banked
  1461  00066A  1BB0               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  1462  00066C  0E80               	movlw	128
  1463  00066E  0100               	movlb	0	; () banked
  1464  000670  1BB1               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  1465  000672  0100               	movlb	0	; () banked
  1466  000674  51AF               	movf	___ftge@ff2& (0+255),w,b
  1467  000676  0100               	movlb	0	; () banked
  1468  000678  5DAC               	subwf	___ftge@ff1& (0+255),w,b
  1469  00067A  0100               	movlb	0	; () banked
  1470  00067C  51B0               	movf	(___ftge@ff2+1)& (0+255),w,b
  1471  00067E  0100               	movlb	0	; () banked
  1472  000680  59AD               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  1473  000682  0100               	movlb	0	; () banked
  1474  000684  51B1               	movf	(___ftge@ff2+2)& (0+255),w,b
  1475  000686  0100               	movlb	0	; () banked
  1476  000688  59AE               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  1477  00068A  B0D8               	btfsc	status,0,c
  1478  00068C  D002               	goto	l1898
  1479                           
  1480                           ; BSR set to: 0
  1481  00068E  90D8               	bcf	status,0,c
  1482  000690  0012               	return	
  1483  000692                     l1898:
  1484                           
  1485                           ; BSR set to: 0
  1486  000692  80D8               	bsf	status,0,c
  1487  000694  0012               	return	
  1488  000696                     __end_of___ftge:
  1489                           	opt stack 0
  1490                           tblptru	equ	0xFF8
  1491                           intcon	equ	0xFF2
  1492                           intcon2	equ	0xFF1
  1493                           postinc0	equ	0xFEE
  1494                           wreg	equ	0xFE8
  1495                           postinc2	equ	0xFDE
  1496                           postdec2	equ	0xFDD
  1497                           fsr2h	equ	0xFDA
  1498                           fsr2l	equ	0xFD9
  1499                           status	equ	0xFD8
  1500                           
  1501 ;; *************** function ___awtoft *****************
  1502 ;; Defined at:
  1503 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;  c               2   30[COMRAM] int 
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;  sign            1   33[COMRAM] unsigned char 
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  3   30[COMRAM] float 
  1510 ;; Registers used:
  1511 ;;		wreg, status,2, status,0, prodl, cstack
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1517 ;;      Params:         3       0       0       0       0       0       0
  1518 ;;      Locals:         1       0       0       0       0       0       0
  1519 ;;      Temps:          0       0       0       0       0       0       0
  1520 ;;      Totals:         4       0       0       0       0       0       0
  1521 ;;Total ram usage:        4 bytes
  1522 ;; Hardware stack levels used:    1
  1523 ;; Hardware stack levels required when called:    4
  1524 ;; This function calls:
  1525 ;;		___ftpack
  1526 ;; This function is called by:
  1527 ;;		_Battery_Fault
  1528 ;;		_Temp_Fault
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text12
  1533  000814                     __ptext12:
  1534                           	opt stack 0
  1535  000814                     ___awtoft:
  1536                           	opt stack 25
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;incstack = 0
  1540  000814  0E00               	movlw	0
  1541  000816  6E22               	movwf	___awtoft@sign,c
  1542  000818  5020               	movf	___awtoft@c+1,w,c
  1543  00081A  0A80               	xorlw	128
  1544  00081C  6EF3               	movwf	prodl,c
  1545  00081E  0E80               	movlw	128
  1546  000820  5CF3               	subwf	prodl,w,c
  1547  000822  0E00               	movlw	0
  1548  000824  B4D8               	btfsc	status,2,c
  1549  000826  5C1F               	subwf	___awtoft@c,w,c
  1550  000828  B0D8               	btfsc	status,0,c
  1551  00082A  D006               	goto	l1880
  1552  00082C  6C1F               	negf	___awtoft@c,c
  1553  00082E  1E20               	comf	___awtoft@c+1,f,c
  1554  000830  B0D8               	btfsc	status,0,c
  1555  000832  2A20               	incf	___awtoft@c+1,f,c
  1556  000834  0E01               	movlw	1
  1557  000836  6E22               	movwf	___awtoft@sign,c
  1558  000838                     l1880:
  1559  000838  C01F  F017         	movff	___awtoft@c,___ftpack@arg
  1560  00083C  C020  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  1561  000840  6A19               	clrf	___ftpack@arg+2,c
  1562  000842  0E8E               	movlw	142
  1563  000844  6E1A               	movwf	___ftpack@exp,c
  1564  000846  C022  F01B         	movff	___awtoft@sign,___ftpack@sign
  1565  00084A  EC4B  F003         	call	___ftpack	;wreg free
  1566  00084E  C017  F01F         	movff	?___ftpack,?___awtoft
  1567  000852  C018  F020         	movff	?___ftpack+1,?___awtoft+1
  1568  000856  C019  F021         	movff	?___ftpack+2,?___awtoft+2
  1569  00085A  0012               	return	
  1570  00085C                     __end_of___awtoft:
  1571                           	opt stack 0
  1572                           tblptru	equ	0xFF8
  1573                           prodl	equ	0xFF3
  1574                           intcon	equ	0xFF2
  1575                           intcon2	equ	0xFF1
  1576                           postinc0	equ	0xFEE
  1577                           wreg	equ	0xFE8
  1578                           postinc2	equ	0xFDE
  1579                           postdec2	equ	0xFDD
  1580                           fsr2h	equ	0xFDA
  1581                           fsr2l	equ	0xFD9
  1582                           status	equ	0xFD8
  1583                           
  1584 ;; *************** function ___ftpack *****************
  1585 ;; Defined at:
  1586 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;  arg             3   22[COMRAM] unsigned um
  1589 ;;  exp             1   25[COMRAM] unsigned char 
  1590 ;;  sign            1   26[COMRAM] unsigned char 
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;		None
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  3   22[COMRAM] float 
  1595 ;; Registers used:
  1596 ;;		wreg, status,2, status,0
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1602 ;;      Params:         5       0       0       0       0       0       0
  1603 ;;      Locals:         0       0       0       0       0       0       0
  1604 ;;      Temps:          3       0       0       0       0       0       0
  1605 ;;      Totals:         8       0       0       0       0       0       0
  1606 ;;Total ram usage:        8 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; Hardware stack levels required when called:    3
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		___awtoft
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text13
  1617  000696                     __ptext13:
  1618                           	opt stack 0
  1619  000696                     ___ftpack:
  1620                           	opt stack 25
  1621                           
  1622                           ;incstack = 0
  1623  000696  501A               	movf	___ftpack@exp,w,c
  1624  000698  B4D8               	btfsc	status,2,c
  1625  00069A  D005               	goto	l1842
  1626  00069C  5017               	movf	___ftpack@arg,w,c
  1627  00069E  1018               	iorwf	___ftpack@arg+1,w,c
  1628  0006A0  1019               	iorwf	___ftpack@arg+2,w,c
  1629  0006A2  A4D8               	btfss	status,2,c
  1630  0006A4  D00C               	goto	l1848
  1631  0006A6                     l1842:
  1632  0006A6  0E00               	movlw	0
  1633  0006A8  6E17               	movwf	?___ftpack,c
  1634  0006AA  0E00               	movlw	0
  1635  0006AC  6E18               	movwf	?___ftpack+1,c
  1636  0006AE  0E00               	movlw	0
  1637  0006B0  6E19               	movwf	?___ftpack+2,c
  1638  0006B2  0012               	return	
  1639  0006B4                     l1846:
  1640  0006B4  2A1A               	incf	___ftpack@exp,f,c
  1641  0006B6  90D8               	bcf	status,0,c
  1642  0006B8  3219               	rrcf	___ftpack@arg+2,f,c
  1643  0006BA  3218               	rrcf	___ftpack@arg+1,f,c
  1644  0006BC  3217               	rrcf	___ftpack@arg,f,c
  1645  0006BE                     l1848:
  1646  0006BE  0E00               	movlw	0
  1647  0006C0  1417               	andwf	___ftpack@arg,w,c
  1648  0006C2  6E1C               	movwf	??___ftpack& (0+255),c
  1649  0006C4  0E00               	movlw	0
  1650  0006C6  1418               	andwf	___ftpack@arg+1,w,c
  1651  0006C8  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  1652  0006CA  0EFE               	movlw	254
  1653  0006CC  1419               	andwf	___ftpack@arg+2,w,c
  1654  0006CE  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  1655  0006D0  501C               	movf	??___ftpack,w,c
  1656  0006D2  101D               	iorwf	??___ftpack+1,w,c
  1657  0006D4  101E               	iorwf	??___ftpack+2,w,c
  1658  0006D6  B4D8               	btfsc	status,2,c
  1659  0006D8  D00C               	goto	l1854
  1660  0006DA  D7EC               	goto	l1846
  1661  0006DC                     l1850:
  1662  0006DC  2A1A               	incf	___ftpack@exp,f,c
  1663  0006DE  0E01               	movlw	1
  1664  0006E0  2617               	addwf	___ftpack@arg,f,c
  1665  0006E2  0E00               	movlw	0
  1666  0006E4  2218               	addwfc	___ftpack@arg+1,f,c
  1667  0006E6  0E00               	movlw	0
  1668  0006E8  2219               	addwfc	___ftpack@arg+2,f,c
  1669  0006EA  90D8               	bcf	status,0,c
  1670  0006EC  3219               	rrcf	___ftpack@arg+2,f,c
  1671  0006EE  3218               	rrcf	___ftpack@arg+1,f,c
  1672  0006F0  3217               	rrcf	___ftpack@arg,f,c
  1673  0006F2                     l1854:
  1674  0006F2  0E00               	movlw	0
  1675  0006F4  1417               	andwf	___ftpack@arg,w,c
  1676  0006F6  6E1C               	movwf	??___ftpack& (0+255),c
  1677  0006F8  0E00               	movlw	0
  1678  0006FA  1418               	andwf	___ftpack@arg+1,w,c
  1679  0006FC  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  1680  0006FE  0EFF               	movlw	255
  1681  000700  1419               	andwf	___ftpack@arg+2,w,c
  1682  000702  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  1683  000704  501C               	movf	??___ftpack,w,c
  1684  000706  101D               	iorwf	??___ftpack+1,w,c
  1685  000708  101E               	iorwf	??___ftpack+2,w,c
  1686  00070A  B4D8               	btfsc	status,2,c
  1687  00070C  D006               	goto	l1858
  1688  00070E  D7E6               	goto	l1850
  1689  000710                     l1856:
  1690  000710  061A               	decf	___ftpack@exp,f,c
  1691  000712  90D8               	bcf	status,0,c
  1692  000714  3617               	rlcf	___ftpack@arg,f,c
  1693  000716  3618               	rlcf	___ftpack@arg+1,f,c
  1694  000718  3619               	rlcf	___ftpack@arg+2,f,c
  1695  00071A                     l1858:
  1696  00071A  AE18               	btfss	___ftpack@arg+1,7,c
  1697  00071C  D7F9               	goto	l1856
  1698  00071E  A01A               	btfss	___ftpack@exp,0,c
  1699  000720  9E18               	bcf	___ftpack@arg+1,7,c
  1700  000722  90D8               	bcf	status,0,c
  1701  000724  321A               	rrcf	___ftpack@exp,f,c
  1702  000726  501A               	movf	___ftpack@exp,w,c
  1703  000728  1219               	iorwf	___ftpack@arg+2,f,c
  1704  00072A  501B               	movf	___ftpack@sign,w,c
  1705  00072C  A4D8               	btfss	status,2,c
  1706  00072E  8E19               	bsf	___ftpack@arg+2,7,c
  1707  000730  C017  F017         	movff	___ftpack@arg,?___ftpack
  1708  000734  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  1709  000738  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  1710  00073C  0012               	return	
  1711  00073E                     __end_of___ftpack:
  1712                           	opt stack 0
  1713                           tblptru	equ	0xFF8
  1714                           prodl	equ	0xFF3
  1715                           intcon	equ	0xFF2
  1716                           intcon2	equ	0xFF1
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           postinc2	equ	0xFDE
  1720                           postdec2	equ	0xFDD
  1721                           fsr2h	equ	0xFDA
  1722                           fsr2l	equ	0xFD9
  1723                           status	equ	0xFD8
  1724                           
  1725 ;; *************** function _INTERRUPT_InterruptManager *****************
  1726 ;; Defined at:
  1727 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;		None
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;		None
  1732 ;; Return value:  Size  Location     Type
  1733 ;;		None               void
  1734 ;; Registers used:
  1735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1741 ;;      Params:         0       0       0       0       0       0       0
  1742 ;;      Locals:         0       0       0       0       0       0       0
  1743 ;;      Temps:         14       0       0       0       0       0       0
  1744 ;;      Totals:        14       0       0       0       0       0       0
  1745 ;;Total ram usage:       14 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    2
  1748 ;; This function calls:
  1749 ;;		_ADC_ISR
  1750 ;;		_EUSART1_Receive_ISR
  1751 ;;		_EUSART1_Transmit_ISR
  1752 ;;		_TMR1_ISR
  1753 ;; This function is called by:
  1754 ;;		Interrupt level 2
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	intcode
  1759  000008                     __pintcode:
  1760                           	opt stack 0
  1761  000008                     _INTERRUPT_InterruptManager:
  1762                           	opt stack 25
  1763                           
  1764                           ;incstack = 0
  1765  000008  CFFA F009          	movff	pclath,??_INTERRUPT_InterruptManager
  1766  00000C  CFFB F00A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  1767  000010  CFE9 F00B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  1768  000014  CFEA F00C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  1769  000018  CFE1 F00D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  1770  00001C  CFE2 F00E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  1771  000020  CFD9 F00F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  1772  000024  CFDA F010          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  1773  000028  CFF3 F011          	movff	prodl,??_INTERRUPT_InterruptManager+8
  1774  00002C  CFF4 F012          	movff	prodh,??_INTERRUPT_InterruptManager+9
  1775  000030  CFF6 F013          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  1776  000034  CFF7 F014          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  1777  000038  CFF8 F015          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  1778  00003C  CFF5 F016          	movff	tablat,??_INTERRUPT_InterruptManager+13
  1779                           
  1780                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  1781  000040  BA9D               	btfsc	3997,5,c	;volatile
  1782  000042  AA9E               	btfss	3998,5,c	;volatile
  1783  000044  D003               	goto	i2l268
  1784                           
  1785                           ;interrupt_manager.c: 73: {
  1786                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
  1787  000046  EC66  F004         	call	_EUSART1_Receive_ISR	;wreg free
  1788                           
  1789                           ;interrupt_manager.c: 75: }
  1790  00004A  D011               	goto	i2l276
  1791  00004C                     i2l268:
  1792                           
  1793                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  1794  00004C  BC9D               	btfsc	3997,6,c	;volatile
  1795  00004E  AC9E               	btfss	3998,6,c	;volatile
  1796  000050  D003               	goto	i2l270
  1797                           
  1798                           ;interrupt_manager.c: 77: {
  1799                           ;interrupt_manager.c: 78: ADC_ISR();
  1800  000052  EC56  F000         	call	_ADC_ISR	;wreg free
  1801                           
  1802                           ;interrupt_manager.c: 79: }
  1803  000056  D00B               	goto	i2l276
  1804  000058                     i2l270:
  1805                           
  1806                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  1807  000058  B09D               	btfsc	3997,0,c	;volatile
  1808  00005A  A09E               	btfss	3998,0,c	;volatile
  1809  00005C  D003               	goto	i2l272
  1810                           
  1811                           ;interrupt_manager.c: 81: {
  1812                           ;interrupt_manager.c: 82: TMR1_ISR();
  1813  00005E  ECBD  F004         	call	_TMR1_ISR	;wreg free
  1814                           
  1815                           ;interrupt_manager.c: 83: }
  1816  000062  D005               	goto	i2l276
  1817  000064                     i2l272:
  1818                           
  1819                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  1820  000064  B89D               	btfsc	3997,4,c	;volatile
  1821  000066  A89E               	btfss	3998,4,c	;volatile
  1822  000068  D002               	goto	i2l276
  1823                           
  1824                           ;interrupt_manager.c: 85: {
  1825                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
  1826  00006A  EC4C  F004         	call	_EUSART1_Transmit_ISR	;wreg free
  1827  00006E                     i2l276:
  1828  00006E  C016  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  1829  000072  C015  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  1830  000076  C014  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  1831  00007A  C013  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  1832  00007E  C012  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  1833  000082  C011  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  1834  000086  C010  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  1835  00008A  C00F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  1836  00008E  C00E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  1837  000092  C00D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  1838  000096  C00C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  1839  00009A  C00B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  1840  00009E  C00A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  1841  0000A2  C009  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  1842  0000A6  0011               	retfie		f
  1843  0000A8                     __end_of_INTERRUPT_InterruptManager:
  1844                           	opt stack 0
  1845                           pclatu	equ	0xFFB
  1846                           pclath	equ	0xFFA
  1847                           tblptru	equ	0xFF8
  1848                           tblptrh	equ	0xFF7
  1849                           tblptrl	equ	0xFF6
  1850                           tablat	equ	0xFF5
  1851                           prodh	equ	0xFF4
  1852                           prodl	equ	0xFF3
  1853                           intcon	equ	0xFF2
  1854                           intcon2	equ	0xFF1
  1855                           postinc0	equ	0xFEE
  1856                           fsr0h	equ	0xFEA
  1857                           fsr0l	equ	0xFE9
  1858                           wreg	equ	0xFE8
  1859                           fsr1h	equ	0xFE2
  1860                           fsr1l	equ	0xFE1
  1861                           postinc2	equ	0xFDE
  1862                           postdec2	equ	0xFDD
  1863                           fsr2h	equ	0xFDA
  1864                           fsr2l	equ	0xFD9
  1865                           status	equ	0xFD8
  1866                           
  1867 ;; *************** function _TMR1_ISR *****************
  1868 ;; Defined at:
  1869 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;		None
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;		None
  1874 ;; Return value:  Size  Location     Type
  1875 ;;		None               void
  1876 ;; Registers used:
  1877 ;;		wreg, status,2, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1883 ;;      Params:         0       0       0       0       0       0       0
  1884 ;;      Locals:         0       0       0       0       0       0       0
  1885 ;;      Temps:          3       0       0       0       0       0       0
  1886 ;;      Totals:         3       0       0       0       0       0       0
  1887 ;;Total ram usage:        3 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    1
  1890 ;; This function calls:
  1891 ;;		_TMR1_CallBack
  1892 ;; This function is called by:
  1893 ;;		_INTERRUPT_InterruptManager
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           	psect	text15
  1898  00097A                     __ptext15:
  1899                           	opt stack 0
  1900  00097A                     _TMR1_ISR:
  1901                           	opt stack 25
  1902                           
  1903                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
  1904                           
  1905                           ;incstack = 0
  1906  00097A  909E               	bcf	3998,0,c	;volatile
  1907                           
  1908                           ;tmr1.c: 164: TMR1H = (timer1ReloadVal >> 8);
  1909  00097C  C048  F001         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
  1910  000980  C001  F002         	movff	??_TMR1_ISR,??_TMR1_ISR+1
  1911  000984  6A03               	clrf	(??_TMR1_ISR+2)& (0+255),c
  1912  000986  5002               	movf	??_TMR1_ISR+1,w,c
  1913  000988  6ECF               	movwf	4047,c	;volatile
  1914                           
  1915                           ;tmr1.c: 165: TMR1L = (uint8_t) timer1ReloadVal;
  1916  00098A  C047  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  1917                           
  1918                           ;tmr1.c: 169: TMR1_CallBack();
  1919  00098E  ECFC  F004         	call	_TMR1_CallBack	;wreg free
  1920  000992  0012               	return	
  1921  000994                     __end_of_TMR1_ISR:
  1922                           	opt stack 0
  1923                           pclatu	equ	0xFFB
  1924                           pclath	equ	0xFFA
  1925                           tblptru	equ	0xFF8
  1926                           tblptrh	equ	0xFF7
  1927                           tblptrl	equ	0xFF6
  1928                           tablat	equ	0xFF5
  1929                           prodh	equ	0xFF4
  1930                           prodl	equ	0xFF3
  1931                           intcon	equ	0xFF2
  1932                           intcon2	equ	0xFF1
  1933                           postinc0	equ	0xFEE
  1934                           fsr0h	equ	0xFEA
  1935                           fsr0l	equ	0xFE9
  1936                           wreg	equ	0xFE8
  1937                           fsr1h	equ	0xFE2
  1938                           fsr1l	equ	0xFE1
  1939                           postinc2	equ	0xFDE
  1940                           postdec2	equ	0xFDD
  1941                           fsr2h	equ	0xFDA
  1942                           fsr2l	equ	0xFD9
  1943                           status	equ	0xFD8
  1944                           
  1945 ;; *************** function _TMR1_CallBack *****************
  1946 ;; Defined at:
  1947 ;;		line 173 in file "mcc_generated_files/tmr1.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;		None
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;		None
  1952 ;; Return value:  Size  Location     Type
  1953 ;;		None               void
  1954 ;; Registers used:
  1955 ;;		None
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1961 ;;      Params:         0       0       0       0       0       0       0
  1962 ;;      Locals:         0       0       0       0       0       0       0
  1963 ;;      Temps:          0       0       0       0       0       0       0
  1964 ;;      Totals:         0       0       0       0       0       0       0
  1965 ;;Total ram usage:        0 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; This function calls:
  1968 ;;		Nothing
  1969 ;; This function is called by:
  1970 ;;		_TMR1_ISR
  1971 ;; This function uses a non-reentrant model
  1972 ;;
  1973                           
  1974                           	psect	text16
  1975  0009F8                     __ptext16:
  1976                           	opt stack 0
  1977  0009F8                     _TMR1_CallBack:
  1978                           	opt stack 25
  1979                           
  1980                           ;incstack = 0
  1981  0009F8  0012               	return	
  1982  0009FA                     __end_of_TMR1_CallBack:
  1983                           	opt stack 0
  1984                           pclatu	equ	0xFFB
  1985                           pclath	equ	0xFFA
  1986                           tblptru	equ	0xFF8
  1987                           tblptrh	equ	0xFF7
  1988                           tblptrl	equ	0xFF6
  1989                           tablat	equ	0xFF5
  1990                           prodh	equ	0xFF4
  1991                           prodl	equ	0xFF3
  1992                           intcon	equ	0xFF2
  1993                           intcon2	equ	0xFF1
  1994                           postinc0	equ	0xFEE
  1995                           fsr0h	equ	0xFEA
  1996                           fsr0l	equ	0xFE9
  1997                           wreg	equ	0xFE8
  1998                           fsr1h	equ	0xFE2
  1999                           fsr1l	equ	0xFE1
  2000                           postinc2	equ	0xFDE
  2001                           postdec2	equ	0xFDD
  2002                           fsr2h	equ	0xFDA
  2003                           fsr2l	equ	0xFD9
  2004                           status	equ	0xFD8
  2005                           
  2006 ;; *************** function _EUSART1_Transmit_ISR *****************
  2007 ;; Defined at:
  2008 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;		None
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;		None
  2013 ;; Return value:  Size  Location     Type
  2014 ;;		None               void
  2015 ;; Registers used:
  2016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2022 ;;      Params:         0       0       0       0       0       0       0
  2023 ;;      Locals:         0       0       0       0       0       0       0
  2024 ;;      Temps:          0       0       0       0       0       0       0
  2025 ;;      Totals:         0       0       0       0       0       0       0
  2026 ;;Total ram usage:        0 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_INTERRUPT_InterruptManager
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text17
  2036  000898                     __ptext17:
  2037                           	opt stack 0
  2038  000898                     _EUSART1_Transmit_ISR:
  2039                           	opt stack 26
  2040                           
  2041                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  2042                           
  2043                           ;incstack = 0
  2044  000898  0E08               	movlw	8
  2045  00089A  5C49               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
  2046  00089C  B0D8               	btfsc	status,0,c
  2047  00089E  D014               	goto	i2l122
  2048                           
  2049                           ;eusart1.c: 178: {
  2050                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
  2051  0008A0  5046               	movf	_eusart1TxTail,w,c
  2052  0008A2  0D01               	mullw	1
  2053  0008A4  0100               	movlb	0	; () banked
  2054  0008A6  0EA4               	movlw	low _eusart1TxBuffer
  2055  0008A8  24F3               	addwf	prodl,w,c
  2056  0008AA  6ED9               	movwf	fsr2l,c
  2057  0008AC  0100               	movlb	0	; () banked
  2058  0008AE  0E00               	movlw	high _eusart1TxBuffer
  2059  0008B0  20F4               	addwfc	prodh,w,c
  2060  0008B2  6EDA               	movwf	fsr2h,c
  2061  0008B4  50DF               	movf	indf2,w,c
  2062  0008B6  6EAD               	movwf	4013,c	;volatile
  2063                           
  2064                           ; BSR set to: 0
  2065  0008B8  2A46               	incf	_eusart1TxTail,f,c
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  2069  0008BA  0E07               	movlw	7
  2070  0008BC  6446               	cpfsgt	_eusart1TxTail,c
  2071  0008BE  D002               	goto	i2l1588
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;eusart1.c: 181: {
  2075                           ;eusart1.c: 182: eusart1TxTail = 0;
  2076  0008C0  0E00               	movlw	0
  2077  0008C2  6E46               	movwf	_eusart1TxTail,c
  2078  0008C4                     i2l1588:
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;eusart1.c: 183: }
  2082                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
  2083  0008C4  2A49               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  2084                           
  2085                           ;eusart1.c: 185: }
  2086  0008C6  0012               	return	
  2087  0008C8                     i2l122:
  2088                           
  2089                           ;eusart1.c: 186: else
  2090                           ;eusart1.c: 187: {
  2091                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
  2092  0008C8  989D               	bcf	3997,4,c	;volatile
  2093  0008CA  0012               	return	
  2094  0008CC                     __end_of_EUSART1_Transmit_ISR:
  2095                           	opt stack 0
  2096                           pclatu	equ	0xFFB
  2097                           pclath	equ	0xFFA
  2098                           tblptru	equ	0xFF8
  2099                           tblptrh	equ	0xFF7
  2100                           tblptrl	equ	0xFF6
  2101                           tablat	equ	0xFF5
  2102                           prodh	equ	0xFF4
  2103                           prodl	equ	0xFF3
  2104                           intcon	equ	0xFF2
  2105                           intcon2	equ	0xFF1
  2106                           postinc0	equ	0xFEE
  2107                           fsr0h	equ	0xFEA
  2108                           fsr0l	equ	0xFE9
  2109                           wreg	equ	0xFE8
  2110                           fsr1h	equ	0xFE2
  2111                           fsr1l	equ	0xFE1
  2112                           indf2	equ	0xFDF
  2113                           postinc2	equ	0xFDE
  2114                           postdec2	equ	0xFDD
  2115                           fsr2h	equ	0xFDA
  2116                           fsr2l	equ	0xFD9
  2117                           status	equ	0xFD8
  2118                           
  2119 ;; *************** function _EUSART1_Receive_ISR *****************
  2120 ;; Defined at:
  2121 ;;		line 192 in file "mcc_generated_files/eusart1.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;		None
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;		None
  2126 ;; Return value:  Size  Location     Type
  2127 ;;		None               void
  2128 ;; Registers used:
  2129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2135 ;;      Params:         0       0       0       0       0       0       0
  2136 ;;      Locals:         0       0       0       0       0       0       0
  2137 ;;      Temps:          0       0       0       0       0       0       0
  2138 ;;      Totals:         0       0       0       0       0       0       0
  2139 ;;Total ram usage:        0 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; This function calls:
  2142 ;;		Nothing
  2143 ;; This function is called by:
  2144 ;;		_INTERRUPT_InterruptManager
  2145 ;; This function uses a non-reentrant model
  2146 ;;
  2147                           
  2148                           	psect	text18
  2149  0008CC                     __ptext18:
  2150                           	opt stack 0
  2151  0008CC                     _EUSART1_Receive_ISR:
  2152                           	opt stack 26
  2153                           
  2154                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
  2155                           
  2156                           ;incstack = 0
  2157  0008CC  A2AB               	btfss	4011,1,c	;volatile
  2158  0008CE  D002               	goto	i2l1594
  2159                           
  2160                           ;eusart1.c: 195: {
  2161                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
  2162  0008D0  98AB               	bcf	4011,4,c	;volatile
  2163                           
  2164                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
  2165  0008D2  88AB               	bsf	4011,4,c	;volatile
  2166  0008D4                     i2l1594:
  2167                           
  2168                           ;eusart1.c: 200: }
  2169                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
  2170  0008D4  5043               	movf	_eusart1RxHead,w,c
  2171  0008D6  0D01               	mullw	1
  2172  0008D8  0100               	movlb	0	; () banked
  2173  0008DA  0E9C               	movlw	low _eusart1RxBuffer
  2174  0008DC  24F3               	addwf	prodl,w,c
  2175  0008DE  6ED9               	movwf	fsr2l,c
  2176  0008E0  0100               	movlb	0	; () banked
  2177  0008E2  0E00               	movlw	high _eusart1RxBuffer
  2178  0008E4  20F4               	addwfc	prodh,w,c
  2179  0008E6  6EDA               	movwf	fsr2h,c
  2180  0008E8  CFAE FFDF          	movff	4014,indf2	;volatile
  2181                           
  2182                           ; BSR set to: 0
  2183  0008EC  2A43               	incf	_eusart1RxHead,f,c
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  2187  0008EE  0E07               	movlw	7
  2188  0008F0  6443               	cpfsgt	_eusart1RxHead,c
  2189  0008F2  D002               	goto	i2l1602
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;eusart1.c: 205: {
  2193                           ;eusart1.c: 206: eusart1RxHead = 0;
  2194  0008F4  0E00               	movlw	0
  2195  0008F6  6E43               	movwf	_eusart1RxHead,c
  2196  0008F8                     i2l1602:
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;eusart1.c: 207: }
  2200                           ;eusart1.c: 208: eusart1RxCount++;
  2201  0008F8  2A42               	incf	_eusart1RxCount,f,c	;volatile
  2202                           
  2203                           ; BSR set to: 0
  2204  0008FA  0012               	return	
  2205  0008FC                     __end_of_EUSART1_Receive_ISR:
  2206                           	opt stack 0
  2207                           pclatu	equ	0xFFB
  2208                           pclath	equ	0xFFA
  2209                           tblptru	equ	0xFF8
  2210                           tblptrh	equ	0xFF7
  2211                           tblptrl	equ	0xFF6
  2212                           tablat	equ	0xFF5
  2213                           prodh	equ	0xFF4
  2214                           prodl	equ	0xFF3
  2215                           intcon	equ	0xFF2
  2216                           intcon2	equ	0xFF1
  2217                           postinc0	equ	0xFEE
  2218                           fsr0h	equ	0xFEA
  2219                           fsr0l	equ	0xFE9
  2220                           wreg	equ	0xFE8
  2221                           fsr1h	equ	0xFE2
  2222                           fsr1l	equ	0xFE1
  2223                           indf2	equ	0xFDF
  2224                           postinc2	equ	0xFDE
  2225                           postdec2	equ	0xFDD
  2226                           fsr2h	equ	0xFDA
  2227                           fsr2l	equ	0xFD9
  2228                           status	equ	0xFD8
  2229                           
  2230 ;; *************** function _ADC_ISR *****************
  2231 ;; Defined at:
  2232 ;;		line 82 in file "mcc_generated_files/adc.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;  ADC_Result      2    6[COMRAM] int 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;		None               void
  2239 ;; Registers used:
  2240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2246 ;;      Params:         0       0       0       0       0       0       0
  2247 ;;      Locals:         2       0       0       0       0       0       0
  2248 ;;      Temps:          2       0       0       0       0       0       0
  2249 ;;      Totals:         4       0       0       0       0       0       0
  2250 ;;Total ram usage:        4 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    1
  2253 ;; This function calls:
  2254 ;;		_ADC_GetConversionResult
  2255 ;;		_ADC_StartConversion
  2256 ;; This function is called by:
  2257 ;;		_INTERRUPT_InterruptManager
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text19
  2262  0000AC                     __ptext19:
  2263                           	opt stack 0
  2264  0000AC                     _ADC_ISR:
  2265                           	opt stack 25
  2266                           
  2267                           ;adc.c: 85: PIR1bits.ADIF = 0;
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;incstack = 0
  2271  0000AC  9C9E               	bcf	3998,6,c	;volatile
  2272                           
  2273                           ;adc.c: 86: int ADC_Result = 0;
  2274  0000AE  0E00               	movlw	0
  2275  0000B0  6E08               	movwf	ADC_ISR@ADC_Result+1,c
  2276  0000B2  0E00               	movlw	0
  2277  0000B4  6E07               	movwf	ADC_ISR@ADC_Result,c
  2278                           
  2279                           ;adc.c: 87: if (Temp_Aquire){
  2280  0000B6  5040               	movf	_Temp_Aquire,w,c
  2281  0000B8  B4D8               	btfsc	status,2,c
  2282  0000BA  D10C               	goto	i2l1658
  2283                           
  2284                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
  2285  0000BC  ECE3  F004         	call	_ADC_GetConversionResult	;wreg free
  2286  0000C0  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  2287  0000C4  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  2288                           
  2289                           ;adc.c: 90: switch ( ADC_Buffer_Point )
  2290  0000C8  D0D9               	goto	i2l1654
  2291  0000CA                     i2l1610:
  2292                           
  2293                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2294  0000CA  0E26               	movlw	low _Temp_Adc
  2295  0000CC  6E05               	movwf	??_ADC_ISR& (0+255),c
  2296  0000CE  0E00               	movlw	high _Temp_Adc
  2297  0000D0  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2298  0000D2  90D8               	bcf	status,0,c
  2299  0000D4  343A               	rlcf	_ADC_Buffer_Point,w,c
  2300  0000D6  6ED9               	movwf	fsr2l,c
  2301  0000D8  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2302  0000DA  6EDA               	movwf	fsr2h,c
  2303  0000DC  5005               	movf	??_ADC_ISR,w,c
  2304  0000DE  26D9               	addwf	fsr2l,f,c
  2305  0000E0  5006               	movf	??_ADC_ISR+1,w,c
  2306  0000E2  22DA               	addwfc	fsr2h,f,c
  2307  0000E4  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2308  0000E8  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2309                           
  2310                           ;adc.c: 94: ADC_StartConversion(Temp1);
  2311  0000EC  0E0E               	movlw	14
  2312  0000EE  ECCA  F004         	call	_ADC_StartConversion
  2313                           
  2314                           ;adc.c: 95: break;
  2315  0000F2  D0EE               	goto	i2l1656
  2316  0000F4                     i2l1614:
  2317                           
  2318                           ;adc.c: 97: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2319  0000F4  0E26               	movlw	low _Temp_Adc
  2320  0000F6  6E05               	movwf	??_ADC_ISR& (0+255),c
  2321  0000F8  0E00               	movlw	high _Temp_Adc
  2322  0000FA  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2323  0000FC  90D8               	bcf	status,0,c
  2324  0000FE  343A               	rlcf	_ADC_Buffer_Point,w,c
  2325  000100  6ED9               	movwf	fsr2l,c
  2326  000102  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2327  000104  6EDA               	movwf	fsr2h,c
  2328  000106  5005               	movf	??_ADC_ISR,w,c
  2329  000108  26D9               	addwf	fsr2l,f,c
  2330  00010A  5006               	movf	??_ADC_ISR+1,w,c
  2331  00010C  22DA               	addwfc	fsr2h,f,c
  2332  00010E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2333  000112  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2334                           
  2335                           ;adc.c: 98: ADC_StartConversion(Temp1);
  2336  000116  0E0E               	movlw	14
  2337  000118  ECCA  F004         	call	_ADC_StartConversion
  2338                           
  2339                           ;adc.c: 99: break;
  2340  00011C  D0D9               	goto	i2l1656
  2341  00011E                     i2l1618:
  2342                           
  2343                           ;adc.c: 101: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2344  00011E  0E26               	movlw	low _Temp_Adc
  2345  000120  6E05               	movwf	??_ADC_ISR& (0+255),c
  2346  000122  0E00               	movlw	high _Temp_Adc
  2347  000124  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2348  000126  90D8               	bcf	status,0,c
  2349  000128  343A               	rlcf	_ADC_Buffer_Point,w,c
  2350  00012A  6ED9               	movwf	fsr2l,c
  2351  00012C  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2352  00012E  6EDA               	movwf	fsr2h,c
  2353  000130  5005               	movf	??_ADC_ISR,w,c
  2354  000132  26D9               	addwf	fsr2l,f,c
  2355  000134  5006               	movf	??_ADC_ISR+1,w,c
  2356  000136  22DA               	addwfc	fsr2h,f,c
  2357  000138  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2358  00013C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2359                           
  2360                           ;adc.c: 102: ADC_StartConversion(Temp1);
  2361  000140  0E0E               	movlw	14
  2362  000142  ECCA  F004         	call	_ADC_StartConversion
  2363                           
  2364                           ;adc.c: 103: break;
  2365  000146  D0C4               	goto	i2l1656
  2366  000148                     i2l1622:
  2367                           
  2368                           ;adc.c: 105: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2369  000148  0E26               	movlw	low _Temp_Adc
  2370  00014A  6E05               	movwf	??_ADC_ISR& (0+255),c
  2371  00014C  0E00               	movlw	high _Temp_Adc
  2372  00014E  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2373  000150  90D8               	bcf	status,0,c
  2374  000152  343A               	rlcf	_ADC_Buffer_Point,w,c
  2375  000154  6ED9               	movwf	fsr2l,c
  2376  000156  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2377  000158  6EDA               	movwf	fsr2h,c
  2378  00015A  5005               	movf	??_ADC_ISR,w,c
  2379  00015C  26D9               	addwf	fsr2l,f,c
  2380  00015E  5006               	movf	??_ADC_ISR+1,w,c
  2381  000160  22DA               	addwfc	fsr2h,f,c
  2382  000162  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2383  000166  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2384                           
  2385                           ;adc.c: 106: ADC_StartConversion(Temp1);
  2386  00016A  0E0E               	movlw	14
  2387  00016C  ECCA  F004         	call	_ADC_StartConversion
  2388                           
  2389                           ;adc.c: 107: break;
  2390  000170  D0AF               	goto	i2l1656
  2391  000172                     i2l1626:
  2392                           
  2393                           ;adc.c: 109: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2394  000172  0E26               	movlw	low _Temp_Adc
  2395  000174  6E05               	movwf	??_ADC_ISR& (0+255),c
  2396  000176  0E00               	movlw	high _Temp_Adc
  2397  000178  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2398  00017A  90D8               	bcf	status,0,c
  2399  00017C  343A               	rlcf	_ADC_Buffer_Point,w,c
  2400  00017E  6ED9               	movwf	fsr2l,c
  2401  000180  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2402  000182  6EDA               	movwf	fsr2h,c
  2403  000184  5005               	movf	??_ADC_ISR,w,c
  2404  000186  26D9               	addwf	fsr2l,f,c
  2405  000188  5006               	movf	??_ADC_ISR+1,w,c
  2406  00018A  22DA               	addwfc	fsr2h,f,c
  2407  00018C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2408  000190  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2409                           
  2410                           ;adc.c: 110: ADC_StartConversion(Temp1);
  2411  000194  0E0E               	movlw	14
  2412  000196  ECCA  F004         	call	_ADC_StartConversion
  2413                           
  2414                           ;adc.c: 111: break;
  2415  00019A  D09A               	goto	i2l1656
  2416  00019C                     i2l1630:
  2417                           
  2418                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2419  00019C  0E26               	movlw	low _Temp_Adc
  2420  00019E  6E05               	movwf	??_ADC_ISR& (0+255),c
  2421  0001A0  0E00               	movlw	high _Temp_Adc
  2422  0001A2  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2423  0001A4  90D8               	bcf	status,0,c
  2424  0001A6  343A               	rlcf	_ADC_Buffer_Point,w,c
  2425  0001A8  6ED9               	movwf	fsr2l,c
  2426  0001AA  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2427  0001AC  6EDA               	movwf	fsr2h,c
  2428  0001AE  5005               	movf	??_ADC_ISR,w,c
  2429  0001B0  26D9               	addwf	fsr2l,f,c
  2430  0001B2  5006               	movf	??_ADC_ISR+1,w,c
  2431  0001B4  22DA               	addwfc	fsr2h,f,c
  2432  0001B6  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2433  0001BA  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2434                           
  2435                           ;adc.c: 114: ADC_StartConversion(Temp1);
  2436  0001BE  0E0E               	movlw	14
  2437  0001C0  ECCA  F004         	call	_ADC_StartConversion
  2438                           
  2439                           ;adc.c: 115: break;
  2440  0001C4  D085               	goto	i2l1656
  2441  0001C6                     i2l1634:
  2442                           
  2443                           ;adc.c: 117: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2444  0001C6  0E26               	movlw	low _Temp_Adc
  2445  0001C8  6E05               	movwf	??_ADC_ISR& (0+255),c
  2446  0001CA  0E00               	movlw	high _Temp_Adc
  2447  0001CC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2448  0001CE  90D8               	bcf	status,0,c
  2449  0001D0  343A               	rlcf	_ADC_Buffer_Point,w,c
  2450  0001D2  6ED9               	movwf	fsr2l,c
  2451  0001D4  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2452  0001D6  6EDA               	movwf	fsr2h,c
  2453  0001D8  5005               	movf	??_ADC_ISR,w,c
  2454  0001DA  26D9               	addwf	fsr2l,f,c
  2455  0001DC  5006               	movf	??_ADC_ISR+1,w,c
  2456  0001DE  22DA               	addwfc	fsr2h,f,c
  2457  0001E0  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2458  0001E4  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2459                           
  2460                           ;adc.c: 118: ADC_StartConversion(Temp1);
  2461  0001E8  0E0E               	movlw	14
  2462  0001EA  ECCA  F004         	call	_ADC_StartConversion
  2463                           
  2464                           ;adc.c: 119: break;
  2465  0001EE  D070               	goto	i2l1656
  2466  0001F0                     i2l1638:
  2467                           
  2468                           ;adc.c: 121: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2469  0001F0  0E26               	movlw	low _Temp_Adc
  2470  0001F2  6E05               	movwf	??_ADC_ISR& (0+255),c
  2471  0001F4  0E00               	movlw	high _Temp_Adc
  2472  0001F6  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2473  0001F8  90D8               	bcf	status,0,c
  2474  0001FA  343A               	rlcf	_ADC_Buffer_Point,w,c
  2475  0001FC  6ED9               	movwf	fsr2l,c
  2476  0001FE  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2477  000200  6EDA               	movwf	fsr2h,c
  2478  000202  5005               	movf	??_ADC_ISR,w,c
  2479  000204  26D9               	addwf	fsr2l,f,c
  2480  000206  5006               	movf	??_ADC_ISR+1,w,c
  2481  000208  22DA               	addwfc	fsr2h,f,c
  2482  00020A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2483  00020E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2484                           
  2485                           ;adc.c: 122: ADC_StartConversion(Temp1);
  2486  000212  0E0E               	movlw	14
  2487  000214  ECCA  F004         	call	_ADC_StartConversion
  2488                           
  2489                           ;adc.c: 123: break;
  2490  000218  D05B               	goto	i2l1656
  2491  00021A                     i2l1642:
  2492                           
  2493                           ;adc.c: 125: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2494  00021A  0E26               	movlw	low _Temp_Adc
  2495  00021C  6E05               	movwf	??_ADC_ISR& (0+255),c
  2496  00021E  0E00               	movlw	high _Temp_Adc
  2497  000220  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2498  000222  90D8               	bcf	status,0,c
  2499  000224  343A               	rlcf	_ADC_Buffer_Point,w,c
  2500  000226  6ED9               	movwf	fsr2l,c
  2501  000228  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2502  00022A  6EDA               	movwf	fsr2h,c
  2503  00022C  5005               	movf	??_ADC_ISR,w,c
  2504  00022E  26D9               	addwf	fsr2l,f,c
  2505  000230  5006               	movf	??_ADC_ISR+1,w,c
  2506  000232  22DA               	addwfc	fsr2h,f,c
  2507  000234  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2508  000238  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2509                           
  2510                           ;adc.c: 126: ADC_StartConversion(Temp2);
  2511  00023C  0E14               	movlw	20
  2512  00023E  ECCA  F004         	call	_ADC_StartConversion
  2513                           
  2514                           ;adc.c: 127: break;
  2515  000242  D046               	goto	i2l1656
  2516  000244                     i2l1646:
  2517                           
  2518                           ;adc.c: 129: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2519  000244  0E26               	movlw	low _Temp_Adc
  2520  000246  6E05               	movwf	??_ADC_ISR& (0+255),c
  2521  000248  0E00               	movlw	high _Temp_Adc
  2522  00024A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2523  00024C  90D8               	bcf	status,0,c
  2524  00024E  343A               	rlcf	_ADC_Buffer_Point,w,c
  2525  000250  6ED9               	movwf	fsr2l,c
  2526  000252  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2527  000254  6EDA               	movwf	fsr2h,c
  2528  000256  5005               	movf	??_ADC_ISR,w,c
  2529  000258  26D9               	addwf	fsr2l,f,c
  2530  00025A  5006               	movf	??_ADC_ISR+1,w,c
  2531  00025C  22DA               	addwfc	fsr2h,f,c
  2532  00025E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2533  000262  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2534                           
  2535                           ;adc.c: 130: ADC_StartConversion(Temp2);
  2536  000266  0E14               	movlw	20
  2537  000268  ECCA  F004         	call	_ADC_StartConversion
  2538                           
  2539                           ;adc.c: 131: break;
  2540  00026C  D031               	goto	i2l1656
  2541  00026E                     i2l1650:
  2542                           
  2543                           ;adc.c: 133: Temp_Aquire = 0;
  2544  00026E  0E00               	movlw	0
  2545  000270  6E40               	movwf	_Temp_Aquire,c
  2546                           
  2547                           ;adc.c: 134: Temp_Done = 1;
  2548  000272  0E00               	movlw	0
  2549  000274  6E3D               	movwf	_Temp_Done+1,c
  2550  000276  0E01               	movlw	1
  2551  000278  6E3C               	movwf	_Temp_Done,c
  2552                           
  2553                           ;adc.c: 135: break;
  2554  00027A  D02A               	goto	i2l1656
  2555  00027C                     i2l1654:
  2556  00027C  C03A  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  2557  000280  C03B  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  2558                           
  2559                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2560                           ; Switch size 1, requested type "space"
  2561                           ; Number of cases is 1, Range of values is 0 to 0
  2562                           ; switch strategies available:
  2563                           ; Name         Instructions Cycles
  2564                           ; simple_byte            4     3 (average)
  2565                           ;	Chosen strategy is simple_byte
  2566  000284  5006               	movf	??_ADC_ISR+1,w,c
  2567  000286  0A00               	xorlw	0	; case 0
  2568  000288  A4D8               	btfss	status,2,c
  2569  00028A  D022               	goto	i2l1656
  2570                           
  2571                           ; Switch size 1, requested type "space"
  2572                           ; Number of cases is 11, Range of values is 0 to 10
  2573                           ; switch strategies available:
  2574                           ; Name         Instructions Cycles
  2575                           ; simple_byte           34    18 (average)
  2576                           ;	Chosen strategy is simple_byte
  2577  00028C  5005               	movf	??_ADC_ISR,w,c
  2578  00028E  0A00               	xorlw	0	; case 0
  2579  000290  B4D8               	btfsc	status,2,c
  2580  000292  D71B               	goto	i2l1610
  2581  000294  0A01               	xorlw	1	; case 1
  2582  000296  B4D8               	btfsc	status,2,c
  2583  000298  D72D               	goto	i2l1614
  2584  00029A  0A03               	xorlw	3	; case 2
  2585  00029C  B4D8               	btfsc	status,2,c
  2586  00029E  D73F               	goto	i2l1618
  2587  0002A0  0A01               	xorlw	1	; case 3
  2588  0002A2  B4D8               	btfsc	status,2,c
  2589  0002A4  D751               	goto	i2l1622
  2590  0002A6  0A07               	xorlw	7	; case 4
  2591  0002A8  B4D8               	btfsc	status,2,c
  2592  0002AA  D763               	goto	i2l1626
  2593  0002AC  0A01               	xorlw	1	; case 5
  2594  0002AE  B4D8               	btfsc	status,2,c
  2595  0002B0  D775               	goto	i2l1630
  2596  0002B2  0A03               	xorlw	3	; case 6
  2597  0002B4  B4D8               	btfsc	status,2,c
  2598  0002B6  D787               	goto	i2l1634
  2599  0002B8  0A01               	xorlw	1	; case 7
  2600  0002BA  B4D8               	btfsc	status,2,c
  2601  0002BC  D799               	goto	i2l1638
  2602  0002BE  0A0F               	xorlw	15	; case 8
  2603  0002C0  B4D8               	btfsc	status,2,c
  2604  0002C2  D7AB               	goto	i2l1642
  2605  0002C4  0A01               	xorlw	1	; case 9
  2606  0002C6  B4D8               	btfsc	status,2,c
  2607  0002C8  D7BD               	goto	i2l1646
  2608  0002CA  0A03               	xorlw	3	; case 10
  2609  0002CC  B4D8               	btfsc	status,2,c
  2610  0002CE  D7CF               	goto	i2l1650
  2611  0002D0                     i2l1656:
  2612                           
  2613                           ;adc.c: 137: ADC_Buffer_Point++;
  2614  0002D0  4A3A               	infsnz	_ADC_Buffer_Point,f,c
  2615  0002D2  2A3B               	incf	_ADC_Buffer_Point+1,f,c
  2616  0002D4                     i2l1658:
  2617                           
  2618                           ;adc.c: 138: }
  2619                           ;adc.c: 139: if (Volt_Aquire){
  2620  0002D4  5041               	movf	_Volt_Aquire,w,c
  2621  0002D6  B4D8               	btfsc	status,2,c
  2622  0002D8  0012               	return	
  2623                           
  2624                           ;adc.c: 141: ADC_Result = ADC_GetConversionResult();
  2625  0002DA  ECE3  F004         	call	_ADC_GetConversionResult	;wreg free
  2626  0002DE  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  2627  0002E2  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  2628                           
  2629                           ;adc.c: 142: switch ( ADC_Buffer_Point )
  2630  0002E6  D0D9               	goto	i2l1706
  2631  0002E8                     i2l1662:
  2632                           
  2633                           ;adc.c: 145: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2634  0002E8  0E60               	movlw	low _Battery_Adc
  2635  0002EA  6E05               	movwf	??_ADC_ISR& (0+255),c
  2636  0002EC  0E00               	movlw	high _Battery_Adc
  2637  0002EE  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2638  0002F0  90D8               	bcf	status,0,c
  2639  0002F2  343A               	rlcf	_ADC_Buffer_Point,w,c
  2640  0002F4  6ED9               	movwf	fsr2l,c
  2641  0002F6  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2642  0002F8  6EDA               	movwf	fsr2h,c
  2643  0002FA  5005               	movf	??_ADC_ISR,w,c
  2644  0002FC  26D9               	addwf	fsr2l,f,c
  2645  0002FE  5006               	movf	??_ADC_ISR+1,w,c
  2646  000300  22DA               	addwfc	fsr2h,f,c
  2647  000302  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2648  000306  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2649                           
  2650                           ;adc.c: 146: ADC_StartConversion(Battery1);
  2651  00030A  0E01               	movlw	1
  2652  00030C  ECCA  F004         	call	_ADC_StartConversion
  2653                           
  2654                           ;adc.c: 147: break;
  2655  000310  D0EE               	goto	i2l1708
  2656  000312                     i2l1666:
  2657                           
  2658                           ;adc.c: 149: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2659  000312  0E60               	movlw	low _Battery_Adc
  2660  000314  6E05               	movwf	??_ADC_ISR& (0+255),c
  2661  000316  0E00               	movlw	high _Battery_Adc
  2662  000318  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2663  00031A  90D8               	bcf	status,0,c
  2664  00031C  343A               	rlcf	_ADC_Buffer_Point,w,c
  2665  00031E  6ED9               	movwf	fsr2l,c
  2666  000320  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2667  000322  6EDA               	movwf	fsr2h,c
  2668  000324  5005               	movf	??_ADC_ISR,w,c
  2669  000326  26D9               	addwf	fsr2l,f,c
  2670  000328  5006               	movf	??_ADC_ISR+1,w,c
  2671  00032A  22DA               	addwfc	fsr2h,f,c
  2672  00032C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2673  000330  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2674                           
  2675                           ;adc.c: 150: ADC_StartConversion(Battery2);
  2676  000334  0E03               	movlw	3
  2677  000336  ECCA  F004         	call	_ADC_StartConversion
  2678                           
  2679                           ;adc.c: 151: break;
  2680  00033A  D0D9               	goto	i2l1708
  2681  00033C                     i2l1670:
  2682                           
  2683                           ;adc.c: 153: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2684  00033C  0E60               	movlw	low _Battery_Adc
  2685  00033E  6E05               	movwf	??_ADC_ISR& (0+255),c
  2686  000340  0E00               	movlw	high _Battery_Adc
  2687  000342  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2688  000344  90D8               	bcf	status,0,c
  2689  000346  343A               	rlcf	_ADC_Buffer_Point,w,c
  2690  000348  6ED9               	movwf	fsr2l,c
  2691  00034A  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2692  00034C  6EDA               	movwf	fsr2h,c
  2693  00034E  5005               	movf	??_ADC_ISR,w,c
  2694  000350  26D9               	addwf	fsr2l,f,c
  2695  000352  5006               	movf	??_ADC_ISR+1,w,c
  2696  000354  22DA               	addwfc	fsr2h,f,c
  2697  000356  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2698  00035A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2699                           
  2700                           ;adc.c: 154: ADC_StartConversion(Battery3);
  2701  00035E  0E04               	movlw	4
  2702  000360  ECCA  F004         	call	_ADC_StartConversion
  2703                           
  2704                           ;adc.c: 155: break;
  2705  000364  D0C4               	goto	i2l1708
  2706  000366                     i2l1674:
  2707                           
  2708                           ;adc.c: 157: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2709  000366  0E60               	movlw	low _Battery_Adc
  2710  000368  6E05               	movwf	??_ADC_ISR& (0+255),c
  2711  00036A  0E00               	movlw	high _Battery_Adc
  2712  00036C  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2713  00036E  90D8               	bcf	status,0,c
  2714  000370  343A               	rlcf	_ADC_Buffer_Point,w,c
  2715  000372  6ED9               	movwf	fsr2l,c
  2716  000374  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2717  000376  6EDA               	movwf	fsr2h,c
  2718  000378  5005               	movf	??_ADC_ISR,w,c
  2719  00037A  26D9               	addwf	fsr2l,f,c
  2720  00037C  5006               	movf	??_ADC_ISR+1,w,c
  2721  00037E  22DA               	addwfc	fsr2h,f,c
  2722  000380  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2723  000384  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2724                           
  2725                           ;adc.c: 158: ADC_StartConversion(Battery4);
  2726  000388  0E05               	movlw	5
  2727  00038A  ECCA  F004         	call	_ADC_StartConversion
  2728                           
  2729                           ;adc.c: 159: break;
  2730  00038E  D0AF               	goto	i2l1708
  2731  000390                     i2l1678:
  2732                           
  2733                           ;adc.c: 161: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2734  000390  0E60               	movlw	low _Battery_Adc
  2735  000392  6E05               	movwf	??_ADC_ISR& (0+255),c
  2736  000394  0E00               	movlw	high _Battery_Adc
  2737  000396  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2738  000398  90D8               	bcf	status,0,c
  2739  00039A  343A               	rlcf	_ADC_Buffer_Point,w,c
  2740  00039C  6ED9               	movwf	fsr2l,c
  2741  00039E  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2742  0003A0  6EDA               	movwf	fsr2h,c
  2743  0003A2  5005               	movf	??_ADC_ISR,w,c
  2744  0003A4  26D9               	addwf	fsr2l,f,c
  2745  0003A6  5006               	movf	??_ADC_ISR+1,w,c
  2746  0003A8  22DA               	addwfc	fsr2h,f,c
  2747  0003AA  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2748  0003AE  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2749                           
  2750                           ;adc.c: 162: ADC_StartConversion(Battery5);
  2751  0003B2  0E18               	movlw	24
  2752  0003B4  ECCA  F004         	call	_ADC_StartConversion
  2753                           
  2754                           ;adc.c: 163: break;
  2755  0003B8  D09A               	goto	i2l1708
  2756  0003BA                     i2l1682:
  2757                           
  2758                           ;adc.c: 165: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2759  0003BA  0E60               	movlw	low _Battery_Adc
  2760  0003BC  6E05               	movwf	??_ADC_ISR& (0+255),c
  2761  0003BE  0E00               	movlw	high _Battery_Adc
  2762  0003C0  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2763  0003C2  90D8               	bcf	status,0,c
  2764  0003C4  343A               	rlcf	_ADC_Buffer_Point,w,c
  2765  0003C6  6ED9               	movwf	fsr2l,c
  2766  0003C8  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2767  0003CA  6EDA               	movwf	fsr2h,c
  2768  0003CC  5005               	movf	??_ADC_ISR,w,c
  2769  0003CE  26D9               	addwf	fsr2l,f,c
  2770  0003D0  5006               	movf	??_ADC_ISR+1,w,c
  2771  0003D2  22DA               	addwfc	fsr2h,f,c
  2772  0003D4  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2773  0003D8  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2774                           
  2775                           ;adc.c: 166: ADC_StartConversion(Battery6);
  2776  0003DC  0E1A               	movlw	26
  2777  0003DE  ECCA  F004         	call	_ADC_StartConversion
  2778                           
  2779                           ;adc.c: 167: break;
  2780  0003E2  D085               	goto	i2l1708
  2781  0003E4                     i2l1686:
  2782                           
  2783                           ;adc.c: 169: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2784  0003E4  0E60               	movlw	low _Battery_Adc
  2785  0003E6  6E05               	movwf	??_ADC_ISR& (0+255),c
  2786  0003E8  0E00               	movlw	high _Battery_Adc
  2787  0003EA  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2788  0003EC  90D8               	bcf	status,0,c
  2789  0003EE  343A               	rlcf	_ADC_Buffer_Point,w,c
  2790  0003F0  6ED9               	movwf	fsr2l,c
  2791  0003F2  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2792  0003F4  6EDA               	movwf	fsr2h,c
  2793  0003F6  5005               	movf	??_ADC_ISR,w,c
  2794  0003F8  26D9               	addwf	fsr2l,f,c
  2795  0003FA  5006               	movf	??_ADC_ISR+1,w,c
  2796  0003FC  22DA               	addwfc	fsr2h,f,c
  2797  0003FE  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2798  000402  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2799                           
  2800                           ;adc.c: 170: ADC_StartConversion(Battery7);
  2801  000406  0E1B               	movlw	27
  2802  000408  ECCA  F004         	call	_ADC_StartConversion
  2803                           
  2804                           ;adc.c: 171: break;
  2805  00040C  D070               	goto	i2l1708
  2806  00040E                     i2l1690:
  2807                           
  2808                           ;adc.c: 173: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2809  00040E  0E60               	movlw	low _Battery_Adc
  2810  000410  6E05               	movwf	??_ADC_ISR& (0+255),c
  2811  000412  0E00               	movlw	high _Battery_Adc
  2812  000414  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2813  000416  90D8               	bcf	status,0,c
  2814  000418  343A               	rlcf	_ADC_Buffer_Point,w,c
  2815  00041A  6ED9               	movwf	fsr2l,c
  2816  00041C  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2817  00041E  6EDA               	movwf	fsr2h,c
  2818  000420  5005               	movf	??_ADC_ISR,w,c
  2819  000422  26D9               	addwf	fsr2l,f,c
  2820  000424  5006               	movf	??_ADC_ISR+1,w,c
  2821  000426  22DA               	addwfc	fsr2h,f,c
  2822  000428  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2823  00042C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2824                           
  2825                           ;adc.c: 174: ADC_StartConversion(Battery8);
  2826  000430  0E08               	movlw	8
  2827  000432  ECCA  F004         	call	_ADC_StartConversion
  2828                           
  2829                           ;adc.c: 175: break;
  2830  000436  D05B               	goto	i2l1708
  2831  000438                     i2l1694:
  2832                           
  2833                           ;adc.c: 177: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2834  000438  0E60               	movlw	low _Battery_Adc
  2835  00043A  6E05               	movwf	??_ADC_ISR& (0+255),c
  2836  00043C  0E00               	movlw	high _Battery_Adc
  2837  00043E  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2838  000440  90D8               	bcf	status,0,c
  2839  000442  343A               	rlcf	_ADC_Buffer_Point,w,c
  2840  000444  6ED9               	movwf	fsr2l,c
  2841  000446  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2842  000448  6EDA               	movwf	fsr2h,c
  2843  00044A  5005               	movf	??_ADC_ISR,w,c
  2844  00044C  26D9               	addwf	fsr2l,f,c
  2845  00044E  5006               	movf	??_ADC_ISR+1,w,c
  2846  000450  22DA               	addwfc	fsr2h,f,c
  2847  000452  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2848  000456  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2849                           
  2850                           ;adc.c: 178: ADC_StartConversion(Battery9);
  2851  00045A  0E0B               	movlw	11
  2852  00045C  ECCA  F004         	call	_ADC_StartConversion
  2853                           
  2854                           ;adc.c: 179: break;
  2855  000460  D046               	goto	i2l1708
  2856  000462                     i2l1698:
  2857                           
  2858                           ;adc.c: 181: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2859  000462  0E60               	movlw	low _Battery_Adc
  2860  000464  6E05               	movwf	??_ADC_ISR& (0+255),c
  2861  000466  0E00               	movlw	high _Battery_Adc
  2862  000468  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  2863  00046A  90D8               	bcf	status,0,c
  2864  00046C  343A               	rlcf	_ADC_Buffer_Point,w,c
  2865  00046E  6ED9               	movwf	fsr2l,c
  2866  000470  343B               	rlcf	_ADC_Buffer_Point+1,w,c
  2867  000472  6EDA               	movwf	fsr2h,c
  2868  000474  5005               	movf	??_ADC_ISR,w,c
  2869  000476  26D9               	addwf	fsr2l,f,c
  2870  000478  5006               	movf	??_ADC_ISR+1,w,c
  2871  00047A  22DA               	addwfc	fsr2h,f,c
  2872  00047C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2873  000480  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2874                           
  2875                           ;adc.c: 182: ADC_StartConversion(Battery10);
  2876  000484  0E0D               	movlw	13
  2877  000486  ECCA  F004         	call	_ADC_StartConversion
  2878                           
  2879                           ;adc.c: 183: break;
  2880  00048A  D031               	goto	i2l1708
  2881  00048C                     i2l1702:
  2882                           
  2883                           ;adc.c: 185: Volt_Aquire = 0;
  2884  00048C  0E00               	movlw	0
  2885  00048E  6E41               	movwf	_Volt_Aquire,c
  2886                           
  2887                           ;adc.c: 186: Volt_Done = 1;
  2888  000490  0E00               	movlw	0
  2889  000492  6E3F               	movwf	_Volt_Done+1,c
  2890  000494  0E01               	movlw	1
  2891  000496  6E3E               	movwf	_Volt_Done,c
  2892                           
  2893                           ;adc.c: 187: break;
  2894  000498  D02A               	goto	i2l1708
  2895  00049A                     i2l1706:
  2896  00049A  C03A  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  2897  00049E  C03B  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  2898                           
  2899                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2900                           ; Switch size 1, requested type "space"
  2901                           ; Number of cases is 1, Range of values is 0 to 0
  2902                           ; switch strategies available:
  2903                           ; Name         Instructions Cycles
  2904                           ; simple_byte            4     3 (average)
  2905                           ;	Chosen strategy is simple_byte
  2906  0004A2  5006               	movf	??_ADC_ISR+1,w,c
  2907  0004A4  0A00               	xorlw	0	; case 0
  2908  0004A6  A4D8               	btfss	status,2,c
  2909  0004A8  D022               	goto	i2l1708
  2910                           
  2911                           ; Switch size 1, requested type "space"
  2912                           ; Number of cases is 11, Range of values is 0 to 10
  2913                           ; switch strategies available:
  2914                           ; Name         Instructions Cycles
  2915                           ; simple_byte           34    18 (average)
  2916                           ;	Chosen strategy is simple_byte
  2917  0004AA  5005               	movf	??_ADC_ISR,w,c
  2918  0004AC  0A00               	xorlw	0	; case 0
  2919  0004AE  B4D8               	btfsc	status,2,c
  2920  0004B0  D71B               	goto	i2l1662
  2921  0004B2  0A01               	xorlw	1	; case 1
  2922  0004B4  B4D8               	btfsc	status,2,c
  2923  0004B6  D72D               	goto	i2l1666
  2924  0004B8  0A03               	xorlw	3	; case 2
  2925  0004BA  B4D8               	btfsc	status,2,c
  2926  0004BC  D73F               	goto	i2l1670
  2927  0004BE  0A01               	xorlw	1	; case 3
  2928  0004C0  B4D8               	btfsc	status,2,c
  2929  0004C2  D751               	goto	i2l1674
  2930  0004C4  0A07               	xorlw	7	; case 4
  2931  0004C6  B4D8               	btfsc	status,2,c
  2932  0004C8  D763               	goto	i2l1678
  2933  0004CA  0A01               	xorlw	1	; case 5
  2934  0004CC  B4D8               	btfsc	status,2,c
  2935  0004CE  D775               	goto	i2l1682
  2936  0004D0  0A03               	xorlw	3	; case 6
  2937  0004D2  B4D8               	btfsc	status,2,c
  2938  0004D4  D787               	goto	i2l1686
  2939  0004D6  0A01               	xorlw	1	; case 7
  2940  0004D8  B4D8               	btfsc	status,2,c
  2941  0004DA  D799               	goto	i2l1690
  2942  0004DC  0A0F               	xorlw	15	; case 8
  2943  0004DE  B4D8               	btfsc	status,2,c
  2944  0004E0  D7AB               	goto	i2l1694
  2945  0004E2  0A01               	xorlw	1	; case 9
  2946  0004E4  B4D8               	btfsc	status,2,c
  2947  0004E6  D7BD               	goto	i2l1698
  2948  0004E8  0A03               	xorlw	3	; case 10
  2949  0004EA  B4D8               	btfsc	status,2,c
  2950  0004EC  D7CF               	goto	i2l1702
  2951  0004EE                     i2l1708:
  2952                           
  2953                           ;adc.c: 189: ADC_Buffer_Point++;
  2954  0004EE  4A3A               	infsnz	_ADC_Buffer_Point,f,c
  2955  0004F0  2A3B               	incf	_ADC_Buffer_Point+1,f,c
  2956  0004F2  0012               	return	
  2957  0004F4                     __end_of_ADC_ISR:
  2958                           	opt stack 0
  2959                           pclatu	equ	0xFFB
  2960                           pclath	equ	0xFFA
  2961                           tblptru	equ	0xFF8
  2962                           tblptrh	equ	0xFF7
  2963                           tblptrl	equ	0xFF6
  2964                           tablat	equ	0xFF5
  2965                           prodh	equ	0xFF4
  2966                           prodl	equ	0xFF3
  2967                           intcon	equ	0xFF2
  2968                           intcon2	equ	0xFF1
  2969                           postinc0	equ	0xFEE
  2970                           fsr0h	equ	0xFEA
  2971                           fsr0l	equ	0xFE9
  2972                           wreg	equ	0xFE8
  2973                           fsr1h	equ	0xFE2
  2974                           fsr1l	equ	0xFE1
  2975                           indf2	equ	0xFDF
  2976                           postinc2	equ	0xFDE
  2977                           postdec2	equ	0xFDD
  2978                           fsr2h	equ	0xFDA
  2979                           fsr2l	equ	0xFD9
  2980                           status	equ	0xFD8
  2981                           
  2982 ;; *************** function _ADC_StartConversion *****************
  2983 ;; Defined at:
  2984 ;;		line 36 in file "mcc_generated_files/adc.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;  channel         1    wreg     enum E8837
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  channel         1    1[COMRAM] enum E8837
  2989 ;; Return value:  Size  Location     Type
  2990 ;;		None               void
  2991 ;; Registers used:
  2992 ;;		wreg, status,2, status,0
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2998 ;;      Params:         0       0       0       0       0       0       0
  2999 ;;      Locals:         1       0       0       0       0       0       0
  3000 ;;      Temps:          1       0       0       0       0       0       0
  3001 ;;      Totals:         2       0       0       0       0       0       0
  3002 ;;Total ram usage:        2 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; This function calls:
  3005 ;;		Nothing
  3006 ;; This function is called by:
  3007 ;;		_ADC_ISR
  3008 ;;		_Battery_Read
  3009 ;;		_Temp_Read
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           	psect	text20
  3014  000994                     __ptext20:
  3015                           	opt stack 0
  3016  000994                     _ADC_StartConversion:
  3017                           	opt stack 25
  3018                           
  3019                           ;incstack = 0
  3020                           ;ADC_StartConversion@channel stored from wreg
  3021  000994  6E02               	movwf	ADC_StartConversion@channel,c
  3022                           
  3023                           ;adc.c: 39: ADCON0bits.CHS = channel;
  3024  000996  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  3025  00099A  4601               	rlncf	??_ADC_StartConversion,f,c
  3026  00099C  4601               	rlncf	??_ADC_StartConversion,f,c
  3027  00099E  50C2               	movf	4034,w,c	;volatile
  3028  0009A0  1801               	xorwf	??_ADC_StartConversion,w,c
  3029  0009A2  0B83               	andlw	-125
  3030  0009A4  1801               	xorwf	??_ADC_StartConversion,w,c
  3031  0009A6  6EC2               	movwf	4034,c	;volatile
  3032                           
  3033                           ;adc.c: 42: ADCON0bits.ADON = 1;
  3034  0009A8  80C2               	bsf	4034,0,c	;volatile
  3035                           
  3036                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
  3037  0009AA  82C2               	bsf	4034,1,c	;volatile
  3038  0009AC  0012               	return	
  3039  0009AE                     __end_of_ADC_StartConversion:
  3040                           	opt stack 0
  3041                           pclatu	equ	0xFFB
  3042                           pclath	equ	0xFFA
  3043                           tblptru	equ	0xFF8
  3044                           tblptrh	equ	0xFF7
  3045                           tblptrl	equ	0xFF6
  3046                           tablat	equ	0xFF5
  3047                           prodh	equ	0xFF4
  3048                           prodl	equ	0xFF3
  3049                           intcon	equ	0xFF2
  3050                           intcon2	equ	0xFF1
  3051                           postinc0	equ	0xFEE
  3052                           fsr0h	equ	0xFEA
  3053                           fsr0l	equ	0xFE9
  3054                           wreg	equ	0xFE8
  3055                           fsr1h	equ	0xFE2
  3056                           fsr1l	equ	0xFE1
  3057                           indf2	equ	0xFDF
  3058                           postinc2	equ	0xFDE
  3059                           postdec2	equ	0xFDD
  3060                           fsr2h	equ	0xFDA
  3061                           fsr2l	equ	0xFD9
  3062                           status	equ	0xFD8
  3063                           
  3064 ;; *************** function _ADC_GetConversionResult *****************
  3065 ;; Defined at:
  3066 ;;		line 55 in file "mcc_generated_files/adc.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  2    0[COMRAM] unsigned int 
  3073 ;; Registers used:
  3074 ;;		wreg, status,2, status,0
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3080 ;;      Params:         2       0       0       0       0       0       0
  3081 ;;      Locals:         0       0       0       0       0       0       0
  3082 ;;      Temps:          2       0       0       0       0       0       0
  3083 ;;      Totals:         4       0       0       0       0       0       0
  3084 ;;Total ram usage:        4 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; This function calls:
  3087 ;;		Nothing
  3088 ;; This function is called by:
  3089 ;;		_ADC_ISR
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text21
  3094  0009C6                     __ptext21:
  3095                           	opt stack 0
  3096  0009C6                     _ADC_GetConversionResult:
  3097                           	opt stack 25
  3098                           
  3099                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
  3100                           
  3101                           ;incstack = 0
  3102  0009C6  50C4               	movf	4036,w,c	;volatile
  3103  0009C8  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  3104  0009CA  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
  3105  0009CC  50C3               	movf	4035,w,c	;volatile
  3106  0009CE  2403               	addwf	??_ADC_GetConversionResult,w,c
  3107  0009D0  6E01               	movwf	?_ADC_GetConversionResult,c
  3108  0009D2  0E00               	movlw	0
  3109  0009D4  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
  3110  0009D6  6E02               	movwf	?_ADC_GetConversionResult+1,c
  3111  0009D8  0012               	return	
  3112  0009DA                     __end_of_ADC_GetConversionResult:
  3113                           	opt stack 0
  3114  0000                     pclatu	equ	0xFFB
  3115                           pclath	equ	0xFFA
  3116                           tblptru	equ	0xFF8
  3117                           tblptrh	equ	0xFF7
  3118                           tblptrl	equ	0xFF6
  3119                           tablat	equ	0xFF5
  3120                           prodh	equ	0xFF4
  3121                           prodl	equ	0xFF3
  3122                           intcon	equ	0xFF2
  3123                           intcon2	equ	0xFF1
  3124                           postinc0	equ	0xFEE
  3125                           fsr0h	equ	0xFEA
  3126                           fsr0l	equ	0xFE9
  3127                           wreg	equ	0xFE8
  3128                           fsr1h	equ	0xFE2
  3129                           fsr1l	equ	0xFE1
  3130                           indf2	equ	0xFDF
  3131                           postinc2	equ	0xFDE
  3132                           postdec2	equ	0xFDD
  3133                           fsr2h	equ	0xFDA
  3134                           fsr2l	equ	0xFD9
  3135                           status	equ	0xFD8
  3136                           pclatu	equ	0xFFB
  3137                           pclath	equ	0xFFA
  3138                           tblptru	equ	0xFF8
  3139                           tblptrh	equ	0xFF7
  3140                           tblptrl	equ	0xFF6
  3141                           tablat	equ	0xFF5
  3142                           prodh	equ	0xFF4
  3143                           prodl	equ	0xFF3
  3144                           intcon	equ	0xFF2
  3145                           intcon2	equ	0xFF1
  3146                           postinc0	equ	0xFEE
  3147                           fsr0h	equ	0xFEA
  3148                           fsr0l	equ	0xFE9
  3149                           wreg	equ	0xFE8
  3150                           fsr1h	equ	0xFE2
  3151                           fsr1l	equ	0xFE1
  3152                           indf2	equ	0xFDF
  3153                           postinc2	equ	0xFDE
  3154                           postdec2	equ	0xFDD
  3155                           fsr2h	equ	0xFDA
  3156                           fsr2l	equ	0xFD9
  3157                           status	equ	0xFD8
  3158                           
  3159                           	psect	rparam
  3160  0000                     pclatu	equ	0xFFB
  3161                           pclath	equ	0xFFA
  3162                           tblptru	equ	0xFF8
  3163                           tblptrh	equ	0xFF7
  3164                           tblptrl	equ	0xFF6
  3165                           tablat	equ	0xFF5
  3166                           prodh	equ	0xFF4
  3167                           prodl	equ	0xFF3
  3168                           intcon	equ	0xFF2
  3169                           intcon2	equ	0xFF1
  3170                           postinc0	equ	0xFEE
  3171                           fsr0h	equ	0xFEA
  3172                           fsr0l	equ	0xFE9
  3173                           wreg	equ	0xFE8
  3174                           fsr1h	equ	0xFE2
  3175                           fsr1l	equ	0xFE1
  3176                           indf2	equ	0xFDF
  3177                           postinc2	equ	0xFDE
  3178                           postdec2	equ	0xFDD
  3179                           fsr2h	equ	0xFDA
  3180                           fsr2l	equ	0xFD9
  3181                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         109
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     37      73
    BANK0           160     16      92
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _Temp_Fault->___ftge
    _Battery_Fault->___ftge
    ___ftge->___awtoft
    ___awtoft->___ftpack

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _ADC_ISR->_ADC_GetConversionResult

Critical Paths under _main in BANK0

    _main->_Battery_Fault
    _main->_Temp_Fault
    _Temp_Fault->___ftge
    _Battery_Fault->___ftge

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5    4877
                                             11 BANK0      5     0      5
                      _Battery_Fault
                  _SYSTEM_Initialize
                         _Temp_Fault
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           5     5      0    2423
                                              6 BANK0      5     5      0
                           ___awtoft
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        5     5      0    2454
                                              6 BANK0      5     5      0
                           ___awtoft
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     522
                                             34 COMRAM     3     3      0
                                              0 BANK0      6     0      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    1789
                                             30 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1494
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0     465
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             3     3      0       0
                                              0 COMRAM     3     3      0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR1_CallBack                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              4     4      0     465
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (6) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Fault
     ___awtoft
       ___ftpack
     ___ftge
       ___awtoft (ARG)
         ___ftpack
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Fault
     ___awtoft
       ___ftpack
     ___ftge
       ___awtoft (ARG)
         ___ftpack

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     10      5C       4       57.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     25      49       1       76.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5       9        0.0%
DATA                 0      0      A5      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Mar 25 23:19:25 2015

           _eusart1TxBufferRemaining 0049                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                      _timer1ReloadVal 0047  
                    __end_of_ADC_ISR 04F4                                  prod 000FF3  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                               l1850 06DC                                 l1842 06A6  
                               l1914 05CA                                 l1854 06F2  
                               l1846 06B4                                 l1856 0710  
                               l1848 06BE                                 l1880 0838  
                               l1928 07BE                                 l1858 071A  
                               l1938 0948                                 l1892 064E  
                               l1888 0610                                 l1898 0692  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 _TMR1 000FCE  
                               _WPUB 000F61                                 _main 0940  
                       ___ftpack@arg 0017                         ___ftpack@exp 001A  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                        __CFG_BORV$190 000000  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 00A8  
                      __CFG_IESO$OFF 000000                    ADC_ISR@ADC_Result 0007  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 09E8  
                              ?_main 00B7                      _TMR1_StartTimer 09F4  
                              _T1CON 000FCD                                _LATC0 007C58  
                              _LATC1 007C59                                _LATA6 007C4E  
                     __CFG_DEBUG$OFF 000000                                i2l122 08C8  
                              i2l270 0058                                i2l272 0064  
                              i2l276 006E                                i2l268 004C  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96     __size_of_ADC_GetConversionResult 0014  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
               _EUSART1_Transmit_ISR 0898                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR1_ISR 0994                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 0022  
                 __CFG_MCLRE$EXTMCLR 000000                        ___ftpack@sign 001B  
            __end_of_TMR1_Initialize 0940                          _Battery_Adc 0060  
                              tablat 000FF5                                status 000FD8  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
                    __initialization 08FC           __end_of_EUSART1_Initialize 0898  
                       __end_of_main 0960                            ??_ADC_ISR 0005  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 0026  
                      __activetblptr 000002           ADC_StartConversion@channel 0002  
              ?_EUSART1_Transmit_ISR 0001                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                   __end_of___awtoft 085C                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                   __end_of___ftpack 073E                               _T1GCON 000FCC  
                             _RC1REG 000FAE                               _RC1STA 000FAB  
                             i2l1610 00CA                               i2l1602 08F8  
                             i2l1702 048C                               i2l1630 019C  
                             i2l1622 0148                               i2l1614 00F4  
                             i2l1706 049A                               i2l1650 026E  
                             i2l1642 021A                               i2l1634 01C6  
                             i2l1626 0172                               i2l1618 011E  
                             i2l1708 04EE                               i2l1670 033C  
                             i2l1662 02E8                               i2l1646 0244  
                             i2l1638 01F0                               i2l1654 027C  
                     __CFG_WDTEN$OFF 000000                               i2l1656 02D0  
                             i2l1690 040E                               i2l1682 03BA  
                             i2l1674 0366                               i2l1666 0312  
                             i2l1658 02D4                               i2l1594 08D4  
                             i2l1588 08C4                               i2l1694 0438  
                             i2l1686 03E4                               i2l1678 0390  
                             i2l1698 0462                               _RCREG1 000FAE  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1REG 000FAD                               _TX1STA 000FAC  
                             _TXREG1 000FAD                           _Temp_Fault 073E  
                     __CFG_XINST$OFF 000000                               ___ftge 05D2  
            __end_of_TMR1_StartTimer 09F8                       __CFG_STVREN$ON 000000  
                             clear_0 0902                               clear_1 090E  
                       _Battery_Volt 0074                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                    _eusart1RxBuffer 009C        __size_of_INTERRUPT_Initialize 000C  
              __end_of_TMR1_CallBack 09FA                      _eusart1TxBuffer 00A4  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 0960  
                         __accesstop 0060              __end_of__initialization 0914  
                         ___ftge@ff1 00AC                           ___ftge@ff2 00AF  
                 ?_SYSTEM_Initialize 0001                           ___awtoft@c 001F  
       __size_of_ADC_StartConversion 001A                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0017                            ?_TMR1_ISR 0001  
             ??_EUSART1_Transmit_ISR 0001              _ADC_GetConversionResult 09C6  
        __end_of_EUSART1_Receive_ISR 08FC            __end_of_SYSTEM_Initialize 097A  
                      _eusart1RxHead 0043                        _eusart1TxHead 0045  
                      _eusart1RxTail 0044                           __pbssBANK0 0060  
                      _eusart1TxTail 0046                      __CFG_PLLCFG$OFF 000000  
                         __pnvCOMRAM 0047                          ?_Temp_Fault 0001  
                 __CFG_CCP2MX$PORTC1 000000                          Temp_Fault@i 00B5  
                            ?___ftge 00AC                     ?_TMR1_StartTimer 0001  
                         ??_TMR1_ISR 0001                   __CFG_CCP3MX$PORTB5 000000  
                            _ADC_ISR 00AC                            ?___awtoft 001F  
                          ?___ftpack 0017              __size_of_ADC_Initialize 0018  
             __size_of_Battery_Fault 00DE                      Temp_Fault@fault 00B4  
                     Battery_Fault@i 00B5                              _OSCCON2 000FD2  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                          _Temp_Aquire 0040  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
                            __Lparam 0000                      __size_of___ftge 00C4  
          ??_ADC_GetConversionResult 0003                              __pcinit 08FC  
                         ??___awtoft 0022                           ??___ftpack 001C  
                            __ramtop 0600                              __ptext0 0940  
                            __ptext1 073E                              __ptext2 0960  
                            __ptext3 091E                              __ptext4 09F4  
                            __ptext5 07C6                              __ptext6 09DA  
                            __ptext7 09E8                              __ptext8 085C  
                            __ptext9 09AE                            _T1CONbits 000FCD  
              _OSCILLATOR_Initialize 09DA                  __size_of_Temp_Fault 0088  
                 _EUSART1_Initialize 085C             ??_PIN_MANAGER_Initialize 0017  
         __size_of_SYSTEM_Initialize 001A                 end_of_initialization 0914  
                ?_EUSART1_Initialize 0001                        __Lmediumconst 0000  
                      _Battery_Fault 04F4                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
               ??_EUSART1_Initialize 0017                  _ADC_StartConversion 0994  
                        _Volt_Aquire 0041                       ?_Battery_Fault 0001  
               ?_ADC_StartConversion 0001         __end_of_INTERRUPT_Initialize 09F4  
                     __end_of___ftge 0696                    __size_of_TMR1_ISR 001A  
                     _ADC_Initialize 09AE               ?_OSCILLATOR_Initialize 0001  
                start_initialization 08FC      __size_of_PIN_MANAGER_Initialize 004E  
                       ??_Temp_Fault 00B2                            _Temp_DegF 0088  
                          _Temp_Done 003C                ??_ADC_StartConversion 0001  
           __size_of_TMR1_Initialize 0022                             ??___ftge 0023  
             __end_of_ADC_Initialize 09C6                             ?_ADC_ISR 0001  
             __size_of_TMR1_CallBack 0002                       _eusart1RxCount 0042  
                  __size_of___awtoft 0048                    __size_of___ftpack 00A8  
                          _Volt_Done 003E                          __pbssCOMRAM 0026  
      __size_of_EUSART1_Transmit_ISR 0034                        __pcstackBANK0 00AC  
                 __end_of_Temp_Fault 07C6                      ??_Battery_Fault 00B2  
       __size_of_EUSART1_Receive_ISR 0030               _PIN_MANAGER_Initialize 07C6  
                          __pintcode 0008                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 0009                             _BAUD1CON 000FB8  
           __size_of_TMR1_StartTimer 0004                 _INTERRUPT_Initialize 09E8  
                      _TMR1_CallBack 09F8                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 00A0  
                           _PIR1bits 000F9E                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 097A  
                  ??_TMR1_Initialize 0017                     __size_of_ADC_ISR 0448  
                         _ADCON0bits 000FC2                          _INTCON2bits 000FF1  
              ?_INTERRUPT_Initialize 0001                       ?_TMR1_CallBack 0001  
                           __Hrparam 0000                             _Temp_Adc 0026  
                           __Lrparam 0000             ?_ADC_GetConversionResult 0001  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 0017          __size_of_EUSART1_Initialize 003C  
                           ___awtoft 0814                             ___ftpack 0696  
                 Battery_Fault@fault 00B4                             __ptext10 04F4  
                           __ptext11 05D2                             __ptext20 0994  
                           __ptext12 0814                             __ptext21 09C6  
                           __ptext13 0696                           _T1GCONbits 000FCC  
                           __ptext15 097A                             __ptext16 09F8  
                           __ptext17 0898                             __ptext18 08CC  
                           __ptext19 00AC                    ??_TMR1_StartTimer 0017  
                      __size_of_main 0020                           _RC1STAbits 000FAB  
 __end_of_INTERRUPT_InterruptManager 00A8           _INTERRUPT_InterruptManager 0008  
                           main@argc 00B7                             main@argv 00B9  
                _EUSART1_Receive_ISR 08CC                           _INTCONbits 000FF2  
             ??_INTERRUPT_Initialize 0017                      ??_TMR1_CallBack 0001  
                           intlevel2 0000                 ?_EUSART1_Receive_ISR 0001  
        __end_of_ADC_StartConversion 09AE              ?_PIN_MANAGER_Initialize 0001  
    __end_of_ADC_GetConversionResult 09DA         __end_of_EUSART1_Transmit_ISR 08CC  
                   ??_ADC_Initialize 0017                    __CFG_T3CMX$PORTC0 000000  
              ??_EUSART1_Receive_ISR 0001       __end_of_PIN_MANAGER_Initialize 0814  
              __end_of_Battery_Fault 05D2                    __CFG_FOSC$INTIO67 000000  
                    _TMR1_Initialize 091E                     _ADC_Buffer_Point 003A  
